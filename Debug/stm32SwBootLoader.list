
stm32SwBootLoader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a544  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000118c  0800a6d8  0800a6d8  0001a6d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b864  0800b864  00020230  2**0
                  CONTENTS
  4 .ARM          00000008  0800b864  0800b864  0001b864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b86c  0800b86c  00020230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b86c  0800b86c  0001b86c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b870  0800b870  0001b870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  0800b874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020230  2**0
                  CONTENTS
 10 .bss          00001b80  20000230  20000230  00020230  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001db0  20001db0  00020230  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015a16  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003201  00000000  00000000  00035c76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c80  00000000  00000000  00038e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bc8  00000000  00000000  00039af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021a5b  00000000  00000000  0003a6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010eb6  00000000  00000000  0005c11b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7477  00000000  00000000  0006cfd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00134448  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000047c4  00000000  00000000  0013449c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000230 	.word	0x20000230
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a6bc 	.word	0x0800a6bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000234 	.word	0x20000234
 80001cc:	0800a6bc 	.word	0x0800a6bc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, 10);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	230a      	movs	r3, #10
 8000ffe:	68b9      	ldr	r1, [r7, #8]
 8001000:	4803      	ldr	r0, [pc, #12]	; (8001010 <_write+0x24>)
 8001002:	f002 fb72 	bl	80036ea <HAL_UART_Transmit>
  return len;
 8001006:	687b      	ldr	r3, [r7, #4]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	2000055c 	.word	0x2000055c

08001014 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <main+0x38>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f005 fdb3 	bl	8006b8c <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001026:	f000 fd49 	bl	8001abc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800102a:	f000 f811 	bl	8001050 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102e:	f000 f94d 	bl	80012cc <MX_GPIO_Init>
  MX_DMA_Init();
 8001032:	f000 f8f5 	bl	8001220 <MX_DMA_Init>
  MX_UART4_Init();
 8001036:	f000 f875 	bl	8001124 <MX_UART4_Init>
  MX_USART2_UART_Init();
 800103a:	f000 f8c7 	bl	80011cc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800103e:	f000 f89b 	bl	8001178 <MX_USART1_UART_Init>

#if (USE_HOST_BOOTLOADER == 1)
  hostUartBootLoaderConfiguration();
#endif
#if (USE_DEVICE_BOOTLOADER == 1)
  uartBootLoaderConfiguration();
 8001042:	f003 ff73 	bl	8004f2c <uartBootLoaderConfiguration>

#if (USE_HOST_BOOTLOADER == 1)
	  hostUartBootLoaderProcess();
#endif
#if (USE_DEVICE_BOOTLOADER == 1)
	  uartBootLoaderProcess();
 8001046:	f004 fcef 	bl	8005a28 <uartBootLoaderProcess>
 800104a:	e7fc      	b.n	8001046 <main+0x32>
 800104c:	2000005c 	.word	0x2000005c

08001050 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b094      	sub	sp, #80	; 0x50
 8001054:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001056:	f107 0320 	add.w	r3, r7, #32
 800105a:	2230      	movs	r2, #48	; 0x30
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f004 fdba 	bl	8005bd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001074:	2300      	movs	r3, #0
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	4b28      	ldr	r3, [pc, #160]	; (800111c <SystemClock_Config+0xcc>)
 800107a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107c:	4a27      	ldr	r2, [pc, #156]	; (800111c <SystemClock_Config+0xcc>)
 800107e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001082:	6413      	str	r3, [r2, #64]	; 0x40
 8001084:	4b25      	ldr	r3, [pc, #148]	; (800111c <SystemClock_Config+0xcc>)
 8001086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001090:	2300      	movs	r3, #0
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	4b22      	ldr	r3, [pc, #136]	; (8001120 <SystemClock_Config+0xd0>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a21      	ldr	r2, [pc, #132]	; (8001120 <SystemClock_Config+0xd0>)
 800109a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800109e:	6013      	str	r3, [r2, #0]
 80010a0:	4b1f      	ldr	r3, [pc, #124]	; (8001120 <SystemClock_Config+0xd0>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010ac:	2301      	movs	r3, #1
 80010ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b6:	2302      	movs	r3, #2
 80010b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010c0:	2304      	movs	r3, #4
 80010c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010c4:	23a8      	movs	r3, #168	; 0xa8
 80010c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010c8:	2302      	movs	r3, #2
 80010ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010cc:	2304      	movs	r3, #4
 80010ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d0:	f107 0320 	add.w	r3, r7, #32
 80010d4:	4618      	mov	r0, r3
 80010d6:	f001 fe47 	bl	8002d68 <HAL_RCC_OscConfig>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010e0:	f000 f946 	bl	8001370 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e4:	230f      	movs	r3, #15
 80010e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e8:	2302      	movs	r3, #2
 80010ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010fc:	f107 030c 	add.w	r3, r7, #12
 8001100:	2105      	movs	r1, #5
 8001102:	4618      	mov	r0, r3
 8001104:	f002 f8a8 	bl	8003258 <HAL_RCC_ClockConfig>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800110e:	f000 f92f 	bl	8001370 <Error_Handler>
  }
}
 8001112:	bf00      	nop
 8001114:	3750      	adds	r7, #80	; 0x50
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40023800 	.word	0x40023800
 8001120:	40007000 	.word	0x40007000

08001124 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001128:	4b11      	ldr	r3, [pc, #68]	; (8001170 <MX_UART4_Init+0x4c>)
 800112a:	4a12      	ldr	r2, [pc, #72]	; (8001174 <MX_UART4_Init+0x50>)
 800112c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800112e:	4b10      	ldr	r3, [pc, #64]	; (8001170 <MX_UART4_Init+0x4c>)
 8001130:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001134:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <MX_UART4_Init+0x4c>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <MX_UART4_Init+0x4c>)
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <MX_UART4_Init+0x4c>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <MX_UART4_Init+0x4c>)
 800114a:	220c      	movs	r2, #12
 800114c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114e:	4b08      	ldr	r3, [pc, #32]	; (8001170 <MX_UART4_Init+0x4c>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <MX_UART4_Init+0x4c>)
 8001156:	2200      	movs	r2, #0
 8001158:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800115a:	4805      	ldr	r0, [pc, #20]	; (8001170 <MX_UART4_Init+0x4c>)
 800115c:	f002 fa78 	bl	8003650 <HAL_UART_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001166:	f000 f903 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200005a0 	.word	0x200005a0
 8001174:	40004c00 	.word	0x40004c00

08001178 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <MX_USART1_UART_Init+0x4c>)
 800117e:	4a12      	ldr	r2, [pc, #72]	; (80011c8 <MX_USART1_UART_Init+0x50>)
 8001180:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001182:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <MX_USART1_UART_Init+0x4c>)
 8001184:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001188:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800118a:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <MX_USART1_UART_Init+0x4c>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <MX_USART1_UART_Init+0x4c>)
 8001192:	2200      	movs	r2, #0
 8001194:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001196:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <MX_USART1_UART_Init+0x4c>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800119c:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <MX_USART1_UART_Init+0x4c>)
 800119e:	220c      	movs	r2, #12
 80011a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011a2:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <MX_USART1_UART_Init+0x4c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <MX_USART1_UART_Init+0x4c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011ae:	4805      	ldr	r0, [pc, #20]	; (80011c4 <MX_USART1_UART_Init+0x4c>)
 80011b0:	f002 fa4e 	bl	8003650 <HAL_UART_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011ba:	f000 f8d9 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	2000055c 	.word	0x2000055c
 80011c8:	40011000 	.word	0x40011000

080011cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011d2:	4a12      	ldr	r2, [pc, #72]	; (800121c <MX_USART2_UART_Init+0x50>)
 80011d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011ea:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011f0:	4b09      	ldr	r3, [pc, #36]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011f2:	220c      	movs	r2, #12
 80011f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f6:	4b08      	ldr	r3, [pc, #32]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001202:	4805      	ldr	r0, [pc, #20]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 8001204:	f002 fa24 	bl	8003650 <HAL_UART_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800120e:	f000 f8af 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	200005e4 	.word	0x200005e4
 800121c:	40004400 	.word	0x40004400

08001220 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	4b27      	ldr	r3, [pc, #156]	; (80012c8 <MX_DMA_Init+0xa8>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a26      	ldr	r2, [pc, #152]	; (80012c8 <MX_DMA_Init+0xa8>)
 8001230:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b24      	ldr	r3, [pc, #144]	; (80012c8 <MX_DMA_Init+0xa8>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	603b      	str	r3, [r7, #0]
 8001246:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <MX_DMA_Init+0xa8>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a1f      	ldr	r2, [pc, #124]	; (80012c8 <MX_DMA_Init+0xa8>)
 800124c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <MX_DMA_Init+0xa8>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800125a:	603b      	str	r3, [r7, #0]
 800125c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2100      	movs	r1, #0
 8001262:	200d      	movs	r0, #13
 8001264:	f000 fd9b 	bl	8001d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001268:	200d      	movs	r0, #13
 800126a:	f000 fdb4 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800126e:	2200      	movs	r2, #0
 8001270:	2100      	movs	r1, #0
 8001272:	200f      	movs	r0, #15
 8001274:	f000 fd93 	bl	8001d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001278:	200f      	movs	r0, #15
 800127a:	f000 fdac 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	2100      	movs	r1, #0
 8001282:	2010      	movs	r0, #16
 8001284:	f000 fd8b 	bl	8001d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001288:	2010      	movs	r0, #16
 800128a:	f000 fda4 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	2100      	movs	r1, #0
 8001292:	2011      	movs	r0, #17
 8001294:	f000 fd83 	bl	8001d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001298:	2011      	movs	r0, #17
 800129a:	f000 fd9c 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800129e:	2200      	movs	r2, #0
 80012a0:	2100      	movs	r1, #0
 80012a2:	203a      	movs	r0, #58	; 0x3a
 80012a4:	f000 fd7b 	bl	8001d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80012a8:	203a      	movs	r0, #58	; 0x3a
 80012aa:	f000 fd94 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2100      	movs	r1, #0
 80012b2:	2046      	movs	r0, #70	; 0x46
 80012b4:	f000 fd73 	bl	8001d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80012b8:	2046      	movs	r0, #70	; 0x46
 80012ba:	f000 fd8c 	bl	8001dd6 <HAL_NVIC_EnableIRQ>

}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40023800 	.word	0x40023800

080012cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b088      	sub	sp, #32
 80012d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d2:	f107 030c 	add.w	r3, r7, #12
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
 80012e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	4b20      	ldr	r3, [pc, #128]	; (8001368 <MX_GPIO_Init+0x9c>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a1f      	ldr	r2, [pc, #124]	; (8001368 <MX_GPIO_Init+0x9c>)
 80012ec:	f043 0304 	orr.w	r3, r3, #4
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <MX_GPIO_Init+0x9c>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0304 	and.w	r3, r3, #4
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	4b19      	ldr	r3, [pc, #100]	; (8001368 <MX_GPIO_Init+0x9c>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a18      	ldr	r2, [pc, #96]	; (8001368 <MX_GPIO_Init+0x9c>)
 8001308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b16      	ldr	r3, [pc, #88]	; (8001368 <MX_GPIO_Init+0x9c>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	603b      	str	r3, [r7, #0]
 800131e:	4b12      	ldr	r3, [pc, #72]	; (8001368 <MX_GPIO_Init+0x9c>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a11      	ldr	r2, [pc, #68]	; (8001368 <MX_GPIO_Init+0x9c>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <MX_GPIO_Init+0x9c>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	603b      	str	r3, [r7, #0]
 8001334:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 8001336:	2201      	movs	r2, #1
 8001338:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800133c:	480b      	ldr	r0, [pc, #44]	; (800136c <MX_GPIO_Init+0xa0>)
 800133e:	f001 fcf9 	bl	8002d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001342:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001346:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001348:	2301      	movs	r3, #1
 800134a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001350:	2300      	movs	r3, #0
 8001352:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001354:	f107 030c 	add.w	r3, r7, #12
 8001358:	4619      	mov	r1, r3
 800135a:	4804      	ldr	r0, [pc, #16]	; (800136c <MX_GPIO_Init+0xa0>)
 800135c:	f001 fb4e 	bl	80029fc <HAL_GPIO_Init>

}
 8001360:	bf00      	nop
 8001362:	3720      	adds	r7, #32
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40023800 	.word	0x40023800
 800136c:	40020800 	.word	0x40020800

08001370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001374:	b672      	cpsid	i
}
 8001376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("\n[Error_Handler] ......\n");
 8001378:	4803      	ldr	r0, [pc, #12]	; (8001388 <Error_Handler+0x18>)
 800137a:	f005 fbef 	bl	8006b5c <puts>
	  HAL_Delay(1000);
 800137e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001382:	f000 fc0d 	bl	8001ba0 <HAL_Delay>
	  printf("\n[Error_Handler] ......\n");
 8001386:	e7f7      	b.n	8001378 <Error_Handler+0x8>
 8001388:	0800a6d8 	.word	0x0800a6d8

0800138c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <HAL_MspInit+0x4c>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	4a0f      	ldr	r2, [pc, #60]	; (80013d8 <HAL_MspInit+0x4c>)
 800139c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a0:	6453      	str	r3, [r2, #68]	; 0x44
 80013a2:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <HAL_MspInit+0x4c>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	603b      	str	r3, [r7, #0]
 80013b2:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <HAL_MspInit+0x4c>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	4a08      	ldr	r2, [pc, #32]	; (80013d8 <HAL_MspInit+0x4c>)
 80013b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013bc:	6413      	str	r3, [r2, #64]	; 0x40
 80013be:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <HAL_MspInit+0x4c>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c6:	603b      	str	r3, [r7, #0]
 80013c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	40023800 	.word	0x40023800

080013dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08e      	sub	sp, #56	; 0x38
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a98      	ldr	r2, [pc, #608]	; (800165c <HAL_UART_MspInit+0x280>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	f040 8095 	bne.w	800152a <HAL_UART_MspInit+0x14e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001400:	2300      	movs	r3, #0
 8001402:	623b      	str	r3, [r7, #32]
 8001404:	4b96      	ldr	r3, [pc, #600]	; (8001660 <HAL_UART_MspInit+0x284>)
 8001406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001408:	4a95      	ldr	r2, [pc, #596]	; (8001660 <HAL_UART_MspInit+0x284>)
 800140a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800140e:	6413      	str	r3, [r2, #64]	; 0x40
 8001410:	4b93      	ldr	r3, [pc, #588]	; (8001660 <HAL_UART_MspInit+0x284>)
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001418:	623b      	str	r3, [r7, #32]
 800141a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800141c:	2300      	movs	r3, #0
 800141e:	61fb      	str	r3, [r7, #28]
 8001420:	4b8f      	ldr	r3, [pc, #572]	; (8001660 <HAL_UART_MspInit+0x284>)
 8001422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001424:	4a8e      	ldr	r2, [pc, #568]	; (8001660 <HAL_UART_MspInit+0x284>)
 8001426:	f043 0304 	orr.w	r3, r3, #4
 800142a:	6313      	str	r3, [r2, #48]	; 0x30
 800142c:	4b8c      	ldr	r3, [pc, #560]	; (8001660 <HAL_UART_MspInit+0x284>)
 800142e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	61fb      	str	r3, [r7, #28]
 8001436:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001438:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143e:	2302      	movs	r3, #2
 8001440:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001446:	2303      	movs	r3, #3
 8001448:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800144a:	2308      	movs	r3, #8
 800144c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800144e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001452:	4619      	mov	r1, r3
 8001454:	4883      	ldr	r0, [pc, #524]	; (8001664 <HAL_UART_MspInit+0x288>)
 8001456:	f001 fad1 	bl	80029fc <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800145a:	4b83      	ldr	r3, [pc, #524]	; (8001668 <HAL_UART_MspInit+0x28c>)
 800145c:	4a83      	ldr	r2, [pc, #524]	; (800166c <HAL_UART_MspInit+0x290>)
 800145e:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8001460:	4b81      	ldr	r3, [pc, #516]	; (8001668 <HAL_UART_MspInit+0x28c>)
 8001462:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001466:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001468:	4b7f      	ldr	r3, [pc, #508]	; (8001668 <HAL_UART_MspInit+0x28c>)
 800146a:	2240      	movs	r2, #64	; 0x40
 800146c:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800146e:	4b7e      	ldr	r3, [pc, #504]	; (8001668 <HAL_UART_MspInit+0x28c>)
 8001470:	2200      	movs	r2, #0
 8001472:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001474:	4b7c      	ldr	r3, [pc, #496]	; (8001668 <HAL_UART_MspInit+0x28c>)
 8001476:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800147a:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800147c:	4b7a      	ldr	r3, [pc, #488]	; (8001668 <HAL_UART_MspInit+0x28c>)
 800147e:	2200      	movs	r2, #0
 8001480:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001482:	4b79      	ldr	r3, [pc, #484]	; (8001668 <HAL_UART_MspInit+0x28c>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001488:	4b77      	ldr	r3, [pc, #476]	; (8001668 <HAL_UART_MspInit+0x28c>)
 800148a:	2200      	movs	r2, #0
 800148c:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800148e:	4b76      	ldr	r3, [pc, #472]	; (8001668 <HAL_UART_MspInit+0x28c>)
 8001490:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001494:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001496:	4b74      	ldr	r3, [pc, #464]	; (8001668 <HAL_UART_MspInit+0x28c>)
 8001498:	2200      	movs	r2, #0
 800149a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800149c:	4872      	ldr	r0, [pc, #456]	; (8001668 <HAL_UART_MspInit+0x28c>)
 800149e:	f000 fcb5 	bl	8001e0c <HAL_DMA_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80014a8:	f7ff ff62 	bl	8001370 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4a6e      	ldr	r2, [pc, #440]	; (8001668 <HAL_UART_MspInit+0x28c>)
 80014b0:	635a      	str	r2, [r3, #52]	; 0x34
 80014b2:	4a6d      	ldr	r2, [pc, #436]	; (8001668 <HAL_UART_MspInit+0x28c>)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80014b8:	4b6d      	ldr	r3, [pc, #436]	; (8001670 <HAL_UART_MspInit+0x294>)
 80014ba:	4a6e      	ldr	r2, [pc, #440]	; (8001674 <HAL_UART_MspInit+0x298>)
 80014bc:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80014be:	4b6c      	ldr	r3, [pc, #432]	; (8001670 <HAL_UART_MspInit+0x294>)
 80014c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014c4:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014c6:	4b6a      	ldr	r3, [pc, #424]	; (8001670 <HAL_UART_MspInit+0x294>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014cc:	4b68      	ldr	r3, [pc, #416]	; (8001670 <HAL_UART_MspInit+0x294>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014d2:	4b67      	ldr	r3, [pc, #412]	; (8001670 <HAL_UART_MspInit+0x294>)
 80014d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014d8:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014da:	4b65      	ldr	r3, [pc, #404]	; (8001670 <HAL_UART_MspInit+0x294>)
 80014dc:	2200      	movs	r2, #0
 80014de:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014e0:	4b63      	ldr	r3, [pc, #396]	; (8001670 <HAL_UART_MspInit+0x294>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80014e6:	4b62      	ldr	r3, [pc, #392]	; (8001670 <HAL_UART_MspInit+0x294>)
 80014e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014ec:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80014ee:	4b60      	ldr	r3, [pc, #384]	; (8001670 <HAL_UART_MspInit+0x294>)
 80014f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014f4:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014f6:	4b5e      	ldr	r3, [pc, #376]	; (8001670 <HAL_UART_MspInit+0x294>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80014fc:	485c      	ldr	r0, [pc, #368]	; (8001670 <HAL_UART_MspInit+0x294>)
 80014fe:	f000 fc85 	bl	8001e0c <HAL_DMA_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 8001508:	f7ff ff32 	bl	8001370 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a58      	ldr	r2, [pc, #352]	; (8001670 <HAL_UART_MspInit+0x294>)
 8001510:	639a      	str	r2, [r3, #56]	; 0x38
 8001512:	4a57      	ldr	r2, [pc, #348]	; (8001670 <HAL_UART_MspInit+0x294>)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001518:	2200      	movs	r2, #0
 800151a:	2100      	movs	r1, #0
 800151c:	2034      	movs	r0, #52	; 0x34
 800151e:	f000 fc3e 	bl	8001d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001522:	2034      	movs	r0, #52	; 0x34
 8001524:	f000 fc57 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001528:	e14b      	b.n	80017c2 <HAL_UART_MspInit+0x3e6>
  else if(huart->Instance==USART1)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a52      	ldr	r2, [pc, #328]	; (8001678 <HAL_UART_MspInit+0x29c>)
 8001530:	4293      	cmp	r3, r2
 8001532:	f040 80ad 	bne.w	8001690 <HAL_UART_MspInit+0x2b4>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	61bb      	str	r3, [r7, #24]
 800153a:	4b49      	ldr	r3, [pc, #292]	; (8001660 <HAL_UART_MspInit+0x284>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153e:	4a48      	ldr	r2, [pc, #288]	; (8001660 <HAL_UART_MspInit+0x284>)
 8001540:	f043 0310 	orr.w	r3, r3, #16
 8001544:	6453      	str	r3, [r2, #68]	; 0x44
 8001546:	4b46      	ldr	r3, [pc, #280]	; (8001660 <HAL_UART_MspInit+0x284>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	f003 0310 	and.w	r3, r3, #16
 800154e:	61bb      	str	r3, [r7, #24]
 8001550:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	4b42      	ldr	r3, [pc, #264]	; (8001660 <HAL_UART_MspInit+0x284>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a41      	ldr	r2, [pc, #260]	; (8001660 <HAL_UART_MspInit+0x284>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b3f      	ldr	r3, [pc, #252]	; (8001660 <HAL_UART_MspInit+0x284>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800156e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001574:	2302      	movs	r3, #2
 8001576:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157c:	2303      	movs	r3, #3
 800157e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001580:	2307      	movs	r3, #7
 8001582:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001584:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001588:	4619      	mov	r1, r3
 800158a:	483c      	ldr	r0, [pc, #240]	; (800167c <HAL_UART_MspInit+0x2a0>)
 800158c:	f001 fa36 	bl	80029fc <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001590:	4b3b      	ldr	r3, [pc, #236]	; (8001680 <HAL_UART_MspInit+0x2a4>)
 8001592:	4a3c      	ldr	r2, [pc, #240]	; (8001684 <HAL_UART_MspInit+0x2a8>)
 8001594:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001596:	4b3a      	ldr	r3, [pc, #232]	; (8001680 <HAL_UART_MspInit+0x2a4>)
 8001598:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800159c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800159e:	4b38      	ldr	r3, [pc, #224]	; (8001680 <HAL_UART_MspInit+0x2a4>)
 80015a0:	2240      	movs	r2, #64	; 0x40
 80015a2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015a4:	4b36      	ldr	r3, [pc, #216]	; (8001680 <HAL_UART_MspInit+0x2a4>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015aa:	4b35      	ldr	r3, [pc, #212]	; (8001680 <HAL_UART_MspInit+0x2a4>)
 80015ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015b0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015b2:	4b33      	ldr	r3, [pc, #204]	; (8001680 <HAL_UART_MspInit+0x2a4>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015b8:	4b31      	ldr	r3, [pc, #196]	; (8001680 <HAL_UART_MspInit+0x2a4>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80015be:	4b30      	ldr	r3, [pc, #192]	; (8001680 <HAL_UART_MspInit+0x2a4>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015c4:	4b2e      	ldr	r3, [pc, #184]	; (8001680 <HAL_UART_MspInit+0x2a4>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015ca:	4b2d      	ldr	r3, [pc, #180]	; (8001680 <HAL_UART_MspInit+0x2a4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80015d0:	482b      	ldr	r0, [pc, #172]	; (8001680 <HAL_UART_MspInit+0x2a4>)
 80015d2:	f000 fc1b 	bl	8001e0c <HAL_DMA_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <HAL_UART_MspInit+0x204>
      Error_Handler();
 80015dc:	f7ff fec8 	bl	8001370 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a27      	ldr	r2, [pc, #156]	; (8001680 <HAL_UART_MspInit+0x2a4>)
 80015e4:	635a      	str	r2, [r3, #52]	; 0x34
 80015e6:	4a26      	ldr	r2, [pc, #152]	; (8001680 <HAL_UART_MspInit+0x2a4>)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80015ec:	4b26      	ldr	r3, [pc, #152]	; (8001688 <HAL_UART_MspInit+0x2ac>)
 80015ee:	4a27      	ldr	r2, [pc, #156]	; (800168c <HAL_UART_MspInit+0x2b0>)
 80015f0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80015f2:	4b25      	ldr	r3, [pc, #148]	; (8001688 <HAL_UART_MspInit+0x2ac>)
 80015f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015f8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015fa:	4b23      	ldr	r3, [pc, #140]	; (8001688 <HAL_UART_MspInit+0x2ac>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001600:	4b21      	ldr	r3, [pc, #132]	; (8001688 <HAL_UART_MspInit+0x2ac>)
 8001602:	2200      	movs	r2, #0
 8001604:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001606:	4b20      	ldr	r3, [pc, #128]	; (8001688 <HAL_UART_MspInit+0x2ac>)
 8001608:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800160c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800160e:	4b1e      	ldr	r3, [pc, #120]	; (8001688 <HAL_UART_MspInit+0x2ac>)
 8001610:	2200      	movs	r2, #0
 8001612:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001614:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <HAL_UART_MspInit+0x2ac>)
 8001616:	2200      	movs	r2, #0
 8001618:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800161a:	4b1b      	ldr	r3, [pc, #108]	; (8001688 <HAL_UART_MspInit+0x2ac>)
 800161c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001620:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001622:	4b19      	ldr	r3, [pc, #100]	; (8001688 <HAL_UART_MspInit+0x2ac>)
 8001624:	2200      	movs	r2, #0
 8001626:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001628:	4b17      	ldr	r3, [pc, #92]	; (8001688 <HAL_UART_MspInit+0x2ac>)
 800162a:	2200      	movs	r2, #0
 800162c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800162e:	4816      	ldr	r0, [pc, #88]	; (8001688 <HAL_UART_MspInit+0x2ac>)
 8001630:	f000 fbec 	bl	8001e0c <HAL_DMA_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_UART_MspInit+0x262>
      Error_Handler();
 800163a:	f7ff fe99 	bl	8001370 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a11      	ldr	r2, [pc, #68]	; (8001688 <HAL_UART_MspInit+0x2ac>)
 8001642:	639a      	str	r2, [r3, #56]	; 0x38
 8001644:	4a10      	ldr	r2, [pc, #64]	; (8001688 <HAL_UART_MspInit+0x2ac>)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800164a:	2200      	movs	r2, #0
 800164c:	2100      	movs	r1, #0
 800164e:	2025      	movs	r0, #37	; 0x25
 8001650:	f000 fba5 	bl	8001d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001654:	2025      	movs	r0, #37	; 0x25
 8001656:	f000 fbbe 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
}
 800165a:	e0b2      	b.n	80017c2 <HAL_UART_MspInit+0x3e6>
 800165c:	40004c00 	.word	0x40004c00
 8001660:	40023800 	.word	0x40023800
 8001664:	40020800 	.word	0x40020800
 8001668:	20000628 	.word	0x20000628
 800166c:	40026070 	.word	0x40026070
 8001670:	2000037c 	.word	0x2000037c
 8001674:	40026040 	.word	0x40026040
 8001678:	40011000 	.word	0x40011000
 800167c:	40020000 	.word	0x40020000
 8001680:	2000043c 	.word	0x2000043c
 8001684:	400264b8 	.word	0x400264b8
 8001688:	2000049c 	.word	0x2000049c
 800168c:	40026440 	.word	0x40026440
  else if(huart->Instance==USART2)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a4d      	ldr	r2, [pc, #308]	; (80017cc <HAL_UART_MspInit+0x3f0>)
 8001696:	4293      	cmp	r3, r2
 8001698:	f040 8093 	bne.w	80017c2 <HAL_UART_MspInit+0x3e6>
    __HAL_RCC_USART2_CLK_ENABLE();
 800169c:	2300      	movs	r3, #0
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	4b4b      	ldr	r3, [pc, #300]	; (80017d0 <HAL_UART_MspInit+0x3f4>)
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a4:	4a4a      	ldr	r2, [pc, #296]	; (80017d0 <HAL_UART_MspInit+0x3f4>)
 80016a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016aa:	6413      	str	r3, [r2, #64]	; 0x40
 80016ac:	4b48      	ldr	r3, [pc, #288]	; (80017d0 <HAL_UART_MspInit+0x3f4>)
 80016ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b4:	613b      	str	r3, [r7, #16]
 80016b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b8:	2300      	movs	r3, #0
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	4b44      	ldr	r3, [pc, #272]	; (80017d0 <HAL_UART_MspInit+0x3f4>)
 80016be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c0:	4a43      	ldr	r2, [pc, #268]	; (80017d0 <HAL_UART_MspInit+0x3f4>)
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	6313      	str	r3, [r2, #48]	; 0x30
 80016c8:	4b41      	ldr	r3, [pc, #260]	; (80017d0 <HAL_UART_MspInit+0x3f4>)
 80016ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016d4:	230c      	movs	r3, #12
 80016d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e0:	2303      	movs	r3, #3
 80016e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016e4:	2307      	movs	r3, #7
 80016e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ec:	4619      	mov	r1, r3
 80016ee:	4839      	ldr	r0, [pc, #228]	; (80017d4 <HAL_UART_MspInit+0x3f8>)
 80016f0:	f001 f984 	bl	80029fc <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80016f4:	4b38      	ldr	r3, [pc, #224]	; (80017d8 <HAL_UART_MspInit+0x3fc>)
 80016f6:	4a39      	ldr	r2, [pc, #228]	; (80017dc <HAL_UART_MspInit+0x400>)
 80016f8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80016fa:	4b37      	ldr	r3, [pc, #220]	; (80017d8 <HAL_UART_MspInit+0x3fc>)
 80016fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001700:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001702:	4b35      	ldr	r3, [pc, #212]	; (80017d8 <HAL_UART_MspInit+0x3fc>)
 8001704:	2240      	movs	r2, #64	; 0x40
 8001706:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001708:	4b33      	ldr	r3, [pc, #204]	; (80017d8 <HAL_UART_MspInit+0x3fc>)
 800170a:	2200      	movs	r2, #0
 800170c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800170e:	4b32      	ldr	r3, [pc, #200]	; (80017d8 <HAL_UART_MspInit+0x3fc>)
 8001710:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001714:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001716:	4b30      	ldr	r3, [pc, #192]	; (80017d8 <HAL_UART_MspInit+0x3fc>)
 8001718:	2200      	movs	r2, #0
 800171a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800171c:	4b2e      	ldr	r3, [pc, #184]	; (80017d8 <HAL_UART_MspInit+0x3fc>)
 800171e:	2200      	movs	r2, #0
 8001720:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001722:	4b2d      	ldr	r3, [pc, #180]	; (80017d8 <HAL_UART_MspInit+0x3fc>)
 8001724:	2200      	movs	r2, #0
 8001726:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001728:	4b2b      	ldr	r3, [pc, #172]	; (80017d8 <HAL_UART_MspInit+0x3fc>)
 800172a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800172e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001730:	4b29      	ldr	r3, [pc, #164]	; (80017d8 <HAL_UART_MspInit+0x3fc>)
 8001732:	2200      	movs	r2, #0
 8001734:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001736:	4828      	ldr	r0, [pc, #160]	; (80017d8 <HAL_UART_MspInit+0x3fc>)
 8001738:	f000 fb68 	bl	8001e0c <HAL_DMA_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <HAL_UART_MspInit+0x36a>
      Error_Handler();
 8001742:	f7ff fe15 	bl	8001370 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a23      	ldr	r2, [pc, #140]	; (80017d8 <HAL_UART_MspInit+0x3fc>)
 800174a:	635a      	str	r2, [r3, #52]	; 0x34
 800174c:	4a22      	ldr	r2, [pc, #136]	; (80017d8 <HAL_UART_MspInit+0x3fc>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001752:	4b23      	ldr	r3, [pc, #140]	; (80017e0 <HAL_UART_MspInit+0x404>)
 8001754:	4a23      	ldr	r2, [pc, #140]	; (80017e4 <HAL_UART_MspInit+0x408>)
 8001756:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001758:	4b21      	ldr	r3, [pc, #132]	; (80017e0 <HAL_UART_MspInit+0x404>)
 800175a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800175e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001760:	4b1f      	ldr	r3, [pc, #124]	; (80017e0 <HAL_UART_MspInit+0x404>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001766:	4b1e      	ldr	r3, [pc, #120]	; (80017e0 <HAL_UART_MspInit+0x404>)
 8001768:	2200      	movs	r2, #0
 800176a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800176c:	4b1c      	ldr	r3, [pc, #112]	; (80017e0 <HAL_UART_MspInit+0x404>)
 800176e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001772:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001774:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <HAL_UART_MspInit+0x404>)
 8001776:	2200      	movs	r2, #0
 8001778:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800177a:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <HAL_UART_MspInit+0x404>)
 800177c:	2200      	movs	r2, #0
 800177e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001780:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <HAL_UART_MspInit+0x404>)
 8001782:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001786:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001788:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <HAL_UART_MspInit+0x404>)
 800178a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800178e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001790:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <HAL_UART_MspInit+0x404>)
 8001792:	2200      	movs	r2, #0
 8001794:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001796:	4812      	ldr	r0, [pc, #72]	; (80017e0 <HAL_UART_MspInit+0x404>)
 8001798:	f000 fb38 	bl	8001e0c <HAL_DMA_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <HAL_UART_MspInit+0x3ca>
      Error_Handler();
 80017a2:	f7ff fde5 	bl	8001370 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a0d      	ldr	r2, [pc, #52]	; (80017e0 <HAL_UART_MspInit+0x404>)
 80017aa:	639a      	str	r2, [r3, #56]	; 0x38
 80017ac:	4a0c      	ldr	r2, [pc, #48]	; (80017e0 <HAL_UART_MspInit+0x404>)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2100      	movs	r1, #0
 80017b6:	2026      	movs	r0, #38	; 0x26
 80017b8:	f000 faf1 	bl	8001d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017bc:	2026      	movs	r0, #38	; 0x26
 80017be:	f000 fb0a 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
}
 80017c2:	bf00      	nop
 80017c4:	3738      	adds	r7, #56	; 0x38
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40004400 	.word	0x40004400
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40020000 	.word	0x40020000
 80017d8:	200004fc 	.word	0x200004fc
 80017dc:	400260a0 	.word	0x400260a0
 80017e0:	200003dc 	.word	0x200003dc
 80017e4:	40026088 	.word	0x40026088

080017e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017ec:	e7fe      	b.n	80017ec <NMI_Handler+0x4>

080017ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f2:	e7fe      	b.n	80017f2 <HardFault_Handler+0x4>

080017f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <MemManage_Handler+0x4>

080017fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017fe:	e7fe      	b.n	80017fe <BusFault_Handler+0x4>

08001800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001804:	e7fe      	b.n	8001804 <UsageFault_Handler+0x4>

08001806 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001834:	f000 f994 	bl	8001b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}

0800183c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001840:	4802      	ldr	r0, [pc, #8]	; (800184c <DMA1_Stream2_IRQHandler+0x10>)
 8001842:	f000 fc7b 	bl	800213c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	2000037c 	.word	0x2000037c

08001850 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001854:	4802      	ldr	r0, [pc, #8]	; (8001860 <DMA1_Stream4_IRQHandler+0x10>)
 8001856:	f000 fc71 	bl	800213c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000628 	.word	0x20000628

08001864 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001868:	4802      	ldr	r0, [pc, #8]	; (8001874 <DMA1_Stream5_IRQHandler+0x10>)
 800186a:	f000 fc67 	bl	800213c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	200003dc 	.word	0x200003dc

08001878 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800187c:	4802      	ldr	r0, [pc, #8]	; (8001888 <DMA1_Stream6_IRQHandler+0x10>)
 800187e:	f000 fc5d 	bl	800213c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	200004fc 	.word	0x200004fc

0800188c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001890:	4802      	ldr	r0, [pc, #8]	; (800189c <USART1_IRQHandler+0x10>)
 8001892:	f002 f86b 	bl	800396c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	2000055c 	.word	0x2000055c

080018a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018a4:	4802      	ldr	r0, [pc, #8]	; (80018b0 <USART2_IRQHandler+0x10>)
 80018a6:	f002 f861 	bl	800396c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	200005e4 	.word	0x200005e4

080018b4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80018b8:	4802      	ldr	r0, [pc, #8]	; (80018c4 <UART4_IRQHandler+0x10>)
 80018ba:	f002 f857 	bl	800396c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	200005a0 	.word	0x200005a0

080018c8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80018cc:	4802      	ldr	r0, [pc, #8]	; (80018d8 <DMA2_Stream2_IRQHandler+0x10>)
 80018ce:	f000 fc35 	bl	800213c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	2000049c 	.word	0x2000049c

080018dc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80018e0:	4802      	ldr	r0, [pc, #8]	; (80018ec <DMA2_Stream7_IRQHandler+0x10>)
 80018e2:	f000 fc2b 	bl	800213c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	2000043c 	.word	0x2000043c

080018f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
	return 1;
 80018f4:	2301      	movs	r3, #1
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <_kill>:

int _kill(int pid, int sig)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800190a:	f004 f91d 	bl	8005b48 <__errno>
 800190e:	4603      	mov	r3, r0
 8001910:	2216      	movs	r2, #22
 8001912:	601a      	str	r2, [r3, #0]
	return -1;
 8001914:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001918:	4618      	mov	r0, r3
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <_exit>:

void _exit (int status)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001928:	f04f 31ff 	mov.w	r1, #4294967295
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff ffe7 	bl	8001900 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001932:	e7fe      	b.n	8001932 <_exit+0x12>

08001934 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	e00a      	b.n	800195c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001946:	f3af 8000 	nop.w
 800194a:	4601      	mov	r1, r0
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	1c5a      	adds	r2, r3, #1
 8001950:	60ba      	str	r2, [r7, #8]
 8001952:	b2ca      	uxtb	r2, r1
 8001954:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	3301      	adds	r3, #1
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	429a      	cmp	r2, r3
 8001962:	dbf0      	blt.n	8001946 <_read+0x12>
	}

return len;
 8001964:	687b      	ldr	r3, [r7, #4]
}
 8001966:	4618      	mov	r0, r3
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <_close>:
	}
	return len;
}

int _close(int file)
{
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
	return -1;
 8001976:	f04f 33ff 	mov.w	r3, #4294967295
}
 800197a:	4618      	mov	r0, r3
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
 800198e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001996:	605a      	str	r2, [r3, #4]
	return 0;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <_isatty>:

int _isatty(int file)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
	return 1;
 80019ae:	2301      	movs	r3, #1
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
	return 0;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
	...

080019d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019e0:	4a14      	ldr	r2, [pc, #80]	; (8001a34 <_sbrk+0x5c>)
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <_sbrk+0x60>)
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019ec:	4b13      	ldr	r3, [pc, #76]	; (8001a3c <_sbrk+0x64>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d102      	bne.n	80019fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019f4:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <_sbrk+0x64>)
 80019f6:	4a12      	ldr	r2, [pc, #72]	; (8001a40 <_sbrk+0x68>)
 80019f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019fa:	4b10      	ldr	r3, [pc, #64]	; (8001a3c <_sbrk+0x64>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d207      	bcs.n	8001a18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a08:	f004 f89e 	bl	8005b48 <__errno>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	220c      	movs	r2, #12
 8001a10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a12:	f04f 33ff 	mov.w	r3, #4294967295
 8001a16:	e009      	b.n	8001a2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a18:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <_sbrk+0x64>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a1e:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <_sbrk+0x64>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4413      	add	r3, r2
 8001a26:	4a05      	ldr	r2, [pc, #20]	; (8001a3c <_sbrk+0x64>)
 8001a28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20020000 	.word	0x20020000
 8001a38:	00000400 	.word	0x00000400
 8001a3c:	2000024c 	.word	0x2000024c
 8001a40:	20001db0 	.word	0x20001db0

08001a44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a48:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <SystemInit+0x20>)
 8001a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a4e:	4a05      	ldr	r2, [pc, #20]	; (8001a64 <SystemInit+0x20>)
 8001a50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001aa0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a6c:	480d      	ldr	r0, [pc, #52]	; (8001aa4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a6e:	490e      	ldr	r1, [pc, #56]	; (8001aa8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a70:	4a0e      	ldr	r2, [pc, #56]	; (8001aac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a74:	e002      	b.n	8001a7c <LoopCopyDataInit>

08001a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a7a:	3304      	adds	r3, #4

08001a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a80:	d3f9      	bcc.n	8001a76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a82:	4a0b      	ldr	r2, [pc, #44]	; (8001ab0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a84:	4c0b      	ldr	r4, [pc, #44]	; (8001ab4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a88:	e001      	b.n	8001a8e <LoopFillZerobss>

08001a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a8c:	3204      	adds	r2, #4

08001a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a90:	d3fb      	bcc.n	8001a8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a92:	f7ff ffd7 	bl	8001a44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a96:	f004 f85d 	bl	8005b54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a9a:	f7ff fabb 	bl	8001014 <main>
  bx  lr    
 8001a9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001aa0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aa8:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 8001aac:	0800b874 	.word	0x0800b874
  ldr r2, =_sbss
 8001ab0:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8001ab4:	20001db0 	.word	0x20001db0

08001ab8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ab8:	e7fe      	b.n	8001ab8 <ADC_IRQHandler>
	...

08001abc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ac0:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <HAL_Init+0x40>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a0d      	ldr	r2, [pc, #52]	; (8001afc <HAL_Init+0x40>)
 8001ac6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001acc:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <HAL_Init+0x40>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a0a      	ldr	r2, [pc, #40]	; (8001afc <HAL_Init+0x40>)
 8001ad2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ad6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ad8:	4b08      	ldr	r3, [pc, #32]	; (8001afc <HAL_Init+0x40>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a07      	ldr	r2, [pc, #28]	; (8001afc <HAL_Init+0x40>)
 8001ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae4:	2003      	movs	r0, #3
 8001ae6:	f000 f94f 	bl	8001d88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aea:	200f      	movs	r0, #15
 8001aec:	f000 f808 	bl	8001b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001af0:	f7ff fc4c 	bl	800138c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40023c00 	.word	0x40023c00

08001b00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b08:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <HAL_InitTick+0x54>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <HAL_InitTick+0x58>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	4619      	mov	r1, r3
 8001b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f000 f967 	bl	8001df2 <HAL_SYSTICK_Config>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e00e      	b.n	8001b4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b0f      	cmp	r3, #15
 8001b32:	d80a      	bhi.n	8001b4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b34:	2200      	movs	r2, #0
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	f04f 30ff 	mov.w	r0, #4294967295
 8001b3c:	f000 f92f 	bl	8001d9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b40:	4a06      	ldr	r2, [pc, #24]	; (8001b5c <HAL_InitTick+0x5c>)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
 8001b48:	e000      	b.n	8001b4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20000000 	.word	0x20000000
 8001b58:	20000008 	.word	0x20000008
 8001b5c:	20000004 	.word	0x20000004

08001b60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b64:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <HAL_IncTick+0x20>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <HAL_IncTick+0x24>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4413      	add	r3, r2
 8001b70:	4a04      	ldr	r2, [pc, #16]	; (8001b84 <HAL_IncTick+0x24>)
 8001b72:	6013      	str	r3, [r2, #0]
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	20000008 	.word	0x20000008
 8001b84:	20000688 	.word	0x20000688

08001b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b8c:	4b03      	ldr	r3, [pc, #12]	; (8001b9c <HAL_GetTick+0x14>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	20000688 	.word	0x20000688

08001ba0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ba8:	f7ff ffee 	bl	8001b88 <HAL_GetTick>
 8001bac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb8:	d005      	beq.n	8001bc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bba:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <HAL_Delay+0x44>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bc6:	bf00      	nop
 8001bc8:	f7ff ffde 	bl	8001b88 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d8f7      	bhi.n	8001bc8 <HAL_Delay+0x28>
  {
  }
}
 8001bd8:	bf00      	nop
 8001bda:	bf00      	nop
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000008 	.word	0x20000008

08001be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <__NVIC_SetPriorityGrouping+0x44>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c04:	4013      	ands	r3, r2
 8001c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c1a:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <__NVIC_SetPriorityGrouping+0x44>)
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	60d3      	str	r3, [r2, #12]
}
 8001c20:	bf00      	nop
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <__NVIC_GetPriorityGrouping+0x18>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	0a1b      	lsrs	r3, r3, #8
 8001c3a:	f003 0307 	and.w	r3, r3, #7
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	db0b      	blt.n	8001c76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	f003 021f 	and.w	r2, r3, #31
 8001c64:	4907      	ldr	r1, [pc, #28]	; (8001c84 <__NVIC_EnableIRQ+0x38>)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	095b      	lsrs	r3, r3, #5
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	e000e100 	.word	0xe000e100

08001c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	6039      	str	r1, [r7, #0]
 8001c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	db0a      	blt.n	8001cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	490c      	ldr	r1, [pc, #48]	; (8001cd4 <__NVIC_SetPriority+0x4c>)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	0112      	lsls	r2, r2, #4
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	440b      	add	r3, r1
 8001cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb0:	e00a      	b.n	8001cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	4908      	ldr	r1, [pc, #32]	; (8001cd8 <__NVIC_SetPriority+0x50>)
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	3b04      	subs	r3, #4
 8001cc0:	0112      	lsls	r2, r2, #4
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	761a      	strb	r2, [r3, #24]
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	e000e100 	.word	0xe000e100
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b089      	sub	sp, #36	; 0x24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	f1c3 0307 	rsb	r3, r3, #7
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	bf28      	it	cs
 8001cfa:	2304      	movcs	r3, #4
 8001cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	3304      	adds	r3, #4
 8001d02:	2b06      	cmp	r3, #6
 8001d04:	d902      	bls.n	8001d0c <NVIC_EncodePriority+0x30>
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3b03      	subs	r3, #3
 8001d0a:	e000      	b.n	8001d0e <NVIC_EncodePriority+0x32>
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d10:	f04f 32ff 	mov.w	r2, #4294967295
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43da      	mvns	r2, r3
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	401a      	ands	r2, r3
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d24:	f04f 31ff 	mov.w	r1, #4294967295
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2e:	43d9      	mvns	r1, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d34:	4313      	orrs	r3, r2
         );
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3724      	adds	r7, #36	; 0x24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
	...

08001d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d54:	d301      	bcc.n	8001d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d56:	2301      	movs	r3, #1
 8001d58:	e00f      	b.n	8001d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <SysTick_Config+0x40>)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d62:	210f      	movs	r1, #15
 8001d64:	f04f 30ff 	mov.w	r0, #4294967295
 8001d68:	f7ff ff8e 	bl	8001c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d6c:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <SysTick_Config+0x40>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d72:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <SysTick_Config+0x40>)
 8001d74:	2207      	movs	r2, #7
 8001d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	e000e010 	.word	0xe000e010

08001d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7ff ff29 	bl	8001be8 <__NVIC_SetPriorityGrouping>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b086      	sub	sp, #24
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	4603      	mov	r3, r0
 8001da6:	60b9      	str	r1, [r7, #8]
 8001da8:	607a      	str	r2, [r7, #4]
 8001daa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001db0:	f7ff ff3e 	bl	8001c30 <__NVIC_GetPriorityGrouping>
 8001db4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	68b9      	ldr	r1, [r7, #8]
 8001dba:	6978      	ldr	r0, [r7, #20]
 8001dbc:	f7ff ff8e 	bl	8001cdc <NVIC_EncodePriority>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc6:	4611      	mov	r1, r2
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ff5d 	bl	8001c88 <__NVIC_SetPriority>
}
 8001dce:	bf00      	nop
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	4603      	mov	r3, r0
 8001dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ff31 	bl	8001c4c <__NVIC_EnableIRQ>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff ffa2 	bl	8001d44 <SysTick_Config>
 8001e00:	4603      	mov	r3, r0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
	...

08001e0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e18:	f7ff feb6 	bl	8001b88 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e099      	b.n	8001f5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 0201 	bic.w	r2, r2, #1
 8001e46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e48:	e00f      	b.n	8001e6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e4a:	f7ff fe9d 	bl	8001b88 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b05      	cmp	r3, #5
 8001e56:	d908      	bls.n	8001e6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2220      	movs	r2, #32
 8001e5c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2203      	movs	r2, #3
 8001e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e078      	b.n	8001f5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1e8      	bne.n	8001e4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	4b38      	ldr	r3, [pc, #224]	; (8001f64 <HAL_DMA_Init+0x158>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ea2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	2b04      	cmp	r3, #4
 8001ec2:	d107      	bne.n	8001ed4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	f023 0307 	bic.w	r3, r3, #7
 8001eea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	697a      	ldr	r2, [r7, #20]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d117      	bne.n	8001f2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00e      	beq.n	8001f2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 fb01 	bl	8002518 <DMA_CheckFifoParam>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d008      	beq.n	8001f2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2240      	movs	r2, #64	; 0x40
 8001f20:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e016      	b.n	8001f5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 fab8 	bl	80024ac <DMA_CalcBaseAndBitshift>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f44:	223f      	movs	r2, #63	; 0x3f
 8001f46:	409a      	lsls	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	f010803f 	.word	0xf010803f

08001f68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
 8001f74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f76:	2300      	movs	r3, #0
 8001f78:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d101      	bne.n	8001f8e <HAL_DMA_Start_IT+0x26>
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	e040      	b.n	8002010 <HAL_DMA_Start_IT+0xa8>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d12f      	bne.n	8002002 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	68b9      	ldr	r1, [r7, #8]
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f000 fa4a 	bl	8002450 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc0:	223f      	movs	r2, #63	; 0x3f
 8001fc2:	409a      	lsls	r2, r3
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f042 0216 	orr.w	r2, r2, #22
 8001fd6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d007      	beq.n	8001ff0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f042 0208 	orr.w	r2, r2, #8
 8001fee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f042 0201 	orr.w	r2, r2, #1
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	e005      	b.n	800200e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800200a:	2302      	movs	r3, #2
 800200c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800200e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002024:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002026:	f7ff fdaf 	bl	8001b88 <HAL_GetTick>
 800202a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d008      	beq.n	800204a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2280      	movs	r2, #128	; 0x80
 800203c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e052      	b.n	80020f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 0216 	bic.w	r2, r2, #22
 8002058:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	695a      	ldr	r2, [r3, #20]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002068:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	2b00      	cmp	r3, #0
 8002070:	d103      	bne.n	800207a <HAL_DMA_Abort+0x62>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002076:	2b00      	cmp	r3, #0
 8002078:	d007      	beq.n	800208a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 0208 	bic.w	r2, r2, #8
 8002088:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 0201 	bic.w	r2, r2, #1
 8002098:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800209a:	e013      	b.n	80020c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800209c:	f7ff fd74 	bl	8001b88 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b05      	cmp	r3, #5
 80020a8:	d90c      	bls.n	80020c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2220      	movs	r2, #32
 80020ae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2203      	movs	r2, #3
 80020b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e015      	b.n	80020f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1e4      	bne.n	800209c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d6:	223f      	movs	r2, #63	; 0x3f
 80020d8:	409a      	lsls	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d004      	beq.n	8002116 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2280      	movs	r2, #128	; 0x80
 8002110:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e00c      	b.n	8002130 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2205      	movs	r2, #5
 800211a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 0201 	bic.w	r2, r2, #1
 800212c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002144:	2300      	movs	r3, #0
 8002146:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002148:	4b92      	ldr	r3, [pc, #584]	; (8002394 <HAL_DMA_IRQHandler+0x258>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a92      	ldr	r2, [pc, #584]	; (8002398 <HAL_DMA_IRQHandler+0x25c>)
 800214e:	fba2 2303 	umull	r2, r3, r2, r3
 8002152:	0a9b      	lsrs	r3, r3, #10
 8002154:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002166:	2208      	movs	r2, #8
 8002168:	409a      	lsls	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	4013      	ands	r3, r2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d01a      	beq.n	80021a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0304 	and.w	r3, r3, #4
 800217c:	2b00      	cmp	r3, #0
 800217e:	d013      	beq.n	80021a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0204 	bic.w	r2, r2, #4
 800218e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002194:	2208      	movs	r2, #8
 8002196:	409a      	lsls	r2, r3
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a0:	f043 0201 	orr.w	r2, r3, #1
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ac:	2201      	movs	r2, #1
 80021ae:	409a      	lsls	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4013      	ands	r3, r2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d012      	beq.n	80021de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00b      	beq.n	80021de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ca:	2201      	movs	r2, #1
 80021cc:	409a      	lsls	r2, r3
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d6:	f043 0202 	orr.w	r2, r3, #2
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e2:	2204      	movs	r2, #4
 80021e4:	409a      	lsls	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	4013      	ands	r3, r2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d012      	beq.n	8002214 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00b      	beq.n	8002214 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002200:	2204      	movs	r2, #4
 8002202:	409a      	lsls	r2, r3
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800220c:	f043 0204 	orr.w	r2, r3, #4
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002218:	2210      	movs	r2, #16
 800221a:	409a      	lsls	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4013      	ands	r3, r2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d043      	beq.n	80022ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	2b00      	cmp	r3, #0
 8002230:	d03c      	beq.n	80022ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002236:	2210      	movs	r2, #16
 8002238:	409a      	lsls	r2, r3
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d018      	beq.n	800227e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d108      	bne.n	800226c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	2b00      	cmp	r3, #0
 8002260:	d024      	beq.n	80022ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	4798      	blx	r3
 800226a:	e01f      	b.n	80022ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002270:	2b00      	cmp	r3, #0
 8002272:	d01b      	beq.n	80022ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	4798      	blx	r3
 800227c:	e016      	b.n	80022ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002288:	2b00      	cmp	r3, #0
 800228a:	d107      	bne.n	800229c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 0208 	bic.w	r2, r2, #8
 800229a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b0:	2220      	movs	r2, #32
 80022b2:	409a      	lsls	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4013      	ands	r3, r2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 808e 	beq.w	80023da <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0310 	and.w	r3, r3, #16
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 8086 	beq.w	80023da <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d2:	2220      	movs	r2, #32
 80022d4:	409a      	lsls	r2, r3
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b05      	cmp	r3, #5
 80022e4:	d136      	bne.n	8002354 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 0216 	bic.w	r2, r2, #22
 80022f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	695a      	ldr	r2, [r3, #20]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002304:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	2b00      	cmp	r3, #0
 800230c:	d103      	bne.n	8002316 <HAL_DMA_IRQHandler+0x1da>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002312:	2b00      	cmp	r3, #0
 8002314:	d007      	beq.n	8002326 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 0208 	bic.w	r2, r2, #8
 8002324:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232a:	223f      	movs	r2, #63	; 0x3f
 800232c:	409a      	lsls	r2, r3
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002346:	2b00      	cmp	r3, #0
 8002348:	d07d      	beq.n	8002446 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	4798      	blx	r3
        }
        return;
 8002352:	e078      	b.n	8002446 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d01c      	beq.n	800239c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d108      	bne.n	8002382 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002374:	2b00      	cmp	r3, #0
 8002376:	d030      	beq.n	80023da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	4798      	blx	r3
 8002380:	e02b      	b.n	80023da <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002386:	2b00      	cmp	r3, #0
 8002388:	d027      	beq.n	80023da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	4798      	blx	r3
 8002392:	e022      	b.n	80023da <HAL_DMA_IRQHandler+0x29e>
 8002394:	20000000 	.word	0x20000000
 8002398:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10f      	bne.n	80023ca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0210 	bic.w	r2, r2, #16
 80023b8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d032      	beq.n	8002448 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d022      	beq.n	8002434 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2205      	movs	r2, #5
 80023f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f022 0201 	bic.w	r2, r2, #1
 8002404:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	3301      	adds	r3, #1
 800240a:	60bb      	str	r3, [r7, #8]
 800240c:	697a      	ldr	r2, [r7, #20]
 800240e:	429a      	cmp	r2, r3
 8002410:	d307      	bcc.n	8002422 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1f2      	bne.n	8002406 <HAL_DMA_IRQHandler+0x2ca>
 8002420:	e000      	b.n	8002424 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002422:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	4798      	blx	r3
 8002444:	e000      	b.n	8002448 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002446:	bf00      	nop
    }
  }
}
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop

08002450 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
 800245c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800246c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	2b40      	cmp	r3, #64	; 0x40
 800247c:	d108      	bne.n	8002490 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800248e:	e007      	b.n	80024a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68ba      	ldr	r2, [r7, #8]
 8002496:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	60da      	str	r2, [r3, #12]
}
 80024a0:	bf00      	nop
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	3b10      	subs	r3, #16
 80024bc:	4a14      	ldr	r2, [pc, #80]	; (8002510 <DMA_CalcBaseAndBitshift+0x64>)
 80024be:	fba2 2303 	umull	r2, r3, r2, r3
 80024c2:	091b      	lsrs	r3, r3, #4
 80024c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024c6:	4a13      	ldr	r2, [pc, #76]	; (8002514 <DMA_CalcBaseAndBitshift+0x68>)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4413      	add	r3, r2
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	461a      	mov	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2b03      	cmp	r3, #3
 80024d8:	d909      	bls.n	80024ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024e2:	f023 0303 	bic.w	r3, r3, #3
 80024e6:	1d1a      	adds	r2, r3, #4
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	659a      	str	r2, [r3, #88]	; 0x58
 80024ec:	e007      	b.n	80024fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024f6:	f023 0303 	bic.w	r3, r3, #3
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002502:	4618      	mov	r0, r3
 8002504:	3714      	adds	r7, #20
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	aaaaaaab 	.word	0xaaaaaaab
 8002514:	0800b3a4 	.word	0x0800b3a4

08002518 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002520:	2300      	movs	r3, #0
 8002522:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002528:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d11f      	bne.n	8002572 <DMA_CheckFifoParam+0x5a>
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	2b03      	cmp	r3, #3
 8002536:	d856      	bhi.n	80025e6 <DMA_CheckFifoParam+0xce>
 8002538:	a201      	add	r2, pc, #4	; (adr r2, 8002540 <DMA_CheckFifoParam+0x28>)
 800253a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800253e:	bf00      	nop
 8002540:	08002551 	.word	0x08002551
 8002544:	08002563 	.word	0x08002563
 8002548:	08002551 	.word	0x08002551
 800254c:	080025e7 	.word	0x080025e7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002554:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d046      	beq.n	80025ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002560:	e043      	b.n	80025ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002566:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800256a:	d140      	bne.n	80025ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002570:	e03d      	b.n	80025ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800257a:	d121      	bne.n	80025c0 <DMA_CheckFifoParam+0xa8>
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	2b03      	cmp	r3, #3
 8002580:	d837      	bhi.n	80025f2 <DMA_CheckFifoParam+0xda>
 8002582:	a201      	add	r2, pc, #4	; (adr r2, 8002588 <DMA_CheckFifoParam+0x70>)
 8002584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002588:	08002599 	.word	0x08002599
 800258c:	0800259f 	.word	0x0800259f
 8002590:	08002599 	.word	0x08002599
 8002594:	080025b1 	.word	0x080025b1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	73fb      	strb	r3, [r7, #15]
      break;
 800259c:	e030      	b.n	8002600 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d025      	beq.n	80025f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ae:	e022      	b.n	80025f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025b8:	d11f      	bne.n	80025fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025be:	e01c      	b.n	80025fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d903      	bls.n	80025ce <DMA_CheckFifoParam+0xb6>
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	d003      	beq.n	80025d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025cc:	e018      	b.n	8002600 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	73fb      	strb	r3, [r7, #15]
      break;
 80025d2:	e015      	b.n	8002600 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00e      	beq.n	80025fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	73fb      	strb	r3, [r7, #15]
      break;
 80025e4:	e00b      	b.n	80025fe <DMA_CheckFifoParam+0xe6>
      break;
 80025e6:	bf00      	nop
 80025e8:	e00a      	b.n	8002600 <DMA_CheckFifoParam+0xe8>
      break;
 80025ea:	bf00      	nop
 80025ec:	e008      	b.n	8002600 <DMA_CheckFifoParam+0xe8>
      break;
 80025ee:	bf00      	nop
 80025f0:	e006      	b.n	8002600 <DMA_CheckFifoParam+0xe8>
      break;
 80025f2:	bf00      	nop
 80025f4:	e004      	b.n	8002600 <DMA_CheckFifoParam+0xe8>
      break;
 80025f6:	bf00      	nop
 80025f8:	e002      	b.n	8002600 <DMA_CheckFifoParam+0xe8>
      break;   
 80025fa:	bf00      	nop
 80025fc:	e000      	b.n	8002600 <DMA_CheckFifoParam+0xe8>
      break;
 80025fe:	bf00      	nop
    }
  } 
  
  return status; 
 8002600:	7bfb      	ldrb	r3, [r7, #15]
}
 8002602:	4618      	mov	r0, r3
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop

08002610 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800261a:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <HAL_FLASH_Unlock+0x38>)
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	2b00      	cmp	r3, #0
 8002620:	da0b      	bge.n	800263a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002622:	4b09      	ldr	r3, [pc, #36]	; (8002648 <HAL_FLASH_Unlock+0x38>)
 8002624:	4a09      	ldr	r2, [pc, #36]	; (800264c <HAL_FLASH_Unlock+0x3c>)
 8002626:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002628:	4b07      	ldr	r3, [pc, #28]	; (8002648 <HAL_FLASH_Unlock+0x38>)
 800262a:	4a09      	ldr	r2, [pc, #36]	; (8002650 <HAL_FLASH_Unlock+0x40>)
 800262c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800262e:	4b06      	ldr	r3, [pc, #24]	; (8002648 <HAL_FLASH_Unlock+0x38>)
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	2b00      	cmp	r3, #0
 8002634:	da01      	bge.n	800263a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800263a:	79fb      	ldrb	r3, [r7, #7]
}
 800263c:	4618      	mov	r0, r3
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	40023c00 	.word	0x40023c00
 800264c:	45670123 	.word	0x45670123
 8002650:	cdef89ab 	.word	0xcdef89ab

08002654 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002658:	4b05      	ldr	r3, [pc, #20]	; (8002670 <HAL_FLASH_Lock+0x1c>)
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	4a04      	ldr	r2, [pc, #16]	; (8002670 <HAL_FLASH_Lock+0x1c>)
 800265e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002662:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	40023c00 	.word	0x40023c00

08002674 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8002678:	4b03      	ldr	r3, [pc, #12]	; (8002688 <HAL_FLASH_GetError+0x14>)
 800267a:	69db      	ldr	r3, [r3, #28]
}  
 800267c:	4618      	mov	r0, r3
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	2000068c 	.word	0x2000068c

0800268c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002694:	2300      	movs	r3, #0
 8002696:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002698:	4b1a      	ldr	r3, [pc, #104]	; (8002704 <FLASH_WaitForLastOperation+0x78>)
 800269a:	2200      	movs	r2, #0
 800269c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800269e:	f7ff fa73 	bl	8001b88 <HAL_GetTick>
 80026a2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80026a4:	e010      	b.n	80026c8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ac:	d00c      	beq.n	80026c8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d007      	beq.n	80026c4 <FLASH_WaitForLastOperation+0x38>
 80026b4:	f7ff fa68 	bl	8001b88 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d201      	bcs.n	80026c8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e019      	b.n	80026fc <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80026c8:	4b0f      	ldr	r3, [pc, #60]	; (8002708 <FLASH_WaitForLastOperation+0x7c>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1e8      	bne.n	80026a6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80026d4:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <FLASH_WaitForLastOperation+0x7c>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d002      	beq.n	80026e6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80026e0:	4b09      	ldr	r3, [pc, #36]	; (8002708 <FLASH_WaitForLastOperation+0x7c>)
 80026e2:	2201      	movs	r2, #1
 80026e4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80026e6:	4b08      	ldr	r3, [pc, #32]	; (8002708 <FLASH_WaitForLastOperation+0x7c>)
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80026f2:	f000 f80b 	bl	800270c <FLASH_SetErrorCode>
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e000      	b.n	80026fc <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
  
}  
 80026fc:	4618      	mov	r0, r3
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	2000068c 	.word	0x2000068c
 8002708:	40023c00 	.word	0x40023c00

0800270c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002710:	4b27      	ldr	r3, [pc, #156]	; (80027b0 <FLASH_SetErrorCode+0xa4>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	f003 0310 	and.w	r3, r3, #16
 8002718:	2b00      	cmp	r3, #0
 800271a:	d008      	beq.n	800272e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800271c:	4b25      	ldr	r3, [pc, #148]	; (80027b4 <FLASH_SetErrorCode+0xa8>)
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	f043 0310 	orr.w	r3, r3, #16
 8002724:	4a23      	ldr	r2, [pc, #140]	; (80027b4 <FLASH_SetErrorCode+0xa8>)
 8002726:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002728:	4b21      	ldr	r3, [pc, #132]	; (80027b0 <FLASH_SetErrorCode+0xa4>)
 800272a:	2210      	movs	r2, #16
 800272c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800272e:	4b20      	ldr	r3, [pc, #128]	; (80027b0 <FLASH_SetErrorCode+0xa4>)
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	f003 0320 	and.w	r3, r3, #32
 8002736:	2b00      	cmp	r3, #0
 8002738:	d008      	beq.n	800274c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800273a:	4b1e      	ldr	r3, [pc, #120]	; (80027b4 <FLASH_SetErrorCode+0xa8>)
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	f043 0308 	orr.w	r3, r3, #8
 8002742:	4a1c      	ldr	r2, [pc, #112]	; (80027b4 <FLASH_SetErrorCode+0xa8>)
 8002744:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002746:	4b1a      	ldr	r3, [pc, #104]	; (80027b0 <FLASH_SetErrorCode+0xa4>)
 8002748:	2220      	movs	r2, #32
 800274a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800274c:	4b18      	ldr	r3, [pc, #96]	; (80027b0 <FLASH_SetErrorCode+0xa4>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002754:	2b00      	cmp	r3, #0
 8002756:	d008      	beq.n	800276a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002758:	4b16      	ldr	r3, [pc, #88]	; (80027b4 <FLASH_SetErrorCode+0xa8>)
 800275a:	69db      	ldr	r3, [r3, #28]
 800275c:	f043 0304 	orr.w	r3, r3, #4
 8002760:	4a14      	ldr	r2, [pc, #80]	; (80027b4 <FLASH_SetErrorCode+0xa8>)
 8002762:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002764:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <FLASH_SetErrorCode+0xa4>)
 8002766:	2240      	movs	r2, #64	; 0x40
 8002768:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800276a:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <FLASH_SetErrorCode+0xa4>)
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002772:	2b00      	cmp	r3, #0
 8002774:	d008      	beq.n	8002788 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002776:	4b0f      	ldr	r3, [pc, #60]	; (80027b4 <FLASH_SetErrorCode+0xa8>)
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	f043 0302 	orr.w	r3, r3, #2
 800277e:	4a0d      	ldr	r2, [pc, #52]	; (80027b4 <FLASH_SetErrorCode+0xa8>)
 8002780:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002782:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <FLASH_SetErrorCode+0xa4>)
 8002784:	2280      	movs	r2, #128	; 0x80
 8002786:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002788:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <FLASH_SetErrorCode+0xa4>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d008      	beq.n	80027a6 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002794:	4b07      	ldr	r3, [pc, #28]	; (80027b4 <FLASH_SetErrorCode+0xa8>)
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	f043 0320 	orr.w	r3, r3, #32
 800279c:	4a05      	ldr	r2, [pc, #20]	; (80027b4 <FLASH_SetErrorCode+0xa8>)
 800279e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80027a0:	4b03      	ldr	r3, [pc, #12]	; (80027b0 <FLASH_SetErrorCode+0xa4>)
 80027a2:	2202      	movs	r2, #2
 80027a4:	60da      	str	r2, [r3, #12]
  }
}
 80027a6:	bf00      	nop
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	40023c00 	.word	0x40023c00
 80027b4:	2000068c 	.word	0x2000068c

080027b8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80027c6:	2300      	movs	r3, #0
 80027c8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80027ca:	4b31      	ldr	r3, [pc, #196]	; (8002890 <HAL_FLASHEx_Erase+0xd8>)
 80027cc:	7e1b      	ldrb	r3, [r3, #24]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d101      	bne.n	80027d6 <HAL_FLASHEx_Erase+0x1e>
 80027d2:	2302      	movs	r3, #2
 80027d4:	e058      	b.n	8002888 <HAL_FLASHEx_Erase+0xd0>
 80027d6:	4b2e      	ldr	r3, [pc, #184]	; (8002890 <HAL_FLASHEx_Erase+0xd8>)
 80027d8:	2201      	movs	r2, #1
 80027da:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80027dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80027e0:	f7ff ff54 	bl	800268c <FLASH_WaitForLastOperation>
 80027e4:	4603      	mov	r3, r0
 80027e6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80027e8:	7bfb      	ldrb	r3, [r7, #15]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d148      	bne.n	8002880 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	f04f 32ff 	mov.w	r2, #4294967295
 80027f4:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d115      	bne.n	800282a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	b2da      	uxtb	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	4619      	mov	r1, r3
 800280a:	4610      	mov	r0, r2
 800280c:	f000 f844 	bl	8002898 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002810:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002814:	f7ff ff3a 	bl	800268c <FLASH_WaitForLastOperation>
 8002818:	4603      	mov	r3, r0
 800281a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800281c:	4b1d      	ldr	r3, [pc, #116]	; (8002894 <HAL_FLASHEx_Erase+0xdc>)
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	4a1c      	ldr	r2, [pc, #112]	; (8002894 <HAL_FLASHEx_Erase+0xdc>)
 8002822:	f023 0304 	bic.w	r3, r3, #4
 8002826:	6113      	str	r3, [r2, #16]
 8002828:	e028      	b.n	800287c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	60bb      	str	r3, [r7, #8]
 8002830:	e01c      	b.n	800286c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	b2db      	uxtb	r3, r3
 8002838:	4619      	mov	r1, r3
 800283a:	68b8      	ldr	r0, [r7, #8]
 800283c:	f000 f850 	bl	80028e0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002840:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002844:	f7ff ff22 	bl	800268c <FLASH_WaitForLastOperation>
 8002848:	4603      	mov	r3, r0
 800284a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800284c:	4b11      	ldr	r3, [pc, #68]	; (8002894 <HAL_FLASHEx_Erase+0xdc>)
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	4a10      	ldr	r2, [pc, #64]	; (8002894 <HAL_FLASHEx_Erase+0xdc>)
 8002852:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8002856:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002858:	7bfb      	ldrb	r3, [r7, #15]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	68ba      	ldr	r2, [r7, #8]
 8002862:	601a      	str	r2, [r3, #0]
          break;
 8002864:	e00a      	b.n	800287c <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	3301      	adds	r3, #1
 800286a:	60bb      	str	r3, [r7, #8]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68da      	ldr	r2, [r3, #12]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	4413      	add	r3, r2
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	429a      	cmp	r2, r3
 800287a:	d3da      	bcc.n	8002832 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800287c:	f000 f878 	bl	8002970 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002880:	4b03      	ldr	r3, [pc, #12]	; (8002890 <HAL_FLASHEx_Erase+0xd8>)
 8002882:	2200      	movs	r2, #0
 8002884:	761a      	strb	r2, [r3, #24]

  return status;
 8002886:	7bfb      	ldrb	r3, [r7, #15]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	2000068c 	.word	0x2000068c
 8002894:	40023c00 	.word	0x40023c00

08002898 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	6039      	str	r1, [r7, #0]
 80028a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80028a4:	4b0d      	ldr	r3, [pc, #52]	; (80028dc <FLASH_MassErase+0x44>)
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	4a0c      	ldr	r2, [pc, #48]	; (80028dc <FLASH_MassErase+0x44>)
 80028aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80028b0:	4b0a      	ldr	r3, [pc, #40]	; (80028dc <FLASH_MassErase+0x44>)
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	4a09      	ldr	r2, [pc, #36]	; (80028dc <FLASH_MassErase+0x44>)
 80028b6:	f043 0304 	orr.w	r3, r3, #4
 80028ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80028bc:	4b07      	ldr	r3, [pc, #28]	; (80028dc <FLASH_MassErase+0x44>)
 80028be:	691a      	ldr	r2, [r3, #16]
 80028c0:	79fb      	ldrb	r3, [r7, #7]
 80028c2:	021b      	lsls	r3, r3, #8
 80028c4:	4313      	orrs	r3, r2
 80028c6:	4a05      	ldr	r2, [pc, #20]	; (80028dc <FLASH_MassErase+0x44>)
 80028c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028cc:	6113      	str	r3, [r2, #16]
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	40023c00 	.word	0x40023c00

080028e0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	460b      	mov	r3, r1
 80028ea:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80028f0:	78fb      	ldrb	r3, [r7, #3]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d102      	bne.n	80028fc <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	e010      	b.n	800291e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80028fc:	78fb      	ldrb	r3, [r7, #3]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d103      	bne.n	800290a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002902:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	e009      	b.n	800291e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800290a:	78fb      	ldrb	r3, [r7, #3]
 800290c:	2b02      	cmp	r3, #2
 800290e:	d103      	bne.n	8002918 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002910:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	e002      	b.n	800291e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002918:	f44f 7340 	mov.w	r3, #768	; 0x300
 800291c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800291e:	4b13      	ldr	r3, [pc, #76]	; (800296c <FLASH_Erase_Sector+0x8c>)
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	4a12      	ldr	r2, [pc, #72]	; (800296c <FLASH_Erase_Sector+0x8c>)
 8002924:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002928:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800292a:	4b10      	ldr	r3, [pc, #64]	; (800296c <FLASH_Erase_Sector+0x8c>)
 800292c:	691a      	ldr	r2, [r3, #16]
 800292e:	490f      	ldr	r1, [pc, #60]	; (800296c <FLASH_Erase_Sector+0x8c>)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4313      	orrs	r3, r2
 8002934:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002936:	4b0d      	ldr	r3, [pc, #52]	; (800296c <FLASH_Erase_Sector+0x8c>)
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	4a0c      	ldr	r2, [pc, #48]	; (800296c <FLASH_Erase_Sector+0x8c>)
 800293c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002940:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002942:	4b0a      	ldr	r3, [pc, #40]	; (800296c <FLASH_Erase_Sector+0x8c>)
 8002944:	691a      	ldr	r2, [r3, #16]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	4313      	orrs	r3, r2
 800294c:	4a07      	ldr	r2, [pc, #28]	; (800296c <FLASH_Erase_Sector+0x8c>)
 800294e:	f043 0302 	orr.w	r3, r3, #2
 8002952:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002954:	4b05      	ldr	r3, [pc, #20]	; (800296c <FLASH_Erase_Sector+0x8c>)
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	4a04      	ldr	r2, [pc, #16]	; (800296c <FLASH_Erase_Sector+0x8c>)
 800295a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800295e:	6113      	str	r3, [r2, #16]
}
 8002960:	bf00      	nop
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	40023c00 	.word	0x40023c00

08002970 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002974:	4b20      	ldr	r3, [pc, #128]	; (80029f8 <FLASH_FlushCaches+0x88>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800297c:	2b00      	cmp	r3, #0
 800297e:	d017      	beq.n	80029b0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002980:	4b1d      	ldr	r3, [pc, #116]	; (80029f8 <FLASH_FlushCaches+0x88>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a1c      	ldr	r2, [pc, #112]	; (80029f8 <FLASH_FlushCaches+0x88>)
 8002986:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800298a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800298c:	4b1a      	ldr	r3, [pc, #104]	; (80029f8 <FLASH_FlushCaches+0x88>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a19      	ldr	r2, [pc, #100]	; (80029f8 <FLASH_FlushCaches+0x88>)
 8002992:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002996:	6013      	str	r3, [r2, #0]
 8002998:	4b17      	ldr	r3, [pc, #92]	; (80029f8 <FLASH_FlushCaches+0x88>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a16      	ldr	r2, [pc, #88]	; (80029f8 <FLASH_FlushCaches+0x88>)
 800299e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029a2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029a4:	4b14      	ldr	r3, [pc, #80]	; (80029f8 <FLASH_FlushCaches+0x88>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a13      	ldr	r2, [pc, #76]	; (80029f8 <FLASH_FlushCaches+0x88>)
 80029aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029ae:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80029b0:	4b11      	ldr	r3, [pc, #68]	; (80029f8 <FLASH_FlushCaches+0x88>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d017      	beq.n	80029ec <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80029bc:	4b0e      	ldr	r3, [pc, #56]	; (80029f8 <FLASH_FlushCaches+0x88>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a0d      	ldr	r2, [pc, #52]	; (80029f8 <FLASH_FlushCaches+0x88>)
 80029c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029c6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80029c8:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <FLASH_FlushCaches+0x88>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a0a      	ldr	r2, [pc, #40]	; (80029f8 <FLASH_FlushCaches+0x88>)
 80029ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029d2:	6013      	str	r3, [r2, #0]
 80029d4:	4b08      	ldr	r3, [pc, #32]	; (80029f8 <FLASH_FlushCaches+0x88>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a07      	ldr	r2, [pc, #28]	; (80029f8 <FLASH_FlushCaches+0x88>)
 80029da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029de:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80029e0:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <FLASH_FlushCaches+0x88>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a04      	ldr	r2, [pc, #16]	; (80029f8 <FLASH_FlushCaches+0x88>)
 80029e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029ea:	6013      	str	r3, [r2, #0]
  }
}
 80029ec:	bf00      	nop
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	40023c00 	.word	0x40023c00

080029fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b089      	sub	sp, #36	; 0x24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a12:	2300      	movs	r3, #0
 8002a14:	61fb      	str	r3, [r7, #28]
 8002a16:	e16b      	b.n	8002cf0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a18:	2201      	movs	r2, #1
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	f040 815a 	bne.w	8002cea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d005      	beq.n	8002a4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d130      	bne.n	8002ab0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	2203      	movs	r2, #3
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4013      	ands	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a84:	2201      	movs	r2, #1
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4013      	ands	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	091b      	lsrs	r3, r3, #4
 8002a9a:	f003 0201 	and.w	r2, r3, #1
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f003 0303 	and.w	r3, r3, #3
 8002ab8:	2b03      	cmp	r3, #3
 8002aba:	d017      	beq.n	8002aec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	2203      	movs	r2, #3
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43db      	mvns	r3, r3
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f003 0303 	and.w	r3, r3, #3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d123      	bne.n	8002b40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	08da      	lsrs	r2, r3, #3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3208      	adds	r2, #8
 8002b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	220f      	movs	r2, #15
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	43db      	mvns	r3, r3
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	691a      	ldr	r2, [r3, #16]
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	f003 0307 	and.w	r3, r3, #7
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	08da      	lsrs	r2, r3, #3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	3208      	adds	r2, #8
 8002b3a:	69b9      	ldr	r1, [r7, #24]
 8002b3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	2203      	movs	r2, #3
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43db      	mvns	r3, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4013      	ands	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 0203 	and.w	r2, r3, #3
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f000 80b4 	beq.w	8002cea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b82:	2300      	movs	r3, #0
 8002b84:	60fb      	str	r3, [r7, #12]
 8002b86:	4b60      	ldr	r3, [pc, #384]	; (8002d08 <HAL_GPIO_Init+0x30c>)
 8002b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8a:	4a5f      	ldr	r2, [pc, #380]	; (8002d08 <HAL_GPIO_Init+0x30c>)
 8002b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b90:	6453      	str	r3, [r2, #68]	; 0x44
 8002b92:	4b5d      	ldr	r3, [pc, #372]	; (8002d08 <HAL_GPIO_Init+0x30c>)
 8002b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b9a:	60fb      	str	r3, [r7, #12]
 8002b9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b9e:	4a5b      	ldr	r2, [pc, #364]	; (8002d0c <HAL_GPIO_Init+0x310>)
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	089b      	lsrs	r3, r3, #2
 8002ba4:	3302      	adds	r3, #2
 8002ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	f003 0303 	and.w	r3, r3, #3
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	220f      	movs	r2, #15
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a52      	ldr	r2, [pc, #328]	; (8002d10 <HAL_GPIO_Init+0x314>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d02b      	beq.n	8002c22 <HAL_GPIO_Init+0x226>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a51      	ldr	r2, [pc, #324]	; (8002d14 <HAL_GPIO_Init+0x318>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d025      	beq.n	8002c1e <HAL_GPIO_Init+0x222>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a50      	ldr	r2, [pc, #320]	; (8002d18 <HAL_GPIO_Init+0x31c>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d01f      	beq.n	8002c1a <HAL_GPIO_Init+0x21e>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a4f      	ldr	r2, [pc, #316]	; (8002d1c <HAL_GPIO_Init+0x320>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d019      	beq.n	8002c16 <HAL_GPIO_Init+0x21a>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a4e      	ldr	r2, [pc, #312]	; (8002d20 <HAL_GPIO_Init+0x324>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d013      	beq.n	8002c12 <HAL_GPIO_Init+0x216>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a4d      	ldr	r2, [pc, #308]	; (8002d24 <HAL_GPIO_Init+0x328>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d00d      	beq.n	8002c0e <HAL_GPIO_Init+0x212>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a4c      	ldr	r2, [pc, #304]	; (8002d28 <HAL_GPIO_Init+0x32c>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d007      	beq.n	8002c0a <HAL_GPIO_Init+0x20e>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a4b      	ldr	r2, [pc, #300]	; (8002d2c <HAL_GPIO_Init+0x330>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d101      	bne.n	8002c06 <HAL_GPIO_Init+0x20a>
 8002c02:	2307      	movs	r3, #7
 8002c04:	e00e      	b.n	8002c24 <HAL_GPIO_Init+0x228>
 8002c06:	2308      	movs	r3, #8
 8002c08:	e00c      	b.n	8002c24 <HAL_GPIO_Init+0x228>
 8002c0a:	2306      	movs	r3, #6
 8002c0c:	e00a      	b.n	8002c24 <HAL_GPIO_Init+0x228>
 8002c0e:	2305      	movs	r3, #5
 8002c10:	e008      	b.n	8002c24 <HAL_GPIO_Init+0x228>
 8002c12:	2304      	movs	r3, #4
 8002c14:	e006      	b.n	8002c24 <HAL_GPIO_Init+0x228>
 8002c16:	2303      	movs	r3, #3
 8002c18:	e004      	b.n	8002c24 <HAL_GPIO_Init+0x228>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	e002      	b.n	8002c24 <HAL_GPIO_Init+0x228>
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e000      	b.n	8002c24 <HAL_GPIO_Init+0x228>
 8002c22:	2300      	movs	r3, #0
 8002c24:	69fa      	ldr	r2, [r7, #28]
 8002c26:	f002 0203 	and.w	r2, r2, #3
 8002c2a:	0092      	lsls	r2, r2, #2
 8002c2c:	4093      	lsls	r3, r2
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c34:	4935      	ldr	r1, [pc, #212]	; (8002d0c <HAL_GPIO_Init+0x310>)
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	089b      	lsrs	r3, r3, #2
 8002c3a:	3302      	adds	r3, #2
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c42:	4b3b      	ldr	r3, [pc, #236]	; (8002d30 <HAL_GPIO_Init+0x334>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c66:	4a32      	ldr	r2, [pc, #200]	; (8002d30 <HAL_GPIO_Init+0x334>)
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c6c:	4b30      	ldr	r3, [pc, #192]	; (8002d30 <HAL_GPIO_Init+0x334>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	43db      	mvns	r3, r3
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d003      	beq.n	8002c90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c90:	4a27      	ldr	r2, [pc, #156]	; (8002d30 <HAL_GPIO_Init+0x334>)
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c96:	4b26      	ldr	r3, [pc, #152]	; (8002d30 <HAL_GPIO_Init+0x334>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	43db      	mvns	r3, r3
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cba:	4a1d      	ldr	r2, [pc, #116]	; (8002d30 <HAL_GPIO_Init+0x334>)
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cc0:	4b1b      	ldr	r3, [pc, #108]	; (8002d30 <HAL_GPIO_Init+0x334>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ce4:	4a12      	ldr	r2, [pc, #72]	; (8002d30 <HAL_GPIO_Init+0x334>)
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	3301      	adds	r3, #1
 8002cee:	61fb      	str	r3, [r7, #28]
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	2b0f      	cmp	r3, #15
 8002cf4:	f67f ae90 	bls.w	8002a18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cf8:	bf00      	nop
 8002cfa:	bf00      	nop
 8002cfc:	3724      	adds	r7, #36	; 0x24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	40013800 	.word	0x40013800
 8002d10:	40020000 	.word	0x40020000
 8002d14:	40020400 	.word	0x40020400
 8002d18:	40020800 	.word	0x40020800
 8002d1c:	40020c00 	.word	0x40020c00
 8002d20:	40021000 	.word	0x40021000
 8002d24:	40021400 	.word	0x40021400
 8002d28:	40021800 	.word	0x40021800
 8002d2c:	40021c00 	.word	0x40021c00
 8002d30:	40013c00 	.word	0x40013c00

08002d34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	807b      	strh	r3, [r7, #2]
 8002d40:	4613      	mov	r3, r2
 8002d42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d44:	787b      	ldrb	r3, [r7, #1]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d4a:	887a      	ldrh	r2, [r7, #2]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d50:	e003      	b.n	8002d5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d52:	887b      	ldrh	r3, [r7, #2]
 8002d54:	041a      	lsls	r2, r3, #16
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	619a      	str	r2, [r3, #24]
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
	...

08002d68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e264      	b.n	8003244 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d075      	beq.n	8002e72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d86:	4ba3      	ldr	r3, [pc, #652]	; (8003014 <HAL_RCC_OscConfig+0x2ac>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 030c 	and.w	r3, r3, #12
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	d00c      	beq.n	8002dac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d92:	4ba0      	ldr	r3, [pc, #640]	; (8003014 <HAL_RCC_OscConfig+0x2ac>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d9a:	2b08      	cmp	r3, #8
 8002d9c:	d112      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d9e:	4b9d      	ldr	r3, [pc, #628]	; (8003014 <HAL_RCC_OscConfig+0x2ac>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002da6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002daa:	d10b      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dac:	4b99      	ldr	r3, [pc, #612]	; (8003014 <HAL_RCC_OscConfig+0x2ac>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d05b      	beq.n	8002e70 <HAL_RCC_OscConfig+0x108>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d157      	bne.n	8002e70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e23f      	b.n	8003244 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dcc:	d106      	bne.n	8002ddc <HAL_RCC_OscConfig+0x74>
 8002dce:	4b91      	ldr	r3, [pc, #580]	; (8003014 <HAL_RCC_OscConfig+0x2ac>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a90      	ldr	r2, [pc, #576]	; (8003014 <HAL_RCC_OscConfig+0x2ac>)
 8002dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	e01d      	b.n	8002e18 <HAL_RCC_OscConfig+0xb0>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002de4:	d10c      	bne.n	8002e00 <HAL_RCC_OscConfig+0x98>
 8002de6:	4b8b      	ldr	r3, [pc, #556]	; (8003014 <HAL_RCC_OscConfig+0x2ac>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a8a      	ldr	r2, [pc, #552]	; (8003014 <HAL_RCC_OscConfig+0x2ac>)
 8002dec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	4b88      	ldr	r3, [pc, #544]	; (8003014 <HAL_RCC_OscConfig+0x2ac>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a87      	ldr	r2, [pc, #540]	; (8003014 <HAL_RCC_OscConfig+0x2ac>)
 8002df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dfc:	6013      	str	r3, [r2, #0]
 8002dfe:	e00b      	b.n	8002e18 <HAL_RCC_OscConfig+0xb0>
 8002e00:	4b84      	ldr	r3, [pc, #528]	; (8003014 <HAL_RCC_OscConfig+0x2ac>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a83      	ldr	r2, [pc, #524]	; (8003014 <HAL_RCC_OscConfig+0x2ac>)
 8002e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e0a:	6013      	str	r3, [r2, #0]
 8002e0c:	4b81      	ldr	r3, [pc, #516]	; (8003014 <HAL_RCC_OscConfig+0x2ac>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a80      	ldr	r2, [pc, #512]	; (8003014 <HAL_RCC_OscConfig+0x2ac>)
 8002e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d013      	beq.n	8002e48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e20:	f7fe feb2 	bl	8001b88 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e28:	f7fe feae 	bl	8001b88 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b64      	cmp	r3, #100	; 0x64
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e204      	b.n	8003244 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3a:	4b76      	ldr	r3, [pc, #472]	; (8003014 <HAL_RCC_OscConfig+0x2ac>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0f0      	beq.n	8002e28 <HAL_RCC_OscConfig+0xc0>
 8002e46:	e014      	b.n	8002e72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e48:	f7fe fe9e 	bl	8001b88 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e50:	f7fe fe9a 	bl	8001b88 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b64      	cmp	r3, #100	; 0x64
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e1f0      	b.n	8003244 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e62:	4b6c      	ldr	r3, [pc, #432]	; (8003014 <HAL_RCC_OscConfig+0x2ac>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f0      	bne.n	8002e50 <HAL_RCC_OscConfig+0xe8>
 8002e6e:	e000      	b.n	8002e72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d063      	beq.n	8002f46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e7e:	4b65      	ldr	r3, [pc, #404]	; (8003014 <HAL_RCC_OscConfig+0x2ac>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 030c 	and.w	r3, r3, #12
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00b      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e8a:	4b62      	ldr	r3, [pc, #392]	; (8003014 <HAL_RCC_OscConfig+0x2ac>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e92:	2b08      	cmp	r3, #8
 8002e94:	d11c      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e96:	4b5f      	ldr	r3, [pc, #380]	; (8003014 <HAL_RCC_OscConfig+0x2ac>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d116      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ea2:	4b5c      	ldr	r3, [pc, #368]	; (8003014 <HAL_RCC_OscConfig+0x2ac>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d005      	beq.n	8002eba <HAL_RCC_OscConfig+0x152>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d001      	beq.n	8002eba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e1c4      	b.n	8003244 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eba:	4b56      	ldr	r3, [pc, #344]	; (8003014 <HAL_RCC_OscConfig+0x2ac>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	4952      	ldr	r1, [pc, #328]	; (8003014 <HAL_RCC_OscConfig+0x2ac>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ece:	e03a      	b.n	8002f46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d020      	beq.n	8002f1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ed8:	4b4f      	ldr	r3, [pc, #316]	; (8003018 <HAL_RCC_OscConfig+0x2b0>)
 8002eda:	2201      	movs	r2, #1
 8002edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ede:	f7fe fe53 	bl	8001b88 <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ee6:	f7fe fe4f 	bl	8001b88 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e1a5      	b.n	8003244 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef8:	4b46      	ldr	r3, [pc, #280]	; (8003014 <HAL_RCC_OscConfig+0x2ac>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0f0      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f04:	4b43      	ldr	r3, [pc, #268]	; (8003014 <HAL_RCC_OscConfig+0x2ac>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	4940      	ldr	r1, [pc, #256]	; (8003014 <HAL_RCC_OscConfig+0x2ac>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	600b      	str	r3, [r1, #0]
 8002f18:	e015      	b.n	8002f46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f1a:	4b3f      	ldr	r3, [pc, #252]	; (8003018 <HAL_RCC_OscConfig+0x2b0>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f20:	f7fe fe32 	bl	8001b88 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f28:	f7fe fe2e 	bl	8001b88 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e184      	b.n	8003244 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f3a:	4b36      	ldr	r3, [pc, #216]	; (8003014 <HAL_RCC_OscConfig+0x2ac>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1f0      	bne.n	8002f28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d030      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d016      	beq.n	8002f88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f5a:	4b30      	ldr	r3, [pc, #192]	; (800301c <HAL_RCC_OscConfig+0x2b4>)
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f60:	f7fe fe12 	bl	8001b88 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f68:	f7fe fe0e 	bl	8001b88 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e164      	b.n	8003244 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f7a:	4b26      	ldr	r3, [pc, #152]	; (8003014 <HAL_RCC_OscConfig+0x2ac>)
 8002f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d0f0      	beq.n	8002f68 <HAL_RCC_OscConfig+0x200>
 8002f86:	e015      	b.n	8002fb4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f88:	4b24      	ldr	r3, [pc, #144]	; (800301c <HAL_RCC_OscConfig+0x2b4>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f8e:	f7fe fdfb 	bl	8001b88 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f94:	e008      	b.n	8002fa8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f96:	f7fe fdf7 	bl	8001b88 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e14d      	b.n	8003244 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa8:	4b1a      	ldr	r3, [pc, #104]	; (8003014 <HAL_RCC_OscConfig+0x2ac>)
 8002faa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1f0      	bne.n	8002f96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 80a0 	beq.w	8003102 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fc6:	4b13      	ldr	r3, [pc, #76]	; (8003014 <HAL_RCC_OscConfig+0x2ac>)
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10f      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	4b0f      	ldr	r3, [pc, #60]	; (8003014 <HAL_RCC_OscConfig+0x2ac>)
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	4a0e      	ldr	r2, [pc, #56]	; (8003014 <HAL_RCC_OscConfig+0x2ac>)
 8002fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fe2:	4b0c      	ldr	r3, [pc, #48]	; (8003014 <HAL_RCC_OscConfig+0x2ac>)
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fea:	60bb      	str	r3, [r7, #8]
 8002fec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff2:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <HAL_RCC_OscConfig+0x2b8>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d121      	bne.n	8003042 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ffe:	4b08      	ldr	r3, [pc, #32]	; (8003020 <HAL_RCC_OscConfig+0x2b8>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a07      	ldr	r2, [pc, #28]	; (8003020 <HAL_RCC_OscConfig+0x2b8>)
 8003004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003008:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800300a:	f7fe fdbd 	bl	8001b88 <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003010:	e011      	b.n	8003036 <HAL_RCC_OscConfig+0x2ce>
 8003012:	bf00      	nop
 8003014:	40023800 	.word	0x40023800
 8003018:	42470000 	.word	0x42470000
 800301c:	42470e80 	.word	0x42470e80
 8003020:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003024:	f7fe fdb0 	bl	8001b88 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e106      	b.n	8003244 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003036:	4b85      	ldr	r3, [pc, #532]	; (800324c <HAL_RCC_OscConfig+0x4e4>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0f0      	beq.n	8003024 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d106      	bne.n	8003058 <HAL_RCC_OscConfig+0x2f0>
 800304a:	4b81      	ldr	r3, [pc, #516]	; (8003250 <HAL_RCC_OscConfig+0x4e8>)
 800304c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304e:	4a80      	ldr	r2, [pc, #512]	; (8003250 <HAL_RCC_OscConfig+0x4e8>)
 8003050:	f043 0301 	orr.w	r3, r3, #1
 8003054:	6713      	str	r3, [r2, #112]	; 0x70
 8003056:	e01c      	b.n	8003092 <HAL_RCC_OscConfig+0x32a>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	2b05      	cmp	r3, #5
 800305e:	d10c      	bne.n	800307a <HAL_RCC_OscConfig+0x312>
 8003060:	4b7b      	ldr	r3, [pc, #492]	; (8003250 <HAL_RCC_OscConfig+0x4e8>)
 8003062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003064:	4a7a      	ldr	r2, [pc, #488]	; (8003250 <HAL_RCC_OscConfig+0x4e8>)
 8003066:	f043 0304 	orr.w	r3, r3, #4
 800306a:	6713      	str	r3, [r2, #112]	; 0x70
 800306c:	4b78      	ldr	r3, [pc, #480]	; (8003250 <HAL_RCC_OscConfig+0x4e8>)
 800306e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003070:	4a77      	ldr	r2, [pc, #476]	; (8003250 <HAL_RCC_OscConfig+0x4e8>)
 8003072:	f043 0301 	orr.w	r3, r3, #1
 8003076:	6713      	str	r3, [r2, #112]	; 0x70
 8003078:	e00b      	b.n	8003092 <HAL_RCC_OscConfig+0x32a>
 800307a:	4b75      	ldr	r3, [pc, #468]	; (8003250 <HAL_RCC_OscConfig+0x4e8>)
 800307c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307e:	4a74      	ldr	r2, [pc, #464]	; (8003250 <HAL_RCC_OscConfig+0x4e8>)
 8003080:	f023 0301 	bic.w	r3, r3, #1
 8003084:	6713      	str	r3, [r2, #112]	; 0x70
 8003086:	4b72      	ldr	r3, [pc, #456]	; (8003250 <HAL_RCC_OscConfig+0x4e8>)
 8003088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308a:	4a71      	ldr	r2, [pc, #452]	; (8003250 <HAL_RCC_OscConfig+0x4e8>)
 800308c:	f023 0304 	bic.w	r3, r3, #4
 8003090:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d015      	beq.n	80030c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800309a:	f7fe fd75 	bl	8001b88 <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a0:	e00a      	b.n	80030b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030a2:	f7fe fd71 	bl	8001b88 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e0c5      	b.n	8003244 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b8:	4b65      	ldr	r3, [pc, #404]	; (8003250 <HAL_RCC_OscConfig+0x4e8>)
 80030ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0ee      	beq.n	80030a2 <HAL_RCC_OscConfig+0x33a>
 80030c4:	e014      	b.n	80030f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c6:	f7fe fd5f 	bl	8001b88 <HAL_GetTick>
 80030ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030cc:	e00a      	b.n	80030e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ce:	f7fe fd5b 	bl	8001b88 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030dc:	4293      	cmp	r3, r2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e0af      	b.n	8003244 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e4:	4b5a      	ldr	r3, [pc, #360]	; (8003250 <HAL_RCC_OscConfig+0x4e8>)
 80030e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1ee      	bne.n	80030ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030f0:	7dfb      	ldrb	r3, [r7, #23]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d105      	bne.n	8003102 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f6:	4b56      	ldr	r3, [pc, #344]	; (8003250 <HAL_RCC_OscConfig+0x4e8>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	4a55      	ldr	r2, [pc, #340]	; (8003250 <HAL_RCC_OscConfig+0x4e8>)
 80030fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003100:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 809b 	beq.w	8003242 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800310c:	4b50      	ldr	r3, [pc, #320]	; (8003250 <HAL_RCC_OscConfig+0x4e8>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 030c 	and.w	r3, r3, #12
 8003114:	2b08      	cmp	r3, #8
 8003116:	d05c      	beq.n	80031d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	2b02      	cmp	r3, #2
 800311e:	d141      	bne.n	80031a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003120:	4b4c      	ldr	r3, [pc, #304]	; (8003254 <HAL_RCC_OscConfig+0x4ec>)
 8003122:	2200      	movs	r2, #0
 8003124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003126:	f7fe fd2f 	bl	8001b88 <HAL_GetTick>
 800312a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800312c:	e008      	b.n	8003140 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800312e:	f7fe fd2b 	bl	8001b88 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e081      	b.n	8003244 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003140:	4b43      	ldr	r3, [pc, #268]	; (8003250 <HAL_RCC_OscConfig+0x4e8>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1f0      	bne.n	800312e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	69da      	ldr	r2, [r3, #28]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	431a      	orrs	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315a:	019b      	lsls	r3, r3, #6
 800315c:	431a      	orrs	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003162:	085b      	lsrs	r3, r3, #1
 8003164:	3b01      	subs	r3, #1
 8003166:	041b      	lsls	r3, r3, #16
 8003168:	431a      	orrs	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316e:	061b      	lsls	r3, r3, #24
 8003170:	4937      	ldr	r1, [pc, #220]	; (8003250 <HAL_RCC_OscConfig+0x4e8>)
 8003172:	4313      	orrs	r3, r2
 8003174:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003176:	4b37      	ldr	r3, [pc, #220]	; (8003254 <HAL_RCC_OscConfig+0x4ec>)
 8003178:	2201      	movs	r2, #1
 800317a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317c:	f7fe fd04 	bl	8001b88 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003184:	f7fe fd00 	bl	8001b88 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e056      	b.n	8003244 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003196:	4b2e      	ldr	r3, [pc, #184]	; (8003250 <HAL_RCC_OscConfig+0x4e8>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d0f0      	beq.n	8003184 <HAL_RCC_OscConfig+0x41c>
 80031a2:	e04e      	b.n	8003242 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a4:	4b2b      	ldr	r3, [pc, #172]	; (8003254 <HAL_RCC_OscConfig+0x4ec>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031aa:	f7fe fced 	bl	8001b88 <HAL_GetTick>
 80031ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b0:	e008      	b.n	80031c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b2:	f7fe fce9 	bl	8001b88 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e03f      	b.n	8003244 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031c4:	4b22      	ldr	r3, [pc, #136]	; (8003250 <HAL_RCC_OscConfig+0x4e8>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1f0      	bne.n	80031b2 <HAL_RCC_OscConfig+0x44a>
 80031d0:	e037      	b.n	8003242 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d101      	bne.n	80031de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e032      	b.n	8003244 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031de:	4b1c      	ldr	r3, [pc, #112]	; (8003250 <HAL_RCC_OscConfig+0x4e8>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d028      	beq.n	800323e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d121      	bne.n	800323e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003204:	429a      	cmp	r2, r3
 8003206:	d11a      	bne.n	800323e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800320e:	4013      	ands	r3, r2
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003214:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003216:	4293      	cmp	r3, r2
 8003218:	d111      	bne.n	800323e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003224:	085b      	lsrs	r3, r3, #1
 8003226:	3b01      	subs	r3, #1
 8003228:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800322a:	429a      	cmp	r2, r3
 800322c:	d107      	bne.n	800323e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003238:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800323a:	429a      	cmp	r2, r3
 800323c:	d001      	beq.n	8003242 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e000      	b.n	8003244 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3718      	adds	r7, #24
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40007000 	.word	0x40007000
 8003250:	40023800 	.word	0x40023800
 8003254:	42470060 	.word	0x42470060

08003258 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d101      	bne.n	800326c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e0cc      	b.n	8003406 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800326c:	4b68      	ldr	r3, [pc, #416]	; (8003410 <HAL_RCC_ClockConfig+0x1b8>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0307 	and.w	r3, r3, #7
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	429a      	cmp	r2, r3
 8003278:	d90c      	bls.n	8003294 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327a:	4b65      	ldr	r3, [pc, #404]	; (8003410 <HAL_RCC_ClockConfig+0x1b8>)
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003282:	4b63      	ldr	r3, [pc, #396]	; (8003410 <HAL_RCC_ClockConfig+0x1b8>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	429a      	cmp	r2, r3
 800328e:	d001      	beq.n	8003294 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e0b8      	b.n	8003406 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d020      	beq.n	80032e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d005      	beq.n	80032b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032ac:	4b59      	ldr	r3, [pc, #356]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	4a58      	ldr	r2, [pc, #352]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80032b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0308 	and.w	r3, r3, #8
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d005      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032c4:	4b53      	ldr	r3, [pc, #332]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	4a52      	ldr	r2, [pc, #328]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80032ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d0:	4b50      	ldr	r3, [pc, #320]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	494d      	ldr	r1, [pc, #308]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d044      	beq.n	8003378 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d107      	bne.n	8003306 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f6:	4b47      	ldr	r3, [pc, #284]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d119      	bne.n	8003336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e07f      	b.n	8003406 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2b02      	cmp	r3, #2
 800330c:	d003      	beq.n	8003316 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003312:	2b03      	cmp	r3, #3
 8003314:	d107      	bne.n	8003326 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003316:	4b3f      	ldr	r3, [pc, #252]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d109      	bne.n	8003336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e06f      	b.n	8003406 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003326:	4b3b      	ldr	r3, [pc, #236]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e067      	b.n	8003406 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003336:	4b37      	ldr	r3, [pc, #220]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f023 0203 	bic.w	r2, r3, #3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	4934      	ldr	r1, [pc, #208]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 8003344:	4313      	orrs	r3, r2
 8003346:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003348:	f7fe fc1e 	bl	8001b88 <HAL_GetTick>
 800334c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800334e:	e00a      	b.n	8003366 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003350:	f7fe fc1a 	bl	8001b88 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	f241 3288 	movw	r2, #5000	; 0x1388
 800335e:	4293      	cmp	r3, r2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e04f      	b.n	8003406 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003366:	4b2b      	ldr	r3, [pc, #172]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 020c 	and.w	r2, r3, #12
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	429a      	cmp	r2, r3
 8003376:	d1eb      	bne.n	8003350 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003378:	4b25      	ldr	r3, [pc, #148]	; (8003410 <HAL_RCC_ClockConfig+0x1b8>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	429a      	cmp	r2, r3
 8003384:	d20c      	bcs.n	80033a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003386:	4b22      	ldr	r3, [pc, #136]	; (8003410 <HAL_RCC_ClockConfig+0x1b8>)
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	b2d2      	uxtb	r2, r2
 800338c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800338e:	4b20      	ldr	r3, [pc, #128]	; (8003410 <HAL_RCC_ClockConfig+0x1b8>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0307 	and.w	r3, r3, #7
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	429a      	cmp	r2, r3
 800339a:	d001      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e032      	b.n	8003406 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d008      	beq.n	80033be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033ac:	4b19      	ldr	r3, [pc, #100]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	4916      	ldr	r1, [pc, #88]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d009      	beq.n	80033de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033ca:	4b12      	ldr	r3, [pc, #72]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	490e      	ldr	r1, [pc, #56]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033de:	f000 f821 	bl	8003424 <HAL_RCC_GetSysClockFreq>
 80033e2:	4602      	mov	r2, r0
 80033e4:	4b0b      	ldr	r3, [pc, #44]	; (8003414 <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	091b      	lsrs	r3, r3, #4
 80033ea:	f003 030f 	and.w	r3, r3, #15
 80033ee:	490a      	ldr	r1, [pc, #40]	; (8003418 <HAL_RCC_ClockConfig+0x1c0>)
 80033f0:	5ccb      	ldrb	r3, [r1, r3]
 80033f2:	fa22 f303 	lsr.w	r3, r2, r3
 80033f6:	4a09      	ldr	r2, [pc, #36]	; (800341c <HAL_RCC_ClockConfig+0x1c4>)
 80033f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033fa:	4b09      	ldr	r3, [pc, #36]	; (8003420 <HAL_RCC_ClockConfig+0x1c8>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f7fe fb7e 	bl	8001b00 <HAL_InitTick>

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	40023c00 	.word	0x40023c00
 8003414:	40023800 	.word	0x40023800
 8003418:	0800b38c 	.word	0x0800b38c
 800341c:	20000000 	.word	0x20000000
 8003420:	20000004 	.word	0x20000004

08003424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003424:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003428:	b084      	sub	sp, #16
 800342a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800342c:	2300      	movs	r3, #0
 800342e:	607b      	str	r3, [r7, #4]
 8003430:	2300      	movs	r3, #0
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	2300      	movs	r3, #0
 8003436:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003438:	2300      	movs	r3, #0
 800343a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800343c:	4b67      	ldr	r3, [pc, #412]	; (80035dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f003 030c 	and.w	r3, r3, #12
 8003444:	2b08      	cmp	r3, #8
 8003446:	d00d      	beq.n	8003464 <HAL_RCC_GetSysClockFreq+0x40>
 8003448:	2b08      	cmp	r3, #8
 800344a:	f200 80bd 	bhi.w	80035c8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800344e:	2b00      	cmp	r3, #0
 8003450:	d002      	beq.n	8003458 <HAL_RCC_GetSysClockFreq+0x34>
 8003452:	2b04      	cmp	r3, #4
 8003454:	d003      	beq.n	800345e <HAL_RCC_GetSysClockFreq+0x3a>
 8003456:	e0b7      	b.n	80035c8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003458:	4b61      	ldr	r3, [pc, #388]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800345a:	60bb      	str	r3, [r7, #8]
       break;
 800345c:	e0b7      	b.n	80035ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800345e:	4b61      	ldr	r3, [pc, #388]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003460:	60bb      	str	r3, [r7, #8]
      break;
 8003462:	e0b4      	b.n	80035ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003464:	4b5d      	ldr	r3, [pc, #372]	; (80035dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800346c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800346e:	4b5b      	ldr	r3, [pc, #364]	; (80035dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d04d      	beq.n	8003516 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800347a:	4b58      	ldr	r3, [pc, #352]	; (80035dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	099b      	lsrs	r3, r3, #6
 8003480:	461a      	mov	r2, r3
 8003482:	f04f 0300 	mov.w	r3, #0
 8003486:	f240 10ff 	movw	r0, #511	; 0x1ff
 800348a:	f04f 0100 	mov.w	r1, #0
 800348e:	ea02 0800 	and.w	r8, r2, r0
 8003492:	ea03 0901 	and.w	r9, r3, r1
 8003496:	4640      	mov	r0, r8
 8003498:	4649      	mov	r1, r9
 800349a:	f04f 0200 	mov.w	r2, #0
 800349e:	f04f 0300 	mov.w	r3, #0
 80034a2:	014b      	lsls	r3, r1, #5
 80034a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80034a8:	0142      	lsls	r2, r0, #5
 80034aa:	4610      	mov	r0, r2
 80034ac:	4619      	mov	r1, r3
 80034ae:	ebb0 0008 	subs.w	r0, r0, r8
 80034b2:	eb61 0109 	sbc.w	r1, r1, r9
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	f04f 0300 	mov.w	r3, #0
 80034be:	018b      	lsls	r3, r1, #6
 80034c0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80034c4:	0182      	lsls	r2, r0, #6
 80034c6:	1a12      	subs	r2, r2, r0
 80034c8:	eb63 0301 	sbc.w	r3, r3, r1
 80034cc:	f04f 0000 	mov.w	r0, #0
 80034d0:	f04f 0100 	mov.w	r1, #0
 80034d4:	00d9      	lsls	r1, r3, #3
 80034d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034da:	00d0      	lsls	r0, r2, #3
 80034dc:	4602      	mov	r2, r0
 80034de:	460b      	mov	r3, r1
 80034e0:	eb12 0208 	adds.w	r2, r2, r8
 80034e4:	eb43 0309 	adc.w	r3, r3, r9
 80034e8:	f04f 0000 	mov.w	r0, #0
 80034ec:	f04f 0100 	mov.w	r1, #0
 80034f0:	0259      	lsls	r1, r3, #9
 80034f2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80034f6:	0250      	lsls	r0, r2, #9
 80034f8:	4602      	mov	r2, r0
 80034fa:	460b      	mov	r3, r1
 80034fc:	4610      	mov	r0, r2
 80034fe:	4619      	mov	r1, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	461a      	mov	r2, r3
 8003504:	f04f 0300 	mov.w	r3, #0
 8003508:	f7fd fbbe 	bl	8000c88 <__aeabi_uldivmod>
 800350c:	4602      	mov	r2, r0
 800350e:	460b      	mov	r3, r1
 8003510:	4613      	mov	r3, r2
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	e04a      	b.n	80035ac <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003516:	4b31      	ldr	r3, [pc, #196]	; (80035dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	099b      	lsrs	r3, r3, #6
 800351c:	461a      	mov	r2, r3
 800351e:	f04f 0300 	mov.w	r3, #0
 8003522:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003526:	f04f 0100 	mov.w	r1, #0
 800352a:	ea02 0400 	and.w	r4, r2, r0
 800352e:	ea03 0501 	and.w	r5, r3, r1
 8003532:	4620      	mov	r0, r4
 8003534:	4629      	mov	r1, r5
 8003536:	f04f 0200 	mov.w	r2, #0
 800353a:	f04f 0300 	mov.w	r3, #0
 800353e:	014b      	lsls	r3, r1, #5
 8003540:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003544:	0142      	lsls	r2, r0, #5
 8003546:	4610      	mov	r0, r2
 8003548:	4619      	mov	r1, r3
 800354a:	1b00      	subs	r0, r0, r4
 800354c:	eb61 0105 	sbc.w	r1, r1, r5
 8003550:	f04f 0200 	mov.w	r2, #0
 8003554:	f04f 0300 	mov.w	r3, #0
 8003558:	018b      	lsls	r3, r1, #6
 800355a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800355e:	0182      	lsls	r2, r0, #6
 8003560:	1a12      	subs	r2, r2, r0
 8003562:	eb63 0301 	sbc.w	r3, r3, r1
 8003566:	f04f 0000 	mov.w	r0, #0
 800356a:	f04f 0100 	mov.w	r1, #0
 800356e:	00d9      	lsls	r1, r3, #3
 8003570:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003574:	00d0      	lsls	r0, r2, #3
 8003576:	4602      	mov	r2, r0
 8003578:	460b      	mov	r3, r1
 800357a:	1912      	adds	r2, r2, r4
 800357c:	eb45 0303 	adc.w	r3, r5, r3
 8003580:	f04f 0000 	mov.w	r0, #0
 8003584:	f04f 0100 	mov.w	r1, #0
 8003588:	0299      	lsls	r1, r3, #10
 800358a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800358e:	0290      	lsls	r0, r2, #10
 8003590:	4602      	mov	r2, r0
 8003592:	460b      	mov	r3, r1
 8003594:	4610      	mov	r0, r2
 8003596:	4619      	mov	r1, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	461a      	mov	r2, r3
 800359c:	f04f 0300 	mov.w	r3, #0
 80035a0:	f7fd fb72 	bl	8000c88 <__aeabi_uldivmod>
 80035a4:	4602      	mov	r2, r0
 80035a6:	460b      	mov	r3, r1
 80035a8:	4613      	mov	r3, r2
 80035aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035ac:	4b0b      	ldr	r3, [pc, #44]	; (80035dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	0c1b      	lsrs	r3, r3, #16
 80035b2:	f003 0303 	and.w	r3, r3, #3
 80035b6:	3301      	adds	r3, #1
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c4:	60bb      	str	r3, [r7, #8]
      break;
 80035c6:	e002      	b.n	80035ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035c8:	4b05      	ldr	r3, [pc, #20]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80035ca:	60bb      	str	r3, [r7, #8]
      break;
 80035cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035ce:	68bb      	ldr	r3, [r7, #8]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80035da:	bf00      	nop
 80035dc:	40023800 	.word	0x40023800
 80035e0:	00f42400 	.word	0x00f42400
 80035e4:	007a1200 	.word	0x007a1200

080035e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035ec:	4b03      	ldr	r3, [pc, #12]	; (80035fc <HAL_RCC_GetHCLKFreq+0x14>)
 80035ee:	681b      	ldr	r3, [r3, #0]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	20000000 	.word	0x20000000

08003600 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003604:	f7ff fff0 	bl	80035e8 <HAL_RCC_GetHCLKFreq>
 8003608:	4602      	mov	r2, r0
 800360a:	4b05      	ldr	r3, [pc, #20]	; (8003620 <HAL_RCC_GetPCLK1Freq+0x20>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	0a9b      	lsrs	r3, r3, #10
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	4903      	ldr	r1, [pc, #12]	; (8003624 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003616:	5ccb      	ldrb	r3, [r1, r3]
 8003618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800361c:	4618      	mov	r0, r3
 800361e:	bd80      	pop	{r7, pc}
 8003620:	40023800 	.word	0x40023800
 8003624:	0800b39c 	.word	0x0800b39c

08003628 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800362c:	f7ff ffdc 	bl	80035e8 <HAL_RCC_GetHCLKFreq>
 8003630:	4602      	mov	r2, r0
 8003632:	4b05      	ldr	r3, [pc, #20]	; (8003648 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	0b5b      	lsrs	r3, r3, #13
 8003638:	f003 0307 	and.w	r3, r3, #7
 800363c:	4903      	ldr	r1, [pc, #12]	; (800364c <HAL_RCC_GetPCLK2Freq+0x24>)
 800363e:	5ccb      	ldrb	r3, [r1, r3]
 8003640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003644:	4618      	mov	r0, r3
 8003646:	bd80      	pop	{r7, pc}
 8003648:	40023800 	.word	0x40023800
 800364c:	0800b39c 	.word	0x0800b39c

08003650 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e03f      	b.n	80036e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d106      	bne.n	800367c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7fd feb0 	bl	80013dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2224      	movs	r2, #36	; 0x24
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003692:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f001 f83f 	bl	8004718 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	691a      	ldr	r2, [r3, #16]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	695a      	ldr	r2, [r3, #20]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68da      	ldr	r2, [r3, #12]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2220      	movs	r2, #32
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2220      	movs	r2, #32
 80036dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b08a      	sub	sp, #40	; 0x28
 80036ee:	af02      	add	r7, sp, #8
 80036f0:	60f8      	str	r0, [r7, #12]
 80036f2:	60b9      	str	r1, [r7, #8]
 80036f4:	603b      	str	r3, [r7, #0]
 80036f6:	4613      	mov	r3, r2
 80036f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036fa:	2300      	movs	r3, #0
 80036fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b20      	cmp	r3, #32
 8003708:	d17c      	bne.n	8003804 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d002      	beq.n	8003716 <HAL_UART_Transmit+0x2c>
 8003710:	88fb      	ldrh	r3, [r7, #6]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e075      	b.n	8003806 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003720:	2b01      	cmp	r3, #1
 8003722:	d101      	bne.n	8003728 <HAL_UART_Transmit+0x3e>
 8003724:	2302      	movs	r3, #2
 8003726:	e06e      	b.n	8003806 <HAL_UART_Transmit+0x11c>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2221      	movs	r2, #33	; 0x21
 800373a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800373e:	f7fe fa23 	bl	8001b88 <HAL_GetTick>
 8003742:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	88fa      	ldrh	r2, [r7, #6]
 8003748:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	88fa      	ldrh	r2, [r7, #6]
 800374e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003758:	d108      	bne.n	800376c <HAL_UART_Transmit+0x82>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d104      	bne.n	800376c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003762:	2300      	movs	r3, #0
 8003764:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	61bb      	str	r3, [r7, #24]
 800376a:	e003      	b.n	8003774 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003770:	2300      	movs	r3, #0
 8003772:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800377c:	e02a      	b.n	80037d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	2200      	movs	r2, #0
 8003786:	2180      	movs	r1, #128	; 0x80
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f000 fcfa 	bl	8004182 <UART_WaitOnFlagUntilTimeout>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d001      	beq.n	8003798 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e036      	b.n	8003806 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10b      	bne.n	80037b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	881b      	ldrh	r3, [r3, #0]
 80037a2:	461a      	mov	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	3302      	adds	r3, #2
 80037b2:	61bb      	str	r3, [r7, #24]
 80037b4:	e007      	b.n	80037c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	781a      	ldrb	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	3301      	adds	r3, #1
 80037c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	3b01      	subs	r3, #1
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037d8:	b29b      	uxth	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1cf      	bne.n	800377e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	2200      	movs	r2, #0
 80037e6:	2140      	movs	r1, #64	; 0x40
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 fcca 	bl	8004182 <UART_WaitOnFlagUntilTimeout>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e006      	b.n	8003806 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2220      	movs	r2, #32
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003800:	2300      	movs	r3, #0
 8003802:	e000      	b.n	8003806 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003804:	2302      	movs	r3, #2
  }
}
 8003806:	4618      	mov	r0, r3
 8003808:	3720      	adds	r7, #32
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
	...

08003810 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b08c      	sub	sp, #48	; 0x30
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	4613      	mov	r3, r2
 800381c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b20      	cmp	r3, #32
 8003828:	d165      	bne.n	80038f6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d002      	beq.n	8003836 <HAL_UART_Transmit_DMA+0x26>
 8003830:	88fb      	ldrh	r3, [r7, #6]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e05e      	b.n	80038f8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003840:	2b01      	cmp	r3, #1
 8003842:	d101      	bne.n	8003848 <HAL_UART_Transmit_DMA+0x38>
 8003844:	2302      	movs	r3, #2
 8003846:	e057      	b.n	80038f8 <HAL_UART_Transmit_DMA+0xe8>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	88fa      	ldrh	r2, [r7, #6]
 800385a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	88fa      	ldrh	r2, [r7, #6]
 8003860:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2221      	movs	r2, #33	; 0x21
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003874:	4a22      	ldr	r2, [pc, #136]	; (8003900 <HAL_UART_Transmit_DMA+0xf0>)
 8003876:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800387c:	4a21      	ldr	r2, [pc, #132]	; (8003904 <HAL_UART_Transmit_DMA+0xf4>)
 800387e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003884:	4a20      	ldr	r2, [pc, #128]	; (8003908 <HAL_UART_Transmit_DMA+0xf8>)
 8003886:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800388c:	2200      	movs	r2, #0
 800388e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8003890:	f107 0308 	add.w	r3, r7, #8
 8003894:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800389a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800389c:	6819      	ldr	r1, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	3304      	adds	r3, #4
 80038a4:	461a      	mov	r2, r3
 80038a6:	88fb      	ldrh	r3, [r7, #6]
 80038a8:	f7fe fb5e 	bl	8001f68 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038b4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	3314      	adds	r3, #20
 80038c4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	e853 3f00 	ldrex	r3, [r3]
 80038cc:	617b      	str	r3, [r7, #20]
   return(result);
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	3314      	adds	r3, #20
 80038dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038de:	627a      	str	r2, [r7, #36]	; 0x24
 80038e0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e2:	6a39      	ldr	r1, [r7, #32]
 80038e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e6:	e841 2300 	strex	r3, r2, [r1]
 80038ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1e5      	bne.n	80038be <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80038f2:	2300      	movs	r3, #0
 80038f4:	e000      	b.n	80038f8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80038f6:	2302      	movs	r3, #2
  }
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3730      	adds	r7, #48	; 0x30
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	08003edd 	.word	0x08003edd
 8003904:	08003f77 	.word	0x08003f77
 8003908:	080040ef 	.word	0x080040ef

0800390c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	4613      	mov	r3, r2
 8003918:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b20      	cmp	r3, #32
 8003924:	d11d      	bne.n	8003962 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d002      	beq.n	8003932 <HAL_UART_Receive_DMA+0x26>
 800392c:	88fb      	ldrh	r3, [r7, #6]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e016      	b.n	8003964 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800393c:	2b01      	cmp	r3, #1
 800393e:	d101      	bne.n	8003944 <HAL_UART_Receive_DMA+0x38>
 8003940:	2302      	movs	r3, #2
 8003942:	e00f      	b.n	8003964 <HAL_UART_Receive_DMA+0x58>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003952:	88fb      	ldrh	r3, [r7, #6]
 8003954:	461a      	mov	r2, r3
 8003956:	68b9      	ldr	r1, [r7, #8]
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f000 fc81 	bl	8004260 <UART_Start_Receive_DMA>
 800395e:	4603      	mov	r3, r0
 8003960:	e000      	b.n	8003964 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003962:	2302      	movs	r3, #2
  }
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b0ba      	sub	sp, #232	; 0xe8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003992:	2300      	movs	r3, #0
 8003994:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003998:	2300      	movs	r3, #0
 800399a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800399e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80039aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10f      	bne.n	80039d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039b6:	f003 0320 	and.w	r3, r3, #32
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d009      	beq.n	80039d2 <HAL_UART_IRQHandler+0x66>
 80039be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039c2:	f003 0320 	and.w	r3, r3, #32
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 fde9 	bl	80045a2 <UART_Receive_IT>
      return;
 80039d0:	e256      	b.n	8003e80 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80039d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 80de 	beq.w	8003b98 <HAL_UART_IRQHandler+0x22c>
 80039dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d106      	bne.n	80039f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039ec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 80d1 	beq.w	8003b98 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00b      	beq.n	8003a1a <HAL_UART_IRQHandler+0xae>
 8003a02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d005      	beq.n	8003a1a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	f043 0201 	orr.w	r2, r3, #1
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a1e:	f003 0304 	and.w	r3, r3, #4
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00b      	beq.n	8003a3e <HAL_UART_IRQHandler+0xd2>
 8003a26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d005      	beq.n	8003a3e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	f043 0202 	orr.w	r2, r3, #2
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00b      	beq.n	8003a62 <HAL_UART_IRQHandler+0xf6>
 8003a4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d005      	beq.n	8003a62 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	f043 0204 	orr.w	r2, r3, #4
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d011      	beq.n	8003a92 <HAL_UART_IRQHandler+0x126>
 8003a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a72:	f003 0320 	and.w	r3, r3, #32
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d105      	bne.n	8003a86 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d005      	beq.n	8003a92 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	f043 0208 	orr.w	r2, r3, #8
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f000 81ed 	beq.w	8003e76 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aa0:	f003 0320 	and.w	r3, r3, #32
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d008      	beq.n	8003aba <HAL_UART_IRQHandler+0x14e>
 8003aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aac:	f003 0320 	and.w	r3, r3, #32
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d002      	beq.n	8003aba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 fd74 	bl	80045a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac4:	2b40      	cmp	r3, #64	; 0x40
 8003ac6:	bf0c      	ite	eq
 8003ac8:	2301      	moveq	r3, #1
 8003aca:	2300      	movne	r3, #0
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	f003 0308 	and.w	r3, r3, #8
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d103      	bne.n	8003ae6 <HAL_UART_IRQHandler+0x17a>
 8003ade:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d04f      	beq.n	8003b86 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 fc7c 	bl	80043e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af6:	2b40      	cmp	r3, #64	; 0x40
 8003af8:	d141      	bne.n	8003b7e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	3314      	adds	r3, #20
 8003b00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b08:	e853 3f00 	ldrex	r3, [r3]
 8003b0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	3314      	adds	r3, #20
 8003b22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b36:	e841 2300 	strex	r3, r2, [r1]
 8003b3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1d9      	bne.n	8003afa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d013      	beq.n	8003b76 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b52:	4a7d      	ldr	r2, [pc, #500]	; (8003d48 <HAL_UART_IRQHandler+0x3dc>)
 8003b54:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fe facc 	bl	80020f8 <HAL_DMA_Abort_IT>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d016      	beq.n	8003b94 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b70:	4610      	mov	r0, r2
 8003b72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b74:	e00e      	b.n	8003b94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f99a 	bl	8003eb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b7c:	e00a      	b.n	8003b94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f996 	bl	8003eb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b84:	e006      	b.n	8003b94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f992 	bl	8003eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003b92:	e170      	b.n	8003e76 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b94:	bf00      	nop
    return;
 8003b96:	e16e      	b.n	8003e76 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	f040 814a 	bne.w	8003e36 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ba6:	f003 0310 	and.w	r3, r3, #16
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f000 8143 	beq.w	8003e36 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bb4:	f003 0310 	and.w	r3, r3, #16
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 813c 	beq.w	8003e36 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	60bb      	str	r3, [r7, #8]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	60bb      	str	r3, [r7, #8]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	60bb      	str	r3, [r7, #8]
 8003bd2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bde:	2b40      	cmp	r3, #64	; 0x40
 8003be0:	f040 80b4 	bne.w	8003d4c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003bf0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 8140 	beq.w	8003e7a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003bfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c02:	429a      	cmp	r2, r3
 8003c04:	f080 8139 	bcs.w	8003e7a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c0e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c1a:	f000 8088 	beq.w	8003d2e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	330c      	adds	r3, #12
 8003c24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c2c:	e853 3f00 	ldrex	r3, [r3]
 8003c30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	330c      	adds	r3, #12
 8003c46:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003c4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c52:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c56:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c5a:	e841 2300 	strex	r3, r2, [r1]
 8003c5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1d9      	bne.n	8003c1e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	3314      	adds	r3, #20
 8003c70:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c74:	e853 3f00 	ldrex	r3, [r3]
 8003c78:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c7c:	f023 0301 	bic.w	r3, r3, #1
 8003c80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	3314      	adds	r3, #20
 8003c8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c8e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c92:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c94:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c9a:	e841 2300 	strex	r3, r2, [r1]
 8003c9e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ca0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1e1      	bne.n	8003c6a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	3314      	adds	r3, #20
 8003cac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cb0:	e853 3f00 	ldrex	r3, [r3]
 8003cb4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003cb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	3314      	adds	r3, #20
 8003cc6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003cca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ccc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003cd0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003cd2:	e841 2300 	strex	r3, r2, [r1]
 8003cd6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003cd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1e3      	bne.n	8003ca6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	330c      	adds	r3, #12
 8003cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cf6:	e853 3f00 	ldrex	r3, [r3]
 8003cfa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003cfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cfe:	f023 0310 	bic.w	r3, r3, #16
 8003d02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	330c      	adds	r3, #12
 8003d0c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003d10:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d12:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d18:	e841 2300 	strex	r3, r2, [r1]
 8003d1c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1e3      	bne.n	8003cec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7fe f975 	bl	8002018 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f8c0 	bl	8003ec4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d44:	e099      	b.n	8003e7a <HAL_UART_IRQHandler+0x50e>
 8003d46:	bf00      	nop
 8003d48:	080044ab 	.word	0x080044ab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f000 808b 	beq.w	8003e7e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003d68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 8086 	beq.w	8003e7e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	330c      	adds	r3, #12
 8003d78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7c:	e853 3f00 	ldrex	r3, [r3]
 8003d80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	330c      	adds	r3, #12
 8003d92:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003d96:	647a      	str	r2, [r7, #68]	; 0x44
 8003d98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d9e:	e841 2300 	strex	r3, r2, [r1]
 8003da2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1e3      	bne.n	8003d72 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	3314      	adds	r3, #20
 8003db0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	e853 3f00 	ldrex	r3, [r3]
 8003db8:	623b      	str	r3, [r7, #32]
   return(result);
 8003dba:	6a3b      	ldr	r3, [r7, #32]
 8003dbc:	f023 0301 	bic.w	r3, r3, #1
 8003dc0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	3314      	adds	r3, #20
 8003dca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003dce:	633a      	str	r2, [r7, #48]	; 0x30
 8003dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dd6:	e841 2300 	strex	r3, r2, [r1]
 8003dda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1e3      	bne.n	8003daa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2220      	movs	r2, #32
 8003de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	330c      	adds	r3, #12
 8003df6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	e853 3f00 	ldrex	r3, [r3]
 8003dfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f023 0310 	bic.w	r3, r3, #16
 8003e06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	330c      	adds	r3, #12
 8003e10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003e14:	61fa      	str	r2, [r7, #28]
 8003e16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e18:	69b9      	ldr	r1, [r7, #24]
 8003e1a:	69fa      	ldr	r2, [r7, #28]
 8003e1c:	e841 2300 	strex	r3, r2, [r1]
 8003e20:	617b      	str	r3, [r7, #20]
   return(result);
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1e3      	bne.n	8003df0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f848 	bl	8003ec4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e34:	e023      	b.n	8003e7e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d009      	beq.n	8003e56 <HAL_UART_IRQHandler+0x4ea>
 8003e42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 fb3f 	bl	80044d2 <UART_Transmit_IT>
    return;
 8003e54:	e014      	b.n	8003e80 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00e      	beq.n	8003e80 <HAL_UART_IRQHandler+0x514>
 8003e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d008      	beq.n	8003e80 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 fb7f 	bl	8004572 <UART_EndTransmit_IT>
    return;
 8003e74:	e004      	b.n	8003e80 <HAL_UART_IRQHandler+0x514>
    return;
 8003e76:	bf00      	nop
 8003e78:	e002      	b.n	8003e80 <HAL_UART_IRQHandler+0x514>
      return;
 8003e7a:	bf00      	nop
 8003e7c:	e000      	b.n	8003e80 <HAL_UART_IRQHandler+0x514>
      return;
 8003e7e:	bf00      	nop
  }
}
 8003e80:	37e8      	adds	r7, #232	; 0xe8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop

08003e88 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	460b      	mov	r3, r1
 8003ece:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b090      	sub	sp, #64	; 0x40
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d137      	bne.n	8003f68 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003efa:	2200      	movs	r2, #0
 8003efc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	3314      	adds	r3, #20
 8003f04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	e853 3f00 	ldrex	r3, [r3]
 8003f0c:	623b      	str	r3, [r7, #32]
   return(result);
 8003f0e:	6a3b      	ldr	r3, [r7, #32]
 8003f10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f14:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	3314      	adds	r3, #20
 8003f1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f1e:	633a      	str	r2, [r7, #48]	; 0x30
 8003f20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f26:	e841 2300 	strex	r3, r2, [r1]
 8003f2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1e5      	bne.n	8003efe <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	330c      	adds	r3, #12
 8003f38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	e853 3f00 	ldrex	r3, [r3]
 8003f40:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f48:	637b      	str	r3, [r7, #52]	; 0x34
 8003f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	330c      	adds	r3, #12
 8003f50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f52:	61fa      	str	r2, [r7, #28]
 8003f54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f56:	69b9      	ldr	r1, [r7, #24]
 8003f58:	69fa      	ldr	r2, [r7, #28]
 8003f5a:	e841 2300 	strex	r3, r2, [r1]
 8003f5e:	617b      	str	r3, [r7, #20]
   return(result);
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1e5      	bne.n	8003f32 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003f66:	e002      	b.n	8003f6e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003f68:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003f6a:	f001 fdb7 	bl	8005adc <HAL_UART_TxCpltCallback>
}
 8003f6e:	bf00      	nop
 8003f70:	3740      	adds	r7, #64	; 0x40
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b084      	sub	sp, #16
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f82:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f7ff ff7f 	bl	8003e88 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f8a:	bf00      	nop
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b09c      	sub	sp, #112	; 0x70
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d172      	bne.n	8004094 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	330c      	adds	r3, #12
 8003fba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fbe:	e853 3f00 	ldrex	r3, [r3]
 8003fc2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003fc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fca:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	330c      	adds	r3, #12
 8003fd2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003fd4:	65ba      	str	r2, [r7, #88]	; 0x58
 8003fd6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003fda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fdc:	e841 2300 	strex	r3, r2, [r1]
 8003fe0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003fe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1e5      	bne.n	8003fb4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	3314      	adds	r3, #20
 8003fee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff2:	e853 3f00 	ldrex	r3, [r3]
 8003ff6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ffa:	f023 0301 	bic.w	r3, r3, #1
 8003ffe:	667b      	str	r3, [r7, #100]	; 0x64
 8004000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3314      	adds	r3, #20
 8004006:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004008:	647a      	str	r2, [r7, #68]	; 0x44
 800400a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800400e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004010:	e841 2300 	strex	r3, r2, [r1]
 8004014:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1e5      	bne.n	8003fe8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800401c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	3314      	adds	r3, #20
 8004022:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004026:	e853 3f00 	ldrex	r3, [r3]
 800402a:	623b      	str	r3, [r7, #32]
   return(result);
 800402c:	6a3b      	ldr	r3, [r7, #32]
 800402e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004032:	663b      	str	r3, [r7, #96]	; 0x60
 8004034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3314      	adds	r3, #20
 800403a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800403c:	633a      	str	r2, [r7, #48]	; 0x30
 800403e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004040:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004042:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004044:	e841 2300 	strex	r3, r2, [r1]
 8004048:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800404a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1e5      	bne.n	800401c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004052:	2220      	movs	r2, #32
 8004054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800405a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405c:	2b01      	cmp	r3, #1
 800405e:	d119      	bne.n	8004094 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	330c      	adds	r3, #12
 8004066:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	e853 3f00 	ldrex	r3, [r3]
 800406e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f023 0310 	bic.w	r3, r3, #16
 8004076:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004078:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	330c      	adds	r3, #12
 800407e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004080:	61fa      	str	r2, [r7, #28]
 8004082:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004084:	69b9      	ldr	r1, [r7, #24]
 8004086:	69fa      	ldr	r2, [r7, #28]
 8004088:	e841 2300 	strex	r3, r2, [r1]
 800408c:	617b      	str	r3, [r7, #20]
   return(result);
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1e5      	bne.n	8004060 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004098:	2b01      	cmp	r3, #1
 800409a:	d106      	bne.n	80040aa <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800409c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800409e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040a0:	4619      	mov	r1, r3
 80040a2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80040a4:	f7ff ff0e 	bl	8003ec4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80040a8:	e002      	b.n	80040b0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80040aa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80040ac:	f001 fd2a 	bl	8005b04 <HAL_UART_RxCpltCallback>
}
 80040b0:	bf00      	nop
 80040b2:	3770      	adds	r7, #112	; 0x70
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d108      	bne.n	80040e0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040d2:	085b      	lsrs	r3, r3, #1
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	4619      	mov	r1, r3
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f7ff fef3 	bl	8003ec4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80040de:	e002      	b.n	80040e6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f7ff fedb 	bl	8003e9c <HAL_UART_RxHalfCpltCallback>
}
 80040e6:	bf00      	nop
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b084      	sub	sp, #16
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80040f6:	2300      	movs	r3, #0
 80040f8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fe:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800410a:	2b80      	cmp	r3, #128	; 0x80
 800410c:	bf0c      	ite	eq
 800410e:	2301      	moveq	r3, #1
 8004110:	2300      	movne	r3, #0
 8004112:	b2db      	uxtb	r3, r3
 8004114:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b21      	cmp	r3, #33	; 0x21
 8004120:	d108      	bne.n	8004134 <UART_DMAError+0x46>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d005      	beq.n	8004134 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	2200      	movs	r2, #0
 800412c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800412e:	68b8      	ldr	r0, [r7, #8]
 8004130:	f000 f930 	bl	8004394 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413e:	2b40      	cmp	r3, #64	; 0x40
 8004140:	bf0c      	ite	eq
 8004142:	2301      	moveq	r3, #1
 8004144:	2300      	movne	r3, #0
 8004146:	b2db      	uxtb	r3, r3
 8004148:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b22      	cmp	r3, #34	; 0x22
 8004154:	d108      	bne.n	8004168 <UART_DMAError+0x7a>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d005      	beq.n	8004168 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	2200      	movs	r2, #0
 8004160:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004162:	68b8      	ldr	r0, [r7, #8]
 8004164:	f000 f93e 	bl	80043e4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416c:	f043 0210 	orr.w	r2, r3, #16
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004174:	68b8      	ldr	r0, [r7, #8]
 8004176:	f7ff fe9b 	bl	8003eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800417a:	bf00      	nop
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b090      	sub	sp, #64	; 0x40
 8004186:	af00      	add	r7, sp, #0
 8004188:	60f8      	str	r0, [r7, #12]
 800418a:	60b9      	str	r1, [r7, #8]
 800418c:	603b      	str	r3, [r7, #0]
 800418e:	4613      	mov	r3, r2
 8004190:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004192:	e050      	b.n	8004236 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004194:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800419a:	d04c      	beq.n	8004236 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800419c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d007      	beq.n	80041b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80041a2:	f7fd fcf1 	bl	8001b88 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d241      	bcs.n	8004236 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	330c      	adds	r3, #12
 80041b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041bc:	e853 3f00 	ldrex	r3, [r3]
 80041c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	330c      	adds	r3, #12
 80041d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041d2:	637a      	str	r2, [r7, #52]	; 0x34
 80041d4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041da:	e841 2300 	strex	r3, r2, [r1]
 80041de:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80041e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1e5      	bne.n	80041b2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	3314      	adds	r3, #20
 80041ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	e853 3f00 	ldrex	r3, [r3]
 80041f4:	613b      	str	r3, [r7, #16]
   return(result);
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	f023 0301 	bic.w	r3, r3, #1
 80041fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	3314      	adds	r3, #20
 8004204:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004206:	623a      	str	r2, [r7, #32]
 8004208:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420a:	69f9      	ldr	r1, [r7, #28]
 800420c:	6a3a      	ldr	r2, [r7, #32]
 800420e:	e841 2300 	strex	r3, r2, [r1]
 8004212:	61bb      	str	r3, [r7, #24]
   return(result);
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1e5      	bne.n	80041e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2220      	movs	r2, #32
 800421e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2220      	movs	r2, #32
 8004226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e00f      	b.n	8004256 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	4013      	ands	r3, r2
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	429a      	cmp	r2, r3
 8004244:	bf0c      	ite	eq
 8004246:	2301      	moveq	r3, #1
 8004248:	2300      	movne	r3, #0
 800424a:	b2db      	uxtb	r3, r3
 800424c:	461a      	mov	r2, r3
 800424e:	79fb      	ldrb	r3, [r7, #7]
 8004250:	429a      	cmp	r2, r3
 8004252:	d09f      	beq.n	8004194 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3740      	adds	r7, #64	; 0x40
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
	...

08004260 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b098      	sub	sp, #96	; 0x60
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	4613      	mov	r3, r2
 800426c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	88fa      	ldrh	r2, [r7, #6]
 8004278:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2222      	movs	r2, #34	; 0x22
 8004284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428c:	4a3e      	ldr	r2, [pc, #248]	; (8004388 <UART_Start_Receive_DMA+0x128>)
 800428e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004294:	4a3d      	ldr	r2, [pc, #244]	; (800438c <UART_Start_Receive_DMA+0x12c>)
 8004296:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429c:	4a3c      	ldr	r2, [pc, #240]	; (8004390 <UART_Start_Receive_DMA+0x130>)
 800429e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a4:	2200      	movs	r2, #0
 80042a6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80042a8:	f107 0308 	add.w	r3, r7, #8
 80042ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	3304      	adds	r3, #4
 80042b8:	4619      	mov	r1, r3
 80042ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	88fb      	ldrh	r3, [r7, #6]
 80042c0:	f7fd fe52 	bl	8001f68 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80042c4:	2300      	movs	r3, #0
 80042c6:	613b      	str	r3, [r7, #16]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	613b      	str	r3, [r7, #16]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	613b      	str	r3, [r7, #16]
 80042d8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	330c      	adds	r3, #12
 80042e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042ec:	e853 3f00 	ldrex	r3, [r3]
 80042f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	330c      	adds	r3, #12
 8004300:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004302:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004304:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004306:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004308:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800430a:	e841 2300 	strex	r3, r2, [r1]
 800430e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1e5      	bne.n	80042e2 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	3314      	adds	r3, #20
 800431c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004320:	e853 3f00 	ldrex	r3, [r3]
 8004324:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004328:	f043 0301 	orr.w	r3, r3, #1
 800432c:	657b      	str	r3, [r7, #84]	; 0x54
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	3314      	adds	r3, #20
 8004334:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004336:	63ba      	str	r2, [r7, #56]	; 0x38
 8004338:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800433c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800433e:	e841 2300 	strex	r3, r2, [r1]
 8004342:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1e5      	bne.n	8004316 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	3314      	adds	r3, #20
 8004350:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	e853 3f00 	ldrex	r3, [r3]
 8004358:	617b      	str	r3, [r7, #20]
   return(result);
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004360:	653b      	str	r3, [r7, #80]	; 0x50
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	3314      	adds	r3, #20
 8004368:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800436a:	627a      	str	r2, [r7, #36]	; 0x24
 800436c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436e:	6a39      	ldr	r1, [r7, #32]
 8004370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004372:	e841 2300 	strex	r3, r2, [r1]
 8004376:	61fb      	str	r3, [r7, #28]
   return(result);
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1e5      	bne.n	800434a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3760      	adds	r7, #96	; 0x60
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	08003f93 	.word	0x08003f93
 800438c:	080040b9 	.word	0x080040b9
 8004390:	080040ef 	.word	0x080040ef

08004394 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004394:	b480      	push	{r7}
 8004396:	b089      	sub	sp, #36	; 0x24
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	330c      	adds	r3, #12
 80043a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	e853 3f00 	ldrex	r3, [r3]
 80043aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80043b2:	61fb      	str	r3, [r7, #28]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	330c      	adds	r3, #12
 80043ba:	69fa      	ldr	r2, [r7, #28]
 80043bc:	61ba      	str	r2, [r7, #24]
 80043be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c0:	6979      	ldr	r1, [r7, #20]
 80043c2:	69ba      	ldr	r2, [r7, #24]
 80043c4:	e841 2300 	strex	r3, r2, [r1]
 80043c8:	613b      	str	r3, [r7, #16]
   return(result);
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1e5      	bne.n	800439c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2220      	movs	r2, #32
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80043d8:	bf00      	nop
 80043da:	3724      	adds	r7, #36	; 0x24
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b095      	sub	sp, #84	; 0x54
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	330c      	adds	r3, #12
 80043f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043f6:	e853 3f00 	ldrex	r3, [r3]
 80043fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80043fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004402:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	330c      	adds	r3, #12
 800440a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800440c:	643a      	str	r2, [r7, #64]	; 0x40
 800440e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004410:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004412:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004414:	e841 2300 	strex	r3, r2, [r1]
 8004418:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800441a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1e5      	bne.n	80043ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	3314      	adds	r3, #20
 8004426:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004428:	6a3b      	ldr	r3, [r7, #32]
 800442a:	e853 3f00 	ldrex	r3, [r3]
 800442e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	f023 0301 	bic.w	r3, r3, #1
 8004436:	64bb      	str	r3, [r7, #72]	; 0x48
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	3314      	adds	r3, #20
 800443e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004440:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004442:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004444:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004446:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004448:	e841 2300 	strex	r3, r2, [r1]
 800444c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800444e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1e5      	bne.n	8004420 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004458:	2b01      	cmp	r3, #1
 800445a:	d119      	bne.n	8004490 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	330c      	adds	r3, #12
 8004462:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	e853 3f00 	ldrex	r3, [r3]
 800446a:	60bb      	str	r3, [r7, #8]
   return(result);
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f023 0310 	bic.w	r3, r3, #16
 8004472:	647b      	str	r3, [r7, #68]	; 0x44
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	330c      	adds	r3, #12
 800447a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800447c:	61ba      	str	r2, [r7, #24]
 800447e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004480:	6979      	ldr	r1, [r7, #20]
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	e841 2300 	strex	r3, r2, [r1]
 8004488:	613b      	str	r3, [r7, #16]
   return(result);
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1e5      	bne.n	800445c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2220      	movs	r2, #32
 8004494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800449e:	bf00      	nop
 80044a0:	3754      	adds	r7, #84	; 0x54
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b084      	sub	sp, #16
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f7ff fcf3 	bl	8003eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044ca:	bf00      	nop
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80044d2:	b480      	push	{r7}
 80044d4:	b085      	sub	sp, #20
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b21      	cmp	r3, #33	; 0x21
 80044e4:	d13e      	bne.n	8004564 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ee:	d114      	bne.n	800451a <UART_Transmit_IT+0x48>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d110      	bne.n	800451a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a1b      	ldr	r3, [r3, #32]
 80044fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	881b      	ldrh	r3, [r3, #0]
 8004502:	461a      	mov	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800450c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	1c9a      	adds	r2, r3, #2
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	621a      	str	r2, [r3, #32]
 8004518:	e008      	b.n	800452c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	1c59      	adds	r1, r3, #1
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6211      	str	r1, [r2, #32]
 8004524:	781a      	ldrb	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004530:	b29b      	uxth	r3, r3
 8004532:	3b01      	subs	r3, #1
 8004534:	b29b      	uxth	r3, r3
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	4619      	mov	r1, r3
 800453a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10f      	bne.n	8004560 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68da      	ldr	r2, [r3, #12]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800454e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68da      	ldr	r2, [r3, #12]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800455e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004560:	2300      	movs	r3, #0
 8004562:	e000      	b.n	8004566 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004564:	2302      	movs	r3, #2
  }
}
 8004566:	4618      	mov	r0, r3
 8004568:	3714      	adds	r7, #20
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	b082      	sub	sp, #8
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68da      	ldr	r2, [r3, #12]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004588:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2220      	movs	r2, #32
 800458e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f001 faa2 	bl	8005adc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3708      	adds	r7, #8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b08c      	sub	sp, #48	; 0x30
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b22      	cmp	r3, #34	; 0x22
 80045b4:	f040 80ab 	bne.w	800470e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045c0:	d117      	bne.n	80045f2 <UART_Receive_IT+0x50>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d113      	bne.n	80045f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80045ca:	2300      	movs	r3, #0
 80045cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	b29b      	uxth	r3, r3
 80045dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ea:	1c9a      	adds	r2, r3, #2
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	629a      	str	r2, [r3, #40]	; 0x28
 80045f0:	e026      	b.n	8004640 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80045f8:	2300      	movs	r3, #0
 80045fa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004604:	d007      	beq.n	8004616 <UART_Receive_IT+0x74>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10a      	bne.n	8004624 <UART_Receive_IT+0x82>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d106      	bne.n	8004624 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	b2da      	uxtb	r2, r3
 800461e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004620:	701a      	strb	r2, [r3, #0]
 8004622:	e008      	b.n	8004636 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	b2db      	uxtb	r3, r3
 800462c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004630:	b2da      	uxtb	r2, r3
 8004632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004634:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463a:	1c5a      	adds	r2, r3, #1
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004644:	b29b      	uxth	r3, r3
 8004646:	3b01      	subs	r3, #1
 8004648:	b29b      	uxth	r3, r3
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	4619      	mov	r1, r3
 800464e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004650:	2b00      	cmp	r3, #0
 8004652:	d15a      	bne.n	800470a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68da      	ldr	r2, [r3, #12]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 0220 	bic.w	r2, r2, #32
 8004662:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68da      	ldr	r2, [r3, #12]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004672:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	695a      	ldr	r2, [r3, #20]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 0201 	bic.w	r2, r2, #1
 8004682:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2220      	movs	r2, #32
 8004688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004690:	2b01      	cmp	r3, #1
 8004692:	d135      	bne.n	8004700 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	330c      	adds	r3, #12
 80046a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	e853 3f00 	ldrex	r3, [r3]
 80046a8:	613b      	str	r3, [r7, #16]
   return(result);
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	f023 0310 	bic.w	r3, r3, #16
 80046b0:	627b      	str	r3, [r7, #36]	; 0x24
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	330c      	adds	r3, #12
 80046b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ba:	623a      	str	r2, [r7, #32]
 80046bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046be:	69f9      	ldr	r1, [r7, #28]
 80046c0:	6a3a      	ldr	r2, [r7, #32]
 80046c2:	e841 2300 	strex	r3, r2, [r1]
 80046c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1e5      	bne.n	800469a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0310 	and.w	r3, r3, #16
 80046d8:	2b10      	cmp	r3, #16
 80046da:	d10a      	bne.n	80046f2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046dc:	2300      	movs	r3, #0
 80046de:	60fb      	str	r3, [r7, #12]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	60fb      	str	r3, [r7, #12]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80046f6:	4619      	mov	r1, r3
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f7ff fbe3 	bl	8003ec4 <HAL_UARTEx_RxEventCallback>
 80046fe:	e002      	b.n	8004706 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f001 f9ff 	bl	8005b04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004706:	2300      	movs	r3, #0
 8004708:	e002      	b.n	8004710 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800470a:	2300      	movs	r3, #0
 800470c:	e000      	b.n	8004710 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800470e:	2302      	movs	r3, #2
  }
}
 8004710:	4618      	mov	r0, r3
 8004712:	3730      	adds	r7, #48	; 0x30
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800471c:	b09f      	sub	sp, #124	; 0x7c
 800471e:	af00      	add	r7, sp, #0
 8004720:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800472c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800472e:	68d9      	ldr	r1, [r3, #12]
 8004730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	ea40 0301 	orr.w	r3, r0, r1
 8004738:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800473a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800473c:	689a      	ldr	r2, [r3, #8]
 800473e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	431a      	orrs	r2, r3
 8004744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	431a      	orrs	r2, r3
 800474a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800474c:	69db      	ldr	r3, [r3, #28]
 800474e:	4313      	orrs	r3, r2
 8004750:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800475c:	f021 010c 	bic.w	r1, r1, #12
 8004760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004766:	430b      	orrs	r3, r1
 8004768:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800476a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	695b      	ldr	r3, [r3, #20]
 8004770:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004776:	6999      	ldr	r1, [r3, #24]
 8004778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	ea40 0301 	orr.w	r3, r0, r1
 8004780:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	4bc5      	ldr	r3, [pc, #788]	; (8004a9c <UART_SetConfig+0x384>)
 8004788:	429a      	cmp	r2, r3
 800478a:	d004      	beq.n	8004796 <UART_SetConfig+0x7e>
 800478c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	4bc3      	ldr	r3, [pc, #780]	; (8004aa0 <UART_SetConfig+0x388>)
 8004792:	429a      	cmp	r2, r3
 8004794:	d103      	bne.n	800479e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004796:	f7fe ff47 	bl	8003628 <HAL_RCC_GetPCLK2Freq>
 800479a:	6778      	str	r0, [r7, #116]	; 0x74
 800479c:	e002      	b.n	80047a4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800479e:	f7fe ff2f 	bl	8003600 <HAL_RCC_GetPCLK1Freq>
 80047a2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047a6:	69db      	ldr	r3, [r3, #28]
 80047a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047ac:	f040 80b6 	bne.w	800491c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80047b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047b2:	461c      	mov	r4, r3
 80047b4:	f04f 0500 	mov.w	r5, #0
 80047b8:	4622      	mov	r2, r4
 80047ba:	462b      	mov	r3, r5
 80047bc:	1891      	adds	r1, r2, r2
 80047be:	6439      	str	r1, [r7, #64]	; 0x40
 80047c0:	415b      	adcs	r3, r3
 80047c2:	647b      	str	r3, [r7, #68]	; 0x44
 80047c4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80047c8:	1912      	adds	r2, r2, r4
 80047ca:	eb45 0303 	adc.w	r3, r5, r3
 80047ce:	f04f 0000 	mov.w	r0, #0
 80047d2:	f04f 0100 	mov.w	r1, #0
 80047d6:	00d9      	lsls	r1, r3, #3
 80047d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047dc:	00d0      	lsls	r0, r2, #3
 80047de:	4602      	mov	r2, r0
 80047e0:	460b      	mov	r3, r1
 80047e2:	1911      	adds	r1, r2, r4
 80047e4:	6639      	str	r1, [r7, #96]	; 0x60
 80047e6:	416b      	adcs	r3, r5
 80047e8:	667b      	str	r3, [r7, #100]	; 0x64
 80047ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	461a      	mov	r2, r3
 80047f0:	f04f 0300 	mov.w	r3, #0
 80047f4:	1891      	adds	r1, r2, r2
 80047f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80047f8:	415b      	adcs	r3, r3
 80047fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004800:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004804:	f7fc fa40 	bl	8000c88 <__aeabi_uldivmod>
 8004808:	4602      	mov	r2, r0
 800480a:	460b      	mov	r3, r1
 800480c:	4ba5      	ldr	r3, [pc, #660]	; (8004aa4 <UART_SetConfig+0x38c>)
 800480e:	fba3 2302 	umull	r2, r3, r3, r2
 8004812:	095b      	lsrs	r3, r3, #5
 8004814:	011e      	lsls	r6, r3, #4
 8004816:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004818:	461c      	mov	r4, r3
 800481a:	f04f 0500 	mov.w	r5, #0
 800481e:	4622      	mov	r2, r4
 8004820:	462b      	mov	r3, r5
 8004822:	1891      	adds	r1, r2, r2
 8004824:	6339      	str	r1, [r7, #48]	; 0x30
 8004826:	415b      	adcs	r3, r3
 8004828:	637b      	str	r3, [r7, #52]	; 0x34
 800482a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800482e:	1912      	adds	r2, r2, r4
 8004830:	eb45 0303 	adc.w	r3, r5, r3
 8004834:	f04f 0000 	mov.w	r0, #0
 8004838:	f04f 0100 	mov.w	r1, #0
 800483c:	00d9      	lsls	r1, r3, #3
 800483e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004842:	00d0      	lsls	r0, r2, #3
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	1911      	adds	r1, r2, r4
 800484a:	65b9      	str	r1, [r7, #88]	; 0x58
 800484c:	416b      	adcs	r3, r5
 800484e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	461a      	mov	r2, r3
 8004856:	f04f 0300 	mov.w	r3, #0
 800485a:	1891      	adds	r1, r2, r2
 800485c:	62b9      	str	r1, [r7, #40]	; 0x28
 800485e:	415b      	adcs	r3, r3
 8004860:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004862:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004866:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800486a:	f7fc fa0d 	bl	8000c88 <__aeabi_uldivmod>
 800486e:	4602      	mov	r2, r0
 8004870:	460b      	mov	r3, r1
 8004872:	4b8c      	ldr	r3, [pc, #560]	; (8004aa4 <UART_SetConfig+0x38c>)
 8004874:	fba3 1302 	umull	r1, r3, r3, r2
 8004878:	095b      	lsrs	r3, r3, #5
 800487a:	2164      	movs	r1, #100	; 0x64
 800487c:	fb01 f303 	mul.w	r3, r1, r3
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	3332      	adds	r3, #50	; 0x32
 8004886:	4a87      	ldr	r2, [pc, #540]	; (8004aa4 <UART_SetConfig+0x38c>)
 8004888:	fba2 2303 	umull	r2, r3, r2, r3
 800488c:	095b      	lsrs	r3, r3, #5
 800488e:	005b      	lsls	r3, r3, #1
 8004890:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004894:	441e      	add	r6, r3
 8004896:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004898:	4618      	mov	r0, r3
 800489a:	f04f 0100 	mov.w	r1, #0
 800489e:	4602      	mov	r2, r0
 80048a0:	460b      	mov	r3, r1
 80048a2:	1894      	adds	r4, r2, r2
 80048a4:	623c      	str	r4, [r7, #32]
 80048a6:	415b      	adcs	r3, r3
 80048a8:	627b      	str	r3, [r7, #36]	; 0x24
 80048aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048ae:	1812      	adds	r2, r2, r0
 80048b0:	eb41 0303 	adc.w	r3, r1, r3
 80048b4:	f04f 0400 	mov.w	r4, #0
 80048b8:	f04f 0500 	mov.w	r5, #0
 80048bc:	00dd      	lsls	r5, r3, #3
 80048be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80048c2:	00d4      	lsls	r4, r2, #3
 80048c4:	4622      	mov	r2, r4
 80048c6:	462b      	mov	r3, r5
 80048c8:	1814      	adds	r4, r2, r0
 80048ca:	653c      	str	r4, [r7, #80]	; 0x50
 80048cc:	414b      	adcs	r3, r1
 80048ce:	657b      	str	r3, [r7, #84]	; 0x54
 80048d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	461a      	mov	r2, r3
 80048d6:	f04f 0300 	mov.w	r3, #0
 80048da:	1891      	adds	r1, r2, r2
 80048dc:	61b9      	str	r1, [r7, #24]
 80048de:	415b      	adcs	r3, r3
 80048e0:	61fb      	str	r3, [r7, #28]
 80048e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048e6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80048ea:	f7fc f9cd 	bl	8000c88 <__aeabi_uldivmod>
 80048ee:	4602      	mov	r2, r0
 80048f0:	460b      	mov	r3, r1
 80048f2:	4b6c      	ldr	r3, [pc, #432]	; (8004aa4 <UART_SetConfig+0x38c>)
 80048f4:	fba3 1302 	umull	r1, r3, r3, r2
 80048f8:	095b      	lsrs	r3, r3, #5
 80048fa:	2164      	movs	r1, #100	; 0x64
 80048fc:	fb01 f303 	mul.w	r3, r1, r3
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	00db      	lsls	r3, r3, #3
 8004904:	3332      	adds	r3, #50	; 0x32
 8004906:	4a67      	ldr	r2, [pc, #412]	; (8004aa4 <UART_SetConfig+0x38c>)
 8004908:	fba2 2303 	umull	r2, r3, r2, r3
 800490c:	095b      	lsrs	r3, r3, #5
 800490e:	f003 0207 	and.w	r2, r3, #7
 8004912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4432      	add	r2, r6
 8004918:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800491a:	e0b9      	b.n	8004a90 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800491c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800491e:	461c      	mov	r4, r3
 8004920:	f04f 0500 	mov.w	r5, #0
 8004924:	4622      	mov	r2, r4
 8004926:	462b      	mov	r3, r5
 8004928:	1891      	adds	r1, r2, r2
 800492a:	6139      	str	r1, [r7, #16]
 800492c:	415b      	adcs	r3, r3
 800492e:	617b      	str	r3, [r7, #20]
 8004930:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004934:	1912      	adds	r2, r2, r4
 8004936:	eb45 0303 	adc.w	r3, r5, r3
 800493a:	f04f 0000 	mov.w	r0, #0
 800493e:	f04f 0100 	mov.w	r1, #0
 8004942:	00d9      	lsls	r1, r3, #3
 8004944:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004948:	00d0      	lsls	r0, r2, #3
 800494a:	4602      	mov	r2, r0
 800494c:	460b      	mov	r3, r1
 800494e:	eb12 0804 	adds.w	r8, r2, r4
 8004952:	eb43 0905 	adc.w	r9, r3, r5
 8004956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	4618      	mov	r0, r3
 800495c:	f04f 0100 	mov.w	r1, #0
 8004960:	f04f 0200 	mov.w	r2, #0
 8004964:	f04f 0300 	mov.w	r3, #0
 8004968:	008b      	lsls	r3, r1, #2
 800496a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800496e:	0082      	lsls	r2, r0, #2
 8004970:	4640      	mov	r0, r8
 8004972:	4649      	mov	r1, r9
 8004974:	f7fc f988 	bl	8000c88 <__aeabi_uldivmod>
 8004978:	4602      	mov	r2, r0
 800497a:	460b      	mov	r3, r1
 800497c:	4b49      	ldr	r3, [pc, #292]	; (8004aa4 <UART_SetConfig+0x38c>)
 800497e:	fba3 2302 	umull	r2, r3, r3, r2
 8004982:	095b      	lsrs	r3, r3, #5
 8004984:	011e      	lsls	r6, r3, #4
 8004986:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004988:	4618      	mov	r0, r3
 800498a:	f04f 0100 	mov.w	r1, #0
 800498e:	4602      	mov	r2, r0
 8004990:	460b      	mov	r3, r1
 8004992:	1894      	adds	r4, r2, r2
 8004994:	60bc      	str	r4, [r7, #8]
 8004996:	415b      	adcs	r3, r3
 8004998:	60fb      	str	r3, [r7, #12]
 800499a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800499e:	1812      	adds	r2, r2, r0
 80049a0:	eb41 0303 	adc.w	r3, r1, r3
 80049a4:	f04f 0400 	mov.w	r4, #0
 80049a8:	f04f 0500 	mov.w	r5, #0
 80049ac:	00dd      	lsls	r5, r3, #3
 80049ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80049b2:	00d4      	lsls	r4, r2, #3
 80049b4:	4622      	mov	r2, r4
 80049b6:	462b      	mov	r3, r5
 80049b8:	1814      	adds	r4, r2, r0
 80049ba:	64bc      	str	r4, [r7, #72]	; 0x48
 80049bc:	414b      	adcs	r3, r1
 80049be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	4618      	mov	r0, r3
 80049c6:	f04f 0100 	mov.w	r1, #0
 80049ca:	f04f 0200 	mov.w	r2, #0
 80049ce:	f04f 0300 	mov.w	r3, #0
 80049d2:	008b      	lsls	r3, r1, #2
 80049d4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80049d8:	0082      	lsls	r2, r0, #2
 80049da:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80049de:	f7fc f953 	bl	8000c88 <__aeabi_uldivmod>
 80049e2:	4602      	mov	r2, r0
 80049e4:	460b      	mov	r3, r1
 80049e6:	4b2f      	ldr	r3, [pc, #188]	; (8004aa4 <UART_SetConfig+0x38c>)
 80049e8:	fba3 1302 	umull	r1, r3, r3, r2
 80049ec:	095b      	lsrs	r3, r3, #5
 80049ee:	2164      	movs	r1, #100	; 0x64
 80049f0:	fb01 f303 	mul.w	r3, r1, r3
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	011b      	lsls	r3, r3, #4
 80049f8:	3332      	adds	r3, #50	; 0x32
 80049fa:	4a2a      	ldr	r2, [pc, #168]	; (8004aa4 <UART_SetConfig+0x38c>)
 80049fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004a00:	095b      	lsrs	r3, r3, #5
 8004a02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a06:	441e      	add	r6, r3
 8004a08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f04f 0100 	mov.w	r1, #0
 8004a10:	4602      	mov	r2, r0
 8004a12:	460b      	mov	r3, r1
 8004a14:	1894      	adds	r4, r2, r2
 8004a16:	603c      	str	r4, [r7, #0]
 8004a18:	415b      	adcs	r3, r3
 8004a1a:	607b      	str	r3, [r7, #4]
 8004a1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a20:	1812      	adds	r2, r2, r0
 8004a22:	eb41 0303 	adc.w	r3, r1, r3
 8004a26:	f04f 0400 	mov.w	r4, #0
 8004a2a:	f04f 0500 	mov.w	r5, #0
 8004a2e:	00dd      	lsls	r5, r3, #3
 8004a30:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004a34:	00d4      	lsls	r4, r2, #3
 8004a36:	4622      	mov	r2, r4
 8004a38:	462b      	mov	r3, r5
 8004a3a:	eb12 0a00 	adds.w	sl, r2, r0
 8004a3e:	eb43 0b01 	adc.w	fp, r3, r1
 8004a42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f04f 0100 	mov.w	r1, #0
 8004a4c:	f04f 0200 	mov.w	r2, #0
 8004a50:	f04f 0300 	mov.w	r3, #0
 8004a54:	008b      	lsls	r3, r1, #2
 8004a56:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004a5a:	0082      	lsls	r2, r0, #2
 8004a5c:	4650      	mov	r0, sl
 8004a5e:	4659      	mov	r1, fp
 8004a60:	f7fc f912 	bl	8000c88 <__aeabi_uldivmod>
 8004a64:	4602      	mov	r2, r0
 8004a66:	460b      	mov	r3, r1
 8004a68:	4b0e      	ldr	r3, [pc, #56]	; (8004aa4 <UART_SetConfig+0x38c>)
 8004a6a:	fba3 1302 	umull	r1, r3, r3, r2
 8004a6e:	095b      	lsrs	r3, r3, #5
 8004a70:	2164      	movs	r1, #100	; 0x64
 8004a72:	fb01 f303 	mul.w	r3, r1, r3
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	011b      	lsls	r3, r3, #4
 8004a7a:	3332      	adds	r3, #50	; 0x32
 8004a7c:	4a09      	ldr	r2, [pc, #36]	; (8004aa4 <UART_SetConfig+0x38c>)
 8004a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a82:	095b      	lsrs	r3, r3, #5
 8004a84:	f003 020f 	and.w	r2, r3, #15
 8004a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4432      	add	r2, r6
 8004a8e:	609a      	str	r2, [r3, #8]
}
 8004a90:	bf00      	nop
 8004a92:	377c      	adds	r7, #124	; 0x7c
 8004a94:	46bd      	mov	sp, r7
 8004a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a9a:	bf00      	nop
 8004a9c:	40011000 	.word	0x40011000
 8004aa0:	40011400 	.word	0x40011400
 8004aa4:	51eb851f 	.word	0x51eb851f

08004aa8 <ringBufferInit>:
#define __RING_BUFFER_CONFIGURATION
/** @brief  ringBufferInit
    @return none
*/
void ringBufferInit(ringBuffer_t *rBuff)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
	rBuff->head = 0;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	801a      	strh	r2, [r3, #0]
	rBuff->tail = 0;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	805a      	strh	r2, [r3, #2]
	rBuff->len = 0;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	809a      	strh	r2, [r3, #4]
}
 8004ac2:	bf00      	nop
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
	...

08004ad0 <ringBufferWrite>:
#define __RING_BUFFER_FUNCTION
/** @brief  ringBufferWrite
    @return ringBufferState_t
*/
ringBufferState_t ringBufferWrite(ringBuffer_t *rBuff, uint8_t wData)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	460b      	mov	r3, r1
 8004ada:	70fb      	strb	r3, [r7, #3]
	if(rBuff->len >= RING_BUFFER_LEN)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	889b      	ldrh	r3, [r3, #4]
 8004ae0:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8004ae4:	d301      	bcc.n	8004aea <ringBufferWrite+0x1a>
	{
		return RING_BUFFER_ERROR;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	e01f      	b.n	8004b2a <ringBufferWrite+0x5a>
	}

	rBuff->buffer[rBuff->tail] = wData;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	885b      	ldrh	r3, [r3, #2]
 8004aee:	461a      	mov	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4413      	add	r3, r2
 8004af4:	78fa      	ldrb	r2, [r7, #3]
 8004af6:	719a      	strb	r2, [r3, #6]
	rBuff->tail = (rBuff->tail + 1) % RING_BUFFER_LEN;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	885b      	ldrh	r3, [r3, #2]
 8004afc:	3301      	adds	r3, #1
 8004afe:	4a0e      	ldr	r2, [pc, #56]	; (8004b38 <ringBufferWrite+0x68>)
 8004b00:	fb82 1203 	smull	r1, r2, r2, r3
 8004b04:	441a      	add	r2, r3
 8004b06:	1211      	asrs	r1, r2, #8
 8004b08:	17da      	asrs	r2, r3, #31
 8004b0a:	1a8a      	subs	r2, r1, r2
 8004b0c:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8004b10:	fb01 f202 	mul.w	r2, r1, r2
 8004b14:	1a9a      	subs	r2, r3, r2
 8004b16:	b292      	uxth	r2, r2
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	805a      	strh	r2, [r3, #2]
	rBuff->len++;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	889b      	ldrh	r3, [r3, #4]
 8004b20:	3301      	adds	r3, #1
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	809a      	strh	r2, [r3, #4]

	return RING_BUFFER_OK;
 8004b28:	2301      	movs	r3, #1
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	f2b9d649 	.word	0xf2b9d649

08004b3c <ringBufferRead>:

/** @brief  ringBufferRead
    @return ringBufferState_t
*/
ringBufferState_t ringBufferRead(ringBuffer_t *rBuff, uint8_t *rData)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
	if(rBuff->len == 0)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	889b      	ldrh	r3, [r3, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <ringBufferRead+0x16>
	{
		return RING_BUFFER_ERROR;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	e020      	b.n	8004b94 <ringBufferRead+0x58>
	}

	*rData = rBuff->buffer[rBuff->head];
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	881b      	ldrh	r3, [r3, #0]
 8004b56:	461a      	mov	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	799a      	ldrb	r2, [r3, #6]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	701a      	strb	r2, [r3, #0]

	rBuff->head = (rBuff->head + 1) % RING_BUFFER_LEN;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	881b      	ldrh	r3, [r3, #0]
 8004b66:	3301      	adds	r3, #1
 8004b68:	4a0d      	ldr	r2, [pc, #52]	; (8004ba0 <ringBufferRead+0x64>)
 8004b6a:	fb82 1203 	smull	r1, r2, r2, r3
 8004b6e:	441a      	add	r2, r3
 8004b70:	1211      	asrs	r1, r2, #8
 8004b72:	17da      	asrs	r2, r3, #31
 8004b74:	1a8a      	subs	r2, r1, r2
 8004b76:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8004b7a:	fb01 f202 	mul.w	r2, r1, r2
 8004b7e:	1a9a      	subs	r2, r3, r2
 8004b80:	b292      	uxth	r2, r2
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	801a      	strh	r2, [r3, #0]
	rBuff->len--;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	889b      	ldrh	r3, [r3, #4]
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	809a      	strh	r2, [r3, #4]

	return RING_BUFFER_OK;
 8004b92:	2301      	movs	r3, #1
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	f2b9d649 	.word	0xf2b9d649

08004ba4 <serialPort_send>:
/** @brief    serialPort_send
	@param[1] serial
	@return   none
*/
void serialPort_send(serialPort_t* serial)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
    if(serial->zPrivate.uartHandle.Instance == USART2)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004bb2:	4a12      	ldr	r2, [pc, #72]	; (8004bfc <serialPort_send+0x58>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d10b      	bne.n	8004bd0 <serialPort_send+0x2c>
    {
        HAL_UART_Transmit_DMA(&huart2, serial->zPrivate.writeBuffer, serial->zPrivate.writeBufferPtr);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f203 310e 	addw	r1, r3, #782	; 0x30e
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 3ade 	ldrb.w	r3, [r3, #2782]	; 0xade
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	480d      	ldr	r0, [pc, #52]	; (8004c00 <serialPort_send+0x5c>)
 8004bca:	f7fe fe21 	bl	8003810 <HAL_UART_Transmit_DMA>
    }
    else if(serial->zPrivate.uartHandle.Instance == UART4)
    {
        HAL_UART_Transmit_DMA(&huart4, serial->zPrivate.writeBuffer, serial->zPrivate.writeBufferPtr);
    }
}
 8004bce:	e010      	b.n	8004bf2 <serialPort_send+0x4e>
    else if(serial->zPrivate.uartHandle.Instance == UART4)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004bd6:	4a0b      	ldr	r2, [pc, #44]	; (8004c04 <serialPort_send+0x60>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d10a      	bne.n	8004bf2 <serialPort_send+0x4e>
        HAL_UART_Transmit_DMA(&huart4, serial->zPrivate.writeBuffer, serial->zPrivate.writeBufferPtr);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f203 310e 	addw	r1, r3, #782	; 0x30e
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f893 3ade 	ldrb.w	r3, [r3, #2782]	; 0xade
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	461a      	mov	r2, r3
 8004bec:	4806      	ldr	r0, [pc, #24]	; (8004c08 <serialPort_send+0x64>)
 8004bee:	f7fe fe0f 	bl	8003810 <HAL_UART_Transmit_DMA>
}
 8004bf2:	bf00      	nop
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	40004400 	.word	0x40004400
 8004c00:	200005e4 	.word	0x200005e4
 8004c04:	40004c00 	.word	0x40004c00
 8004c08:	200005a0 	.word	0x200005a0

08004c0c <serialPort_write>:
	@param[2] buff
	@param[3] len
	@return   none
*/
void serialPort_write(serialPort_t* serial, uint8_t* buff, uint8_t len)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b086      	sub	sp, #24
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	4613      	mov	r3, r2
 8004c18:	71fb      	strb	r3, [r7, #7]
    uint16_t i = 0;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	82fb      	strh	r3, [r7, #22]

    if(serial->isWriteFinish == true)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d03f      	beq.n	8004ca8 <serialPort_write+0x9c>
     {
        for( i = 0; i < serial->zPrivate.writeBufferPtr; i++)
 8004c28:	2300      	movs	r3, #0
 8004c2a:	82fb      	strh	r3, [r7, #22]
 8004c2c:	e00d      	b.n	8004c4a <serialPort_write+0x3e>
        {
            serial->zPrivate.writeBuffer[i] = serial->zPrivate.writeBufferTemp[i];
 8004c2e:	8afa      	ldrh	r2, [r7, #22]
 8004c30:	8afb      	ldrh	r3, [r7, #22]
 8004c32:	68f9      	ldr	r1, [r7, #12]
 8004c34:	440a      	add	r2, r1
 8004c36:	f892 16f6 	ldrb.w	r1, [r2, #1782]	; 0x6f6
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	460a      	mov	r2, r1
 8004c40:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e
        for( i = 0; i < serial->zPrivate.writeBufferPtr; i++)
 8004c44:	8afb      	ldrh	r3, [r7, #22]
 8004c46:	3301      	adds	r3, #1
 8004c48:	82fb      	strh	r3, [r7, #22]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f893 3ade 	ldrb.w	r3, [r3, #2782]	; 0xade
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	8afa      	ldrh	r2, [r7, #22]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d3ea      	bcc.n	8004c2e <serialPort_write+0x22>
        }

        for( i = 0; i < len; i++)
 8004c58:	2300      	movs	r3, #0
 8004c5a:	82fb      	strh	r3, [r7, #22]
 8004c5c:	e013      	b.n	8004c86 <serialPort_write+0x7a>
        {
            serial->zPrivate.writeBuffer[serial->zPrivate.writeBufferPtr++] = buff[i];
 8004c5e:	8afb      	ldrh	r3, [r7, #22]
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	441a      	add	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f893 3ade 	ldrb.w	r3, [r3, #2782]	; 0xade
 8004c6a:	1c59      	adds	r1, r3, #1
 8004c6c:	b2c8      	uxtb	r0, r1
 8004c6e:	68f9      	ldr	r1, [r7, #12]
 8004c70:	f881 0ade 	strb.w	r0, [r1, #2782]	; 0xade
 8004c74:	4619      	mov	r1, r3
 8004c76:	7812      	ldrb	r2, [r2, #0]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	440b      	add	r3, r1
 8004c7c:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e
        for( i = 0; i < len; i++)
 8004c80:	8afb      	ldrh	r3, [r7, #22]
 8004c82:	3301      	adds	r3, #1
 8004c84:	82fb      	strh	r3, [r7, #22]
 8004c86:	79fb      	ldrb	r3, [r7, #7]
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	8afa      	ldrh	r2, [r7, #22]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d3e6      	bcc.n	8004c5e <serialPort_write+0x52>
        }

        serialPort_send(serial);
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f7ff ff87 	bl	8004ba4 <serialPort_send>

        serial->zPrivate.writeBufferPtr = 0;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 2ade 	strb.w	r2, [r3, #2782]	; 0xade
        serial->isWriteFinish = false;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
        for( i = 0; i < len; i++)
        {
            serial->zPrivate.writeBufferTemp[serial->zPrivate.writeBufferPtr++] = buff[i];
        }
    }
}
 8004ca6:	e01b      	b.n	8004ce0 <serialPort_write+0xd4>
        for( i = 0; i < len; i++)
 8004ca8:	2300      	movs	r3, #0
 8004caa:	82fb      	strh	r3, [r7, #22]
 8004cac:	e013      	b.n	8004cd6 <serialPort_write+0xca>
            serial->zPrivate.writeBufferTemp[serial->zPrivate.writeBufferPtr++] = buff[i];
 8004cae:	8afb      	ldrh	r3, [r7, #22]
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	441a      	add	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f893 3ade 	ldrb.w	r3, [r3, #2782]	; 0xade
 8004cba:	1c59      	adds	r1, r3, #1
 8004cbc:	b2c8      	uxtb	r0, r1
 8004cbe:	68f9      	ldr	r1, [r7, #12]
 8004cc0:	f881 0ade 	strb.w	r0, [r1, #2782]	; 0xade
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	7812      	ldrb	r2, [r2, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	440b      	add	r3, r1
 8004ccc:	f883 26f6 	strb.w	r2, [r3, #1782]	; 0x6f6
        for( i = 0; i < len; i++)
 8004cd0:	8afb      	ldrh	r3, [r7, #22]
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	82fb      	strh	r3, [r7, #22]
 8004cd6:	79fb      	ldrb	r3, [r7, #7]
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	8afa      	ldrh	r2, [r7, #22]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d3e6      	bcc.n	8004cae <serialPort_write+0xa2>
}
 8004ce0:	bf00      	nop
 8004ce2:	3718      	adds	r7, #24
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <serialPort_tx_finish>:
/** @brief    serialPort_tx_finish
	@param[1] serial
	@return   none
*/
void serialPort_tx_finish(serialPort_t* serial)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
    if(serial->zPrivate.writeBufferPtr != 0)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f893 3ade 	ldrb.w	r3, [r3, #2782]	; 0xade
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d020      	beq.n	8004d3c <serialPort_tx_finish+0x54>
    {
        uint8_t i = 0;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	73fb      	strb	r3, [r7, #15]

        for( i = 0; i < serial->zPrivate.writeBufferPtr; i++)
 8004cfe:	2300      	movs	r3, #0
 8004d00:	73fb      	strb	r3, [r7, #15]
 8004d02:	e00d      	b.n	8004d20 <serialPort_tx_finish+0x38>
        {
            serial->zPrivate.writeBuffer[i] = serial->zPrivate.writeBufferTemp[i];
 8004d04:	7bfa      	ldrb	r2, [r7, #15]
 8004d06:	7bfb      	ldrb	r3, [r7, #15]
 8004d08:	6879      	ldr	r1, [r7, #4]
 8004d0a:	440a      	add	r2, r1
 8004d0c:	f892 16f6 	ldrb.w	r1, [r2, #1782]	; 0x6f6
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	4413      	add	r3, r2
 8004d14:	460a      	mov	r2, r1
 8004d16:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e
        for( i = 0; i < serial->zPrivate.writeBufferPtr; i++)
 8004d1a:	7bfb      	ldrb	r3, [r7, #15]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	73fb      	strb	r3, [r7, #15]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f893 3ade 	ldrb.w	r3, [r3, #2782]	; 0xade
 8004d26:	7bfa      	ldrb	r2, [r7, #15]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d3eb      	bcc.n	8004d04 <serialPort_tx_finish+0x1c>
        }

        serialPort_send(serial);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f7ff ff39 	bl	8004ba4 <serialPort_send>
        serial->zPrivate.writeBufferPtr = 0;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 2ade 	strb.w	r2, [r3, #2782]	; 0xade
    }
    else
    {
        serial->isWriteFinish = true;
    }
}
 8004d3a:	e003      	b.n	8004d44 <serialPort_tx_finish+0x5c>
        serial->isWriteFinish = true;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
}
 8004d44:	bf00      	nop
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <storageFlash_GetSector>:

/** @brief  storageFlash_GetSector
    @return uint32_t
*/
static uint32_t storageFlash_GetSector(uint32_t Address)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
	uint32_t sector = 0;
 8004d54:	2300      	movs	r3, #0
 8004d56:	60fb      	str	r3, [r7, #12]

	if((Address < 0x08003FFF) && (Address >= 0x08000000))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a44      	ldr	r2, [pc, #272]	; (8004e6c <storageFlash_GetSector+0x120>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d806      	bhi.n	8004d6e <storageFlash_GetSector+0x22>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d66:	d302      	bcc.n	8004d6e <storageFlash_GetSector+0x22>
	{
		sector = FLASH_SECTOR_0;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	e077      	b.n	8004e5e <storageFlash_GetSector+0x112>
	}
	else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a3f      	ldr	r2, [pc, #252]	; (8004e70 <storageFlash_GetSector+0x124>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d806      	bhi.n	8004d84 <storageFlash_GetSector+0x38>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a3e      	ldr	r2, [pc, #248]	; (8004e74 <storageFlash_GetSector+0x128>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d302      	bcc.n	8004d84 <storageFlash_GetSector+0x38>
	{
		sector = FLASH_SECTOR_1;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	60fb      	str	r3, [r7, #12]
 8004d82:	e06c      	b.n	8004e5e <storageFlash_GetSector+0x112>
	}
	else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a3c      	ldr	r2, [pc, #240]	; (8004e78 <storageFlash_GetSector+0x12c>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d806      	bhi.n	8004d9a <storageFlash_GetSector+0x4e>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a3b      	ldr	r2, [pc, #236]	; (8004e7c <storageFlash_GetSector+0x130>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d302      	bcc.n	8004d9a <storageFlash_GetSector+0x4e>
	{
		sector = FLASH_SECTOR_2;
 8004d94:	2302      	movs	r3, #2
 8004d96:	60fb      	str	r3, [r7, #12]
 8004d98:	e061      	b.n	8004e5e <storageFlash_GetSector+0x112>
	}
	else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a38      	ldr	r2, [pc, #224]	; (8004e80 <storageFlash_GetSector+0x134>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d206      	bcs.n	8004db0 <storageFlash_GetSector+0x64>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a37      	ldr	r2, [pc, #220]	; (8004e84 <storageFlash_GetSector+0x138>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d302      	bcc.n	8004db0 <storageFlash_GetSector+0x64>
	{
		sector = FLASH_SECTOR_3;
 8004daa:	2303      	movs	r3, #3
 8004dac:	60fb      	str	r3, [r7, #12]
 8004dae:	e056      	b.n	8004e5e <storageFlash_GetSector+0x112>
	}
	else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a35      	ldr	r2, [pc, #212]	; (8004e88 <storageFlash_GetSector+0x13c>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d206      	bcs.n	8004dc6 <storageFlash_GetSector+0x7a>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a31      	ldr	r2, [pc, #196]	; (8004e80 <storageFlash_GetSector+0x134>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d902      	bls.n	8004dc6 <storageFlash_GetSector+0x7a>
	{
		sector = FLASH_SECTOR_4;
 8004dc0:	2304      	movs	r3, #4
 8004dc2:	60fb      	str	r3, [r7, #12]
 8004dc4:	e04b      	b.n	8004e5e <storageFlash_GetSector+0x112>
	}
	else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a30      	ldr	r2, [pc, #192]	; (8004e8c <storageFlash_GetSector+0x140>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d206      	bcs.n	8004ddc <storageFlash_GetSector+0x90>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a2d      	ldr	r2, [pc, #180]	; (8004e88 <storageFlash_GetSector+0x13c>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d902      	bls.n	8004ddc <storageFlash_GetSector+0x90>
	{
		sector = FLASH_SECTOR_5;
 8004dd6:	2305      	movs	r3, #5
 8004dd8:	60fb      	str	r3, [r7, #12]
 8004dda:	e040      	b.n	8004e5e <storageFlash_GetSector+0x112>
	}
	else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a2c      	ldr	r2, [pc, #176]	; (8004e90 <storageFlash_GetSector+0x144>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d206      	bcs.n	8004df2 <storageFlash_GetSector+0xa6>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a29      	ldr	r2, [pc, #164]	; (8004e8c <storageFlash_GetSector+0x140>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d902      	bls.n	8004df2 <storageFlash_GetSector+0xa6>
	{
		sector = FLASH_SECTOR_6;
 8004dec:	2306      	movs	r3, #6
 8004dee:	60fb      	str	r3, [r7, #12]
 8004df0:	e035      	b.n	8004e5e <storageFlash_GetSector+0x112>
	}
	else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a27      	ldr	r2, [pc, #156]	; (8004e94 <storageFlash_GetSector+0x148>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d206      	bcs.n	8004e08 <storageFlash_GetSector+0xbc>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a24      	ldr	r2, [pc, #144]	; (8004e90 <storageFlash_GetSector+0x144>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d902      	bls.n	8004e08 <storageFlash_GetSector+0xbc>
	{
		sector = FLASH_SECTOR_7;
 8004e02:	2307      	movs	r3, #7
 8004e04:	60fb      	str	r3, [r7, #12]
 8004e06:	e02a      	b.n	8004e5e <storageFlash_GetSector+0x112>
	}
	else if((Address < 0x0809FFFF) && (Address >= 0x08080000))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a23      	ldr	r2, [pc, #140]	; (8004e98 <storageFlash_GetSector+0x14c>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d206      	bcs.n	8004e1e <storageFlash_GetSector+0xd2>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a20      	ldr	r2, [pc, #128]	; (8004e94 <storageFlash_GetSector+0x148>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d902      	bls.n	8004e1e <storageFlash_GetSector+0xd2>
	{
		sector = FLASH_SECTOR_8;
 8004e18:	2308      	movs	r3, #8
 8004e1a:	60fb      	str	r3, [r7, #12]
 8004e1c:	e01f      	b.n	8004e5e <storageFlash_GetSector+0x112>
	}
	else if((Address < 0x080BFFFF) && (Address >= 0x080A0000))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a1e      	ldr	r2, [pc, #120]	; (8004e9c <storageFlash_GetSector+0x150>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d206      	bcs.n	8004e34 <storageFlash_GetSector+0xe8>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a1b      	ldr	r2, [pc, #108]	; (8004e98 <storageFlash_GetSector+0x14c>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d902      	bls.n	8004e34 <storageFlash_GetSector+0xe8>
	{
		sector = FLASH_SECTOR_9;
 8004e2e:	2309      	movs	r3, #9
 8004e30:	60fb      	str	r3, [r7, #12]
 8004e32:	e014      	b.n	8004e5e <storageFlash_GetSector+0x112>
	}
	else if((Address < 0x080DFFFF) && (Address >= 0x080C0000))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a1a      	ldr	r2, [pc, #104]	; (8004ea0 <storageFlash_GetSector+0x154>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d806      	bhi.n	8004e4a <storageFlash_GetSector+0xfe>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a17      	ldr	r2, [pc, #92]	; (8004e9c <storageFlash_GetSector+0x150>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d902      	bls.n	8004e4a <storageFlash_GetSector+0xfe>
	{
		sector = FLASH_SECTOR_10;
 8004e44:	230a      	movs	r3, #10
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	e009      	b.n	8004e5e <storageFlash_GetSector+0x112>
	}
	else if((Address < 0x080FFFFF) && (Address >= 0x080E0000))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a15      	ldr	r2, [pc, #84]	; (8004ea4 <storageFlash_GetSector+0x158>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d805      	bhi.n	8004e5e <storageFlash_GetSector+0x112>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a14      	ldr	r2, [pc, #80]	; (8004ea8 <storageFlash_GetSector+0x15c>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d901      	bls.n	8004e5e <storageFlash_GetSector+0x112>
	{
		sector = FLASH_SECTOR_11;
 8004e5a:	230b      	movs	r3, #11
 8004e5c:	60fb      	str	r3, [r7, #12]
	}

	return sector;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3714      	adds	r7, #20
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr
 8004e6c:	08003ffe 	.word	0x08003ffe
 8004e70:	08007ffe 	.word	0x08007ffe
 8004e74:	08004000 	.word	0x08004000
 8004e78:	0800bffe 	.word	0x0800bffe
 8004e7c:	08008000 	.word	0x08008000
 8004e80:	0800ffff 	.word	0x0800ffff
 8004e84:	0800c000 	.word	0x0800c000
 8004e88:	0801ffff 	.word	0x0801ffff
 8004e8c:	0803ffff 	.word	0x0803ffff
 8004e90:	0805ffff 	.word	0x0805ffff
 8004e94:	0807ffff 	.word	0x0807ffff
 8004e98:	0809ffff 	.word	0x0809ffff
 8004e9c:	080bffff 	.word	0x080bffff
 8004ea0:	080dfffe 	.word	0x080dfffe
 8004ea4:	080ffffe 	.word	0x080ffffe
 8004ea8:	080dffff 	.word	0x080dffff

08004eac <storageFlash_EraseSector>:

/** @brief  storageFlash_EraseSector
    @return bool
*/
uint32_t storageFlash_EraseSector(uint32_t startSectorAddress, uint32_t offsets)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;

	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 8004eb6:	f7fd fbab 	bl	8002610 <HAL_FLASH_Unlock>

	/* Get the number of sector to erase from 1st sector */

	uint32_t StartSector = storageFlash_GetSector(startSectorAddress);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7ff ff46 	bl	8004d4c <storageFlash_GetSector>
 8004ec0:	6178      	str	r0, [r7, #20]
	uint32_t EndSectorAddress = startSectorAddress + offsets;
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	613b      	str	r3, [r7, #16]
	uint32_t EndSector = storageFlash_GetSector(EndSectorAddress);
 8004eca:	6938      	ldr	r0, [r7, #16]
 8004ecc:	f7ff ff3e 	bl	8004d4c <storageFlash_GetSector>
 8004ed0:	60f8      	str	r0, [r7, #12]

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8004ed2:	4b14      	ldr	r3, [pc, #80]	; (8004f24 <storageFlash_EraseSector+0x78>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8004ed8:	4b12      	ldr	r3, [pc, #72]	; (8004f24 <storageFlash_EraseSector+0x78>)
 8004eda:	2202      	movs	r2, #2
 8004edc:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector        = StartSector;
 8004ede:	4a11      	ldr	r2, [pc, #68]	; (8004f24 <storageFlash_EraseSector+0x78>)
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	3301      	adds	r3, #1
 8004eec:	4a0d      	ldr	r2, [pc, #52]	; (8004f24 <storageFlash_EraseSector+0x78>)
 8004eee:	60d3      	str	r3, [r2, #12]

	printf("\n[storageFlash_EraseSector] StartSector : 0x%x - EndSector 0x%x\n", (int)startSectorAddress, (int)EndSectorAddress);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	480c      	ldr	r0, [pc, #48]	; (8004f28 <storageFlash_EraseSector+0x7c>)
 8004ef8:	f001 fdaa 	bl	8006a50 <iprintf>

	/* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	 you have to make sure that these data are rewritten before they are accessed during code
	 execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	 DCRST and ICRST bits in the FLASH_CR register. */
	if (HAL_FLASHEx_Erase(&EraseInitStruct, & SECTORError) != HAL_OK)
 8004efc:	f107 0308 	add.w	r3, r7, #8
 8004f00:	4619      	mov	r1, r3
 8004f02:	4808      	ldr	r0, [pc, #32]	; (8004f24 <storageFlash_EraseSector+0x78>)
 8004f04:	f7fd fc58 	bl	80027b8 <HAL_FLASHEx_Erase>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d003      	beq.n	8004f16 <storageFlash_EraseSector+0x6a>
	{
		return HAL_FLASH_GetError();
 8004f0e:	f7fd fbb1 	bl	8002674 <HAL_FLASH_GetError>
 8004f12:	4603      	mov	r3, r0
 8004f14:	e002      	b.n	8004f1c <storageFlash_EraseSector+0x70>
	}

	/* Lock the Flash to disable the flash control register access (recommended
	 to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 8004f16:	f7fd fb9d 	bl	8002654 <HAL_FLASH_Lock>

	return 0;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3718      	adds	r7, #24
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	20000250 	.word	0x20000250
 8004f28:	0800a7ac 	.word	0x0800a7ac

08004f2c <uartBootLoaderConfiguration>:
#define __UART_BOOTLOADER_CONFIGURATION
/** @brief  uartBootLoaderConfiguration
    @return none
*/
void uartBootLoaderConfiguration(void)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	af00      	add	r7, sp, #0
	huart2.Instance 				= USART2;
 8004f30:	4b20      	ldr	r3, [pc, #128]	; (8004fb4 <uartBootLoaderConfiguration+0x88>)
 8004f32:	4a21      	ldr	r2, [pc, #132]	; (8004fb8 <uartBootLoaderConfiguration+0x8c>)
 8004f34:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate 			= 9600;
 8004f36:	4b1f      	ldr	r3, [pc, #124]	; (8004fb4 <uartBootLoaderConfiguration+0x88>)
 8004f38:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004f3c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength 			= UART_WORDLENGTH_9B;
 8004f3e:	4b1d      	ldr	r3, [pc, #116]	; (8004fb4 <uartBootLoaderConfiguration+0x88>)
 8004f40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004f44:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits 			= UART_STOPBITS_1;
 8004f46:	4b1b      	ldr	r3, [pc, #108]	; (8004fb4 <uartBootLoaderConfiguration+0x88>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity 				= UART_PARITY_EVEN;
 8004f4c:	4b19      	ldr	r3, [pc, #100]	; (8004fb4 <uartBootLoaderConfiguration+0x88>)
 8004f4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f52:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode 				= UART_MODE_TX_RX;
 8004f54:	4b17      	ldr	r3, [pc, #92]	; (8004fb4 <uartBootLoaderConfiguration+0x88>)
 8004f56:	220c      	movs	r2, #12
 8004f58:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl 			= UART_HWCONTROL_NONE;
 8004f5a:	4b16      	ldr	r3, [pc, #88]	; (8004fb4 <uartBootLoaderConfiguration+0x88>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling 		= UART_OVERSAMPLING_16;
 8004f60:	4b14      	ldr	r3, [pc, #80]	; (8004fb4 <uartBootLoaderConfiguration+0x88>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8004f66:	4813      	ldr	r0, [pc, #76]	; (8004fb4 <uartBootLoaderConfiguration+0x88>)
 8004f68:	f7fe fb72 	bl	8003650 <HAL_UART_Init>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d001      	beq.n	8004f76 <uartBootLoaderConfiguration+0x4a>
	{
		Error_Handler();
 8004f72:	f7fc f9fd 	bl	8001370 <Error_Handler>
	}

    /// xoa bo dem uart truoc khi truyen
    __HAL_UART_FLUSH_DRREGISTER(&huart2);
 8004f76:	4b0f      	ldr	r3, [pc, #60]	; (8004fb4 <uartBootLoaderConfiguration+0x88>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]

    /// init serialPort library
    serial_port2.zPrivate.uartHandle.hdmarx = &hdma_usart2_rx;
 8004f7c:	4b0f      	ldr	r3, [pc, #60]	; (8004fbc <uartBootLoaderConfiguration+0x90>)
 8004f7e:	4a10      	ldr	r2, [pc, #64]	; (8004fc0 <uartBootLoaderConfiguration+0x94>)
 8004f80:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    serial_port2.zPrivate.uartHandle.Instance = USART2;
 8004f84:	4b0d      	ldr	r3, [pc, #52]	; (8004fbc <uartBootLoaderConfiguration+0x90>)
 8004f86:	4a0c      	ldr	r2, [pc, #48]	; (8004fb8 <uartBootLoaderConfiguration+0x8c>)
 8004f88:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    serial_port2.isWriteFinish = true;
 8004f8c:	4b0b      	ldr	r3, [pc, #44]	; (8004fbc <uartBootLoaderConfiguration+0x90>)
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

	ringBufferInit(&rBufferRxU2);
 8004f94:	480b      	ldr	r0, [pc, #44]	; (8004fc4 <uartBootLoaderConfiguration+0x98>)
 8004f96:	f7ff fd87 	bl	8004aa8 <ringBufferInit>

	if(HAL_UART_Receive_DMA(&huart2, &usart2WData, 1) != HAL_OK)
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	490a      	ldr	r1, [pc, #40]	; (8004fc8 <uartBootLoaderConfiguration+0x9c>)
 8004f9e:	4805      	ldr	r0, [pc, #20]	; (8004fb4 <uartBootLoaderConfiguration+0x88>)
 8004fa0:	f7fe fcb4 	bl	800390c <HAL_UART_Receive_DMA>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <uartBootLoaderConfiguration+0x82>
	{
		Error_Handler();
 8004faa:	f7fc f9e1 	bl	8001370 <Error_Handler>
	}
}
 8004fae:	bf00      	nop
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	200005e4 	.word	0x200005e4
 8004fb8:	40004400 	.word	0x40004400
 8004fbc:	2000118c 	.word	0x2000118c
 8004fc0:	200003dc 	.word	0x200003dc
 8004fc4:	20001c8c 	.word	0x20001c8c
 8004fc8:	20001da0 	.word	0x20001da0

08004fcc <uartBootLoaderSendAck>:
#define __UART_BOOTLOADER_SEND_FUNCTION
/** @brief	uartBootLoaderSendAck
    @return	none
*/
static void uartBootLoaderSendAck(void)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
	uint8_t buffer[2] = {UART_BOOTLOADER_ACK, 0};
 8004fd2:	2379      	movs	r3, #121	; 0x79
 8004fd4:	80bb      	strh	r3, [r7, #4]

	serialPort_write(&serial_port2, buffer, 1);
 8004fd6:	1d3b      	adds	r3, r7, #4
 8004fd8:	2201      	movs	r2, #1
 8004fda:	4619      	mov	r1, r3
 8004fdc:	4803      	ldr	r0, [pc, #12]	; (8004fec <uartBootLoaderSendAck+0x20>)
 8004fde:	f7ff fe15 	bl	8004c0c <serialPort_write>
}
 8004fe2:	bf00      	nop
 8004fe4:	3708      	adds	r7, #8
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	2000118c 	.word	0x2000118c

08004ff0 <uartBootLoaderSendNack>:

/** @brief	uartBootLoaderSendAck
    @return	none
*/
static void uartBootLoaderSendNack(void)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
	uint8_t buffer[2] = {UART_BOOTLOADER_NACK, 0};
 8004ff6:	231f      	movs	r3, #31
 8004ff8:	80bb      	strh	r3, [r7, #4]

	serialPort_write(&serial_port2, buffer, 1);
 8004ffa:	1d3b      	adds	r3, r7, #4
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	4619      	mov	r1, r3
 8005000:	4803      	ldr	r0, [pc, #12]	; (8005010 <uartBootLoaderSendNack+0x20>)
 8005002:	f7ff fe03 	bl	8004c0c <serialPort_write>
}
 8005006:	bf00      	nop
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	2000118c 	.word	0x2000118c

08005014 <uartBootLoaderSendMoreByte>:

/** @brief	uartBootLoaderSendMoreByte
    @return	none
*/
static void uartBootLoaderSendMoreByte(uint8_t *buffer, uint16_t len)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	460b      	mov	r3, r1
 800501e:	807b      	strh	r3, [r7, #2]
	serialPort_write(&serial_port2, buffer, len);
 8005020:	887b      	ldrh	r3, [r7, #2]
 8005022:	b2db      	uxtb	r3, r3
 8005024:	461a      	mov	r2, r3
 8005026:	6879      	ldr	r1, [r7, #4]
 8005028:	4803      	ldr	r0, [pc, #12]	; (8005038 <uartBootLoaderSendMoreByte+0x24>)
 800502a:	f7ff fdef 	bl	8004c0c <serialPort_write>
}
 800502e:	bf00      	nop
 8005030:	3708      	adds	r7, #8
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	2000118c 	.word	0x2000118c

0800503c <uartBootLoaderChecksumCalculator>:
 *  @param[in] buffer : mang can tinh checksum
 *  @param[in] len : do dai cua mang tinh checksum
    @return	none
*/
uint8_t uartBootLoaderChecksumCalculator(uint8_t beginChecksum, uint8_t *buffer, uint16_t len)
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	4603      	mov	r3, r0
 8005044:	6039      	str	r1, [r7, #0]
 8005046:	71fb      	strb	r3, [r7, #7]
 8005048:	4613      	mov	r3, r2
 800504a:	80bb      	strh	r3, [r7, #4]
	uint8_t checksum = beginChecksum;
 800504c:	79fb      	ldrb	r3, [r7, #7]
 800504e:	73fb      	strb	r3, [r7, #15]

	for(uint16_t i = 0 ; i < len; i++)
 8005050:	2300      	movs	r3, #0
 8005052:	81bb      	strh	r3, [r7, #12]
 8005054:	e009      	b.n	800506a <uartBootLoaderChecksumCalculator+0x2e>
	{
		checksum ^= buffer[i];
 8005056:	89bb      	ldrh	r3, [r7, #12]
 8005058:	683a      	ldr	r2, [r7, #0]
 800505a:	4413      	add	r3, r2
 800505c:	781a      	ldrb	r2, [r3, #0]
 800505e:	7bfb      	ldrb	r3, [r7, #15]
 8005060:	4053      	eors	r3, r2
 8005062:	73fb      	strb	r3, [r7, #15]
	for(uint16_t i = 0 ; i < len; i++)
 8005064:	89bb      	ldrh	r3, [r7, #12]
 8005066:	3301      	adds	r3, #1
 8005068:	81bb      	strh	r3, [r7, #12]
 800506a:	89ba      	ldrh	r2, [r7, #12]
 800506c:	88bb      	ldrh	r3, [r7, #4]
 800506e:	429a      	cmp	r2, r3
 8005070:	d3f1      	bcc.n	8005056 <uartBootLoaderChecksumCalculator+0x1a>
	}

	return checksum;
 8005072:	7bfb      	ldrb	r3, [r7, #15]
}
 8005074:	4618      	mov	r0, r3
 8005076:	3714      	adds	r7, #20
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <uartBootLoaderRecieverCmdConnect>:

/** @brief  uartBootLoaderRecieverCmdConnect
    @return 
*/
static bool uartBootLoaderRecieverCmdConnect(uartBootLoader_t *boot)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
	uint8_t rData = 0;
 8005088:	2300      	movs	r3, #0
 800508a:	73fb      	strb	r3, [r7, #15]
	static uint32_t timePrintDebug = 0;

	if(rBufferRxU2.len == 1)
 800508c:	4b1d      	ldr	r3, [pc, #116]	; (8005104 <uartBootLoaderRecieverCmdConnect+0x84>)
 800508e:	889b      	ldrh	r3, [r3, #4]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d120      	bne.n	80050d6 <uartBootLoaderRecieverCmdConnect+0x56>
	{
		if(ringBufferRead(&rBufferRxU2, &rData) == RING_BUFFER_OK)
 8005094:	f107 030f 	add.w	r3, r7, #15
 8005098:	4619      	mov	r1, r3
 800509a:	481a      	ldr	r0, [pc, #104]	; (8005104 <uartBootLoaderRecieverCmdConnect+0x84>)
 800509c:	f7ff fd4e 	bl	8004b3c <ringBufferRead>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d117      	bne.n	80050d6 <uartBootLoaderRecieverCmdConnect+0x56>
		{
			if(rData == UART_BOOTLOADER_CMD_CONNECT)
 80050a6:	7bfb      	ldrb	r3, [r7, #15]
 80050a8:	2b7f      	cmp	r3, #127	; 0x7f
 80050aa:	d10c      	bne.n	80050c6 <uartBootLoaderRecieverCmdConnect+0x46>
			{
				uartBootLoaderSendAck();
 80050ac:	f7ff ff8e 	bl	8004fcc <uartBootLoaderSendAck>
				timePrintDebug = 0;
 80050b0:	4b15      	ldr	r3, [pc, #84]	; (8005108 <uartBootLoaderRecieverCmdConnect+0x88>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	601a      	str	r2, [r3, #0]
				printf("\n[uartBootLoaderRecieverCmdConnect] boot connected !@! len = %d\n", rBufferRxU2.len);
 80050b6:	4b13      	ldr	r3, [pc, #76]	; (8005104 <uartBootLoaderRecieverCmdConnect+0x84>)
 80050b8:	889b      	ldrh	r3, [r3, #4]
 80050ba:	4619      	mov	r1, r3
 80050bc:	4813      	ldr	r0, [pc, #76]	; (800510c <uartBootLoaderRecieverCmdConnect+0x8c>)
 80050be:	f001 fcc7 	bl	8006a50 <iprintf>

				return true;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e019      	b.n	80050fa <uartBootLoaderRecieverCmdConnect+0x7a>
			}
			else
			{
				uartBootLoaderSendNack();
 80050c6:	f7ff ff93 	bl	8004ff0 <uartBootLoaderSendNack>
				printf("\n[uartBootLoaderRecieverCmdConnect] non valid byte !@! len = %d\n", rBufferRxU2.len);
 80050ca:	4b0e      	ldr	r3, [pc, #56]	; (8005104 <uartBootLoaderRecieverCmdConnect+0x84>)
 80050cc:	889b      	ldrh	r3, [r3, #4]
 80050ce:	4619      	mov	r1, r3
 80050d0:	480f      	ldr	r0, [pc, #60]	; (8005110 <uartBootLoaderRecieverCmdConnect+0x90>)
 80050d2:	f001 fcbd 	bl	8006a50 <iprintf>
			}
		}
	}


	if(HAL_GetTick() - timePrintDebug > 1000)
 80050d6:	f7fc fd57 	bl	8001b88 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	4b0a      	ldr	r3, [pc, #40]	; (8005108 <uartBootLoaderRecieverCmdConnect+0x88>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050e6:	d907      	bls.n	80050f8 <uartBootLoaderRecieverCmdConnect+0x78>
	{
		timePrintDebug = HAL_GetTick();
 80050e8:	f7fc fd4e 	bl	8001b88 <HAL_GetTick>
 80050ec:	4603      	mov	r3, r0
 80050ee:	4a06      	ldr	r2, [pc, #24]	; (8005108 <uartBootLoaderRecieverCmdConnect+0x88>)
 80050f0:	6013      	str	r3, [r2, #0]
		printf("\n[uartBootLoaderRecieverCmdConnect] waitting cmd connect ...\n");
 80050f2:	4808      	ldr	r0, [pc, #32]	; (8005114 <uartBootLoaderRecieverCmdConnect+0x94>)
 80050f4:	f001 fd32 	bl	8006b5c <puts>
	}

	return false;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	20001c8c 	.word	0x20001c8c
 8005108:	20000264 	.word	0x20000264
 800510c:	0800aa2c 	.word	0x0800aa2c
 8005110:	0800aa70 	.word	0x0800aa70
 8005114:	0800aab4 	.word	0x0800aab4

08005118 <uartBootLoaderRecieverCmdErase>:

/** @brief  uartBootLoaderRecieverCmdErase
    @return bool
*/
static bool uartBootLoaderRecieverCmdErase(uartBootLoader_t *boot)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
	uint8_t getIdCmd[BOOTLOADER_CMD_LEN] = {0x43, 0xBC};
 8005120:	f64b 4343 	movw	r3, #48195	; 0xbc43
 8005124:	81bb      	strh	r3, [r7, #12]
	uint8_t rData = 0;
 8005126:	2300      	movs	r3, #0
 8005128:	72fb      	strb	r3, [r7, #11]
	static uint8_t trueDataCount = 0;

	if(rBufferRxU2.len == BOOTLOADER_CMD_LEN)
 800512a:	4b27      	ldr	r3, [pc, #156]	; (80051c8 <uartBootLoaderRecieverCmdErase+0xb0>)
 800512c:	889b      	ldrh	r3, [r3, #4]
 800512e:	2b02      	cmp	r3, #2
 8005130:	d128      	bne.n	8005184 <uartBootLoaderRecieverCmdErase+0x6c>
	{
		for(uint8_t i = 0; i < BOOTLOADER_CMD_LEN; i++)
 8005132:	2300      	movs	r3, #0
 8005134:	73fb      	strb	r3, [r7, #15]
 8005136:	e022      	b.n	800517e <uartBootLoaderRecieverCmdErase+0x66>
		{
			if(ringBufferRead(&rBufferRxU2, &rData) == RING_BUFFER_OK)
 8005138:	f107 030b 	add.w	r3, r7, #11
 800513c:	4619      	mov	r1, r3
 800513e:	4822      	ldr	r0, [pc, #136]	; (80051c8 <uartBootLoaderRecieverCmdErase+0xb0>)
 8005140:	f7ff fcfc 	bl	8004b3c <ringBufferRead>
 8005144:	4603      	mov	r3, r0
 8005146:	2b01      	cmp	r3, #1
 8005148:	d116      	bne.n	8005178 <uartBootLoaderRecieverCmdErase+0x60>
			{
				if(rData == getIdCmd[i])
 800514a:	7bfb      	ldrb	r3, [r7, #15]
 800514c:	f107 0210 	add.w	r2, r7, #16
 8005150:	4413      	add	r3, r2
 8005152:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8005156:	7afb      	ldrb	r3, [r7, #11]
 8005158:	429a      	cmp	r2, r3
 800515a:	d10d      	bne.n	8005178 <uartBootLoaderRecieverCmdErase+0x60>
				{
					trueDataCount++;
 800515c:	4b1b      	ldr	r3, [pc, #108]	; (80051cc <uartBootLoaderRecieverCmdErase+0xb4>)
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	3301      	adds	r3, #1
 8005162:	b2da      	uxtb	r2, r3
 8005164:	4b19      	ldr	r3, [pc, #100]	; (80051cc <uartBootLoaderRecieverCmdErase+0xb4>)
 8005166:	701a      	strb	r2, [r3, #0]
					printf("\n[uartBootLoaderRecieverCmdErase] reciever cmd get id value = 0x%x | len = %d\n", rData, rBufferRxU2.len);
 8005168:	7afb      	ldrb	r3, [r7, #11]
 800516a:	4619      	mov	r1, r3
 800516c:	4b16      	ldr	r3, [pc, #88]	; (80051c8 <uartBootLoaderRecieverCmdErase+0xb0>)
 800516e:	889b      	ldrh	r3, [r3, #4]
 8005170:	461a      	mov	r2, r3
 8005172:	4817      	ldr	r0, [pc, #92]	; (80051d0 <uartBootLoaderRecieverCmdErase+0xb8>)
 8005174:	f001 fc6c 	bl	8006a50 <iprintf>
		for(uint8_t i = 0; i < BOOTLOADER_CMD_LEN; i++)
 8005178:	7bfb      	ldrb	r3, [r7, #15]
 800517a:	3301      	adds	r3, #1
 800517c:	73fb      	strb	r3, [r7, #15]
 800517e:	7bfb      	ldrb	r3, [r7, #15]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d9d9      	bls.n	8005138 <uartBootLoaderRecieverCmdErase+0x20>
				}
			}
		}
	}

	if(trueDataCount == BOOTLOADER_CMD_LEN)
 8005184:	4b11      	ldr	r3, [pc, #68]	; (80051cc <uartBootLoaderRecieverCmdErase+0xb4>)
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	2b02      	cmp	r3, #2
 800518a:	d117      	bne.n	80051bc <uartBootLoaderRecieverCmdErase+0xa4>
	{
		/// erase flash sector 5
		if(storageFlash_EraseSector(ADDR_FLASH_SECTOR_5, 0x00020000) == 0)
 800518c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8005190:	4810      	ldr	r0, [pc, #64]	; (80051d4 <uartBootLoaderRecieverCmdErase+0xbc>)
 8005192:	f7ff fe8b 	bl	8004eac <storageFlash_EraseSector>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10f      	bne.n	80051bc <uartBootLoaderRecieverCmdErase+0xa4>
		{
			uint8_t buffer[BOOTLOADER_CMD_ERASE_LEN] = {UART_BOOTLOADER_ACK};
 800519c:	2379      	movs	r3, #121	; 0x79
 800519e:	723b      	strb	r3, [r7, #8]

			uartBootLoaderSendMoreByte(buffer, BOOTLOADER_CMD_ERASE_LEN);
 80051a0:	f107 0308 	add.w	r3, r7, #8
 80051a4:	2101      	movs	r1, #1
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7ff ff34 	bl	8005014 <uartBootLoaderSendMoreByte>

			printf("\n[uartBootLoaderRecieverCmdErase] send Ack byte and data of cmd erase ...\n");
 80051ac:	480a      	ldr	r0, [pc, #40]	; (80051d8 <uartBootLoaderRecieverCmdErase+0xc0>)
 80051ae:	f001 fcd5 	bl	8006b5c <puts>

			trueDataCount = 0;
 80051b2:	4b06      	ldr	r3, [pc, #24]	; (80051cc <uartBootLoaderRecieverCmdErase+0xb4>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	701a      	strb	r2, [r3, #0]

			return true;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e000      	b.n	80051be <uartBootLoaderRecieverCmdErase+0xa6>
		}
	}

	return false;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	20001c8c 	.word	0x20001c8c
 80051cc:	20000268 	.word	0x20000268
 80051d0:	0800acd0 	.word	0x0800acd0
 80051d4:	08020000 	.word	0x08020000
 80051d8:	0800ad20 	.word	0x0800ad20

080051dc <uartBootLoaderRecieverCmdWriteMem1>:

/** @brief  uartBootLoaderRecieverCmdWriteMem1
    @return bool
*/
static bool uartBootLoaderRecieverCmdWriteMem1(void)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
	uint8_t getWriteMem[BOOTLOADER_CMD_LEN] = {0x31, 0xCE};
 80051e2:	f64c 6331 	movw	r3, #52785	; 0xce31
 80051e6:	80bb      	strh	r3, [r7, #4]
	uint8_t rData = 0;
 80051e8:	2300      	movs	r3, #0
 80051ea:	70fb      	strb	r3, [r7, #3]
	static uint8_t trueDataCount = 0;

	if(rBufferRxU2.len == BOOTLOADER_CMD_LEN)
 80051ec:	4b1d      	ldr	r3, [pc, #116]	; (8005264 <uartBootLoaderRecieverCmdWriteMem1+0x88>)
 80051ee:	889b      	ldrh	r3, [r3, #4]
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d127      	bne.n	8005244 <uartBootLoaderRecieverCmdWriteMem1+0x68>
	{
		for(uint8_t i = 0; i < BOOTLOADER_CMD_LEN; i++)
 80051f4:	2300      	movs	r3, #0
 80051f6:	71fb      	strb	r3, [r7, #7]
 80051f8:	e021      	b.n	800523e <uartBootLoaderRecieverCmdWriteMem1+0x62>
		{
			if(ringBufferRead(&rBufferRxU2, &rData) == RING_BUFFER_OK)
 80051fa:	1cfb      	adds	r3, r7, #3
 80051fc:	4619      	mov	r1, r3
 80051fe:	4819      	ldr	r0, [pc, #100]	; (8005264 <uartBootLoaderRecieverCmdWriteMem1+0x88>)
 8005200:	f7ff fc9c 	bl	8004b3c <ringBufferRead>
 8005204:	4603      	mov	r3, r0
 8005206:	2b01      	cmp	r3, #1
 8005208:	d116      	bne.n	8005238 <uartBootLoaderRecieverCmdWriteMem1+0x5c>
			{
				if(rData == getWriteMem[i])
 800520a:	79fb      	ldrb	r3, [r7, #7]
 800520c:	f107 0208 	add.w	r2, r7, #8
 8005210:	4413      	add	r3, r2
 8005212:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8005216:	78fb      	ldrb	r3, [r7, #3]
 8005218:	429a      	cmp	r2, r3
 800521a:	d10d      	bne.n	8005238 <uartBootLoaderRecieverCmdWriteMem1+0x5c>
				{
					trueDataCount++;
 800521c:	4b12      	ldr	r3, [pc, #72]	; (8005268 <uartBootLoaderRecieverCmdWriteMem1+0x8c>)
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	3301      	adds	r3, #1
 8005222:	b2da      	uxtb	r2, r3
 8005224:	4b10      	ldr	r3, [pc, #64]	; (8005268 <uartBootLoaderRecieverCmdWriteMem1+0x8c>)
 8005226:	701a      	strb	r2, [r3, #0]
					printf("\n[uartBootLoaderRecieverCmdWriteMem1] reciever cmd write mem1 value = 0x%x | len = %d\n", rData, rBufferRxU2.len);
 8005228:	78fb      	ldrb	r3, [r7, #3]
 800522a:	4619      	mov	r1, r3
 800522c:	4b0d      	ldr	r3, [pc, #52]	; (8005264 <uartBootLoaderRecieverCmdWriteMem1+0x88>)
 800522e:	889b      	ldrh	r3, [r3, #4]
 8005230:	461a      	mov	r2, r3
 8005232:	480e      	ldr	r0, [pc, #56]	; (800526c <uartBootLoaderRecieverCmdWriteMem1+0x90>)
 8005234:	f001 fc0c 	bl	8006a50 <iprintf>
		for(uint8_t i = 0; i < BOOTLOADER_CMD_LEN; i++)
 8005238:	79fb      	ldrb	r3, [r7, #7]
 800523a:	3301      	adds	r3, #1
 800523c:	71fb      	strb	r3, [r7, #7]
 800523e:	79fb      	ldrb	r3, [r7, #7]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d9da      	bls.n	80051fa <uartBootLoaderRecieverCmdWriteMem1+0x1e>
				}
			}
		}
	}

	if(trueDataCount == BOOTLOADER_CMD_LEN)
 8005244:	4b08      	ldr	r3, [pc, #32]	; (8005268 <uartBootLoaderRecieverCmdWriteMem1+0x8c>)
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	2b02      	cmp	r3, #2
 800524a:	d106      	bne.n	800525a <uartBootLoaderRecieverCmdWriteMem1+0x7e>
	{
		uartBootLoaderSendAck();
 800524c:	f7ff febe 	bl	8004fcc <uartBootLoaderSendAck>

		printf("\n[uartBootLoaderRecieverCmdWriteMem1] send Ack byte ...\n");
 8005250:	4807      	ldr	r0, [pc, #28]	; (8005270 <uartBootLoaderRecieverCmdWriteMem1+0x94>)
 8005252:	f001 fc83 	bl	8006b5c <puts>

		return true;
 8005256:	2301      	movs	r3, #1
 8005258:	e000      	b.n	800525c <uartBootLoaderRecieverCmdWriteMem1+0x80>
	}

	return false;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3708      	adds	r7, #8
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	20001c8c 	.word	0x20001c8c
 8005268:	20000269 	.word	0x20000269
 800526c:	0800ad6c 	.word	0x0800ad6c
 8005270:	0800adc4 	.word	0x0800adc4

08005274 <uartBootLoaderRecieverCmdWriteMem2>:

/** @brief  uartBootLoaderRecieverCmdWriteMem2
    @return bootLoaderCmdWriteResult_t
*/
static bootLoaderCmdWriteResult_t uartBootLoaderRecieverCmdWriteMem2(uartBootLoader_t *boot)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b086      	sub	sp, #24
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
	static bool cmdWrite = false;
	uint8_t startAddressBuffer[5]; /// start address and checksum buffer
	uint8_t rData = 0;
 800527c:	2300      	movs	r3, #0
 800527e:	73fb      	strb	r3, [r7, #15]
	const uint8_t numberOfbyteRec = 5;
 8005280:	2305      	movs	r3, #5
 8005282:	75bb      	strb	r3, [r7, #22]

	memset(startAddressBuffer, 0, 5);
 8005284:	f107 0310 	add.w	r3, r7, #16
 8005288:	2205      	movs	r2, #5
 800528a:	2100      	movs	r1, #0
 800528c:	4618      	mov	r0, r3
 800528e:	f000 fca3 	bl	8005bd8 <memset>

	/// ktra cmd write
	if(cmdWrite == true)
 8005292:	4b3a      	ldr	r3, [pc, #232]	; (800537c <uartBootLoaderRecieverCmdWriteMem2+0x108>)
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d064      	beq.n	8005364 <uartBootLoaderRecieverCmdWriteMem2+0xf0>
	{
		/// cho nhan 4 byte address va 1 byte checksum
		if(rBufferRxU2.len == numberOfbyteRec)
 800529a:	4b39      	ldr	r3, [pc, #228]	; (8005380 <uartBootLoaderRecieverCmdWriteMem2+0x10c>)
 800529c:	889a      	ldrh	r2, [r3, #4]
 800529e:	7dbb      	ldrb	r3, [r7, #22]
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d164      	bne.n	8005370 <uartBootLoaderRecieverCmdWriteMem2+0xfc>
		{
			for(uint8_t i = 0; i < numberOfbyteRec; i++)
 80052a6:	2300      	movs	r3, #0
 80052a8:	75fb      	strb	r3, [r7, #23]
 80052aa:	e01a      	b.n	80052e2 <uartBootLoaderRecieverCmdWriteMem2+0x6e>
			{
				if(ringBufferRead(&rBufferRxU2, &rData) == RING_BUFFER_OK)
 80052ac:	f107 030f 	add.w	r3, r7, #15
 80052b0:	4619      	mov	r1, r3
 80052b2:	4833      	ldr	r0, [pc, #204]	; (8005380 <uartBootLoaderRecieverCmdWriteMem2+0x10c>)
 80052b4:	f7ff fc42 	bl	8004b3c <ringBufferRead>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d10e      	bne.n	80052dc <uartBootLoaderRecieverCmdWriteMem2+0x68>
				{
					startAddressBuffer[i] = rData;
 80052be:	7dfb      	ldrb	r3, [r7, #23]
 80052c0:	7bfa      	ldrb	r2, [r7, #15]
 80052c2:	f107 0118 	add.w	r1, r7, #24
 80052c6:	440b      	add	r3, r1
 80052c8:	f803 2c08 	strb.w	r2, [r3, #-8]
					printf("\n[uartBootLoaderRecieverCmdWriteMem2] reciever cmd write mem2 value = 0x%x | len = %d\n", rData, rBufferRxU2.len);
 80052cc:	7bfb      	ldrb	r3, [r7, #15]
 80052ce:	4619      	mov	r1, r3
 80052d0:	4b2b      	ldr	r3, [pc, #172]	; (8005380 <uartBootLoaderRecieverCmdWriteMem2+0x10c>)
 80052d2:	889b      	ldrh	r3, [r3, #4]
 80052d4:	461a      	mov	r2, r3
 80052d6:	482b      	ldr	r0, [pc, #172]	; (8005384 <uartBootLoaderRecieverCmdWriteMem2+0x110>)
 80052d8:	f001 fbba 	bl	8006a50 <iprintf>
			for(uint8_t i = 0; i < numberOfbyteRec; i++)
 80052dc:	7dfb      	ldrb	r3, [r7, #23]
 80052de:	3301      	adds	r3, #1
 80052e0:	75fb      	strb	r3, [r7, #23]
 80052e2:	7dfa      	ldrb	r2, [r7, #23]
 80052e4:	7dbb      	ldrb	r3, [r7, #22]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d3e0      	bcc.n	80052ac <uartBootLoaderRecieverCmdWriteMem2+0x38>
				}
			}

			uint8_t checksum = uartBootLoaderChecksumCalculator(0, startAddressBuffer, 4);
 80052ea:	f107 0310 	add.w	r3, r7, #16
 80052ee:	2204      	movs	r2, #4
 80052f0:	4619      	mov	r1, r3
 80052f2:	2000      	movs	r0, #0
 80052f4:	f7ff fea2 	bl	800503c <uartBootLoaderChecksumCalculator>
 80052f8:	4603      	mov	r3, r0
 80052fa:	757b      	strb	r3, [r7, #21]

			printf("\n[uartBootLoaderRecieverCmdWriteMem2] checksum calculator value = 0x%x | checksum rec value = 0x%x\n", checksum, startAddressBuffer[4]);
 80052fc:	7d7b      	ldrb	r3, [r7, #21]
 80052fe:	7d3a      	ldrb	r2, [r7, #20]
 8005300:	4619      	mov	r1, r3
 8005302:	4821      	ldr	r0, [pc, #132]	; (8005388 <uartBootLoaderRecieverCmdWriteMem2+0x114>)
 8005304:	f001 fba4 	bl	8006a50 <iprintf>

			if(checksum == startAddressBuffer[4])
 8005308:	7d3b      	ldrb	r3, [r7, #20]
 800530a:	7d7a      	ldrb	r2, [r7, #21]
 800530c:	429a      	cmp	r2, r3
 800530e:	d122      	bne.n	8005356 <uartBootLoaderRecieverCmdWriteMem2+0xe2>
			{
				boot->flashAddress = startAddressBuffer[0];
 8005310:	7c3b      	ldrb	r3, [r7, #16]
 8005312:	461a      	mov	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	61da      	str	r2, [r3, #28]
				boot->flashAddress |= startAddressBuffer[1] << 8;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	69db      	ldr	r3, [r3, #28]
 800531c:	7c7a      	ldrb	r2, [r7, #17]
 800531e:	0212      	lsls	r2, r2, #8
 8005320:	431a      	orrs	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	61da      	str	r2, [r3, #28]
				boot->flashAddress |= startAddressBuffer[2] << 16;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	69db      	ldr	r3, [r3, #28]
 800532a:	7cba      	ldrb	r2, [r7, #18]
 800532c:	0412      	lsls	r2, r2, #16
 800532e:	431a      	orrs	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	61da      	str	r2, [r3, #28]
				boot->flashAddress |= startAddressBuffer[3] << 24;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	69db      	ldr	r3, [r3, #28]
 8005338:	7cfa      	ldrb	r2, [r7, #19]
 800533a:	0612      	lsls	r2, r2, #24
 800533c:	431a      	orrs	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	61da      	str	r2, [r3, #28]

				uartBootLoaderSendAck();
 8005342:	f7ff fe43 	bl	8004fcc <uartBootLoaderSendAck>

				printf("\n[uartBootLoaderRecieverCmdWriteMem2] send Ack byte ...\n");
 8005346:	4811      	ldr	r0, [pc, #68]	; (800538c <uartBootLoaderRecieverCmdWriteMem2+0x118>)
 8005348:	f001 fc08 	bl	8006b5c <puts>

				cmdWrite = false;
 800534c:	4b0b      	ldr	r3, [pc, #44]	; (800537c <uartBootLoaderRecieverCmdWriteMem2+0x108>)
 800534e:	2200      	movs	r2, #0
 8005350:	701a      	strb	r2, [r3, #0]

				return BOOTLOADER_CMD_WRITE_RESULT_OK;
 8005352:	2302      	movs	r3, #2
 8005354:	e00d      	b.n	8005372 <uartBootLoaderRecieverCmdWriteMem2+0xfe>
			}
			else
			{
				uartBootLoaderSendNack();
 8005356:	f7ff fe4b 	bl	8004ff0 <uartBootLoaderSendNack>

				printf("\n[uartBootLoaderRecieverCmdWriteMem2] send Nack byte ...\n");
 800535a:	480d      	ldr	r0, [pc, #52]	; (8005390 <uartBootLoaderRecieverCmdWriteMem2+0x11c>)
 800535c:	f001 fbfe 	bl	8006b5c <puts>

				return BOOTLOADER_CMD_WRITE_RESULT_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e006      	b.n	8005372 <uartBootLoaderRecieverCmdWriteMem2+0xfe>
			}
		}
	}
	else
	{
		cmdWrite = uartBootLoaderRecieverCmdWriteMem1();
 8005364:	f7ff ff3a 	bl	80051dc <uartBootLoaderRecieverCmdWriteMem1>
 8005368:	4603      	mov	r3, r0
 800536a:	461a      	mov	r2, r3
 800536c:	4b03      	ldr	r3, [pc, #12]	; (800537c <uartBootLoaderRecieverCmdWriteMem2+0x108>)
 800536e:	701a      	strb	r2, [r3, #0]
	}

	return BOOTLOADER_CMD_WRITE_RESULT_IDLE;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3718      	adds	r7, #24
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	2000026a 	.word	0x2000026a
 8005380:	20001c8c 	.word	0x20001c8c
 8005384:	0800adfc 	.word	0x0800adfc
 8005388:	0800ae54 	.word	0x0800ae54
 800538c:	0800aeb8 	.word	0x0800aeb8
 8005390:	0800aef0 	.word	0x0800aef0

08005394 <uartBootLoaderRecieverCmdWriteMem3>:

/** @brief  uartBootLoaderRecieverCmdWriteMem2
    @return bootLoaderCmdWriteResult_t
*/
static bootLoaderCmdWriteResult_t uartBootLoaderRecieverCmdWriteMem3(uartBootLoader_t *boot)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
	uint8_t rData = 0;
 800539c:	2300      	movs	r3, #0
 800539e:	733b      	strb	r3, [r7, #12]
	static uint8_t state = 0;
	static uint8_t payload[256];



	if(result == BOOTLOADER_CMD_WRITE_RESULT_OK)
 80053a0:	4b57      	ldr	r3, [pc, #348]	; (8005500 <uartBootLoaderRecieverCmdWriteMem3+0x16c>)
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	f040 808c 	bne.w	80054c2 <uartBootLoaderRecieverCmdWriteMem3+0x12e>
	{
		/// cho nhan 1 byte (number of bytes), max 256 byte data, 1 byte checksum
		switch(state)
 80053aa:	4b56      	ldr	r3, [pc, #344]	; (8005504 <uartBootLoaderRecieverCmdWriteMem3+0x170>)
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d04c      	beq.n	800544c <uartBootLoaderRecieverCmdWriteMem3+0xb8>
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	f300 809e 	bgt.w	80054f4 <uartBootLoaderRecieverCmdWriteMem3+0x160>
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d002      	beq.n	80053c2 <uartBootLoaderRecieverCmdWriteMem3+0x2e>
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d01d      	beq.n	80053fc <uartBootLoaderRecieverCmdWriteMem3+0x68>
 80053c0:	e098      	b.n	80054f4 <uartBootLoaderRecieverCmdWriteMem3+0x160>
		{
			case 0:
			{
				/// nhan 1 byte number of bytes
				if(rBufferRxU2.len == 1)
 80053c2:	4b51      	ldr	r3, [pc, #324]	; (8005508 <uartBootLoaderRecieverCmdWriteMem3+0x174>)
 80053c4:	889b      	ldrh	r3, [r3, #4]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	f040 808f 	bne.w	80054ea <uartBootLoaderRecieverCmdWriteMem3+0x156>
				{
					if(ringBufferRead(&rBufferRxU2, &rData) == RING_BUFFER_OK)
 80053cc:	f107 030c 	add.w	r3, r7, #12
 80053d0:	4619      	mov	r1, r3
 80053d2:	484d      	ldr	r0, [pc, #308]	; (8005508 <uartBootLoaderRecieverCmdWriteMem3+0x174>)
 80053d4:	f7ff fbb2 	bl	8004b3c <ringBufferRead>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b01      	cmp	r3, #1
 80053dc:	f040 8085 	bne.w	80054ea <uartBootLoaderRecieverCmdWriteMem3+0x156>
					{
						numberOfBytes = rData;
 80053e0:	7b3b      	ldrb	r3, [r7, #12]
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	4b49      	ldr	r3, [pc, #292]	; (800550c <uartBootLoaderRecieverCmdWriteMem3+0x178>)
 80053e6:	801a      	strh	r2, [r3, #0]
						printf("\n[uartBootLoaderRecieverCmdWriteMem3] have %d bytes\n", (int)numberOfBytes);
 80053e8:	4b48      	ldr	r3, [pc, #288]	; (800550c <uartBootLoaderRecieverCmdWriteMem3+0x178>)
 80053ea:	881b      	ldrh	r3, [r3, #0]
 80053ec:	4619      	mov	r1, r3
 80053ee:	4848      	ldr	r0, [pc, #288]	; (8005510 <uartBootLoaderRecieverCmdWriteMem3+0x17c>)
 80053f0:	f001 fb2e 	bl	8006a50 <iprintf>

						state = 1;
 80053f4:	4b43      	ldr	r3, [pc, #268]	; (8005504 <uartBootLoaderRecieverCmdWriteMem3+0x170>)
 80053f6:	2201      	movs	r2, #1
 80053f8:	701a      	strb	r2, [r3, #0]
					}
				}
			}break;
 80053fa:	e076      	b.n	80054ea <uartBootLoaderRecieverCmdWriteMem3+0x156>
			case 1:
			{
				/// cho nhan data byte
				if(rBufferRxU2.len == numberOfBytes)
 80053fc:	4b42      	ldr	r3, [pc, #264]	; (8005508 <uartBootLoaderRecieverCmdWriteMem3+0x174>)
 80053fe:	889a      	ldrh	r2, [r3, #4]
 8005400:	4b42      	ldr	r3, [pc, #264]	; (800550c <uartBootLoaderRecieverCmdWriteMem3+0x178>)
 8005402:	881b      	ldrh	r3, [r3, #0]
 8005404:	429a      	cmp	r2, r3
 8005406:	d172      	bne.n	80054ee <uartBootLoaderRecieverCmdWriteMem3+0x15a>
				{
					memset(payload, 0, 256);
 8005408:	f44f 7280 	mov.w	r2, #256	; 0x100
 800540c:	2100      	movs	r1, #0
 800540e:	4841      	ldr	r0, [pc, #260]	; (8005514 <uartBootLoaderRecieverCmdWriteMem3+0x180>)
 8005410:	f000 fbe2 	bl	8005bd8 <memset>

					for(uint16_t i = 1; i < numberOfBytes + 1; i++)
 8005414:	2301      	movs	r3, #1
 8005416:	81fb      	strh	r3, [r7, #14]
 8005418:	e00f      	b.n	800543a <uartBootLoaderRecieverCmdWriteMem3+0xa6>
					{
						if(ringBufferRead(&rBufferRxU2, &rData) == RING_BUFFER_OK)
 800541a:	f107 030c 	add.w	r3, r7, #12
 800541e:	4619      	mov	r1, r3
 8005420:	4839      	ldr	r0, [pc, #228]	; (8005508 <uartBootLoaderRecieverCmdWriteMem3+0x174>)
 8005422:	f7ff fb8b 	bl	8004b3c <ringBufferRead>
 8005426:	4603      	mov	r3, r0
 8005428:	2b01      	cmp	r3, #1
 800542a:	d103      	bne.n	8005434 <uartBootLoaderRecieverCmdWriteMem3+0xa0>
						{
							///copy data to buffer
							payload[i] = rData;
 800542c:	89fb      	ldrh	r3, [r7, #14]
 800542e:	7b39      	ldrb	r1, [r7, #12]
 8005430:	4a38      	ldr	r2, [pc, #224]	; (8005514 <uartBootLoaderRecieverCmdWriteMem3+0x180>)
 8005432:	54d1      	strb	r1, [r2, r3]
					for(uint16_t i = 1; i < numberOfBytes + 1; i++)
 8005434:	89fb      	ldrh	r3, [r7, #14]
 8005436:	3301      	adds	r3, #1
 8005438:	81fb      	strh	r3, [r7, #14]
 800543a:	4b34      	ldr	r3, [pc, #208]	; (800550c <uartBootLoaderRecieverCmdWriteMem3+0x178>)
 800543c:	881b      	ldrh	r3, [r3, #0]
 800543e:	89fa      	ldrh	r2, [r7, #14]
 8005440:	429a      	cmp	r2, r3
 8005442:	d9ea      	bls.n	800541a <uartBootLoaderRecieverCmdWriteMem3+0x86>

//							printf("\n[uartBootLoaderRecieverCmdWriteMem3] byte %d = 0x%x\n", (int)i, (int)rData);
						}
					}

					state = 2;
 8005444:	4b2f      	ldr	r3, [pc, #188]	; (8005504 <uartBootLoaderRecieverCmdWriteMem3+0x170>)
 8005446:	2202      	movs	r2, #2
 8005448:	701a      	strb	r2, [r3, #0]
				}
			}break;
 800544a:	e050      	b.n	80054ee <uartBootLoaderRecieverCmdWriteMem3+0x15a>
			case 2:
			{
				/// cho nhan checksum
				if(rBufferRxU2.len == 1)
 800544c:	4b2e      	ldr	r3, [pc, #184]	; (8005508 <uartBootLoaderRecieverCmdWriteMem3+0x174>)
 800544e:	889b      	ldrh	r3, [r3, #4]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d14e      	bne.n	80054f2 <uartBootLoaderRecieverCmdWriteMem3+0x15e>
				{
					if(ringBufferRead(&rBufferRxU2, &rData))
 8005454:	f107 030c 	add.w	r3, r7, #12
 8005458:	4619      	mov	r1, r3
 800545a:	482b      	ldr	r0, [pc, #172]	; (8005508 <uartBootLoaderRecieverCmdWriteMem3+0x174>)
 800545c:	f7ff fb6e 	bl	8004b3c <ringBufferRead>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d045      	beq.n	80054f2 <uartBootLoaderRecieverCmdWriteMem3+0x15e>
					{
						uint8_t checksum = uartBootLoaderChecksumCalculator(numberOfBytes, payload, numberOfBytes + 1);
 8005466:	4b29      	ldr	r3, [pc, #164]	; (800550c <uartBootLoaderRecieverCmdWriteMem3+0x178>)
 8005468:	881b      	ldrh	r3, [r3, #0]
 800546a:	b2d8      	uxtb	r0, r3
 800546c:	4b27      	ldr	r3, [pc, #156]	; (800550c <uartBootLoaderRecieverCmdWriteMem3+0x178>)
 800546e:	881b      	ldrh	r3, [r3, #0]
 8005470:	3301      	adds	r3, #1
 8005472:	b29b      	uxth	r3, r3
 8005474:	461a      	mov	r2, r3
 8005476:	4927      	ldr	r1, [pc, #156]	; (8005514 <uartBootLoaderRecieverCmdWriteMem3+0x180>)
 8005478:	f7ff fde0 	bl	800503c <uartBootLoaderChecksumCalculator>
 800547c:	4603      	mov	r3, r0
 800547e:	737b      	strb	r3, [r7, #13]

						if(checksum == payload[numberOfBytes])
 8005480:	4b22      	ldr	r3, [pc, #136]	; (800550c <uartBootLoaderRecieverCmdWriteMem3+0x178>)
 8005482:	881b      	ldrh	r3, [r3, #0]
 8005484:	461a      	mov	r2, r3
 8005486:	4b23      	ldr	r3, [pc, #140]	; (8005514 <uartBootLoaderRecieverCmdWriteMem3+0x180>)
 8005488:	5c9b      	ldrb	r3, [r3, r2]
 800548a:	7b7a      	ldrb	r2, [r7, #13]
 800548c:	429a      	cmp	r2, r3
 800548e:	d130      	bne.n	80054f2 <uartBootLoaderRecieverCmdWriteMem3+0x15e>
						{
							numberOfBytes = 0;
 8005490:	4b1e      	ldr	r3, [pc, #120]	; (800550c <uartBootLoaderRecieverCmdWriteMem3+0x178>)
 8005492:	2200      	movs	r2, #0
 8005494:	801a      	strh	r2, [r3, #0]
							state = 0;
 8005496:	4b1b      	ldr	r3, [pc, #108]	; (8005504 <uartBootLoaderRecieverCmdWriteMem3+0x170>)
 8005498:	2200      	movs	r2, #0
 800549a:	701a      	strb	r2, [r3, #0]

							uartBootLoaderSendAck();
 800549c:	f7ff fd96 	bl	8004fcc <uartBootLoaderSendAck>

							printf("\n[uartBootLoaderRecieverCmdWriteMem3] send Ack byte ...\n");
 80054a0:	481d      	ldr	r0, [pc, #116]	; (8005518 <uartBootLoaderRecieverCmdWriteMem3+0x184>)
 80054a2:	f001 fb5b 	bl	8006b5c <puts>

							printf("\n[uartBootLoaderRecieverCmdWriteMem3] reciever cmd write successful !!!\n");
 80054a6:	481d      	ldr	r0, [pc, #116]	; (800551c <uartBootLoaderRecieverCmdWriteMem3+0x188>)
 80054a8:	f001 fb58 	bl	8006b5c <puts>

							result = BOOTLOADER_CMD_WRITE_RESULT_IDLE;
 80054ac:	4b14      	ldr	r3, [pc, #80]	; (8005500 <uartBootLoaderRecieverCmdWriteMem3+0x16c>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	701a      	strb	r2, [r3, #0]
							numberOfBytes = 0;
 80054b2:	4b16      	ldr	r3, [pc, #88]	; (800550c <uartBootLoaderRecieverCmdWriteMem3+0x178>)
 80054b4:	2200      	movs	r2, #0
 80054b6:	801a      	strh	r2, [r3, #0]
							state = 0;
 80054b8:	4b12      	ldr	r3, [pc, #72]	; (8005504 <uartBootLoaderRecieverCmdWriteMem3+0x170>)
 80054ba:	2200      	movs	r2, #0
 80054bc:	701a      	strb	r2, [r3, #0]

							return BOOTLOADER_CMD_WRITE_RESULT_OK;
 80054be:	2302      	movs	r3, #2
 80054c0:	e019      	b.n	80054f6 <uartBootLoaderRecieverCmdWriteMem3+0x162>
					}
				}
			}break;
		}
	}
	else if(result == BOOTLOADER_CMD_WRITE_RESULT_ERROR)
 80054c2:	4b0f      	ldr	r3, [pc, #60]	; (8005500 <uartBootLoaderRecieverCmdWriteMem3+0x16c>)
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d107      	bne.n	80054da <uartBootLoaderRecieverCmdWriteMem3+0x146>
	{
		uartBootLoaderSendNack();
 80054ca:	f7ff fd91 	bl	8004ff0 <uartBootLoaderSendNack>

		printf("\n[uartBootLoaderRecieverCmdWriteMem3] send Nack byte ...\n");
 80054ce:	4814      	ldr	r0, [pc, #80]	; (8005520 <uartBootLoaderRecieverCmdWriteMem3+0x18c>)
 80054d0:	f001 fb44 	bl	8006b5c <puts>

		return result;
 80054d4:	4b0a      	ldr	r3, [pc, #40]	; (8005500 <uartBootLoaderRecieverCmdWriteMem3+0x16c>)
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	e00d      	b.n	80054f6 <uartBootLoaderRecieverCmdWriteMem3+0x162>
	}
	else
	{
		result = uartBootLoaderRecieverCmdWriteMem2(boot);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f7ff feca 	bl	8005274 <uartBootLoaderRecieverCmdWriteMem2>
 80054e0:	4603      	mov	r3, r0
 80054e2:	461a      	mov	r2, r3
 80054e4:	4b06      	ldr	r3, [pc, #24]	; (8005500 <uartBootLoaderRecieverCmdWriteMem3+0x16c>)
 80054e6:	701a      	strb	r2, [r3, #0]
 80054e8:	e004      	b.n	80054f4 <uartBootLoaderRecieverCmdWriteMem3+0x160>
			}break;
 80054ea:	bf00      	nop
 80054ec:	e002      	b.n	80054f4 <uartBootLoaderRecieverCmdWriteMem3+0x160>
			}break;
 80054ee:	bf00      	nop
 80054f0:	e000      	b.n	80054f4 <uartBootLoaderRecieverCmdWriteMem3+0x160>
			}break;
 80054f2:	bf00      	nop
	}

	return BOOTLOADER_CMD_WRITE_RESULT_IDLE;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	2000026b 	.word	0x2000026b
 8005504:	2000026c 	.word	0x2000026c
 8005508:	20001c8c 	.word	0x20001c8c
 800550c:	2000026e 	.word	0x2000026e
 8005510:	0800af2c 	.word	0x0800af2c
 8005514:	20000270 	.word	0x20000270
 8005518:	0800af64 	.word	0x0800af64
 800551c:	0800af9c 	.word	0x0800af9c
 8005520:	0800afe4 	.word	0x0800afe4

08005524 <uartBootLoaderReadCmd>:

/** @brief  uartBootLoaderStateConnected
    @return none
*/
static bootLoaderCmd_t uartBootLoaderReadCmd(void)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
	uint8_t rData = 0;
 800552a:	2300      	movs	r3, #0
 800552c:	717b      	strb	r3, [r7, #5]
	uint8_t cmdBuffer[2] = {0, 0};
 800552e:	2300      	movs	r3, #0
 8005530:	803b      	strh	r3, [r7, #0]
	uint8_t trueCmdCount = 0;
 8005532:	2300      	movs	r3, #0
 8005534:	71fb      	strb	r3, [r7, #7]

	if(rBufferRxU2.len == BOOTLOADER_CMD_LEN)
 8005536:	4b2b      	ldr	r3, [pc, #172]	; (80055e4 <uartBootLoaderReadCmd+0xc0>)
 8005538:	889b      	ldrh	r3, [r3, #4]
 800553a:	2b02      	cmp	r3, #2
 800553c:	d14c      	bne.n	80055d8 <uartBootLoaderReadCmd+0xb4>
	{
		/// lay header byte
		if(ringBufferRead(&rBufferRxU2, &rData) == RING_BUFFER_OK)
 800553e:	1d7b      	adds	r3, r7, #5
 8005540:	4619      	mov	r1, r3
 8005542:	4828      	ldr	r0, [pc, #160]	; (80055e4 <uartBootLoaderReadCmd+0xc0>)
 8005544:	f7ff fafa 	bl	8004b3c <ringBufferRead>
 8005548:	4603      	mov	r3, r0
 800554a:	2b01      	cmp	r3, #1
 800554c:	d101      	bne.n	8005552 <uartBootLoaderReadCmd+0x2e>
		{
			cmdBuffer[0] = rData;
 800554e:	797b      	ldrb	r3, [r7, #5]
 8005550:	703b      	strb	r3, [r7, #0]
		}

		/// lay footer byte
		if(ringBufferRead(&rBufferRxU2, &rData) == RING_BUFFER_OK)
 8005552:	1d7b      	adds	r3, r7, #5
 8005554:	4619      	mov	r1, r3
 8005556:	4823      	ldr	r0, [pc, #140]	; (80055e4 <uartBootLoaderReadCmd+0xc0>)
 8005558:	f7ff faf0 	bl	8004b3c <ringBufferRead>
 800555c:	4603      	mov	r3, r0
 800555e:	2b01      	cmp	r3, #1
 8005560:	d101      	bne.n	8005566 <uartBootLoaderReadCmd+0x42>
		{
			cmdBuffer[1] = rData;
 8005562:	797b      	ldrb	r3, [r7, #5]
 8005564:	707b      	strb	r3, [r7, #1]
		}

		for(uint8_t i = 0; i < BOOTLOADER_CMD_GET_TOTAL; i++)
 8005566:	2300      	movs	r3, #0
 8005568:	71bb      	strb	r3, [r7, #6]
 800556a:	e026      	b.n	80055ba <uartBootLoaderReadCmd+0x96>
		{
			/// compare cmd header
			if(cmdBuffer[0] == bootLoaderCmdList[i].cmdHeader)
 800556c:	783a      	ldrb	r2, [r7, #0]
 800556e:	79bb      	ldrb	r3, [r7, #6]
 8005570:	491d      	ldr	r1, [pc, #116]	; (80055e8 <uartBootLoaderReadCmd+0xc4>)
 8005572:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8005576:	429a      	cmp	r2, r3
 8005578:	d102      	bne.n	8005580 <uartBootLoaderReadCmd+0x5c>
			{
				trueCmdCount++;
 800557a:	79fb      	ldrb	r3, [r7, #7]
 800557c:	3301      	adds	r3, #1
 800557e:	71fb      	strb	r3, [r7, #7]
			}

			/// compare cmd header
			if(cmdBuffer[1] == bootLoaderCmdList[i].cmdFooter)
 8005580:	787a      	ldrb	r2, [r7, #1]
 8005582:	79bb      	ldrb	r3, [r7, #6]
 8005584:	4918      	ldr	r1, [pc, #96]	; (80055e8 <uartBootLoaderReadCmd+0xc4>)
 8005586:	005b      	lsls	r3, r3, #1
 8005588:	440b      	add	r3, r1
 800558a:	785b      	ldrb	r3, [r3, #1]
 800558c:	429a      	cmp	r2, r3
 800558e:	d102      	bne.n	8005596 <uartBootLoaderReadCmd+0x72>
			{
				trueCmdCount++;
 8005590:	79fb      	ldrb	r3, [r7, #7]
 8005592:	3301      	adds	r3, #1
 8005594:	71fb      	strb	r3, [r7, #7]
			}

			/// compare true
			if(trueCmdCount == BOOTLOADER_CMD_LEN)
 8005596:	79fb      	ldrb	r3, [r7, #7]
 8005598:	2b02      	cmp	r3, #2
 800559a:	d109      	bne.n	80055b0 <uartBootLoaderReadCmd+0x8c>
			{
				printf("\n[uartBootLoaderReadCmd] found %s\n", bootLoaderCmdStr_t[i].str);
 800559c:	79bb      	ldrb	r3, [r7, #6]
 800559e:	4a13      	ldr	r2, [pc, #76]	; (80055ec <uartBootLoaderReadCmd+0xc8>)
 80055a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055a4:	4619      	mov	r1, r3
 80055a6:	4812      	ldr	r0, [pc, #72]	; (80055f0 <uartBootLoaderReadCmd+0xcc>)
 80055a8:	f001 fa52 	bl	8006a50 <iprintf>
				return (bootLoaderCmd_t)i;
 80055ac:	79bb      	ldrb	r3, [r7, #6]
 80055ae:	e014      	b.n	80055da <uartBootLoaderReadCmd+0xb6>
			}
			else
			{
				trueCmdCount = 0;
 80055b0:	2300      	movs	r3, #0
 80055b2:	71fb      	strb	r3, [r7, #7]
		for(uint8_t i = 0; i < BOOTLOADER_CMD_GET_TOTAL; i++)
 80055b4:	79bb      	ldrb	r3, [r7, #6]
 80055b6:	3301      	adds	r3, #1
 80055b8:	71bb      	strb	r3, [r7, #6]
 80055ba:	79bb      	ldrb	r3, [r7, #6]
 80055bc:	2b0c      	cmp	r3, #12
 80055be:	d9d5      	bls.n	800556c <uartBootLoaderReadCmd+0x48>
			}
		}

		printf("\n[uartBootLoaderReadCmd] not found cmd | byte1 = 0x%x byte2 = 0x%x\n", cmdBuffer[0], cmdBuffer[1]);
 80055c0:	783b      	ldrb	r3, [r7, #0]
 80055c2:	4619      	mov	r1, r3
 80055c4:	787b      	ldrb	r3, [r7, #1]
 80055c6:	461a      	mov	r2, r3
 80055c8:	480a      	ldr	r0, [pc, #40]	; (80055f4 <uartBootLoaderReadCmd+0xd0>)
 80055ca:	f001 fa41 	bl	8006a50 <iprintf>

		uartBootLoaderSendNack();
 80055ce:	f7ff fd0f 	bl	8004ff0 <uartBootLoaderSendNack>

		printf("\n[uartBootLoaderReadCmd] send Nack byte ...\n");
 80055d2:	4809      	ldr	r0, [pc, #36]	; (80055f8 <uartBootLoaderReadCmd+0xd4>)
 80055d4:	f001 fac2 	bl	8006b5c <puts>
	}

	return BOOTLOADER_CMD_NONE;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3708      	adds	r7, #8
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	20001c8c 	.word	0x20001c8c
 80055e8:	2000000c 	.word	0x2000000c
 80055ec:	20000028 	.word	0x20000028
 80055f0:	0800b020 	.word	0x0800b020
 80055f4:	0800b044 	.word	0x0800b044
 80055f8:	0800b088 	.word	0x0800b088

080055fc <uartBootLoaderResponseCmdGet>:

/** @brief  uartBootLoaderResponseCmdGet
    @return bool
*/
static bool uartBootLoaderResponseCmdGet(void)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b088      	sub	sp, #32
 8005600:	af00      	add	r7, sp, #0
	bootLoaderGetCmd_t cmd;

	cmd.numberOfbyte 			= 11;
 8005602:	230b      	movs	r3, #11
 8005604:	743b      	strb	r3, [r7, #16]
	cmd.version 				= BOOTLOADER_VERSION;
 8005606:	2331      	movs	r3, #49	; 0x31
 8005608:	747b      	strb	r3, [r7, #17]
	cmd.getCmd 					= UART_BOOTLOADER_CMD_GET;
 800560a:	2300      	movs	r3, #0
 800560c:	74bb      	strb	r3, [r7, #18]
	cmd.getVerAndRPStatus 		= UART_BOOTLOADER_CMD_GET_VER;
 800560e:	2301      	movs	r3, #1
 8005610:	74fb      	strb	r3, [r7, #19]
	cmd.getId 					= UART_BOOTLOADER_CMD_GET_ID;
 8005612:	2302      	movs	r3, #2
 8005614:	753b      	strb	r3, [r7, #20]
	cmd.readMemoryCmd 			= UART_BOOTLOADER_CMD_READ_MEMORY;
 8005616:	2311      	movs	r3, #17
 8005618:	757b      	strb	r3, [r7, #21]
	cmd.goCmd 					= UART_BOOTLOADER_CMD_GO;
 800561a:	2321      	movs	r3, #33	; 0x21
 800561c:	75bb      	strb	r3, [r7, #22]
	cmd.writeMemoryCmd 			= UART_BOOTLOADER_CMD_WRITE_MEMORY;
 800561e:	2331      	movs	r3, #49	; 0x31
 8005620:	75fb      	strb	r3, [r7, #23]
	cmd.EraseCmd 				= UART_BOOTLOADER_CMD_ERASE; /*Erase command or Extended Erase command (exclusive commands)*/
 8005622:	2343      	movs	r3, #67	; 0x43
 8005624:	763b      	strb	r3, [r7, #24]
	cmd.writeProtectCmd 		= UART_BOOTLOADER_CMD_WRITE_PROTECT;
 8005626:	2363      	movs	r3, #99	; 0x63
 8005628:	767b      	strb	r3, [r7, #25]
	cmd.writeUnProtectCmd 		= UART_BOOTLOADER_CMD_WRITE_UNPROTECT;
 800562a:	2373      	movs	r3, #115	; 0x73
 800562c:	76bb      	strb	r3, [r7, #26]
	cmd.readOutProtectCmd 		= UART_BOOTLOADER_CMD_READ_PROTECT;
 800562e:	2382      	movs	r3, #130	; 0x82
 8005630:	76fb      	strb	r3, [r7, #27]
	cmd.readOutUnProtectCmd 	= UART_BOOTLOADER_CMD_READ_UNPROTECT;
 8005632:	2392      	movs	r3, #146	; 0x92
 8005634:	773b      	strb	r3, [r7, #28]
	cmd.getChecksumCmd 			= UART_BOOTLOADER_CMD_GET_CHECKSUM;
 8005636:	23a1      	movs	r3, #161	; 0xa1
 8005638:	777b      	strb	r3, [r7, #29]

	uint8_t buffer[BOOTLOADER_CMD_GET_LEN] = {	UART_BOOTLOADER_ACK
 800563a:	2379      	movs	r3, #121	; 0x79
 800563c:	703b      	strb	r3, [r7, #0]
												, cmd.numberOfbyte
 800563e:	7c3b      	ldrb	r3, [r7, #16]
	uint8_t buffer[BOOTLOADER_CMD_GET_LEN] = {	UART_BOOTLOADER_ACK
 8005640:	707b      	strb	r3, [r7, #1]
												, cmd.version
 8005642:	7c7b      	ldrb	r3, [r7, #17]
	uint8_t buffer[BOOTLOADER_CMD_GET_LEN] = {	UART_BOOTLOADER_ACK
 8005644:	70bb      	strb	r3, [r7, #2]
												, cmd.getCmd
 8005646:	7cbb      	ldrb	r3, [r7, #18]
	uint8_t buffer[BOOTLOADER_CMD_GET_LEN] = {	UART_BOOTLOADER_ACK
 8005648:	70fb      	strb	r3, [r7, #3]
												, cmd.getVerAndRPStatus
 800564a:	7cfb      	ldrb	r3, [r7, #19]
	uint8_t buffer[BOOTLOADER_CMD_GET_LEN] = {	UART_BOOTLOADER_ACK
 800564c:	713b      	strb	r3, [r7, #4]
												, cmd.getId
 800564e:	7d3b      	ldrb	r3, [r7, #20]
	uint8_t buffer[BOOTLOADER_CMD_GET_LEN] = {	UART_BOOTLOADER_ACK
 8005650:	717b      	strb	r3, [r7, #5]
												, cmd.readMemoryCmd
 8005652:	7d7b      	ldrb	r3, [r7, #21]
	uint8_t buffer[BOOTLOADER_CMD_GET_LEN] = {	UART_BOOTLOADER_ACK
 8005654:	71bb      	strb	r3, [r7, #6]
												, cmd.goCmd
 8005656:	7dbb      	ldrb	r3, [r7, #22]
	uint8_t buffer[BOOTLOADER_CMD_GET_LEN] = {	UART_BOOTLOADER_ACK
 8005658:	71fb      	strb	r3, [r7, #7]
												, cmd.writeMemoryCmd
 800565a:	7dfb      	ldrb	r3, [r7, #23]
	uint8_t buffer[BOOTLOADER_CMD_GET_LEN] = {	UART_BOOTLOADER_ACK
 800565c:	723b      	strb	r3, [r7, #8]
												, cmd.EraseCmd
 800565e:	7e3b      	ldrb	r3, [r7, #24]
	uint8_t buffer[BOOTLOADER_CMD_GET_LEN] = {	UART_BOOTLOADER_ACK
 8005660:	727b      	strb	r3, [r7, #9]
												, cmd.writeProtectCmd
 8005662:	7e7b      	ldrb	r3, [r7, #25]
	uint8_t buffer[BOOTLOADER_CMD_GET_LEN] = {	UART_BOOTLOADER_ACK
 8005664:	72bb      	strb	r3, [r7, #10]
												, cmd.writeUnProtectCmd
 8005666:	7ebb      	ldrb	r3, [r7, #26]
	uint8_t buffer[BOOTLOADER_CMD_GET_LEN] = {	UART_BOOTLOADER_ACK
 8005668:	72fb      	strb	r3, [r7, #11]
												, cmd.readOutProtectCmd
 800566a:	7efb      	ldrb	r3, [r7, #27]
	uint8_t buffer[BOOTLOADER_CMD_GET_LEN] = {	UART_BOOTLOADER_ACK
 800566c:	733b      	strb	r3, [r7, #12]
												, cmd.readOutUnProtectCmd
 800566e:	7f3b      	ldrb	r3, [r7, #28]
	uint8_t buffer[BOOTLOADER_CMD_GET_LEN] = {	UART_BOOTLOADER_ACK
 8005670:	737b      	strb	r3, [r7, #13]
												, cmd.getChecksumCmd
 8005672:	7f7b      	ldrb	r3, [r7, #29]
	uint8_t buffer[BOOTLOADER_CMD_GET_LEN] = {	UART_BOOTLOADER_ACK
 8005674:	73bb      	strb	r3, [r7, #14]
 8005676:	2379      	movs	r3, #121	; 0x79
 8005678:	73fb      	strb	r3, [r7, #15]
												, UART_BOOTLOADER_ACK};

	uartBootLoaderSendMoreByte(buffer, BOOTLOADER_CMD_GET_LEN);
 800567a:	463b      	mov	r3, r7
 800567c:	2110      	movs	r1, #16
 800567e:	4618      	mov	r0, r3
 8005680:	f7ff fcc8 	bl	8005014 <uartBootLoaderSendMoreByte>

	printf("\n[uartBootLoaderRecieverCmdGet] send Ack byte , data of cmd get , ack byte end...\n");
 8005684:	4803      	ldr	r0, [pc, #12]	; (8005694 <uartBootLoaderResponseCmdGet+0x98>)
 8005686:	f001 fa69 	bl	8006b5c <puts>

	return true;
 800568a:	2301      	movs	r3, #1
}
 800568c:	4618      	mov	r0, r3
 800568e:	3720      	adds	r7, #32
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	0800ab40 	.word	0x0800ab40

08005698 <uartBootLoaderResponseCmdGetVer>:

/** @brief  uartBootLoaderResponseCmdGetVer
    @return bool
*/
static bool uartBootLoaderResponseCmdGetVer(void)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
	bootLoaderGetVerCmd_t cmd;

	cmd.version = BOOTLOADER_VERSION;
 800569e:	2331      	movs	r3, #49	; 0x31
 80056a0:	733b      	strb	r3, [r7, #12]
	cmd.optionByte1 = 0x0a;
 80056a2:	230a      	movs	r3, #10
 80056a4:	737b      	strb	r3, [r7, #13]
	cmd.optionByte2 = 0x0a;
 80056a6:	230a      	movs	r3, #10
 80056a8:	73bb      	strb	r3, [r7, #14]

	uint8_t buffer[BOOTLOADER_CMD_GET_VER_LEN] = {	UART_BOOTLOADER_ACK
 80056aa:	2379      	movs	r3, #121	; 0x79
 80056ac:	713b      	strb	r3, [r7, #4]
													, cmd.version
 80056ae:	7b3b      	ldrb	r3, [r7, #12]
	uint8_t buffer[BOOTLOADER_CMD_GET_VER_LEN] = {	UART_BOOTLOADER_ACK
 80056b0:	717b      	strb	r3, [r7, #5]
													, cmd.optionByte1
 80056b2:	7b7b      	ldrb	r3, [r7, #13]
	uint8_t buffer[BOOTLOADER_CMD_GET_VER_LEN] = {	UART_BOOTLOADER_ACK
 80056b4:	71bb      	strb	r3, [r7, #6]
													, cmd.optionByte2
 80056b6:	7bbb      	ldrb	r3, [r7, #14]
	uint8_t buffer[BOOTLOADER_CMD_GET_VER_LEN] = {	UART_BOOTLOADER_ACK
 80056b8:	71fb      	strb	r3, [r7, #7]
 80056ba:	2379      	movs	r3, #121	; 0x79
 80056bc:	723b      	strb	r3, [r7, #8]
													, UART_BOOTLOADER_ACK};

	uartBootLoaderSendMoreByte(buffer, BOOTLOADER_CMD_GET_VER_LEN);
 80056be:	1d3b      	adds	r3, r7, #4
 80056c0:	2105      	movs	r1, #5
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7ff fca6 	bl	8005014 <uartBootLoaderSendMoreByte>

	printf("\n[uartBootLoaderResponseCmdGetVer] send Ack byte, data of cmd get ver and ack byte end...\n");
 80056c8:	4803      	ldr	r0, [pc, #12]	; (80056d8 <uartBootLoaderResponseCmdGetVer+0x40>)
 80056ca:	f001 fa47 	bl	8006b5c <puts>

	return true;
 80056ce:	2301      	movs	r3, #1
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3710      	adds	r7, #16
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	0800b0b4 	.word	0x0800b0b4

080056dc <uartBootLoaderResponseCmdGetId>:

/** @brief  uartBootLoaderResponseCmdGetId
    @return bool
*/
static bool uartBootLoaderResponseCmdGetId(void)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
	bootLoaderGetIdCmd_t cmd;

	cmd.numberOfbyte = 1;
 80056e2:	2301      	movs	r3, #1
 80056e4:	723b      	strb	r3, [r7, #8]
	cmd.byte3 = 0x04;
 80056e6:	2304      	movs	r3, #4
 80056e8:	727b      	strb	r3, [r7, #9]
	cmd.byte4 = 0x13;
 80056ea:	2313      	movs	r3, #19
 80056ec:	72bb      	strb	r3, [r7, #10]

	uint8_t buffer[BOOTLOADER_CMD_GET_ID_LEN] = {	UART_BOOTLOADER_ACK
 80056ee:	2379      	movs	r3, #121	; 0x79
 80056f0:	703b      	strb	r3, [r7, #0]
													, cmd.numberOfbyte
 80056f2:	7a3b      	ldrb	r3, [r7, #8]
	uint8_t buffer[BOOTLOADER_CMD_GET_ID_LEN] = {	UART_BOOTLOADER_ACK
 80056f4:	707b      	strb	r3, [r7, #1]
													, cmd.byte3
 80056f6:	7a7b      	ldrb	r3, [r7, #9]
	uint8_t buffer[BOOTLOADER_CMD_GET_ID_LEN] = {	UART_BOOTLOADER_ACK
 80056f8:	70bb      	strb	r3, [r7, #2]
													, cmd.byte4
 80056fa:	7abb      	ldrb	r3, [r7, #10]
	uint8_t buffer[BOOTLOADER_CMD_GET_ID_LEN] = {	UART_BOOTLOADER_ACK
 80056fc:	70fb      	strb	r3, [r7, #3]
 80056fe:	2379      	movs	r3, #121	; 0x79
 8005700:	713b      	strb	r3, [r7, #4]
													, UART_BOOTLOADER_ACK};

	uartBootLoaderSendMoreByte(buffer, BOOTLOADER_CMD_GET_ID_LEN);
 8005702:	463b      	mov	r3, r7
 8005704:	2105      	movs	r1, #5
 8005706:	4618      	mov	r0, r3
 8005708:	f7ff fc84 	bl	8005014 <uartBootLoaderSendMoreByte>

	printf("\n[uartBootLoaderResponseCmdGetId] send Ack byte, data of cmd get id and ack byte end...\n");
 800570c:	4803      	ldr	r0, [pc, #12]	; (800571c <uartBootLoaderResponseCmdGetId+0x40>)
 800570e:	f001 fa25 	bl	8006b5c <puts>

	return true;
 8005712:	2301      	movs	r3, #1
}
 8005714:	4618      	mov	r0, r3
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	0800b110 	.word	0x0800b110

08005720 <uartBootLoaderResponseCmdReadMem>:

/** @brief  uartBootLoaderResponseCmdReadMem
    @return bool
*/
static bool uartBootLoaderResponseCmdReadMem(void)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b086      	sub	sp, #24
 8005724:	af00      	add	r7, sp, #0
	uint8_t rData = 0;
 8005726:	2300      	movs	r3, #0
 8005728:	733b      	strb	r3, [r7, #12]
	uint8_t addressBuffer[5] = {0, 0, 0, 0, 0};
 800572a:	4a6e      	ldr	r2, [pc, #440]	; (80058e4 <uartBootLoaderResponseCmdReadMem+0x1c4>)
 800572c:	1d3b      	adds	r3, r7, #4
 800572e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005732:	6018      	str	r0, [r3, #0]
 8005734:	3304      	adds	r3, #4
 8005736:	7019      	strb	r1, [r3, #0]
	uint8_t nBuffer[2] = {0, 0};
 8005738:	2300      	movs	r3, #0
 800573a:	803b      	strh	r3, [r7, #0]
	static uint8_t state = 0;

	switch(state)
 800573c:	4b6a      	ldr	r3, [pc, #424]	; (80058e8 <uartBootLoaderResponseCmdReadMem+0x1c8>)
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	2b03      	cmp	r3, #3
 8005742:	f200 80ca 	bhi.w	80058da <uartBootLoaderResponseCmdReadMem+0x1ba>
 8005746:	a201      	add	r2, pc, #4	; (adr r2, 800574c <uartBootLoaderResponseCmdReadMem+0x2c>)
 8005748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800574c:	0800575d 	.word	0x0800575d
 8005750:	0800576f 	.word	0x0800576f
 8005754:	08005801 	.word	0x08005801
 8005758:	08005885 	.word	0x08005885
	{
		case 0:
		{
			uartBootLoaderSendAck();
 800575c:	f7ff fc36 	bl	8004fcc <uartBootLoaderSendAck>

			printf("\n[uartBootLoaderResponseCmdGetId] send Ack byte 1...\n");
 8005760:	4862      	ldr	r0, [pc, #392]	; (80058ec <uartBootLoaderResponseCmdReadMem+0x1cc>)
 8005762:	f001 f9fb 	bl	8006b5c <puts>

			state = 1;
 8005766:	4b60      	ldr	r3, [pc, #384]	; (80058e8 <uartBootLoaderResponseCmdReadMem+0x1c8>)
 8005768:	2201      	movs	r2, #1
 800576a:	701a      	strb	r2, [r3, #0]
		}break;
 800576c:	e0b5      	b.n	80058da <uartBootLoaderResponseCmdReadMem+0x1ba>
		case 1:
		{
			if(rBufferRxU2.len == 5)
 800576e:	4b60      	ldr	r3, [pc, #384]	; (80058f0 <uartBootLoaderResponseCmdReadMem+0x1d0>)
 8005770:	889b      	ldrh	r3, [r3, #4]
 8005772:	2b05      	cmp	r3, #5
 8005774:	f040 80ae 	bne.w	80058d4 <uartBootLoaderResponseCmdReadMem+0x1b4>
			{
				for(uint8_t i = 0; i < 5;i++)
 8005778:	2300      	movs	r3, #0
 800577a:	75fb      	strb	r3, [r7, #23]
 800577c:	e01a      	b.n	80057b4 <uartBootLoaderResponseCmdReadMem+0x94>
				if(ringBufferRead(&rBufferRxU2, &rData) == RING_BUFFER_OK)
 800577e:	f107 030c 	add.w	r3, r7, #12
 8005782:	4619      	mov	r1, r3
 8005784:	485a      	ldr	r0, [pc, #360]	; (80058f0 <uartBootLoaderResponseCmdReadMem+0x1d0>)
 8005786:	f7ff f9d9 	bl	8004b3c <ringBufferRead>
 800578a:	4603      	mov	r3, r0
 800578c:	2b01      	cmp	r3, #1
 800578e:	d10e      	bne.n	80057ae <uartBootLoaderResponseCmdReadMem+0x8e>
				{
					printf("\n[uartBootLoaderResponseCmdReadMem] reciever byte = 0x%x | len = %d\n", rData, rBufferRxU2.len);
 8005790:	7b3b      	ldrb	r3, [r7, #12]
 8005792:	4619      	mov	r1, r3
 8005794:	4b56      	ldr	r3, [pc, #344]	; (80058f0 <uartBootLoaderResponseCmdReadMem+0x1d0>)
 8005796:	889b      	ldrh	r3, [r3, #4]
 8005798:	461a      	mov	r2, r3
 800579a:	4856      	ldr	r0, [pc, #344]	; (80058f4 <uartBootLoaderResponseCmdReadMem+0x1d4>)
 800579c:	f001 f958 	bl	8006a50 <iprintf>
					addressBuffer[i] = rData;
 80057a0:	7dfb      	ldrb	r3, [r7, #23]
 80057a2:	7b3a      	ldrb	r2, [r7, #12]
 80057a4:	f107 0118 	add.w	r1, r7, #24
 80057a8:	440b      	add	r3, r1
 80057aa:	f803 2c14 	strb.w	r2, [r3, #-20]
				for(uint8_t i = 0; i < 5;i++)
 80057ae:	7dfb      	ldrb	r3, [r7, #23]
 80057b0:	3301      	adds	r3, #1
 80057b2:	75fb      	strb	r3, [r7, #23]
 80057b4:	7dfb      	ldrb	r3, [r7, #23]
 80057b6:	2b04      	cmp	r3, #4
 80057b8:	d9e1      	bls.n	800577e <uartBootLoaderResponseCmdReadMem+0x5e>
				}

				uint8_t checksum = uartBootLoaderChecksumCalculator(0, addressBuffer, 4);
 80057ba:	1d3b      	adds	r3, r7, #4
 80057bc:	2204      	movs	r2, #4
 80057be:	4619      	mov	r1, r3
 80057c0:	2000      	movs	r0, #0
 80057c2:	f7ff fc3b 	bl	800503c <uartBootLoaderChecksumCalculator>
 80057c6:	4603      	mov	r3, r0
 80057c8:	737b      	strb	r3, [r7, #13]
				printf("\n[uartBootLoaderResponseCmdReadMem] address checksum = 0x%x\n", checksum);
 80057ca:	7b7b      	ldrb	r3, [r7, #13]
 80057cc:	4619      	mov	r1, r3
 80057ce:	484a      	ldr	r0, [pc, #296]	; (80058f8 <uartBootLoaderResponseCmdReadMem+0x1d8>)
 80057d0:	f001 f93e 	bl	8006a50 <iprintf>

				if(checksum == addressBuffer[4])
 80057d4:	7a3b      	ldrb	r3, [r7, #8]
 80057d6:	7b7a      	ldrb	r2, [r7, #13]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d108      	bne.n	80057ee <uartBootLoaderResponseCmdReadMem+0xce>
				{
					uartBootLoaderSendAck();
 80057dc:	f7ff fbf6 	bl	8004fcc <uartBootLoaderSendAck>

					printf("\n[uartBootLoaderResponseCmdGetId] send Ack byte 2...\n");
 80057e0:	4846      	ldr	r0, [pc, #280]	; (80058fc <uartBootLoaderResponseCmdReadMem+0x1dc>)
 80057e2:	f001 f9bb 	bl	8006b5c <puts>

					state = 2;
 80057e6:	4b40      	ldr	r3, [pc, #256]	; (80058e8 <uartBootLoaderResponseCmdReadMem+0x1c8>)
 80057e8:	2202      	movs	r2, #2
 80057ea:	701a      	strb	r2, [r3, #0]
					printf("\n[uartBootLoaderResponseCmdGetId] send nack byte 2...\n");
					state = 10;
				}

			}
		}break;
 80057ec:	e072      	b.n	80058d4 <uartBootLoaderResponseCmdReadMem+0x1b4>
					uartBootLoaderSendNack();
 80057ee:	f7ff fbff 	bl	8004ff0 <uartBootLoaderSendNack>
					printf("\n[uartBootLoaderResponseCmdGetId] send nack byte 2...\n");
 80057f2:	4843      	ldr	r0, [pc, #268]	; (8005900 <uartBootLoaderResponseCmdReadMem+0x1e0>)
 80057f4:	f001 f9b2 	bl	8006b5c <puts>
					state = 10;
 80057f8:	4b3b      	ldr	r3, [pc, #236]	; (80058e8 <uartBootLoaderResponseCmdReadMem+0x1c8>)
 80057fa:	220a      	movs	r2, #10
 80057fc:	701a      	strb	r2, [r3, #0]
		}break;
 80057fe:	e069      	b.n	80058d4 <uartBootLoaderResponseCmdReadMem+0x1b4>
		case 2:
		{
			if(rBufferRxU2.len == 2)
 8005800:	4b3b      	ldr	r3, [pc, #236]	; (80058f0 <uartBootLoaderResponseCmdReadMem+0x1d0>)
 8005802:	889b      	ldrh	r3, [r3, #4]
 8005804:	2b02      	cmp	r3, #2
 8005806:	d167      	bne.n	80058d8 <uartBootLoaderResponseCmdReadMem+0x1b8>
			{
				for(uint8_t i = 0 ; i < 2; i++)
 8005808:	2300      	movs	r3, #0
 800580a:	75bb      	strb	r3, [r7, #22]
 800580c:	e01a      	b.n	8005844 <uartBootLoaderResponseCmdReadMem+0x124>
				if(ringBufferRead(&rBufferRxU2, &rData) == RING_BUFFER_OK)
 800580e:	f107 030c 	add.w	r3, r7, #12
 8005812:	4619      	mov	r1, r3
 8005814:	4836      	ldr	r0, [pc, #216]	; (80058f0 <uartBootLoaderResponseCmdReadMem+0x1d0>)
 8005816:	f7ff f991 	bl	8004b3c <ringBufferRead>
 800581a:	4603      	mov	r3, r0
 800581c:	2b01      	cmp	r3, #1
 800581e:	d10e      	bne.n	800583e <uartBootLoaderResponseCmdReadMem+0x11e>
				{
					printf("\n[uartBootLoaderResponseCmdReadMem] reciever byte = 0x%x | len = %d\n", rData, rBufferRxU2.len);
 8005820:	7b3b      	ldrb	r3, [r7, #12]
 8005822:	4619      	mov	r1, r3
 8005824:	4b32      	ldr	r3, [pc, #200]	; (80058f0 <uartBootLoaderResponseCmdReadMem+0x1d0>)
 8005826:	889b      	ldrh	r3, [r3, #4]
 8005828:	461a      	mov	r2, r3
 800582a:	4832      	ldr	r0, [pc, #200]	; (80058f4 <uartBootLoaderResponseCmdReadMem+0x1d4>)
 800582c:	f001 f910 	bl	8006a50 <iprintf>
					nBuffer[i] = rData;
 8005830:	7dbb      	ldrb	r3, [r7, #22]
 8005832:	7b3a      	ldrb	r2, [r7, #12]
 8005834:	f107 0118 	add.w	r1, r7, #24
 8005838:	440b      	add	r3, r1
 800583a:	f803 2c18 	strb.w	r2, [r3, #-24]
				for(uint8_t i = 0 ; i < 2; i++)
 800583e:	7dbb      	ldrb	r3, [r7, #22]
 8005840:	3301      	adds	r3, #1
 8005842:	75bb      	strb	r3, [r7, #22]
 8005844:	7dbb      	ldrb	r3, [r7, #22]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d9e1      	bls.n	800580e <uartBootLoaderResponseCmdReadMem+0xee>
				}

				uint8_t checksum = uartBootLoaderChecksumCalculator(0, nBuffer, 2);
 800584a:	463b      	mov	r3, r7
 800584c:	2202      	movs	r2, #2
 800584e:	4619      	mov	r1, r3
 8005850:	2000      	movs	r0, #0
 8005852:	f7ff fbf3 	bl	800503c <uartBootLoaderChecksumCalculator>
 8005856:	4603      	mov	r3, r0
 8005858:	73bb      	strb	r3, [r7, #14]
				printf("\n[uartBootLoaderResponseCmdReadMem] numberOfByte checksum = 0x%x\n", checksum);
 800585a:	7bbb      	ldrb	r3, [r7, #14]
 800585c:	4619      	mov	r1, r3
 800585e:	4829      	ldr	r0, [pc, #164]	; (8005904 <uartBootLoaderResponseCmdReadMem+0x1e4>)
 8005860:	f001 f8f6 	bl	8006a50 <iprintf>

				if(checksum != nBuffer[1])
 8005864:	787b      	ldrb	r3, [r7, #1]
 8005866:	7bba      	ldrb	r2, [r7, #14]
 8005868:	429a      	cmp	r2, r3
 800586a:	d007      	beq.n	800587c <uartBootLoaderResponseCmdReadMem+0x15c>
				{
					uartBootLoaderSendNack();
 800586c:	f7ff fbc0 	bl	8004ff0 <uartBootLoaderSendNack>

					printf("\n[uartBootLoaderResponseCmdGetId] send nack byte 3...\n");
 8005870:	4825      	ldr	r0, [pc, #148]	; (8005908 <uartBootLoaderResponseCmdReadMem+0x1e8>)
 8005872:	f001 f973 	bl	8006b5c <puts>
					state = 10;
 8005876:	4b1c      	ldr	r3, [pc, #112]	; (80058e8 <uartBootLoaderResponseCmdReadMem+0x1c8>)
 8005878:	220a      	movs	r2, #10
 800587a:	701a      	strb	r2, [r3, #0]
				}

				state = 3;
 800587c:	4b1a      	ldr	r3, [pc, #104]	; (80058e8 <uartBootLoaderResponseCmdReadMem+0x1c8>)
 800587e:	2203      	movs	r2, #3
 8005880:	701a      	strb	r2, [r3, #0]
			}
		}break;
 8005882:	e029      	b.n	80058d8 <uartBootLoaderResponseCmdReadMem+0x1b8>
		case 3:
		{
			uint8_t *buffer;
			buffer = calloc((nBuffer[0] + 2), sizeof(uint8_t));
 8005884:	783b      	ldrb	r3, [r7, #0]
 8005886:	3302      	adds	r3, #2
 8005888:	2101      	movs	r1, #1
 800588a:	4618      	mov	r0, r3
 800588c:	f000 f954 	bl	8005b38 <calloc>
 8005890:	4603      	mov	r3, r0
 8005892:	613b      	str	r3, [r7, #16]

			for(uint8_t i = 0; i < nBuffer[0] + 1; i++)
 8005894:	2300      	movs	r3, #0
 8005896:	73fb      	strb	r3, [r7, #15]
 8005898:	e007      	b.n	80058aa <uartBootLoaderResponseCmdReadMem+0x18a>
			{
				*buffer++ = 123;
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	1c5a      	adds	r2, r3, #1
 800589e:	613a      	str	r2, [r7, #16]
 80058a0:	227b      	movs	r2, #123	; 0x7b
 80058a2:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < nBuffer[0] + 1; i++)
 80058a4:	7bfb      	ldrb	r3, [r7, #15]
 80058a6:	3301      	adds	r3, #1
 80058a8:	73fb      	strb	r3, [r7, #15]
 80058aa:	783b      	ldrb	r3, [r7, #0]
 80058ac:	7bfa      	ldrb	r2, [r7, #15]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d9f3      	bls.n	800589a <uartBootLoaderResponseCmdReadMem+0x17a>
			}

			*buffer++ = UART_BOOTLOADER_ACK;
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	1c5a      	adds	r2, r3, #1
 80058b6:	613a      	str	r2, [r7, #16]
 80058b8:	2279      	movs	r2, #121	; 0x79
 80058ba:	701a      	strb	r2, [r3, #0]

			uartBootLoaderSendMoreByte(buffer, 2);
 80058bc:	2102      	movs	r1, #2
 80058be:	6938      	ldr	r0, [r7, #16]
 80058c0:	f7ff fba8 	bl	8005014 <uartBootLoaderSendMoreByte>

			free(buffer);
 80058c4:	6938      	ldr	r0, [r7, #16]
 80058c6:	f000 f971 	bl	8005bac <free>

			state = 0;
 80058ca:	4b07      	ldr	r3, [pc, #28]	; (80058e8 <uartBootLoaderResponseCmdReadMem+0x1c8>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	701a      	strb	r2, [r3, #0]

			return true;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e003      	b.n	80058dc <uartBootLoaderResponseCmdReadMem+0x1bc>
		}break;
 80058d4:	bf00      	nop
 80058d6:	e000      	b.n	80058da <uartBootLoaderResponseCmdReadMem+0x1ba>
		}break;
 80058d8:	bf00      	nop
		}break;
	}

	return false;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3718      	adds	r7, #24
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	0800b314 	.word	0x0800b314
 80058e8:	20000370 	.word	0x20000370
 80058ec:	0800b168 	.word	0x0800b168
 80058f0:	20001c8c 	.word	0x20001c8c
 80058f4:	0800b1a0 	.word	0x0800b1a0
 80058f8:	0800b1e8 	.word	0x0800b1e8
 80058fc:	0800b228 	.word	0x0800b228
 8005900:	0800b260 	.word	0x0800b260
 8005904:	0800b298 	.word	0x0800b298
 8005908:	0800b2dc 	.word	0x0800b2dc

0800590c <uartBootLoaderResponseCmdReadOP>:

/** @brief  uartBootLoaderResponseCmdReadOP
    @return bool
*/
static bool uartBootLoaderResponseCmdReadOP(void)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	af00      	add	r7, sp, #0
	uartBootLoaderSendNack();
 8005910:	f7ff fb6e 	bl	8004ff0 <uartBootLoaderSendNack>

	printf("\n[uartBootLoaderResponseCmdReadOP] send nack byte ...\n");
 8005914:	4802      	ldr	r0, [pc, #8]	; (8005920 <uartBootLoaderResponseCmdReadOP+0x14>)
 8005916:	f001 f921 	bl	8006b5c <puts>

	return true;
 800591a:	2301      	movs	r3, #1
}
 800591c:	4618      	mov	r0, r3
 800591e:	bd80      	pop	{r7, pc}
 8005920:	0800b31c 	.word	0x0800b31c

08005924 <uartBootLoaderResponseCmdReadOUP>:

/** @brief  uartBootLoaderResponseCmdReadOUP
    @return bool
*/
static bool uartBootLoaderResponseCmdReadOUP(void)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	af00      	add	r7, sp, #0
	uartBootLoaderSendAck();
 8005928:	f7ff fb50 	bl	8004fcc <uartBootLoaderSendAck>
	uartBootLoaderSendAck();
 800592c:	f7ff fb4e 	bl	8004fcc <uartBootLoaderSendAck>
	printf("\n[uartBootLoaderResponseCmdGetId] send Ack 2 byte...\n");
 8005930:	4802      	ldr	r0, [pc, #8]	; (800593c <uartBootLoaderResponseCmdReadOUP+0x18>)
 8005932:	f001 f913 	bl	8006b5c <puts>

	return true;
 8005936:	2301      	movs	r3, #1
}
 8005938:	4618      	mov	r0, r3
 800593a:	bd80      	pop	{r7, pc}
 800593c:	0800b354 	.word	0x0800b354

08005940 <uartBootLoaderStateConnected>:

/** @brief  uartBootLoaderStateConnected
    @return bool
*/
static void uartBootLoaderStateConnected(uartBootLoader_t *boot)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]

	switch(boot->rCmd)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	789b      	ldrb	r3, [r3, #2]
 800594c:	2b0c      	cmp	r3, #12
 800594e:	d867      	bhi.n	8005a20 <uartBootLoaderStateConnected+0xe0>
 8005950:	a201      	add	r2, pc, #4	; (adr r2, 8005958 <uartBootLoaderStateConnected+0x18>)
 8005952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005956:	bf00      	nop
 8005958:	0800598d 	.word	0x0800598d
 800595c:	0800599b 	.word	0x0800599b
 8005960:	080059ad 	.word	0x080059ad
 8005964:	080059bf 	.word	0x080059bf
 8005968:	080059d1 	.word	0x080059d1
 800596c:	08005a07 	.word	0x08005a07
 8005970:	08005a07 	.word	0x08005a07
 8005974:	08005a07 	.word	0x08005a07
 8005978:	08005a07 	.word	0x08005a07
 800597c:	08005a07 	.word	0x08005a07
 8005980:	080059e3 	.word	0x080059e3
 8005984:	080059f5 	.word	0x080059f5
 8005988:	08005a07 	.word	0x08005a07
	{
		case BOOTLOADER_CMD_NONE:
		{
			/// waitting cmd
			boot->rCmd = uartBootLoaderReadCmd();
 800598c:	f7ff fdca 	bl	8005524 <uartBootLoaderReadCmd>
 8005990:	4603      	mov	r3, r0
 8005992:	461a      	mov	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	709a      	strb	r2, [r3, #2]
		}break;
 8005998:	e042      	b.n	8005a20 <uartBootLoaderStateConnected+0xe0>
		case BOOTLOADER_CMD_GET:
		{
			if(uartBootLoaderResponseCmdGet() == true)
 800599a:	f7ff fe2f 	bl	80055fc <uartBootLoaderResponseCmdGet>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d032      	beq.n	8005a0a <uartBootLoaderStateConnected+0xca>
			{
				boot->rCmd = BOOTLOADER_CMD_NONE;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	709a      	strb	r2, [r3, #2]
			}
		}break;
 80059aa:	e02e      	b.n	8005a0a <uartBootLoaderStateConnected+0xca>
		case BOOTLOADER_CMD_GET_VER:
		{
			if(uartBootLoaderResponseCmdGetVer() == true)
 80059ac:	f7ff fe74 	bl	8005698 <uartBootLoaderResponseCmdGetVer>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d02b      	beq.n	8005a0e <uartBootLoaderStateConnected+0xce>
			{
				boot->rCmd = BOOTLOADER_CMD_NONE;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	709a      	strb	r2, [r3, #2]
			}
		}break;
 80059bc:	e027      	b.n	8005a0e <uartBootLoaderStateConnected+0xce>
		case BOOTLOADER_CMD_GET_ID:
		{
			if(uartBootLoaderResponseCmdGetId() == true)
 80059be:	f7ff fe8d 	bl	80056dc <uartBootLoaderResponseCmdGetId>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d024      	beq.n	8005a12 <uartBootLoaderStateConnected+0xd2>
			{
				boot->rCmd = BOOTLOADER_CMD_NONE;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	709a      	strb	r2, [r3, #2]
			}
		}break;
 80059ce:	e020      	b.n	8005a12 <uartBootLoaderStateConnected+0xd2>
		case BOOTLOADER_CMD_READ_MEMORY:
		{
			if(uartBootLoaderResponseCmdReadMem() == true)
 80059d0:	f7ff fea6 	bl	8005720 <uartBootLoaderResponseCmdReadMem>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d01d      	beq.n	8005a16 <uartBootLoaderStateConnected+0xd6>
			{
				boot->rCmd = BOOTLOADER_CMD_NONE;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	709a      	strb	r2, [r3, #2]
			}
		}break;
 80059e0:	e019      	b.n	8005a16 <uartBootLoaderStateConnected+0xd6>
		{

		}break;
		case BOOTLOADER_CMD_READ_PROTECT:
		{
			if(uartBootLoaderResponseCmdReadOP() == true)
 80059e2:	f7ff ff93 	bl	800590c <uartBootLoaderResponseCmdReadOP>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d016      	beq.n	8005a1a <uartBootLoaderStateConnected+0xda>
			{
				boot->rCmd = BOOTLOADER_CMD_NONE;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	709a      	strb	r2, [r3, #2]
			}
		}break;
 80059f2:	e012      	b.n	8005a1a <uartBootLoaderStateConnected+0xda>
		case BOOTLOADER_CMD_READ_UNPROTECT:
		{
			if(uartBootLoaderResponseCmdReadOUP() == true)
 80059f4:	f7ff ff96 	bl	8005924 <uartBootLoaderResponseCmdReadOUP>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00f      	beq.n	8005a1e <uartBootLoaderStateConnected+0xde>
			{
				boot->rCmd = BOOTLOADER_CMD_NONE;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	709a      	strb	r2, [r3, #2]
			}
		}break;
 8005a04:	e00b      	b.n	8005a1e <uartBootLoaderStateConnected+0xde>
		}break;
 8005a06:	bf00      	nop
 8005a08:	e00a      	b.n	8005a20 <uartBootLoaderStateConnected+0xe0>
		}break;
 8005a0a:	bf00      	nop
 8005a0c:	e008      	b.n	8005a20 <uartBootLoaderStateConnected+0xe0>
		}break;
 8005a0e:	bf00      	nop
 8005a10:	e006      	b.n	8005a20 <uartBootLoaderStateConnected+0xe0>
		}break;
 8005a12:	bf00      	nop
 8005a14:	e004      	b.n	8005a20 <uartBootLoaderStateConnected+0xe0>
		}break;
 8005a16:	bf00      	nop
 8005a18:	e002      	b.n	8005a20 <uartBootLoaderStateConnected+0xe0>
		}break;
 8005a1a:	bf00      	nop
 8005a1c:	e000      	b.n	8005a20 <uartBootLoaderStateConnected+0xe0>
		}break;
 8005a1e:	bf00      	nop
		case BOOTLOADER_CMD_GET_CHECKSUM:
		{

		}break;
	}
}
 8005a20:	bf00      	nop
 8005a22:	3708      	adds	r7, #8
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <uartBootLoaderProcess>:
#define __UART_BOOTLOADER_PROCESS
/** @brief  uartBootLoaderProcess
    @return none
*/
void uartBootLoaderProcess(void)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0

	switch(boot.state)
 8005a2e:	4b29      	ldr	r3, [pc, #164]	; (8005ad4 <uartBootLoaderProcess+0xac>)
 8005a30:	785b      	ldrb	r3, [r3, #1]
 8005a32:	2b05      	cmp	r3, #5
 8005a34:	d849      	bhi.n	8005aca <uartBootLoaderProcess+0xa2>
 8005a36:	a201      	add	r2, pc, #4	; (adr r2, 8005a3c <uartBootLoaderProcess+0x14>)
 8005a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a3c:	08005a55 	.word	0x08005a55
 8005a40:	08005a69 	.word	0x08005a69
 8005a44:	08005a71 	.word	0x08005a71
 8005a48:	08005a85 	.word	0x08005a85
 8005a4c:	08005ac1 	.word	0x08005ac1
 8005a50:	08005ac1 	.word	0x08005ac1
	{
		case BOOTLOADER_STATE_IDLE:
		{
			if(uartBootLoaderRecieverCmdConnect(&boot) == true)
 8005a54:	481f      	ldr	r0, [pc, #124]	; (8005ad4 <uartBootLoaderProcess+0xac>)
 8005a56:	f7ff fb13 	bl	8005080 <uartBootLoaderRecieverCmdConnect>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d031      	beq.n	8005ac4 <uartBootLoaderProcess+0x9c>
			{
				boot.state = BOOTLOADER_STATE_CONNECTED;
 8005a60:	4b1c      	ldr	r3, [pc, #112]	; (8005ad4 <uartBootLoaderProcess+0xac>)
 8005a62:	2201      	movs	r2, #1
 8005a64:	705a      	strb	r2, [r3, #1]
			}
		}break;
 8005a66:	e02d      	b.n	8005ac4 <uartBootLoaderProcess+0x9c>
//				case BOOTLOADER_GET_STATE_DONE:
//				{
//					boot.state = BOOTLOADER_STATE_ERASE;
//				}break;
//			}
			uartBootLoaderStateConnected(&boot);
 8005a68:	481a      	ldr	r0, [pc, #104]	; (8005ad4 <uartBootLoaderProcess+0xac>)
 8005a6a:	f7ff ff69 	bl	8005940 <uartBootLoaderStateConnected>
		}break;
 8005a6e:	e02c      	b.n	8005aca <uartBootLoaderProcess+0xa2>
		case BOOTLOADER_STATE_ERASE:
		{
			if(uartBootLoaderRecieverCmdErase(&boot) == true)
 8005a70:	4818      	ldr	r0, [pc, #96]	; (8005ad4 <uartBootLoaderProcess+0xac>)
 8005a72:	f7ff fb51 	bl	8005118 <uartBootLoaderRecieverCmdErase>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d025      	beq.n	8005ac8 <uartBootLoaderProcess+0xa0>
			{
				boot.state = BOOTLOADER_STATE_WRITE;
 8005a7c:	4b15      	ldr	r3, [pc, #84]	; (8005ad4 <uartBootLoaderProcess+0xac>)
 8005a7e:	2203      	movs	r2, #3
 8005a80:	705a      	strb	r2, [r3, #1]
			}
		}break;
 8005a82:	e021      	b.n	8005ac8 <uartBootLoaderProcess+0xa0>
		case BOOTLOADER_STATE_WRITE:
		{
			static uint8_t writeState = 0;
			switch(writeState)
 8005a84:	4b14      	ldr	r3, [pc, #80]	; (8005ad8 <uartBootLoaderProcess+0xb0>)
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d002      	beq.n	8005a92 <uartBootLoaderProcess+0x6a>
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d013      	beq.n	8005ab8 <uartBootLoaderProcess+0x90>
				case 1:
				{

				}break;
			}
		}break;
 8005a90:	e01b      	b.n	8005aca <uartBootLoaderProcess+0xa2>
					bootLoaderCmdWriteResult_t result = uartBootLoaderRecieverCmdWriteMem3(&boot);
 8005a92:	4810      	ldr	r0, [pc, #64]	; (8005ad4 <uartBootLoaderProcess+0xac>)
 8005a94:	f7ff fc7e 	bl	8005394 <uartBootLoaderRecieverCmdWriteMem3>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	71fb      	strb	r3, [r7, #7]
					if(result == BOOTLOADER_CMD_WRITE_RESULT_OK)
 8005a9c:	79fb      	ldrb	r3, [r7, #7]
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d103      	bne.n	8005aaa <uartBootLoaderProcess+0x82>
						boot.state = BOOTLOADER_STATE_DONE;
 8005aa2:	4b0c      	ldr	r3, [pc, #48]	; (8005ad4 <uartBootLoaderProcess+0xac>)
 8005aa4:	2204      	movs	r2, #4
 8005aa6:	705a      	strb	r2, [r3, #1]
				}break;
 8005aa8:	e008      	b.n	8005abc <uartBootLoaderProcess+0x94>
					else if(result == BOOTLOADER_CMD_WRITE_RESULT_ERROR)
 8005aaa:	79fb      	ldrb	r3, [r7, #7]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d105      	bne.n	8005abc <uartBootLoaderProcess+0x94>
						boot.state = BOOTLOADER_STATE_ERROR;
 8005ab0:	4b08      	ldr	r3, [pc, #32]	; (8005ad4 <uartBootLoaderProcess+0xac>)
 8005ab2:	2205      	movs	r2, #5
 8005ab4:	705a      	strb	r2, [r3, #1]
				}break;
 8005ab6:	e001      	b.n	8005abc <uartBootLoaderProcess+0x94>
				}break;
 8005ab8:	bf00      	nop
 8005aba:	e006      	b.n	8005aca <uartBootLoaderProcess+0xa2>
				}break;
 8005abc:	bf00      	nop
		}break;
 8005abe:	e004      	b.n	8005aca <uartBootLoaderProcess+0xa2>
		case BOOTLOADER_STATE_DONE:
		{

		}break;
 8005ac0:	bf00      	nop
 8005ac2:	e002      	b.n	8005aca <uartBootLoaderProcess+0xa2>
		}break;
 8005ac4:	bf00      	nop
 8005ac6:	e000      	b.n	8005aca <uartBootLoaderProcess+0xa2>
		}break;
 8005ac8:	bf00      	nop
		case BOOTLOADER_STATE_ERROR:
		{

		}break;
	}
}
 8005aca:	bf00      	nop
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	20001c6c 	.word	0x20001c6c
 8005ad8:	20000371 	.word	0x20000371

08005adc <HAL_UART_TxCpltCallback>:
#define __UART_TX_CALLBACK
/** @brief
    @return
*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
//
//    if(serial_port4.zPrivate.uartHandle.Instance == UART4)
//    {
//        serialPort_tx_finish(&serial_port4);
//    }
	if(huart->Instance == USART2)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a04      	ldr	r2, [pc, #16]	; (8005afc <HAL_UART_TxCpltCallback+0x20>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d102      	bne.n	8005af4 <HAL_UART_TxCpltCallback+0x18>
	{
		serialPort_tx_finish(&serial_port2);
 8005aee:	4804      	ldr	r0, [pc, #16]	; (8005b00 <HAL_UART_TxCpltCallback+0x24>)
 8005af0:	f7ff f8fa 	bl	8004ce8 <serialPort_tx_finish>
	else if(huart->Instance == UART4)
	{
		serialPort_tx_finish(&serial_port4);
	}
#endif
}
 8005af4:	bf00      	nop
 8005af6:	3708      	adds	r7, #8
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	40004400 	.word	0x40004400
 8005b00:	2000118c 	.word	0x2000118c

08005b04 <HAL_UART_RxCpltCallback>:
#define __UART_RX_CALLBACK
/** @brief
    @return
*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart2.Instance)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	4b06      	ldr	r3, [pc, #24]	; (8005b2c <HAL_UART_RxCpltCallback+0x28>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d105      	bne.n	8005b24 <HAL_UART_RxCpltCallback+0x20>
	{
		ringBufferWrite(&rBufferRxU2, usart2WData);
 8005b18:	4b05      	ldr	r3, [pc, #20]	; (8005b30 <HAL_UART_RxCpltCallback+0x2c>)
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	4805      	ldr	r0, [pc, #20]	; (8005b34 <HAL_UART_RxCpltCallback+0x30>)
 8005b20:	f7fe ffd6 	bl	8004ad0 <ringBufferWrite>
	else if(huart->Instance == huart4.Instance)
	{
		ringBufferWrite(&rBufferRxU4, wData);
	}
#endif
}
 8005b24:	bf00      	nop
 8005b26:	3708      	adds	r7, #8
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	200005e4 	.word	0x200005e4
 8005b30:	20001da0 	.word	0x20001da0
 8005b34:	20001c8c 	.word	0x20001c8c

08005b38 <calloc>:
 8005b38:	4b02      	ldr	r3, [pc, #8]	; (8005b44 <calloc+0xc>)
 8005b3a:	460a      	mov	r2, r1
 8005b3c:	4601      	mov	r1, r0
 8005b3e:	6818      	ldr	r0, [r3, #0]
 8005b40:	f000 b852 	b.w	8005be8 <_calloc_r>
 8005b44:	2000005c 	.word	0x2000005c

08005b48 <__errno>:
 8005b48:	4b01      	ldr	r3, [pc, #4]	; (8005b50 <__errno+0x8>)
 8005b4a:	6818      	ldr	r0, [r3, #0]
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	2000005c 	.word	0x2000005c

08005b54 <__libc_init_array>:
 8005b54:	b570      	push	{r4, r5, r6, lr}
 8005b56:	4d0d      	ldr	r5, [pc, #52]	; (8005b8c <__libc_init_array+0x38>)
 8005b58:	4c0d      	ldr	r4, [pc, #52]	; (8005b90 <__libc_init_array+0x3c>)
 8005b5a:	1b64      	subs	r4, r4, r5
 8005b5c:	10a4      	asrs	r4, r4, #2
 8005b5e:	2600      	movs	r6, #0
 8005b60:	42a6      	cmp	r6, r4
 8005b62:	d109      	bne.n	8005b78 <__libc_init_array+0x24>
 8005b64:	4d0b      	ldr	r5, [pc, #44]	; (8005b94 <__libc_init_array+0x40>)
 8005b66:	4c0c      	ldr	r4, [pc, #48]	; (8005b98 <__libc_init_array+0x44>)
 8005b68:	f004 fda8 	bl	800a6bc <_init>
 8005b6c:	1b64      	subs	r4, r4, r5
 8005b6e:	10a4      	asrs	r4, r4, #2
 8005b70:	2600      	movs	r6, #0
 8005b72:	42a6      	cmp	r6, r4
 8005b74:	d105      	bne.n	8005b82 <__libc_init_array+0x2e>
 8005b76:	bd70      	pop	{r4, r5, r6, pc}
 8005b78:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b7c:	4798      	blx	r3
 8005b7e:	3601      	adds	r6, #1
 8005b80:	e7ee      	b.n	8005b60 <__libc_init_array+0xc>
 8005b82:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b86:	4798      	blx	r3
 8005b88:	3601      	adds	r6, #1
 8005b8a:	e7f2      	b.n	8005b72 <__libc_init_array+0x1e>
 8005b8c:	0800b86c 	.word	0x0800b86c
 8005b90:	0800b86c 	.word	0x0800b86c
 8005b94:	0800b86c 	.word	0x0800b86c
 8005b98:	0800b870 	.word	0x0800b870

08005b9c <malloc>:
 8005b9c:	4b02      	ldr	r3, [pc, #8]	; (8005ba8 <malloc+0xc>)
 8005b9e:	4601      	mov	r1, r0
 8005ba0:	6818      	ldr	r0, [r3, #0]
 8005ba2:	f000 b881 	b.w	8005ca8 <_malloc_r>
 8005ba6:	bf00      	nop
 8005ba8:	2000005c 	.word	0x2000005c

08005bac <free>:
 8005bac:	4b02      	ldr	r3, [pc, #8]	; (8005bb8 <free+0xc>)
 8005bae:	4601      	mov	r1, r0
 8005bb0:	6818      	ldr	r0, [r3, #0]
 8005bb2:	f000 b829 	b.w	8005c08 <_free_r>
 8005bb6:	bf00      	nop
 8005bb8:	2000005c 	.word	0x2000005c

08005bbc <memcpy>:
 8005bbc:	440a      	add	r2, r1
 8005bbe:	4291      	cmp	r1, r2
 8005bc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bc4:	d100      	bne.n	8005bc8 <memcpy+0xc>
 8005bc6:	4770      	bx	lr
 8005bc8:	b510      	push	{r4, lr}
 8005bca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bd2:	4291      	cmp	r1, r2
 8005bd4:	d1f9      	bne.n	8005bca <memcpy+0xe>
 8005bd6:	bd10      	pop	{r4, pc}

08005bd8 <memset>:
 8005bd8:	4402      	add	r2, r0
 8005bda:	4603      	mov	r3, r0
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d100      	bne.n	8005be2 <memset+0xa>
 8005be0:	4770      	bx	lr
 8005be2:	f803 1b01 	strb.w	r1, [r3], #1
 8005be6:	e7f9      	b.n	8005bdc <memset+0x4>

08005be8 <_calloc_r>:
 8005be8:	b513      	push	{r0, r1, r4, lr}
 8005bea:	434a      	muls	r2, r1
 8005bec:	4611      	mov	r1, r2
 8005bee:	9201      	str	r2, [sp, #4]
 8005bf0:	f000 f85a 	bl	8005ca8 <_malloc_r>
 8005bf4:	4604      	mov	r4, r0
 8005bf6:	b118      	cbz	r0, 8005c00 <_calloc_r+0x18>
 8005bf8:	9a01      	ldr	r2, [sp, #4]
 8005bfa:	2100      	movs	r1, #0
 8005bfc:	f7ff ffec 	bl	8005bd8 <memset>
 8005c00:	4620      	mov	r0, r4
 8005c02:	b002      	add	sp, #8
 8005c04:	bd10      	pop	{r4, pc}
	...

08005c08 <_free_r>:
 8005c08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c0a:	2900      	cmp	r1, #0
 8005c0c:	d048      	beq.n	8005ca0 <_free_r+0x98>
 8005c0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c12:	9001      	str	r0, [sp, #4]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f1a1 0404 	sub.w	r4, r1, #4
 8005c1a:	bfb8      	it	lt
 8005c1c:	18e4      	addlt	r4, r4, r3
 8005c1e:	f003 fc3b 	bl	8009498 <__malloc_lock>
 8005c22:	4a20      	ldr	r2, [pc, #128]	; (8005ca4 <_free_r+0x9c>)
 8005c24:	9801      	ldr	r0, [sp, #4]
 8005c26:	6813      	ldr	r3, [r2, #0]
 8005c28:	4615      	mov	r5, r2
 8005c2a:	b933      	cbnz	r3, 8005c3a <_free_r+0x32>
 8005c2c:	6063      	str	r3, [r4, #4]
 8005c2e:	6014      	str	r4, [r2, #0]
 8005c30:	b003      	add	sp, #12
 8005c32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c36:	f003 bc35 	b.w	80094a4 <__malloc_unlock>
 8005c3a:	42a3      	cmp	r3, r4
 8005c3c:	d90b      	bls.n	8005c56 <_free_r+0x4e>
 8005c3e:	6821      	ldr	r1, [r4, #0]
 8005c40:	1862      	adds	r2, r4, r1
 8005c42:	4293      	cmp	r3, r2
 8005c44:	bf04      	itt	eq
 8005c46:	681a      	ldreq	r2, [r3, #0]
 8005c48:	685b      	ldreq	r3, [r3, #4]
 8005c4a:	6063      	str	r3, [r4, #4]
 8005c4c:	bf04      	itt	eq
 8005c4e:	1852      	addeq	r2, r2, r1
 8005c50:	6022      	streq	r2, [r4, #0]
 8005c52:	602c      	str	r4, [r5, #0]
 8005c54:	e7ec      	b.n	8005c30 <_free_r+0x28>
 8005c56:	461a      	mov	r2, r3
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	b10b      	cbz	r3, 8005c60 <_free_r+0x58>
 8005c5c:	42a3      	cmp	r3, r4
 8005c5e:	d9fa      	bls.n	8005c56 <_free_r+0x4e>
 8005c60:	6811      	ldr	r1, [r2, #0]
 8005c62:	1855      	adds	r5, r2, r1
 8005c64:	42a5      	cmp	r5, r4
 8005c66:	d10b      	bne.n	8005c80 <_free_r+0x78>
 8005c68:	6824      	ldr	r4, [r4, #0]
 8005c6a:	4421      	add	r1, r4
 8005c6c:	1854      	adds	r4, r2, r1
 8005c6e:	42a3      	cmp	r3, r4
 8005c70:	6011      	str	r1, [r2, #0]
 8005c72:	d1dd      	bne.n	8005c30 <_free_r+0x28>
 8005c74:	681c      	ldr	r4, [r3, #0]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	6053      	str	r3, [r2, #4]
 8005c7a:	4421      	add	r1, r4
 8005c7c:	6011      	str	r1, [r2, #0]
 8005c7e:	e7d7      	b.n	8005c30 <_free_r+0x28>
 8005c80:	d902      	bls.n	8005c88 <_free_r+0x80>
 8005c82:	230c      	movs	r3, #12
 8005c84:	6003      	str	r3, [r0, #0]
 8005c86:	e7d3      	b.n	8005c30 <_free_r+0x28>
 8005c88:	6825      	ldr	r5, [r4, #0]
 8005c8a:	1961      	adds	r1, r4, r5
 8005c8c:	428b      	cmp	r3, r1
 8005c8e:	bf04      	itt	eq
 8005c90:	6819      	ldreq	r1, [r3, #0]
 8005c92:	685b      	ldreq	r3, [r3, #4]
 8005c94:	6063      	str	r3, [r4, #4]
 8005c96:	bf04      	itt	eq
 8005c98:	1949      	addeq	r1, r1, r5
 8005c9a:	6021      	streq	r1, [r4, #0]
 8005c9c:	6054      	str	r4, [r2, #4]
 8005c9e:	e7c7      	b.n	8005c30 <_free_r+0x28>
 8005ca0:	b003      	add	sp, #12
 8005ca2:	bd30      	pop	{r4, r5, pc}
 8005ca4:	20000374 	.word	0x20000374

08005ca8 <_malloc_r>:
 8005ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005caa:	1ccd      	adds	r5, r1, #3
 8005cac:	f025 0503 	bic.w	r5, r5, #3
 8005cb0:	3508      	adds	r5, #8
 8005cb2:	2d0c      	cmp	r5, #12
 8005cb4:	bf38      	it	cc
 8005cb6:	250c      	movcc	r5, #12
 8005cb8:	2d00      	cmp	r5, #0
 8005cba:	4606      	mov	r6, r0
 8005cbc:	db01      	blt.n	8005cc2 <_malloc_r+0x1a>
 8005cbe:	42a9      	cmp	r1, r5
 8005cc0:	d903      	bls.n	8005cca <_malloc_r+0x22>
 8005cc2:	230c      	movs	r3, #12
 8005cc4:	6033      	str	r3, [r6, #0]
 8005cc6:	2000      	movs	r0, #0
 8005cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cca:	f003 fbe5 	bl	8009498 <__malloc_lock>
 8005cce:	4921      	ldr	r1, [pc, #132]	; (8005d54 <_malloc_r+0xac>)
 8005cd0:	680a      	ldr	r2, [r1, #0]
 8005cd2:	4614      	mov	r4, r2
 8005cd4:	b99c      	cbnz	r4, 8005cfe <_malloc_r+0x56>
 8005cd6:	4f20      	ldr	r7, [pc, #128]	; (8005d58 <_malloc_r+0xb0>)
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	b923      	cbnz	r3, 8005ce6 <_malloc_r+0x3e>
 8005cdc:	4621      	mov	r1, r4
 8005cde:	4630      	mov	r0, r6
 8005ce0:	f000 ff44 	bl	8006b6c <_sbrk_r>
 8005ce4:	6038      	str	r0, [r7, #0]
 8005ce6:	4629      	mov	r1, r5
 8005ce8:	4630      	mov	r0, r6
 8005cea:	f000 ff3f 	bl	8006b6c <_sbrk_r>
 8005cee:	1c43      	adds	r3, r0, #1
 8005cf0:	d123      	bne.n	8005d3a <_malloc_r+0x92>
 8005cf2:	230c      	movs	r3, #12
 8005cf4:	6033      	str	r3, [r6, #0]
 8005cf6:	4630      	mov	r0, r6
 8005cf8:	f003 fbd4 	bl	80094a4 <__malloc_unlock>
 8005cfc:	e7e3      	b.n	8005cc6 <_malloc_r+0x1e>
 8005cfe:	6823      	ldr	r3, [r4, #0]
 8005d00:	1b5b      	subs	r3, r3, r5
 8005d02:	d417      	bmi.n	8005d34 <_malloc_r+0x8c>
 8005d04:	2b0b      	cmp	r3, #11
 8005d06:	d903      	bls.n	8005d10 <_malloc_r+0x68>
 8005d08:	6023      	str	r3, [r4, #0]
 8005d0a:	441c      	add	r4, r3
 8005d0c:	6025      	str	r5, [r4, #0]
 8005d0e:	e004      	b.n	8005d1a <_malloc_r+0x72>
 8005d10:	6863      	ldr	r3, [r4, #4]
 8005d12:	42a2      	cmp	r2, r4
 8005d14:	bf0c      	ite	eq
 8005d16:	600b      	streq	r3, [r1, #0]
 8005d18:	6053      	strne	r3, [r2, #4]
 8005d1a:	4630      	mov	r0, r6
 8005d1c:	f003 fbc2 	bl	80094a4 <__malloc_unlock>
 8005d20:	f104 000b 	add.w	r0, r4, #11
 8005d24:	1d23      	adds	r3, r4, #4
 8005d26:	f020 0007 	bic.w	r0, r0, #7
 8005d2a:	1ac2      	subs	r2, r0, r3
 8005d2c:	d0cc      	beq.n	8005cc8 <_malloc_r+0x20>
 8005d2e:	1a1b      	subs	r3, r3, r0
 8005d30:	50a3      	str	r3, [r4, r2]
 8005d32:	e7c9      	b.n	8005cc8 <_malloc_r+0x20>
 8005d34:	4622      	mov	r2, r4
 8005d36:	6864      	ldr	r4, [r4, #4]
 8005d38:	e7cc      	b.n	8005cd4 <_malloc_r+0x2c>
 8005d3a:	1cc4      	adds	r4, r0, #3
 8005d3c:	f024 0403 	bic.w	r4, r4, #3
 8005d40:	42a0      	cmp	r0, r4
 8005d42:	d0e3      	beq.n	8005d0c <_malloc_r+0x64>
 8005d44:	1a21      	subs	r1, r4, r0
 8005d46:	4630      	mov	r0, r6
 8005d48:	f000 ff10 	bl	8006b6c <_sbrk_r>
 8005d4c:	3001      	adds	r0, #1
 8005d4e:	d1dd      	bne.n	8005d0c <_malloc_r+0x64>
 8005d50:	e7cf      	b.n	8005cf2 <_malloc_r+0x4a>
 8005d52:	bf00      	nop
 8005d54:	20000374 	.word	0x20000374
 8005d58:	20000378 	.word	0x20000378

08005d5c <__cvt>:
 8005d5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d60:	ec55 4b10 	vmov	r4, r5, d0
 8005d64:	2d00      	cmp	r5, #0
 8005d66:	460e      	mov	r6, r1
 8005d68:	4619      	mov	r1, r3
 8005d6a:	462b      	mov	r3, r5
 8005d6c:	bfbb      	ittet	lt
 8005d6e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005d72:	461d      	movlt	r5, r3
 8005d74:	2300      	movge	r3, #0
 8005d76:	232d      	movlt	r3, #45	; 0x2d
 8005d78:	700b      	strb	r3, [r1, #0]
 8005d7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d7c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005d80:	4691      	mov	r9, r2
 8005d82:	f023 0820 	bic.w	r8, r3, #32
 8005d86:	bfbc      	itt	lt
 8005d88:	4622      	movlt	r2, r4
 8005d8a:	4614      	movlt	r4, r2
 8005d8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d90:	d005      	beq.n	8005d9e <__cvt+0x42>
 8005d92:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005d96:	d100      	bne.n	8005d9a <__cvt+0x3e>
 8005d98:	3601      	adds	r6, #1
 8005d9a:	2102      	movs	r1, #2
 8005d9c:	e000      	b.n	8005da0 <__cvt+0x44>
 8005d9e:	2103      	movs	r1, #3
 8005da0:	ab03      	add	r3, sp, #12
 8005da2:	9301      	str	r3, [sp, #4]
 8005da4:	ab02      	add	r3, sp, #8
 8005da6:	9300      	str	r3, [sp, #0]
 8005da8:	ec45 4b10 	vmov	d0, r4, r5
 8005dac:	4653      	mov	r3, sl
 8005dae:	4632      	mov	r2, r6
 8005db0:	f001 ffe2 	bl	8007d78 <_dtoa_r>
 8005db4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005db8:	4607      	mov	r7, r0
 8005dba:	d102      	bne.n	8005dc2 <__cvt+0x66>
 8005dbc:	f019 0f01 	tst.w	r9, #1
 8005dc0:	d022      	beq.n	8005e08 <__cvt+0xac>
 8005dc2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005dc6:	eb07 0906 	add.w	r9, r7, r6
 8005dca:	d110      	bne.n	8005dee <__cvt+0x92>
 8005dcc:	783b      	ldrb	r3, [r7, #0]
 8005dce:	2b30      	cmp	r3, #48	; 0x30
 8005dd0:	d10a      	bne.n	8005de8 <__cvt+0x8c>
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	4620      	mov	r0, r4
 8005dd8:	4629      	mov	r1, r5
 8005dda:	f7fa fe75 	bl	8000ac8 <__aeabi_dcmpeq>
 8005dde:	b918      	cbnz	r0, 8005de8 <__cvt+0x8c>
 8005de0:	f1c6 0601 	rsb	r6, r6, #1
 8005de4:	f8ca 6000 	str.w	r6, [sl]
 8005de8:	f8da 3000 	ldr.w	r3, [sl]
 8005dec:	4499      	add	r9, r3
 8005dee:	2200      	movs	r2, #0
 8005df0:	2300      	movs	r3, #0
 8005df2:	4620      	mov	r0, r4
 8005df4:	4629      	mov	r1, r5
 8005df6:	f7fa fe67 	bl	8000ac8 <__aeabi_dcmpeq>
 8005dfa:	b108      	cbz	r0, 8005e00 <__cvt+0xa4>
 8005dfc:	f8cd 900c 	str.w	r9, [sp, #12]
 8005e00:	2230      	movs	r2, #48	; 0x30
 8005e02:	9b03      	ldr	r3, [sp, #12]
 8005e04:	454b      	cmp	r3, r9
 8005e06:	d307      	bcc.n	8005e18 <__cvt+0xbc>
 8005e08:	9b03      	ldr	r3, [sp, #12]
 8005e0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e0c:	1bdb      	subs	r3, r3, r7
 8005e0e:	4638      	mov	r0, r7
 8005e10:	6013      	str	r3, [r2, #0]
 8005e12:	b004      	add	sp, #16
 8005e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e18:	1c59      	adds	r1, r3, #1
 8005e1a:	9103      	str	r1, [sp, #12]
 8005e1c:	701a      	strb	r2, [r3, #0]
 8005e1e:	e7f0      	b.n	8005e02 <__cvt+0xa6>

08005e20 <__exponent>:
 8005e20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e22:	4603      	mov	r3, r0
 8005e24:	2900      	cmp	r1, #0
 8005e26:	bfb8      	it	lt
 8005e28:	4249      	neglt	r1, r1
 8005e2a:	f803 2b02 	strb.w	r2, [r3], #2
 8005e2e:	bfb4      	ite	lt
 8005e30:	222d      	movlt	r2, #45	; 0x2d
 8005e32:	222b      	movge	r2, #43	; 0x2b
 8005e34:	2909      	cmp	r1, #9
 8005e36:	7042      	strb	r2, [r0, #1]
 8005e38:	dd2a      	ble.n	8005e90 <__exponent+0x70>
 8005e3a:	f10d 0407 	add.w	r4, sp, #7
 8005e3e:	46a4      	mov	ip, r4
 8005e40:	270a      	movs	r7, #10
 8005e42:	46a6      	mov	lr, r4
 8005e44:	460a      	mov	r2, r1
 8005e46:	fb91 f6f7 	sdiv	r6, r1, r7
 8005e4a:	fb07 1516 	mls	r5, r7, r6, r1
 8005e4e:	3530      	adds	r5, #48	; 0x30
 8005e50:	2a63      	cmp	r2, #99	; 0x63
 8005e52:	f104 34ff 	add.w	r4, r4, #4294967295
 8005e56:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005e5a:	4631      	mov	r1, r6
 8005e5c:	dcf1      	bgt.n	8005e42 <__exponent+0x22>
 8005e5e:	3130      	adds	r1, #48	; 0x30
 8005e60:	f1ae 0502 	sub.w	r5, lr, #2
 8005e64:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005e68:	1c44      	adds	r4, r0, #1
 8005e6a:	4629      	mov	r1, r5
 8005e6c:	4561      	cmp	r1, ip
 8005e6e:	d30a      	bcc.n	8005e86 <__exponent+0x66>
 8005e70:	f10d 0209 	add.w	r2, sp, #9
 8005e74:	eba2 020e 	sub.w	r2, r2, lr
 8005e78:	4565      	cmp	r5, ip
 8005e7a:	bf88      	it	hi
 8005e7c:	2200      	movhi	r2, #0
 8005e7e:	4413      	add	r3, r2
 8005e80:	1a18      	subs	r0, r3, r0
 8005e82:	b003      	add	sp, #12
 8005e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e8a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005e8e:	e7ed      	b.n	8005e6c <__exponent+0x4c>
 8005e90:	2330      	movs	r3, #48	; 0x30
 8005e92:	3130      	adds	r1, #48	; 0x30
 8005e94:	7083      	strb	r3, [r0, #2]
 8005e96:	70c1      	strb	r1, [r0, #3]
 8005e98:	1d03      	adds	r3, r0, #4
 8005e9a:	e7f1      	b.n	8005e80 <__exponent+0x60>

08005e9c <_printf_float>:
 8005e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea0:	ed2d 8b02 	vpush	{d8}
 8005ea4:	b08d      	sub	sp, #52	; 0x34
 8005ea6:	460c      	mov	r4, r1
 8005ea8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005eac:	4616      	mov	r6, r2
 8005eae:	461f      	mov	r7, r3
 8005eb0:	4605      	mov	r5, r0
 8005eb2:	f003 fa73 	bl	800939c <_localeconv_r>
 8005eb6:	f8d0 a000 	ldr.w	sl, [r0]
 8005eba:	4650      	mov	r0, sl
 8005ebc:	f7fa f988 	bl	80001d0 <strlen>
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	930a      	str	r3, [sp, #40]	; 0x28
 8005ec4:	6823      	ldr	r3, [r4, #0]
 8005ec6:	9305      	str	r3, [sp, #20]
 8005ec8:	f8d8 3000 	ldr.w	r3, [r8]
 8005ecc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005ed0:	3307      	adds	r3, #7
 8005ed2:	f023 0307 	bic.w	r3, r3, #7
 8005ed6:	f103 0208 	add.w	r2, r3, #8
 8005eda:	f8c8 2000 	str.w	r2, [r8]
 8005ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005ee6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005eea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005eee:	9307      	str	r3, [sp, #28]
 8005ef0:	f8cd 8018 	str.w	r8, [sp, #24]
 8005ef4:	ee08 0a10 	vmov	s16, r0
 8005ef8:	4b9f      	ldr	r3, [pc, #636]	; (8006178 <_printf_float+0x2dc>)
 8005efa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005efe:	f04f 32ff 	mov.w	r2, #4294967295
 8005f02:	f7fa fe13 	bl	8000b2c <__aeabi_dcmpun>
 8005f06:	bb88      	cbnz	r0, 8005f6c <_printf_float+0xd0>
 8005f08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f0c:	4b9a      	ldr	r3, [pc, #616]	; (8006178 <_printf_float+0x2dc>)
 8005f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f12:	f7fa fded 	bl	8000af0 <__aeabi_dcmple>
 8005f16:	bb48      	cbnz	r0, 8005f6c <_printf_float+0xd0>
 8005f18:	2200      	movs	r2, #0
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	4640      	mov	r0, r8
 8005f1e:	4649      	mov	r1, r9
 8005f20:	f7fa fddc 	bl	8000adc <__aeabi_dcmplt>
 8005f24:	b110      	cbz	r0, 8005f2c <_printf_float+0x90>
 8005f26:	232d      	movs	r3, #45	; 0x2d
 8005f28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f2c:	4b93      	ldr	r3, [pc, #588]	; (800617c <_printf_float+0x2e0>)
 8005f2e:	4894      	ldr	r0, [pc, #592]	; (8006180 <_printf_float+0x2e4>)
 8005f30:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005f34:	bf94      	ite	ls
 8005f36:	4698      	movls	r8, r3
 8005f38:	4680      	movhi	r8, r0
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	6123      	str	r3, [r4, #16]
 8005f3e:	9b05      	ldr	r3, [sp, #20]
 8005f40:	f023 0204 	bic.w	r2, r3, #4
 8005f44:	6022      	str	r2, [r4, #0]
 8005f46:	f04f 0900 	mov.w	r9, #0
 8005f4a:	9700      	str	r7, [sp, #0]
 8005f4c:	4633      	mov	r3, r6
 8005f4e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005f50:	4621      	mov	r1, r4
 8005f52:	4628      	mov	r0, r5
 8005f54:	f000 f9d8 	bl	8006308 <_printf_common>
 8005f58:	3001      	adds	r0, #1
 8005f5a:	f040 8090 	bne.w	800607e <_printf_float+0x1e2>
 8005f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f62:	b00d      	add	sp, #52	; 0x34
 8005f64:	ecbd 8b02 	vpop	{d8}
 8005f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f6c:	4642      	mov	r2, r8
 8005f6e:	464b      	mov	r3, r9
 8005f70:	4640      	mov	r0, r8
 8005f72:	4649      	mov	r1, r9
 8005f74:	f7fa fdda 	bl	8000b2c <__aeabi_dcmpun>
 8005f78:	b140      	cbz	r0, 8005f8c <_printf_float+0xf0>
 8005f7a:	464b      	mov	r3, r9
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	bfbc      	itt	lt
 8005f80:	232d      	movlt	r3, #45	; 0x2d
 8005f82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005f86:	487f      	ldr	r0, [pc, #508]	; (8006184 <_printf_float+0x2e8>)
 8005f88:	4b7f      	ldr	r3, [pc, #508]	; (8006188 <_printf_float+0x2ec>)
 8005f8a:	e7d1      	b.n	8005f30 <_printf_float+0x94>
 8005f8c:	6863      	ldr	r3, [r4, #4]
 8005f8e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005f92:	9206      	str	r2, [sp, #24]
 8005f94:	1c5a      	adds	r2, r3, #1
 8005f96:	d13f      	bne.n	8006018 <_printf_float+0x17c>
 8005f98:	2306      	movs	r3, #6
 8005f9a:	6063      	str	r3, [r4, #4]
 8005f9c:	9b05      	ldr	r3, [sp, #20]
 8005f9e:	6861      	ldr	r1, [r4, #4]
 8005fa0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	9303      	str	r3, [sp, #12]
 8005fa8:	ab0a      	add	r3, sp, #40	; 0x28
 8005faa:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005fae:	ab09      	add	r3, sp, #36	; 0x24
 8005fb0:	ec49 8b10 	vmov	d0, r8, r9
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	6022      	str	r2, [r4, #0]
 8005fb8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005fbc:	4628      	mov	r0, r5
 8005fbe:	f7ff fecd 	bl	8005d5c <__cvt>
 8005fc2:	9b06      	ldr	r3, [sp, #24]
 8005fc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005fc6:	2b47      	cmp	r3, #71	; 0x47
 8005fc8:	4680      	mov	r8, r0
 8005fca:	d108      	bne.n	8005fde <_printf_float+0x142>
 8005fcc:	1cc8      	adds	r0, r1, #3
 8005fce:	db02      	blt.n	8005fd6 <_printf_float+0x13a>
 8005fd0:	6863      	ldr	r3, [r4, #4]
 8005fd2:	4299      	cmp	r1, r3
 8005fd4:	dd41      	ble.n	800605a <_printf_float+0x1be>
 8005fd6:	f1ab 0b02 	sub.w	fp, fp, #2
 8005fda:	fa5f fb8b 	uxtb.w	fp, fp
 8005fde:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005fe2:	d820      	bhi.n	8006026 <_printf_float+0x18a>
 8005fe4:	3901      	subs	r1, #1
 8005fe6:	465a      	mov	r2, fp
 8005fe8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005fec:	9109      	str	r1, [sp, #36]	; 0x24
 8005fee:	f7ff ff17 	bl	8005e20 <__exponent>
 8005ff2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ff4:	1813      	adds	r3, r2, r0
 8005ff6:	2a01      	cmp	r2, #1
 8005ff8:	4681      	mov	r9, r0
 8005ffa:	6123      	str	r3, [r4, #16]
 8005ffc:	dc02      	bgt.n	8006004 <_printf_float+0x168>
 8005ffe:	6822      	ldr	r2, [r4, #0]
 8006000:	07d2      	lsls	r2, r2, #31
 8006002:	d501      	bpl.n	8006008 <_printf_float+0x16c>
 8006004:	3301      	adds	r3, #1
 8006006:	6123      	str	r3, [r4, #16]
 8006008:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800600c:	2b00      	cmp	r3, #0
 800600e:	d09c      	beq.n	8005f4a <_printf_float+0xae>
 8006010:	232d      	movs	r3, #45	; 0x2d
 8006012:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006016:	e798      	b.n	8005f4a <_printf_float+0xae>
 8006018:	9a06      	ldr	r2, [sp, #24]
 800601a:	2a47      	cmp	r2, #71	; 0x47
 800601c:	d1be      	bne.n	8005f9c <_printf_float+0x100>
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1bc      	bne.n	8005f9c <_printf_float+0x100>
 8006022:	2301      	movs	r3, #1
 8006024:	e7b9      	b.n	8005f9a <_printf_float+0xfe>
 8006026:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800602a:	d118      	bne.n	800605e <_printf_float+0x1c2>
 800602c:	2900      	cmp	r1, #0
 800602e:	6863      	ldr	r3, [r4, #4]
 8006030:	dd0b      	ble.n	800604a <_printf_float+0x1ae>
 8006032:	6121      	str	r1, [r4, #16]
 8006034:	b913      	cbnz	r3, 800603c <_printf_float+0x1a0>
 8006036:	6822      	ldr	r2, [r4, #0]
 8006038:	07d0      	lsls	r0, r2, #31
 800603a:	d502      	bpl.n	8006042 <_printf_float+0x1a6>
 800603c:	3301      	adds	r3, #1
 800603e:	440b      	add	r3, r1
 8006040:	6123      	str	r3, [r4, #16]
 8006042:	65a1      	str	r1, [r4, #88]	; 0x58
 8006044:	f04f 0900 	mov.w	r9, #0
 8006048:	e7de      	b.n	8006008 <_printf_float+0x16c>
 800604a:	b913      	cbnz	r3, 8006052 <_printf_float+0x1b6>
 800604c:	6822      	ldr	r2, [r4, #0]
 800604e:	07d2      	lsls	r2, r2, #31
 8006050:	d501      	bpl.n	8006056 <_printf_float+0x1ba>
 8006052:	3302      	adds	r3, #2
 8006054:	e7f4      	b.n	8006040 <_printf_float+0x1a4>
 8006056:	2301      	movs	r3, #1
 8006058:	e7f2      	b.n	8006040 <_printf_float+0x1a4>
 800605a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800605e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006060:	4299      	cmp	r1, r3
 8006062:	db05      	blt.n	8006070 <_printf_float+0x1d4>
 8006064:	6823      	ldr	r3, [r4, #0]
 8006066:	6121      	str	r1, [r4, #16]
 8006068:	07d8      	lsls	r0, r3, #31
 800606a:	d5ea      	bpl.n	8006042 <_printf_float+0x1a6>
 800606c:	1c4b      	adds	r3, r1, #1
 800606e:	e7e7      	b.n	8006040 <_printf_float+0x1a4>
 8006070:	2900      	cmp	r1, #0
 8006072:	bfd4      	ite	le
 8006074:	f1c1 0202 	rsble	r2, r1, #2
 8006078:	2201      	movgt	r2, #1
 800607a:	4413      	add	r3, r2
 800607c:	e7e0      	b.n	8006040 <_printf_float+0x1a4>
 800607e:	6823      	ldr	r3, [r4, #0]
 8006080:	055a      	lsls	r2, r3, #21
 8006082:	d407      	bmi.n	8006094 <_printf_float+0x1f8>
 8006084:	6923      	ldr	r3, [r4, #16]
 8006086:	4642      	mov	r2, r8
 8006088:	4631      	mov	r1, r6
 800608a:	4628      	mov	r0, r5
 800608c:	47b8      	blx	r7
 800608e:	3001      	adds	r0, #1
 8006090:	d12c      	bne.n	80060ec <_printf_float+0x250>
 8006092:	e764      	b.n	8005f5e <_printf_float+0xc2>
 8006094:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006098:	f240 80e0 	bls.w	800625c <_printf_float+0x3c0>
 800609c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80060a0:	2200      	movs	r2, #0
 80060a2:	2300      	movs	r3, #0
 80060a4:	f7fa fd10 	bl	8000ac8 <__aeabi_dcmpeq>
 80060a8:	2800      	cmp	r0, #0
 80060aa:	d034      	beq.n	8006116 <_printf_float+0x27a>
 80060ac:	4a37      	ldr	r2, [pc, #220]	; (800618c <_printf_float+0x2f0>)
 80060ae:	2301      	movs	r3, #1
 80060b0:	4631      	mov	r1, r6
 80060b2:	4628      	mov	r0, r5
 80060b4:	47b8      	blx	r7
 80060b6:	3001      	adds	r0, #1
 80060b8:	f43f af51 	beq.w	8005f5e <_printf_float+0xc2>
 80060bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060c0:	429a      	cmp	r2, r3
 80060c2:	db02      	blt.n	80060ca <_printf_float+0x22e>
 80060c4:	6823      	ldr	r3, [r4, #0]
 80060c6:	07d8      	lsls	r0, r3, #31
 80060c8:	d510      	bpl.n	80060ec <_printf_float+0x250>
 80060ca:	ee18 3a10 	vmov	r3, s16
 80060ce:	4652      	mov	r2, sl
 80060d0:	4631      	mov	r1, r6
 80060d2:	4628      	mov	r0, r5
 80060d4:	47b8      	blx	r7
 80060d6:	3001      	adds	r0, #1
 80060d8:	f43f af41 	beq.w	8005f5e <_printf_float+0xc2>
 80060dc:	f04f 0800 	mov.w	r8, #0
 80060e0:	f104 091a 	add.w	r9, r4, #26
 80060e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060e6:	3b01      	subs	r3, #1
 80060e8:	4543      	cmp	r3, r8
 80060ea:	dc09      	bgt.n	8006100 <_printf_float+0x264>
 80060ec:	6823      	ldr	r3, [r4, #0]
 80060ee:	079b      	lsls	r3, r3, #30
 80060f0:	f100 8105 	bmi.w	80062fe <_printf_float+0x462>
 80060f4:	68e0      	ldr	r0, [r4, #12]
 80060f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060f8:	4298      	cmp	r0, r3
 80060fa:	bfb8      	it	lt
 80060fc:	4618      	movlt	r0, r3
 80060fe:	e730      	b.n	8005f62 <_printf_float+0xc6>
 8006100:	2301      	movs	r3, #1
 8006102:	464a      	mov	r2, r9
 8006104:	4631      	mov	r1, r6
 8006106:	4628      	mov	r0, r5
 8006108:	47b8      	blx	r7
 800610a:	3001      	adds	r0, #1
 800610c:	f43f af27 	beq.w	8005f5e <_printf_float+0xc2>
 8006110:	f108 0801 	add.w	r8, r8, #1
 8006114:	e7e6      	b.n	80060e4 <_printf_float+0x248>
 8006116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006118:	2b00      	cmp	r3, #0
 800611a:	dc39      	bgt.n	8006190 <_printf_float+0x2f4>
 800611c:	4a1b      	ldr	r2, [pc, #108]	; (800618c <_printf_float+0x2f0>)
 800611e:	2301      	movs	r3, #1
 8006120:	4631      	mov	r1, r6
 8006122:	4628      	mov	r0, r5
 8006124:	47b8      	blx	r7
 8006126:	3001      	adds	r0, #1
 8006128:	f43f af19 	beq.w	8005f5e <_printf_float+0xc2>
 800612c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006130:	4313      	orrs	r3, r2
 8006132:	d102      	bne.n	800613a <_printf_float+0x29e>
 8006134:	6823      	ldr	r3, [r4, #0]
 8006136:	07d9      	lsls	r1, r3, #31
 8006138:	d5d8      	bpl.n	80060ec <_printf_float+0x250>
 800613a:	ee18 3a10 	vmov	r3, s16
 800613e:	4652      	mov	r2, sl
 8006140:	4631      	mov	r1, r6
 8006142:	4628      	mov	r0, r5
 8006144:	47b8      	blx	r7
 8006146:	3001      	adds	r0, #1
 8006148:	f43f af09 	beq.w	8005f5e <_printf_float+0xc2>
 800614c:	f04f 0900 	mov.w	r9, #0
 8006150:	f104 0a1a 	add.w	sl, r4, #26
 8006154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006156:	425b      	negs	r3, r3
 8006158:	454b      	cmp	r3, r9
 800615a:	dc01      	bgt.n	8006160 <_printf_float+0x2c4>
 800615c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800615e:	e792      	b.n	8006086 <_printf_float+0x1ea>
 8006160:	2301      	movs	r3, #1
 8006162:	4652      	mov	r2, sl
 8006164:	4631      	mov	r1, r6
 8006166:	4628      	mov	r0, r5
 8006168:	47b8      	blx	r7
 800616a:	3001      	adds	r0, #1
 800616c:	f43f aef7 	beq.w	8005f5e <_printf_float+0xc2>
 8006170:	f109 0901 	add.w	r9, r9, #1
 8006174:	e7ee      	b.n	8006154 <_printf_float+0x2b8>
 8006176:	bf00      	nop
 8006178:	7fefffff 	.word	0x7fefffff
 800617c:	0800b3b0 	.word	0x0800b3b0
 8006180:	0800b3b4 	.word	0x0800b3b4
 8006184:	0800b3bc 	.word	0x0800b3bc
 8006188:	0800b3b8 	.word	0x0800b3b8
 800618c:	0800b3c0 	.word	0x0800b3c0
 8006190:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006192:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006194:	429a      	cmp	r2, r3
 8006196:	bfa8      	it	ge
 8006198:	461a      	movge	r2, r3
 800619a:	2a00      	cmp	r2, #0
 800619c:	4691      	mov	r9, r2
 800619e:	dc37      	bgt.n	8006210 <_printf_float+0x374>
 80061a0:	f04f 0b00 	mov.w	fp, #0
 80061a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061a8:	f104 021a 	add.w	r2, r4, #26
 80061ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80061ae:	9305      	str	r3, [sp, #20]
 80061b0:	eba3 0309 	sub.w	r3, r3, r9
 80061b4:	455b      	cmp	r3, fp
 80061b6:	dc33      	bgt.n	8006220 <_printf_float+0x384>
 80061b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061bc:	429a      	cmp	r2, r3
 80061be:	db3b      	blt.n	8006238 <_printf_float+0x39c>
 80061c0:	6823      	ldr	r3, [r4, #0]
 80061c2:	07da      	lsls	r2, r3, #31
 80061c4:	d438      	bmi.n	8006238 <_printf_float+0x39c>
 80061c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061c8:	9b05      	ldr	r3, [sp, #20]
 80061ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	eba2 0901 	sub.w	r9, r2, r1
 80061d2:	4599      	cmp	r9, r3
 80061d4:	bfa8      	it	ge
 80061d6:	4699      	movge	r9, r3
 80061d8:	f1b9 0f00 	cmp.w	r9, #0
 80061dc:	dc35      	bgt.n	800624a <_printf_float+0x3ae>
 80061de:	f04f 0800 	mov.w	r8, #0
 80061e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061e6:	f104 0a1a 	add.w	sl, r4, #26
 80061ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061ee:	1a9b      	subs	r3, r3, r2
 80061f0:	eba3 0309 	sub.w	r3, r3, r9
 80061f4:	4543      	cmp	r3, r8
 80061f6:	f77f af79 	ble.w	80060ec <_printf_float+0x250>
 80061fa:	2301      	movs	r3, #1
 80061fc:	4652      	mov	r2, sl
 80061fe:	4631      	mov	r1, r6
 8006200:	4628      	mov	r0, r5
 8006202:	47b8      	blx	r7
 8006204:	3001      	adds	r0, #1
 8006206:	f43f aeaa 	beq.w	8005f5e <_printf_float+0xc2>
 800620a:	f108 0801 	add.w	r8, r8, #1
 800620e:	e7ec      	b.n	80061ea <_printf_float+0x34e>
 8006210:	4613      	mov	r3, r2
 8006212:	4631      	mov	r1, r6
 8006214:	4642      	mov	r2, r8
 8006216:	4628      	mov	r0, r5
 8006218:	47b8      	blx	r7
 800621a:	3001      	adds	r0, #1
 800621c:	d1c0      	bne.n	80061a0 <_printf_float+0x304>
 800621e:	e69e      	b.n	8005f5e <_printf_float+0xc2>
 8006220:	2301      	movs	r3, #1
 8006222:	4631      	mov	r1, r6
 8006224:	4628      	mov	r0, r5
 8006226:	9205      	str	r2, [sp, #20]
 8006228:	47b8      	blx	r7
 800622a:	3001      	adds	r0, #1
 800622c:	f43f ae97 	beq.w	8005f5e <_printf_float+0xc2>
 8006230:	9a05      	ldr	r2, [sp, #20]
 8006232:	f10b 0b01 	add.w	fp, fp, #1
 8006236:	e7b9      	b.n	80061ac <_printf_float+0x310>
 8006238:	ee18 3a10 	vmov	r3, s16
 800623c:	4652      	mov	r2, sl
 800623e:	4631      	mov	r1, r6
 8006240:	4628      	mov	r0, r5
 8006242:	47b8      	blx	r7
 8006244:	3001      	adds	r0, #1
 8006246:	d1be      	bne.n	80061c6 <_printf_float+0x32a>
 8006248:	e689      	b.n	8005f5e <_printf_float+0xc2>
 800624a:	9a05      	ldr	r2, [sp, #20]
 800624c:	464b      	mov	r3, r9
 800624e:	4442      	add	r2, r8
 8006250:	4631      	mov	r1, r6
 8006252:	4628      	mov	r0, r5
 8006254:	47b8      	blx	r7
 8006256:	3001      	adds	r0, #1
 8006258:	d1c1      	bne.n	80061de <_printf_float+0x342>
 800625a:	e680      	b.n	8005f5e <_printf_float+0xc2>
 800625c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800625e:	2a01      	cmp	r2, #1
 8006260:	dc01      	bgt.n	8006266 <_printf_float+0x3ca>
 8006262:	07db      	lsls	r3, r3, #31
 8006264:	d538      	bpl.n	80062d8 <_printf_float+0x43c>
 8006266:	2301      	movs	r3, #1
 8006268:	4642      	mov	r2, r8
 800626a:	4631      	mov	r1, r6
 800626c:	4628      	mov	r0, r5
 800626e:	47b8      	blx	r7
 8006270:	3001      	adds	r0, #1
 8006272:	f43f ae74 	beq.w	8005f5e <_printf_float+0xc2>
 8006276:	ee18 3a10 	vmov	r3, s16
 800627a:	4652      	mov	r2, sl
 800627c:	4631      	mov	r1, r6
 800627e:	4628      	mov	r0, r5
 8006280:	47b8      	blx	r7
 8006282:	3001      	adds	r0, #1
 8006284:	f43f ae6b 	beq.w	8005f5e <_printf_float+0xc2>
 8006288:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800628c:	2200      	movs	r2, #0
 800628e:	2300      	movs	r3, #0
 8006290:	f7fa fc1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006294:	b9d8      	cbnz	r0, 80062ce <_printf_float+0x432>
 8006296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006298:	f108 0201 	add.w	r2, r8, #1
 800629c:	3b01      	subs	r3, #1
 800629e:	4631      	mov	r1, r6
 80062a0:	4628      	mov	r0, r5
 80062a2:	47b8      	blx	r7
 80062a4:	3001      	adds	r0, #1
 80062a6:	d10e      	bne.n	80062c6 <_printf_float+0x42a>
 80062a8:	e659      	b.n	8005f5e <_printf_float+0xc2>
 80062aa:	2301      	movs	r3, #1
 80062ac:	4652      	mov	r2, sl
 80062ae:	4631      	mov	r1, r6
 80062b0:	4628      	mov	r0, r5
 80062b2:	47b8      	blx	r7
 80062b4:	3001      	adds	r0, #1
 80062b6:	f43f ae52 	beq.w	8005f5e <_printf_float+0xc2>
 80062ba:	f108 0801 	add.w	r8, r8, #1
 80062be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062c0:	3b01      	subs	r3, #1
 80062c2:	4543      	cmp	r3, r8
 80062c4:	dcf1      	bgt.n	80062aa <_printf_float+0x40e>
 80062c6:	464b      	mov	r3, r9
 80062c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80062cc:	e6dc      	b.n	8006088 <_printf_float+0x1ec>
 80062ce:	f04f 0800 	mov.w	r8, #0
 80062d2:	f104 0a1a 	add.w	sl, r4, #26
 80062d6:	e7f2      	b.n	80062be <_printf_float+0x422>
 80062d8:	2301      	movs	r3, #1
 80062da:	4642      	mov	r2, r8
 80062dc:	e7df      	b.n	800629e <_printf_float+0x402>
 80062de:	2301      	movs	r3, #1
 80062e0:	464a      	mov	r2, r9
 80062e2:	4631      	mov	r1, r6
 80062e4:	4628      	mov	r0, r5
 80062e6:	47b8      	blx	r7
 80062e8:	3001      	adds	r0, #1
 80062ea:	f43f ae38 	beq.w	8005f5e <_printf_float+0xc2>
 80062ee:	f108 0801 	add.w	r8, r8, #1
 80062f2:	68e3      	ldr	r3, [r4, #12]
 80062f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80062f6:	1a5b      	subs	r3, r3, r1
 80062f8:	4543      	cmp	r3, r8
 80062fa:	dcf0      	bgt.n	80062de <_printf_float+0x442>
 80062fc:	e6fa      	b.n	80060f4 <_printf_float+0x258>
 80062fe:	f04f 0800 	mov.w	r8, #0
 8006302:	f104 0919 	add.w	r9, r4, #25
 8006306:	e7f4      	b.n	80062f2 <_printf_float+0x456>

08006308 <_printf_common>:
 8006308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800630c:	4616      	mov	r6, r2
 800630e:	4699      	mov	r9, r3
 8006310:	688a      	ldr	r2, [r1, #8]
 8006312:	690b      	ldr	r3, [r1, #16]
 8006314:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006318:	4293      	cmp	r3, r2
 800631a:	bfb8      	it	lt
 800631c:	4613      	movlt	r3, r2
 800631e:	6033      	str	r3, [r6, #0]
 8006320:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006324:	4607      	mov	r7, r0
 8006326:	460c      	mov	r4, r1
 8006328:	b10a      	cbz	r2, 800632e <_printf_common+0x26>
 800632a:	3301      	adds	r3, #1
 800632c:	6033      	str	r3, [r6, #0]
 800632e:	6823      	ldr	r3, [r4, #0]
 8006330:	0699      	lsls	r1, r3, #26
 8006332:	bf42      	ittt	mi
 8006334:	6833      	ldrmi	r3, [r6, #0]
 8006336:	3302      	addmi	r3, #2
 8006338:	6033      	strmi	r3, [r6, #0]
 800633a:	6825      	ldr	r5, [r4, #0]
 800633c:	f015 0506 	ands.w	r5, r5, #6
 8006340:	d106      	bne.n	8006350 <_printf_common+0x48>
 8006342:	f104 0a19 	add.w	sl, r4, #25
 8006346:	68e3      	ldr	r3, [r4, #12]
 8006348:	6832      	ldr	r2, [r6, #0]
 800634a:	1a9b      	subs	r3, r3, r2
 800634c:	42ab      	cmp	r3, r5
 800634e:	dc26      	bgt.n	800639e <_printf_common+0x96>
 8006350:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006354:	1e13      	subs	r3, r2, #0
 8006356:	6822      	ldr	r2, [r4, #0]
 8006358:	bf18      	it	ne
 800635a:	2301      	movne	r3, #1
 800635c:	0692      	lsls	r2, r2, #26
 800635e:	d42b      	bmi.n	80063b8 <_printf_common+0xb0>
 8006360:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006364:	4649      	mov	r1, r9
 8006366:	4638      	mov	r0, r7
 8006368:	47c0      	blx	r8
 800636a:	3001      	adds	r0, #1
 800636c:	d01e      	beq.n	80063ac <_printf_common+0xa4>
 800636e:	6823      	ldr	r3, [r4, #0]
 8006370:	68e5      	ldr	r5, [r4, #12]
 8006372:	6832      	ldr	r2, [r6, #0]
 8006374:	f003 0306 	and.w	r3, r3, #6
 8006378:	2b04      	cmp	r3, #4
 800637a:	bf08      	it	eq
 800637c:	1aad      	subeq	r5, r5, r2
 800637e:	68a3      	ldr	r3, [r4, #8]
 8006380:	6922      	ldr	r2, [r4, #16]
 8006382:	bf0c      	ite	eq
 8006384:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006388:	2500      	movne	r5, #0
 800638a:	4293      	cmp	r3, r2
 800638c:	bfc4      	itt	gt
 800638e:	1a9b      	subgt	r3, r3, r2
 8006390:	18ed      	addgt	r5, r5, r3
 8006392:	2600      	movs	r6, #0
 8006394:	341a      	adds	r4, #26
 8006396:	42b5      	cmp	r5, r6
 8006398:	d11a      	bne.n	80063d0 <_printf_common+0xc8>
 800639a:	2000      	movs	r0, #0
 800639c:	e008      	b.n	80063b0 <_printf_common+0xa8>
 800639e:	2301      	movs	r3, #1
 80063a0:	4652      	mov	r2, sl
 80063a2:	4649      	mov	r1, r9
 80063a4:	4638      	mov	r0, r7
 80063a6:	47c0      	blx	r8
 80063a8:	3001      	adds	r0, #1
 80063aa:	d103      	bne.n	80063b4 <_printf_common+0xac>
 80063ac:	f04f 30ff 	mov.w	r0, #4294967295
 80063b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063b4:	3501      	adds	r5, #1
 80063b6:	e7c6      	b.n	8006346 <_printf_common+0x3e>
 80063b8:	18e1      	adds	r1, r4, r3
 80063ba:	1c5a      	adds	r2, r3, #1
 80063bc:	2030      	movs	r0, #48	; 0x30
 80063be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80063c2:	4422      	add	r2, r4
 80063c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063cc:	3302      	adds	r3, #2
 80063ce:	e7c7      	b.n	8006360 <_printf_common+0x58>
 80063d0:	2301      	movs	r3, #1
 80063d2:	4622      	mov	r2, r4
 80063d4:	4649      	mov	r1, r9
 80063d6:	4638      	mov	r0, r7
 80063d8:	47c0      	blx	r8
 80063da:	3001      	adds	r0, #1
 80063dc:	d0e6      	beq.n	80063ac <_printf_common+0xa4>
 80063de:	3601      	adds	r6, #1
 80063e0:	e7d9      	b.n	8006396 <_printf_common+0x8e>
	...

080063e4 <_printf_i>:
 80063e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063e8:	460c      	mov	r4, r1
 80063ea:	4691      	mov	r9, r2
 80063ec:	7e27      	ldrb	r7, [r4, #24]
 80063ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80063f0:	2f78      	cmp	r7, #120	; 0x78
 80063f2:	4680      	mov	r8, r0
 80063f4:	469a      	mov	sl, r3
 80063f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063fa:	d807      	bhi.n	800640c <_printf_i+0x28>
 80063fc:	2f62      	cmp	r7, #98	; 0x62
 80063fe:	d80a      	bhi.n	8006416 <_printf_i+0x32>
 8006400:	2f00      	cmp	r7, #0
 8006402:	f000 80d8 	beq.w	80065b6 <_printf_i+0x1d2>
 8006406:	2f58      	cmp	r7, #88	; 0x58
 8006408:	f000 80a3 	beq.w	8006552 <_printf_i+0x16e>
 800640c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006410:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006414:	e03a      	b.n	800648c <_printf_i+0xa8>
 8006416:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800641a:	2b15      	cmp	r3, #21
 800641c:	d8f6      	bhi.n	800640c <_printf_i+0x28>
 800641e:	a001      	add	r0, pc, #4	; (adr r0, 8006424 <_printf_i+0x40>)
 8006420:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006424:	0800647d 	.word	0x0800647d
 8006428:	08006491 	.word	0x08006491
 800642c:	0800640d 	.word	0x0800640d
 8006430:	0800640d 	.word	0x0800640d
 8006434:	0800640d 	.word	0x0800640d
 8006438:	0800640d 	.word	0x0800640d
 800643c:	08006491 	.word	0x08006491
 8006440:	0800640d 	.word	0x0800640d
 8006444:	0800640d 	.word	0x0800640d
 8006448:	0800640d 	.word	0x0800640d
 800644c:	0800640d 	.word	0x0800640d
 8006450:	0800659d 	.word	0x0800659d
 8006454:	080064c1 	.word	0x080064c1
 8006458:	0800657f 	.word	0x0800657f
 800645c:	0800640d 	.word	0x0800640d
 8006460:	0800640d 	.word	0x0800640d
 8006464:	080065bf 	.word	0x080065bf
 8006468:	0800640d 	.word	0x0800640d
 800646c:	080064c1 	.word	0x080064c1
 8006470:	0800640d 	.word	0x0800640d
 8006474:	0800640d 	.word	0x0800640d
 8006478:	08006587 	.word	0x08006587
 800647c:	680b      	ldr	r3, [r1, #0]
 800647e:	1d1a      	adds	r2, r3, #4
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	600a      	str	r2, [r1, #0]
 8006484:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006488:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800648c:	2301      	movs	r3, #1
 800648e:	e0a3      	b.n	80065d8 <_printf_i+0x1f4>
 8006490:	6825      	ldr	r5, [r4, #0]
 8006492:	6808      	ldr	r0, [r1, #0]
 8006494:	062e      	lsls	r6, r5, #24
 8006496:	f100 0304 	add.w	r3, r0, #4
 800649a:	d50a      	bpl.n	80064b2 <_printf_i+0xce>
 800649c:	6805      	ldr	r5, [r0, #0]
 800649e:	600b      	str	r3, [r1, #0]
 80064a0:	2d00      	cmp	r5, #0
 80064a2:	da03      	bge.n	80064ac <_printf_i+0xc8>
 80064a4:	232d      	movs	r3, #45	; 0x2d
 80064a6:	426d      	negs	r5, r5
 80064a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064ac:	485e      	ldr	r0, [pc, #376]	; (8006628 <_printf_i+0x244>)
 80064ae:	230a      	movs	r3, #10
 80064b0:	e019      	b.n	80064e6 <_printf_i+0x102>
 80064b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80064b6:	6805      	ldr	r5, [r0, #0]
 80064b8:	600b      	str	r3, [r1, #0]
 80064ba:	bf18      	it	ne
 80064bc:	b22d      	sxthne	r5, r5
 80064be:	e7ef      	b.n	80064a0 <_printf_i+0xbc>
 80064c0:	680b      	ldr	r3, [r1, #0]
 80064c2:	6825      	ldr	r5, [r4, #0]
 80064c4:	1d18      	adds	r0, r3, #4
 80064c6:	6008      	str	r0, [r1, #0]
 80064c8:	0628      	lsls	r0, r5, #24
 80064ca:	d501      	bpl.n	80064d0 <_printf_i+0xec>
 80064cc:	681d      	ldr	r5, [r3, #0]
 80064ce:	e002      	b.n	80064d6 <_printf_i+0xf2>
 80064d0:	0669      	lsls	r1, r5, #25
 80064d2:	d5fb      	bpl.n	80064cc <_printf_i+0xe8>
 80064d4:	881d      	ldrh	r5, [r3, #0]
 80064d6:	4854      	ldr	r0, [pc, #336]	; (8006628 <_printf_i+0x244>)
 80064d8:	2f6f      	cmp	r7, #111	; 0x6f
 80064da:	bf0c      	ite	eq
 80064dc:	2308      	moveq	r3, #8
 80064de:	230a      	movne	r3, #10
 80064e0:	2100      	movs	r1, #0
 80064e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064e6:	6866      	ldr	r6, [r4, #4]
 80064e8:	60a6      	str	r6, [r4, #8]
 80064ea:	2e00      	cmp	r6, #0
 80064ec:	bfa2      	ittt	ge
 80064ee:	6821      	ldrge	r1, [r4, #0]
 80064f0:	f021 0104 	bicge.w	r1, r1, #4
 80064f4:	6021      	strge	r1, [r4, #0]
 80064f6:	b90d      	cbnz	r5, 80064fc <_printf_i+0x118>
 80064f8:	2e00      	cmp	r6, #0
 80064fa:	d04d      	beq.n	8006598 <_printf_i+0x1b4>
 80064fc:	4616      	mov	r6, r2
 80064fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8006502:	fb03 5711 	mls	r7, r3, r1, r5
 8006506:	5dc7      	ldrb	r7, [r0, r7]
 8006508:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800650c:	462f      	mov	r7, r5
 800650e:	42bb      	cmp	r3, r7
 8006510:	460d      	mov	r5, r1
 8006512:	d9f4      	bls.n	80064fe <_printf_i+0x11a>
 8006514:	2b08      	cmp	r3, #8
 8006516:	d10b      	bne.n	8006530 <_printf_i+0x14c>
 8006518:	6823      	ldr	r3, [r4, #0]
 800651a:	07df      	lsls	r7, r3, #31
 800651c:	d508      	bpl.n	8006530 <_printf_i+0x14c>
 800651e:	6923      	ldr	r3, [r4, #16]
 8006520:	6861      	ldr	r1, [r4, #4]
 8006522:	4299      	cmp	r1, r3
 8006524:	bfde      	ittt	le
 8006526:	2330      	movle	r3, #48	; 0x30
 8006528:	f806 3c01 	strble.w	r3, [r6, #-1]
 800652c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006530:	1b92      	subs	r2, r2, r6
 8006532:	6122      	str	r2, [r4, #16]
 8006534:	f8cd a000 	str.w	sl, [sp]
 8006538:	464b      	mov	r3, r9
 800653a:	aa03      	add	r2, sp, #12
 800653c:	4621      	mov	r1, r4
 800653e:	4640      	mov	r0, r8
 8006540:	f7ff fee2 	bl	8006308 <_printf_common>
 8006544:	3001      	adds	r0, #1
 8006546:	d14c      	bne.n	80065e2 <_printf_i+0x1fe>
 8006548:	f04f 30ff 	mov.w	r0, #4294967295
 800654c:	b004      	add	sp, #16
 800654e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006552:	4835      	ldr	r0, [pc, #212]	; (8006628 <_printf_i+0x244>)
 8006554:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006558:	6823      	ldr	r3, [r4, #0]
 800655a:	680e      	ldr	r6, [r1, #0]
 800655c:	061f      	lsls	r7, r3, #24
 800655e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006562:	600e      	str	r6, [r1, #0]
 8006564:	d514      	bpl.n	8006590 <_printf_i+0x1ac>
 8006566:	07d9      	lsls	r1, r3, #31
 8006568:	bf44      	itt	mi
 800656a:	f043 0320 	orrmi.w	r3, r3, #32
 800656e:	6023      	strmi	r3, [r4, #0]
 8006570:	b91d      	cbnz	r5, 800657a <_printf_i+0x196>
 8006572:	6823      	ldr	r3, [r4, #0]
 8006574:	f023 0320 	bic.w	r3, r3, #32
 8006578:	6023      	str	r3, [r4, #0]
 800657a:	2310      	movs	r3, #16
 800657c:	e7b0      	b.n	80064e0 <_printf_i+0xfc>
 800657e:	6823      	ldr	r3, [r4, #0]
 8006580:	f043 0320 	orr.w	r3, r3, #32
 8006584:	6023      	str	r3, [r4, #0]
 8006586:	2378      	movs	r3, #120	; 0x78
 8006588:	4828      	ldr	r0, [pc, #160]	; (800662c <_printf_i+0x248>)
 800658a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800658e:	e7e3      	b.n	8006558 <_printf_i+0x174>
 8006590:	065e      	lsls	r6, r3, #25
 8006592:	bf48      	it	mi
 8006594:	b2ad      	uxthmi	r5, r5
 8006596:	e7e6      	b.n	8006566 <_printf_i+0x182>
 8006598:	4616      	mov	r6, r2
 800659a:	e7bb      	b.n	8006514 <_printf_i+0x130>
 800659c:	680b      	ldr	r3, [r1, #0]
 800659e:	6826      	ldr	r6, [r4, #0]
 80065a0:	6960      	ldr	r0, [r4, #20]
 80065a2:	1d1d      	adds	r5, r3, #4
 80065a4:	600d      	str	r5, [r1, #0]
 80065a6:	0635      	lsls	r5, r6, #24
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	d501      	bpl.n	80065b0 <_printf_i+0x1cc>
 80065ac:	6018      	str	r0, [r3, #0]
 80065ae:	e002      	b.n	80065b6 <_printf_i+0x1d2>
 80065b0:	0671      	lsls	r1, r6, #25
 80065b2:	d5fb      	bpl.n	80065ac <_printf_i+0x1c8>
 80065b4:	8018      	strh	r0, [r3, #0]
 80065b6:	2300      	movs	r3, #0
 80065b8:	6123      	str	r3, [r4, #16]
 80065ba:	4616      	mov	r6, r2
 80065bc:	e7ba      	b.n	8006534 <_printf_i+0x150>
 80065be:	680b      	ldr	r3, [r1, #0]
 80065c0:	1d1a      	adds	r2, r3, #4
 80065c2:	600a      	str	r2, [r1, #0]
 80065c4:	681e      	ldr	r6, [r3, #0]
 80065c6:	6862      	ldr	r2, [r4, #4]
 80065c8:	2100      	movs	r1, #0
 80065ca:	4630      	mov	r0, r6
 80065cc:	f7f9 fe08 	bl	80001e0 <memchr>
 80065d0:	b108      	cbz	r0, 80065d6 <_printf_i+0x1f2>
 80065d2:	1b80      	subs	r0, r0, r6
 80065d4:	6060      	str	r0, [r4, #4]
 80065d6:	6863      	ldr	r3, [r4, #4]
 80065d8:	6123      	str	r3, [r4, #16]
 80065da:	2300      	movs	r3, #0
 80065dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065e0:	e7a8      	b.n	8006534 <_printf_i+0x150>
 80065e2:	6923      	ldr	r3, [r4, #16]
 80065e4:	4632      	mov	r2, r6
 80065e6:	4649      	mov	r1, r9
 80065e8:	4640      	mov	r0, r8
 80065ea:	47d0      	blx	sl
 80065ec:	3001      	adds	r0, #1
 80065ee:	d0ab      	beq.n	8006548 <_printf_i+0x164>
 80065f0:	6823      	ldr	r3, [r4, #0]
 80065f2:	079b      	lsls	r3, r3, #30
 80065f4:	d413      	bmi.n	800661e <_printf_i+0x23a>
 80065f6:	68e0      	ldr	r0, [r4, #12]
 80065f8:	9b03      	ldr	r3, [sp, #12]
 80065fa:	4298      	cmp	r0, r3
 80065fc:	bfb8      	it	lt
 80065fe:	4618      	movlt	r0, r3
 8006600:	e7a4      	b.n	800654c <_printf_i+0x168>
 8006602:	2301      	movs	r3, #1
 8006604:	4632      	mov	r2, r6
 8006606:	4649      	mov	r1, r9
 8006608:	4640      	mov	r0, r8
 800660a:	47d0      	blx	sl
 800660c:	3001      	adds	r0, #1
 800660e:	d09b      	beq.n	8006548 <_printf_i+0x164>
 8006610:	3501      	adds	r5, #1
 8006612:	68e3      	ldr	r3, [r4, #12]
 8006614:	9903      	ldr	r1, [sp, #12]
 8006616:	1a5b      	subs	r3, r3, r1
 8006618:	42ab      	cmp	r3, r5
 800661a:	dcf2      	bgt.n	8006602 <_printf_i+0x21e>
 800661c:	e7eb      	b.n	80065f6 <_printf_i+0x212>
 800661e:	2500      	movs	r5, #0
 8006620:	f104 0619 	add.w	r6, r4, #25
 8006624:	e7f5      	b.n	8006612 <_printf_i+0x22e>
 8006626:	bf00      	nop
 8006628:	0800b3c2 	.word	0x0800b3c2
 800662c:	0800b3d3 	.word	0x0800b3d3

08006630 <_scanf_float>:
 8006630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006634:	b087      	sub	sp, #28
 8006636:	4617      	mov	r7, r2
 8006638:	9303      	str	r3, [sp, #12]
 800663a:	688b      	ldr	r3, [r1, #8]
 800663c:	1e5a      	subs	r2, r3, #1
 800663e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006642:	bf83      	ittte	hi
 8006644:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006648:	195b      	addhi	r3, r3, r5
 800664a:	9302      	strhi	r3, [sp, #8]
 800664c:	2300      	movls	r3, #0
 800664e:	bf86      	itte	hi
 8006650:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006654:	608b      	strhi	r3, [r1, #8]
 8006656:	9302      	strls	r3, [sp, #8]
 8006658:	680b      	ldr	r3, [r1, #0]
 800665a:	468b      	mov	fp, r1
 800665c:	2500      	movs	r5, #0
 800665e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006662:	f84b 3b1c 	str.w	r3, [fp], #28
 8006666:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800666a:	4680      	mov	r8, r0
 800666c:	460c      	mov	r4, r1
 800666e:	465e      	mov	r6, fp
 8006670:	46aa      	mov	sl, r5
 8006672:	46a9      	mov	r9, r5
 8006674:	9501      	str	r5, [sp, #4]
 8006676:	68a2      	ldr	r2, [r4, #8]
 8006678:	b152      	cbz	r2, 8006690 <_scanf_float+0x60>
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	2b4e      	cmp	r3, #78	; 0x4e
 8006680:	d864      	bhi.n	800674c <_scanf_float+0x11c>
 8006682:	2b40      	cmp	r3, #64	; 0x40
 8006684:	d83c      	bhi.n	8006700 <_scanf_float+0xd0>
 8006686:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800668a:	b2c8      	uxtb	r0, r1
 800668c:	280e      	cmp	r0, #14
 800668e:	d93a      	bls.n	8006706 <_scanf_float+0xd6>
 8006690:	f1b9 0f00 	cmp.w	r9, #0
 8006694:	d003      	beq.n	800669e <_scanf_float+0x6e>
 8006696:	6823      	ldr	r3, [r4, #0]
 8006698:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800669c:	6023      	str	r3, [r4, #0]
 800669e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80066a2:	f1ba 0f01 	cmp.w	sl, #1
 80066a6:	f200 8113 	bhi.w	80068d0 <_scanf_float+0x2a0>
 80066aa:	455e      	cmp	r6, fp
 80066ac:	f200 8105 	bhi.w	80068ba <_scanf_float+0x28a>
 80066b0:	2501      	movs	r5, #1
 80066b2:	4628      	mov	r0, r5
 80066b4:	b007      	add	sp, #28
 80066b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ba:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80066be:	2a0d      	cmp	r2, #13
 80066c0:	d8e6      	bhi.n	8006690 <_scanf_float+0x60>
 80066c2:	a101      	add	r1, pc, #4	; (adr r1, 80066c8 <_scanf_float+0x98>)
 80066c4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80066c8:	08006807 	.word	0x08006807
 80066cc:	08006691 	.word	0x08006691
 80066d0:	08006691 	.word	0x08006691
 80066d4:	08006691 	.word	0x08006691
 80066d8:	08006867 	.word	0x08006867
 80066dc:	0800683f 	.word	0x0800683f
 80066e0:	08006691 	.word	0x08006691
 80066e4:	08006691 	.word	0x08006691
 80066e8:	08006815 	.word	0x08006815
 80066ec:	08006691 	.word	0x08006691
 80066f0:	08006691 	.word	0x08006691
 80066f4:	08006691 	.word	0x08006691
 80066f8:	08006691 	.word	0x08006691
 80066fc:	080067cd 	.word	0x080067cd
 8006700:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006704:	e7db      	b.n	80066be <_scanf_float+0x8e>
 8006706:	290e      	cmp	r1, #14
 8006708:	d8c2      	bhi.n	8006690 <_scanf_float+0x60>
 800670a:	a001      	add	r0, pc, #4	; (adr r0, 8006710 <_scanf_float+0xe0>)
 800670c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006710:	080067bf 	.word	0x080067bf
 8006714:	08006691 	.word	0x08006691
 8006718:	080067bf 	.word	0x080067bf
 800671c:	08006853 	.word	0x08006853
 8006720:	08006691 	.word	0x08006691
 8006724:	0800676d 	.word	0x0800676d
 8006728:	080067a9 	.word	0x080067a9
 800672c:	080067a9 	.word	0x080067a9
 8006730:	080067a9 	.word	0x080067a9
 8006734:	080067a9 	.word	0x080067a9
 8006738:	080067a9 	.word	0x080067a9
 800673c:	080067a9 	.word	0x080067a9
 8006740:	080067a9 	.word	0x080067a9
 8006744:	080067a9 	.word	0x080067a9
 8006748:	080067a9 	.word	0x080067a9
 800674c:	2b6e      	cmp	r3, #110	; 0x6e
 800674e:	d809      	bhi.n	8006764 <_scanf_float+0x134>
 8006750:	2b60      	cmp	r3, #96	; 0x60
 8006752:	d8b2      	bhi.n	80066ba <_scanf_float+0x8a>
 8006754:	2b54      	cmp	r3, #84	; 0x54
 8006756:	d077      	beq.n	8006848 <_scanf_float+0x218>
 8006758:	2b59      	cmp	r3, #89	; 0x59
 800675a:	d199      	bne.n	8006690 <_scanf_float+0x60>
 800675c:	2d07      	cmp	r5, #7
 800675e:	d197      	bne.n	8006690 <_scanf_float+0x60>
 8006760:	2508      	movs	r5, #8
 8006762:	e029      	b.n	80067b8 <_scanf_float+0x188>
 8006764:	2b74      	cmp	r3, #116	; 0x74
 8006766:	d06f      	beq.n	8006848 <_scanf_float+0x218>
 8006768:	2b79      	cmp	r3, #121	; 0x79
 800676a:	e7f6      	b.n	800675a <_scanf_float+0x12a>
 800676c:	6821      	ldr	r1, [r4, #0]
 800676e:	05c8      	lsls	r0, r1, #23
 8006770:	d51a      	bpl.n	80067a8 <_scanf_float+0x178>
 8006772:	9b02      	ldr	r3, [sp, #8]
 8006774:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006778:	6021      	str	r1, [r4, #0]
 800677a:	f109 0901 	add.w	r9, r9, #1
 800677e:	b11b      	cbz	r3, 8006788 <_scanf_float+0x158>
 8006780:	3b01      	subs	r3, #1
 8006782:	3201      	adds	r2, #1
 8006784:	9302      	str	r3, [sp, #8]
 8006786:	60a2      	str	r2, [r4, #8]
 8006788:	68a3      	ldr	r3, [r4, #8]
 800678a:	3b01      	subs	r3, #1
 800678c:	60a3      	str	r3, [r4, #8]
 800678e:	6923      	ldr	r3, [r4, #16]
 8006790:	3301      	adds	r3, #1
 8006792:	6123      	str	r3, [r4, #16]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	3b01      	subs	r3, #1
 8006798:	2b00      	cmp	r3, #0
 800679a:	607b      	str	r3, [r7, #4]
 800679c:	f340 8084 	ble.w	80068a8 <_scanf_float+0x278>
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	3301      	adds	r3, #1
 80067a4:	603b      	str	r3, [r7, #0]
 80067a6:	e766      	b.n	8006676 <_scanf_float+0x46>
 80067a8:	eb1a 0f05 	cmn.w	sl, r5
 80067ac:	f47f af70 	bne.w	8006690 <_scanf_float+0x60>
 80067b0:	6822      	ldr	r2, [r4, #0]
 80067b2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80067b6:	6022      	str	r2, [r4, #0]
 80067b8:	f806 3b01 	strb.w	r3, [r6], #1
 80067bc:	e7e4      	b.n	8006788 <_scanf_float+0x158>
 80067be:	6822      	ldr	r2, [r4, #0]
 80067c0:	0610      	lsls	r0, r2, #24
 80067c2:	f57f af65 	bpl.w	8006690 <_scanf_float+0x60>
 80067c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067ca:	e7f4      	b.n	80067b6 <_scanf_float+0x186>
 80067cc:	f1ba 0f00 	cmp.w	sl, #0
 80067d0:	d10e      	bne.n	80067f0 <_scanf_float+0x1c0>
 80067d2:	f1b9 0f00 	cmp.w	r9, #0
 80067d6:	d10e      	bne.n	80067f6 <_scanf_float+0x1c6>
 80067d8:	6822      	ldr	r2, [r4, #0]
 80067da:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80067de:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80067e2:	d108      	bne.n	80067f6 <_scanf_float+0x1c6>
 80067e4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80067e8:	6022      	str	r2, [r4, #0]
 80067ea:	f04f 0a01 	mov.w	sl, #1
 80067ee:	e7e3      	b.n	80067b8 <_scanf_float+0x188>
 80067f0:	f1ba 0f02 	cmp.w	sl, #2
 80067f4:	d055      	beq.n	80068a2 <_scanf_float+0x272>
 80067f6:	2d01      	cmp	r5, #1
 80067f8:	d002      	beq.n	8006800 <_scanf_float+0x1d0>
 80067fa:	2d04      	cmp	r5, #4
 80067fc:	f47f af48 	bne.w	8006690 <_scanf_float+0x60>
 8006800:	3501      	adds	r5, #1
 8006802:	b2ed      	uxtb	r5, r5
 8006804:	e7d8      	b.n	80067b8 <_scanf_float+0x188>
 8006806:	f1ba 0f01 	cmp.w	sl, #1
 800680a:	f47f af41 	bne.w	8006690 <_scanf_float+0x60>
 800680e:	f04f 0a02 	mov.w	sl, #2
 8006812:	e7d1      	b.n	80067b8 <_scanf_float+0x188>
 8006814:	b97d      	cbnz	r5, 8006836 <_scanf_float+0x206>
 8006816:	f1b9 0f00 	cmp.w	r9, #0
 800681a:	f47f af3c 	bne.w	8006696 <_scanf_float+0x66>
 800681e:	6822      	ldr	r2, [r4, #0]
 8006820:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006824:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006828:	f47f af39 	bne.w	800669e <_scanf_float+0x6e>
 800682c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006830:	6022      	str	r2, [r4, #0]
 8006832:	2501      	movs	r5, #1
 8006834:	e7c0      	b.n	80067b8 <_scanf_float+0x188>
 8006836:	2d03      	cmp	r5, #3
 8006838:	d0e2      	beq.n	8006800 <_scanf_float+0x1d0>
 800683a:	2d05      	cmp	r5, #5
 800683c:	e7de      	b.n	80067fc <_scanf_float+0x1cc>
 800683e:	2d02      	cmp	r5, #2
 8006840:	f47f af26 	bne.w	8006690 <_scanf_float+0x60>
 8006844:	2503      	movs	r5, #3
 8006846:	e7b7      	b.n	80067b8 <_scanf_float+0x188>
 8006848:	2d06      	cmp	r5, #6
 800684a:	f47f af21 	bne.w	8006690 <_scanf_float+0x60>
 800684e:	2507      	movs	r5, #7
 8006850:	e7b2      	b.n	80067b8 <_scanf_float+0x188>
 8006852:	6822      	ldr	r2, [r4, #0]
 8006854:	0591      	lsls	r1, r2, #22
 8006856:	f57f af1b 	bpl.w	8006690 <_scanf_float+0x60>
 800685a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800685e:	6022      	str	r2, [r4, #0]
 8006860:	f8cd 9004 	str.w	r9, [sp, #4]
 8006864:	e7a8      	b.n	80067b8 <_scanf_float+0x188>
 8006866:	6822      	ldr	r2, [r4, #0]
 8006868:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800686c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006870:	d006      	beq.n	8006880 <_scanf_float+0x250>
 8006872:	0550      	lsls	r0, r2, #21
 8006874:	f57f af0c 	bpl.w	8006690 <_scanf_float+0x60>
 8006878:	f1b9 0f00 	cmp.w	r9, #0
 800687c:	f43f af0f 	beq.w	800669e <_scanf_float+0x6e>
 8006880:	0591      	lsls	r1, r2, #22
 8006882:	bf58      	it	pl
 8006884:	9901      	ldrpl	r1, [sp, #4]
 8006886:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800688a:	bf58      	it	pl
 800688c:	eba9 0101 	subpl.w	r1, r9, r1
 8006890:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006894:	bf58      	it	pl
 8006896:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800689a:	6022      	str	r2, [r4, #0]
 800689c:	f04f 0900 	mov.w	r9, #0
 80068a0:	e78a      	b.n	80067b8 <_scanf_float+0x188>
 80068a2:	f04f 0a03 	mov.w	sl, #3
 80068a6:	e787      	b.n	80067b8 <_scanf_float+0x188>
 80068a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80068ac:	4639      	mov	r1, r7
 80068ae:	4640      	mov	r0, r8
 80068b0:	4798      	blx	r3
 80068b2:	2800      	cmp	r0, #0
 80068b4:	f43f aedf 	beq.w	8006676 <_scanf_float+0x46>
 80068b8:	e6ea      	b.n	8006690 <_scanf_float+0x60>
 80068ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80068be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80068c2:	463a      	mov	r2, r7
 80068c4:	4640      	mov	r0, r8
 80068c6:	4798      	blx	r3
 80068c8:	6923      	ldr	r3, [r4, #16]
 80068ca:	3b01      	subs	r3, #1
 80068cc:	6123      	str	r3, [r4, #16]
 80068ce:	e6ec      	b.n	80066aa <_scanf_float+0x7a>
 80068d0:	1e6b      	subs	r3, r5, #1
 80068d2:	2b06      	cmp	r3, #6
 80068d4:	d825      	bhi.n	8006922 <_scanf_float+0x2f2>
 80068d6:	2d02      	cmp	r5, #2
 80068d8:	d836      	bhi.n	8006948 <_scanf_float+0x318>
 80068da:	455e      	cmp	r6, fp
 80068dc:	f67f aee8 	bls.w	80066b0 <_scanf_float+0x80>
 80068e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80068e4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80068e8:	463a      	mov	r2, r7
 80068ea:	4640      	mov	r0, r8
 80068ec:	4798      	blx	r3
 80068ee:	6923      	ldr	r3, [r4, #16]
 80068f0:	3b01      	subs	r3, #1
 80068f2:	6123      	str	r3, [r4, #16]
 80068f4:	e7f1      	b.n	80068da <_scanf_float+0x2aa>
 80068f6:	9802      	ldr	r0, [sp, #8]
 80068f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80068fc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006900:	9002      	str	r0, [sp, #8]
 8006902:	463a      	mov	r2, r7
 8006904:	4640      	mov	r0, r8
 8006906:	4798      	blx	r3
 8006908:	6923      	ldr	r3, [r4, #16]
 800690a:	3b01      	subs	r3, #1
 800690c:	6123      	str	r3, [r4, #16]
 800690e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006912:	fa5f fa8a 	uxtb.w	sl, sl
 8006916:	f1ba 0f02 	cmp.w	sl, #2
 800691a:	d1ec      	bne.n	80068f6 <_scanf_float+0x2c6>
 800691c:	3d03      	subs	r5, #3
 800691e:	b2ed      	uxtb	r5, r5
 8006920:	1b76      	subs	r6, r6, r5
 8006922:	6823      	ldr	r3, [r4, #0]
 8006924:	05da      	lsls	r2, r3, #23
 8006926:	d52f      	bpl.n	8006988 <_scanf_float+0x358>
 8006928:	055b      	lsls	r3, r3, #21
 800692a:	d510      	bpl.n	800694e <_scanf_float+0x31e>
 800692c:	455e      	cmp	r6, fp
 800692e:	f67f aebf 	bls.w	80066b0 <_scanf_float+0x80>
 8006932:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006936:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800693a:	463a      	mov	r2, r7
 800693c:	4640      	mov	r0, r8
 800693e:	4798      	blx	r3
 8006940:	6923      	ldr	r3, [r4, #16]
 8006942:	3b01      	subs	r3, #1
 8006944:	6123      	str	r3, [r4, #16]
 8006946:	e7f1      	b.n	800692c <_scanf_float+0x2fc>
 8006948:	46aa      	mov	sl, r5
 800694a:	9602      	str	r6, [sp, #8]
 800694c:	e7df      	b.n	800690e <_scanf_float+0x2de>
 800694e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006952:	6923      	ldr	r3, [r4, #16]
 8006954:	2965      	cmp	r1, #101	; 0x65
 8006956:	f103 33ff 	add.w	r3, r3, #4294967295
 800695a:	f106 35ff 	add.w	r5, r6, #4294967295
 800695e:	6123      	str	r3, [r4, #16]
 8006960:	d00c      	beq.n	800697c <_scanf_float+0x34c>
 8006962:	2945      	cmp	r1, #69	; 0x45
 8006964:	d00a      	beq.n	800697c <_scanf_float+0x34c>
 8006966:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800696a:	463a      	mov	r2, r7
 800696c:	4640      	mov	r0, r8
 800696e:	4798      	blx	r3
 8006970:	6923      	ldr	r3, [r4, #16]
 8006972:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006976:	3b01      	subs	r3, #1
 8006978:	1eb5      	subs	r5, r6, #2
 800697a:	6123      	str	r3, [r4, #16]
 800697c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006980:	463a      	mov	r2, r7
 8006982:	4640      	mov	r0, r8
 8006984:	4798      	blx	r3
 8006986:	462e      	mov	r6, r5
 8006988:	6825      	ldr	r5, [r4, #0]
 800698a:	f015 0510 	ands.w	r5, r5, #16
 800698e:	d158      	bne.n	8006a42 <_scanf_float+0x412>
 8006990:	7035      	strb	r5, [r6, #0]
 8006992:	6823      	ldr	r3, [r4, #0]
 8006994:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006998:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800699c:	d11c      	bne.n	80069d8 <_scanf_float+0x3a8>
 800699e:	9b01      	ldr	r3, [sp, #4]
 80069a0:	454b      	cmp	r3, r9
 80069a2:	eba3 0209 	sub.w	r2, r3, r9
 80069a6:	d124      	bne.n	80069f2 <_scanf_float+0x3c2>
 80069a8:	2200      	movs	r2, #0
 80069aa:	4659      	mov	r1, fp
 80069ac:	4640      	mov	r0, r8
 80069ae:	f001 f809 	bl	80079c4 <_strtod_r>
 80069b2:	9b03      	ldr	r3, [sp, #12]
 80069b4:	6821      	ldr	r1, [r4, #0]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f011 0f02 	tst.w	r1, #2
 80069bc:	ec57 6b10 	vmov	r6, r7, d0
 80069c0:	f103 0204 	add.w	r2, r3, #4
 80069c4:	d020      	beq.n	8006a08 <_scanf_float+0x3d8>
 80069c6:	9903      	ldr	r1, [sp, #12]
 80069c8:	600a      	str	r2, [r1, #0]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	e9c3 6700 	strd	r6, r7, [r3]
 80069d0:	68e3      	ldr	r3, [r4, #12]
 80069d2:	3301      	adds	r3, #1
 80069d4:	60e3      	str	r3, [r4, #12]
 80069d6:	e66c      	b.n	80066b2 <_scanf_float+0x82>
 80069d8:	9b04      	ldr	r3, [sp, #16]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d0e4      	beq.n	80069a8 <_scanf_float+0x378>
 80069de:	9905      	ldr	r1, [sp, #20]
 80069e0:	230a      	movs	r3, #10
 80069e2:	462a      	mov	r2, r5
 80069e4:	3101      	adds	r1, #1
 80069e6:	4640      	mov	r0, r8
 80069e8:	f001 f876 	bl	8007ad8 <_strtol_r>
 80069ec:	9b04      	ldr	r3, [sp, #16]
 80069ee:	9e05      	ldr	r6, [sp, #20]
 80069f0:	1ac2      	subs	r2, r0, r3
 80069f2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80069f6:	429e      	cmp	r6, r3
 80069f8:	bf28      	it	cs
 80069fa:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80069fe:	4912      	ldr	r1, [pc, #72]	; (8006a48 <_scanf_float+0x418>)
 8006a00:	4630      	mov	r0, r6
 8006a02:	f000 f997 	bl	8006d34 <siprintf>
 8006a06:	e7cf      	b.n	80069a8 <_scanf_float+0x378>
 8006a08:	f011 0f04 	tst.w	r1, #4
 8006a0c:	9903      	ldr	r1, [sp, #12]
 8006a0e:	600a      	str	r2, [r1, #0]
 8006a10:	d1db      	bne.n	80069ca <_scanf_float+0x39a>
 8006a12:	f8d3 8000 	ldr.w	r8, [r3]
 8006a16:	ee10 2a10 	vmov	r2, s0
 8006a1a:	ee10 0a10 	vmov	r0, s0
 8006a1e:	463b      	mov	r3, r7
 8006a20:	4639      	mov	r1, r7
 8006a22:	f7fa f883 	bl	8000b2c <__aeabi_dcmpun>
 8006a26:	b128      	cbz	r0, 8006a34 <_scanf_float+0x404>
 8006a28:	4808      	ldr	r0, [pc, #32]	; (8006a4c <_scanf_float+0x41c>)
 8006a2a:	f000 f97d 	bl	8006d28 <nanf>
 8006a2e:	ed88 0a00 	vstr	s0, [r8]
 8006a32:	e7cd      	b.n	80069d0 <_scanf_float+0x3a0>
 8006a34:	4630      	mov	r0, r6
 8006a36:	4639      	mov	r1, r7
 8006a38:	f7fa f8d6 	bl	8000be8 <__aeabi_d2f>
 8006a3c:	f8c8 0000 	str.w	r0, [r8]
 8006a40:	e7c6      	b.n	80069d0 <_scanf_float+0x3a0>
 8006a42:	2500      	movs	r5, #0
 8006a44:	e635      	b.n	80066b2 <_scanf_float+0x82>
 8006a46:	bf00      	nop
 8006a48:	0800b3e4 	.word	0x0800b3e4
 8006a4c:	0800b860 	.word	0x0800b860

08006a50 <iprintf>:
 8006a50:	b40f      	push	{r0, r1, r2, r3}
 8006a52:	4b0a      	ldr	r3, [pc, #40]	; (8006a7c <iprintf+0x2c>)
 8006a54:	b513      	push	{r0, r1, r4, lr}
 8006a56:	681c      	ldr	r4, [r3, #0]
 8006a58:	b124      	cbz	r4, 8006a64 <iprintf+0x14>
 8006a5a:	69a3      	ldr	r3, [r4, #24]
 8006a5c:	b913      	cbnz	r3, 8006a64 <iprintf+0x14>
 8006a5e:	4620      	mov	r0, r4
 8006a60:	f002 f890 	bl	8008b84 <__sinit>
 8006a64:	ab05      	add	r3, sp, #20
 8006a66:	9a04      	ldr	r2, [sp, #16]
 8006a68:	68a1      	ldr	r1, [r4, #8]
 8006a6a:	9301      	str	r3, [sp, #4]
 8006a6c:	4620      	mov	r0, r4
 8006a6e:	f003 fb5f 	bl	800a130 <_vfiprintf_r>
 8006a72:	b002      	add	sp, #8
 8006a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a78:	b004      	add	sp, #16
 8006a7a:	4770      	bx	lr
 8006a7c:	2000005c 	.word	0x2000005c

08006a80 <_puts_r>:
 8006a80:	b570      	push	{r4, r5, r6, lr}
 8006a82:	460e      	mov	r6, r1
 8006a84:	4605      	mov	r5, r0
 8006a86:	b118      	cbz	r0, 8006a90 <_puts_r+0x10>
 8006a88:	6983      	ldr	r3, [r0, #24]
 8006a8a:	b90b      	cbnz	r3, 8006a90 <_puts_r+0x10>
 8006a8c:	f002 f87a 	bl	8008b84 <__sinit>
 8006a90:	69ab      	ldr	r3, [r5, #24]
 8006a92:	68ac      	ldr	r4, [r5, #8]
 8006a94:	b913      	cbnz	r3, 8006a9c <_puts_r+0x1c>
 8006a96:	4628      	mov	r0, r5
 8006a98:	f002 f874 	bl	8008b84 <__sinit>
 8006a9c:	4b2c      	ldr	r3, [pc, #176]	; (8006b50 <_puts_r+0xd0>)
 8006a9e:	429c      	cmp	r4, r3
 8006aa0:	d120      	bne.n	8006ae4 <_puts_r+0x64>
 8006aa2:	686c      	ldr	r4, [r5, #4]
 8006aa4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006aa6:	07db      	lsls	r3, r3, #31
 8006aa8:	d405      	bmi.n	8006ab6 <_puts_r+0x36>
 8006aaa:	89a3      	ldrh	r3, [r4, #12]
 8006aac:	0598      	lsls	r0, r3, #22
 8006aae:	d402      	bmi.n	8006ab6 <_puts_r+0x36>
 8006ab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ab2:	f002 fc78 	bl	80093a6 <__retarget_lock_acquire_recursive>
 8006ab6:	89a3      	ldrh	r3, [r4, #12]
 8006ab8:	0719      	lsls	r1, r3, #28
 8006aba:	d51d      	bpl.n	8006af8 <_puts_r+0x78>
 8006abc:	6923      	ldr	r3, [r4, #16]
 8006abe:	b1db      	cbz	r3, 8006af8 <_puts_r+0x78>
 8006ac0:	3e01      	subs	r6, #1
 8006ac2:	68a3      	ldr	r3, [r4, #8]
 8006ac4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	60a3      	str	r3, [r4, #8]
 8006acc:	bb39      	cbnz	r1, 8006b1e <_puts_r+0x9e>
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	da38      	bge.n	8006b44 <_puts_r+0xc4>
 8006ad2:	4622      	mov	r2, r4
 8006ad4:	210a      	movs	r1, #10
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	f001 f800 	bl	8007adc <__swbuf_r>
 8006adc:	3001      	adds	r0, #1
 8006ade:	d011      	beq.n	8006b04 <_puts_r+0x84>
 8006ae0:	250a      	movs	r5, #10
 8006ae2:	e011      	b.n	8006b08 <_puts_r+0x88>
 8006ae4:	4b1b      	ldr	r3, [pc, #108]	; (8006b54 <_puts_r+0xd4>)
 8006ae6:	429c      	cmp	r4, r3
 8006ae8:	d101      	bne.n	8006aee <_puts_r+0x6e>
 8006aea:	68ac      	ldr	r4, [r5, #8]
 8006aec:	e7da      	b.n	8006aa4 <_puts_r+0x24>
 8006aee:	4b1a      	ldr	r3, [pc, #104]	; (8006b58 <_puts_r+0xd8>)
 8006af0:	429c      	cmp	r4, r3
 8006af2:	bf08      	it	eq
 8006af4:	68ec      	ldreq	r4, [r5, #12]
 8006af6:	e7d5      	b.n	8006aa4 <_puts_r+0x24>
 8006af8:	4621      	mov	r1, r4
 8006afa:	4628      	mov	r0, r5
 8006afc:	f001 f840 	bl	8007b80 <__swsetup_r>
 8006b00:	2800      	cmp	r0, #0
 8006b02:	d0dd      	beq.n	8006ac0 <_puts_r+0x40>
 8006b04:	f04f 35ff 	mov.w	r5, #4294967295
 8006b08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b0a:	07da      	lsls	r2, r3, #31
 8006b0c:	d405      	bmi.n	8006b1a <_puts_r+0x9a>
 8006b0e:	89a3      	ldrh	r3, [r4, #12]
 8006b10:	059b      	lsls	r3, r3, #22
 8006b12:	d402      	bmi.n	8006b1a <_puts_r+0x9a>
 8006b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b16:	f002 fc47 	bl	80093a8 <__retarget_lock_release_recursive>
 8006b1a:	4628      	mov	r0, r5
 8006b1c:	bd70      	pop	{r4, r5, r6, pc}
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	da04      	bge.n	8006b2c <_puts_r+0xac>
 8006b22:	69a2      	ldr	r2, [r4, #24]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	dc06      	bgt.n	8006b36 <_puts_r+0xb6>
 8006b28:	290a      	cmp	r1, #10
 8006b2a:	d004      	beq.n	8006b36 <_puts_r+0xb6>
 8006b2c:	6823      	ldr	r3, [r4, #0]
 8006b2e:	1c5a      	adds	r2, r3, #1
 8006b30:	6022      	str	r2, [r4, #0]
 8006b32:	7019      	strb	r1, [r3, #0]
 8006b34:	e7c5      	b.n	8006ac2 <_puts_r+0x42>
 8006b36:	4622      	mov	r2, r4
 8006b38:	4628      	mov	r0, r5
 8006b3a:	f000 ffcf 	bl	8007adc <__swbuf_r>
 8006b3e:	3001      	adds	r0, #1
 8006b40:	d1bf      	bne.n	8006ac2 <_puts_r+0x42>
 8006b42:	e7df      	b.n	8006b04 <_puts_r+0x84>
 8006b44:	6823      	ldr	r3, [r4, #0]
 8006b46:	250a      	movs	r5, #10
 8006b48:	1c5a      	adds	r2, r3, #1
 8006b4a:	6022      	str	r2, [r4, #0]
 8006b4c:	701d      	strb	r5, [r3, #0]
 8006b4e:	e7db      	b.n	8006b08 <_puts_r+0x88>
 8006b50:	0800b5f8 	.word	0x0800b5f8
 8006b54:	0800b618 	.word	0x0800b618
 8006b58:	0800b5d8 	.word	0x0800b5d8

08006b5c <puts>:
 8006b5c:	4b02      	ldr	r3, [pc, #8]	; (8006b68 <puts+0xc>)
 8006b5e:	4601      	mov	r1, r0
 8006b60:	6818      	ldr	r0, [r3, #0]
 8006b62:	f7ff bf8d 	b.w	8006a80 <_puts_r>
 8006b66:	bf00      	nop
 8006b68:	2000005c 	.word	0x2000005c

08006b6c <_sbrk_r>:
 8006b6c:	b538      	push	{r3, r4, r5, lr}
 8006b6e:	4d06      	ldr	r5, [pc, #24]	; (8006b88 <_sbrk_r+0x1c>)
 8006b70:	2300      	movs	r3, #0
 8006b72:	4604      	mov	r4, r0
 8006b74:	4608      	mov	r0, r1
 8006b76:	602b      	str	r3, [r5, #0]
 8006b78:	f7fa ff2e 	bl	80019d8 <_sbrk>
 8006b7c:	1c43      	adds	r3, r0, #1
 8006b7e:	d102      	bne.n	8006b86 <_sbrk_r+0x1a>
 8006b80:	682b      	ldr	r3, [r5, #0]
 8006b82:	b103      	cbz	r3, 8006b86 <_sbrk_r+0x1a>
 8006b84:	6023      	str	r3, [r4, #0]
 8006b86:	bd38      	pop	{r3, r4, r5, pc}
 8006b88:	20001dac 	.word	0x20001dac

08006b8c <setbuf>:
 8006b8c:	2900      	cmp	r1, #0
 8006b8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b92:	bf0c      	ite	eq
 8006b94:	2202      	moveq	r2, #2
 8006b96:	2200      	movne	r2, #0
 8006b98:	f000 b800 	b.w	8006b9c <setvbuf>

08006b9c <setvbuf>:
 8006b9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006ba0:	461d      	mov	r5, r3
 8006ba2:	4b5d      	ldr	r3, [pc, #372]	; (8006d18 <setvbuf+0x17c>)
 8006ba4:	681f      	ldr	r7, [r3, #0]
 8006ba6:	4604      	mov	r4, r0
 8006ba8:	460e      	mov	r6, r1
 8006baa:	4690      	mov	r8, r2
 8006bac:	b127      	cbz	r7, 8006bb8 <setvbuf+0x1c>
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	b913      	cbnz	r3, 8006bb8 <setvbuf+0x1c>
 8006bb2:	4638      	mov	r0, r7
 8006bb4:	f001 ffe6 	bl	8008b84 <__sinit>
 8006bb8:	4b58      	ldr	r3, [pc, #352]	; (8006d1c <setvbuf+0x180>)
 8006bba:	429c      	cmp	r4, r3
 8006bbc:	d167      	bne.n	8006c8e <setvbuf+0xf2>
 8006bbe:	687c      	ldr	r4, [r7, #4]
 8006bc0:	f1b8 0f02 	cmp.w	r8, #2
 8006bc4:	d006      	beq.n	8006bd4 <setvbuf+0x38>
 8006bc6:	f1b8 0f01 	cmp.w	r8, #1
 8006bca:	f200 809f 	bhi.w	8006d0c <setvbuf+0x170>
 8006bce:	2d00      	cmp	r5, #0
 8006bd0:	f2c0 809c 	blt.w	8006d0c <setvbuf+0x170>
 8006bd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bd6:	07db      	lsls	r3, r3, #31
 8006bd8:	d405      	bmi.n	8006be6 <setvbuf+0x4a>
 8006bda:	89a3      	ldrh	r3, [r4, #12]
 8006bdc:	0598      	lsls	r0, r3, #22
 8006bde:	d402      	bmi.n	8006be6 <setvbuf+0x4a>
 8006be0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006be2:	f002 fbe0 	bl	80093a6 <__retarget_lock_acquire_recursive>
 8006be6:	4621      	mov	r1, r4
 8006be8:	4638      	mov	r0, r7
 8006bea:	f001 ff37 	bl	8008a5c <_fflush_r>
 8006bee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bf0:	b141      	cbz	r1, 8006c04 <setvbuf+0x68>
 8006bf2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bf6:	4299      	cmp	r1, r3
 8006bf8:	d002      	beq.n	8006c00 <setvbuf+0x64>
 8006bfa:	4638      	mov	r0, r7
 8006bfc:	f7ff f804 	bl	8005c08 <_free_r>
 8006c00:	2300      	movs	r3, #0
 8006c02:	6363      	str	r3, [r4, #52]	; 0x34
 8006c04:	2300      	movs	r3, #0
 8006c06:	61a3      	str	r3, [r4, #24]
 8006c08:	6063      	str	r3, [r4, #4]
 8006c0a:	89a3      	ldrh	r3, [r4, #12]
 8006c0c:	0619      	lsls	r1, r3, #24
 8006c0e:	d503      	bpl.n	8006c18 <setvbuf+0x7c>
 8006c10:	6921      	ldr	r1, [r4, #16]
 8006c12:	4638      	mov	r0, r7
 8006c14:	f7fe fff8 	bl	8005c08 <_free_r>
 8006c18:	89a3      	ldrh	r3, [r4, #12]
 8006c1a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8006c1e:	f023 0303 	bic.w	r3, r3, #3
 8006c22:	f1b8 0f02 	cmp.w	r8, #2
 8006c26:	81a3      	strh	r3, [r4, #12]
 8006c28:	d06c      	beq.n	8006d04 <setvbuf+0x168>
 8006c2a:	ab01      	add	r3, sp, #4
 8006c2c:	466a      	mov	r2, sp
 8006c2e:	4621      	mov	r1, r4
 8006c30:	4638      	mov	r0, r7
 8006c32:	f002 fbba 	bl	80093aa <__swhatbuf_r>
 8006c36:	89a3      	ldrh	r3, [r4, #12]
 8006c38:	4318      	orrs	r0, r3
 8006c3a:	81a0      	strh	r0, [r4, #12]
 8006c3c:	2d00      	cmp	r5, #0
 8006c3e:	d130      	bne.n	8006ca2 <setvbuf+0x106>
 8006c40:	9d00      	ldr	r5, [sp, #0]
 8006c42:	4628      	mov	r0, r5
 8006c44:	f7fe ffaa 	bl	8005b9c <malloc>
 8006c48:	4606      	mov	r6, r0
 8006c4a:	2800      	cmp	r0, #0
 8006c4c:	d155      	bne.n	8006cfa <setvbuf+0x15e>
 8006c4e:	f8dd 9000 	ldr.w	r9, [sp]
 8006c52:	45a9      	cmp	r9, r5
 8006c54:	d14a      	bne.n	8006cec <setvbuf+0x150>
 8006c56:	f04f 35ff 	mov.w	r5, #4294967295
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	60a2      	str	r2, [r4, #8]
 8006c5e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8006c62:	6022      	str	r2, [r4, #0]
 8006c64:	6122      	str	r2, [r4, #16]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c6c:	6162      	str	r2, [r4, #20]
 8006c6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c70:	f043 0302 	orr.w	r3, r3, #2
 8006c74:	07d2      	lsls	r2, r2, #31
 8006c76:	81a3      	strh	r3, [r4, #12]
 8006c78:	d405      	bmi.n	8006c86 <setvbuf+0xea>
 8006c7a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006c7e:	d102      	bne.n	8006c86 <setvbuf+0xea>
 8006c80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c82:	f002 fb91 	bl	80093a8 <__retarget_lock_release_recursive>
 8006c86:	4628      	mov	r0, r5
 8006c88:	b003      	add	sp, #12
 8006c8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c8e:	4b24      	ldr	r3, [pc, #144]	; (8006d20 <setvbuf+0x184>)
 8006c90:	429c      	cmp	r4, r3
 8006c92:	d101      	bne.n	8006c98 <setvbuf+0xfc>
 8006c94:	68bc      	ldr	r4, [r7, #8]
 8006c96:	e793      	b.n	8006bc0 <setvbuf+0x24>
 8006c98:	4b22      	ldr	r3, [pc, #136]	; (8006d24 <setvbuf+0x188>)
 8006c9a:	429c      	cmp	r4, r3
 8006c9c:	bf08      	it	eq
 8006c9e:	68fc      	ldreq	r4, [r7, #12]
 8006ca0:	e78e      	b.n	8006bc0 <setvbuf+0x24>
 8006ca2:	2e00      	cmp	r6, #0
 8006ca4:	d0cd      	beq.n	8006c42 <setvbuf+0xa6>
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	b913      	cbnz	r3, 8006cb0 <setvbuf+0x114>
 8006caa:	4638      	mov	r0, r7
 8006cac:	f001 ff6a 	bl	8008b84 <__sinit>
 8006cb0:	f1b8 0f01 	cmp.w	r8, #1
 8006cb4:	bf08      	it	eq
 8006cb6:	89a3      	ldrheq	r3, [r4, #12]
 8006cb8:	6026      	str	r6, [r4, #0]
 8006cba:	bf04      	itt	eq
 8006cbc:	f043 0301 	orreq.w	r3, r3, #1
 8006cc0:	81a3      	strheq	r3, [r4, #12]
 8006cc2:	89a2      	ldrh	r2, [r4, #12]
 8006cc4:	f012 0308 	ands.w	r3, r2, #8
 8006cc8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006ccc:	d01c      	beq.n	8006d08 <setvbuf+0x16c>
 8006cce:	07d3      	lsls	r3, r2, #31
 8006cd0:	bf41      	itttt	mi
 8006cd2:	2300      	movmi	r3, #0
 8006cd4:	426d      	negmi	r5, r5
 8006cd6:	60a3      	strmi	r3, [r4, #8]
 8006cd8:	61a5      	strmi	r5, [r4, #24]
 8006cda:	bf58      	it	pl
 8006cdc:	60a5      	strpl	r5, [r4, #8]
 8006cde:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8006ce0:	f015 0501 	ands.w	r5, r5, #1
 8006ce4:	d115      	bne.n	8006d12 <setvbuf+0x176>
 8006ce6:	f412 7f00 	tst.w	r2, #512	; 0x200
 8006cea:	e7c8      	b.n	8006c7e <setvbuf+0xe2>
 8006cec:	4648      	mov	r0, r9
 8006cee:	f7fe ff55 	bl	8005b9c <malloc>
 8006cf2:	4606      	mov	r6, r0
 8006cf4:	2800      	cmp	r0, #0
 8006cf6:	d0ae      	beq.n	8006c56 <setvbuf+0xba>
 8006cf8:	464d      	mov	r5, r9
 8006cfa:	89a3      	ldrh	r3, [r4, #12]
 8006cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d00:	81a3      	strh	r3, [r4, #12]
 8006d02:	e7d0      	b.n	8006ca6 <setvbuf+0x10a>
 8006d04:	2500      	movs	r5, #0
 8006d06:	e7a8      	b.n	8006c5a <setvbuf+0xbe>
 8006d08:	60a3      	str	r3, [r4, #8]
 8006d0a:	e7e8      	b.n	8006cde <setvbuf+0x142>
 8006d0c:	f04f 35ff 	mov.w	r5, #4294967295
 8006d10:	e7b9      	b.n	8006c86 <setvbuf+0xea>
 8006d12:	2500      	movs	r5, #0
 8006d14:	e7b7      	b.n	8006c86 <setvbuf+0xea>
 8006d16:	bf00      	nop
 8006d18:	2000005c 	.word	0x2000005c
 8006d1c:	0800b5f8 	.word	0x0800b5f8
 8006d20:	0800b618 	.word	0x0800b618
 8006d24:	0800b5d8 	.word	0x0800b5d8

08006d28 <nanf>:
 8006d28:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006d30 <nanf+0x8>
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	7fc00000 	.word	0x7fc00000

08006d34 <siprintf>:
 8006d34:	b40e      	push	{r1, r2, r3}
 8006d36:	b500      	push	{lr}
 8006d38:	b09c      	sub	sp, #112	; 0x70
 8006d3a:	ab1d      	add	r3, sp, #116	; 0x74
 8006d3c:	9002      	str	r0, [sp, #8]
 8006d3e:	9006      	str	r0, [sp, #24]
 8006d40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d44:	4809      	ldr	r0, [pc, #36]	; (8006d6c <siprintf+0x38>)
 8006d46:	9107      	str	r1, [sp, #28]
 8006d48:	9104      	str	r1, [sp, #16]
 8006d4a:	4909      	ldr	r1, [pc, #36]	; (8006d70 <siprintf+0x3c>)
 8006d4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d50:	9105      	str	r1, [sp, #20]
 8006d52:	6800      	ldr	r0, [r0, #0]
 8006d54:	9301      	str	r3, [sp, #4]
 8006d56:	a902      	add	r1, sp, #8
 8006d58:	f003 f8c0 	bl	8009edc <_svfiprintf_r>
 8006d5c:	9b02      	ldr	r3, [sp, #8]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	701a      	strb	r2, [r3, #0]
 8006d62:	b01c      	add	sp, #112	; 0x70
 8006d64:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d68:	b003      	add	sp, #12
 8006d6a:	4770      	bx	lr
 8006d6c:	2000005c 	.word	0x2000005c
 8006d70:	ffff0208 	.word	0xffff0208

08006d74 <sulp>:
 8006d74:	b570      	push	{r4, r5, r6, lr}
 8006d76:	4604      	mov	r4, r0
 8006d78:	460d      	mov	r5, r1
 8006d7a:	ec45 4b10 	vmov	d0, r4, r5
 8006d7e:	4616      	mov	r6, r2
 8006d80:	f002 ff02 	bl	8009b88 <__ulp>
 8006d84:	ec51 0b10 	vmov	r0, r1, d0
 8006d88:	b17e      	cbz	r6, 8006daa <sulp+0x36>
 8006d8a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006d8e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	dd09      	ble.n	8006daa <sulp+0x36>
 8006d96:	051b      	lsls	r3, r3, #20
 8006d98:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006d9c:	2400      	movs	r4, #0
 8006d9e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006da2:	4622      	mov	r2, r4
 8006da4:	462b      	mov	r3, r5
 8006da6:	f7f9 fc27 	bl	80005f8 <__aeabi_dmul>
 8006daa:	bd70      	pop	{r4, r5, r6, pc}
 8006dac:	0000      	movs	r0, r0
	...

08006db0 <_strtod_l>:
 8006db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006db4:	b0a3      	sub	sp, #140	; 0x8c
 8006db6:	461f      	mov	r7, r3
 8006db8:	2300      	movs	r3, #0
 8006dba:	931e      	str	r3, [sp, #120]	; 0x78
 8006dbc:	4ba4      	ldr	r3, [pc, #656]	; (8007050 <_strtod_l+0x2a0>)
 8006dbe:	9219      	str	r2, [sp, #100]	; 0x64
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	9307      	str	r3, [sp, #28]
 8006dc4:	4604      	mov	r4, r0
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	4688      	mov	r8, r1
 8006dca:	f7f9 fa01 	bl	80001d0 <strlen>
 8006dce:	f04f 0a00 	mov.w	sl, #0
 8006dd2:	4605      	mov	r5, r0
 8006dd4:	f04f 0b00 	mov.w	fp, #0
 8006dd8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006ddc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006dde:	781a      	ldrb	r2, [r3, #0]
 8006de0:	2a2b      	cmp	r2, #43	; 0x2b
 8006de2:	d04c      	beq.n	8006e7e <_strtod_l+0xce>
 8006de4:	d839      	bhi.n	8006e5a <_strtod_l+0xaa>
 8006de6:	2a0d      	cmp	r2, #13
 8006de8:	d832      	bhi.n	8006e50 <_strtod_l+0xa0>
 8006dea:	2a08      	cmp	r2, #8
 8006dec:	d832      	bhi.n	8006e54 <_strtod_l+0xa4>
 8006dee:	2a00      	cmp	r2, #0
 8006df0:	d03c      	beq.n	8006e6c <_strtod_l+0xbc>
 8006df2:	2300      	movs	r3, #0
 8006df4:	930e      	str	r3, [sp, #56]	; 0x38
 8006df6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8006df8:	7833      	ldrb	r3, [r6, #0]
 8006dfa:	2b30      	cmp	r3, #48	; 0x30
 8006dfc:	f040 80b4 	bne.w	8006f68 <_strtod_l+0x1b8>
 8006e00:	7873      	ldrb	r3, [r6, #1]
 8006e02:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006e06:	2b58      	cmp	r3, #88	; 0x58
 8006e08:	d16c      	bne.n	8006ee4 <_strtod_l+0x134>
 8006e0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e0c:	9301      	str	r3, [sp, #4]
 8006e0e:	ab1e      	add	r3, sp, #120	; 0x78
 8006e10:	9702      	str	r7, [sp, #8]
 8006e12:	9300      	str	r3, [sp, #0]
 8006e14:	4a8f      	ldr	r2, [pc, #572]	; (8007054 <_strtod_l+0x2a4>)
 8006e16:	ab1f      	add	r3, sp, #124	; 0x7c
 8006e18:	a91d      	add	r1, sp, #116	; 0x74
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	f001 ffb6 	bl	8008d8c <__gethex>
 8006e20:	f010 0707 	ands.w	r7, r0, #7
 8006e24:	4605      	mov	r5, r0
 8006e26:	d005      	beq.n	8006e34 <_strtod_l+0x84>
 8006e28:	2f06      	cmp	r7, #6
 8006e2a:	d12a      	bne.n	8006e82 <_strtod_l+0xd2>
 8006e2c:	3601      	adds	r6, #1
 8006e2e:	2300      	movs	r3, #0
 8006e30:	961d      	str	r6, [sp, #116]	; 0x74
 8006e32:	930e      	str	r3, [sp, #56]	; 0x38
 8006e34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	f040 8596 	bne.w	8007968 <_strtod_l+0xbb8>
 8006e3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e3e:	b1db      	cbz	r3, 8006e78 <_strtod_l+0xc8>
 8006e40:	4652      	mov	r2, sl
 8006e42:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006e46:	ec43 2b10 	vmov	d0, r2, r3
 8006e4a:	b023      	add	sp, #140	; 0x8c
 8006e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e50:	2a20      	cmp	r2, #32
 8006e52:	d1ce      	bne.n	8006df2 <_strtod_l+0x42>
 8006e54:	3301      	adds	r3, #1
 8006e56:	931d      	str	r3, [sp, #116]	; 0x74
 8006e58:	e7c0      	b.n	8006ddc <_strtod_l+0x2c>
 8006e5a:	2a2d      	cmp	r2, #45	; 0x2d
 8006e5c:	d1c9      	bne.n	8006df2 <_strtod_l+0x42>
 8006e5e:	2201      	movs	r2, #1
 8006e60:	920e      	str	r2, [sp, #56]	; 0x38
 8006e62:	1c5a      	adds	r2, r3, #1
 8006e64:	921d      	str	r2, [sp, #116]	; 0x74
 8006e66:	785b      	ldrb	r3, [r3, #1]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d1c4      	bne.n	8006df6 <_strtod_l+0x46>
 8006e6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006e6e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f040 8576 	bne.w	8007964 <_strtod_l+0xbb4>
 8006e78:	4652      	mov	r2, sl
 8006e7a:	465b      	mov	r3, fp
 8006e7c:	e7e3      	b.n	8006e46 <_strtod_l+0x96>
 8006e7e:	2200      	movs	r2, #0
 8006e80:	e7ee      	b.n	8006e60 <_strtod_l+0xb0>
 8006e82:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006e84:	b13a      	cbz	r2, 8006e96 <_strtod_l+0xe6>
 8006e86:	2135      	movs	r1, #53	; 0x35
 8006e88:	a820      	add	r0, sp, #128	; 0x80
 8006e8a:	f002 ff88 	bl	8009d9e <__copybits>
 8006e8e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006e90:	4620      	mov	r0, r4
 8006e92:	f002 fb4d 	bl	8009530 <_Bfree>
 8006e96:	3f01      	subs	r7, #1
 8006e98:	2f05      	cmp	r7, #5
 8006e9a:	d807      	bhi.n	8006eac <_strtod_l+0xfc>
 8006e9c:	e8df f007 	tbb	[pc, r7]
 8006ea0:	1d180b0e 	.word	0x1d180b0e
 8006ea4:	030e      	.short	0x030e
 8006ea6:	f04f 0b00 	mov.w	fp, #0
 8006eaa:	46da      	mov	sl, fp
 8006eac:	0728      	lsls	r0, r5, #28
 8006eae:	d5c1      	bpl.n	8006e34 <_strtod_l+0x84>
 8006eb0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006eb4:	e7be      	b.n	8006e34 <_strtod_l+0x84>
 8006eb6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8006eba:	e7f7      	b.n	8006eac <_strtod_l+0xfc>
 8006ebc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8006ec0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006ec2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006ec6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006eca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006ece:	e7ed      	b.n	8006eac <_strtod_l+0xfc>
 8006ed0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8007058 <_strtod_l+0x2a8>
 8006ed4:	f04f 0a00 	mov.w	sl, #0
 8006ed8:	e7e8      	b.n	8006eac <_strtod_l+0xfc>
 8006eda:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006ede:	f04f 3aff 	mov.w	sl, #4294967295
 8006ee2:	e7e3      	b.n	8006eac <_strtod_l+0xfc>
 8006ee4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006ee6:	1c5a      	adds	r2, r3, #1
 8006ee8:	921d      	str	r2, [sp, #116]	; 0x74
 8006eea:	785b      	ldrb	r3, [r3, #1]
 8006eec:	2b30      	cmp	r3, #48	; 0x30
 8006eee:	d0f9      	beq.n	8006ee4 <_strtod_l+0x134>
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d09f      	beq.n	8006e34 <_strtod_l+0x84>
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	f04f 0900 	mov.w	r9, #0
 8006efa:	9304      	str	r3, [sp, #16]
 8006efc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006efe:	930a      	str	r3, [sp, #40]	; 0x28
 8006f00:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006f04:	464f      	mov	r7, r9
 8006f06:	220a      	movs	r2, #10
 8006f08:	981d      	ldr	r0, [sp, #116]	; 0x74
 8006f0a:	7806      	ldrb	r6, [r0, #0]
 8006f0c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006f10:	b2d9      	uxtb	r1, r3
 8006f12:	2909      	cmp	r1, #9
 8006f14:	d92a      	bls.n	8006f6c <_strtod_l+0x1bc>
 8006f16:	9907      	ldr	r1, [sp, #28]
 8006f18:	462a      	mov	r2, r5
 8006f1a:	f003 fa84 	bl	800a426 <strncmp>
 8006f1e:	b398      	cbz	r0, 8006f88 <_strtod_l+0x1d8>
 8006f20:	2000      	movs	r0, #0
 8006f22:	4633      	mov	r3, r6
 8006f24:	463d      	mov	r5, r7
 8006f26:	9007      	str	r0, [sp, #28]
 8006f28:	4602      	mov	r2, r0
 8006f2a:	2b65      	cmp	r3, #101	; 0x65
 8006f2c:	d001      	beq.n	8006f32 <_strtod_l+0x182>
 8006f2e:	2b45      	cmp	r3, #69	; 0x45
 8006f30:	d118      	bne.n	8006f64 <_strtod_l+0x1b4>
 8006f32:	b91d      	cbnz	r5, 8006f3c <_strtod_l+0x18c>
 8006f34:	9b04      	ldr	r3, [sp, #16]
 8006f36:	4303      	orrs	r3, r0
 8006f38:	d098      	beq.n	8006e6c <_strtod_l+0xbc>
 8006f3a:	2500      	movs	r5, #0
 8006f3c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8006f40:	f108 0301 	add.w	r3, r8, #1
 8006f44:	931d      	str	r3, [sp, #116]	; 0x74
 8006f46:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006f4a:	2b2b      	cmp	r3, #43	; 0x2b
 8006f4c:	d075      	beq.n	800703a <_strtod_l+0x28a>
 8006f4e:	2b2d      	cmp	r3, #45	; 0x2d
 8006f50:	d07b      	beq.n	800704a <_strtod_l+0x29a>
 8006f52:	f04f 0c00 	mov.w	ip, #0
 8006f56:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006f5a:	2909      	cmp	r1, #9
 8006f5c:	f240 8082 	bls.w	8007064 <_strtod_l+0x2b4>
 8006f60:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006f64:	2600      	movs	r6, #0
 8006f66:	e09d      	b.n	80070a4 <_strtod_l+0x2f4>
 8006f68:	2300      	movs	r3, #0
 8006f6a:	e7c4      	b.n	8006ef6 <_strtod_l+0x146>
 8006f6c:	2f08      	cmp	r7, #8
 8006f6e:	bfd8      	it	le
 8006f70:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006f72:	f100 0001 	add.w	r0, r0, #1
 8006f76:	bfda      	itte	le
 8006f78:	fb02 3301 	mlale	r3, r2, r1, r3
 8006f7c:	9309      	strle	r3, [sp, #36]	; 0x24
 8006f7e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006f82:	3701      	adds	r7, #1
 8006f84:	901d      	str	r0, [sp, #116]	; 0x74
 8006f86:	e7bf      	b.n	8006f08 <_strtod_l+0x158>
 8006f88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006f8a:	195a      	adds	r2, r3, r5
 8006f8c:	921d      	str	r2, [sp, #116]	; 0x74
 8006f8e:	5d5b      	ldrb	r3, [r3, r5]
 8006f90:	2f00      	cmp	r7, #0
 8006f92:	d037      	beq.n	8007004 <_strtod_l+0x254>
 8006f94:	9007      	str	r0, [sp, #28]
 8006f96:	463d      	mov	r5, r7
 8006f98:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006f9c:	2a09      	cmp	r2, #9
 8006f9e:	d912      	bls.n	8006fc6 <_strtod_l+0x216>
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	e7c2      	b.n	8006f2a <_strtod_l+0x17a>
 8006fa4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006fa6:	1c5a      	adds	r2, r3, #1
 8006fa8:	921d      	str	r2, [sp, #116]	; 0x74
 8006faa:	785b      	ldrb	r3, [r3, #1]
 8006fac:	3001      	adds	r0, #1
 8006fae:	2b30      	cmp	r3, #48	; 0x30
 8006fb0:	d0f8      	beq.n	8006fa4 <_strtod_l+0x1f4>
 8006fb2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006fb6:	2a08      	cmp	r2, #8
 8006fb8:	f200 84db 	bhi.w	8007972 <_strtod_l+0xbc2>
 8006fbc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006fbe:	9007      	str	r0, [sp, #28]
 8006fc0:	2000      	movs	r0, #0
 8006fc2:	920a      	str	r2, [sp, #40]	; 0x28
 8006fc4:	4605      	mov	r5, r0
 8006fc6:	3b30      	subs	r3, #48	; 0x30
 8006fc8:	f100 0201 	add.w	r2, r0, #1
 8006fcc:	d014      	beq.n	8006ff8 <_strtod_l+0x248>
 8006fce:	9907      	ldr	r1, [sp, #28]
 8006fd0:	4411      	add	r1, r2
 8006fd2:	9107      	str	r1, [sp, #28]
 8006fd4:	462a      	mov	r2, r5
 8006fd6:	eb00 0e05 	add.w	lr, r0, r5
 8006fda:	210a      	movs	r1, #10
 8006fdc:	4572      	cmp	r2, lr
 8006fde:	d113      	bne.n	8007008 <_strtod_l+0x258>
 8006fe0:	182a      	adds	r2, r5, r0
 8006fe2:	2a08      	cmp	r2, #8
 8006fe4:	f105 0501 	add.w	r5, r5, #1
 8006fe8:	4405      	add	r5, r0
 8006fea:	dc1c      	bgt.n	8007026 <_strtod_l+0x276>
 8006fec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006fee:	220a      	movs	r2, #10
 8006ff0:	fb02 3301 	mla	r3, r2, r1, r3
 8006ff4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006ffa:	1c59      	adds	r1, r3, #1
 8006ffc:	911d      	str	r1, [sp, #116]	; 0x74
 8006ffe:	785b      	ldrb	r3, [r3, #1]
 8007000:	4610      	mov	r0, r2
 8007002:	e7c9      	b.n	8006f98 <_strtod_l+0x1e8>
 8007004:	4638      	mov	r0, r7
 8007006:	e7d2      	b.n	8006fae <_strtod_l+0x1fe>
 8007008:	2a08      	cmp	r2, #8
 800700a:	dc04      	bgt.n	8007016 <_strtod_l+0x266>
 800700c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800700e:	434e      	muls	r6, r1
 8007010:	9609      	str	r6, [sp, #36]	; 0x24
 8007012:	3201      	adds	r2, #1
 8007014:	e7e2      	b.n	8006fdc <_strtod_l+0x22c>
 8007016:	f102 0c01 	add.w	ip, r2, #1
 800701a:	f1bc 0f10 	cmp.w	ip, #16
 800701e:	bfd8      	it	le
 8007020:	fb01 f909 	mulle.w	r9, r1, r9
 8007024:	e7f5      	b.n	8007012 <_strtod_l+0x262>
 8007026:	2d10      	cmp	r5, #16
 8007028:	bfdc      	itt	le
 800702a:	220a      	movle	r2, #10
 800702c:	fb02 3909 	mlale	r9, r2, r9, r3
 8007030:	e7e1      	b.n	8006ff6 <_strtod_l+0x246>
 8007032:	2300      	movs	r3, #0
 8007034:	9307      	str	r3, [sp, #28]
 8007036:	2201      	movs	r2, #1
 8007038:	e77c      	b.n	8006f34 <_strtod_l+0x184>
 800703a:	f04f 0c00 	mov.w	ip, #0
 800703e:	f108 0302 	add.w	r3, r8, #2
 8007042:	931d      	str	r3, [sp, #116]	; 0x74
 8007044:	f898 3002 	ldrb.w	r3, [r8, #2]
 8007048:	e785      	b.n	8006f56 <_strtod_l+0x1a6>
 800704a:	f04f 0c01 	mov.w	ip, #1
 800704e:	e7f6      	b.n	800703e <_strtod_l+0x28e>
 8007050:	0800b6a4 	.word	0x0800b6a4
 8007054:	0800b3ec 	.word	0x0800b3ec
 8007058:	7ff00000 	.word	0x7ff00000
 800705c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800705e:	1c59      	adds	r1, r3, #1
 8007060:	911d      	str	r1, [sp, #116]	; 0x74
 8007062:	785b      	ldrb	r3, [r3, #1]
 8007064:	2b30      	cmp	r3, #48	; 0x30
 8007066:	d0f9      	beq.n	800705c <_strtod_l+0x2ac>
 8007068:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800706c:	2908      	cmp	r1, #8
 800706e:	f63f af79 	bhi.w	8006f64 <_strtod_l+0x1b4>
 8007072:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8007076:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007078:	9308      	str	r3, [sp, #32]
 800707a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800707c:	1c59      	adds	r1, r3, #1
 800707e:	911d      	str	r1, [sp, #116]	; 0x74
 8007080:	785b      	ldrb	r3, [r3, #1]
 8007082:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8007086:	2e09      	cmp	r6, #9
 8007088:	d937      	bls.n	80070fa <_strtod_l+0x34a>
 800708a:	9e08      	ldr	r6, [sp, #32]
 800708c:	1b89      	subs	r1, r1, r6
 800708e:	2908      	cmp	r1, #8
 8007090:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007094:	dc02      	bgt.n	800709c <_strtod_l+0x2ec>
 8007096:	4576      	cmp	r6, lr
 8007098:	bfa8      	it	ge
 800709a:	4676      	movge	r6, lr
 800709c:	f1bc 0f00 	cmp.w	ip, #0
 80070a0:	d000      	beq.n	80070a4 <_strtod_l+0x2f4>
 80070a2:	4276      	negs	r6, r6
 80070a4:	2d00      	cmp	r5, #0
 80070a6:	d14f      	bne.n	8007148 <_strtod_l+0x398>
 80070a8:	9904      	ldr	r1, [sp, #16]
 80070aa:	4301      	orrs	r1, r0
 80070ac:	f47f aec2 	bne.w	8006e34 <_strtod_l+0x84>
 80070b0:	2a00      	cmp	r2, #0
 80070b2:	f47f aedb 	bne.w	8006e6c <_strtod_l+0xbc>
 80070b6:	2b69      	cmp	r3, #105	; 0x69
 80070b8:	d027      	beq.n	800710a <_strtod_l+0x35a>
 80070ba:	dc24      	bgt.n	8007106 <_strtod_l+0x356>
 80070bc:	2b49      	cmp	r3, #73	; 0x49
 80070be:	d024      	beq.n	800710a <_strtod_l+0x35a>
 80070c0:	2b4e      	cmp	r3, #78	; 0x4e
 80070c2:	f47f aed3 	bne.w	8006e6c <_strtod_l+0xbc>
 80070c6:	499e      	ldr	r1, [pc, #632]	; (8007340 <_strtod_l+0x590>)
 80070c8:	a81d      	add	r0, sp, #116	; 0x74
 80070ca:	f002 f8b7 	bl	800923c <__match>
 80070ce:	2800      	cmp	r0, #0
 80070d0:	f43f aecc 	beq.w	8006e6c <_strtod_l+0xbc>
 80070d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	2b28      	cmp	r3, #40	; 0x28
 80070da:	d12d      	bne.n	8007138 <_strtod_l+0x388>
 80070dc:	4999      	ldr	r1, [pc, #612]	; (8007344 <_strtod_l+0x594>)
 80070de:	aa20      	add	r2, sp, #128	; 0x80
 80070e0:	a81d      	add	r0, sp, #116	; 0x74
 80070e2:	f002 f8bf 	bl	8009264 <__hexnan>
 80070e6:	2805      	cmp	r0, #5
 80070e8:	d126      	bne.n	8007138 <_strtod_l+0x388>
 80070ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070ec:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80070f0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80070f4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80070f8:	e69c      	b.n	8006e34 <_strtod_l+0x84>
 80070fa:	210a      	movs	r1, #10
 80070fc:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007100:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007104:	e7b9      	b.n	800707a <_strtod_l+0x2ca>
 8007106:	2b6e      	cmp	r3, #110	; 0x6e
 8007108:	e7db      	b.n	80070c2 <_strtod_l+0x312>
 800710a:	498f      	ldr	r1, [pc, #572]	; (8007348 <_strtod_l+0x598>)
 800710c:	a81d      	add	r0, sp, #116	; 0x74
 800710e:	f002 f895 	bl	800923c <__match>
 8007112:	2800      	cmp	r0, #0
 8007114:	f43f aeaa 	beq.w	8006e6c <_strtod_l+0xbc>
 8007118:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800711a:	498c      	ldr	r1, [pc, #560]	; (800734c <_strtod_l+0x59c>)
 800711c:	3b01      	subs	r3, #1
 800711e:	a81d      	add	r0, sp, #116	; 0x74
 8007120:	931d      	str	r3, [sp, #116]	; 0x74
 8007122:	f002 f88b 	bl	800923c <__match>
 8007126:	b910      	cbnz	r0, 800712e <_strtod_l+0x37e>
 8007128:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800712a:	3301      	adds	r3, #1
 800712c:	931d      	str	r3, [sp, #116]	; 0x74
 800712e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800735c <_strtod_l+0x5ac>
 8007132:	f04f 0a00 	mov.w	sl, #0
 8007136:	e67d      	b.n	8006e34 <_strtod_l+0x84>
 8007138:	4885      	ldr	r0, [pc, #532]	; (8007350 <_strtod_l+0x5a0>)
 800713a:	f003 f929 	bl	800a390 <nan>
 800713e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007142:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007146:	e675      	b.n	8006e34 <_strtod_l+0x84>
 8007148:	9b07      	ldr	r3, [sp, #28]
 800714a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800714c:	1af3      	subs	r3, r6, r3
 800714e:	2f00      	cmp	r7, #0
 8007150:	bf08      	it	eq
 8007152:	462f      	moveq	r7, r5
 8007154:	2d10      	cmp	r5, #16
 8007156:	9308      	str	r3, [sp, #32]
 8007158:	46a8      	mov	r8, r5
 800715a:	bfa8      	it	ge
 800715c:	f04f 0810 	movge.w	r8, #16
 8007160:	f7f9 f9d0 	bl	8000504 <__aeabi_ui2d>
 8007164:	2d09      	cmp	r5, #9
 8007166:	4682      	mov	sl, r0
 8007168:	468b      	mov	fp, r1
 800716a:	dd13      	ble.n	8007194 <_strtod_l+0x3e4>
 800716c:	4b79      	ldr	r3, [pc, #484]	; (8007354 <_strtod_l+0x5a4>)
 800716e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007172:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007176:	f7f9 fa3f 	bl	80005f8 <__aeabi_dmul>
 800717a:	4682      	mov	sl, r0
 800717c:	4648      	mov	r0, r9
 800717e:	468b      	mov	fp, r1
 8007180:	f7f9 f9c0 	bl	8000504 <__aeabi_ui2d>
 8007184:	4602      	mov	r2, r0
 8007186:	460b      	mov	r3, r1
 8007188:	4650      	mov	r0, sl
 800718a:	4659      	mov	r1, fp
 800718c:	f7f9 f87e 	bl	800028c <__adddf3>
 8007190:	4682      	mov	sl, r0
 8007192:	468b      	mov	fp, r1
 8007194:	2d0f      	cmp	r5, #15
 8007196:	dc38      	bgt.n	800720a <_strtod_l+0x45a>
 8007198:	9b08      	ldr	r3, [sp, #32]
 800719a:	2b00      	cmp	r3, #0
 800719c:	f43f ae4a 	beq.w	8006e34 <_strtod_l+0x84>
 80071a0:	dd24      	ble.n	80071ec <_strtod_l+0x43c>
 80071a2:	2b16      	cmp	r3, #22
 80071a4:	dc0b      	bgt.n	80071be <_strtod_l+0x40e>
 80071a6:	4d6b      	ldr	r5, [pc, #428]	; (8007354 <_strtod_l+0x5a4>)
 80071a8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80071ac:	e9d5 0100 	ldrd	r0, r1, [r5]
 80071b0:	4652      	mov	r2, sl
 80071b2:	465b      	mov	r3, fp
 80071b4:	f7f9 fa20 	bl	80005f8 <__aeabi_dmul>
 80071b8:	4682      	mov	sl, r0
 80071ba:	468b      	mov	fp, r1
 80071bc:	e63a      	b.n	8006e34 <_strtod_l+0x84>
 80071be:	9a08      	ldr	r2, [sp, #32]
 80071c0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80071c4:	4293      	cmp	r3, r2
 80071c6:	db20      	blt.n	800720a <_strtod_l+0x45a>
 80071c8:	4c62      	ldr	r4, [pc, #392]	; (8007354 <_strtod_l+0x5a4>)
 80071ca:	f1c5 050f 	rsb	r5, r5, #15
 80071ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80071d2:	4652      	mov	r2, sl
 80071d4:	465b      	mov	r3, fp
 80071d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071da:	f7f9 fa0d 	bl	80005f8 <__aeabi_dmul>
 80071de:	9b08      	ldr	r3, [sp, #32]
 80071e0:	1b5d      	subs	r5, r3, r5
 80071e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80071e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80071ea:	e7e3      	b.n	80071b4 <_strtod_l+0x404>
 80071ec:	9b08      	ldr	r3, [sp, #32]
 80071ee:	3316      	adds	r3, #22
 80071f0:	db0b      	blt.n	800720a <_strtod_l+0x45a>
 80071f2:	9b07      	ldr	r3, [sp, #28]
 80071f4:	4a57      	ldr	r2, [pc, #348]	; (8007354 <_strtod_l+0x5a4>)
 80071f6:	1b9e      	subs	r6, r3, r6
 80071f8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80071fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007200:	4650      	mov	r0, sl
 8007202:	4659      	mov	r1, fp
 8007204:	f7f9 fb22 	bl	800084c <__aeabi_ddiv>
 8007208:	e7d6      	b.n	80071b8 <_strtod_l+0x408>
 800720a:	9b08      	ldr	r3, [sp, #32]
 800720c:	eba5 0808 	sub.w	r8, r5, r8
 8007210:	4498      	add	r8, r3
 8007212:	f1b8 0f00 	cmp.w	r8, #0
 8007216:	dd71      	ble.n	80072fc <_strtod_l+0x54c>
 8007218:	f018 030f 	ands.w	r3, r8, #15
 800721c:	d00a      	beq.n	8007234 <_strtod_l+0x484>
 800721e:	494d      	ldr	r1, [pc, #308]	; (8007354 <_strtod_l+0x5a4>)
 8007220:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007224:	4652      	mov	r2, sl
 8007226:	465b      	mov	r3, fp
 8007228:	e9d1 0100 	ldrd	r0, r1, [r1]
 800722c:	f7f9 f9e4 	bl	80005f8 <__aeabi_dmul>
 8007230:	4682      	mov	sl, r0
 8007232:	468b      	mov	fp, r1
 8007234:	f038 080f 	bics.w	r8, r8, #15
 8007238:	d04d      	beq.n	80072d6 <_strtod_l+0x526>
 800723a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800723e:	dd22      	ble.n	8007286 <_strtod_l+0x4d6>
 8007240:	2500      	movs	r5, #0
 8007242:	462e      	mov	r6, r5
 8007244:	9509      	str	r5, [sp, #36]	; 0x24
 8007246:	9507      	str	r5, [sp, #28]
 8007248:	2322      	movs	r3, #34	; 0x22
 800724a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800735c <_strtod_l+0x5ac>
 800724e:	6023      	str	r3, [r4, #0]
 8007250:	f04f 0a00 	mov.w	sl, #0
 8007254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007256:	2b00      	cmp	r3, #0
 8007258:	f43f adec 	beq.w	8006e34 <_strtod_l+0x84>
 800725c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800725e:	4620      	mov	r0, r4
 8007260:	f002 f966 	bl	8009530 <_Bfree>
 8007264:	9907      	ldr	r1, [sp, #28]
 8007266:	4620      	mov	r0, r4
 8007268:	f002 f962 	bl	8009530 <_Bfree>
 800726c:	4631      	mov	r1, r6
 800726e:	4620      	mov	r0, r4
 8007270:	f002 f95e 	bl	8009530 <_Bfree>
 8007274:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007276:	4620      	mov	r0, r4
 8007278:	f002 f95a 	bl	8009530 <_Bfree>
 800727c:	4629      	mov	r1, r5
 800727e:	4620      	mov	r0, r4
 8007280:	f002 f956 	bl	8009530 <_Bfree>
 8007284:	e5d6      	b.n	8006e34 <_strtod_l+0x84>
 8007286:	2300      	movs	r3, #0
 8007288:	ea4f 1828 	mov.w	r8, r8, asr #4
 800728c:	4650      	mov	r0, sl
 800728e:	4659      	mov	r1, fp
 8007290:	4699      	mov	r9, r3
 8007292:	f1b8 0f01 	cmp.w	r8, #1
 8007296:	dc21      	bgt.n	80072dc <_strtod_l+0x52c>
 8007298:	b10b      	cbz	r3, 800729e <_strtod_l+0x4ee>
 800729a:	4682      	mov	sl, r0
 800729c:	468b      	mov	fp, r1
 800729e:	4b2e      	ldr	r3, [pc, #184]	; (8007358 <_strtod_l+0x5a8>)
 80072a0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80072a4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80072a8:	4652      	mov	r2, sl
 80072aa:	465b      	mov	r3, fp
 80072ac:	e9d9 0100 	ldrd	r0, r1, [r9]
 80072b0:	f7f9 f9a2 	bl	80005f8 <__aeabi_dmul>
 80072b4:	4b29      	ldr	r3, [pc, #164]	; (800735c <_strtod_l+0x5ac>)
 80072b6:	460a      	mov	r2, r1
 80072b8:	400b      	ands	r3, r1
 80072ba:	4929      	ldr	r1, [pc, #164]	; (8007360 <_strtod_l+0x5b0>)
 80072bc:	428b      	cmp	r3, r1
 80072be:	4682      	mov	sl, r0
 80072c0:	d8be      	bhi.n	8007240 <_strtod_l+0x490>
 80072c2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80072c6:	428b      	cmp	r3, r1
 80072c8:	bf86      	itte	hi
 80072ca:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8007364 <_strtod_l+0x5b4>
 80072ce:	f04f 3aff 	movhi.w	sl, #4294967295
 80072d2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80072d6:	2300      	movs	r3, #0
 80072d8:	9304      	str	r3, [sp, #16]
 80072da:	e081      	b.n	80073e0 <_strtod_l+0x630>
 80072dc:	f018 0f01 	tst.w	r8, #1
 80072e0:	d007      	beq.n	80072f2 <_strtod_l+0x542>
 80072e2:	4b1d      	ldr	r3, [pc, #116]	; (8007358 <_strtod_l+0x5a8>)
 80072e4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80072e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ec:	f7f9 f984 	bl	80005f8 <__aeabi_dmul>
 80072f0:	2301      	movs	r3, #1
 80072f2:	f109 0901 	add.w	r9, r9, #1
 80072f6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80072fa:	e7ca      	b.n	8007292 <_strtod_l+0x4e2>
 80072fc:	d0eb      	beq.n	80072d6 <_strtod_l+0x526>
 80072fe:	f1c8 0800 	rsb	r8, r8, #0
 8007302:	f018 020f 	ands.w	r2, r8, #15
 8007306:	d00a      	beq.n	800731e <_strtod_l+0x56e>
 8007308:	4b12      	ldr	r3, [pc, #72]	; (8007354 <_strtod_l+0x5a4>)
 800730a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800730e:	4650      	mov	r0, sl
 8007310:	4659      	mov	r1, fp
 8007312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007316:	f7f9 fa99 	bl	800084c <__aeabi_ddiv>
 800731a:	4682      	mov	sl, r0
 800731c:	468b      	mov	fp, r1
 800731e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007322:	d0d8      	beq.n	80072d6 <_strtod_l+0x526>
 8007324:	f1b8 0f1f 	cmp.w	r8, #31
 8007328:	dd1e      	ble.n	8007368 <_strtod_l+0x5b8>
 800732a:	2500      	movs	r5, #0
 800732c:	462e      	mov	r6, r5
 800732e:	9509      	str	r5, [sp, #36]	; 0x24
 8007330:	9507      	str	r5, [sp, #28]
 8007332:	2322      	movs	r3, #34	; 0x22
 8007334:	f04f 0a00 	mov.w	sl, #0
 8007338:	f04f 0b00 	mov.w	fp, #0
 800733c:	6023      	str	r3, [r4, #0]
 800733e:	e789      	b.n	8007254 <_strtod_l+0x4a4>
 8007340:	0800b3bd 	.word	0x0800b3bd
 8007344:	0800b400 	.word	0x0800b400
 8007348:	0800b3b5 	.word	0x0800b3b5
 800734c:	0800b544 	.word	0x0800b544
 8007350:	0800b860 	.word	0x0800b860
 8007354:	0800b740 	.word	0x0800b740
 8007358:	0800b718 	.word	0x0800b718
 800735c:	7ff00000 	.word	0x7ff00000
 8007360:	7ca00000 	.word	0x7ca00000
 8007364:	7fefffff 	.word	0x7fefffff
 8007368:	f018 0310 	ands.w	r3, r8, #16
 800736c:	bf18      	it	ne
 800736e:	236a      	movne	r3, #106	; 0x6a
 8007370:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8007728 <_strtod_l+0x978>
 8007374:	9304      	str	r3, [sp, #16]
 8007376:	4650      	mov	r0, sl
 8007378:	4659      	mov	r1, fp
 800737a:	2300      	movs	r3, #0
 800737c:	f018 0f01 	tst.w	r8, #1
 8007380:	d004      	beq.n	800738c <_strtod_l+0x5dc>
 8007382:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007386:	f7f9 f937 	bl	80005f8 <__aeabi_dmul>
 800738a:	2301      	movs	r3, #1
 800738c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007390:	f109 0908 	add.w	r9, r9, #8
 8007394:	d1f2      	bne.n	800737c <_strtod_l+0x5cc>
 8007396:	b10b      	cbz	r3, 800739c <_strtod_l+0x5ec>
 8007398:	4682      	mov	sl, r0
 800739a:	468b      	mov	fp, r1
 800739c:	9b04      	ldr	r3, [sp, #16]
 800739e:	b1bb      	cbz	r3, 80073d0 <_strtod_l+0x620>
 80073a0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80073a4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	4659      	mov	r1, fp
 80073ac:	dd10      	ble.n	80073d0 <_strtod_l+0x620>
 80073ae:	2b1f      	cmp	r3, #31
 80073b0:	f340 8128 	ble.w	8007604 <_strtod_l+0x854>
 80073b4:	2b34      	cmp	r3, #52	; 0x34
 80073b6:	bfde      	ittt	le
 80073b8:	3b20      	suble	r3, #32
 80073ba:	f04f 32ff 	movle.w	r2, #4294967295
 80073be:	fa02 f303 	lslle.w	r3, r2, r3
 80073c2:	f04f 0a00 	mov.w	sl, #0
 80073c6:	bfcc      	ite	gt
 80073c8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80073cc:	ea03 0b01 	andle.w	fp, r3, r1
 80073d0:	2200      	movs	r2, #0
 80073d2:	2300      	movs	r3, #0
 80073d4:	4650      	mov	r0, sl
 80073d6:	4659      	mov	r1, fp
 80073d8:	f7f9 fb76 	bl	8000ac8 <__aeabi_dcmpeq>
 80073dc:	2800      	cmp	r0, #0
 80073de:	d1a4      	bne.n	800732a <_strtod_l+0x57a>
 80073e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073e2:	9300      	str	r3, [sp, #0]
 80073e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80073e6:	462b      	mov	r3, r5
 80073e8:	463a      	mov	r2, r7
 80073ea:	4620      	mov	r0, r4
 80073ec:	f002 f90c 	bl	8009608 <__s2b>
 80073f0:	9009      	str	r0, [sp, #36]	; 0x24
 80073f2:	2800      	cmp	r0, #0
 80073f4:	f43f af24 	beq.w	8007240 <_strtod_l+0x490>
 80073f8:	9b07      	ldr	r3, [sp, #28]
 80073fa:	1b9e      	subs	r6, r3, r6
 80073fc:	9b08      	ldr	r3, [sp, #32]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	bfb4      	ite	lt
 8007402:	4633      	movlt	r3, r6
 8007404:	2300      	movge	r3, #0
 8007406:	9310      	str	r3, [sp, #64]	; 0x40
 8007408:	9b08      	ldr	r3, [sp, #32]
 800740a:	2500      	movs	r5, #0
 800740c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007410:	9318      	str	r3, [sp, #96]	; 0x60
 8007412:	462e      	mov	r6, r5
 8007414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007416:	4620      	mov	r0, r4
 8007418:	6859      	ldr	r1, [r3, #4]
 800741a:	f002 f849 	bl	80094b0 <_Balloc>
 800741e:	9007      	str	r0, [sp, #28]
 8007420:	2800      	cmp	r0, #0
 8007422:	f43f af11 	beq.w	8007248 <_strtod_l+0x498>
 8007426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007428:	691a      	ldr	r2, [r3, #16]
 800742a:	3202      	adds	r2, #2
 800742c:	f103 010c 	add.w	r1, r3, #12
 8007430:	0092      	lsls	r2, r2, #2
 8007432:	300c      	adds	r0, #12
 8007434:	f7fe fbc2 	bl	8005bbc <memcpy>
 8007438:	ec4b ab10 	vmov	d0, sl, fp
 800743c:	aa20      	add	r2, sp, #128	; 0x80
 800743e:	a91f      	add	r1, sp, #124	; 0x7c
 8007440:	4620      	mov	r0, r4
 8007442:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8007446:	f002 fc1b 	bl	8009c80 <__d2b>
 800744a:	901e      	str	r0, [sp, #120]	; 0x78
 800744c:	2800      	cmp	r0, #0
 800744e:	f43f aefb 	beq.w	8007248 <_strtod_l+0x498>
 8007452:	2101      	movs	r1, #1
 8007454:	4620      	mov	r0, r4
 8007456:	f002 f971 	bl	800973c <__i2b>
 800745a:	4606      	mov	r6, r0
 800745c:	2800      	cmp	r0, #0
 800745e:	f43f aef3 	beq.w	8007248 <_strtod_l+0x498>
 8007462:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007464:	9904      	ldr	r1, [sp, #16]
 8007466:	2b00      	cmp	r3, #0
 8007468:	bfab      	itete	ge
 800746a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800746c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800746e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8007470:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8007474:	bfac      	ite	ge
 8007476:	eb03 0902 	addge.w	r9, r3, r2
 800747a:	1ad7      	sublt	r7, r2, r3
 800747c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800747e:	eba3 0801 	sub.w	r8, r3, r1
 8007482:	4490      	add	r8, r2
 8007484:	4ba3      	ldr	r3, [pc, #652]	; (8007714 <_strtod_l+0x964>)
 8007486:	f108 38ff 	add.w	r8, r8, #4294967295
 800748a:	4598      	cmp	r8, r3
 800748c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007490:	f280 80cc 	bge.w	800762c <_strtod_l+0x87c>
 8007494:	eba3 0308 	sub.w	r3, r3, r8
 8007498:	2b1f      	cmp	r3, #31
 800749a:	eba2 0203 	sub.w	r2, r2, r3
 800749e:	f04f 0101 	mov.w	r1, #1
 80074a2:	f300 80b6 	bgt.w	8007612 <_strtod_l+0x862>
 80074a6:	fa01 f303 	lsl.w	r3, r1, r3
 80074aa:	9311      	str	r3, [sp, #68]	; 0x44
 80074ac:	2300      	movs	r3, #0
 80074ae:	930c      	str	r3, [sp, #48]	; 0x30
 80074b0:	eb09 0802 	add.w	r8, r9, r2
 80074b4:	9b04      	ldr	r3, [sp, #16]
 80074b6:	45c1      	cmp	r9, r8
 80074b8:	4417      	add	r7, r2
 80074ba:	441f      	add	r7, r3
 80074bc:	464b      	mov	r3, r9
 80074be:	bfa8      	it	ge
 80074c0:	4643      	movge	r3, r8
 80074c2:	42bb      	cmp	r3, r7
 80074c4:	bfa8      	it	ge
 80074c6:	463b      	movge	r3, r7
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	bfc2      	ittt	gt
 80074cc:	eba8 0803 	subgt.w	r8, r8, r3
 80074d0:	1aff      	subgt	r7, r7, r3
 80074d2:	eba9 0903 	subgt.w	r9, r9, r3
 80074d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80074d8:	2b00      	cmp	r3, #0
 80074da:	dd17      	ble.n	800750c <_strtod_l+0x75c>
 80074dc:	4631      	mov	r1, r6
 80074de:	461a      	mov	r2, r3
 80074e0:	4620      	mov	r0, r4
 80074e2:	f002 f9e7 	bl	80098b4 <__pow5mult>
 80074e6:	4606      	mov	r6, r0
 80074e8:	2800      	cmp	r0, #0
 80074ea:	f43f aead 	beq.w	8007248 <_strtod_l+0x498>
 80074ee:	4601      	mov	r1, r0
 80074f0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80074f2:	4620      	mov	r0, r4
 80074f4:	f002 f938 	bl	8009768 <__multiply>
 80074f8:	900f      	str	r0, [sp, #60]	; 0x3c
 80074fa:	2800      	cmp	r0, #0
 80074fc:	f43f aea4 	beq.w	8007248 <_strtod_l+0x498>
 8007500:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007502:	4620      	mov	r0, r4
 8007504:	f002 f814 	bl	8009530 <_Bfree>
 8007508:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800750a:	931e      	str	r3, [sp, #120]	; 0x78
 800750c:	f1b8 0f00 	cmp.w	r8, #0
 8007510:	f300 8091 	bgt.w	8007636 <_strtod_l+0x886>
 8007514:	9b08      	ldr	r3, [sp, #32]
 8007516:	2b00      	cmp	r3, #0
 8007518:	dd08      	ble.n	800752c <_strtod_l+0x77c>
 800751a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800751c:	9907      	ldr	r1, [sp, #28]
 800751e:	4620      	mov	r0, r4
 8007520:	f002 f9c8 	bl	80098b4 <__pow5mult>
 8007524:	9007      	str	r0, [sp, #28]
 8007526:	2800      	cmp	r0, #0
 8007528:	f43f ae8e 	beq.w	8007248 <_strtod_l+0x498>
 800752c:	2f00      	cmp	r7, #0
 800752e:	dd08      	ble.n	8007542 <_strtod_l+0x792>
 8007530:	9907      	ldr	r1, [sp, #28]
 8007532:	463a      	mov	r2, r7
 8007534:	4620      	mov	r0, r4
 8007536:	f002 fa17 	bl	8009968 <__lshift>
 800753a:	9007      	str	r0, [sp, #28]
 800753c:	2800      	cmp	r0, #0
 800753e:	f43f ae83 	beq.w	8007248 <_strtod_l+0x498>
 8007542:	f1b9 0f00 	cmp.w	r9, #0
 8007546:	dd08      	ble.n	800755a <_strtod_l+0x7aa>
 8007548:	4631      	mov	r1, r6
 800754a:	464a      	mov	r2, r9
 800754c:	4620      	mov	r0, r4
 800754e:	f002 fa0b 	bl	8009968 <__lshift>
 8007552:	4606      	mov	r6, r0
 8007554:	2800      	cmp	r0, #0
 8007556:	f43f ae77 	beq.w	8007248 <_strtod_l+0x498>
 800755a:	9a07      	ldr	r2, [sp, #28]
 800755c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800755e:	4620      	mov	r0, r4
 8007560:	f002 fa8a 	bl	8009a78 <__mdiff>
 8007564:	4605      	mov	r5, r0
 8007566:	2800      	cmp	r0, #0
 8007568:	f43f ae6e 	beq.w	8007248 <_strtod_l+0x498>
 800756c:	68c3      	ldr	r3, [r0, #12]
 800756e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007570:	2300      	movs	r3, #0
 8007572:	60c3      	str	r3, [r0, #12]
 8007574:	4631      	mov	r1, r6
 8007576:	f002 fa63 	bl	8009a40 <__mcmp>
 800757a:	2800      	cmp	r0, #0
 800757c:	da65      	bge.n	800764a <_strtod_l+0x89a>
 800757e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007580:	ea53 030a 	orrs.w	r3, r3, sl
 8007584:	f040 8087 	bne.w	8007696 <_strtod_l+0x8e6>
 8007588:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800758c:	2b00      	cmp	r3, #0
 800758e:	f040 8082 	bne.w	8007696 <_strtod_l+0x8e6>
 8007592:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007596:	0d1b      	lsrs	r3, r3, #20
 8007598:	051b      	lsls	r3, r3, #20
 800759a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800759e:	d97a      	bls.n	8007696 <_strtod_l+0x8e6>
 80075a0:	696b      	ldr	r3, [r5, #20]
 80075a2:	b913      	cbnz	r3, 80075aa <_strtod_l+0x7fa>
 80075a4:	692b      	ldr	r3, [r5, #16]
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	dd75      	ble.n	8007696 <_strtod_l+0x8e6>
 80075aa:	4629      	mov	r1, r5
 80075ac:	2201      	movs	r2, #1
 80075ae:	4620      	mov	r0, r4
 80075b0:	f002 f9da 	bl	8009968 <__lshift>
 80075b4:	4631      	mov	r1, r6
 80075b6:	4605      	mov	r5, r0
 80075b8:	f002 fa42 	bl	8009a40 <__mcmp>
 80075bc:	2800      	cmp	r0, #0
 80075be:	dd6a      	ble.n	8007696 <_strtod_l+0x8e6>
 80075c0:	9904      	ldr	r1, [sp, #16]
 80075c2:	4a55      	ldr	r2, [pc, #340]	; (8007718 <_strtod_l+0x968>)
 80075c4:	465b      	mov	r3, fp
 80075c6:	2900      	cmp	r1, #0
 80075c8:	f000 8085 	beq.w	80076d6 <_strtod_l+0x926>
 80075cc:	ea02 010b 	and.w	r1, r2, fp
 80075d0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80075d4:	dc7f      	bgt.n	80076d6 <_strtod_l+0x926>
 80075d6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80075da:	f77f aeaa 	ble.w	8007332 <_strtod_l+0x582>
 80075de:	4a4f      	ldr	r2, [pc, #316]	; (800771c <_strtod_l+0x96c>)
 80075e0:	2300      	movs	r3, #0
 80075e2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80075e6:	4650      	mov	r0, sl
 80075e8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80075ec:	4659      	mov	r1, fp
 80075ee:	f7f9 f803 	bl	80005f8 <__aeabi_dmul>
 80075f2:	460b      	mov	r3, r1
 80075f4:	4303      	orrs	r3, r0
 80075f6:	bf08      	it	eq
 80075f8:	2322      	moveq	r3, #34	; 0x22
 80075fa:	4682      	mov	sl, r0
 80075fc:	468b      	mov	fp, r1
 80075fe:	bf08      	it	eq
 8007600:	6023      	streq	r3, [r4, #0]
 8007602:	e62b      	b.n	800725c <_strtod_l+0x4ac>
 8007604:	f04f 32ff 	mov.w	r2, #4294967295
 8007608:	fa02 f303 	lsl.w	r3, r2, r3
 800760c:	ea03 0a0a 	and.w	sl, r3, sl
 8007610:	e6de      	b.n	80073d0 <_strtod_l+0x620>
 8007612:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007616:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800761a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800761e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007622:	fa01 f308 	lsl.w	r3, r1, r8
 8007626:	930c      	str	r3, [sp, #48]	; 0x30
 8007628:	9111      	str	r1, [sp, #68]	; 0x44
 800762a:	e741      	b.n	80074b0 <_strtod_l+0x700>
 800762c:	2300      	movs	r3, #0
 800762e:	930c      	str	r3, [sp, #48]	; 0x30
 8007630:	2301      	movs	r3, #1
 8007632:	9311      	str	r3, [sp, #68]	; 0x44
 8007634:	e73c      	b.n	80074b0 <_strtod_l+0x700>
 8007636:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007638:	4642      	mov	r2, r8
 800763a:	4620      	mov	r0, r4
 800763c:	f002 f994 	bl	8009968 <__lshift>
 8007640:	901e      	str	r0, [sp, #120]	; 0x78
 8007642:	2800      	cmp	r0, #0
 8007644:	f47f af66 	bne.w	8007514 <_strtod_l+0x764>
 8007648:	e5fe      	b.n	8007248 <_strtod_l+0x498>
 800764a:	465f      	mov	r7, fp
 800764c:	d16e      	bne.n	800772c <_strtod_l+0x97c>
 800764e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007650:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007654:	b342      	cbz	r2, 80076a8 <_strtod_l+0x8f8>
 8007656:	4a32      	ldr	r2, [pc, #200]	; (8007720 <_strtod_l+0x970>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d128      	bne.n	80076ae <_strtod_l+0x8fe>
 800765c:	9b04      	ldr	r3, [sp, #16]
 800765e:	4650      	mov	r0, sl
 8007660:	b1eb      	cbz	r3, 800769e <_strtod_l+0x8ee>
 8007662:	4a2d      	ldr	r2, [pc, #180]	; (8007718 <_strtod_l+0x968>)
 8007664:	403a      	ands	r2, r7
 8007666:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800766a:	f04f 31ff 	mov.w	r1, #4294967295
 800766e:	d819      	bhi.n	80076a4 <_strtod_l+0x8f4>
 8007670:	0d12      	lsrs	r2, r2, #20
 8007672:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007676:	fa01 f303 	lsl.w	r3, r1, r3
 800767a:	4298      	cmp	r0, r3
 800767c:	d117      	bne.n	80076ae <_strtod_l+0x8fe>
 800767e:	4b29      	ldr	r3, [pc, #164]	; (8007724 <_strtod_l+0x974>)
 8007680:	429f      	cmp	r7, r3
 8007682:	d102      	bne.n	800768a <_strtod_l+0x8da>
 8007684:	3001      	adds	r0, #1
 8007686:	f43f addf 	beq.w	8007248 <_strtod_l+0x498>
 800768a:	4b23      	ldr	r3, [pc, #140]	; (8007718 <_strtod_l+0x968>)
 800768c:	403b      	ands	r3, r7
 800768e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007692:	f04f 0a00 	mov.w	sl, #0
 8007696:	9b04      	ldr	r3, [sp, #16]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1a0      	bne.n	80075de <_strtod_l+0x82e>
 800769c:	e5de      	b.n	800725c <_strtod_l+0x4ac>
 800769e:	f04f 33ff 	mov.w	r3, #4294967295
 80076a2:	e7ea      	b.n	800767a <_strtod_l+0x8ca>
 80076a4:	460b      	mov	r3, r1
 80076a6:	e7e8      	b.n	800767a <_strtod_l+0x8ca>
 80076a8:	ea53 030a 	orrs.w	r3, r3, sl
 80076ac:	d088      	beq.n	80075c0 <_strtod_l+0x810>
 80076ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076b0:	b1db      	cbz	r3, 80076ea <_strtod_l+0x93a>
 80076b2:	423b      	tst	r3, r7
 80076b4:	d0ef      	beq.n	8007696 <_strtod_l+0x8e6>
 80076b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076b8:	9a04      	ldr	r2, [sp, #16]
 80076ba:	4650      	mov	r0, sl
 80076bc:	4659      	mov	r1, fp
 80076be:	b1c3      	cbz	r3, 80076f2 <_strtod_l+0x942>
 80076c0:	f7ff fb58 	bl	8006d74 <sulp>
 80076c4:	4602      	mov	r2, r0
 80076c6:	460b      	mov	r3, r1
 80076c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80076cc:	f7f8 fdde 	bl	800028c <__adddf3>
 80076d0:	4682      	mov	sl, r0
 80076d2:	468b      	mov	fp, r1
 80076d4:	e7df      	b.n	8007696 <_strtod_l+0x8e6>
 80076d6:	4013      	ands	r3, r2
 80076d8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80076dc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80076e0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80076e4:	f04f 3aff 	mov.w	sl, #4294967295
 80076e8:	e7d5      	b.n	8007696 <_strtod_l+0x8e6>
 80076ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80076ec:	ea13 0f0a 	tst.w	r3, sl
 80076f0:	e7e0      	b.n	80076b4 <_strtod_l+0x904>
 80076f2:	f7ff fb3f 	bl	8006d74 <sulp>
 80076f6:	4602      	mov	r2, r0
 80076f8:	460b      	mov	r3, r1
 80076fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80076fe:	f7f8 fdc3 	bl	8000288 <__aeabi_dsub>
 8007702:	2200      	movs	r2, #0
 8007704:	2300      	movs	r3, #0
 8007706:	4682      	mov	sl, r0
 8007708:	468b      	mov	fp, r1
 800770a:	f7f9 f9dd 	bl	8000ac8 <__aeabi_dcmpeq>
 800770e:	2800      	cmp	r0, #0
 8007710:	d0c1      	beq.n	8007696 <_strtod_l+0x8e6>
 8007712:	e60e      	b.n	8007332 <_strtod_l+0x582>
 8007714:	fffffc02 	.word	0xfffffc02
 8007718:	7ff00000 	.word	0x7ff00000
 800771c:	39500000 	.word	0x39500000
 8007720:	000fffff 	.word	0x000fffff
 8007724:	7fefffff 	.word	0x7fefffff
 8007728:	0800b418 	.word	0x0800b418
 800772c:	4631      	mov	r1, r6
 800772e:	4628      	mov	r0, r5
 8007730:	f002 fb02 	bl	8009d38 <__ratio>
 8007734:	ec59 8b10 	vmov	r8, r9, d0
 8007738:	ee10 0a10 	vmov	r0, s0
 800773c:	2200      	movs	r2, #0
 800773e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007742:	4649      	mov	r1, r9
 8007744:	f7f9 f9d4 	bl	8000af0 <__aeabi_dcmple>
 8007748:	2800      	cmp	r0, #0
 800774a:	d07c      	beq.n	8007846 <_strtod_l+0xa96>
 800774c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800774e:	2b00      	cmp	r3, #0
 8007750:	d04c      	beq.n	80077ec <_strtod_l+0xa3c>
 8007752:	4b95      	ldr	r3, [pc, #596]	; (80079a8 <_strtod_l+0xbf8>)
 8007754:	2200      	movs	r2, #0
 8007756:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800775a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80079a8 <_strtod_l+0xbf8>
 800775e:	f04f 0800 	mov.w	r8, #0
 8007762:	4b92      	ldr	r3, [pc, #584]	; (80079ac <_strtod_l+0xbfc>)
 8007764:	403b      	ands	r3, r7
 8007766:	9311      	str	r3, [sp, #68]	; 0x44
 8007768:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800776a:	4b91      	ldr	r3, [pc, #580]	; (80079b0 <_strtod_l+0xc00>)
 800776c:	429a      	cmp	r2, r3
 800776e:	f040 80b2 	bne.w	80078d6 <_strtod_l+0xb26>
 8007772:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007776:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800777a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800777e:	ec4b ab10 	vmov	d0, sl, fp
 8007782:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8007786:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800778a:	f002 f9fd 	bl	8009b88 <__ulp>
 800778e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007792:	ec53 2b10 	vmov	r2, r3, d0
 8007796:	f7f8 ff2f 	bl	80005f8 <__aeabi_dmul>
 800779a:	4652      	mov	r2, sl
 800779c:	465b      	mov	r3, fp
 800779e:	f7f8 fd75 	bl	800028c <__adddf3>
 80077a2:	460b      	mov	r3, r1
 80077a4:	4981      	ldr	r1, [pc, #516]	; (80079ac <_strtod_l+0xbfc>)
 80077a6:	4a83      	ldr	r2, [pc, #524]	; (80079b4 <_strtod_l+0xc04>)
 80077a8:	4019      	ands	r1, r3
 80077aa:	4291      	cmp	r1, r2
 80077ac:	4682      	mov	sl, r0
 80077ae:	d95e      	bls.n	800786e <_strtod_l+0xabe>
 80077b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077b2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d103      	bne.n	80077c2 <_strtod_l+0xa12>
 80077ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077bc:	3301      	adds	r3, #1
 80077be:	f43f ad43 	beq.w	8007248 <_strtod_l+0x498>
 80077c2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80079c0 <_strtod_l+0xc10>
 80077c6:	f04f 3aff 	mov.w	sl, #4294967295
 80077ca:	991e      	ldr	r1, [sp, #120]	; 0x78
 80077cc:	4620      	mov	r0, r4
 80077ce:	f001 feaf 	bl	8009530 <_Bfree>
 80077d2:	9907      	ldr	r1, [sp, #28]
 80077d4:	4620      	mov	r0, r4
 80077d6:	f001 feab 	bl	8009530 <_Bfree>
 80077da:	4631      	mov	r1, r6
 80077dc:	4620      	mov	r0, r4
 80077de:	f001 fea7 	bl	8009530 <_Bfree>
 80077e2:	4629      	mov	r1, r5
 80077e4:	4620      	mov	r0, r4
 80077e6:	f001 fea3 	bl	8009530 <_Bfree>
 80077ea:	e613      	b.n	8007414 <_strtod_l+0x664>
 80077ec:	f1ba 0f00 	cmp.w	sl, #0
 80077f0:	d11b      	bne.n	800782a <_strtod_l+0xa7a>
 80077f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80077f6:	b9f3      	cbnz	r3, 8007836 <_strtod_l+0xa86>
 80077f8:	4b6b      	ldr	r3, [pc, #428]	; (80079a8 <_strtod_l+0xbf8>)
 80077fa:	2200      	movs	r2, #0
 80077fc:	4640      	mov	r0, r8
 80077fe:	4649      	mov	r1, r9
 8007800:	f7f9 f96c 	bl	8000adc <__aeabi_dcmplt>
 8007804:	b9d0      	cbnz	r0, 800783c <_strtod_l+0xa8c>
 8007806:	4640      	mov	r0, r8
 8007808:	4649      	mov	r1, r9
 800780a:	4b6b      	ldr	r3, [pc, #428]	; (80079b8 <_strtod_l+0xc08>)
 800780c:	2200      	movs	r2, #0
 800780e:	f7f8 fef3 	bl	80005f8 <__aeabi_dmul>
 8007812:	4680      	mov	r8, r0
 8007814:	4689      	mov	r9, r1
 8007816:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800781a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800781e:	931b      	str	r3, [sp, #108]	; 0x6c
 8007820:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8007824:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007828:	e79b      	b.n	8007762 <_strtod_l+0x9b2>
 800782a:	f1ba 0f01 	cmp.w	sl, #1
 800782e:	d102      	bne.n	8007836 <_strtod_l+0xa86>
 8007830:	2f00      	cmp	r7, #0
 8007832:	f43f ad7e 	beq.w	8007332 <_strtod_l+0x582>
 8007836:	4b61      	ldr	r3, [pc, #388]	; (80079bc <_strtod_l+0xc0c>)
 8007838:	2200      	movs	r2, #0
 800783a:	e78c      	b.n	8007756 <_strtod_l+0x9a6>
 800783c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80079b8 <_strtod_l+0xc08>
 8007840:	f04f 0800 	mov.w	r8, #0
 8007844:	e7e7      	b.n	8007816 <_strtod_l+0xa66>
 8007846:	4b5c      	ldr	r3, [pc, #368]	; (80079b8 <_strtod_l+0xc08>)
 8007848:	4640      	mov	r0, r8
 800784a:	4649      	mov	r1, r9
 800784c:	2200      	movs	r2, #0
 800784e:	f7f8 fed3 	bl	80005f8 <__aeabi_dmul>
 8007852:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007854:	4680      	mov	r8, r0
 8007856:	4689      	mov	r9, r1
 8007858:	b933      	cbnz	r3, 8007868 <_strtod_l+0xab8>
 800785a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800785e:	9012      	str	r0, [sp, #72]	; 0x48
 8007860:	9313      	str	r3, [sp, #76]	; 0x4c
 8007862:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8007866:	e7dd      	b.n	8007824 <_strtod_l+0xa74>
 8007868:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800786c:	e7f9      	b.n	8007862 <_strtod_l+0xab2>
 800786e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007872:	9b04      	ldr	r3, [sp, #16]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d1a8      	bne.n	80077ca <_strtod_l+0xa1a>
 8007878:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800787c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800787e:	0d1b      	lsrs	r3, r3, #20
 8007880:	051b      	lsls	r3, r3, #20
 8007882:	429a      	cmp	r2, r3
 8007884:	d1a1      	bne.n	80077ca <_strtod_l+0xa1a>
 8007886:	4640      	mov	r0, r8
 8007888:	4649      	mov	r1, r9
 800788a:	f7f9 fa15 	bl	8000cb8 <__aeabi_d2lz>
 800788e:	f7f8 fe85 	bl	800059c <__aeabi_l2d>
 8007892:	4602      	mov	r2, r0
 8007894:	460b      	mov	r3, r1
 8007896:	4640      	mov	r0, r8
 8007898:	4649      	mov	r1, r9
 800789a:	f7f8 fcf5 	bl	8000288 <__aeabi_dsub>
 800789e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80078a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078a4:	ea43 030a 	orr.w	r3, r3, sl
 80078a8:	4313      	orrs	r3, r2
 80078aa:	4680      	mov	r8, r0
 80078ac:	4689      	mov	r9, r1
 80078ae:	d053      	beq.n	8007958 <_strtod_l+0xba8>
 80078b0:	a335      	add	r3, pc, #212	; (adr r3, 8007988 <_strtod_l+0xbd8>)
 80078b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b6:	f7f9 f911 	bl	8000adc <__aeabi_dcmplt>
 80078ba:	2800      	cmp	r0, #0
 80078bc:	f47f acce 	bne.w	800725c <_strtod_l+0x4ac>
 80078c0:	a333      	add	r3, pc, #204	; (adr r3, 8007990 <_strtod_l+0xbe0>)
 80078c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c6:	4640      	mov	r0, r8
 80078c8:	4649      	mov	r1, r9
 80078ca:	f7f9 f925 	bl	8000b18 <__aeabi_dcmpgt>
 80078ce:	2800      	cmp	r0, #0
 80078d0:	f43f af7b 	beq.w	80077ca <_strtod_l+0xa1a>
 80078d4:	e4c2      	b.n	800725c <_strtod_l+0x4ac>
 80078d6:	9b04      	ldr	r3, [sp, #16]
 80078d8:	b333      	cbz	r3, 8007928 <_strtod_l+0xb78>
 80078da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80078dc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80078e0:	d822      	bhi.n	8007928 <_strtod_l+0xb78>
 80078e2:	a32d      	add	r3, pc, #180	; (adr r3, 8007998 <_strtod_l+0xbe8>)
 80078e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e8:	4640      	mov	r0, r8
 80078ea:	4649      	mov	r1, r9
 80078ec:	f7f9 f900 	bl	8000af0 <__aeabi_dcmple>
 80078f0:	b1a0      	cbz	r0, 800791c <_strtod_l+0xb6c>
 80078f2:	4649      	mov	r1, r9
 80078f4:	4640      	mov	r0, r8
 80078f6:	f7f9 f957 	bl	8000ba8 <__aeabi_d2uiz>
 80078fa:	2801      	cmp	r0, #1
 80078fc:	bf38      	it	cc
 80078fe:	2001      	movcc	r0, #1
 8007900:	f7f8 fe00 	bl	8000504 <__aeabi_ui2d>
 8007904:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007906:	4680      	mov	r8, r0
 8007908:	4689      	mov	r9, r1
 800790a:	bb13      	cbnz	r3, 8007952 <_strtod_l+0xba2>
 800790c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007910:	9014      	str	r0, [sp, #80]	; 0x50
 8007912:	9315      	str	r3, [sp, #84]	; 0x54
 8007914:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007918:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800791c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800791e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007920:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007924:	1a9b      	subs	r3, r3, r2
 8007926:	930d      	str	r3, [sp, #52]	; 0x34
 8007928:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800792c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007930:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007934:	f002 f928 	bl	8009b88 <__ulp>
 8007938:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800793c:	ec53 2b10 	vmov	r2, r3, d0
 8007940:	f7f8 fe5a 	bl	80005f8 <__aeabi_dmul>
 8007944:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007948:	f7f8 fca0 	bl	800028c <__adddf3>
 800794c:	4682      	mov	sl, r0
 800794e:	468b      	mov	fp, r1
 8007950:	e78f      	b.n	8007872 <_strtod_l+0xac2>
 8007952:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8007956:	e7dd      	b.n	8007914 <_strtod_l+0xb64>
 8007958:	a311      	add	r3, pc, #68	; (adr r3, 80079a0 <_strtod_l+0xbf0>)
 800795a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795e:	f7f9 f8bd 	bl	8000adc <__aeabi_dcmplt>
 8007962:	e7b4      	b.n	80078ce <_strtod_l+0xb1e>
 8007964:	2300      	movs	r3, #0
 8007966:	930e      	str	r3, [sp, #56]	; 0x38
 8007968:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800796a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800796c:	6013      	str	r3, [r2, #0]
 800796e:	f7ff ba65 	b.w	8006e3c <_strtod_l+0x8c>
 8007972:	2b65      	cmp	r3, #101	; 0x65
 8007974:	f43f ab5d 	beq.w	8007032 <_strtod_l+0x282>
 8007978:	2b45      	cmp	r3, #69	; 0x45
 800797a:	f43f ab5a 	beq.w	8007032 <_strtod_l+0x282>
 800797e:	2201      	movs	r2, #1
 8007980:	f7ff bb92 	b.w	80070a8 <_strtod_l+0x2f8>
 8007984:	f3af 8000 	nop.w
 8007988:	94a03595 	.word	0x94a03595
 800798c:	3fdfffff 	.word	0x3fdfffff
 8007990:	35afe535 	.word	0x35afe535
 8007994:	3fe00000 	.word	0x3fe00000
 8007998:	ffc00000 	.word	0xffc00000
 800799c:	41dfffff 	.word	0x41dfffff
 80079a0:	94a03595 	.word	0x94a03595
 80079a4:	3fcfffff 	.word	0x3fcfffff
 80079a8:	3ff00000 	.word	0x3ff00000
 80079ac:	7ff00000 	.word	0x7ff00000
 80079b0:	7fe00000 	.word	0x7fe00000
 80079b4:	7c9fffff 	.word	0x7c9fffff
 80079b8:	3fe00000 	.word	0x3fe00000
 80079bc:	bff00000 	.word	0xbff00000
 80079c0:	7fefffff 	.word	0x7fefffff

080079c4 <_strtod_r>:
 80079c4:	4b01      	ldr	r3, [pc, #4]	; (80079cc <_strtod_r+0x8>)
 80079c6:	f7ff b9f3 	b.w	8006db0 <_strtod_l>
 80079ca:	bf00      	nop
 80079cc:	200000c4 	.word	0x200000c4

080079d0 <_strtol_l.isra.0>:
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079d6:	d001      	beq.n	80079dc <_strtol_l.isra.0+0xc>
 80079d8:	2b24      	cmp	r3, #36	; 0x24
 80079da:	d906      	bls.n	80079ea <_strtol_l.isra.0+0x1a>
 80079dc:	f7fe f8b4 	bl	8005b48 <__errno>
 80079e0:	2316      	movs	r3, #22
 80079e2:	6003      	str	r3, [r0, #0]
 80079e4:	2000      	movs	r0, #0
 80079e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079ea:	4f3a      	ldr	r7, [pc, #232]	; (8007ad4 <_strtol_l.isra.0+0x104>)
 80079ec:	468e      	mov	lr, r1
 80079ee:	4676      	mov	r6, lr
 80079f0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80079f4:	5de5      	ldrb	r5, [r4, r7]
 80079f6:	f015 0508 	ands.w	r5, r5, #8
 80079fa:	d1f8      	bne.n	80079ee <_strtol_l.isra.0+0x1e>
 80079fc:	2c2d      	cmp	r4, #45	; 0x2d
 80079fe:	d134      	bne.n	8007a6a <_strtol_l.isra.0+0x9a>
 8007a00:	f89e 4000 	ldrb.w	r4, [lr]
 8007a04:	f04f 0801 	mov.w	r8, #1
 8007a08:	f106 0e02 	add.w	lr, r6, #2
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d05c      	beq.n	8007aca <_strtol_l.isra.0+0xfa>
 8007a10:	2b10      	cmp	r3, #16
 8007a12:	d10c      	bne.n	8007a2e <_strtol_l.isra.0+0x5e>
 8007a14:	2c30      	cmp	r4, #48	; 0x30
 8007a16:	d10a      	bne.n	8007a2e <_strtol_l.isra.0+0x5e>
 8007a18:	f89e 4000 	ldrb.w	r4, [lr]
 8007a1c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007a20:	2c58      	cmp	r4, #88	; 0x58
 8007a22:	d14d      	bne.n	8007ac0 <_strtol_l.isra.0+0xf0>
 8007a24:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8007a28:	2310      	movs	r3, #16
 8007a2a:	f10e 0e02 	add.w	lr, lr, #2
 8007a2e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8007a32:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007a36:	2600      	movs	r6, #0
 8007a38:	fbbc f9f3 	udiv	r9, ip, r3
 8007a3c:	4635      	mov	r5, r6
 8007a3e:	fb03 ca19 	mls	sl, r3, r9, ip
 8007a42:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007a46:	2f09      	cmp	r7, #9
 8007a48:	d818      	bhi.n	8007a7c <_strtol_l.isra.0+0xac>
 8007a4a:	463c      	mov	r4, r7
 8007a4c:	42a3      	cmp	r3, r4
 8007a4e:	dd24      	ble.n	8007a9a <_strtol_l.isra.0+0xca>
 8007a50:	2e00      	cmp	r6, #0
 8007a52:	db1f      	blt.n	8007a94 <_strtol_l.isra.0+0xc4>
 8007a54:	45a9      	cmp	r9, r5
 8007a56:	d31d      	bcc.n	8007a94 <_strtol_l.isra.0+0xc4>
 8007a58:	d101      	bne.n	8007a5e <_strtol_l.isra.0+0x8e>
 8007a5a:	45a2      	cmp	sl, r4
 8007a5c:	db1a      	blt.n	8007a94 <_strtol_l.isra.0+0xc4>
 8007a5e:	fb05 4503 	mla	r5, r5, r3, r4
 8007a62:	2601      	movs	r6, #1
 8007a64:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007a68:	e7eb      	b.n	8007a42 <_strtol_l.isra.0+0x72>
 8007a6a:	2c2b      	cmp	r4, #43	; 0x2b
 8007a6c:	bf08      	it	eq
 8007a6e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8007a72:	46a8      	mov	r8, r5
 8007a74:	bf08      	it	eq
 8007a76:	f106 0e02 	addeq.w	lr, r6, #2
 8007a7a:	e7c7      	b.n	8007a0c <_strtol_l.isra.0+0x3c>
 8007a7c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007a80:	2f19      	cmp	r7, #25
 8007a82:	d801      	bhi.n	8007a88 <_strtol_l.isra.0+0xb8>
 8007a84:	3c37      	subs	r4, #55	; 0x37
 8007a86:	e7e1      	b.n	8007a4c <_strtol_l.isra.0+0x7c>
 8007a88:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007a8c:	2f19      	cmp	r7, #25
 8007a8e:	d804      	bhi.n	8007a9a <_strtol_l.isra.0+0xca>
 8007a90:	3c57      	subs	r4, #87	; 0x57
 8007a92:	e7db      	b.n	8007a4c <_strtol_l.isra.0+0x7c>
 8007a94:	f04f 36ff 	mov.w	r6, #4294967295
 8007a98:	e7e4      	b.n	8007a64 <_strtol_l.isra.0+0x94>
 8007a9a:	2e00      	cmp	r6, #0
 8007a9c:	da05      	bge.n	8007aaa <_strtol_l.isra.0+0xda>
 8007a9e:	2322      	movs	r3, #34	; 0x22
 8007aa0:	6003      	str	r3, [r0, #0]
 8007aa2:	4665      	mov	r5, ip
 8007aa4:	b942      	cbnz	r2, 8007ab8 <_strtol_l.isra.0+0xe8>
 8007aa6:	4628      	mov	r0, r5
 8007aa8:	e79d      	b.n	80079e6 <_strtol_l.isra.0+0x16>
 8007aaa:	f1b8 0f00 	cmp.w	r8, #0
 8007aae:	d000      	beq.n	8007ab2 <_strtol_l.isra.0+0xe2>
 8007ab0:	426d      	negs	r5, r5
 8007ab2:	2a00      	cmp	r2, #0
 8007ab4:	d0f7      	beq.n	8007aa6 <_strtol_l.isra.0+0xd6>
 8007ab6:	b10e      	cbz	r6, 8007abc <_strtol_l.isra.0+0xec>
 8007ab8:	f10e 31ff 	add.w	r1, lr, #4294967295
 8007abc:	6011      	str	r1, [r2, #0]
 8007abe:	e7f2      	b.n	8007aa6 <_strtol_l.isra.0+0xd6>
 8007ac0:	2430      	movs	r4, #48	; 0x30
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1b3      	bne.n	8007a2e <_strtol_l.isra.0+0x5e>
 8007ac6:	2308      	movs	r3, #8
 8007ac8:	e7b1      	b.n	8007a2e <_strtol_l.isra.0+0x5e>
 8007aca:	2c30      	cmp	r4, #48	; 0x30
 8007acc:	d0a4      	beq.n	8007a18 <_strtol_l.isra.0+0x48>
 8007ace:	230a      	movs	r3, #10
 8007ad0:	e7ad      	b.n	8007a2e <_strtol_l.isra.0+0x5e>
 8007ad2:	bf00      	nop
 8007ad4:	0800b441 	.word	0x0800b441

08007ad8 <_strtol_r>:
 8007ad8:	f7ff bf7a 	b.w	80079d0 <_strtol_l.isra.0>

08007adc <__swbuf_r>:
 8007adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ade:	460e      	mov	r6, r1
 8007ae0:	4614      	mov	r4, r2
 8007ae2:	4605      	mov	r5, r0
 8007ae4:	b118      	cbz	r0, 8007aee <__swbuf_r+0x12>
 8007ae6:	6983      	ldr	r3, [r0, #24]
 8007ae8:	b90b      	cbnz	r3, 8007aee <__swbuf_r+0x12>
 8007aea:	f001 f84b 	bl	8008b84 <__sinit>
 8007aee:	4b21      	ldr	r3, [pc, #132]	; (8007b74 <__swbuf_r+0x98>)
 8007af0:	429c      	cmp	r4, r3
 8007af2:	d12b      	bne.n	8007b4c <__swbuf_r+0x70>
 8007af4:	686c      	ldr	r4, [r5, #4]
 8007af6:	69a3      	ldr	r3, [r4, #24]
 8007af8:	60a3      	str	r3, [r4, #8]
 8007afa:	89a3      	ldrh	r3, [r4, #12]
 8007afc:	071a      	lsls	r2, r3, #28
 8007afe:	d52f      	bpl.n	8007b60 <__swbuf_r+0x84>
 8007b00:	6923      	ldr	r3, [r4, #16]
 8007b02:	b36b      	cbz	r3, 8007b60 <__swbuf_r+0x84>
 8007b04:	6923      	ldr	r3, [r4, #16]
 8007b06:	6820      	ldr	r0, [r4, #0]
 8007b08:	1ac0      	subs	r0, r0, r3
 8007b0a:	6963      	ldr	r3, [r4, #20]
 8007b0c:	b2f6      	uxtb	r6, r6
 8007b0e:	4283      	cmp	r3, r0
 8007b10:	4637      	mov	r7, r6
 8007b12:	dc04      	bgt.n	8007b1e <__swbuf_r+0x42>
 8007b14:	4621      	mov	r1, r4
 8007b16:	4628      	mov	r0, r5
 8007b18:	f000 ffa0 	bl	8008a5c <_fflush_r>
 8007b1c:	bb30      	cbnz	r0, 8007b6c <__swbuf_r+0x90>
 8007b1e:	68a3      	ldr	r3, [r4, #8]
 8007b20:	3b01      	subs	r3, #1
 8007b22:	60a3      	str	r3, [r4, #8]
 8007b24:	6823      	ldr	r3, [r4, #0]
 8007b26:	1c5a      	adds	r2, r3, #1
 8007b28:	6022      	str	r2, [r4, #0]
 8007b2a:	701e      	strb	r6, [r3, #0]
 8007b2c:	6963      	ldr	r3, [r4, #20]
 8007b2e:	3001      	adds	r0, #1
 8007b30:	4283      	cmp	r3, r0
 8007b32:	d004      	beq.n	8007b3e <__swbuf_r+0x62>
 8007b34:	89a3      	ldrh	r3, [r4, #12]
 8007b36:	07db      	lsls	r3, r3, #31
 8007b38:	d506      	bpl.n	8007b48 <__swbuf_r+0x6c>
 8007b3a:	2e0a      	cmp	r6, #10
 8007b3c:	d104      	bne.n	8007b48 <__swbuf_r+0x6c>
 8007b3e:	4621      	mov	r1, r4
 8007b40:	4628      	mov	r0, r5
 8007b42:	f000 ff8b 	bl	8008a5c <_fflush_r>
 8007b46:	b988      	cbnz	r0, 8007b6c <__swbuf_r+0x90>
 8007b48:	4638      	mov	r0, r7
 8007b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b4c:	4b0a      	ldr	r3, [pc, #40]	; (8007b78 <__swbuf_r+0x9c>)
 8007b4e:	429c      	cmp	r4, r3
 8007b50:	d101      	bne.n	8007b56 <__swbuf_r+0x7a>
 8007b52:	68ac      	ldr	r4, [r5, #8]
 8007b54:	e7cf      	b.n	8007af6 <__swbuf_r+0x1a>
 8007b56:	4b09      	ldr	r3, [pc, #36]	; (8007b7c <__swbuf_r+0xa0>)
 8007b58:	429c      	cmp	r4, r3
 8007b5a:	bf08      	it	eq
 8007b5c:	68ec      	ldreq	r4, [r5, #12]
 8007b5e:	e7ca      	b.n	8007af6 <__swbuf_r+0x1a>
 8007b60:	4621      	mov	r1, r4
 8007b62:	4628      	mov	r0, r5
 8007b64:	f000 f80c 	bl	8007b80 <__swsetup_r>
 8007b68:	2800      	cmp	r0, #0
 8007b6a:	d0cb      	beq.n	8007b04 <__swbuf_r+0x28>
 8007b6c:	f04f 37ff 	mov.w	r7, #4294967295
 8007b70:	e7ea      	b.n	8007b48 <__swbuf_r+0x6c>
 8007b72:	bf00      	nop
 8007b74:	0800b5f8 	.word	0x0800b5f8
 8007b78:	0800b618 	.word	0x0800b618
 8007b7c:	0800b5d8 	.word	0x0800b5d8

08007b80 <__swsetup_r>:
 8007b80:	4b32      	ldr	r3, [pc, #200]	; (8007c4c <__swsetup_r+0xcc>)
 8007b82:	b570      	push	{r4, r5, r6, lr}
 8007b84:	681d      	ldr	r5, [r3, #0]
 8007b86:	4606      	mov	r6, r0
 8007b88:	460c      	mov	r4, r1
 8007b8a:	b125      	cbz	r5, 8007b96 <__swsetup_r+0x16>
 8007b8c:	69ab      	ldr	r3, [r5, #24]
 8007b8e:	b913      	cbnz	r3, 8007b96 <__swsetup_r+0x16>
 8007b90:	4628      	mov	r0, r5
 8007b92:	f000 fff7 	bl	8008b84 <__sinit>
 8007b96:	4b2e      	ldr	r3, [pc, #184]	; (8007c50 <__swsetup_r+0xd0>)
 8007b98:	429c      	cmp	r4, r3
 8007b9a:	d10f      	bne.n	8007bbc <__swsetup_r+0x3c>
 8007b9c:	686c      	ldr	r4, [r5, #4]
 8007b9e:	89a3      	ldrh	r3, [r4, #12]
 8007ba0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ba4:	0719      	lsls	r1, r3, #28
 8007ba6:	d42c      	bmi.n	8007c02 <__swsetup_r+0x82>
 8007ba8:	06dd      	lsls	r5, r3, #27
 8007baa:	d411      	bmi.n	8007bd0 <__swsetup_r+0x50>
 8007bac:	2309      	movs	r3, #9
 8007bae:	6033      	str	r3, [r6, #0]
 8007bb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007bb4:	81a3      	strh	r3, [r4, #12]
 8007bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8007bba:	e03e      	b.n	8007c3a <__swsetup_r+0xba>
 8007bbc:	4b25      	ldr	r3, [pc, #148]	; (8007c54 <__swsetup_r+0xd4>)
 8007bbe:	429c      	cmp	r4, r3
 8007bc0:	d101      	bne.n	8007bc6 <__swsetup_r+0x46>
 8007bc2:	68ac      	ldr	r4, [r5, #8]
 8007bc4:	e7eb      	b.n	8007b9e <__swsetup_r+0x1e>
 8007bc6:	4b24      	ldr	r3, [pc, #144]	; (8007c58 <__swsetup_r+0xd8>)
 8007bc8:	429c      	cmp	r4, r3
 8007bca:	bf08      	it	eq
 8007bcc:	68ec      	ldreq	r4, [r5, #12]
 8007bce:	e7e6      	b.n	8007b9e <__swsetup_r+0x1e>
 8007bd0:	0758      	lsls	r0, r3, #29
 8007bd2:	d512      	bpl.n	8007bfa <__swsetup_r+0x7a>
 8007bd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bd6:	b141      	cbz	r1, 8007bea <__swsetup_r+0x6a>
 8007bd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bdc:	4299      	cmp	r1, r3
 8007bde:	d002      	beq.n	8007be6 <__swsetup_r+0x66>
 8007be0:	4630      	mov	r0, r6
 8007be2:	f7fe f811 	bl	8005c08 <_free_r>
 8007be6:	2300      	movs	r3, #0
 8007be8:	6363      	str	r3, [r4, #52]	; 0x34
 8007bea:	89a3      	ldrh	r3, [r4, #12]
 8007bec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007bf0:	81a3      	strh	r3, [r4, #12]
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	6063      	str	r3, [r4, #4]
 8007bf6:	6923      	ldr	r3, [r4, #16]
 8007bf8:	6023      	str	r3, [r4, #0]
 8007bfa:	89a3      	ldrh	r3, [r4, #12]
 8007bfc:	f043 0308 	orr.w	r3, r3, #8
 8007c00:	81a3      	strh	r3, [r4, #12]
 8007c02:	6923      	ldr	r3, [r4, #16]
 8007c04:	b94b      	cbnz	r3, 8007c1a <__swsetup_r+0x9a>
 8007c06:	89a3      	ldrh	r3, [r4, #12]
 8007c08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c10:	d003      	beq.n	8007c1a <__swsetup_r+0x9a>
 8007c12:	4621      	mov	r1, r4
 8007c14:	4630      	mov	r0, r6
 8007c16:	f001 fbed 	bl	80093f4 <__smakebuf_r>
 8007c1a:	89a0      	ldrh	r0, [r4, #12]
 8007c1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c20:	f010 0301 	ands.w	r3, r0, #1
 8007c24:	d00a      	beq.n	8007c3c <__swsetup_r+0xbc>
 8007c26:	2300      	movs	r3, #0
 8007c28:	60a3      	str	r3, [r4, #8]
 8007c2a:	6963      	ldr	r3, [r4, #20]
 8007c2c:	425b      	negs	r3, r3
 8007c2e:	61a3      	str	r3, [r4, #24]
 8007c30:	6923      	ldr	r3, [r4, #16]
 8007c32:	b943      	cbnz	r3, 8007c46 <__swsetup_r+0xc6>
 8007c34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007c38:	d1ba      	bne.n	8007bb0 <__swsetup_r+0x30>
 8007c3a:	bd70      	pop	{r4, r5, r6, pc}
 8007c3c:	0781      	lsls	r1, r0, #30
 8007c3e:	bf58      	it	pl
 8007c40:	6963      	ldrpl	r3, [r4, #20]
 8007c42:	60a3      	str	r3, [r4, #8]
 8007c44:	e7f4      	b.n	8007c30 <__swsetup_r+0xb0>
 8007c46:	2000      	movs	r0, #0
 8007c48:	e7f7      	b.n	8007c3a <__swsetup_r+0xba>
 8007c4a:	bf00      	nop
 8007c4c:	2000005c 	.word	0x2000005c
 8007c50:	0800b5f8 	.word	0x0800b5f8
 8007c54:	0800b618 	.word	0x0800b618
 8007c58:	0800b5d8 	.word	0x0800b5d8

08007c5c <quorem>:
 8007c5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c60:	6903      	ldr	r3, [r0, #16]
 8007c62:	690c      	ldr	r4, [r1, #16]
 8007c64:	42a3      	cmp	r3, r4
 8007c66:	4607      	mov	r7, r0
 8007c68:	f2c0 8081 	blt.w	8007d6e <quorem+0x112>
 8007c6c:	3c01      	subs	r4, #1
 8007c6e:	f101 0814 	add.w	r8, r1, #20
 8007c72:	f100 0514 	add.w	r5, r0, #20
 8007c76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c7a:	9301      	str	r3, [sp, #4]
 8007c7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007c80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c84:	3301      	adds	r3, #1
 8007c86:	429a      	cmp	r2, r3
 8007c88:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007c8c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007c90:	fbb2 f6f3 	udiv	r6, r2, r3
 8007c94:	d331      	bcc.n	8007cfa <quorem+0x9e>
 8007c96:	f04f 0e00 	mov.w	lr, #0
 8007c9a:	4640      	mov	r0, r8
 8007c9c:	46ac      	mov	ip, r5
 8007c9e:	46f2      	mov	sl, lr
 8007ca0:	f850 2b04 	ldr.w	r2, [r0], #4
 8007ca4:	b293      	uxth	r3, r2
 8007ca6:	fb06 e303 	mla	r3, r6, r3, lr
 8007caa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	ebaa 0303 	sub.w	r3, sl, r3
 8007cb4:	0c12      	lsrs	r2, r2, #16
 8007cb6:	f8dc a000 	ldr.w	sl, [ip]
 8007cba:	fb06 e202 	mla	r2, r6, r2, lr
 8007cbe:	fa13 f38a 	uxtah	r3, r3, sl
 8007cc2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007cc6:	fa1f fa82 	uxth.w	sl, r2
 8007cca:	f8dc 2000 	ldr.w	r2, [ip]
 8007cce:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007cd2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007cdc:	4581      	cmp	r9, r0
 8007cde:	f84c 3b04 	str.w	r3, [ip], #4
 8007ce2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007ce6:	d2db      	bcs.n	8007ca0 <quorem+0x44>
 8007ce8:	f855 300b 	ldr.w	r3, [r5, fp]
 8007cec:	b92b      	cbnz	r3, 8007cfa <quorem+0x9e>
 8007cee:	9b01      	ldr	r3, [sp, #4]
 8007cf0:	3b04      	subs	r3, #4
 8007cf2:	429d      	cmp	r5, r3
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	d32e      	bcc.n	8007d56 <quorem+0xfa>
 8007cf8:	613c      	str	r4, [r7, #16]
 8007cfa:	4638      	mov	r0, r7
 8007cfc:	f001 fea0 	bl	8009a40 <__mcmp>
 8007d00:	2800      	cmp	r0, #0
 8007d02:	db24      	blt.n	8007d4e <quorem+0xf2>
 8007d04:	3601      	adds	r6, #1
 8007d06:	4628      	mov	r0, r5
 8007d08:	f04f 0c00 	mov.w	ip, #0
 8007d0c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007d10:	f8d0 e000 	ldr.w	lr, [r0]
 8007d14:	b293      	uxth	r3, r2
 8007d16:	ebac 0303 	sub.w	r3, ip, r3
 8007d1a:	0c12      	lsrs	r2, r2, #16
 8007d1c:	fa13 f38e 	uxtah	r3, r3, lr
 8007d20:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007d24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d2e:	45c1      	cmp	r9, r8
 8007d30:	f840 3b04 	str.w	r3, [r0], #4
 8007d34:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007d38:	d2e8      	bcs.n	8007d0c <quorem+0xb0>
 8007d3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d42:	b922      	cbnz	r2, 8007d4e <quorem+0xf2>
 8007d44:	3b04      	subs	r3, #4
 8007d46:	429d      	cmp	r5, r3
 8007d48:	461a      	mov	r2, r3
 8007d4a:	d30a      	bcc.n	8007d62 <quorem+0x106>
 8007d4c:	613c      	str	r4, [r7, #16]
 8007d4e:	4630      	mov	r0, r6
 8007d50:	b003      	add	sp, #12
 8007d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d56:	6812      	ldr	r2, [r2, #0]
 8007d58:	3b04      	subs	r3, #4
 8007d5a:	2a00      	cmp	r2, #0
 8007d5c:	d1cc      	bne.n	8007cf8 <quorem+0x9c>
 8007d5e:	3c01      	subs	r4, #1
 8007d60:	e7c7      	b.n	8007cf2 <quorem+0x96>
 8007d62:	6812      	ldr	r2, [r2, #0]
 8007d64:	3b04      	subs	r3, #4
 8007d66:	2a00      	cmp	r2, #0
 8007d68:	d1f0      	bne.n	8007d4c <quorem+0xf0>
 8007d6a:	3c01      	subs	r4, #1
 8007d6c:	e7eb      	b.n	8007d46 <quorem+0xea>
 8007d6e:	2000      	movs	r0, #0
 8007d70:	e7ee      	b.n	8007d50 <quorem+0xf4>
 8007d72:	0000      	movs	r0, r0
 8007d74:	0000      	movs	r0, r0
	...

08007d78 <_dtoa_r>:
 8007d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d7c:	ed2d 8b02 	vpush	{d8}
 8007d80:	ec57 6b10 	vmov	r6, r7, d0
 8007d84:	b095      	sub	sp, #84	; 0x54
 8007d86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007d88:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007d8c:	9105      	str	r1, [sp, #20]
 8007d8e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007d92:	4604      	mov	r4, r0
 8007d94:	9209      	str	r2, [sp, #36]	; 0x24
 8007d96:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d98:	b975      	cbnz	r5, 8007db8 <_dtoa_r+0x40>
 8007d9a:	2010      	movs	r0, #16
 8007d9c:	f7fd fefe 	bl	8005b9c <malloc>
 8007da0:	4602      	mov	r2, r0
 8007da2:	6260      	str	r0, [r4, #36]	; 0x24
 8007da4:	b920      	cbnz	r0, 8007db0 <_dtoa_r+0x38>
 8007da6:	4bb2      	ldr	r3, [pc, #712]	; (8008070 <_dtoa_r+0x2f8>)
 8007da8:	21ea      	movs	r1, #234	; 0xea
 8007daa:	48b2      	ldr	r0, [pc, #712]	; (8008074 <_dtoa_r+0x2fc>)
 8007dac:	f002 fb6c 	bl	800a488 <__assert_func>
 8007db0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007db4:	6005      	str	r5, [r0, #0]
 8007db6:	60c5      	str	r5, [r0, #12]
 8007db8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007dba:	6819      	ldr	r1, [r3, #0]
 8007dbc:	b151      	cbz	r1, 8007dd4 <_dtoa_r+0x5c>
 8007dbe:	685a      	ldr	r2, [r3, #4]
 8007dc0:	604a      	str	r2, [r1, #4]
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	4093      	lsls	r3, r2
 8007dc6:	608b      	str	r3, [r1, #8]
 8007dc8:	4620      	mov	r0, r4
 8007dca:	f001 fbb1 	bl	8009530 <_Bfree>
 8007dce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	601a      	str	r2, [r3, #0]
 8007dd4:	1e3b      	subs	r3, r7, #0
 8007dd6:	bfb9      	ittee	lt
 8007dd8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007ddc:	9303      	strlt	r3, [sp, #12]
 8007dde:	2300      	movge	r3, #0
 8007de0:	f8c8 3000 	strge.w	r3, [r8]
 8007de4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007de8:	4ba3      	ldr	r3, [pc, #652]	; (8008078 <_dtoa_r+0x300>)
 8007dea:	bfbc      	itt	lt
 8007dec:	2201      	movlt	r2, #1
 8007dee:	f8c8 2000 	strlt.w	r2, [r8]
 8007df2:	ea33 0309 	bics.w	r3, r3, r9
 8007df6:	d11b      	bne.n	8007e30 <_dtoa_r+0xb8>
 8007df8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007dfa:	f242 730f 	movw	r3, #9999	; 0x270f
 8007dfe:	6013      	str	r3, [r2, #0]
 8007e00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e04:	4333      	orrs	r3, r6
 8007e06:	f000 857a 	beq.w	80088fe <_dtoa_r+0xb86>
 8007e0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e0c:	b963      	cbnz	r3, 8007e28 <_dtoa_r+0xb0>
 8007e0e:	4b9b      	ldr	r3, [pc, #620]	; (800807c <_dtoa_r+0x304>)
 8007e10:	e024      	b.n	8007e5c <_dtoa_r+0xe4>
 8007e12:	4b9b      	ldr	r3, [pc, #620]	; (8008080 <_dtoa_r+0x308>)
 8007e14:	9300      	str	r3, [sp, #0]
 8007e16:	3308      	adds	r3, #8
 8007e18:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007e1a:	6013      	str	r3, [r2, #0]
 8007e1c:	9800      	ldr	r0, [sp, #0]
 8007e1e:	b015      	add	sp, #84	; 0x54
 8007e20:	ecbd 8b02 	vpop	{d8}
 8007e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e28:	4b94      	ldr	r3, [pc, #592]	; (800807c <_dtoa_r+0x304>)
 8007e2a:	9300      	str	r3, [sp, #0]
 8007e2c:	3303      	adds	r3, #3
 8007e2e:	e7f3      	b.n	8007e18 <_dtoa_r+0xa0>
 8007e30:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007e34:	2200      	movs	r2, #0
 8007e36:	ec51 0b17 	vmov	r0, r1, d7
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007e40:	f7f8 fe42 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e44:	4680      	mov	r8, r0
 8007e46:	b158      	cbz	r0, 8007e60 <_dtoa_r+0xe8>
 8007e48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	6013      	str	r3, [r2, #0]
 8007e4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	f000 8551 	beq.w	80088f8 <_dtoa_r+0xb80>
 8007e56:	488b      	ldr	r0, [pc, #556]	; (8008084 <_dtoa_r+0x30c>)
 8007e58:	6018      	str	r0, [r3, #0]
 8007e5a:	1e43      	subs	r3, r0, #1
 8007e5c:	9300      	str	r3, [sp, #0]
 8007e5e:	e7dd      	b.n	8007e1c <_dtoa_r+0xa4>
 8007e60:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007e64:	aa12      	add	r2, sp, #72	; 0x48
 8007e66:	a913      	add	r1, sp, #76	; 0x4c
 8007e68:	4620      	mov	r0, r4
 8007e6a:	f001 ff09 	bl	8009c80 <__d2b>
 8007e6e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007e72:	4683      	mov	fp, r0
 8007e74:	2d00      	cmp	r5, #0
 8007e76:	d07c      	beq.n	8007f72 <_dtoa_r+0x1fa>
 8007e78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e7a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007e7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e82:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007e86:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007e8a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007e8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007e92:	4b7d      	ldr	r3, [pc, #500]	; (8008088 <_dtoa_r+0x310>)
 8007e94:	2200      	movs	r2, #0
 8007e96:	4630      	mov	r0, r6
 8007e98:	4639      	mov	r1, r7
 8007e9a:	f7f8 f9f5 	bl	8000288 <__aeabi_dsub>
 8007e9e:	a36e      	add	r3, pc, #440	; (adr r3, 8008058 <_dtoa_r+0x2e0>)
 8007ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea4:	f7f8 fba8 	bl	80005f8 <__aeabi_dmul>
 8007ea8:	a36d      	add	r3, pc, #436	; (adr r3, 8008060 <_dtoa_r+0x2e8>)
 8007eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eae:	f7f8 f9ed 	bl	800028c <__adddf3>
 8007eb2:	4606      	mov	r6, r0
 8007eb4:	4628      	mov	r0, r5
 8007eb6:	460f      	mov	r7, r1
 8007eb8:	f7f8 fb34 	bl	8000524 <__aeabi_i2d>
 8007ebc:	a36a      	add	r3, pc, #424	; (adr r3, 8008068 <_dtoa_r+0x2f0>)
 8007ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec2:	f7f8 fb99 	bl	80005f8 <__aeabi_dmul>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	460b      	mov	r3, r1
 8007eca:	4630      	mov	r0, r6
 8007ecc:	4639      	mov	r1, r7
 8007ece:	f7f8 f9dd 	bl	800028c <__adddf3>
 8007ed2:	4606      	mov	r6, r0
 8007ed4:	460f      	mov	r7, r1
 8007ed6:	f7f8 fe3f 	bl	8000b58 <__aeabi_d2iz>
 8007eda:	2200      	movs	r2, #0
 8007edc:	4682      	mov	sl, r0
 8007ede:	2300      	movs	r3, #0
 8007ee0:	4630      	mov	r0, r6
 8007ee2:	4639      	mov	r1, r7
 8007ee4:	f7f8 fdfa 	bl	8000adc <__aeabi_dcmplt>
 8007ee8:	b148      	cbz	r0, 8007efe <_dtoa_r+0x186>
 8007eea:	4650      	mov	r0, sl
 8007eec:	f7f8 fb1a 	bl	8000524 <__aeabi_i2d>
 8007ef0:	4632      	mov	r2, r6
 8007ef2:	463b      	mov	r3, r7
 8007ef4:	f7f8 fde8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ef8:	b908      	cbnz	r0, 8007efe <_dtoa_r+0x186>
 8007efa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007efe:	f1ba 0f16 	cmp.w	sl, #22
 8007f02:	d854      	bhi.n	8007fae <_dtoa_r+0x236>
 8007f04:	4b61      	ldr	r3, [pc, #388]	; (800808c <_dtoa_r+0x314>)
 8007f06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007f12:	f7f8 fde3 	bl	8000adc <__aeabi_dcmplt>
 8007f16:	2800      	cmp	r0, #0
 8007f18:	d04b      	beq.n	8007fb2 <_dtoa_r+0x23a>
 8007f1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f1e:	2300      	movs	r3, #0
 8007f20:	930e      	str	r3, [sp, #56]	; 0x38
 8007f22:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007f24:	1b5d      	subs	r5, r3, r5
 8007f26:	1e6b      	subs	r3, r5, #1
 8007f28:	9304      	str	r3, [sp, #16]
 8007f2a:	bf43      	ittte	mi
 8007f2c:	2300      	movmi	r3, #0
 8007f2e:	f1c5 0801 	rsbmi	r8, r5, #1
 8007f32:	9304      	strmi	r3, [sp, #16]
 8007f34:	f04f 0800 	movpl.w	r8, #0
 8007f38:	f1ba 0f00 	cmp.w	sl, #0
 8007f3c:	db3b      	blt.n	8007fb6 <_dtoa_r+0x23e>
 8007f3e:	9b04      	ldr	r3, [sp, #16]
 8007f40:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007f44:	4453      	add	r3, sl
 8007f46:	9304      	str	r3, [sp, #16]
 8007f48:	2300      	movs	r3, #0
 8007f4a:	9306      	str	r3, [sp, #24]
 8007f4c:	9b05      	ldr	r3, [sp, #20]
 8007f4e:	2b09      	cmp	r3, #9
 8007f50:	d869      	bhi.n	8008026 <_dtoa_r+0x2ae>
 8007f52:	2b05      	cmp	r3, #5
 8007f54:	bfc4      	itt	gt
 8007f56:	3b04      	subgt	r3, #4
 8007f58:	9305      	strgt	r3, [sp, #20]
 8007f5a:	9b05      	ldr	r3, [sp, #20]
 8007f5c:	f1a3 0302 	sub.w	r3, r3, #2
 8007f60:	bfcc      	ite	gt
 8007f62:	2500      	movgt	r5, #0
 8007f64:	2501      	movle	r5, #1
 8007f66:	2b03      	cmp	r3, #3
 8007f68:	d869      	bhi.n	800803e <_dtoa_r+0x2c6>
 8007f6a:	e8df f003 	tbb	[pc, r3]
 8007f6e:	4e2c      	.short	0x4e2c
 8007f70:	5a4c      	.short	0x5a4c
 8007f72:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007f76:	441d      	add	r5, r3
 8007f78:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007f7c:	2b20      	cmp	r3, #32
 8007f7e:	bfc1      	itttt	gt
 8007f80:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007f84:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007f88:	fa09 f303 	lslgt.w	r3, r9, r3
 8007f8c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007f90:	bfda      	itte	le
 8007f92:	f1c3 0320 	rsble	r3, r3, #32
 8007f96:	fa06 f003 	lslle.w	r0, r6, r3
 8007f9a:	4318      	orrgt	r0, r3
 8007f9c:	f7f8 fab2 	bl	8000504 <__aeabi_ui2d>
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	4606      	mov	r6, r0
 8007fa4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007fa8:	3d01      	subs	r5, #1
 8007faa:	9310      	str	r3, [sp, #64]	; 0x40
 8007fac:	e771      	b.n	8007e92 <_dtoa_r+0x11a>
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e7b6      	b.n	8007f20 <_dtoa_r+0x1a8>
 8007fb2:	900e      	str	r0, [sp, #56]	; 0x38
 8007fb4:	e7b5      	b.n	8007f22 <_dtoa_r+0x1aa>
 8007fb6:	f1ca 0300 	rsb	r3, sl, #0
 8007fba:	9306      	str	r3, [sp, #24]
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	eba8 080a 	sub.w	r8, r8, sl
 8007fc2:	930d      	str	r3, [sp, #52]	; 0x34
 8007fc4:	e7c2      	b.n	8007f4c <_dtoa_r+0x1d4>
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	9308      	str	r3, [sp, #32]
 8007fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	dc39      	bgt.n	8008044 <_dtoa_r+0x2cc>
 8007fd0:	f04f 0901 	mov.w	r9, #1
 8007fd4:	f8cd 9004 	str.w	r9, [sp, #4]
 8007fd8:	464b      	mov	r3, r9
 8007fda:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007fde:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	6042      	str	r2, [r0, #4]
 8007fe4:	2204      	movs	r2, #4
 8007fe6:	f102 0614 	add.w	r6, r2, #20
 8007fea:	429e      	cmp	r6, r3
 8007fec:	6841      	ldr	r1, [r0, #4]
 8007fee:	d92f      	bls.n	8008050 <_dtoa_r+0x2d8>
 8007ff0:	4620      	mov	r0, r4
 8007ff2:	f001 fa5d 	bl	80094b0 <_Balloc>
 8007ff6:	9000      	str	r0, [sp, #0]
 8007ff8:	2800      	cmp	r0, #0
 8007ffa:	d14b      	bne.n	8008094 <_dtoa_r+0x31c>
 8007ffc:	4b24      	ldr	r3, [pc, #144]	; (8008090 <_dtoa_r+0x318>)
 8007ffe:	4602      	mov	r2, r0
 8008000:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008004:	e6d1      	b.n	8007daa <_dtoa_r+0x32>
 8008006:	2301      	movs	r3, #1
 8008008:	e7de      	b.n	8007fc8 <_dtoa_r+0x250>
 800800a:	2300      	movs	r3, #0
 800800c:	9308      	str	r3, [sp, #32]
 800800e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008010:	eb0a 0903 	add.w	r9, sl, r3
 8008014:	f109 0301 	add.w	r3, r9, #1
 8008018:	2b01      	cmp	r3, #1
 800801a:	9301      	str	r3, [sp, #4]
 800801c:	bfb8      	it	lt
 800801e:	2301      	movlt	r3, #1
 8008020:	e7dd      	b.n	8007fde <_dtoa_r+0x266>
 8008022:	2301      	movs	r3, #1
 8008024:	e7f2      	b.n	800800c <_dtoa_r+0x294>
 8008026:	2501      	movs	r5, #1
 8008028:	2300      	movs	r3, #0
 800802a:	9305      	str	r3, [sp, #20]
 800802c:	9508      	str	r5, [sp, #32]
 800802e:	f04f 39ff 	mov.w	r9, #4294967295
 8008032:	2200      	movs	r2, #0
 8008034:	f8cd 9004 	str.w	r9, [sp, #4]
 8008038:	2312      	movs	r3, #18
 800803a:	9209      	str	r2, [sp, #36]	; 0x24
 800803c:	e7cf      	b.n	8007fde <_dtoa_r+0x266>
 800803e:	2301      	movs	r3, #1
 8008040:	9308      	str	r3, [sp, #32]
 8008042:	e7f4      	b.n	800802e <_dtoa_r+0x2b6>
 8008044:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008048:	f8cd 9004 	str.w	r9, [sp, #4]
 800804c:	464b      	mov	r3, r9
 800804e:	e7c6      	b.n	8007fde <_dtoa_r+0x266>
 8008050:	3101      	adds	r1, #1
 8008052:	6041      	str	r1, [r0, #4]
 8008054:	0052      	lsls	r2, r2, #1
 8008056:	e7c6      	b.n	8007fe6 <_dtoa_r+0x26e>
 8008058:	636f4361 	.word	0x636f4361
 800805c:	3fd287a7 	.word	0x3fd287a7
 8008060:	8b60c8b3 	.word	0x8b60c8b3
 8008064:	3fc68a28 	.word	0x3fc68a28
 8008068:	509f79fb 	.word	0x509f79fb
 800806c:	3fd34413 	.word	0x3fd34413
 8008070:	0800b54e 	.word	0x0800b54e
 8008074:	0800b565 	.word	0x0800b565
 8008078:	7ff00000 	.word	0x7ff00000
 800807c:	0800b54a 	.word	0x0800b54a
 8008080:	0800b541 	.word	0x0800b541
 8008084:	0800b3c1 	.word	0x0800b3c1
 8008088:	3ff80000 	.word	0x3ff80000
 800808c:	0800b740 	.word	0x0800b740
 8008090:	0800b5c4 	.word	0x0800b5c4
 8008094:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008096:	9a00      	ldr	r2, [sp, #0]
 8008098:	601a      	str	r2, [r3, #0]
 800809a:	9b01      	ldr	r3, [sp, #4]
 800809c:	2b0e      	cmp	r3, #14
 800809e:	f200 80ad 	bhi.w	80081fc <_dtoa_r+0x484>
 80080a2:	2d00      	cmp	r5, #0
 80080a4:	f000 80aa 	beq.w	80081fc <_dtoa_r+0x484>
 80080a8:	f1ba 0f00 	cmp.w	sl, #0
 80080ac:	dd36      	ble.n	800811c <_dtoa_r+0x3a4>
 80080ae:	4ac3      	ldr	r2, [pc, #780]	; (80083bc <_dtoa_r+0x644>)
 80080b0:	f00a 030f 	and.w	r3, sl, #15
 80080b4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80080b8:	ed93 7b00 	vldr	d7, [r3]
 80080bc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80080c0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80080c4:	eeb0 8a47 	vmov.f32	s16, s14
 80080c8:	eef0 8a67 	vmov.f32	s17, s15
 80080cc:	d016      	beq.n	80080fc <_dtoa_r+0x384>
 80080ce:	4bbc      	ldr	r3, [pc, #752]	; (80083c0 <_dtoa_r+0x648>)
 80080d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80080d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80080d8:	f7f8 fbb8 	bl	800084c <__aeabi_ddiv>
 80080dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080e0:	f007 070f 	and.w	r7, r7, #15
 80080e4:	2503      	movs	r5, #3
 80080e6:	4eb6      	ldr	r6, [pc, #728]	; (80083c0 <_dtoa_r+0x648>)
 80080e8:	b957      	cbnz	r7, 8008100 <_dtoa_r+0x388>
 80080ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080ee:	ec53 2b18 	vmov	r2, r3, d8
 80080f2:	f7f8 fbab 	bl	800084c <__aeabi_ddiv>
 80080f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080fa:	e029      	b.n	8008150 <_dtoa_r+0x3d8>
 80080fc:	2502      	movs	r5, #2
 80080fe:	e7f2      	b.n	80080e6 <_dtoa_r+0x36e>
 8008100:	07f9      	lsls	r1, r7, #31
 8008102:	d508      	bpl.n	8008116 <_dtoa_r+0x39e>
 8008104:	ec51 0b18 	vmov	r0, r1, d8
 8008108:	e9d6 2300 	ldrd	r2, r3, [r6]
 800810c:	f7f8 fa74 	bl	80005f8 <__aeabi_dmul>
 8008110:	ec41 0b18 	vmov	d8, r0, r1
 8008114:	3501      	adds	r5, #1
 8008116:	107f      	asrs	r7, r7, #1
 8008118:	3608      	adds	r6, #8
 800811a:	e7e5      	b.n	80080e8 <_dtoa_r+0x370>
 800811c:	f000 80a6 	beq.w	800826c <_dtoa_r+0x4f4>
 8008120:	f1ca 0600 	rsb	r6, sl, #0
 8008124:	4ba5      	ldr	r3, [pc, #660]	; (80083bc <_dtoa_r+0x644>)
 8008126:	4fa6      	ldr	r7, [pc, #664]	; (80083c0 <_dtoa_r+0x648>)
 8008128:	f006 020f 	and.w	r2, r6, #15
 800812c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008134:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008138:	f7f8 fa5e 	bl	80005f8 <__aeabi_dmul>
 800813c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008140:	1136      	asrs	r6, r6, #4
 8008142:	2300      	movs	r3, #0
 8008144:	2502      	movs	r5, #2
 8008146:	2e00      	cmp	r6, #0
 8008148:	f040 8085 	bne.w	8008256 <_dtoa_r+0x4de>
 800814c:	2b00      	cmp	r3, #0
 800814e:	d1d2      	bne.n	80080f6 <_dtoa_r+0x37e>
 8008150:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008152:	2b00      	cmp	r3, #0
 8008154:	f000 808c 	beq.w	8008270 <_dtoa_r+0x4f8>
 8008158:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800815c:	4b99      	ldr	r3, [pc, #612]	; (80083c4 <_dtoa_r+0x64c>)
 800815e:	2200      	movs	r2, #0
 8008160:	4630      	mov	r0, r6
 8008162:	4639      	mov	r1, r7
 8008164:	f7f8 fcba 	bl	8000adc <__aeabi_dcmplt>
 8008168:	2800      	cmp	r0, #0
 800816a:	f000 8081 	beq.w	8008270 <_dtoa_r+0x4f8>
 800816e:	9b01      	ldr	r3, [sp, #4]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d07d      	beq.n	8008270 <_dtoa_r+0x4f8>
 8008174:	f1b9 0f00 	cmp.w	r9, #0
 8008178:	dd3c      	ble.n	80081f4 <_dtoa_r+0x47c>
 800817a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800817e:	9307      	str	r3, [sp, #28]
 8008180:	2200      	movs	r2, #0
 8008182:	4b91      	ldr	r3, [pc, #580]	; (80083c8 <_dtoa_r+0x650>)
 8008184:	4630      	mov	r0, r6
 8008186:	4639      	mov	r1, r7
 8008188:	f7f8 fa36 	bl	80005f8 <__aeabi_dmul>
 800818c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008190:	3501      	adds	r5, #1
 8008192:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008196:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800819a:	4628      	mov	r0, r5
 800819c:	f7f8 f9c2 	bl	8000524 <__aeabi_i2d>
 80081a0:	4632      	mov	r2, r6
 80081a2:	463b      	mov	r3, r7
 80081a4:	f7f8 fa28 	bl	80005f8 <__aeabi_dmul>
 80081a8:	4b88      	ldr	r3, [pc, #544]	; (80083cc <_dtoa_r+0x654>)
 80081aa:	2200      	movs	r2, #0
 80081ac:	f7f8 f86e 	bl	800028c <__adddf3>
 80081b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80081b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081b8:	9303      	str	r3, [sp, #12]
 80081ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d15c      	bne.n	800827a <_dtoa_r+0x502>
 80081c0:	4b83      	ldr	r3, [pc, #524]	; (80083d0 <_dtoa_r+0x658>)
 80081c2:	2200      	movs	r2, #0
 80081c4:	4630      	mov	r0, r6
 80081c6:	4639      	mov	r1, r7
 80081c8:	f7f8 f85e 	bl	8000288 <__aeabi_dsub>
 80081cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081d0:	4606      	mov	r6, r0
 80081d2:	460f      	mov	r7, r1
 80081d4:	f7f8 fca0 	bl	8000b18 <__aeabi_dcmpgt>
 80081d8:	2800      	cmp	r0, #0
 80081da:	f040 8296 	bne.w	800870a <_dtoa_r+0x992>
 80081de:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80081e2:	4630      	mov	r0, r6
 80081e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80081e8:	4639      	mov	r1, r7
 80081ea:	f7f8 fc77 	bl	8000adc <__aeabi_dcmplt>
 80081ee:	2800      	cmp	r0, #0
 80081f0:	f040 8288 	bne.w	8008704 <_dtoa_r+0x98c>
 80081f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80081f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80081fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80081fe:	2b00      	cmp	r3, #0
 8008200:	f2c0 8158 	blt.w	80084b4 <_dtoa_r+0x73c>
 8008204:	f1ba 0f0e 	cmp.w	sl, #14
 8008208:	f300 8154 	bgt.w	80084b4 <_dtoa_r+0x73c>
 800820c:	4b6b      	ldr	r3, [pc, #428]	; (80083bc <_dtoa_r+0x644>)
 800820e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008212:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008218:	2b00      	cmp	r3, #0
 800821a:	f280 80e3 	bge.w	80083e4 <_dtoa_r+0x66c>
 800821e:	9b01      	ldr	r3, [sp, #4]
 8008220:	2b00      	cmp	r3, #0
 8008222:	f300 80df 	bgt.w	80083e4 <_dtoa_r+0x66c>
 8008226:	f040 826d 	bne.w	8008704 <_dtoa_r+0x98c>
 800822a:	4b69      	ldr	r3, [pc, #420]	; (80083d0 <_dtoa_r+0x658>)
 800822c:	2200      	movs	r2, #0
 800822e:	4640      	mov	r0, r8
 8008230:	4649      	mov	r1, r9
 8008232:	f7f8 f9e1 	bl	80005f8 <__aeabi_dmul>
 8008236:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800823a:	f7f8 fc63 	bl	8000b04 <__aeabi_dcmpge>
 800823e:	9e01      	ldr	r6, [sp, #4]
 8008240:	4637      	mov	r7, r6
 8008242:	2800      	cmp	r0, #0
 8008244:	f040 8243 	bne.w	80086ce <_dtoa_r+0x956>
 8008248:	9d00      	ldr	r5, [sp, #0]
 800824a:	2331      	movs	r3, #49	; 0x31
 800824c:	f805 3b01 	strb.w	r3, [r5], #1
 8008250:	f10a 0a01 	add.w	sl, sl, #1
 8008254:	e23f      	b.n	80086d6 <_dtoa_r+0x95e>
 8008256:	07f2      	lsls	r2, r6, #31
 8008258:	d505      	bpl.n	8008266 <_dtoa_r+0x4ee>
 800825a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800825e:	f7f8 f9cb 	bl	80005f8 <__aeabi_dmul>
 8008262:	3501      	adds	r5, #1
 8008264:	2301      	movs	r3, #1
 8008266:	1076      	asrs	r6, r6, #1
 8008268:	3708      	adds	r7, #8
 800826a:	e76c      	b.n	8008146 <_dtoa_r+0x3ce>
 800826c:	2502      	movs	r5, #2
 800826e:	e76f      	b.n	8008150 <_dtoa_r+0x3d8>
 8008270:	9b01      	ldr	r3, [sp, #4]
 8008272:	f8cd a01c 	str.w	sl, [sp, #28]
 8008276:	930c      	str	r3, [sp, #48]	; 0x30
 8008278:	e78d      	b.n	8008196 <_dtoa_r+0x41e>
 800827a:	9900      	ldr	r1, [sp, #0]
 800827c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800827e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008280:	4b4e      	ldr	r3, [pc, #312]	; (80083bc <_dtoa_r+0x644>)
 8008282:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008286:	4401      	add	r1, r0
 8008288:	9102      	str	r1, [sp, #8]
 800828a:	9908      	ldr	r1, [sp, #32]
 800828c:	eeb0 8a47 	vmov.f32	s16, s14
 8008290:	eef0 8a67 	vmov.f32	s17, s15
 8008294:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008298:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800829c:	2900      	cmp	r1, #0
 800829e:	d045      	beq.n	800832c <_dtoa_r+0x5b4>
 80082a0:	494c      	ldr	r1, [pc, #304]	; (80083d4 <_dtoa_r+0x65c>)
 80082a2:	2000      	movs	r0, #0
 80082a4:	f7f8 fad2 	bl	800084c <__aeabi_ddiv>
 80082a8:	ec53 2b18 	vmov	r2, r3, d8
 80082ac:	f7f7 ffec 	bl	8000288 <__aeabi_dsub>
 80082b0:	9d00      	ldr	r5, [sp, #0]
 80082b2:	ec41 0b18 	vmov	d8, r0, r1
 80082b6:	4639      	mov	r1, r7
 80082b8:	4630      	mov	r0, r6
 80082ba:	f7f8 fc4d 	bl	8000b58 <__aeabi_d2iz>
 80082be:	900c      	str	r0, [sp, #48]	; 0x30
 80082c0:	f7f8 f930 	bl	8000524 <__aeabi_i2d>
 80082c4:	4602      	mov	r2, r0
 80082c6:	460b      	mov	r3, r1
 80082c8:	4630      	mov	r0, r6
 80082ca:	4639      	mov	r1, r7
 80082cc:	f7f7 ffdc 	bl	8000288 <__aeabi_dsub>
 80082d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082d2:	3330      	adds	r3, #48	; 0x30
 80082d4:	f805 3b01 	strb.w	r3, [r5], #1
 80082d8:	ec53 2b18 	vmov	r2, r3, d8
 80082dc:	4606      	mov	r6, r0
 80082de:	460f      	mov	r7, r1
 80082e0:	f7f8 fbfc 	bl	8000adc <__aeabi_dcmplt>
 80082e4:	2800      	cmp	r0, #0
 80082e6:	d165      	bne.n	80083b4 <_dtoa_r+0x63c>
 80082e8:	4632      	mov	r2, r6
 80082ea:	463b      	mov	r3, r7
 80082ec:	4935      	ldr	r1, [pc, #212]	; (80083c4 <_dtoa_r+0x64c>)
 80082ee:	2000      	movs	r0, #0
 80082f0:	f7f7 ffca 	bl	8000288 <__aeabi_dsub>
 80082f4:	ec53 2b18 	vmov	r2, r3, d8
 80082f8:	f7f8 fbf0 	bl	8000adc <__aeabi_dcmplt>
 80082fc:	2800      	cmp	r0, #0
 80082fe:	f040 80b9 	bne.w	8008474 <_dtoa_r+0x6fc>
 8008302:	9b02      	ldr	r3, [sp, #8]
 8008304:	429d      	cmp	r5, r3
 8008306:	f43f af75 	beq.w	80081f4 <_dtoa_r+0x47c>
 800830a:	4b2f      	ldr	r3, [pc, #188]	; (80083c8 <_dtoa_r+0x650>)
 800830c:	ec51 0b18 	vmov	r0, r1, d8
 8008310:	2200      	movs	r2, #0
 8008312:	f7f8 f971 	bl	80005f8 <__aeabi_dmul>
 8008316:	4b2c      	ldr	r3, [pc, #176]	; (80083c8 <_dtoa_r+0x650>)
 8008318:	ec41 0b18 	vmov	d8, r0, r1
 800831c:	2200      	movs	r2, #0
 800831e:	4630      	mov	r0, r6
 8008320:	4639      	mov	r1, r7
 8008322:	f7f8 f969 	bl	80005f8 <__aeabi_dmul>
 8008326:	4606      	mov	r6, r0
 8008328:	460f      	mov	r7, r1
 800832a:	e7c4      	b.n	80082b6 <_dtoa_r+0x53e>
 800832c:	ec51 0b17 	vmov	r0, r1, d7
 8008330:	f7f8 f962 	bl	80005f8 <__aeabi_dmul>
 8008334:	9b02      	ldr	r3, [sp, #8]
 8008336:	9d00      	ldr	r5, [sp, #0]
 8008338:	930c      	str	r3, [sp, #48]	; 0x30
 800833a:	ec41 0b18 	vmov	d8, r0, r1
 800833e:	4639      	mov	r1, r7
 8008340:	4630      	mov	r0, r6
 8008342:	f7f8 fc09 	bl	8000b58 <__aeabi_d2iz>
 8008346:	9011      	str	r0, [sp, #68]	; 0x44
 8008348:	f7f8 f8ec 	bl	8000524 <__aeabi_i2d>
 800834c:	4602      	mov	r2, r0
 800834e:	460b      	mov	r3, r1
 8008350:	4630      	mov	r0, r6
 8008352:	4639      	mov	r1, r7
 8008354:	f7f7 ff98 	bl	8000288 <__aeabi_dsub>
 8008358:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800835a:	3330      	adds	r3, #48	; 0x30
 800835c:	f805 3b01 	strb.w	r3, [r5], #1
 8008360:	9b02      	ldr	r3, [sp, #8]
 8008362:	429d      	cmp	r5, r3
 8008364:	4606      	mov	r6, r0
 8008366:	460f      	mov	r7, r1
 8008368:	f04f 0200 	mov.w	r2, #0
 800836c:	d134      	bne.n	80083d8 <_dtoa_r+0x660>
 800836e:	4b19      	ldr	r3, [pc, #100]	; (80083d4 <_dtoa_r+0x65c>)
 8008370:	ec51 0b18 	vmov	r0, r1, d8
 8008374:	f7f7 ff8a 	bl	800028c <__adddf3>
 8008378:	4602      	mov	r2, r0
 800837a:	460b      	mov	r3, r1
 800837c:	4630      	mov	r0, r6
 800837e:	4639      	mov	r1, r7
 8008380:	f7f8 fbca 	bl	8000b18 <__aeabi_dcmpgt>
 8008384:	2800      	cmp	r0, #0
 8008386:	d175      	bne.n	8008474 <_dtoa_r+0x6fc>
 8008388:	ec53 2b18 	vmov	r2, r3, d8
 800838c:	4911      	ldr	r1, [pc, #68]	; (80083d4 <_dtoa_r+0x65c>)
 800838e:	2000      	movs	r0, #0
 8008390:	f7f7 ff7a 	bl	8000288 <__aeabi_dsub>
 8008394:	4602      	mov	r2, r0
 8008396:	460b      	mov	r3, r1
 8008398:	4630      	mov	r0, r6
 800839a:	4639      	mov	r1, r7
 800839c:	f7f8 fb9e 	bl	8000adc <__aeabi_dcmplt>
 80083a0:	2800      	cmp	r0, #0
 80083a2:	f43f af27 	beq.w	80081f4 <_dtoa_r+0x47c>
 80083a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80083a8:	1e6b      	subs	r3, r5, #1
 80083aa:	930c      	str	r3, [sp, #48]	; 0x30
 80083ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80083b0:	2b30      	cmp	r3, #48	; 0x30
 80083b2:	d0f8      	beq.n	80083a6 <_dtoa_r+0x62e>
 80083b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80083b8:	e04a      	b.n	8008450 <_dtoa_r+0x6d8>
 80083ba:	bf00      	nop
 80083bc:	0800b740 	.word	0x0800b740
 80083c0:	0800b718 	.word	0x0800b718
 80083c4:	3ff00000 	.word	0x3ff00000
 80083c8:	40240000 	.word	0x40240000
 80083cc:	401c0000 	.word	0x401c0000
 80083d0:	40140000 	.word	0x40140000
 80083d4:	3fe00000 	.word	0x3fe00000
 80083d8:	4baf      	ldr	r3, [pc, #700]	; (8008698 <_dtoa_r+0x920>)
 80083da:	f7f8 f90d 	bl	80005f8 <__aeabi_dmul>
 80083de:	4606      	mov	r6, r0
 80083e0:	460f      	mov	r7, r1
 80083e2:	e7ac      	b.n	800833e <_dtoa_r+0x5c6>
 80083e4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80083e8:	9d00      	ldr	r5, [sp, #0]
 80083ea:	4642      	mov	r2, r8
 80083ec:	464b      	mov	r3, r9
 80083ee:	4630      	mov	r0, r6
 80083f0:	4639      	mov	r1, r7
 80083f2:	f7f8 fa2b 	bl	800084c <__aeabi_ddiv>
 80083f6:	f7f8 fbaf 	bl	8000b58 <__aeabi_d2iz>
 80083fa:	9002      	str	r0, [sp, #8]
 80083fc:	f7f8 f892 	bl	8000524 <__aeabi_i2d>
 8008400:	4642      	mov	r2, r8
 8008402:	464b      	mov	r3, r9
 8008404:	f7f8 f8f8 	bl	80005f8 <__aeabi_dmul>
 8008408:	4602      	mov	r2, r0
 800840a:	460b      	mov	r3, r1
 800840c:	4630      	mov	r0, r6
 800840e:	4639      	mov	r1, r7
 8008410:	f7f7 ff3a 	bl	8000288 <__aeabi_dsub>
 8008414:	9e02      	ldr	r6, [sp, #8]
 8008416:	9f01      	ldr	r7, [sp, #4]
 8008418:	3630      	adds	r6, #48	; 0x30
 800841a:	f805 6b01 	strb.w	r6, [r5], #1
 800841e:	9e00      	ldr	r6, [sp, #0]
 8008420:	1bae      	subs	r6, r5, r6
 8008422:	42b7      	cmp	r7, r6
 8008424:	4602      	mov	r2, r0
 8008426:	460b      	mov	r3, r1
 8008428:	d137      	bne.n	800849a <_dtoa_r+0x722>
 800842a:	f7f7 ff2f 	bl	800028c <__adddf3>
 800842e:	4642      	mov	r2, r8
 8008430:	464b      	mov	r3, r9
 8008432:	4606      	mov	r6, r0
 8008434:	460f      	mov	r7, r1
 8008436:	f7f8 fb6f 	bl	8000b18 <__aeabi_dcmpgt>
 800843a:	b9c8      	cbnz	r0, 8008470 <_dtoa_r+0x6f8>
 800843c:	4642      	mov	r2, r8
 800843e:	464b      	mov	r3, r9
 8008440:	4630      	mov	r0, r6
 8008442:	4639      	mov	r1, r7
 8008444:	f7f8 fb40 	bl	8000ac8 <__aeabi_dcmpeq>
 8008448:	b110      	cbz	r0, 8008450 <_dtoa_r+0x6d8>
 800844a:	9b02      	ldr	r3, [sp, #8]
 800844c:	07d9      	lsls	r1, r3, #31
 800844e:	d40f      	bmi.n	8008470 <_dtoa_r+0x6f8>
 8008450:	4620      	mov	r0, r4
 8008452:	4659      	mov	r1, fp
 8008454:	f001 f86c 	bl	8009530 <_Bfree>
 8008458:	2300      	movs	r3, #0
 800845a:	702b      	strb	r3, [r5, #0]
 800845c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800845e:	f10a 0001 	add.w	r0, sl, #1
 8008462:	6018      	str	r0, [r3, #0]
 8008464:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008466:	2b00      	cmp	r3, #0
 8008468:	f43f acd8 	beq.w	8007e1c <_dtoa_r+0xa4>
 800846c:	601d      	str	r5, [r3, #0]
 800846e:	e4d5      	b.n	8007e1c <_dtoa_r+0xa4>
 8008470:	f8cd a01c 	str.w	sl, [sp, #28]
 8008474:	462b      	mov	r3, r5
 8008476:	461d      	mov	r5, r3
 8008478:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800847c:	2a39      	cmp	r2, #57	; 0x39
 800847e:	d108      	bne.n	8008492 <_dtoa_r+0x71a>
 8008480:	9a00      	ldr	r2, [sp, #0]
 8008482:	429a      	cmp	r2, r3
 8008484:	d1f7      	bne.n	8008476 <_dtoa_r+0x6fe>
 8008486:	9a07      	ldr	r2, [sp, #28]
 8008488:	9900      	ldr	r1, [sp, #0]
 800848a:	3201      	adds	r2, #1
 800848c:	9207      	str	r2, [sp, #28]
 800848e:	2230      	movs	r2, #48	; 0x30
 8008490:	700a      	strb	r2, [r1, #0]
 8008492:	781a      	ldrb	r2, [r3, #0]
 8008494:	3201      	adds	r2, #1
 8008496:	701a      	strb	r2, [r3, #0]
 8008498:	e78c      	b.n	80083b4 <_dtoa_r+0x63c>
 800849a:	4b7f      	ldr	r3, [pc, #508]	; (8008698 <_dtoa_r+0x920>)
 800849c:	2200      	movs	r2, #0
 800849e:	f7f8 f8ab 	bl	80005f8 <__aeabi_dmul>
 80084a2:	2200      	movs	r2, #0
 80084a4:	2300      	movs	r3, #0
 80084a6:	4606      	mov	r6, r0
 80084a8:	460f      	mov	r7, r1
 80084aa:	f7f8 fb0d 	bl	8000ac8 <__aeabi_dcmpeq>
 80084ae:	2800      	cmp	r0, #0
 80084b0:	d09b      	beq.n	80083ea <_dtoa_r+0x672>
 80084b2:	e7cd      	b.n	8008450 <_dtoa_r+0x6d8>
 80084b4:	9a08      	ldr	r2, [sp, #32]
 80084b6:	2a00      	cmp	r2, #0
 80084b8:	f000 80c4 	beq.w	8008644 <_dtoa_r+0x8cc>
 80084bc:	9a05      	ldr	r2, [sp, #20]
 80084be:	2a01      	cmp	r2, #1
 80084c0:	f300 80a8 	bgt.w	8008614 <_dtoa_r+0x89c>
 80084c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80084c6:	2a00      	cmp	r2, #0
 80084c8:	f000 80a0 	beq.w	800860c <_dtoa_r+0x894>
 80084cc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80084d0:	9e06      	ldr	r6, [sp, #24]
 80084d2:	4645      	mov	r5, r8
 80084d4:	9a04      	ldr	r2, [sp, #16]
 80084d6:	2101      	movs	r1, #1
 80084d8:	441a      	add	r2, r3
 80084da:	4620      	mov	r0, r4
 80084dc:	4498      	add	r8, r3
 80084de:	9204      	str	r2, [sp, #16]
 80084e0:	f001 f92c 	bl	800973c <__i2b>
 80084e4:	4607      	mov	r7, r0
 80084e6:	2d00      	cmp	r5, #0
 80084e8:	dd0b      	ble.n	8008502 <_dtoa_r+0x78a>
 80084ea:	9b04      	ldr	r3, [sp, #16]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	dd08      	ble.n	8008502 <_dtoa_r+0x78a>
 80084f0:	42ab      	cmp	r3, r5
 80084f2:	9a04      	ldr	r2, [sp, #16]
 80084f4:	bfa8      	it	ge
 80084f6:	462b      	movge	r3, r5
 80084f8:	eba8 0803 	sub.w	r8, r8, r3
 80084fc:	1aed      	subs	r5, r5, r3
 80084fe:	1ad3      	subs	r3, r2, r3
 8008500:	9304      	str	r3, [sp, #16]
 8008502:	9b06      	ldr	r3, [sp, #24]
 8008504:	b1fb      	cbz	r3, 8008546 <_dtoa_r+0x7ce>
 8008506:	9b08      	ldr	r3, [sp, #32]
 8008508:	2b00      	cmp	r3, #0
 800850a:	f000 809f 	beq.w	800864c <_dtoa_r+0x8d4>
 800850e:	2e00      	cmp	r6, #0
 8008510:	dd11      	ble.n	8008536 <_dtoa_r+0x7be>
 8008512:	4639      	mov	r1, r7
 8008514:	4632      	mov	r2, r6
 8008516:	4620      	mov	r0, r4
 8008518:	f001 f9cc 	bl	80098b4 <__pow5mult>
 800851c:	465a      	mov	r2, fp
 800851e:	4601      	mov	r1, r0
 8008520:	4607      	mov	r7, r0
 8008522:	4620      	mov	r0, r4
 8008524:	f001 f920 	bl	8009768 <__multiply>
 8008528:	4659      	mov	r1, fp
 800852a:	9007      	str	r0, [sp, #28]
 800852c:	4620      	mov	r0, r4
 800852e:	f000 ffff 	bl	8009530 <_Bfree>
 8008532:	9b07      	ldr	r3, [sp, #28]
 8008534:	469b      	mov	fp, r3
 8008536:	9b06      	ldr	r3, [sp, #24]
 8008538:	1b9a      	subs	r2, r3, r6
 800853a:	d004      	beq.n	8008546 <_dtoa_r+0x7ce>
 800853c:	4659      	mov	r1, fp
 800853e:	4620      	mov	r0, r4
 8008540:	f001 f9b8 	bl	80098b4 <__pow5mult>
 8008544:	4683      	mov	fp, r0
 8008546:	2101      	movs	r1, #1
 8008548:	4620      	mov	r0, r4
 800854a:	f001 f8f7 	bl	800973c <__i2b>
 800854e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008550:	2b00      	cmp	r3, #0
 8008552:	4606      	mov	r6, r0
 8008554:	dd7c      	ble.n	8008650 <_dtoa_r+0x8d8>
 8008556:	461a      	mov	r2, r3
 8008558:	4601      	mov	r1, r0
 800855a:	4620      	mov	r0, r4
 800855c:	f001 f9aa 	bl	80098b4 <__pow5mult>
 8008560:	9b05      	ldr	r3, [sp, #20]
 8008562:	2b01      	cmp	r3, #1
 8008564:	4606      	mov	r6, r0
 8008566:	dd76      	ble.n	8008656 <_dtoa_r+0x8de>
 8008568:	2300      	movs	r3, #0
 800856a:	9306      	str	r3, [sp, #24]
 800856c:	6933      	ldr	r3, [r6, #16]
 800856e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008572:	6918      	ldr	r0, [r3, #16]
 8008574:	f001 f892 	bl	800969c <__hi0bits>
 8008578:	f1c0 0020 	rsb	r0, r0, #32
 800857c:	9b04      	ldr	r3, [sp, #16]
 800857e:	4418      	add	r0, r3
 8008580:	f010 001f 	ands.w	r0, r0, #31
 8008584:	f000 8086 	beq.w	8008694 <_dtoa_r+0x91c>
 8008588:	f1c0 0320 	rsb	r3, r0, #32
 800858c:	2b04      	cmp	r3, #4
 800858e:	dd7f      	ble.n	8008690 <_dtoa_r+0x918>
 8008590:	f1c0 001c 	rsb	r0, r0, #28
 8008594:	9b04      	ldr	r3, [sp, #16]
 8008596:	4403      	add	r3, r0
 8008598:	4480      	add	r8, r0
 800859a:	4405      	add	r5, r0
 800859c:	9304      	str	r3, [sp, #16]
 800859e:	f1b8 0f00 	cmp.w	r8, #0
 80085a2:	dd05      	ble.n	80085b0 <_dtoa_r+0x838>
 80085a4:	4659      	mov	r1, fp
 80085a6:	4642      	mov	r2, r8
 80085a8:	4620      	mov	r0, r4
 80085aa:	f001 f9dd 	bl	8009968 <__lshift>
 80085ae:	4683      	mov	fp, r0
 80085b0:	9b04      	ldr	r3, [sp, #16]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	dd05      	ble.n	80085c2 <_dtoa_r+0x84a>
 80085b6:	4631      	mov	r1, r6
 80085b8:	461a      	mov	r2, r3
 80085ba:	4620      	mov	r0, r4
 80085bc:	f001 f9d4 	bl	8009968 <__lshift>
 80085c0:	4606      	mov	r6, r0
 80085c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d069      	beq.n	800869c <_dtoa_r+0x924>
 80085c8:	4631      	mov	r1, r6
 80085ca:	4658      	mov	r0, fp
 80085cc:	f001 fa38 	bl	8009a40 <__mcmp>
 80085d0:	2800      	cmp	r0, #0
 80085d2:	da63      	bge.n	800869c <_dtoa_r+0x924>
 80085d4:	2300      	movs	r3, #0
 80085d6:	4659      	mov	r1, fp
 80085d8:	220a      	movs	r2, #10
 80085da:	4620      	mov	r0, r4
 80085dc:	f000 ffca 	bl	8009574 <__multadd>
 80085e0:	9b08      	ldr	r3, [sp, #32]
 80085e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80085e6:	4683      	mov	fp, r0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	f000 818f 	beq.w	800890c <_dtoa_r+0xb94>
 80085ee:	4639      	mov	r1, r7
 80085f0:	2300      	movs	r3, #0
 80085f2:	220a      	movs	r2, #10
 80085f4:	4620      	mov	r0, r4
 80085f6:	f000 ffbd 	bl	8009574 <__multadd>
 80085fa:	f1b9 0f00 	cmp.w	r9, #0
 80085fe:	4607      	mov	r7, r0
 8008600:	f300 808e 	bgt.w	8008720 <_dtoa_r+0x9a8>
 8008604:	9b05      	ldr	r3, [sp, #20]
 8008606:	2b02      	cmp	r3, #2
 8008608:	dc50      	bgt.n	80086ac <_dtoa_r+0x934>
 800860a:	e089      	b.n	8008720 <_dtoa_r+0x9a8>
 800860c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800860e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008612:	e75d      	b.n	80084d0 <_dtoa_r+0x758>
 8008614:	9b01      	ldr	r3, [sp, #4]
 8008616:	1e5e      	subs	r6, r3, #1
 8008618:	9b06      	ldr	r3, [sp, #24]
 800861a:	42b3      	cmp	r3, r6
 800861c:	bfbf      	itttt	lt
 800861e:	9b06      	ldrlt	r3, [sp, #24]
 8008620:	9606      	strlt	r6, [sp, #24]
 8008622:	1af2      	sublt	r2, r6, r3
 8008624:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008626:	bfb6      	itet	lt
 8008628:	189b      	addlt	r3, r3, r2
 800862a:	1b9e      	subge	r6, r3, r6
 800862c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800862e:	9b01      	ldr	r3, [sp, #4]
 8008630:	bfb8      	it	lt
 8008632:	2600      	movlt	r6, #0
 8008634:	2b00      	cmp	r3, #0
 8008636:	bfb5      	itete	lt
 8008638:	eba8 0503 	sublt.w	r5, r8, r3
 800863c:	9b01      	ldrge	r3, [sp, #4]
 800863e:	2300      	movlt	r3, #0
 8008640:	4645      	movge	r5, r8
 8008642:	e747      	b.n	80084d4 <_dtoa_r+0x75c>
 8008644:	9e06      	ldr	r6, [sp, #24]
 8008646:	9f08      	ldr	r7, [sp, #32]
 8008648:	4645      	mov	r5, r8
 800864a:	e74c      	b.n	80084e6 <_dtoa_r+0x76e>
 800864c:	9a06      	ldr	r2, [sp, #24]
 800864e:	e775      	b.n	800853c <_dtoa_r+0x7c4>
 8008650:	9b05      	ldr	r3, [sp, #20]
 8008652:	2b01      	cmp	r3, #1
 8008654:	dc18      	bgt.n	8008688 <_dtoa_r+0x910>
 8008656:	9b02      	ldr	r3, [sp, #8]
 8008658:	b9b3      	cbnz	r3, 8008688 <_dtoa_r+0x910>
 800865a:	9b03      	ldr	r3, [sp, #12]
 800865c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008660:	b9a3      	cbnz	r3, 800868c <_dtoa_r+0x914>
 8008662:	9b03      	ldr	r3, [sp, #12]
 8008664:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008668:	0d1b      	lsrs	r3, r3, #20
 800866a:	051b      	lsls	r3, r3, #20
 800866c:	b12b      	cbz	r3, 800867a <_dtoa_r+0x902>
 800866e:	9b04      	ldr	r3, [sp, #16]
 8008670:	3301      	adds	r3, #1
 8008672:	9304      	str	r3, [sp, #16]
 8008674:	f108 0801 	add.w	r8, r8, #1
 8008678:	2301      	movs	r3, #1
 800867a:	9306      	str	r3, [sp, #24]
 800867c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800867e:	2b00      	cmp	r3, #0
 8008680:	f47f af74 	bne.w	800856c <_dtoa_r+0x7f4>
 8008684:	2001      	movs	r0, #1
 8008686:	e779      	b.n	800857c <_dtoa_r+0x804>
 8008688:	2300      	movs	r3, #0
 800868a:	e7f6      	b.n	800867a <_dtoa_r+0x902>
 800868c:	9b02      	ldr	r3, [sp, #8]
 800868e:	e7f4      	b.n	800867a <_dtoa_r+0x902>
 8008690:	d085      	beq.n	800859e <_dtoa_r+0x826>
 8008692:	4618      	mov	r0, r3
 8008694:	301c      	adds	r0, #28
 8008696:	e77d      	b.n	8008594 <_dtoa_r+0x81c>
 8008698:	40240000 	.word	0x40240000
 800869c:	9b01      	ldr	r3, [sp, #4]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	dc38      	bgt.n	8008714 <_dtoa_r+0x99c>
 80086a2:	9b05      	ldr	r3, [sp, #20]
 80086a4:	2b02      	cmp	r3, #2
 80086a6:	dd35      	ble.n	8008714 <_dtoa_r+0x99c>
 80086a8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80086ac:	f1b9 0f00 	cmp.w	r9, #0
 80086b0:	d10d      	bne.n	80086ce <_dtoa_r+0x956>
 80086b2:	4631      	mov	r1, r6
 80086b4:	464b      	mov	r3, r9
 80086b6:	2205      	movs	r2, #5
 80086b8:	4620      	mov	r0, r4
 80086ba:	f000 ff5b 	bl	8009574 <__multadd>
 80086be:	4601      	mov	r1, r0
 80086c0:	4606      	mov	r6, r0
 80086c2:	4658      	mov	r0, fp
 80086c4:	f001 f9bc 	bl	8009a40 <__mcmp>
 80086c8:	2800      	cmp	r0, #0
 80086ca:	f73f adbd 	bgt.w	8008248 <_dtoa_r+0x4d0>
 80086ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086d0:	9d00      	ldr	r5, [sp, #0]
 80086d2:	ea6f 0a03 	mvn.w	sl, r3
 80086d6:	f04f 0800 	mov.w	r8, #0
 80086da:	4631      	mov	r1, r6
 80086dc:	4620      	mov	r0, r4
 80086de:	f000 ff27 	bl	8009530 <_Bfree>
 80086e2:	2f00      	cmp	r7, #0
 80086e4:	f43f aeb4 	beq.w	8008450 <_dtoa_r+0x6d8>
 80086e8:	f1b8 0f00 	cmp.w	r8, #0
 80086ec:	d005      	beq.n	80086fa <_dtoa_r+0x982>
 80086ee:	45b8      	cmp	r8, r7
 80086f0:	d003      	beq.n	80086fa <_dtoa_r+0x982>
 80086f2:	4641      	mov	r1, r8
 80086f4:	4620      	mov	r0, r4
 80086f6:	f000 ff1b 	bl	8009530 <_Bfree>
 80086fa:	4639      	mov	r1, r7
 80086fc:	4620      	mov	r0, r4
 80086fe:	f000 ff17 	bl	8009530 <_Bfree>
 8008702:	e6a5      	b.n	8008450 <_dtoa_r+0x6d8>
 8008704:	2600      	movs	r6, #0
 8008706:	4637      	mov	r7, r6
 8008708:	e7e1      	b.n	80086ce <_dtoa_r+0x956>
 800870a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800870c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008710:	4637      	mov	r7, r6
 8008712:	e599      	b.n	8008248 <_dtoa_r+0x4d0>
 8008714:	9b08      	ldr	r3, [sp, #32]
 8008716:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800871a:	2b00      	cmp	r3, #0
 800871c:	f000 80fd 	beq.w	800891a <_dtoa_r+0xba2>
 8008720:	2d00      	cmp	r5, #0
 8008722:	dd05      	ble.n	8008730 <_dtoa_r+0x9b8>
 8008724:	4639      	mov	r1, r7
 8008726:	462a      	mov	r2, r5
 8008728:	4620      	mov	r0, r4
 800872a:	f001 f91d 	bl	8009968 <__lshift>
 800872e:	4607      	mov	r7, r0
 8008730:	9b06      	ldr	r3, [sp, #24]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d05c      	beq.n	80087f0 <_dtoa_r+0xa78>
 8008736:	6879      	ldr	r1, [r7, #4]
 8008738:	4620      	mov	r0, r4
 800873a:	f000 feb9 	bl	80094b0 <_Balloc>
 800873e:	4605      	mov	r5, r0
 8008740:	b928      	cbnz	r0, 800874e <_dtoa_r+0x9d6>
 8008742:	4b80      	ldr	r3, [pc, #512]	; (8008944 <_dtoa_r+0xbcc>)
 8008744:	4602      	mov	r2, r0
 8008746:	f240 21ea 	movw	r1, #746	; 0x2ea
 800874a:	f7ff bb2e 	b.w	8007daa <_dtoa_r+0x32>
 800874e:	693a      	ldr	r2, [r7, #16]
 8008750:	3202      	adds	r2, #2
 8008752:	0092      	lsls	r2, r2, #2
 8008754:	f107 010c 	add.w	r1, r7, #12
 8008758:	300c      	adds	r0, #12
 800875a:	f7fd fa2f 	bl	8005bbc <memcpy>
 800875e:	2201      	movs	r2, #1
 8008760:	4629      	mov	r1, r5
 8008762:	4620      	mov	r0, r4
 8008764:	f001 f900 	bl	8009968 <__lshift>
 8008768:	9b00      	ldr	r3, [sp, #0]
 800876a:	3301      	adds	r3, #1
 800876c:	9301      	str	r3, [sp, #4]
 800876e:	9b00      	ldr	r3, [sp, #0]
 8008770:	444b      	add	r3, r9
 8008772:	9307      	str	r3, [sp, #28]
 8008774:	9b02      	ldr	r3, [sp, #8]
 8008776:	f003 0301 	and.w	r3, r3, #1
 800877a:	46b8      	mov	r8, r7
 800877c:	9306      	str	r3, [sp, #24]
 800877e:	4607      	mov	r7, r0
 8008780:	9b01      	ldr	r3, [sp, #4]
 8008782:	4631      	mov	r1, r6
 8008784:	3b01      	subs	r3, #1
 8008786:	4658      	mov	r0, fp
 8008788:	9302      	str	r3, [sp, #8]
 800878a:	f7ff fa67 	bl	8007c5c <quorem>
 800878e:	4603      	mov	r3, r0
 8008790:	3330      	adds	r3, #48	; 0x30
 8008792:	9004      	str	r0, [sp, #16]
 8008794:	4641      	mov	r1, r8
 8008796:	4658      	mov	r0, fp
 8008798:	9308      	str	r3, [sp, #32]
 800879a:	f001 f951 	bl	8009a40 <__mcmp>
 800879e:	463a      	mov	r2, r7
 80087a0:	4681      	mov	r9, r0
 80087a2:	4631      	mov	r1, r6
 80087a4:	4620      	mov	r0, r4
 80087a6:	f001 f967 	bl	8009a78 <__mdiff>
 80087aa:	68c2      	ldr	r2, [r0, #12]
 80087ac:	9b08      	ldr	r3, [sp, #32]
 80087ae:	4605      	mov	r5, r0
 80087b0:	bb02      	cbnz	r2, 80087f4 <_dtoa_r+0xa7c>
 80087b2:	4601      	mov	r1, r0
 80087b4:	4658      	mov	r0, fp
 80087b6:	f001 f943 	bl	8009a40 <__mcmp>
 80087ba:	9b08      	ldr	r3, [sp, #32]
 80087bc:	4602      	mov	r2, r0
 80087be:	4629      	mov	r1, r5
 80087c0:	4620      	mov	r0, r4
 80087c2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80087c6:	f000 feb3 	bl	8009530 <_Bfree>
 80087ca:	9b05      	ldr	r3, [sp, #20]
 80087cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087ce:	9d01      	ldr	r5, [sp, #4]
 80087d0:	ea43 0102 	orr.w	r1, r3, r2
 80087d4:	9b06      	ldr	r3, [sp, #24]
 80087d6:	430b      	orrs	r3, r1
 80087d8:	9b08      	ldr	r3, [sp, #32]
 80087da:	d10d      	bne.n	80087f8 <_dtoa_r+0xa80>
 80087dc:	2b39      	cmp	r3, #57	; 0x39
 80087de:	d029      	beq.n	8008834 <_dtoa_r+0xabc>
 80087e0:	f1b9 0f00 	cmp.w	r9, #0
 80087e4:	dd01      	ble.n	80087ea <_dtoa_r+0xa72>
 80087e6:	9b04      	ldr	r3, [sp, #16]
 80087e8:	3331      	adds	r3, #49	; 0x31
 80087ea:	9a02      	ldr	r2, [sp, #8]
 80087ec:	7013      	strb	r3, [r2, #0]
 80087ee:	e774      	b.n	80086da <_dtoa_r+0x962>
 80087f0:	4638      	mov	r0, r7
 80087f2:	e7b9      	b.n	8008768 <_dtoa_r+0x9f0>
 80087f4:	2201      	movs	r2, #1
 80087f6:	e7e2      	b.n	80087be <_dtoa_r+0xa46>
 80087f8:	f1b9 0f00 	cmp.w	r9, #0
 80087fc:	db06      	blt.n	800880c <_dtoa_r+0xa94>
 80087fe:	9905      	ldr	r1, [sp, #20]
 8008800:	ea41 0909 	orr.w	r9, r1, r9
 8008804:	9906      	ldr	r1, [sp, #24]
 8008806:	ea59 0101 	orrs.w	r1, r9, r1
 800880a:	d120      	bne.n	800884e <_dtoa_r+0xad6>
 800880c:	2a00      	cmp	r2, #0
 800880e:	ddec      	ble.n	80087ea <_dtoa_r+0xa72>
 8008810:	4659      	mov	r1, fp
 8008812:	2201      	movs	r2, #1
 8008814:	4620      	mov	r0, r4
 8008816:	9301      	str	r3, [sp, #4]
 8008818:	f001 f8a6 	bl	8009968 <__lshift>
 800881c:	4631      	mov	r1, r6
 800881e:	4683      	mov	fp, r0
 8008820:	f001 f90e 	bl	8009a40 <__mcmp>
 8008824:	2800      	cmp	r0, #0
 8008826:	9b01      	ldr	r3, [sp, #4]
 8008828:	dc02      	bgt.n	8008830 <_dtoa_r+0xab8>
 800882a:	d1de      	bne.n	80087ea <_dtoa_r+0xa72>
 800882c:	07da      	lsls	r2, r3, #31
 800882e:	d5dc      	bpl.n	80087ea <_dtoa_r+0xa72>
 8008830:	2b39      	cmp	r3, #57	; 0x39
 8008832:	d1d8      	bne.n	80087e6 <_dtoa_r+0xa6e>
 8008834:	9a02      	ldr	r2, [sp, #8]
 8008836:	2339      	movs	r3, #57	; 0x39
 8008838:	7013      	strb	r3, [r2, #0]
 800883a:	462b      	mov	r3, r5
 800883c:	461d      	mov	r5, r3
 800883e:	3b01      	subs	r3, #1
 8008840:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008844:	2a39      	cmp	r2, #57	; 0x39
 8008846:	d050      	beq.n	80088ea <_dtoa_r+0xb72>
 8008848:	3201      	adds	r2, #1
 800884a:	701a      	strb	r2, [r3, #0]
 800884c:	e745      	b.n	80086da <_dtoa_r+0x962>
 800884e:	2a00      	cmp	r2, #0
 8008850:	dd03      	ble.n	800885a <_dtoa_r+0xae2>
 8008852:	2b39      	cmp	r3, #57	; 0x39
 8008854:	d0ee      	beq.n	8008834 <_dtoa_r+0xabc>
 8008856:	3301      	adds	r3, #1
 8008858:	e7c7      	b.n	80087ea <_dtoa_r+0xa72>
 800885a:	9a01      	ldr	r2, [sp, #4]
 800885c:	9907      	ldr	r1, [sp, #28]
 800885e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008862:	428a      	cmp	r2, r1
 8008864:	d02a      	beq.n	80088bc <_dtoa_r+0xb44>
 8008866:	4659      	mov	r1, fp
 8008868:	2300      	movs	r3, #0
 800886a:	220a      	movs	r2, #10
 800886c:	4620      	mov	r0, r4
 800886e:	f000 fe81 	bl	8009574 <__multadd>
 8008872:	45b8      	cmp	r8, r7
 8008874:	4683      	mov	fp, r0
 8008876:	f04f 0300 	mov.w	r3, #0
 800887a:	f04f 020a 	mov.w	r2, #10
 800887e:	4641      	mov	r1, r8
 8008880:	4620      	mov	r0, r4
 8008882:	d107      	bne.n	8008894 <_dtoa_r+0xb1c>
 8008884:	f000 fe76 	bl	8009574 <__multadd>
 8008888:	4680      	mov	r8, r0
 800888a:	4607      	mov	r7, r0
 800888c:	9b01      	ldr	r3, [sp, #4]
 800888e:	3301      	adds	r3, #1
 8008890:	9301      	str	r3, [sp, #4]
 8008892:	e775      	b.n	8008780 <_dtoa_r+0xa08>
 8008894:	f000 fe6e 	bl	8009574 <__multadd>
 8008898:	4639      	mov	r1, r7
 800889a:	4680      	mov	r8, r0
 800889c:	2300      	movs	r3, #0
 800889e:	220a      	movs	r2, #10
 80088a0:	4620      	mov	r0, r4
 80088a2:	f000 fe67 	bl	8009574 <__multadd>
 80088a6:	4607      	mov	r7, r0
 80088a8:	e7f0      	b.n	800888c <_dtoa_r+0xb14>
 80088aa:	f1b9 0f00 	cmp.w	r9, #0
 80088ae:	9a00      	ldr	r2, [sp, #0]
 80088b0:	bfcc      	ite	gt
 80088b2:	464d      	movgt	r5, r9
 80088b4:	2501      	movle	r5, #1
 80088b6:	4415      	add	r5, r2
 80088b8:	f04f 0800 	mov.w	r8, #0
 80088bc:	4659      	mov	r1, fp
 80088be:	2201      	movs	r2, #1
 80088c0:	4620      	mov	r0, r4
 80088c2:	9301      	str	r3, [sp, #4]
 80088c4:	f001 f850 	bl	8009968 <__lshift>
 80088c8:	4631      	mov	r1, r6
 80088ca:	4683      	mov	fp, r0
 80088cc:	f001 f8b8 	bl	8009a40 <__mcmp>
 80088d0:	2800      	cmp	r0, #0
 80088d2:	dcb2      	bgt.n	800883a <_dtoa_r+0xac2>
 80088d4:	d102      	bne.n	80088dc <_dtoa_r+0xb64>
 80088d6:	9b01      	ldr	r3, [sp, #4]
 80088d8:	07db      	lsls	r3, r3, #31
 80088da:	d4ae      	bmi.n	800883a <_dtoa_r+0xac2>
 80088dc:	462b      	mov	r3, r5
 80088de:	461d      	mov	r5, r3
 80088e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088e4:	2a30      	cmp	r2, #48	; 0x30
 80088e6:	d0fa      	beq.n	80088de <_dtoa_r+0xb66>
 80088e8:	e6f7      	b.n	80086da <_dtoa_r+0x962>
 80088ea:	9a00      	ldr	r2, [sp, #0]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d1a5      	bne.n	800883c <_dtoa_r+0xac4>
 80088f0:	f10a 0a01 	add.w	sl, sl, #1
 80088f4:	2331      	movs	r3, #49	; 0x31
 80088f6:	e779      	b.n	80087ec <_dtoa_r+0xa74>
 80088f8:	4b13      	ldr	r3, [pc, #76]	; (8008948 <_dtoa_r+0xbd0>)
 80088fa:	f7ff baaf 	b.w	8007e5c <_dtoa_r+0xe4>
 80088fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008900:	2b00      	cmp	r3, #0
 8008902:	f47f aa86 	bne.w	8007e12 <_dtoa_r+0x9a>
 8008906:	4b11      	ldr	r3, [pc, #68]	; (800894c <_dtoa_r+0xbd4>)
 8008908:	f7ff baa8 	b.w	8007e5c <_dtoa_r+0xe4>
 800890c:	f1b9 0f00 	cmp.w	r9, #0
 8008910:	dc03      	bgt.n	800891a <_dtoa_r+0xba2>
 8008912:	9b05      	ldr	r3, [sp, #20]
 8008914:	2b02      	cmp	r3, #2
 8008916:	f73f aec9 	bgt.w	80086ac <_dtoa_r+0x934>
 800891a:	9d00      	ldr	r5, [sp, #0]
 800891c:	4631      	mov	r1, r6
 800891e:	4658      	mov	r0, fp
 8008920:	f7ff f99c 	bl	8007c5c <quorem>
 8008924:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008928:	f805 3b01 	strb.w	r3, [r5], #1
 800892c:	9a00      	ldr	r2, [sp, #0]
 800892e:	1aaa      	subs	r2, r5, r2
 8008930:	4591      	cmp	r9, r2
 8008932:	ddba      	ble.n	80088aa <_dtoa_r+0xb32>
 8008934:	4659      	mov	r1, fp
 8008936:	2300      	movs	r3, #0
 8008938:	220a      	movs	r2, #10
 800893a:	4620      	mov	r0, r4
 800893c:	f000 fe1a 	bl	8009574 <__multadd>
 8008940:	4683      	mov	fp, r0
 8008942:	e7eb      	b.n	800891c <_dtoa_r+0xba4>
 8008944:	0800b5c4 	.word	0x0800b5c4
 8008948:	0800b3c0 	.word	0x0800b3c0
 800894c:	0800b541 	.word	0x0800b541

08008950 <__sflush_r>:
 8008950:	898a      	ldrh	r2, [r1, #12]
 8008952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008956:	4605      	mov	r5, r0
 8008958:	0710      	lsls	r0, r2, #28
 800895a:	460c      	mov	r4, r1
 800895c:	d458      	bmi.n	8008a10 <__sflush_r+0xc0>
 800895e:	684b      	ldr	r3, [r1, #4]
 8008960:	2b00      	cmp	r3, #0
 8008962:	dc05      	bgt.n	8008970 <__sflush_r+0x20>
 8008964:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008966:	2b00      	cmp	r3, #0
 8008968:	dc02      	bgt.n	8008970 <__sflush_r+0x20>
 800896a:	2000      	movs	r0, #0
 800896c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008970:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008972:	2e00      	cmp	r6, #0
 8008974:	d0f9      	beq.n	800896a <__sflush_r+0x1a>
 8008976:	2300      	movs	r3, #0
 8008978:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800897c:	682f      	ldr	r7, [r5, #0]
 800897e:	602b      	str	r3, [r5, #0]
 8008980:	d032      	beq.n	80089e8 <__sflush_r+0x98>
 8008982:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008984:	89a3      	ldrh	r3, [r4, #12]
 8008986:	075a      	lsls	r2, r3, #29
 8008988:	d505      	bpl.n	8008996 <__sflush_r+0x46>
 800898a:	6863      	ldr	r3, [r4, #4]
 800898c:	1ac0      	subs	r0, r0, r3
 800898e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008990:	b10b      	cbz	r3, 8008996 <__sflush_r+0x46>
 8008992:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008994:	1ac0      	subs	r0, r0, r3
 8008996:	2300      	movs	r3, #0
 8008998:	4602      	mov	r2, r0
 800899a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800899c:	6a21      	ldr	r1, [r4, #32]
 800899e:	4628      	mov	r0, r5
 80089a0:	47b0      	blx	r6
 80089a2:	1c43      	adds	r3, r0, #1
 80089a4:	89a3      	ldrh	r3, [r4, #12]
 80089a6:	d106      	bne.n	80089b6 <__sflush_r+0x66>
 80089a8:	6829      	ldr	r1, [r5, #0]
 80089aa:	291d      	cmp	r1, #29
 80089ac:	d82c      	bhi.n	8008a08 <__sflush_r+0xb8>
 80089ae:	4a2a      	ldr	r2, [pc, #168]	; (8008a58 <__sflush_r+0x108>)
 80089b0:	40ca      	lsrs	r2, r1
 80089b2:	07d6      	lsls	r6, r2, #31
 80089b4:	d528      	bpl.n	8008a08 <__sflush_r+0xb8>
 80089b6:	2200      	movs	r2, #0
 80089b8:	6062      	str	r2, [r4, #4]
 80089ba:	04d9      	lsls	r1, r3, #19
 80089bc:	6922      	ldr	r2, [r4, #16]
 80089be:	6022      	str	r2, [r4, #0]
 80089c0:	d504      	bpl.n	80089cc <__sflush_r+0x7c>
 80089c2:	1c42      	adds	r2, r0, #1
 80089c4:	d101      	bne.n	80089ca <__sflush_r+0x7a>
 80089c6:	682b      	ldr	r3, [r5, #0]
 80089c8:	b903      	cbnz	r3, 80089cc <__sflush_r+0x7c>
 80089ca:	6560      	str	r0, [r4, #84]	; 0x54
 80089cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089ce:	602f      	str	r7, [r5, #0]
 80089d0:	2900      	cmp	r1, #0
 80089d2:	d0ca      	beq.n	800896a <__sflush_r+0x1a>
 80089d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089d8:	4299      	cmp	r1, r3
 80089da:	d002      	beq.n	80089e2 <__sflush_r+0x92>
 80089dc:	4628      	mov	r0, r5
 80089de:	f7fd f913 	bl	8005c08 <_free_r>
 80089e2:	2000      	movs	r0, #0
 80089e4:	6360      	str	r0, [r4, #52]	; 0x34
 80089e6:	e7c1      	b.n	800896c <__sflush_r+0x1c>
 80089e8:	6a21      	ldr	r1, [r4, #32]
 80089ea:	2301      	movs	r3, #1
 80089ec:	4628      	mov	r0, r5
 80089ee:	47b0      	blx	r6
 80089f0:	1c41      	adds	r1, r0, #1
 80089f2:	d1c7      	bne.n	8008984 <__sflush_r+0x34>
 80089f4:	682b      	ldr	r3, [r5, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d0c4      	beq.n	8008984 <__sflush_r+0x34>
 80089fa:	2b1d      	cmp	r3, #29
 80089fc:	d001      	beq.n	8008a02 <__sflush_r+0xb2>
 80089fe:	2b16      	cmp	r3, #22
 8008a00:	d101      	bne.n	8008a06 <__sflush_r+0xb6>
 8008a02:	602f      	str	r7, [r5, #0]
 8008a04:	e7b1      	b.n	800896a <__sflush_r+0x1a>
 8008a06:	89a3      	ldrh	r3, [r4, #12]
 8008a08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a0c:	81a3      	strh	r3, [r4, #12]
 8008a0e:	e7ad      	b.n	800896c <__sflush_r+0x1c>
 8008a10:	690f      	ldr	r7, [r1, #16]
 8008a12:	2f00      	cmp	r7, #0
 8008a14:	d0a9      	beq.n	800896a <__sflush_r+0x1a>
 8008a16:	0793      	lsls	r3, r2, #30
 8008a18:	680e      	ldr	r6, [r1, #0]
 8008a1a:	bf08      	it	eq
 8008a1c:	694b      	ldreq	r3, [r1, #20]
 8008a1e:	600f      	str	r7, [r1, #0]
 8008a20:	bf18      	it	ne
 8008a22:	2300      	movne	r3, #0
 8008a24:	eba6 0807 	sub.w	r8, r6, r7
 8008a28:	608b      	str	r3, [r1, #8]
 8008a2a:	f1b8 0f00 	cmp.w	r8, #0
 8008a2e:	dd9c      	ble.n	800896a <__sflush_r+0x1a>
 8008a30:	6a21      	ldr	r1, [r4, #32]
 8008a32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008a34:	4643      	mov	r3, r8
 8008a36:	463a      	mov	r2, r7
 8008a38:	4628      	mov	r0, r5
 8008a3a:	47b0      	blx	r6
 8008a3c:	2800      	cmp	r0, #0
 8008a3e:	dc06      	bgt.n	8008a4e <__sflush_r+0xfe>
 8008a40:	89a3      	ldrh	r3, [r4, #12]
 8008a42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a46:	81a3      	strh	r3, [r4, #12]
 8008a48:	f04f 30ff 	mov.w	r0, #4294967295
 8008a4c:	e78e      	b.n	800896c <__sflush_r+0x1c>
 8008a4e:	4407      	add	r7, r0
 8008a50:	eba8 0800 	sub.w	r8, r8, r0
 8008a54:	e7e9      	b.n	8008a2a <__sflush_r+0xda>
 8008a56:	bf00      	nop
 8008a58:	20400001 	.word	0x20400001

08008a5c <_fflush_r>:
 8008a5c:	b538      	push	{r3, r4, r5, lr}
 8008a5e:	690b      	ldr	r3, [r1, #16]
 8008a60:	4605      	mov	r5, r0
 8008a62:	460c      	mov	r4, r1
 8008a64:	b913      	cbnz	r3, 8008a6c <_fflush_r+0x10>
 8008a66:	2500      	movs	r5, #0
 8008a68:	4628      	mov	r0, r5
 8008a6a:	bd38      	pop	{r3, r4, r5, pc}
 8008a6c:	b118      	cbz	r0, 8008a76 <_fflush_r+0x1a>
 8008a6e:	6983      	ldr	r3, [r0, #24]
 8008a70:	b90b      	cbnz	r3, 8008a76 <_fflush_r+0x1a>
 8008a72:	f000 f887 	bl	8008b84 <__sinit>
 8008a76:	4b14      	ldr	r3, [pc, #80]	; (8008ac8 <_fflush_r+0x6c>)
 8008a78:	429c      	cmp	r4, r3
 8008a7a:	d11b      	bne.n	8008ab4 <_fflush_r+0x58>
 8008a7c:	686c      	ldr	r4, [r5, #4]
 8008a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d0ef      	beq.n	8008a66 <_fflush_r+0xa>
 8008a86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008a88:	07d0      	lsls	r0, r2, #31
 8008a8a:	d404      	bmi.n	8008a96 <_fflush_r+0x3a>
 8008a8c:	0599      	lsls	r1, r3, #22
 8008a8e:	d402      	bmi.n	8008a96 <_fflush_r+0x3a>
 8008a90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a92:	f000 fc88 	bl	80093a6 <__retarget_lock_acquire_recursive>
 8008a96:	4628      	mov	r0, r5
 8008a98:	4621      	mov	r1, r4
 8008a9a:	f7ff ff59 	bl	8008950 <__sflush_r>
 8008a9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008aa0:	07da      	lsls	r2, r3, #31
 8008aa2:	4605      	mov	r5, r0
 8008aa4:	d4e0      	bmi.n	8008a68 <_fflush_r+0xc>
 8008aa6:	89a3      	ldrh	r3, [r4, #12]
 8008aa8:	059b      	lsls	r3, r3, #22
 8008aaa:	d4dd      	bmi.n	8008a68 <_fflush_r+0xc>
 8008aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008aae:	f000 fc7b 	bl	80093a8 <__retarget_lock_release_recursive>
 8008ab2:	e7d9      	b.n	8008a68 <_fflush_r+0xc>
 8008ab4:	4b05      	ldr	r3, [pc, #20]	; (8008acc <_fflush_r+0x70>)
 8008ab6:	429c      	cmp	r4, r3
 8008ab8:	d101      	bne.n	8008abe <_fflush_r+0x62>
 8008aba:	68ac      	ldr	r4, [r5, #8]
 8008abc:	e7df      	b.n	8008a7e <_fflush_r+0x22>
 8008abe:	4b04      	ldr	r3, [pc, #16]	; (8008ad0 <_fflush_r+0x74>)
 8008ac0:	429c      	cmp	r4, r3
 8008ac2:	bf08      	it	eq
 8008ac4:	68ec      	ldreq	r4, [r5, #12]
 8008ac6:	e7da      	b.n	8008a7e <_fflush_r+0x22>
 8008ac8:	0800b5f8 	.word	0x0800b5f8
 8008acc:	0800b618 	.word	0x0800b618
 8008ad0:	0800b5d8 	.word	0x0800b5d8

08008ad4 <std>:
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	b510      	push	{r4, lr}
 8008ad8:	4604      	mov	r4, r0
 8008ada:	e9c0 3300 	strd	r3, r3, [r0]
 8008ade:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ae2:	6083      	str	r3, [r0, #8]
 8008ae4:	8181      	strh	r1, [r0, #12]
 8008ae6:	6643      	str	r3, [r0, #100]	; 0x64
 8008ae8:	81c2      	strh	r2, [r0, #14]
 8008aea:	6183      	str	r3, [r0, #24]
 8008aec:	4619      	mov	r1, r3
 8008aee:	2208      	movs	r2, #8
 8008af0:	305c      	adds	r0, #92	; 0x5c
 8008af2:	f7fd f871 	bl	8005bd8 <memset>
 8008af6:	4b05      	ldr	r3, [pc, #20]	; (8008b0c <std+0x38>)
 8008af8:	6263      	str	r3, [r4, #36]	; 0x24
 8008afa:	4b05      	ldr	r3, [pc, #20]	; (8008b10 <std+0x3c>)
 8008afc:	62a3      	str	r3, [r4, #40]	; 0x28
 8008afe:	4b05      	ldr	r3, [pc, #20]	; (8008b14 <std+0x40>)
 8008b00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008b02:	4b05      	ldr	r3, [pc, #20]	; (8008b18 <std+0x44>)
 8008b04:	6224      	str	r4, [r4, #32]
 8008b06:	6323      	str	r3, [r4, #48]	; 0x30
 8008b08:	bd10      	pop	{r4, pc}
 8008b0a:	bf00      	nop
 8008b0c:	0800a3a1 	.word	0x0800a3a1
 8008b10:	0800a3c3 	.word	0x0800a3c3
 8008b14:	0800a3fb 	.word	0x0800a3fb
 8008b18:	0800a41f 	.word	0x0800a41f

08008b1c <_cleanup_r>:
 8008b1c:	4901      	ldr	r1, [pc, #4]	; (8008b24 <_cleanup_r+0x8>)
 8008b1e:	f000 b8af 	b.w	8008c80 <_fwalk_reent>
 8008b22:	bf00      	nop
 8008b24:	08008a5d 	.word	0x08008a5d

08008b28 <__sfmoreglue>:
 8008b28:	b570      	push	{r4, r5, r6, lr}
 8008b2a:	1e4a      	subs	r2, r1, #1
 8008b2c:	2568      	movs	r5, #104	; 0x68
 8008b2e:	4355      	muls	r5, r2
 8008b30:	460e      	mov	r6, r1
 8008b32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008b36:	f7fd f8b7 	bl	8005ca8 <_malloc_r>
 8008b3a:	4604      	mov	r4, r0
 8008b3c:	b140      	cbz	r0, 8008b50 <__sfmoreglue+0x28>
 8008b3e:	2100      	movs	r1, #0
 8008b40:	e9c0 1600 	strd	r1, r6, [r0]
 8008b44:	300c      	adds	r0, #12
 8008b46:	60a0      	str	r0, [r4, #8]
 8008b48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008b4c:	f7fd f844 	bl	8005bd8 <memset>
 8008b50:	4620      	mov	r0, r4
 8008b52:	bd70      	pop	{r4, r5, r6, pc}

08008b54 <__sfp_lock_acquire>:
 8008b54:	4801      	ldr	r0, [pc, #4]	; (8008b5c <__sfp_lock_acquire+0x8>)
 8008b56:	f000 bc26 	b.w	80093a6 <__retarget_lock_acquire_recursive>
 8008b5a:	bf00      	nop
 8008b5c:	20001da9 	.word	0x20001da9

08008b60 <__sfp_lock_release>:
 8008b60:	4801      	ldr	r0, [pc, #4]	; (8008b68 <__sfp_lock_release+0x8>)
 8008b62:	f000 bc21 	b.w	80093a8 <__retarget_lock_release_recursive>
 8008b66:	bf00      	nop
 8008b68:	20001da9 	.word	0x20001da9

08008b6c <__sinit_lock_acquire>:
 8008b6c:	4801      	ldr	r0, [pc, #4]	; (8008b74 <__sinit_lock_acquire+0x8>)
 8008b6e:	f000 bc1a 	b.w	80093a6 <__retarget_lock_acquire_recursive>
 8008b72:	bf00      	nop
 8008b74:	20001da4 	.word	0x20001da4

08008b78 <__sinit_lock_release>:
 8008b78:	4801      	ldr	r0, [pc, #4]	; (8008b80 <__sinit_lock_release+0x8>)
 8008b7a:	f000 bc15 	b.w	80093a8 <__retarget_lock_release_recursive>
 8008b7e:	bf00      	nop
 8008b80:	20001da4 	.word	0x20001da4

08008b84 <__sinit>:
 8008b84:	b510      	push	{r4, lr}
 8008b86:	4604      	mov	r4, r0
 8008b88:	f7ff fff0 	bl	8008b6c <__sinit_lock_acquire>
 8008b8c:	69a3      	ldr	r3, [r4, #24]
 8008b8e:	b11b      	cbz	r3, 8008b98 <__sinit+0x14>
 8008b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b94:	f7ff bff0 	b.w	8008b78 <__sinit_lock_release>
 8008b98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008b9c:	6523      	str	r3, [r4, #80]	; 0x50
 8008b9e:	4b13      	ldr	r3, [pc, #76]	; (8008bec <__sinit+0x68>)
 8008ba0:	4a13      	ldr	r2, [pc, #76]	; (8008bf0 <__sinit+0x6c>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	62a2      	str	r2, [r4, #40]	; 0x28
 8008ba6:	42a3      	cmp	r3, r4
 8008ba8:	bf04      	itt	eq
 8008baa:	2301      	moveq	r3, #1
 8008bac:	61a3      	streq	r3, [r4, #24]
 8008bae:	4620      	mov	r0, r4
 8008bb0:	f000 f820 	bl	8008bf4 <__sfp>
 8008bb4:	6060      	str	r0, [r4, #4]
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	f000 f81c 	bl	8008bf4 <__sfp>
 8008bbc:	60a0      	str	r0, [r4, #8]
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	f000 f818 	bl	8008bf4 <__sfp>
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	60e0      	str	r0, [r4, #12]
 8008bc8:	2104      	movs	r1, #4
 8008bca:	6860      	ldr	r0, [r4, #4]
 8008bcc:	f7ff ff82 	bl	8008ad4 <std>
 8008bd0:	68a0      	ldr	r0, [r4, #8]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	2109      	movs	r1, #9
 8008bd6:	f7ff ff7d 	bl	8008ad4 <std>
 8008bda:	68e0      	ldr	r0, [r4, #12]
 8008bdc:	2202      	movs	r2, #2
 8008bde:	2112      	movs	r1, #18
 8008be0:	f7ff ff78 	bl	8008ad4 <std>
 8008be4:	2301      	movs	r3, #1
 8008be6:	61a3      	str	r3, [r4, #24]
 8008be8:	e7d2      	b.n	8008b90 <__sinit+0xc>
 8008bea:	bf00      	nop
 8008bec:	0800b3ac 	.word	0x0800b3ac
 8008bf0:	08008b1d 	.word	0x08008b1d

08008bf4 <__sfp>:
 8008bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bf6:	4607      	mov	r7, r0
 8008bf8:	f7ff ffac 	bl	8008b54 <__sfp_lock_acquire>
 8008bfc:	4b1e      	ldr	r3, [pc, #120]	; (8008c78 <__sfp+0x84>)
 8008bfe:	681e      	ldr	r6, [r3, #0]
 8008c00:	69b3      	ldr	r3, [r6, #24]
 8008c02:	b913      	cbnz	r3, 8008c0a <__sfp+0x16>
 8008c04:	4630      	mov	r0, r6
 8008c06:	f7ff ffbd 	bl	8008b84 <__sinit>
 8008c0a:	3648      	adds	r6, #72	; 0x48
 8008c0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008c10:	3b01      	subs	r3, #1
 8008c12:	d503      	bpl.n	8008c1c <__sfp+0x28>
 8008c14:	6833      	ldr	r3, [r6, #0]
 8008c16:	b30b      	cbz	r3, 8008c5c <__sfp+0x68>
 8008c18:	6836      	ldr	r6, [r6, #0]
 8008c1a:	e7f7      	b.n	8008c0c <__sfp+0x18>
 8008c1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008c20:	b9d5      	cbnz	r5, 8008c58 <__sfp+0x64>
 8008c22:	4b16      	ldr	r3, [pc, #88]	; (8008c7c <__sfp+0x88>)
 8008c24:	60e3      	str	r3, [r4, #12]
 8008c26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008c2a:	6665      	str	r5, [r4, #100]	; 0x64
 8008c2c:	f000 fbba 	bl	80093a4 <__retarget_lock_init_recursive>
 8008c30:	f7ff ff96 	bl	8008b60 <__sfp_lock_release>
 8008c34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008c38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008c3c:	6025      	str	r5, [r4, #0]
 8008c3e:	61a5      	str	r5, [r4, #24]
 8008c40:	2208      	movs	r2, #8
 8008c42:	4629      	mov	r1, r5
 8008c44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008c48:	f7fc ffc6 	bl	8005bd8 <memset>
 8008c4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008c50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008c54:	4620      	mov	r0, r4
 8008c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c58:	3468      	adds	r4, #104	; 0x68
 8008c5a:	e7d9      	b.n	8008c10 <__sfp+0x1c>
 8008c5c:	2104      	movs	r1, #4
 8008c5e:	4638      	mov	r0, r7
 8008c60:	f7ff ff62 	bl	8008b28 <__sfmoreglue>
 8008c64:	4604      	mov	r4, r0
 8008c66:	6030      	str	r0, [r6, #0]
 8008c68:	2800      	cmp	r0, #0
 8008c6a:	d1d5      	bne.n	8008c18 <__sfp+0x24>
 8008c6c:	f7ff ff78 	bl	8008b60 <__sfp_lock_release>
 8008c70:	230c      	movs	r3, #12
 8008c72:	603b      	str	r3, [r7, #0]
 8008c74:	e7ee      	b.n	8008c54 <__sfp+0x60>
 8008c76:	bf00      	nop
 8008c78:	0800b3ac 	.word	0x0800b3ac
 8008c7c:	ffff0001 	.word	0xffff0001

08008c80 <_fwalk_reent>:
 8008c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c84:	4606      	mov	r6, r0
 8008c86:	4688      	mov	r8, r1
 8008c88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008c8c:	2700      	movs	r7, #0
 8008c8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c92:	f1b9 0901 	subs.w	r9, r9, #1
 8008c96:	d505      	bpl.n	8008ca4 <_fwalk_reent+0x24>
 8008c98:	6824      	ldr	r4, [r4, #0]
 8008c9a:	2c00      	cmp	r4, #0
 8008c9c:	d1f7      	bne.n	8008c8e <_fwalk_reent+0xe>
 8008c9e:	4638      	mov	r0, r7
 8008ca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ca4:	89ab      	ldrh	r3, [r5, #12]
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d907      	bls.n	8008cba <_fwalk_reent+0x3a>
 8008caa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008cae:	3301      	adds	r3, #1
 8008cb0:	d003      	beq.n	8008cba <_fwalk_reent+0x3a>
 8008cb2:	4629      	mov	r1, r5
 8008cb4:	4630      	mov	r0, r6
 8008cb6:	47c0      	blx	r8
 8008cb8:	4307      	orrs	r7, r0
 8008cba:	3568      	adds	r5, #104	; 0x68
 8008cbc:	e7e9      	b.n	8008c92 <_fwalk_reent+0x12>

08008cbe <rshift>:
 8008cbe:	6903      	ldr	r3, [r0, #16]
 8008cc0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008cc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008cc8:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008ccc:	f100 0414 	add.w	r4, r0, #20
 8008cd0:	dd45      	ble.n	8008d5e <rshift+0xa0>
 8008cd2:	f011 011f 	ands.w	r1, r1, #31
 8008cd6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008cda:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008cde:	d10c      	bne.n	8008cfa <rshift+0x3c>
 8008ce0:	f100 0710 	add.w	r7, r0, #16
 8008ce4:	4629      	mov	r1, r5
 8008ce6:	42b1      	cmp	r1, r6
 8008ce8:	d334      	bcc.n	8008d54 <rshift+0x96>
 8008cea:	1a9b      	subs	r3, r3, r2
 8008cec:	009b      	lsls	r3, r3, #2
 8008cee:	1eea      	subs	r2, r5, #3
 8008cf0:	4296      	cmp	r6, r2
 8008cf2:	bf38      	it	cc
 8008cf4:	2300      	movcc	r3, #0
 8008cf6:	4423      	add	r3, r4
 8008cf8:	e015      	b.n	8008d26 <rshift+0x68>
 8008cfa:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008cfe:	f1c1 0820 	rsb	r8, r1, #32
 8008d02:	40cf      	lsrs	r7, r1
 8008d04:	f105 0e04 	add.w	lr, r5, #4
 8008d08:	46a1      	mov	r9, r4
 8008d0a:	4576      	cmp	r6, lr
 8008d0c:	46f4      	mov	ip, lr
 8008d0e:	d815      	bhi.n	8008d3c <rshift+0x7e>
 8008d10:	1a9b      	subs	r3, r3, r2
 8008d12:	009a      	lsls	r2, r3, #2
 8008d14:	3a04      	subs	r2, #4
 8008d16:	3501      	adds	r5, #1
 8008d18:	42ae      	cmp	r6, r5
 8008d1a:	bf38      	it	cc
 8008d1c:	2200      	movcc	r2, #0
 8008d1e:	18a3      	adds	r3, r4, r2
 8008d20:	50a7      	str	r7, [r4, r2]
 8008d22:	b107      	cbz	r7, 8008d26 <rshift+0x68>
 8008d24:	3304      	adds	r3, #4
 8008d26:	1b1a      	subs	r2, r3, r4
 8008d28:	42a3      	cmp	r3, r4
 8008d2a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008d2e:	bf08      	it	eq
 8008d30:	2300      	moveq	r3, #0
 8008d32:	6102      	str	r2, [r0, #16]
 8008d34:	bf08      	it	eq
 8008d36:	6143      	streq	r3, [r0, #20]
 8008d38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d3c:	f8dc c000 	ldr.w	ip, [ip]
 8008d40:	fa0c fc08 	lsl.w	ip, ip, r8
 8008d44:	ea4c 0707 	orr.w	r7, ip, r7
 8008d48:	f849 7b04 	str.w	r7, [r9], #4
 8008d4c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008d50:	40cf      	lsrs	r7, r1
 8008d52:	e7da      	b.n	8008d0a <rshift+0x4c>
 8008d54:	f851 cb04 	ldr.w	ip, [r1], #4
 8008d58:	f847 cf04 	str.w	ip, [r7, #4]!
 8008d5c:	e7c3      	b.n	8008ce6 <rshift+0x28>
 8008d5e:	4623      	mov	r3, r4
 8008d60:	e7e1      	b.n	8008d26 <rshift+0x68>

08008d62 <__hexdig_fun>:
 8008d62:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008d66:	2b09      	cmp	r3, #9
 8008d68:	d802      	bhi.n	8008d70 <__hexdig_fun+0xe>
 8008d6a:	3820      	subs	r0, #32
 8008d6c:	b2c0      	uxtb	r0, r0
 8008d6e:	4770      	bx	lr
 8008d70:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008d74:	2b05      	cmp	r3, #5
 8008d76:	d801      	bhi.n	8008d7c <__hexdig_fun+0x1a>
 8008d78:	3847      	subs	r0, #71	; 0x47
 8008d7a:	e7f7      	b.n	8008d6c <__hexdig_fun+0xa>
 8008d7c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008d80:	2b05      	cmp	r3, #5
 8008d82:	d801      	bhi.n	8008d88 <__hexdig_fun+0x26>
 8008d84:	3827      	subs	r0, #39	; 0x27
 8008d86:	e7f1      	b.n	8008d6c <__hexdig_fun+0xa>
 8008d88:	2000      	movs	r0, #0
 8008d8a:	4770      	bx	lr

08008d8c <__gethex>:
 8008d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d90:	ed2d 8b02 	vpush	{d8}
 8008d94:	b089      	sub	sp, #36	; 0x24
 8008d96:	ee08 0a10 	vmov	s16, r0
 8008d9a:	9304      	str	r3, [sp, #16]
 8008d9c:	4bbc      	ldr	r3, [pc, #752]	; (8009090 <__gethex+0x304>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	9301      	str	r3, [sp, #4]
 8008da2:	4618      	mov	r0, r3
 8008da4:	468b      	mov	fp, r1
 8008da6:	4690      	mov	r8, r2
 8008da8:	f7f7 fa12 	bl	80001d0 <strlen>
 8008dac:	9b01      	ldr	r3, [sp, #4]
 8008dae:	f8db 2000 	ldr.w	r2, [fp]
 8008db2:	4403      	add	r3, r0
 8008db4:	4682      	mov	sl, r0
 8008db6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008dba:	9305      	str	r3, [sp, #20]
 8008dbc:	1c93      	adds	r3, r2, #2
 8008dbe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008dc2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008dc6:	32fe      	adds	r2, #254	; 0xfe
 8008dc8:	18d1      	adds	r1, r2, r3
 8008dca:	461f      	mov	r7, r3
 8008dcc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008dd0:	9100      	str	r1, [sp, #0]
 8008dd2:	2830      	cmp	r0, #48	; 0x30
 8008dd4:	d0f8      	beq.n	8008dc8 <__gethex+0x3c>
 8008dd6:	f7ff ffc4 	bl	8008d62 <__hexdig_fun>
 8008dda:	4604      	mov	r4, r0
 8008ddc:	2800      	cmp	r0, #0
 8008dde:	d13a      	bne.n	8008e56 <__gethex+0xca>
 8008de0:	9901      	ldr	r1, [sp, #4]
 8008de2:	4652      	mov	r2, sl
 8008de4:	4638      	mov	r0, r7
 8008de6:	f001 fb1e 	bl	800a426 <strncmp>
 8008dea:	4605      	mov	r5, r0
 8008dec:	2800      	cmp	r0, #0
 8008dee:	d168      	bne.n	8008ec2 <__gethex+0x136>
 8008df0:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008df4:	eb07 060a 	add.w	r6, r7, sl
 8008df8:	f7ff ffb3 	bl	8008d62 <__hexdig_fun>
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	d062      	beq.n	8008ec6 <__gethex+0x13a>
 8008e00:	4633      	mov	r3, r6
 8008e02:	7818      	ldrb	r0, [r3, #0]
 8008e04:	2830      	cmp	r0, #48	; 0x30
 8008e06:	461f      	mov	r7, r3
 8008e08:	f103 0301 	add.w	r3, r3, #1
 8008e0c:	d0f9      	beq.n	8008e02 <__gethex+0x76>
 8008e0e:	f7ff ffa8 	bl	8008d62 <__hexdig_fun>
 8008e12:	2301      	movs	r3, #1
 8008e14:	fab0 f480 	clz	r4, r0
 8008e18:	0964      	lsrs	r4, r4, #5
 8008e1a:	4635      	mov	r5, r6
 8008e1c:	9300      	str	r3, [sp, #0]
 8008e1e:	463a      	mov	r2, r7
 8008e20:	4616      	mov	r6, r2
 8008e22:	3201      	adds	r2, #1
 8008e24:	7830      	ldrb	r0, [r6, #0]
 8008e26:	f7ff ff9c 	bl	8008d62 <__hexdig_fun>
 8008e2a:	2800      	cmp	r0, #0
 8008e2c:	d1f8      	bne.n	8008e20 <__gethex+0x94>
 8008e2e:	9901      	ldr	r1, [sp, #4]
 8008e30:	4652      	mov	r2, sl
 8008e32:	4630      	mov	r0, r6
 8008e34:	f001 faf7 	bl	800a426 <strncmp>
 8008e38:	b980      	cbnz	r0, 8008e5c <__gethex+0xd0>
 8008e3a:	b94d      	cbnz	r5, 8008e50 <__gethex+0xc4>
 8008e3c:	eb06 050a 	add.w	r5, r6, sl
 8008e40:	462a      	mov	r2, r5
 8008e42:	4616      	mov	r6, r2
 8008e44:	3201      	adds	r2, #1
 8008e46:	7830      	ldrb	r0, [r6, #0]
 8008e48:	f7ff ff8b 	bl	8008d62 <__hexdig_fun>
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	d1f8      	bne.n	8008e42 <__gethex+0xb6>
 8008e50:	1bad      	subs	r5, r5, r6
 8008e52:	00ad      	lsls	r5, r5, #2
 8008e54:	e004      	b.n	8008e60 <__gethex+0xd4>
 8008e56:	2400      	movs	r4, #0
 8008e58:	4625      	mov	r5, r4
 8008e5a:	e7e0      	b.n	8008e1e <__gethex+0x92>
 8008e5c:	2d00      	cmp	r5, #0
 8008e5e:	d1f7      	bne.n	8008e50 <__gethex+0xc4>
 8008e60:	7833      	ldrb	r3, [r6, #0]
 8008e62:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008e66:	2b50      	cmp	r3, #80	; 0x50
 8008e68:	d13b      	bne.n	8008ee2 <__gethex+0x156>
 8008e6a:	7873      	ldrb	r3, [r6, #1]
 8008e6c:	2b2b      	cmp	r3, #43	; 0x2b
 8008e6e:	d02c      	beq.n	8008eca <__gethex+0x13e>
 8008e70:	2b2d      	cmp	r3, #45	; 0x2d
 8008e72:	d02e      	beq.n	8008ed2 <__gethex+0x146>
 8008e74:	1c71      	adds	r1, r6, #1
 8008e76:	f04f 0900 	mov.w	r9, #0
 8008e7a:	7808      	ldrb	r0, [r1, #0]
 8008e7c:	f7ff ff71 	bl	8008d62 <__hexdig_fun>
 8008e80:	1e43      	subs	r3, r0, #1
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	2b18      	cmp	r3, #24
 8008e86:	d82c      	bhi.n	8008ee2 <__gethex+0x156>
 8008e88:	f1a0 0210 	sub.w	r2, r0, #16
 8008e8c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008e90:	f7ff ff67 	bl	8008d62 <__hexdig_fun>
 8008e94:	1e43      	subs	r3, r0, #1
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	2b18      	cmp	r3, #24
 8008e9a:	d91d      	bls.n	8008ed8 <__gethex+0x14c>
 8008e9c:	f1b9 0f00 	cmp.w	r9, #0
 8008ea0:	d000      	beq.n	8008ea4 <__gethex+0x118>
 8008ea2:	4252      	negs	r2, r2
 8008ea4:	4415      	add	r5, r2
 8008ea6:	f8cb 1000 	str.w	r1, [fp]
 8008eaa:	b1e4      	cbz	r4, 8008ee6 <__gethex+0x15a>
 8008eac:	9b00      	ldr	r3, [sp, #0]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	bf14      	ite	ne
 8008eb2:	2700      	movne	r7, #0
 8008eb4:	2706      	moveq	r7, #6
 8008eb6:	4638      	mov	r0, r7
 8008eb8:	b009      	add	sp, #36	; 0x24
 8008eba:	ecbd 8b02 	vpop	{d8}
 8008ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ec2:	463e      	mov	r6, r7
 8008ec4:	4625      	mov	r5, r4
 8008ec6:	2401      	movs	r4, #1
 8008ec8:	e7ca      	b.n	8008e60 <__gethex+0xd4>
 8008eca:	f04f 0900 	mov.w	r9, #0
 8008ece:	1cb1      	adds	r1, r6, #2
 8008ed0:	e7d3      	b.n	8008e7a <__gethex+0xee>
 8008ed2:	f04f 0901 	mov.w	r9, #1
 8008ed6:	e7fa      	b.n	8008ece <__gethex+0x142>
 8008ed8:	230a      	movs	r3, #10
 8008eda:	fb03 0202 	mla	r2, r3, r2, r0
 8008ede:	3a10      	subs	r2, #16
 8008ee0:	e7d4      	b.n	8008e8c <__gethex+0x100>
 8008ee2:	4631      	mov	r1, r6
 8008ee4:	e7df      	b.n	8008ea6 <__gethex+0x11a>
 8008ee6:	1bf3      	subs	r3, r6, r7
 8008ee8:	3b01      	subs	r3, #1
 8008eea:	4621      	mov	r1, r4
 8008eec:	2b07      	cmp	r3, #7
 8008eee:	dc0b      	bgt.n	8008f08 <__gethex+0x17c>
 8008ef0:	ee18 0a10 	vmov	r0, s16
 8008ef4:	f000 fadc 	bl	80094b0 <_Balloc>
 8008ef8:	4604      	mov	r4, r0
 8008efa:	b940      	cbnz	r0, 8008f0e <__gethex+0x182>
 8008efc:	4b65      	ldr	r3, [pc, #404]	; (8009094 <__gethex+0x308>)
 8008efe:	4602      	mov	r2, r0
 8008f00:	21de      	movs	r1, #222	; 0xde
 8008f02:	4865      	ldr	r0, [pc, #404]	; (8009098 <__gethex+0x30c>)
 8008f04:	f001 fac0 	bl	800a488 <__assert_func>
 8008f08:	3101      	adds	r1, #1
 8008f0a:	105b      	asrs	r3, r3, #1
 8008f0c:	e7ee      	b.n	8008eec <__gethex+0x160>
 8008f0e:	f100 0914 	add.w	r9, r0, #20
 8008f12:	f04f 0b00 	mov.w	fp, #0
 8008f16:	f1ca 0301 	rsb	r3, sl, #1
 8008f1a:	f8cd 9008 	str.w	r9, [sp, #8]
 8008f1e:	f8cd b000 	str.w	fp, [sp]
 8008f22:	9306      	str	r3, [sp, #24]
 8008f24:	42b7      	cmp	r7, r6
 8008f26:	d340      	bcc.n	8008faa <__gethex+0x21e>
 8008f28:	9802      	ldr	r0, [sp, #8]
 8008f2a:	9b00      	ldr	r3, [sp, #0]
 8008f2c:	f840 3b04 	str.w	r3, [r0], #4
 8008f30:	eba0 0009 	sub.w	r0, r0, r9
 8008f34:	1080      	asrs	r0, r0, #2
 8008f36:	0146      	lsls	r6, r0, #5
 8008f38:	6120      	str	r0, [r4, #16]
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f000 fbae 	bl	800969c <__hi0bits>
 8008f40:	1a30      	subs	r0, r6, r0
 8008f42:	f8d8 6000 	ldr.w	r6, [r8]
 8008f46:	42b0      	cmp	r0, r6
 8008f48:	dd63      	ble.n	8009012 <__gethex+0x286>
 8008f4a:	1b87      	subs	r7, r0, r6
 8008f4c:	4639      	mov	r1, r7
 8008f4e:	4620      	mov	r0, r4
 8008f50:	f000 ff48 	bl	8009de4 <__any_on>
 8008f54:	4682      	mov	sl, r0
 8008f56:	b1a8      	cbz	r0, 8008f84 <__gethex+0x1f8>
 8008f58:	1e7b      	subs	r3, r7, #1
 8008f5a:	1159      	asrs	r1, r3, #5
 8008f5c:	f003 021f 	and.w	r2, r3, #31
 8008f60:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008f64:	f04f 0a01 	mov.w	sl, #1
 8008f68:	fa0a f202 	lsl.w	r2, sl, r2
 8008f6c:	420a      	tst	r2, r1
 8008f6e:	d009      	beq.n	8008f84 <__gethex+0x1f8>
 8008f70:	4553      	cmp	r3, sl
 8008f72:	dd05      	ble.n	8008f80 <__gethex+0x1f4>
 8008f74:	1eb9      	subs	r1, r7, #2
 8008f76:	4620      	mov	r0, r4
 8008f78:	f000 ff34 	bl	8009de4 <__any_on>
 8008f7c:	2800      	cmp	r0, #0
 8008f7e:	d145      	bne.n	800900c <__gethex+0x280>
 8008f80:	f04f 0a02 	mov.w	sl, #2
 8008f84:	4639      	mov	r1, r7
 8008f86:	4620      	mov	r0, r4
 8008f88:	f7ff fe99 	bl	8008cbe <rshift>
 8008f8c:	443d      	add	r5, r7
 8008f8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f92:	42ab      	cmp	r3, r5
 8008f94:	da4c      	bge.n	8009030 <__gethex+0x2a4>
 8008f96:	ee18 0a10 	vmov	r0, s16
 8008f9a:	4621      	mov	r1, r4
 8008f9c:	f000 fac8 	bl	8009530 <_Bfree>
 8008fa0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	6013      	str	r3, [r2, #0]
 8008fa6:	27a3      	movs	r7, #163	; 0xa3
 8008fa8:	e785      	b.n	8008eb6 <__gethex+0x12a>
 8008faa:	1e73      	subs	r3, r6, #1
 8008fac:	9a05      	ldr	r2, [sp, #20]
 8008fae:	9303      	str	r3, [sp, #12]
 8008fb0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d019      	beq.n	8008fec <__gethex+0x260>
 8008fb8:	f1bb 0f20 	cmp.w	fp, #32
 8008fbc:	d107      	bne.n	8008fce <__gethex+0x242>
 8008fbe:	9b02      	ldr	r3, [sp, #8]
 8008fc0:	9a00      	ldr	r2, [sp, #0]
 8008fc2:	f843 2b04 	str.w	r2, [r3], #4
 8008fc6:	9302      	str	r3, [sp, #8]
 8008fc8:	2300      	movs	r3, #0
 8008fca:	9300      	str	r3, [sp, #0]
 8008fcc:	469b      	mov	fp, r3
 8008fce:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008fd2:	f7ff fec6 	bl	8008d62 <__hexdig_fun>
 8008fd6:	9b00      	ldr	r3, [sp, #0]
 8008fd8:	f000 000f 	and.w	r0, r0, #15
 8008fdc:	fa00 f00b 	lsl.w	r0, r0, fp
 8008fe0:	4303      	orrs	r3, r0
 8008fe2:	9300      	str	r3, [sp, #0]
 8008fe4:	f10b 0b04 	add.w	fp, fp, #4
 8008fe8:	9b03      	ldr	r3, [sp, #12]
 8008fea:	e00d      	b.n	8009008 <__gethex+0x27c>
 8008fec:	9b03      	ldr	r3, [sp, #12]
 8008fee:	9a06      	ldr	r2, [sp, #24]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	42bb      	cmp	r3, r7
 8008ff4:	d3e0      	bcc.n	8008fb8 <__gethex+0x22c>
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	9901      	ldr	r1, [sp, #4]
 8008ffa:	9307      	str	r3, [sp, #28]
 8008ffc:	4652      	mov	r2, sl
 8008ffe:	f001 fa12 	bl	800a426 <strncmp>
 8009002:	9b07      	ldr	r3, [sp, #28]
 8009004:	2800      	cmp	r0, #0
 8009006:	d1d7      	bne.n	8008fb8 <__gethex+0x22c>
 8009008:	461e      	mov	r6, r3
 800900a:	e78b      	b.n	8008f24 <__gethex+0x198>
 800900c:	f04f 0a03 	mov.w	sl, #3
 8009010:	e7b8      	b.n	8008f84 <__gethex+0x1f8>
 8009012:	da0a      	bge.n	800902a <__gethex+0x29e>
 8009014:	1a37      	subs	r7, r6, r0
 8009016:	4621      	mov	r1, r4
 8009018:	ee18 0a10 	vmov	r0, s16
 800901c:	463a      	mov	r2, r7
 800901e:	f000 fca3 	bl	8009968 <__lshift>
 8009022:	1bed      	subs	r5, r5, r7
 8009024:	4604      	mov	r4, r0
 8009026:	f100 0914 	add.w	r9, r0, #20
 800902a:	f04f 0a00 	mov.w	sl, #0
 800902e:	e7ae      	b.n	8008f8e <__gethex+0x202>
 8009030:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009034:	42a8      	cmp	r0, r5
 8009036:	dd72      	ble.n	800911e <__gethex+0x392>
 8009038:	1b45      	subs	r5, r0, r5
 800903a:	42ae      	cmp	r6, r5
 800903c:	dc36      	bgt.n	80090ac <__gethex+0x320>
 800903e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009042:	2b02      	cmp	r3, #2
 8009044:	d02a      	beq.n	800909c <__gethex+0x310>
 8009046:	2b03      	cmp	r3, #3
 8009048:	d02c      	beq.n	80090a4 <__gethex+0x318>
 800904a:	2b01      	cmp	r3, #1
 800904c:	d115      	bne.n	800907a <__gethex+0x2ee>
 800904e:	42ae      	cmp	r6, r5
 8009050:	d113      	bne.n	800907a <__gethex+0x2ee>
 8009052:	2e01      	cmp	r6, #1
 8009054:	d10b      	bne.n	800906e <__gethex+0x2e2>
 8009056:	9a04      	ldr	r2, [sp, #16]
 8009058:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800905c:	6013      	str	r3, [r2, #0]
 800905e:	2301      	movs	r3, #1
 8009060:	6123      	str	r3, [r4, #16]
 8009062:	f8c9 3000 	str.w	r3, [r9]
 8009066:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009068:	2762      	movs	r7, #98	; 0x62
 800906a:	601c      	str	r4, [r3, #0]
 800906c:	e723      	b.n	8008eb6 <__gethex+0x12a>
 800906e:	1e71      	subs	r1, r6, #1
 8009070:	4620      	mov	r0, r4
 8009072:	f000 feb7 	bl	8009de4 <__any_on>
 8009076:	2800      	cmp	r0, #0
 8009078:	d1ed      	bne.n	8009056 <__gethex+0x2ca>
 800907a:	ee18 0a10 	vmov	r0, s16
 800907e:	4621      	mov	r1, r4
 8009080:	f000 fa56 	bl	8009530 <_Bfree>
 8009084:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009086:	2300      	movs	r3, #0
 8009088:	6013      	str	r3, [r2, #0]
 800908a:	2750      	movs	r7, #80	; 0x50
 800908c:	e713      	b.n	8008eb6 <__gethex+0x12a>
 800908e:	bf00      	nop
 8009090:	0800b6a4 	.word	0x0800b6a4
 8009094:	0800b5c4 	.word	0x0800b5c4
 8009098:	0800b638 	.word	0x0800b638
 800909c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d1eb      	bne.n	800907a <__gethex+0x2ee>
 80090a2:	e7d8      	b.n	8009056 <__gethex+0x2ca>
 80090a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d1d5      	bne.n	8009056 <__gethex+0x2ca>
 80090aa:	e7e6      	b.n	800907a <__gethex+0x2ee>
 80090ac:	1e6f      	subs	r7, r5, #1
 80090ae:	f1ba 0f00 	cmp.w	sl, #0
 80090b2:	d131      	bne.n	8009118 <__gethex+0x38c>
 80090b4:	b127      	cbz	r7, 80090c0 <__gethex+0x334>
 80090b6:	4639      	mov	r1, r7
 80090b8:	4620      	mov	r0, r4
 80090ba:	f000 fe93 	bl	8009de4 <__any_on>
 80090be:	4682      	mov	sl, r0
 80090c0:	117b      	asrs	r3, r7, #5
 80090c2:	2101      	movs	r1, #1
 80090c4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80090c8:	f007 071f 	and.w	r7, r7, #31
 80090cc:	fa01 f707 	lsl.w	r7, r1, r7
 80090d0:	421f      	tst	r7, r3
 80090d2:	4629      	mov	r1, r5
 80090d4:	4620      	mov	r0, r4
 80090d6:	bf18      	it	ne
 80090d8:	f04a 0a02 	orrne.w	sl, sl, #2
 80090dc:	1b76      	subs	r6, r6, r5
 80090de:	f7ff fdee 	bl	8008cbe <rshift>
 80090e2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80090e6:	2702      	movs	r7, #2
 80090e8:	f1ba 0f00 	cmp.w	sl, #0
 80090ec:	d048      	beq.n	8009180 <__gethex+0x3f4>
 80090ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80090f2:	2b02      	cmp	r3, #2
 80090f4:	d015      	beq.n	8009122 <__gethex+0x396>
 80090f6:	2b03      	cmp	r3, #3
 80090f8:	d017      	beq.n	800912a <__gethex+0x39e>
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d109      	bne.n	8009112 <__gethex+0x386>
 80090fe:	f01a 0f02 	tst.w	sl, #2
 8009102:	d006      	beq.n	8009112 <__gethex+0x386>
 8009104:	f8d9 0000 	ldr.w	r0, [r9]
 8009108:	ea4a 0a00 	orr.w	sl, sl, r0
 800910c:	f01a 0f01 	tst.w	sl, #1
 8009110:	d10e      	bne.n	8009130 <__gethex+0x3a4>
 8009112:	f047 0710 	orr.w	r7, r7, #16
 8009116:	e033      	b.n	8009180 <__gethex+0x3f4>
 8009118:	f04f 0a01 	mov.w	sl, #1
 800911c:	e7d0      	b.n	80090c0 <__gethex+0x334>
 800911e:	2701      	movs	r7, #1
 8009120:	e7e2      	b.n	80090e8 <__gethex+0x35c>
 8009122:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009124:	f1c3 0301 	rsb	r3, r3, #1
 8009128:	9315      	str	r3, [sp, #84]	; 0x54
 800912a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800912c:	2b00      	cmp	r3, #0
 800912e:	d0f0      	beq.n	8009112 <__gethex+0x386>
 8009130:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009134:	f104 0314 	add.w	r3, r4, #20
 8009138:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800913c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009140:	f04f 0c00 	mov.w	ip, #0
 8009144:	4618      	mov	r0, r3
 8009146:	f853 2b04 	ldr.w	r2, [r3], #4
 800914a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800914e:	d01c      	beq.n	800918a <__gethex+0x3fe>
 8009150:	3201      	adds	r2, #1
 8009152:	6002      	str	r2, [r0, #0]
 8009154:	2f02      	cmp	r7, #2
 8009156:	f104 0314 	add.w	r3, r4, #20
 800915a:	d13f      	bne.n	80091dc <__gethex+0x450>
 800915c:	f8d8 2000 	ldr.w	r2, [r8]
 8009160:	3a01      	subs	r2, #1
 8009162:	42b2      	cmp	r2, r6
 8009164:	d10a      	bne.n	800917c <__gethex+0x3f0>
 8009166:	1171      	asrs	r1, r6, #5
 8009168:	2201      	movs	r2, #1
 800916a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800916e:	f006 061f 	and.w	r6, r6, #31
 8009172:	fa02 f606 	lsl.w	r6, r2, r6
 8009176:	421e      	tst	r6, r3
 8009178:	bf18      	it	ne
 800917a:	4617      	movne	r7, r2
 800917c:	f047 0720 	orr.w	r7, r7, #32
 8009180:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009182:	601c      	str	r4, [r3, #0]
 8009184:	9b04      	ldr	r3, [sp, #16]
 8009186:	601d      	str	r5, [r3, #0]
 8009188:	e695      	b.n	8008eb6 <__gethex+0x12a>
 800918a:	4299      	cmp	r1, r3
 800918c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009190:	d8d8      	bhi.n	8009144 <__gethex+0x3b8>
 8009192:	68a3      	ldr	r3, [r4, #8]
 8009194:	459b      	cmp	fp, r3
 8009196:	db19      	blt.n	80091cc <__gethex+0x440>
 8009198:	6861      	ldr	r1, [r4, #4]
 800919a:	ee18 0a10 	vmov	r0, s16
 800919e:	3101      	adds	r1, #1
 80091a0:	f000 f986 	bl	80094b0 <_Balloc>
 80091a4:	4681      	mov	r9, r0
 80091a6:	b918      	cbnz	r0, 80091b0 <__gethex+0x424>
 80091a8:	4b1a      	ldr	r3, [pc, #104]	; (8009214 <__gethex+0x488>)
 80091aa:	4602      	mov	r2, r0
 80091ac:	2184      	movs	r1, #132	; 0x84
 80091ae:	e6a8      	b.n	8008f02 <__gethex+0x176>
 80091b0:	6922      	ldr	r2, [r4, #16]
 80091b2:	3202      	adds	r2, #2
 80091b4:	f104 010c 	add.w	r1, r4, #12
 80091b8:	0092      	lsls	r2, r2, #2
 80091ba:	300c      	adds	r0, #12
 80091bc:	f7fc fcfe 	bl	8005bbc <memcpy>
 80091c0:	4621      	mov	r1, r4
 80091c2:	ee18 0a10 	vmov	r0, s16
 80091c6:	f000 f9b3 	bl	8009530 <_Bfree>
 80091ca:	464c      	mov	r4, r9
 80091cc:	6923      	ldr	r3, [r4, #16]
 80091ce:	1c5a      	adds	r2, r3, #1
 80091d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80091d4:	6122      	str	r2, [r4, #16]
 80091d6:	2201      	movs	r2, #1
 80091d8:	615a      	str	r2, [r3, #20]
 80091da:	e7bb      	b.n	8009154 <__gethex+0x3c8>
 80091dc:	6922      	ldr	r2, [r4, #16]
 80091de:	455a      	cmp	r2, fp
 80091e0:	dd0b      	ble.n	80091fa <__gethex+0x46e>
 80091e2:	2101      	movs	r1, #1
 80091e4:	4620      	mov	r0, r4
 80091e6:	f7ff fd6a 	bl	8008cbe <rshift>
 80091ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80091ee:	3501      	adds	r5, #1
 80091f0:	42ab      	cmp	r3, r5
 80091f2:	f6ff aed0 	blt.w	8008f96 <__gethex+0x20a>
 80091f6:	2701      	movs	r7, #1
 80091f8:	e7c0      	b.n	800917c <__gethex+0x3f0>
 80091fa:	f016 061f 	ands.w	r6, r6, #31
 80091fe:	d0fa      	beq.n	80091f6 <__gethex+0x46a>
 8009200:	449a      	add	sl, r3
 8009202:	f1c6 0620 	rsb	r6, r6, #32
 8009206:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800920a:	f000 fa47 	bl	800969c <__hi0bits>
 800920e:	42b0      	cmp	r0, r6
 8009210:	dbe7      	blt.n	80091e2 <__gethex+0x456>
 8009212:	e7f0      	b.n	80091f6 <__gethex+0x46a>
 8009214:	0800b5c4 	.word	0x0800b5c4

08009218 <L_shift>:
 8009218:	f1c2 0208 	rsb	r2, r2, #8
 800921c:	0092      	lsls	r2, r2, #2
 800921e:	b570      	push	{r4, r5, r6, lr}
 8009220:	f1c2 0620 	rsb	r6, r2, #32
 8009224:	6843      	ldr	r3, [r0, #4]
 8009226:	6804      	ldr	r4, [r0, #0]
 8009228:	fa03 f506 	lsl.w	r5, r3, r6
 800922c:	432c      	orrs	r4, r5
 800922e:	40d3      	lsrs	r3, r2
 8009230:	6004      	str	r4, [r0, #0]
 8009232:	f840 3f04 	str.w	r3, [r0, #4]!
 8009236:	4288      	cmp	r0, r1
 8009238:	d3f4      	bcc.n	8009224 <L_shift+0xc>
 800923a:	bd70      	pop	{r4, r5, r6, pc}

0800923c <__match>:
 800923c:	b530      	push	{r4, r5, lr}
 800923e:	6803      	ldr	r3, [r0, #0]
 8009240:	3301      	adds	r3, #1
 8009242:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009246:	b914      	cbnz	r4, 800924e <__match+0x12>
 8009248:	6003      	str	r3, [r0, #0]
 800924a:	2001      	movs	r0, #1
 800924c:	bd30      	pop	{r4, r5, pc}
 800924e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009252:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009256:	2d19      	cmp	r5, #25
 8009258:	bf98      	it	ls
 800925a:	3220      	addls	r2, #32
 800925c:	42a2      	cmp	r2, r4
 800925e:	d0f0      	beq.n	8009242 <__match+0x6>
 8009260:	2000      	movs	r0, #0
 8009262:	e7f3      	b.n	800924c <__match+0x10>

08009264 <__hexnan>:
 8009264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009268:	680b      	ldr	r3, [r1, #0]
 800926a:	6801      	ldr	r1, [r0, #0]
 800926c:	115e      	asrs	r6, r3, #5
 800926e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009272:	f013 031f 	ands.w	r3, r3, #31
 8009276:	b087      	sub	sp, #28
 8009278:	bf18      	it	ne
 800927a:	3604      	addne	r6, #4
 800927c:	2500      	movs	r5, #0
 800927e:	1f37      	subs	r7, r6, #4
 8009280:	4682      	mov	sl, r0
 8009282:	4690      	mov	r8, r2
 8009284:	9301      	str	r3, [sp, #4]
 8009286:	f846 5c04 	str.w	r5, [r6, #-4]
 800928a:	46b9      	mov	r9, r7
 800928c:	463c      	mov	r4, r7
 800928e:	9502      	str	r5, [sp, #8]
 8009290:	46ab      	mov	fp, r5
 8009292:	784a      	ldrb	r2, [r1, #1]
 8009294:	1c4b      	adds	r3, r1, #1
 8009296:	9303      	str	r3, [sp, #12]
 8009298:	b342      	cbz	r2, 80092ec <__hexnan+0x88>
 800929a:	4610      	mov	r0, r2
 800929c:	9105      	str	r1, [sp, #20]
 800929e:	9204      	str	r2, [sp, #16]
 80092a0:	f7ff fd5f 	bl	8008d62 <__hexdig_fun>
 80092a4:	2800      	cmp	r0, #0
 80092a6:	d14f      	bne.n	8009348 <__hexnan+0xe4>
 80092a8:	9a04      	ldr	r2, [sp, #16]
 80092aa:	9905      	ldr	r1, [sp, #20]
 80092ac:	2a20      	cmp	r2, #32
 80092ae:	d818      	bhi.n	80092e2 <__hexnan+0x7e>
 80092b0:	9b02      	ldr	r3, [sp, #8]
 80092b2:	459b      	cmp	fp, r3
 80092b4:	dd13      	ble.n	80092de <__hexnan+0x7a>
 80092b6:	454c      	cmp	r4, r9
 80092b8:	d206      	bcs.n	80092c8 <__hexnan+0x64>
 80092ba:	2d07      	cmp	r5, #7
 80092bc:	dc04      	bgt.n	80092c8 <__hexnan+0x64>
 80092be:	462a      	mov	r2, r5
 80092c0:	4649      	mov	r1, r9
 80092c2:	4620      	mov	r0, r4
 80092c4:	f7ff ffa8 	bl	8009218 <L_shift>
 80092c8:	4544      	cmp	r4, r8
 80092ca:	d950      	bls.n	800936e <__hexnan+0x10a>
 80092cc:	2300      	movs	r3, #0
 80092ce:	f1a4 0904 	sub.w	r9, r4, #4
 80092d2:	f844 3c04 	str.w	r3, [r4, #-4]
 80092d6:	f8cd b008 	str.w	fp, [sp, #8]
 80092da:	464c      	mov	r4, r9
 80092dc:	461d      	mov	r5, r3
 80092de:	9903      	ldr	r1, [sp, #12]
 80092e0:	e7d7      	b.n	8009292 <__hexnan+0x2e>
 80092e2:	2a29      	cmp	r2, #41	; 0x29
 80092e4:	d156      	bne.n	8009394 <__hexnan+0x130>
 80092e6:	3102      	adds	r1, #2
 80092e8:	f8ca 1000 	str.w	r1, [sl]
 80092ec:	f1bb 0f00 	cmp.w	fp, #0
 80092f0:	d050      	beq.n	8009394 <__hexnan+0x130>
 80092f2:	454c      	cmp	r4, r9
 80092f4:	d206      	bcs.n	8009304 <__hexnan+0xa0>
 80092f6:	2d07      	cmp	r5, #7
 80092f8:	dc04      	bgt.n	8009304 <__hexnan+0xa0>
 80092fa:	462a      	mov	r2, r5
 80092fc:	4649      	mov	r1, r9
 80092fe:	4620      	mov	r0, r4
 8009300:	f7ff ff8a 	bl	8009218 <L_shift>
 8009304:	4544      	cmp	r4, r8
 8009306:	d934      	bls.n	8009372 <__hexnan+0x10e>
 8009308:	f1a8 0204 	sub.w	r2, r8, #4
 800930c:	4623      	mov	r3, r4
 800930e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009312:	f842 1f04 	str.w	r1, [r2, #4]!
 8009316:	429f      	cmp	r7, r3
 8009318:	d2f9      	bcs.n	800930e <__hexnan+0xaa>
 800931a:	1b3b      	subs	r3, r7, r4
 800931c:	f023 0303 	bic.w	r3, r3, #3
 8009320:	3304      	adds	r3, #4
 8009322:	3401      	adds	r4, #1
 8009324:	3e03      	subs	r6, #3
 8009326:	42b4      	cmp	r4, r6
 8009328:	bf88      	it	hi
 800932a:	2304      	movhi	r3, #4
 800932c:	4443      	add	r3, r8
 800932e:	2200      	movs	r2, #0
 8009330:	f843 2b04 	str.w	r2, [r3], #4
 8009334:	429f      	cmp	r7, r3
 8009336:	d2fb      	bcs.n	8009330 <__hexnan+0xcc>
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	b91b      	cbnz	r3, 8009344 <__hexnan+0xe0>
 800933c:	4547      	cmp	r7, r8
 800933e:	d127      	bne.n	8009390 <__hexnan+0x12c>
 8009340:	2301      	movs	r3, #1
 8009342:	603b      	str	r3, [r7, #0]
 8009344:	2005      	movs	r0, #5
 8009346:	e026      	b.n	8009396 <__hexnan+0x132>
 8009348:	3501      	adds	r5, #1
 800934a:	2d08      	cmp	r5, #8
 800934c:	f10b 0b01 	add.w	fp, fp, #1
 8009350:	dd06      	ble.n	8009360 <__hexnan+0xfc>
 8009352:	4544      	cmp	r4, r8
 8009354:	d9c3      	bls.n	80092de <__hexnan+0x7a>
 8009356:	2300      	movs	r3, #0
 8009358:	f844 3c04 	str.w	r3, [r4, #-4]
 800935c:	2501      	movs	r5, #1
 800935e:	3c04      	subs	r4, #4
 8009360:	6822      	ldr	r2, [r4, #0]
 8009362:	f000 000f 	and.w	r0, r0, #15
 8009366:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800936a:	6022      	str	r2, [r4, #0]
 800936c:	e7b7      	b.n	80092de <__hexnan+0x7a>
 800936e:	2508      	movs	r5, #8
 8009370:	e7b5      	b.n	80092de <__hexnan+0x7a>
 8009372:	9b01      	ldr	r3, [sp, #4]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d0df      	beq.n	8009338 <__hexnan+0xd4>
 8009378:	f04f 32ff 	mov.w	r2, #4294967295
 800937c:	f1c3 0320 	rsb	r3, r3, #32
 8009380:	fa22 f303 	lsr.w	r3, r2, r3
 8009384:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009388:	401a      	ands	r2, r3
 800938a:	f846 2c04 	str.w	r2, [r6, #-4]
 800938e:	e7d3      	b.n	8009338 <__hexnan+0xd4>
 8009390:	3f04      	subs	r7, #4
 8009392:	e7d1      	b.n	8009338 <__hexnan+0xd4>
 8009394:	2004      	movs	r0, #4
 8009396:	b007      	add	sp, #28
 8009398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800939c <_localeconv_r>:
 800939c:	4800      	ldr	r0, [pc, #0]	; (80093a0 <_localeconv_r+0x4>)
 800939e:	4770      	bx	lr
 80093a0:	200001b4 	.word	0x200001b4

080093a4 <__retarget_lock_init_recursive>:
 80093a4:	4770      	bx	lr

080093a6 <__retarget_lock_acquire_recursive>:
 80093a6:	4770      	bx	lr

080093a8 <__retarget_lock_release_recursive>:
 80093a8:	4770      	bx	lr

080093aa <__swhatbuf_r>:
 80093aa:	b570      	push	{r4, r5, r6, lr}
 80093ac:	460e      	mov	r6, r1
 80093ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093b2:	2900      	cmp	r1, #0
 80093b4:	b096      	sub	sp, #88	; 0x58
 80093b6:	4614      	mov	r4, r2
 80093b8:	461d      	mov	r5, r3
 80093ba:	da07      	bge.n	80093cc <__swhatbuf_r+0x22>
 80093bc:	2300      	movs	r3, #0
 80093be:	602b      	str	r3, [r5, #0]
 80093c0:	89b3      	ldrh	r3, [r6, #12]
 80093c2:	061a      	lsls	r2, r3, #24
 80093c4:	d410      	bmi.n	80093e8 <__swhatbuf_r+0x3e>
 80093c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093ca:	e00e      	b.n	80093ea <__swhatbuf_r+0x40>
 80093cc:	466a      	mov	r2, sp
 80093ce:	f001 f89b 	bl	800a508 <_fstat_r>
 80093d2:	2800      	cmp	r0, #0
 80093d4:	dbf2      	blt.n	80093bc <__swhatbuf_r+0x12>
 80093d6:	9a01      	ldr	r2, [sp, #4]
 80093d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80093dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80093e0:	425a      	negs	r2, r3
 80093e2:	415a      	adcs	r2, r3
 80093e4:	602a      	str	r2, [r5, #0]
 80093e6:	e7ee      	b.n	80093c6 <__swhatbuf_r+0x1c>
 80093e8:	2340      	movs	r3, #64	; 0x40
 80093ea:	2000      	movs	r0, #0
 80093ec:	6023      	str	r3, [r4, #0]
 80093ee:	b016      	add	sp, #88	; 0x58
 80093f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080093f4 <__smakebuf_r>:
 80093f4:	898b      	ldrh	r3, [r1, #12]
 80093f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80093f8:	079d      	lsls	r5, r3, #30
 80093fa:	4606      	mov	r6, r0
 80093fc:	460c      	mov	r4, r1
 80093fe:	d507      	bpl.n	8009410 <__smakebuf_r+0x1c>
 8009400:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009404:	6023      	str	r3, [r4, #0]
 8009406:	6123      	str	r3, [r4, #16]
 8009408:	2301      	movs	r3, #1
 800940a:	6163      	str	r3, [r4, #20]
 800940c:	b002      	add	sp, #8
 800940e:	bd70      	pop	{r4, r5, r6, pc}
 8009410:	ab01      	add	r3, sp, #4
 8009412:	466a      	mov	r2, sp
 8009414:	f7ff ffc9 	bl	80093aa <__swhatbuf_r>
 8009418:	9900      	ldr	r1, [sp, #0]
 800941a:	4605      	mov	r5, r0
 800941c:	4630      	mov	r0, r6
 800941e:	f7fc fc43 	bl	8005ca8 <_malloc_r>
 8009422:	b948      	cbnz	r0, 8009438 <__smakebuf_r+0x44>
 8009424:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009428:	059a      	lsls	r2, r3, #22
 800942a:	d4ef      	bmi.n	800940c <__smakebuf_r+0x18>
 800942c:	f023 0303 	bic.w	r3, r3, #3
 8009430:	f043 0302 	orr.w	r3, r3, #2
 8009434:	81a3      	strh	r3, [r4, #12]
 8009436:	e7e3      	b.n	8009400 <__smakebuf_r+0xc>
 8009438:	4b0d      	ldr	r3, [pc, #52]	; (8009470 <__smakebuf_r+0x7c>)
 800943a:	62b3      	str	r3, [r6, #40]	; 0x28
 800943c:	89a3      	ldrh	r3, [r4, #12]
 800943e:	6020      	str	r0, [r4, #0]
 8009440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009444:	81a3      	strh	r3, [r4, #12]
 8009446:	9b00      	ldr	r3, [sp, #0]
 8009448:	6163      	str	r3, [r4, #20]
 800944a:	9b01      	ldr	r3, [sp, #4]
 800944c:	6120      	str	r0, [r4, #16]
 800944e:	b15b      	cbz	r3, 8009468 <__smakebuf_r+0x74>
 8009450:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009454:	4630      	mov	r0, r6
 8009456:	f001 f869 	bl	800a52c <_isatty_r>
 800945a:	b128      	cbz	r0, 8009468 <__smakebuf_r+0x74>
 800945c:	89a3      	ldrh	r3, [r4, #12]
 800945e:	f023 0303 	bic.w	r3, r3, #3
 8009462:	f043 0301 	orr.w	r3, r3, #1
 8009466:	81a3      	strh	r3, [r4, #12]
 8009468:	89a0      	ldrh	r0, [r4, #12]
 800946a:	4305      	orrs	r5, r0
 800946c:	81a5      	strh	r5, [r4, #12]
 800946e:	e7cd      	b.n	800940c <__smakebuf_r+0x18>
 8009470:	08008b1d 	.word	0x08008b1d

08009474 <__ascii_mbtowc>:
 8009474:	b082      	sub	sp, #8
 8009476:	b901      	cbnz	r1, 800947a <__ascii_mbtowc+0x6>
 8009478:	a901      	add	r1, sp, #4
 800947a:	b142      	cbz	r2, 800948e <__ascii_mbtowc+0x1a>
 800947c:	b14b      	cbz	r3, 8009492 <__ascii_mbtowc+0x1e>
 800947e:	7813      	ldrb	r3, [r2, #0]
 8009480:	600b      	str	r3, [r1, #0]
 8009482:	7812      	ldrb	r2, [r2, #0]
 8009484:	1e10      	subs	r0, r2, #0
 8009486:	bf18      	it	ne
 8009488:	2001      	movne	r0, #1
 800948a:	b002      	add	sp, #8
 800948c:	4770      	bx	lr
 800948e:	4610      	mov	r0, r2
 8009490:	e7fb      	b.n	800948a <__ascii_mbtowc+0x16>
 8009492:	f06f 0001 	mvn.w	r0, #1
 8009496:	e7f8      	b.n	800948a <__ascii_mbtowc+0x16>

08009498 <__malloc_lock>:
 8009498:	4801      	ldr	r0, [pc, #4]	; (80094a0 <__malloc_lock+0x8>)
 800949a:	f7ff bf84 	b.w	80093a6 <__retarget_lock_acquire_recursive>
 800949e:	bf00      	nop
 80094a0:	20001da5 	.word	0x20001da5

080094a4 <__malloc_unlock>:
 80094a4:	4801      	ldr	r0, [pc, #4]	; (80094ac <__malloc_unlock+0x8>)
 80094a6:	f7ff bf7f 	b.w	80093a8 <__retarget_lock_release_recursive>
 80094aa:	bf00      	nop
 80094ac:	20001da5 	.word	0x20001da5

080094b0 <_Balloc>:
 80094b0:	b570      	push	{r4, r5, r6, lr}
 80094b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80094b4:	4604      	mov	r4, r0
 80094b6:	460d      	mov	r5, r1
 80094b8:	b976      	cbnz	r6, 80094d8 <_Balloc+0x28>
 80094ba:	2010      	movs	r0, #16
 80094bc:	f7fc fb6e 	bl	8005b9c <malloc>
 80094c0:	4602      	mov	r2, r0
 80094c2:	6260      	str	r0, [r4, #36]	; 0x24
 80094c4:	b920      	cbnz	r0, 80094d0 <_Balloc+0x20>
 80094c6:	4b18      	ldr	r3, [pc, #96]	; (8009528 <_Balloc+0x78>)
 80094c8:	4818      	ldr	r0, [pc, #96]	; (800952c <_Balloc+0x7c>)
 80094ca:	2166      	movs	r1, #102	; 0x66
 80094cc:	f000 ffdc 	bl	800a488 <__assert_func>
 80094d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094d4:	6006      	str	r6, [r0, #0]
 80094d6:	60c6      	str	r6, [r0, #12]
 80094d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80094da:	68f3      	ldr	r3, [r6, #12]
 80094dc:	b183      	cbz	r3, 8009500 <_Balloc+0x50>
 80094de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094e0:	68db      	ldr	r3, [r3, #12]
 80094e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80094e6:	b9b8      	cbnz	r0, 8009518 <_Balloc+0x68>
 80094e8:	2101      	movs	r1, #1
 80094ea:	fa01 f605 	lsl.w	r6, r1, r5
 80094ee:	1d72      	adds	r2, r6, #5
 80094f0:	0092      	lsls	r2, r2, #2
 80094f2:	4620      	mov	r0, r4
 80094f4:	f7fc fb78 	bl	8005be8 <_calloc_r>
 80094f8:	b160      	cbz	r0, 8009514 <_Balloc+0x64>
 80094fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80094fe:	e00e      	b.n	800951e <_Balloc+0x6e>
 8009500:	2221      	movs	r2, #33	; 0x21
 8009502:	2104      	movs	r1, #4
 8009504:	4620      	mov	r0, r4
 8009506:	f7fc fb6f 	bl	8005be8 <_calloc_r>
 800950a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800950c:	60f0      	str	r0, [r6, #12]
 800950e:	68db      	ldr	r3, [r3, #12]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d1e4      	bne.n	80094de <_Balloc+0x2e>
 8009514:	2000      	movs	r0, #0
 8009516:	bd70      	pop	{r4, r5, r6, pc}
 8009518:	6802      	ldr	r2, [r0, #0]
 800951a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800951e:	2300      	movs	r3, #0
 8009520:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009524:	e7f7      	b.n	8009516 <_Balloc+0x66>
 8009526:	bf00      	nop
 8009528:	0800b54e 	.word	0x0800b54e
 800952c:	0800b6b8 	.word	0x0800b6b8

08009530 <_Bfree>:
 8009530:	b570      	push	{r4, r5, r6, lr}
 8009532:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009534:	4605      	mov	r5, r0
 8009536:	460c      	mov	r4, r1
 8009538:	b976      	cbnz	r6, 8009558 <_Bfree+0x28>
 800953a:	2010      	movs	r0, #16
 800953c:	f7fc fb2e 	bl	8005b9c <malloc>
 8009540:	4602      	mov	r2, r0
 8009542:	6268      	str	r0, [r5, #36]	; 0x24
 8009544:	b920      	cbnz	r0, 8009550 <_Bfree+0x20>
 8009546:	4b09      	ldr	r3, [pc, #36]	; (800956c <_Bfree+0x3c>)
 8009548:	4809      	ldr	r0, [pc, #36]	; (8009570 <_Bfree+0x40>)
 800954a:	218a      	movs	r1, #138	; 0x8a
 800954c:	f000 ff9c 	bl	800a488 <__assert_func>
 8009550:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009554:	6006      	str	r6, [r0, #0]
 8009556:	60c6      	str	r6, [r0, #12]
 8009558:	b13c      	cbz	r4, 800956a <_Bfree+0x3a>
 800955a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800955c:	6862      	ldr	r2, [r4, #4]
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009564:	6021      	str	r1, [r4, #0]
 8009566:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800956a:	bd70      	pop	{r4, r5, r6, pc}
 800956c:	0800b54e 	.word	0x0800b54e
 8009570:	0800b6b8 	.word	0x0800b6b8

08009574 <__multadd>:
 8009574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009578:	690e      	ldr	r6, [r1, #16]
 800957a:	4607      	mov	r7, r0
 800957c:	4698      	mov	r8, r3
 800957e:	460c      	mov	r4, r1
 8009580:	f101 0014 	add.w	r0, r1, #20
 8009584:	2300      	movs	r3, #0
 8009586:	6805      	ldr	r5, [r0, #0]
 8009588:	b2a9      	uxth	r1, r5
 800958a:	fb02 8101 	mla	r1, r2, r1, r8
 800958e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009592:	0c2d      	lsrs	r5, r5, #16
 8009594:	fb02 c505 	mla	r5, r2, r5, ip
 8009598:	b289      	uxth	r1, r1
 800959a:	3301      	adds	r3, #1
 800959c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80095a0:	429e      	cmp	r6, r3
 80095a2:	f840 1b04 	str.w	r1, [r0], #4
 80095a6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80095aa:	dcec      	bgt.n	8009586 <__multadd+0x12>
 80095ac:	f1b8 0f00 	cmp.w	r8, #0
 80095b0:	d022      	beq.n	80095f8 <__multadd+0x84>
 80095b2:	68a3      	ldr	r3, [r4, #8]
 80095b4:	42b3      	cmp	r3, r6
 80095b6:	dc19      	bgt.n	80095ec <__multadd+0x78>
 80095b8:	6861      	ldr	r1, [r4, #4]
 80095ba:	4638      	mov	r0, r7
 80095bc:	3101      	adds	r1, #1
 80095be:	f7ff ff77 	bl	80094b0 <_Balloc>
 80095c2:	4605      	mov	r5, r0
 80095c4:	b928      	cbnz	r0, 80095d2 <__multadd+0x5e>
 80095c6:	4602      	mov	r2, r0
 80095c8:	4b0d      	ldr	r3, [pc, #52]	; (8009600 <__multadd+0x8c>)
 80095ca:	480e      	ldr	r0, [pc, #56]	; (8009604 <__multadd+0x90>)
 80095cc:	21b5      	movs	r1, #181	; 0xb5
 80095ce:	f000 ff5b 	bl	800a488 <__assert_func>
 80095d2:	6922      	ldr	r2, [r4, #16]
 80095d4:	3202      	adds	r2, #2
 80095d6:	f104 010c 	add.w	r1, r4, #12
 80095da:	0092      	lsls	r2, r2, #2
 80095dc:	300c      	adds	r0, #12
 80095de:	f7fc faed 	bl	8005bbc <memcpy>
 80095e2:	4621      	mov	r1, r4
 80095e4:	4638      	mov	r0, r7
 80095e6:	f7ff ffa3 	bl	8009530 <_Bfree>
 80095ea:	462c      	mov	r4, r5
 80095ec:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80095f0:	3601      	adds	r6, #1
 80095f2:	f8c3 8014 	str.w	r8, [r3, #20]
 80095f6:	6126      	str	r6, [r4, #16]
 80095f8:	4620      	mov	r0, r4
 80095fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095fe:	bf00      	nop
 8009600:	0800b5c4 	.word	0x0800b5c4
 8009604:	0800b6b8 	.word	0x0800b6b8

08009608 <__s2b>:
 8009608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800960c:	460c      	mov	r4, r1
 800960e:	4615      	mov	r5, r2
 8009610:	461f      	mov	r7, r3
 8009612:	2209      	movs	r2, #9
 8009614:	3308      	adds	r3, #8
 8009616:	4606      	mov	r6, r0
 8009618:	fb93 f3f2 	sdiv	r3, r3, r2
 800961c:	2100      	movs	r1, #0
 800961e:	2201      	movs	r2, #1
 8009620:	429a      	cmp	r2, r3
 8009622:	db09      	blt.n	8009638 <__s2b+0x30>
 8009624:	4630      	mov	r0, r6
 8009626:	f7ff ff43 	bl	80094b0 <_Balloc>
 800962a:	b940      	cbnz	r0, 800963e <__s2b+0x36>
 800962c:	4602      	mov	r2, r0
 800962e:	4b19      	ldr	r3, [pc, #100]	; (8009694 <__s2b+0x8c>)
 8009630:	4819      	ldr	r0, [pc, #100]	; (8009698 <__s2b+0x90>)
 8009632:	21ce      	movs	r1, #206	; 0xce
 8009634:	f000 ff28 	bl	800a488 <__assert_func>
 8009638:	0052      	lsls	r2, r2, #1
 800963a:	3101      	adds	r1, #1
 800963c:	e7f0      	b.n	8009620 <__s2b+0x18>
 800963e:	9b08      	ldr	r3, [sp, #32]
 8009640:	6143      	str	r3, [r0, #20]
 8009642:	2d09      	cmp	r5, #9
 8009644:	f04f 0301 	mov.w	r3, #1
 8009648:	6103      	str	r3, [r0, #16]
 800964a:	dd16      	ble.n	800967a <__s2b+0x72>
 800964c:	f104 0909 	add.w	r9, r4, #9
 8009650:	46c8      	mov	r8, r9
 8009652:	442c      	add	r4, r5
 8009654:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009658:	4601      	mov	r1, r0
 800965a:	3b30      	subs	r3, #48	; 0x30
 800965c:	220a      	movs	r2, #10
 800965e:	4630      	mov	r0, r6
 8009660:	f7ff ff88 	bl	8009574 <__multadd>
 8009664:	45a0      	cmp	r8, r4
 8009666:	d1f5      	bne.n	8009654 <__s2b+0x4c>
 8009668:	f1a5 0408 	sub.w	r4, r5, #8
 800966c:	444c      	add	r4, r9
 800966e:	1b2d      	subs	r5, r5, r4
 8009670:	1963      	adds	r3, r4, r5
 8009672:	42bb      	cmp	r3, r7
 8009674:	db04      	blt.n	8009680 <__s2b+0x78>
 8009676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800967a:	340a      	adds	r4, #10
 800967c:	2509      	movs	r5, #9
 800967e:	e7f6      	b.n	800966e <__s2b+0x66>
 8009680:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009684:	4601      	mov	r1, r0
 8009686:	3b30      	subs	r3, #48	; 0x30
 8009688:	220a      	movs	r2, #10
 800968a:	4630      	mov	r0, r6
 800968c:	f7ff ff72 	bl	8009574 <__multadd>
 8009690:	e7ee      	b.n	8009670 <__s2b+0x68>
 8009692:	bf00      	nop
 8009694:	0800b5c4 	.word	0x0800b5c4
 8009698:	0800b6b8 	.word	0x0800b6b8

0800969c <__hi0bits>:
 800969c:	0c03      	lsrs	r3, r0, #16
 800969e:	041b      	lsls	r3, r3, #16
 80096a0:	b9d3      	cbnz	r3, 80096d8 <__hi0bits+0x3c>
 80096a2:	0400      	lsls	r0, r0, #16
 80096a4:	2310      	movs	r3, #16
 80096a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80096aa:	bf04      	itt	eq
 80096ac:	0200      	lsleq	r0, r0, #8
 80096ae:	3308      	addeq	r3, #8
 80096b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80096b4:	bf04      	itt	eq
 80096b6:	0100      	lsleq	r0, r0, #4
 80096b8:	3304      	addeq	r3, #4
 80096ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80096be:	bf04      	itt	eq
 80096c0:	0080      	lsleq	r0, r0, #2
 80096c2:	3302      	addeq	r3, #2
 80096c4:	2800      	cmp	r0, #0
 80096c6:	db05      	blt.n	80096d4 <__hi0bits+0x38>
 80096c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80096cc:	f103 0301 	add.w	r3, r3, #1
 80096d0:	bf08      	it	eq
 80096d2:	2320      	moveq	r3, #32
 80096d4:	4618      	mov	r0, r3
 80096d6:	4770      	bx	lr
 80096d8:	2300      	movs	r3, #0
 80096da:	e7e4      	b.n	80096a6 <__hi0bits+0xa>

080096dc <__lo0bits>:
 80096dc:	6803      	ldr	r3, [r0, #0]
 80096de:	f013 0207 	ands.w	r2, r3, #7
 80096e2:	4601      	mov	r1, r0
 80096e4:	d00b      	beq.n	80096fe <__lo0bits+0x22>
 80096e6:	07da      	lsls	r2, r3, #31
 80096e8:	d424      	bmi.n	8009734 <__lo0bits+0x58>
 80096ea:	0798      	lsls	r0, r3, #30
 80096ec:	bf49      	itett	mi
 80096ee:	085b      	lsrmi	r3, r3, #1
 80096f0:	089b      	lsrpl	r3, r3, #2
 80096f2:	2001      	movmi	r0, #1
 80096f4:	600b      	strmi	r3, [r1, #0]
 80096f6:	bf5c      	itt	pl
 80096f8:	600b      	strpl	r3, [r1, #0]
 80096fa:	2002      	movpl	r0, #2
 80096fc:	4770      	bx	lr
 80096fe:	b298      	uxth	r0, r3
 8009700:	b9b0      	cbnz	r0, 8009730 <__lo0bits+0x54>
 8009702:	0c1b      	lsrs	r3, r3, #16
 8009704:	2010      	movs	r0, #16
 8009706:	f013 0fff 	tst.w	r3, #255	; 0xff
 800970a:	bf04      	itt	eq
 800970c:	0a1b      	lsreq	r3, r3, #8
 800970e:	3008      	addeq	r0, #8
 8009710:	071a      	lsls	r2, r3, #28
 8009712:	bf04      	itt	eq
 8009714:	091b      	lsreq	r3, r3, #4
 8009716:	3004      	addeq	r0, #4
 8009718:	079a      	lsls	r2, r3, #30
 800971a:	bf04      	itt	eq
 800971c:	089b      	lsreq	r3, r3, #2
 800971e:	3002      	addeq	r0, #2
 8009720:	07da      	lsls	r2, r3, #31
 8009722:	d403      	bmi.n	800972c <__lo0bits+0x50>
 8009724:	085b      	lsrs	r3, r3, #1
 8009726:	f100 0001 	add.w	r0, r0, #1
 800972a:	d005      	beq.n	8009738 <__lo0bits+0x5c>
 800972c:	600b      	str	r3, [r1, #0]
 800972e:	4770      	bx	lr
 8009730:	4610      	mov	r0, r2
 8009732:	e7e8      	b.n	8009706 <__lo0bits+0x2a>
 8009734:	2000      	movs	r0, #0
 8009736:	4770      	bx	lr
 8009738:	2020      	movs	r0, #32
 800973a:	4770      	bx	lr

0800973c <__i2b>:
 800973c:	b510      	push	{r4, lr}
 800973e:	460c      	mov	r4, r1
 8009740:	2101      	movs	r1, #1
 8009742:	f7ff feb5 	bl	80094b0 <_Balloc>
 8009746:	4602      	mov	r2, r0
 8009748:	b928      	cbnz	r0, 8009756 <__i2b+0x1a>
 800974a:	4b05      	ldr	r3, [pc, #20]	; (8009760 <__i2b+0x24>)
 800974c:	4805      	ldr	r0, [pc, #20]	; (8009764 <__i2b+0x28>)
 800974e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009752:	f000 fe99 	bl	800a488 <__assert_func>
 8009756:	2301      	movs	r3, #1
 8009758:	6144      	str	r4, [r0, #20]
 800975a:	6103      	str	r3, [r0, #16]
 800975c:	bd10      	pop	{r4, pc}
 800975e:	bf00      	nop
 8009760:	0800b5c4 	.word	0x0800b5c4
 8009764:	0800b6b8 	.word	0x0800b6b8

08009768 <__multiply>:
 8009768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800976c:	4614      	mov	r4, r2
 800976e:	690a      	ldr	r2, [r1, #16]
 8009770:	6923      	ldr	r3, [r4, #16]
 8009772:	429a      	cmp	r2, r3
 8009774:	bfb8      	it	lt
 8009776:	460b      	movlt	r3, r1
 8009778:	460d      	mov	r5, r1
 800977a:	bfbc      	itt	lt
 800977c:	4625      	movlt	r5, r4
 800977e:	461c      	movlt	r4, r3
 8009780:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009784:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009788:	68ab      	ldr	r3, [r5, #8]
 800978a:	6869      	ldr	r1, [r5, #4]
 800978c:	eb0a 0709 	add.w	r7, sl, r9
 8009790:	42bb      	cmp	r3, r7
 8009792:	b085      	sub	sp, #20
 8009794:	bfb8      	it	lt
 8009796:	3101      	addlt	r1, #1
 8009798:	f7ff fe8a 	bl	80094b0 <_Balloc>
 800979c:	b930      	cbnz	r0, 80097ac <__multiply+0x44>
 800979e:	4602      	mov	r2, r0
 80097a0:	4b42      	ldr	r3, [pc, #264]	; (80098ac <__multiply+0x144>)
 80097a2:	4843      	ldr	r0, [pc, #268]	; (80098b0 <__multiply+0x148>)
 80097a4:	f240 115d 	movw	r1, #349	; 0x15d
 80097a8:	f000 fe6e 	bl	800a488 <__assert_func>
 80097ac:	f100 0614 	add.w	r6, r0, #20
 80097b0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80097b4:	4633      	mov	r3, r6
 80097b6:	2200      	movs	r2, #0
 80097b8:	4543      	cmp	r3, r8
 80097ba:	d31e      	bcc.n	80097fa <__multiply+0x92>
 80097bc:	f105 0c14 	add.w	ip, r5, #20
 80097c0:	f104 0314 	add.w	r3, r4, #20
 80097c4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80097c8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80097cc:	9202      	str	r2, [sp, #8]
 80097ce:	ebac 0205 	sub.w	r2, ip, r5
 80097d2:	3a15      	subs	r2, #21
 80097d4:	f022 0203 	bic.w	r2, r2, #3
 80097d8:	3204      	adds	r2, #4
 80097da:	f105 0115 	add.w	r1, r5, #21
 80097de:	458c      	cmp	ip, r1
 80097e0:	bf38      	it	cc
 80097e2:	2204      	movcc	r2, #4
 80097e4:	9201      	str	r2, [sp, #4]
 80097e6:	9a02      	ldr	r2, [sp, #8]
 80097e8:	9303      	str	r3, [sp, #12]
 80097ea:	429a      	cmp	r2, r3
 80097ec:	d808      	bhi.n	8009800 <__multiply+0x98>
 80097ee:	2f00      	cmp	r7, #0
 80097f0:	dc55      	bgt.n	800989e <__multiply+0x136>
 80097f2:	6107      	str	r7, [r0, #16]
 80097f4:	b005      	add	sp, #20
 80097f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097fa:	f843 2b04 	str.w	r2, [r3], #4
 80097fe:	e7db      	b.n	80097b8 <__multiply+0x50>
 8009800:	f8b3 a000 	ldrh.w	sl, [r3]
 8009804:	f1ba 0f00 	cmp.w	sl, #0
 8009808:	d020      	beq.n	800984c <__multiply+0xe4>
 800980a:	f105 0e14 	add.w	lr, r5, #20
 800980e:	46b1      	mov	r9, r6
 8009810:	2200      	movs	r2, #0
 8009812:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009816:	f8d9 b000 	ldr.w	fp, [r9]
 800981a:	b2a1      	uxth	r1, r4
 800981c:	fa1f fb8b 	uxth.w	fp, fp
 8009820:	fb0a b101 	mla	r1, sl, r1, fp
 8009824:	4411      	add	r1, r2
 8009826:	f8d9 2000 	ldr.w	r2, [r9]
 800982a:	0c24      	lsrs	r4, r4, #16
 800982c:	0c12      	lsrs	r2, r2, #16
 800982e:	fb0a 2404 	mla	r4, sl, r4, r2
 8009832:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009836:	b289      	uxth	r1, r1
 8009838:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800983c:	45f4      	cmp	ip, lr
 800983e:	f849 1b04 	str.w	r1, [r9], #4
 8009842:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009846:	d8e4      	bhi.n	8009812 <__multiply+0xaa>
 8009848:	9901      	ldr	r1, [sp, #4]
 800984a:	5072      	str	r2, [r6, r1]
 800984c:	9a03      	ldr	r2, [sp, #12]
 800984e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009852:	3304      	adds	r3, #4
 8009854:	f1b9 0f00 	cmp.w	r9, #0
 8009858:	d01f      	beq.n	800989a <__multiply+0x132>
 800985a:	6834      	ldr	r4, [r6, #0]
 800985c:	f105 0114 	add.w	r1, r5, #20
 8009860:	46b6      	mov	lr, r6
 8009862:	f04f 0a00 	mov.w	sl, #0
 8009866:	880a      	ldrh	r2, [r1, #0]
 8009868:	f8be b002 	ldrh.w	fp, [lr, #2]
 800986c:	fb09 b202 	mla	r2, r9, r2, fp
 8009870:	4492      	add	sl, r2
 8009872:	b2a4      	uxth	r4, r4
 8009874:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009878:	f84e 4b04 	str.w	r4, [lr], #4
 800987c:	f851 4b04 	ldr.w	r4, [r1], #4
 8009880:	f8be 2000 	ldrh.w	r2, [lr]
 8009884:	0c24      	lsrs	r4, r4, #16
 8009886:	fb09 2404 	mla	r4, r9, r4, r2
 800988a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800988e:	458c      	cmp	ip, r1
 8009890:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009894:	d8e7      	bhi.n	8009866 <__multiply+0xfe>
 8009896:	9a01      	ldr	r2, [sp, #4]
 8009898:	50b4      	str	r4, [r6, r2]
 800989a:	3604      	adds	r6, #4
 800989c:	e7a3      	b.n	80097e6 <__multiply+0x7e>
 800989e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d1a5      	bne.n	80097f2 <__multiply+0x8a>
 80098a6:	3f01      	subs	r7, #1
 80098a8:	e7a1      	b.n	80097ee <__multiply+0x86>
 80098aa:	bf00      	nop
 80098ac:	0800b5c4 	.word	0x0800b5c4
 80098b0:	0800b6b8 	.word	0x0800b6b8

080098b4 <__pow5mult>:
 80098b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098b8:	4615      	mov	r5, r2
 80098ba:	f012 0203 	ands.w	r2, r2, #3
 80098be:	4606      	mov	r6, r0
 80098c0:	460f      	mov	r7, r1
 80098c2:	d007      	beq.n	80098d4 <__pow5mult+0x20>
 80098c4:	4c25      	ldr	r4, [pc, #148]	; (800995c <__pow5mult+0xa8>)
 80098c6:	3a01      	subs	r2, #1
 80098c8:	2300      	movs	r3, #0
 80098ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80098ce:	f7ff fe51 	bl	8009574 <__multadd>
 80098d2:	4607      	mov	r7, r0
 80098d4:	10ad      	asrs	r5, r5, #2
 80098d6:	d03d      	beq.n	8009954 <__pow5mult+0xa0>
 80098d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80098da:	b97c      	cbnz	r4, 80098fc <__pow5mult+0x48>
 80098dc:	2010      	movs	r0, #16
 80098de:	f7fc f95d 	bl	8005b9c <malloc>
 80098e2:	4602      	mov	r2, r0
 80098e4:	6270      	str	r0, [r6, #36]	; 0x24
 80098e6:	b928      	cbnz	r0, 80098f4 <__pow5mult+0x40>
 80098e8:	4b1d      	ldr	r3, [pc, #116]	; (8009960 <__pow5mult+0xac>)
 80098ea:	481e      	ldr	r0, [pc, #120]	; (8009964 <__pow5mult+0xb0>)
 80098ec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80098f0:	f000 fdca 	bl	800a488 <__assert_func>
 80098f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80098f8:	6004      	str	r4, [r0, #0]
 80098fa:	60c4      	str	r4, [r0, #12]
 80098fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009900:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009904:	b94c      	cbnz	r4, 800991a <__pow5mult+0x66>
 8009906:	f240 2171 	movw	r1, #625	; 0x271
 800990a:	4630      	mov	r0, r6
 800990c:	f7ff ff16 	bl	800973c <__i2b>
 8009910:	2300      	movs	r3, #0
 8009912:	f8c8 0008 	str.w	r0, [r8, #8]
 8009916:	4604      	mov	r4, r0
 8009918:	6003      	str	r3, [r0, #0]
 800991a:	f04f 0900 	mov.w	r9, #0
 800991e:	07eb      	lsls	r3, r5, #31
 8009920:	d50a      	bpl.n	8009938 <__pow5mult+0x84>
 8009922:	4639      	mov	r1, r7
 8009924:	4622      	mov	r2, r4
 8009926:	4630      	mov	r0, r6
 8009928:	f7ff ff1e 	bl	8009768 <__multiply>
 800992c:	4639      	mov	r1, r7
 800992e:	4680      	mov	r8, r0
 8009930:	4630      	mov	r0, r6
 8009932:	f7ff fdfd 	bl	8009530 <_Bfree>
 8009936:	4647      	mov	r7, r8
 8009938:	106d      	asrs	r5, r5, #1
 800993a:	d00b      	beq.n	8009954 <__pow5mult+0xa0>
 800993c:	6820      	ldr	r0, [r4, #0]
 800993e:	b938      	cbnz	r0, 8009950 <__pow5mult+0x9c>
 8009940:	4622      	mov	r2, r4
 8009942:	4621      	mov	r1, r4
 8009944:	4630      	mov	r0, r6
 8009946:	f7ff ff0f 	bl	8009768 <__multiply>
 800994a:	6020      	str	r0, [r4, #0]
 800994c:	f8c0 9000 	str.w	r9, [r0]
 8009950:	4604      	mov	r4, r0
 8009952:	e7e4      	b.n	800991e <__pow5mult+0x6a>
 8009954:	4638      	mov	r0, r7
 8009956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800995a:	bf00      	nop
 800995c:	0800b808 	.word	0x0800b808
 8009960:	0800b54e 	.word	0x0800b54e
 8009964:	0800b6b8 	.word	0x0800b6b8

08009968 <__lshift>:
 8009968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800996c:	460c      	mov	r4, r1
 800996e:	6849      	ldr	r1, [r1, #4]
 8009970:	6923      	ldr	r3, [r4, #16]
 8009972:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009976:	68a3      	ldr	r3, [r4, #8]
 8009978:	4607      	mov	r7, r0
 800997a:	4691      	mov	r9, r2
 800997c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009980:	f108 0601 	add.w	r6, r8, #1
 8009984:	42b3      	cmp	r3, r6
 8009986:	db0b      	blt.n	80099a0 <__lshift+0x38>
 8009988:	4638      	mov	r0, r7
 800998a:	f7ff fd91 	bl	80094b0 <_Balloc>
 800998e:	4605      	mov	r5, r0
 8009990:	b948      	cbnz	r0, 80099a6 <__lshift+0x3e>
 8009992:	4602      	mov	r2, r0
 8009994:	4b28      	ldr	r3, [pc, #160]	; (8009a38 <__lshift+0xd0>)
 8009996:	4829      	ldr	r0, [pc, #164]	; (8009a3c <__lshift+0xd4>)
 8009998:	f240 11d9 	movw	r1, #473	; 0x1d9
 800999c:	f000 fd74 	bl	800a488 <__assert_func>
 80099a0:	3101      	adds	r1, #1
 80099a2:	005b      	lsls	r3, r3, #1
 80099a4:	e7ee      	b.n	8009984 <__lshift+0x1c>
 80099a6:	2300      	movs	r3, #0
 80099a8:	f100 0114 	add.w	r1, r0, #20
 80099ac:	f100 0210 	add.w	r2, r0, #16
 80099b0:	4618      	mov	r0, r3
 80099b2:	4553      	cmp	r3, sl
 80099b4:	db33      	blt.n	8009a1e <__lshift+0xb6>
 80099b6:	6920      	ldr	r0, [r4, #16]
 80099b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80099bc:	f104 0314 	add.w	r3, r4, #20
 80099c0:	f019 091f 	ands.w	r9, r9, #31
 80099c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80099c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80099cc:	d02b      	beq.n	8009a26 <__lshift+0xbe>
 80099ce:	f1c9 0e20 	rsb	lr, r9, #32
 80099d2:	468a      	mov	sl, r1
 80099d4:	2200      	movs	r2, #0
 80099d6:	6818      	ldr	r0, [r3, #0]
 80099d8:	fa00 f009 	lsl.w	r0, r0, r9
 80099dc:	4302      	orrs	r2, r0
 80099de:	f84a 2b04 	str.w	r2, [sl], #4
 80099e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80099e6:	459c      	cmp	ip, r3
 80099e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80099ec:	d8f3      	bhi.n	80099d6 <__lshift+0x6e>
 80099ee:	ebac 0304 	sub.w	r3, ip, r4
 80099f2:	3b15      	subs	r3, #21
 80099f4:	f023 0303 	bic.w	r3, r3, #3
 80099f8:	3304      	adds	r3, #4
 80099fa:	f104 0015 	add.w	r0, r4, #21
 80099fe:	4584      	cmp	ip, r0
 8009a00:	bf38      	it	cc
 8009a02:	2304      	movcc	r3, #4
 8009a04:	50ca      	str	r2, [r1, r3]
 8009a06:	b10a      	cbz	r2, 8009a0c <__lshift+0xa4>
 8009a08:	f108 0602 	add.w	r6, r8, #2
 8009a0c:	3e01      	subs	r6, #1
 8009a0e:	4638      	mov	r0, r7
 8009a10:	612e      	str	r6, [r5, #16]
 8009a12:	4621      	mov	r1, r4
 8009a14:	f7ff fd8c 	bl	8009530 <_Bfree>
 8009a18:	4628      	mov	r0, r5
 8009a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a1e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009a22:	3301      	adds	r3, #1
 8009a24:	e7c5      	b.n	80099b2 <__lshift+0x4a>
 8009a26:	3904      	subs	r1, #4
 8009a28:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a2c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009a30:	459c      	cmp	ip, r3
 8009a32:	d8f9      	bhi.n	8009a28 <__lshift+0xc0>
 8009a34:	e7ea      	b.n	8009a0c <__lshift+0xa4>
 8009a36:	bf00      	nop
 8009a38:	0800b5c4 	.word	0x0800b5c4
 8009a3c:	0800b6b8 	.word	0x0800b6b8

08009a40 <__mcmp>:
 8009a40:	b530      	push	{r4, r5, lr}
 8009a42:	6902      	ldr	r2, [r0, #16]
 8009a44:	690c      	ldr	r4, [r1, #16]
 8009a46:	1b12      	subs	r2, r2, r4
 8009a48:	d10e      	bne.n	8009a68 <__mcmp+0x28>
 8009a4a:	f100 0314 	add.w	r3, r0, #20
 8009a4e:	3114      	adds	r1, #20
 8009a50:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009a54:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009a58:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009a5c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009a60:	42a5      	cmp	r5, r4
 8009a62:	d003      	beq.n	8009a6c <__mcmp+0x2c>
 8009a64:	d305      	bcc.n	8009a72 <__mcmp+0x32>
 8009a66:	2201      	movs	r2, #1
 8009a68:	4610      	mov	r0, r2
 8009a6a:	bd30      	pop	{r4, r5, pc}
 8009a6c:	4283      	cmp	r3, r0
 8009a6e:	d3f3      	bcc.n	8009a58 <__mcmp+0x18>
 8009a70:	e7fa      	b.n	8009a68 <__mcmp+0x28>
 8009a72:	f04f 32ff 	mov.w	r2, #4294967295
 8009a76:	e7f7      	b.n	8009a68 <__mcmp+0x28>

08009a78 <__mdiff>:
 8009a78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a7c:	460c      	mov	r4, r1
 8009a7e:	4606      	mov	r6, r0
 8009a80:	4611      	mov	r1, r2
 8009a82:	4620      	mov	r0, r4
 8009a84:	4617      	mov	r7, r2
 8009a86:	f7ff ffdb 	bl	8009a40 <__mcmp>
 8009a8a:	1e05      	subs	r5, r0, #0
 8009a8c:	d110      	bne.n	8009ab0 <__mdiff+0x38>
 8009a8e:	4629      	mov	r1, r5
 8009a90:	4630      	mov	r0, r6
 8009a92:	f7ff fd0d 	bl	80094b0 <_Balloc>
 8009a96:	b930      	cbnz	r0, 8009aa6 <__mdiff+0x2e>
 8009a98:	4b39      	ldr	r3, [pc, #228]	; (8009b80 <__mdiff+0x108>)
 8009a9a:	4602      	mov	r2, r0
 8009a9c:	f240 2132 	movw	r1, #562	; 0x232
 8009aa0:	4838      	ldr	r0, [pc, #224]	; (8009b84 <__mdiff+0x10c>)
 8009aa2:	f000 fcf1 	bl	800a488 <__assert_func>
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009aac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ab0:	bfa4      	itt	ge
 8009ab2:	463b      	movge	r3, r7
 8009ab4:	4627      	movge	r7, r4
 8009ab6:	4630      	mov	r0, r6
 8009ab8:	6879      	ldr	r1, [r7, #4]
 8009aba:	bfa6      	itte	ge
 8009abc:	461c      	movge	r4, r3
 8009abe:	2500      	movge	r5, #0
 8009ac0:	2501      	movlt	r5, #1
 8009ac2:	f7ff fcf5 	bl	80094b0 <_Balloc>
 8009ac6:	b920      	cbnz	r0, 8009ad2 <__mdiff+0x5a>
 8009ac8:	4b2d      	ldr	r3, [pc, #180]	; (8009b80 <__mdiff+0x108>)
 8009aca:	4602      	mov	r2, r0
 8009acc:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009ad0:	e7e6      	b.n	8009aa0 <__mdiff+0x28>
 8009ad2:	693e      	ldr	r6, [r7, #16]
 8009ad4:	60c5      	str	r5, [r0, #12]
 8009ad6:	6925      	ldr	r5, [r4, #16]
 8009ad8:	f107 0114 	add.w	r1, r7, #20
 8009adc:	f104 0914 	add.w	r9, r4, #20
 8009ae0:	f100 0e14 	add.w	lr, r0, #20
 8009ae4:	f107 0210 	add.w	r2, r7, #16
 8009ae8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009aec:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009af0:	46f2      	mov	sl, lr
 8009af2:	2700      	movs	r7, #0
 8009af4:	f859 3b04 	ldr.w	r3, [r9], #4
 8009af8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009afc:	fa1f f883 	uxth.w	r8, r3
 8009b00:	fa17 f78b 	uxtah	r7, r7, fp
 8009b04:	0c1b      	lsrs	r3, r3, #16
 8009b06:	eba7 0808 	sub.w	r8, r7, r8
 8009b0a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009b0e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009b12:	fa1f f888 	uxth.w	r8, r8
 8009b16:	141f      	asrs	r7, r3, #16
 8009b18:	454d      	cmp	r5, r9
 8009b1a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009b1e:	f84a 3b04 	str.w	r3, [sl], #4
 8009b22:	d8e7      	bhi.n	8009af4 <__mdiff+0x7c>
 8009b24:	1b2b      	subs	r3, r5, r4
 8009b26:	3b15      	subs	r3, #21
 8009b28:	f023 0303 	bic.w	r3, r3, #3
 8009b2c:	3304      	adds	r3, #4
 8009b2e:	3415      	adds	r4, #21
 8009b30:	42a5      	cmp	r5, r4
 8009b32:	bf38      	it	cc
 8009b34:	2304      	movcc	r3, #4
 8009b36:	4419      	add	r1, r3
 8009b38:	4473      	add	r3, lr
 8009b3a:	469e      	mov	lr, r3
 8009b3c:	460d      	mov	r5, r1
 8009b3e:	4565      	cmp	r5, ip
 8009b40:	d30e      	bcc.n	8009b60 <__mdiff+0xe8>
 8009b42:	f10c 0203 	add.w	r2, ip, #3
 8009b46:	1a52      	subs	r2, r2, r1
 8009b48:	f022 0203 	bic.w	r2, r2, #3
 8009b4c:	3903      	subs	r1, #3
 8009b4e:	458c      	cmp	ip, r1
 8009b50:	bf38      	it	cc
 8009b52:	2200      	movcc	r2, #0
 8009b54:	441a      	add	r2, r3
 8009b56:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009b5a:	b17b      	cbz	r3, 8009b7c <__mdiff+0x104>
 8009b5c:	6106      	str	r6, [r0, #16]
 8009b5e:	e7a5      	b.n	8009aac <__mdiff+0x34>
 8009b60:	f855 8b04 	ldr.w	r8, [r5], #4
 8009b64:	fa17 f488 	uxtah	r4, r7, r8
 8009b68:	1422      	asrs	r2, r4, #16
 8009b6a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009b6e:	b2a4      	uxth	r4, r4
 8009b70:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009b74:	f84e 4b04 	str.w	r4, [lr], #4
 8009b78:	1417      	asrs	r7, r2, #16
 8009b7a:	e7e0      	b.n	8009b3e <__mdiff+0xc6>
 8009b7c:	3e01      	subs	r6, #1
 8009b7e:	e7ea      	b.n	8009b56 <__mdiff+0xde>
 8009b80:	0800b5c4 	.word	0x0800b5c4
 8009b84:	0800b6b8 	.word	0x0800b6b8

08009b88 <__ulp>:
 8009b88:	b082      	sub	sp, #8
 8009b8a:	ed8d 0b00 	vstr	d0, [sp]
 8009b8e:	9b01      	ldr	r3, [sp, #4]
 8009b90:	4912      	ldr	r1, [pc, #72]	; (8009bdc <__ulp+0x54>)
 8009b92:	4019      	ands	r1, r3
 8009b94:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009b98:	2900      	cmp	r1, #0
 8009b9a:	dd05      	ble.n	8009ba8 <__ulp+0x20>
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	460b      	mov	r3, r1
 8009ba0:	ec43 2b10 	vmov	d0, r2, r3
 8009ba4:	b002      	add	sp, #8
 8009ba6:	4770      	bx	lr
 8009ba8:	4249      	negs	r1, r1
 8009baa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009bae:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009bb2:	f04f 0200 	mov.w	r2, #0
 8009bb6:	f04f 0300 	mov.w	r3, #0
 8009bba:	da04      	bge.n	8009bc6 <__ulp+0x3e>
 8009bbc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009bc0:	fa41 f300 	asr.w	r3, r1, r0
 8009bc4:	e7ec      	b.n	8009ba0 <__ulp+0x18>
 8009bc6:	f1a0 0114 	sub.w	r1, r0, #20
 8009bca:	291e      	cmp	r1, #30
 8009bcc:	bfda      	itte	le
 8009bce:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009bd2:	fa20 f101 	lsrle.w	r1, r0, r1
 8009bd6:	2101      	movgt	r1, #1
 8009bd8:	460a      	mov	r2, r1
 8009bda:	e7e1      	b.n	8009ba0 <__ulp+0x18>
 8009bdc:	7ff00000 	.word	0x7ff00000

08009be0 <__b2d>:
 8009be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009be2:	6905      	ldr	r5, [r0, #16]
 8009be4:	f100 0714 	add.w	r7, r0, #20
 8009be8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009bec:	1f2e      	subs	r6, r5, #4
 8009bee:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	f7ff fd52 	bl	800969c <__hi0bits>
 8009bf8:	f1c0 0320 	rsb	r3, r0, #32
 8009bfc:	280a      	cmp	r0, #10
 8009bfe:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009c7c <__b2d+0x9c>
 8009c02:	600b      	str	r3, [r1, #0]
 8009c04:	dc14      	bgt.n	8009c30 <__b2d+0x50>
 8009c06:	f1c0 0e0b 	rsb	lr, r0, #11
 8009c0a:	fa24 f10e 	lsr.w	r1, r4, lr
 8009c0e:	42b7      	cmp	r7, r6
 8009c10:	ea41 030c 	orr.w	r3, r1, ip
 8009c14:	bf34      	ite	cc
 8009c16:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009c1a:	2100      	movcs	r1, #0
 8009c1c:	3015      	adds	r0, #21
 8009c1e:	fa04 f000 	lsl.w	r0, r4, r0
 8009c22:	fa21 f10e 	lsr.w	r1, r1, lr
 8009c26:	ea40 0201 	orr.w	r2, r0, r1
 8009c2a:	ec43 2b10 	vmov	d0, r2, r3
 8009c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c30:	42b7      	cmp	r7, r6
 8009c32:	bf3a      	itte	cc
 8009c34:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009c38:	f1a5 0608 	subcc.w	r6, r5, #8
 8009c3c:	2100      	movcs	r1, #0
 8009c3e:	380b      	subs	r0, #11
 8009c40:	d017      	beq.n	8009c72 <__b2d+0x92>
 8009c42:	f1c0 0c20 	rsb	ip, r0, #32
 8009c46:	fa04 f500 	lsl.w	r5, r4, r0
 8009c4a:	42be      	cmp	r6, r7
 8009c4c:	fa21 f40c 	lsr.w	r4, r1, ip
 8009c50:	ea45 0504 	orr.w	r5, r5, r4
 8009c54:	bf8c      	ite	hi
 8009c56:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009c5a:	2400      	movls	r4, #0
 8009c5c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009c60:	fa01 f000 	lsl.w	r0, r1, r0
 8009c64:	fa24 f40c 	lsr.w	r4, r4, ip
 8009c68:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009c6c:	ea40 0204 	orr.w	r2, r0, r4
 8009c70:	e7db      	b.n	8009c2a <__b2d+0x4a>
 8009c72:	ea44 030c 	orr.w	r3, r4, ip
 8009c76:	460a      	mov	r2, r1
 8009c78:	e7d7      	b.n	8009c2a <__b2d+0x4a>
 8009c7a:	bf00      	nop
 8009c7c:	3ff00000 	.word	0x3ff00000

08009c80 <__d2b>:
 8009c80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009c84:	4689      	mov	r9, r1
 8009c86:	2101      	movs	r1, #1
 8009c88:	ec57 6b10 	vmov	r6, r7, d0
 8009c8c:	4690      	mov	r8, r2
 8009c8e:	f7ff fc0f 	bl	80094b0 <_Balloc>
 8009c92:	4604      	mov	r4, r0
 8009c94:	b930      	cbnz	r0, 8009ca4 <__d2b+0x24>
 8009c96:	4602      	mov	r2, r0
 8009c98:	4b25      	ldr	r3, [pc, #148]	; (8009d30 <__d2b+0xb0>)
 8009c9a:	4826      	ldr	r0, [pc, #152]	; (8009d34 <__d2b+0xb4>)
 8009c9c:	f240 310a 	movw	r1, #778	; 0x30a
 8009ca0:	f000 fbf2 	bl	800a488 <__assert_func>
 8009ca4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009ca8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009cac:	bb35      	cbnz	r5, 8009cfc <__d2b+0x7c>
 8009cae:	2e00      	cmp	r6, #0
 8009cb0:	9301      	str	r3, [sp, #4]
 8009cb2:	d028      	beq.n	8009d06 <__d2b+0x86>
 8009cb4:	4668      	mov	r0, sp
 8009cb6:	9600      	str	r6, [sp, #0]
 8009cb8:	f7ff fd10 	bl	80096dc <__lo0bits>
 8009cbc:	9900      	ldr	r1, [sp, #0]
 8009cbe:	b300      	cbz	r0, 8009d02 <__d2b+0x82>
 8009cc0:	9a01      	ldr	r2, [sp, #4]
 8009cc2:	f1c0 0320 	rsb	r3, r0, #32
 8009cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8009cca:	430b      	orrs	r3, r1
 8009ccc:	40c2      	lsrs	r2, r0
 8009cce:	6163      	str	r3, [r4, #20]
 8009cd0:	9201      	str	r2, [sp, #4]
 8009cd2:	9b01      	ldr	r3, [sp, #4]
 8009cd4:	61a3      	str	r3, [r4, #24]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	bf14      	ite	ne
 8009cda:	2202      	movne	r2, #2
 8009cdc:	2201      	moveq	r2, #1
 8009cde:	6122      	str	r2, [r4, #16]
 8009ce0:	b1d5      	cbz	r5, 8009d18 <__d2b+0x98>
 8009ce2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009ce6:	4405      	add	r5, r0
 8009ce8:	f8c9 5000 	str.w	r5, [r9]
 8009cec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009cf0:	f8c8 0000 	str.w	r0, [r8]
 8009cf4:	4620      	mov	r0, r4
 8009cf6:	b003      	add	sp, #12
 8009cf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009cfc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d00:	e7d5      	b.n	8009cae <__d2b+0x2e>
 8009d02:	6161      	str	r1, [r4, #20]
 8009d04:	e7e5      	b.n	8009cd2 <__d2b+0x52>
 8009d06:	a801      	add	r0, sp, #4
 8009d08:	f7ff fce8 	bl	80096dc <__lo0bits>
 8009d0c:	9b01      	ldr	r3, [sp, #4]
 8009d0e:	6163      	str	r3, [r4, #20]
 8009d10:	2201      	movs	r2, #1
 8009d12:	6122      	str	r2, [r4, #16]
 8009d14:	3020      	adds	r0, #32
 8009d16:	e7e3      	b.n	8009ce0 <__d2b+0x60>
 8009d18:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009d1c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009d20:	f8c9 0000 	str.w	r0, [r9]
 8009d24:	6918      	ldr	r0, [r3, #16]
 8009d26:	f7ff fcb9 	bl	800969c <__hi0bits>
 8009d2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009d2e:	e7df      	b.n	8009cf0 <__d2b+0x70>
 8009d30:	0800b5c4 	.word	0x0800b5c4
 8009d34:	0800b6b8 	.word	0x0800b6b8

08009d38 <__ratio>:
 8009d38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d3c:	4688      	mov	r8, r1
 8009d3e:	4669      	mov	r1, sp
 8009d40:	4681      	mov	r9, r0
 8009d42:	f7ff ff4d 	bl	8009be0 <__b2d>
 8009d46:	a901      	add	r1, sp, #4
 8009d48:	4640      	mov	r0, r8
 8009d4a:	ec55 4b10 	vmov	r4, r5, d0
 8009d4e:	f7ff ff47 	bl	8009be0 <__b2d>
 8009d52:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009d56:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009d5a:	eba3 0c02 	sub.w	ip, r3, r2
 8009d5e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009d62:	1a9b      	subs	r3, r3, r2
 8009d64:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009d68:	ec51 0b10 	vmov	r0, r1, d0
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	bfd6      	itet	le
 8009d70:	460a      	movle	r2, r1
 8009d72:	462a      	movgt	r2, r5
 8009d74:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009d78:	468b      	mov	fp, r1
 8009d7a:	462f      	mov	r7, r5
 8009d7c:	bfd4      	ite	le
 8009d7e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009d82:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009d86:	4620      	mov	r0, r4
 8009d88:	ee10 2a10 	vmov	r2, s0
 8009d8c:	465b      	mov	r3, fp
 8009d8e:	4639      	mov	r1, r7
 8009d90:	f7f6 fd5c 	bl	800084c <__aeabi_ddiv>
 8009d94:	ec41 0b10 	vmov	d0, r0, r1
 8009d98:	b003      	add	sp, #12
 8009d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009d9e <__copybits>:
 8009d9e:	3901      	subs	r1, #1
 8009da0:	b570      	push	{r4, r5, r6, lr}
 8009da2:	1149      	asrs	r1, r1, #5
 8009da4:	6914      	ldr	r4, [r2, #16]
 8009da6:	3101      	adds	r1, #1
 8009da8:	f102 0314 	add.w	r3, r2, #20
 8009dac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009db0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009db4:	1f05      	subs	r5, r0, #4
 8009db6:	42a3      	cmp	r3, r4
 8009db8:	d30c      	bcc.n	8009dd4 <__copybits+0x36>
 8009dba:	1aa3      	subs	r3, r4, r2
 8009dbc:	3b11      	subs	r3, #17
 8009dbe:	f023 0303 	bic.w	r3, r3, #3
 8009dc2:	3211      	adds	r2, #17
 8009dc4:	42a2      	cmp	r2, r4
 8009dc6:	bf88      	it	hi
 8009dc8:	2300      	movhi	r3, #0
 8009dca:	4418      	add	r0, r3
 8009dcc:	2300      	movs	r3, #0
 8009dce:	4288      	cmp	r0, r1
 8009dd0:	d305      	bcc.n	8009dde <__copybits+0x40>
 8009dd2:	bd70      	pop	{r4, r5, r6, pc}
 8009dd4:	f853 6b04 	ldr.w	r6, [r3], #4
 8009dd8:	f845 6f04 	str.w	r6, [r5, #4]!
 8009ddc:	e7eb      	b.n	8009db6 <__copybits+0x18>
 8009dde:	f840 3b04 	str.w	r3, [r0], #4
 8009de2:	e7f4      	b.n	8009dce <__copybits+0x30>

08009de4 <__any_on>:
 8009de4:	f100 0214 	add.w	r2, r0, #20
 8009de8:	6900      	ldr	r0, [r0, #16]
 8009dea:	114b      	asrs	r3, r1, #5
 8009dec:	4298      	cmp	r0, r3
 8009dee:	b510      	push	{r4, lr}
 8009df0:	db11      	blt.n	8009e16 <__any_on+0x32>
 8009df2:	dd0a      	ble.n	8009e0a <__any_on+0x26>
 8009df4:	f011 011f 	ands.w	r1, r1, #31
 8009df8:	d007      	beq.n	8009e0a <__any_on+0x26>
 8009dfa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009dfe:	fa24 f001 	lsr.w	r0, r4, r1
 8009e02:	fa00 f101 	lsl.w	r1, r0, r1
 8009e06:	428c      	cmp	r4, r1
 8009e08:	d10b      	bne.n	8009e22 <__any_on+0x3e>
 8009e0a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d803      	bhi.n	8009e1a <__any_on+0x36>
 8009e12:	2000      	movs	r0, #0
 8009e14:	bd10      	pop	{r4, pc}
 8009e16:	4603      	mov	r3, r0
 8009e18:	e7f7      	b.n	8009e0a <__any_on+0x26>
 8009e1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009e1e:	2900      	cmp	r1, #0
 8009e20:	d0f5      	beq.n	8009e0e <__any_on+0x2a>
 8009e22:	2001      	movs	r0, #1
 8009e24:	e7f6      	b.n	8009e14 <__any_on+0x30>

08009e26 <__ssputs_r>:
 8009e26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e2a:	688e      	ldr	r6, [r1, #8]
 8009e2c:	429e      	cmp	r6, r3
 8009e2e:	4682      	mov	sl, r0
 8009e30:	460c      	mov	r4, r1
 8009e32:	4690      	mov	r8, r2
 8009e34:	461f      	mov	r7, r3
 8009e36:	d838      	bhi.n	8009eaa <__ssputs_r+0x84>
 8009e38:	898a      	ldrh	r2, [r1, #12]
 8009e3a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009e3e:	d032      	beq.n	8009ea6 <__ssputs_r+0x80>
 8009e40:	6825      	ldr	r5, [r4, #0]
 8009e42:	6909      	ldr	r1, [r1, #16]
 8009e44:	eba5 0901 	sub.w	r9, r5, r1
 8009e48:	6965      	ldr	r5, [r4, #20]
 8009e4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e52:	3301      	adds	r3, #1
 8009e54:	444b      	add	r3, r9
 8009e56:	106d      	asrs	r5, r5, #1
 8009e58:	429d      	cmp	r5, r3
 8009e5a:	bf38      	it	cc
 8009e5c:	461d      	movcc	r5, r3
 8009e5e:	0553      	lsls	r3, r2, #21
 8009e60:	d531      	bpl.n	8009ec6 <__ssputs_r+0xa0>
 8009e62:	4629      	mov	r1, r5
 8009e64:	f7fb ff20 	bl	8005ca8 <_malloc_r>
 8009e68:	4606      	mov	r6, r0
 8009e6a:	b950      	cbnz	r0, 8009e82 <__ssputs_r+0x5c>
 8009e6c:	230c      	movs	r3, #12
 8009e6e:	f8ca 3000 	str.w	r3, [sl]
 8009e72:	89a3      	ldrh	r3, [r4, #12]
 8009e74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e78:	81a3      	strh	r3, [r4, #12]
 8009e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e82:	6921      	ldr	r1, [r4, #16]
 8009e84:	464a      	mov	r2, r9
 8009e86:	f7fb fe99 	bl	8005bbc <memcpy>
 8009e8a:	89a3      	ldrh	r3, [r4, #12]
 8009e8c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e94:	81a3      	strh	r3, [r4, #12]
 8009e96:	6126      	str	r6, [r4, #16]
 8009e98:	6165      	str	r5, [r4, #20]
 8009e9a:	444e      	add	r6, r9
 8009e9c:	eba5 0509 	sub.w	r5, r5, r9
 8009ea0:	6026      	str	r6, [r4, #0]
 8009ea2:	60a5      	str	r5, [r4, #8]
 8009ea4:	463e      	mov	r6, r7
 8009ea6:	42be      	cmp	r6, r7
 8009ea8:	d900      	bls.n	8009eac <__ssputs_r+0x86>
 8009eaa:	463e      	mov	r6, r7
 8009eac:	4632      	mov	r2, r6
 8009eae:	6820      	ldr	r0, [r4, #0]
 8009eb0:	4641      	mov	r1, r8
 8009eb2:	f000 fb5d 	bl	800a570 <memmove>
 8009eb6:	68a3      	ldr	r3, [r4, #8]
 8009eb8:	6822      	ldr	r2, [r4, #0]
 8009eba:	1b9b      	subs	r3, r3, r6
 8009ebc:	4432      	add	r2, r6
 8009ebe:	60a3      	str	r3, [r4, #8]
 8009ec0:	6022      	str	r2, [r4, #0]
 8009ec2:	2000      	movs	r0, #0
 8009ec4:	e7db      	b.n	8009e7e <__ssputs_r+0x58>
 8009ec6:	462a      	mov	r2, r5
 8009ec8:	f000 fb6c 	bl	800a5a4 <_realloc_r>
 8009ecc:	4606      	mov	r6, r0
 8009ece:	2800      	cmp	r0, #0
 8009ed0:	d1e1      	bne.n	8009e96 <__ssputs_r+0x70>
 8009ed2:	6921      	ldr	r1, [r4, #16]
 8009ed4:	4650      	mov	r0, sl
 8009ed6:	f7fb fe97 	bl	8005c08 <_free_r>
 8009eda:	e7c7      	b.n	8009e6c <__ssputs_r+0x46>

08009edc <_svfiprintf_r>:
 8009edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee0:	4698      	mov	r8, r3
 8009ee2:	898b      	ldrh	r3, [r1, #12]
 8009ee4:	061b      	lsls	r3, r3, #24
 8009ee6:	b09d      	sub	sp, #116	; 0x74
 8009ee8:	4607      	mov	r7, r0
 8009eea:	460d      	mov	r5, r1
 8009eec:	4614      	mov	r4, r2
 8009eee:	d50e      	bpl.n	8009f0e <_svfiprintf_r+0x32>
 8009ef0:	690b      	ldr	r3, [r1, #16]
 8009ef2:	b963      	cbnz	r3, 8009f0e <_svfiprintf_r+0x32>
 8009ef4:	2140      	movs	r1, #64	; 0x40
 8009ef6:	f7fb fed7 	bl	8005ca8 <_malloc_r>
 8009efa:	6028      	str	r0, [r5, #0]
 8009efc:	6128      	str	r0, [r5, #16]
 8009efe:	b920      	cbnz	r0, 8009f0a <_svfiprintf_r+0x2e>
 8009f00:	230c      	movs	r3, #12
 8009f02:	603b      	str	r3, [r7, #0]
 8009f04:	f04f 30ff 	mov.w	r0, #4294967295
 8009f08:	e0d1      	b.n	800a0ae <_svfiprintf_r+0x1d2>
 8009f0a:	2340      	movs	r3, #64	; 0x40
 8009f0c:	616b      	str	r3, [r5, #20]
 8009f0e:	2300      	movs	r3, #0
 8009f10:	9309      	str	r3, [sp, #36]	; 0x24
 8009f12:	2320      	movs	r3, #32
 8009f14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f18:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f1c:	2330      	movs	r3, #48	; 0x30
 8009f1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a0c8 <_svfiprintf_r+0x1ec>
 8009f22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f26:	f04f 0901 	mov.w	r9, #1
 8009f2a:	4623      	mov	r3, r4
 8009f2c:	469a      	mov	sl, r3
 8009f2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f32:	b10a      	cbz	r2, 8009f38 <_svfiprintf_r+0x5c>
 8009f34:	2a25      	cmp	r2, #37	; 0x25
 8009f36:	d1f9      	bne.n	8009f2c <_svfiprintf_r+0x50>
 8009f38:	ebba 0b04 	subs.w	fp, sl, r4
 8009f3c:	d00b      	beq.n	8009f56 <_svfiprintf_r+0x7a>
 8009f3e:	465b      	mov	r3, fp
 8009f40:	4622      	mov	r2, r4
 8009f42:	4629      	mov	r1, r5
 8009f44:	4638      	mov	r0, r7
 8009f46:	f7ff ff6e 	bl	8009e26 <__ssputs_r>
 8009f4a:	3001      	adds	r0, #1
 8009f4c:	f000 80aa 	beq.w	800a0a4 <_svfiprintf_r+0x1c8>
 8009f50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f52:	445a      	add	r2, fp
 8009f54:	9209      	str	r2, [sp, #36]	; 0x24
 8009f56:	f89a 3000 	ldrb.w	r3, [sl]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	f000 80a2 	beq.w	800a0a4 <_svfiprintf_r+0x1c8>
 8009f60:	2300      	movs	r3, #0
 8009f62:	f04f 32ff 	mov.w	r2, #4294967295
 8009f66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f6a:	f10a 0a01 	add.w	sl, sl, #1
 8009f6e:	9304      	str	r3, [sp, #16]
 8009f70:	9307      	str	r3, [sp, #28]
 8009f72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f76:	931a      	str	r3, [sp, #104]	; 0x68
 8009f78:	4654      	mov	r4, sl
 8009f7a:	2205      	movs	r2, #5
 8009f7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f80:	4851      	ldr	r0, [pc, #324]	; (800a0c8 <_svfiprintf_r+0x1ec>)
 8009f82:	f7f6 f92d 	bl	80001e0 <memchr>
 8009f86:	9a04      	ldr	r2, [sp, #16]
 8009f88:	b9d8      	cbnz	r0, 8009fc2 <_svfiprintf_r+0xe6>
 8009f8a:	06d0      	lsls	r0, r2, #27
 8009f8c:	bf44      	itt	mi
 8009f8e:	2320      	movmi	r3, #32
 8009f90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f94:	0711      	lsls	r1, r2, #28
 8009f96:	bf44      	itt	mi
 8009f98:	232b      	movmi	r3, #43	; 0x2b
 8009f9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f9e:	f89a 3000 	ldrb.w	r3, [sl]
 8009fa2:	2b2a      	cmp	r3, #42	; 0x2a
 8009fa4:	d015      	beq.n	8009fd2 <_svfiprintf_r+0xf6>
 8009fa6:	9a07      	ldr	r2, [sp, #28]
 8009fa8:	4654      	mov	r4, sl
 8009faa:	2000      	movs	r0, #0
 8009fac:	f04f 0c0a 	mov.w	ip, #10
 8009fb0:	4621      	mov	r1, r4
 8009fb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fb6:	3b30      	subs	r3, #48	; 0x30
 8009fb8:	2b09      	cmp	r3, #9
 8009fba:	d94e      	bls.n	800a05a <_svfiprintf_r+0x17e>
 8009fbc:	b1b0      	cbz	r0, 8009fec <_svfiprintf_r+0x110>
 8009fbe:	9207      	str	r2, [sp, #28]
 8009fc0:	e014      	b.n	8009fec <_svfiprintf_r+0x110>
 8009fc2:	eba0 0308 	sub.w	r3, r0, r8
 8009fc6:	fa09 f303 	lsl.w	r3, r9, r3
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	9304      	str	r3, [sp, #16]
 8009fce:	46a2      	mov	sl, r4
 8009fd0:	e7d2      	b.n	8009f78 <_svfiprintf_r+0x9c>
 8009fd2:	9b03      	ldr	r3, [sp, #12]
 8009fd4:	1d19      	adds	r1, r3, #4
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	9103      	str	r1, [sp, #12]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	bfbb      	ittet	lt
 8009fde:	425b      	neglt	r3, r3
 8009fe0:	f042 0202 	orrlt.w	r2, r2, #2
 8009fe4:	9307      	strge	r3, [sp, #28]
 8009fe6:	9307      	strlt	r3, [sp, #28]
 8009fe8:	bfb8      	it	lt
 8009fea:	9204      	strlt	r2, [sp, #16]
 8009fec:	7823      	ldrb	r3, [r4, #0]
 8009fee:	2b2e      	cmp	r3, #46	; 0x2e
 8009ff0:	d10c      	bne.n	800a00c <_svfiprintf_r+0x130>
 8009ff2:	7863      	ldrb	r3, [r4, #1]
 8009ff4:	2b2a      	cmp	r3, #42	; 0x2a
 8009ff6:	d135      	bne.n	800a064 <_svfiprintf_r+0x188>
 8009ff8:	9b03      	ldr	r3, [sp, #12]
 8009ffa:	1d1a      	adds	r2, r3, #4
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	9203      	str	r2, [sp, #12]
 800a000:	2b00      	cmp	r3, #0
 800a002:	bfb8      	it	lt
 800a004:	f04f 33ff 	movlt.w	r3, #4294967295
 800a008:	3402      	adds	r4, #2
 800a00a:	9305      	str	r3, [sp, #20]
 800a00c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a0d8 <_svfiprintf_r+0x1fc>
 800a010:	7821      	ldrb	r1, [r4, #0]
 800a012:	2203      	movs	r2, #3
 800a014:	4650      	mov	r0, sl
 800a016:	f7f6 f8e3 	bl	80001e0 <memchr>
 800a01a:	b140      	cbz	r0, 800a02e <_svfiprintf_r+0x152>
 800a01c:	2340      	movs	r3, #64	; 0x40
 800a01e:	eba0 000a 	sub.w	r0, r0, sl
 800a022:	fa03 f000 	lsl.w	r0, r3, r0
 800a026:	9b04      	ldr	r3, [sp, #16]
 800a028:	4303      	orrs	r3, r0
 800a02a:	3401      	adds	r4, #1
 800a02c:	9304      	str	r3, [sp, #16]
 800a02e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a032:	4826      	ldr	r0, [pc, #152]	; (800a0cc <_svfiprintf_r+0x1f0>)
 800a034:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a038:	2206      	movs	r2, #6
 800a03a:	f7f6 f8d1 	bl	80001e0 <memchr>
 800a03e:	2800      	cmp	r0, #0
 800a040:	d038      	beq.n	800a0b4 <_svfiprintf_r+0x1d8>
 800a042:	4b23      	ldr	r3, [pc, #140]	; (800a0d0 <_svfiprintf_r+0x1f4>)
 800a044:	bb1b      	cbnz	r3, 800a08e <_svfiprintf_r+0x1b2>
 800a046:	9b03      	ldr	r3, [sp, #12]
 800a048:	3307      	adds	r3, #7
 800a04a:	f023 0307 	bic.w	r3, r3, #7
 800a04e:	3308      	adds	r3, #8
 800a050:	9303      	str	r3, [sp, #12]
 800a052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a054:	4433      	add	r3, r6
 800a056:	9309      	str	r3, [sp, #36]	; 0x24
 800a058:	e767      	b.n	8009f2a <_svfiprintf_r+0x4e>
 800a05a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a05e:	460c      	mov	r4, r1
 800a060:	2001      	movs	r0, #1
 800a062:	e7a5      	b.n	8009fb0 <_svfiprintf_r+0xd4>
 800a064:	2300      	movs	r3, #0
 800a066:	3401      	adds	r4, #1
 800a068:	9305      	str	r3, [sp, #20]
 800a06a:	4619      	mov	r1, r3
 800a06c:	f04f 0c0a 	mov.w	ip, #10
 800a070:	4620      	mov	r0, r4
 800a072:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a076:	3a30      	subs	r2, #48	; 0x30
 800a078:	2a09      	cmp	r2, #9
 800a07a:	d903      	bls.n	800a084 <_svfiprintf_r+0x1a8>
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d0c5      	beq.n	800a00c <_svfiprintf_r+0x130>
 800a080:	9105      	str	r1, [sp, #20]
 800a082:	e7c3      	b.n	800a00c <_svfiprintf_r+0x130>
 800a084:	fb0c 2101 	mla	r1, ip, r1, r2
 800a088:	4604      	mov	r4, r0
 800a08a:	2301      	movs	r3, #1
 800a08c:	e7f0      	b.n	800a070 <_svfiprintf_r+0x194>
 800a08e:	ab03      	add	r3, sp, #12
 800a090:	9300      	str	r3, [sp, #0]
 800a092:	462a      	mov	r2, r5
 800a094:	4b0f      	ldr	r3, [pc, #60]	; (800a0d4 <_svfiprintf_r+0x1f8>)
 800a096:	a904      	add	r1, sp, #16
 800a098:	4638      	mov	r0, r7
 800a09a:	f7fb feff 	bl	8005e9c <_printf_float>
 800a09e:	1c42      	adds	r2, r0, #1
 800a0a0:	4606      	mov	r6, r0
 800a0a2:	d1d6      	bne.n	800a052 <_svfiprintf_r+0x176>
 800a0a4:	89ab      	ldrh	r3, [r5, #12]
 800a0a6:	065b      	lsls	r3, r3, #25
 800a0a8:	f53f af2c 	bmi.w	8009f04 <_svfiprintf_r+0x28>
 800a0ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0ae:	b01d      	add	sp, #116	; 0x74
 800a0b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0b4:	ab03      	add	r3, sp, #12
 800a0b6:	9300      	str	r3, [sp, #0]
 800a0b8:	462a      	mov	r2, r5
 800a0ba:	4b06      	ldr	r3, [pc, #24]	; (800a0d4 <_svfiprintf_r+0x1f8>)
 800a0bc:	a904      	add	r1, sp, #16
 800a0be:	4638      	mov	r0, r7
 800a0c0:	f7fc f990 	bl	80063e4 <_printf_i>
 800a0c4:	e7eb      	b.n	800a09e <_svfiprintf_r+0x1c2>
 800a0c6:	bf00      	nop
 800a0c8:	0800b814 	.word	0x0800b814
 800a0cc:	0800b81e 	.word	0x0800b81e
 800a0d0:	08005e9d 	.word	0x08005e9d
 800a0d4:	08009e27 	.word	0x08009e27
 800a0d8:	0800b81a 	.word	0x0800b81a

0800a0dc <__sfputc_r>:
 800a0dc:	6893      	ldr	r3, [r2, #8]
 800a0de:	3b01      	subs	r3, #1
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	b410      	push	{r4}
 800a0e4:	6093      	str	r3, [r2, #8]
 800a0e6:	da08      	bge.n	800a0fa <__sfputc_r+0x1e>
 800a0e8:	6994      	ldr	r4, [r2, #24]
 800a0ea:	42a3      	cmp	r3, r4
 800a0ec:	db01      	blt.n	800a0f2 <__sfputc_r+0x16>
 800a0ee:	290a      	cmp	r1, #10
 800a0f0:	d103      	bne.n	800a0fa <__sfputc_r+0x1e>
 800a0f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0f6:	f7fd bcf1 	b.w	8007adc <__swbuf_r>
 800a0fa:	6813      	ldr	r3, [r2, #0]
 800a0fc:	1c58      	adds	r0, r3, #1
 800a0fe:	6010      	str	r0, [r2, #0]
 800a100:	7019      	strb	r1, [r3, #0]
 800a102:	4608      	mov	r0, r1
 800a104:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a108:	4770      	bx	lr

0800a10a <__sfputs_r>:
 800a10a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a10c:	4606      	mov	r6, r0
 800a10e:	460f      	mov	r7, r1
 800a110:	4614      	mov	r4, r2
 800a112:	18d5      	adds	r5, r2, r3
 800a114:	42ac      	cmp	r4, r5
 800a116:	d101      	bne.n	800a11c <__sfputs_r+0x12>
 800a118:	2000      	movs	r0, #0
 800a11a:	e007      	b.n	800a12c <__sfputs_r+0x22>
 800a11c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a120:	463a      	mov	r2, r7
 800a122:	4630      	mov	r0, r6
 800a124:	f7ff ffda 	bl	800a0dc <__sfputc_r>
 800a128:	1c43      	adds	r3, r0, #1
 800a12a:	d1f3      	bne.n	800a114 <__sfputs_r+0xa>
 800a12c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a130 <_vfiprintf_r>:
 800a130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a134:	460d      	mov	r5, r1
 800a136:	b09d      	sub	sp, #116	; 0x74
 800a138:	4614      	mov	r4, r2
 800a13a:	4698      	mov	r8, r3
 800a13c:	4606      	mov	r6, r0
 800a13e:	b118      	cbz	r0, 800a148 <_vfiprintf_r+0x18>
 800a140:	6983      	ldr	r3, [r0, #24]
 800a142:	b90b      	cbnz	r3, 800a148 <_vfiprintf_r+0x18>
 800a144:	f7fe fd1e 	bl	8008b84 <__sinit>
 800a148:	4b89      	ldr	r3, [pc, #548]	; (800a370 <_vfiprintf_r+0x240>)
 800a14a:	429d      	cmp	r5, r3
 800a14c:	d11b      	bne.n	800a186 <_vfiprintf_r+0x56>
 800a14e:	6875      	ldr	r5, [r6, #4]
 800a150:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a152:	07d9      	lsls	r1, r3, #31
 800a154:	d405      	bmi.n	800a162 <_vfiprintf_r+0x32>
 800a156:	89ab      	ldrh	r3, [r5, #12]
 800a158:	059a      	lsls	r2, r3, #22
 800a15a:	d402      	bmi.n	800a162 <_vfiprintf_r+0x32>
 800a15c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a15e:	f7ff f922 	bl	80093a6 <__retarget_lock_acquire_recursive>
 800a162:	89ab      	ldrh	r3, [r5, #12]
 800a164:	071b      	lsls	r3, r3, #28
 800a166:	d501      	bpl.n	800a16c <_vfiprintf_r+0x3c>
 800a168:	692b      	ldr	r3, [r5, #16]
 800a16a:	b9eb      	cbnz	r3, 800a1a8 <_vfiprintf_r+0x78>
 800a16c:	4629      	mov	r1, r5
 800a16e:	4630      	mov	r0, r6
 800a170:	f7fd fd06 	bl	8007b80 <__swsetup_r>
 800a174:	b1c0      	cbz	r0, 800a1a8 <_vfiprintf_r+0x78>
 800a176:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a178:	07dc      	lsls	r4, r3, #31
 800a17a:	d50e      	bpl.n	800a19a <_vfiprintf_r+0x6a>
 800a17c:	f04f 30ff 	mov.w	r0, #4294967295
 800a180:	b01d      	add	sp, #116	; 0x74
 800a182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a186:	4b7b      	ldr	r3, [pc, #492]	; (800a374 <_vfiprintf_r+0x244>)
 800a188:	429d      	cmp	r5, r3
 800a18a:	d101      	bne.n	800a190 <_vfiprintf_r+0x60>
 800a18c:	68b5      	ldr	r5, [r6, #8]
 800a18e:	e7df      	b.n	800a150 <_vfiprintf_r+0x20>
 800a190:	4b79      	ldr	r3, [pc, #484]	; (800a378 <_vfiprintf_r+0x248>)
 800a192:	429d      	cmp	r5, r3
 800a194:	bf08      	it	eq
 800a196:	68f5      	ldreq	r5, [r6, #12]
 800a198:	e7da      	b.n	800a150 <_vfiprintf_r+0x20>
 800a19a:	89ab      	ldrh	r3, [r5, #12]
 800a19c:	0598      	lsls	r0, r3, #22
 800a19e:	d4ed      	bmi.n	800a17c <_vfiprintf_r+0x4c>
 800a1a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1a2:	f7ff f901 	bl	80093a8 <__retarget_lock_release_recursive>
 800a1a6:	e7e9      	b.n	800a17c <_vfiprintf_r+0x4c>
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	9309      	str	r3, [sp, #36]	; 0x24
 800a1ac:	2320      	movs	r3, #32
 800a1ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1b6:	2330      	movs	r3, #48	; 0x30
 800a1b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a37c <_vfiprintf_r+0x24c>
 800a1bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1c0:	f04f 0901 	mov.w	r9, #1
 800a1c4:	4623      	mov	r3, r4
 800a1c6:	469a      	mov	sl, r3
 800a1c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1cc:	b10a      	cbz	r2, 800a1d2 <_vfiprintf_r+0xa2>
 800a1ce:	2a25      	cmp	r2, #37	; 0x25
 800a1d0:	d1f9      	bne.n	800a1c6 <_vfiprintf_r+0x96>
 800a1d2:	ebba 0b04 	subs.w	fp, sl, r4
 800a1d6:	d00b      	beq.n	800a1f0 <_vfiprintf_r+0xc0>
 800a1d8:	465b      	mov	r3, fp
 800a1da:	4622      	mov	r2, r4
 800a1dc:	4629      	mov	r1, r5
 800a1de:	4630      	mov	r0, r6
 800a1e0:	f7ff ff93 	bl	800a10a <__sfputs_r>
 800a1e4:	3001      	adds	r0, #1
 800a1e6:	f000 80aa 	beq.w	800a33e <_vfiprintf_r+0x20e>
 800a1ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1ec:	445a      	add	r2, fp
 800a1ee:	9209      	str	r2, [sp, #36]	; 0x24
 800a1f0:	f89a 3000 	ldrb.w	r3, [sl]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	f000 80a2 	beq.w	800a33e <_vfiprintf_r+0x20e>
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	f04f 32ff 	mov.w	r2, #4294967295
 800a200:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a204:	f10a 0a01 	add.w	sl, sl, #1
 800a208:	9304      	str	r3, [sp, #16]
 800a20a:	9307      	str	r3, [sp, #28]
 800a20c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a210:	931a      	str	r3, [sp, #104]	; 0x68
 800a212:	4654      	mov	r4, sl
 800a214:	2205      	movs	r2, #5
 800a216:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a21a:	4858      	ldr	r0, [pc, #352]	; (800a37c <_vfiprintf_r+0x24c>)
 800a21c:	f7f5 ffe0 	bl	80001e0 <memchr>
 800a220:	9a04      	ldr	r2, [sp, #16]
 800a222:	b9d8      	cbnz	r0, 800a25c <_vfiprintf_r+0x12c>
 800a224:	06d1      	lsls	r1, r2, #27
 800a226:	bf44      	itt	mi
 800a228:	2320      	movmi	r3, #32
 800a22a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a22e:	0713      	lsls	r3, r2, #28
 800a230:	bf44      	itt	mi
 800a232:	232b      	movmi	r3, #43	; 0x2b
 800a234:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a238:	f89a 3000 	ldrb.w	r3, [sl]
 800a23c:	2b2a      	cmp	r3, #42	; 0x2a
 800a23e:	d015      	beq.n	800a26c <_vfiprintf_r+0x13c>
 800a240:	9a07      	ldr	r2, [sp, #28]
 800a242:	4654      	mov	r4, sl
 800a244:	2000      	movs	r0, #0
 800a246:	f04f 0c0a 	mov.w	ip, #10
 800a24a:	4621      	mov	r1, r4
 800a24c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a250:	3b30      	subs	r3, #48	; 0x30
 800a252:	2b09      	cmp	r3, #9
 800a254:	d94e      	bls.n	800a2f4 <_vfiprintf_r+0x1c4>
 800a256:	b1b0      	cbz	r0, 800a286 <_vfiprintf_r+0x156>
 800a258:	9207      	str	r2, [sp, #28]
 800a25a:	e014      	b.n	800a286 <_vfiprintf_r+0x156>
 800a25c:	eba0 0308 	sub.w	r3, r0, r8
 800a260:	fa09 f303 	lsl.w	r3, r9, r3
 800a264:	4313      	orrs	r3, r2
 800a266:	9304      	str	r3, [sp, #16]
 800a268:	46a2      	mov	sl, r4
 800a26a:	e7d2      	b.n	800a212 <_vfiprintf_r+0xe2>
 800a26c:	9b03      	ldr	r3, [sp, #12]
 800a26e:	1d19      	adds	r1, r3, #4
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	9103      	str	r1, [sp, #12]
 800a274:	2b00      	cmp	r3, #0
 800a276:	bfbb      	ittet	lt
 800a278:	425b      	neglt	r3, r3
 800a27a:	f042 0202 	orrlt.w	r2, r2, #2
 800a27e:	9307      	strge	r3, [sp, #28]
 800a280:	9307      	strlt	r3, [sp, #28]
 800a282:	bfb8      	it	lt
 800a284:	9204      	strlt	r2, [sp, #16]
 800a286:	7823      	ldrb	r3, [r4, #0]
 800a288:	2b2e      	cmp	r3, #46	; 0x2e
 800a28a:	d10c      	bne.n	800a2a6 <_vfiprintf_r+0x176>
 800a28c:	7863      	ldrb	r3, [r4, #1]
 800a28e:	2b2a      	cmp	r3, #42	; 0x2a
 800a290:	d135      	bne.n	800a2fe <_vfiprintf_r+0x1ce>
 800a292:	9b03      	ldr	r3, [sp, #12]
 800a294:	1d1a      	adds	r2, r3, #4
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	9203      	str	r2, [sp, #12]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	bfb8      	it	lt
 800a29e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a2a2:	3402      	adds	r4, #2
 800a2a4:	9305      	str	r3, [sp, #20]
 800a2a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a38c <_vfiprintf_r+0x25c>
 800a2aa:	7821      	ldrb	r1, [r4, #0]
 800a2ac:	2203      	movs	r2, #3
 800a2ae:	4650      	mov	r0, sl
 800a2b0:	f7f5 ff96 	bl	80001e0 <memchr>
 800a2b4:	b140      	cbz	r0, 800a2c8 <_vfiprintf_r+0x198>
 800a2b6:	2340      	movs	r3, #64	; 0x40
 800a2b8:	eba0 000a 	sub.w	r0, r0, sl
 800a2bc:	fa03 f000 	lsl.w	r0, r3, r0
 800a2c0:	9b04      	ldr	r3, [sp, #16]
 800a2c2:	4303      	orrs	r3, r0
 800a2c4:	3401      	adds	r4, #1
 800a2c6:	9304      	str	r3, [sp, #16]
 800a2c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2cc:	482c      	ldr	r0, [pc, #176]	; (800a380 <_vfiprintf_r+0x250>)
 800a2ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2d2:	2206      	movs	r2, #6
 800a2d4:	f7f5 ff84 	bl	80001e0 <memchr>
 800a2d8:	2800      	cmp	r0, #0
 800a2da:	d03f      	beq.n	800a35c <_vfiprintf_r+0x22c>
 800a2dc:	4b29      	ldr	r3, [pc, #164]	; (800a384 <_vfiprintf_r+0x254>)
 800a2de:	bb1b      	cbnz	r3, 800a328 <_vfiprintf_r+0x1f8>
 800a2e0:	9b03      	ldr	r3, [sp, #12]
 800a2e2:	3307      	adds	r3, #7
 800a2e4:	f023 0307 	bic.w	r3, r3, #7
 800a2e8:	3308      	adds	r3, #8
 800a2ea:	9303      	str	r3, [sp, #12]
 800a2ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2ee:	443b      	add	r3, r7
 800a2f0:	9309      	str	r3, [sp, #36]	; 0x24
 800a2f2:	e767      	b.n	800a1c4 <_vfiprintf_r+0x94>
 800a2f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2f8:	460c      	mov	r4, r1
 800a2fa:	2001      	movs	r0, #1
 800a2fc:	e7a5      	b.n	800a24a <_vfiprintf_r+0x11a>
 800a2fe:	2300      	movs	r3, #0
 800a300:	3401      	adds	r4, #1
 800a302:	9305      	str	r3, [sp, #20]
 800a304:	4619      	mov	r1, r3
 800a306:	f04f 0c0a 	mov.w	ip, #10
 800a30a:	4620      	mov	r0, r4
 800a30c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a310:	3a30      	subs	r2, #48	; 0x30
 800a312:	2a09      	cmp	r2, #9
 800a314:	d903      	bls.n	800a31e <_vfiprintf_r+0x1ee>
 800a316:	2b00      	cmp	r3, #0
 800a318:	d0c5      	beq.n	800a2a6 <_vfiprintf_r+0x176>
 800a31a:	9105      	str	r1, [sp, #20]
 800a31c:	e7c3      	b.n	800a2a6 <_vfiprintf_r+0x176>
 800a31e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a322:	4604      	mov	r4, r0
 800a324:	2301      	movs	r3, #1
 800a326:	e7f0      	b.n	800a30a <_vfiprintf_r+0x1da>
 800a328:	ab03      	add	r3, sp, #12
 800a32a:	9300      	str	r3, [sp, #0]
 800a32c:	462a      	mov	r2, r5
 800a32e:	4b16      	ldr	r3, [pc, #88]	; (800a388 <_vfiprintf_r+0x258>)
 800a330:	a904      	add	r1, sp, #16
 800a332:	4630      	mov	r0, r6
 800a334:	f7fb fdb2 	bl	8005e9c <_printf_float>
 800a338:	4607      	mov	r7, r0
 800a33a:	1c78      	adds	r0, r7, #1
 800a33c:	d1d6      	bne.n	800a2ec <_vfiprintf_r+0x1bc>
 800a33e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a340:	07d9      	lsls	r1, r3, #31
 800a342:	d405      	bmi.n	800a350 <_vfiprintf_r+0x220>
 800a344:	89ab      	ldrh	r3, [r5, #12]
 800a346:	059a      	lsls	r2, r3, #22
 800a348:	d402      	bmi.n	800a350 <_vfiprintf_r+0x220>
 800a34a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a34c:	f7ff f82c 	bl	80093a8 <__retarget_lock_release_recursive>
 800a350:	89ab      	ldrh	r3, [r5, #12]
 800a352:	065b      	lsls	r3, r3, #25
 800a354:	f53f af12 	bmi.w	800a17c <_vfiprintf_r+0x4c>
 800a358:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a35a:	e711      	b.n	800a180 <_vfiprintf_r+0x50>
 800a35c:	ab03      	add	r3, sp, #12
 800a35e:	9300      	str	r3, [sp, #0]
 800a360:	462a      	mov	r2, r5
 800a362:	4b09      	ldr	r3, [pc, #36]	; (800a388 <_vfiprintf_r+0x258>)
 800a364:	a904      	add	r1, sp, #16
 800a366:	4630      	mov	r0, r6
 800a368:	f7fc f83c 	bl	80063e4 <_printf_i>
 800a36c:	e7e4      	b.n	800a338 <_vfiprintf_r+0x208>
 800a36e:	bf00      	nop
 800a370:	0800b5f8 	.word	0x0800b5f8
 800a374:	0800b618 	.word	0x0800b618
 800a378:	0800b5d8 	.word	0x0800b5d8
 800a37c:	0800b814 	.word	0x0800b814
 800a380:	0800b81e 	.word	0x0800b81e
 800a384:	08005e9d 	.word	0x08005e9d
 800a388:	0800a10b 	.word	0x0800a10b
 800a38c:	0800b81a 	.word	0x0800b81a

0800a390 <nan>:
 800a390:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a398 <nan+0x8>
 800a394:	4770      	bx	lr
 800a396:	bf00      	nop
 800a398:	00000000 	.word	0x00000000
 800a39c:	7ff80000 	.word	0x7ff80000

0800a3a0 <__sread>:
 800a3a0:	b510      	push	{r4, lr}
 800a3a2:	460c      	mov	r4, r1
 800a3a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3a8:	f000 f922 	bl	800a5f0 <_read_r>
 800a3ac:	2800      	cmp	r0, #0
 800a3ae:	bfab      	itete	ge
 800a3b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a3b2:	89a3      	ldrhlt	r3, [r4, #12]
 800a3b4:	181b      	addge	r3, r3, r0
 800a3b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a3ba:	bfac      	ite	ge
 800a3bc:	6563      	strge	r3, [r4, #84]	; 0x54
 800a3be:	81a3      	strhlt	r3, [r4, #12]
 800a3c0:	bd10      	pop	{r4, pc}

0800a3c2 <__swrite>:
 800a3c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3c6:	461f      	mov	r7, r3
 800a3c8:	898b      	ldrh	r3, [r1, #12]
 800a3ca:	05db      	lsls	r3, r3, #23
 800a3cc:	4605      	mov	r5, r0
 800a3ce:	460c      	mov	r4, r1
 800a3d0:	4616      	mov	r6, r2
 800a3d2:	d505      	bpl.n	800a3e0 <__swrite+0x1e>
 800a3d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3d8:	2302      	movs	r3, #2
 800a3da:	2200      	movs	r2, #0
 800a3dc:	f000 f8b6 	bl	800a54c <_lseek_r>
 800a3e0:	89a3      	ldrh	r3, [r4, #12]
 800a3e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3ea:	81a3      	strh	r3, [r4, #12]
 800a3ec:	4632      	mov	r2, r6
 800a3ee:	463b      	mov	r3, r7
 800a3f0:	4628      	mov	r0, r5
 800a3f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3f6:	f000 b835 	b.w	800a464 <_write_r>

0800a3fa <__sseek>:
 800a3fa:	b510      	push	{r4, lr}
 800a3fc:	460c      	mov	r4, r1
 800a3fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a402:	f000 f8a3 	bl	800a54c <_lseek_r>
 800a406:	1c43      	adds	r3, r0, #1
 800a408:	89a3      	ldrh	r3, [r4, #12]
 800a40a:	bf15      	itete	ne
 800a40c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a40e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a412:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a416:	81a3      	strheq	r3, [r4, #12]
 800a418:	bf18      	it	ne
 800a41a:	81a3      	strhne	r3, [r4, #12]
 800a41c:	bd10      	pop	{r4, pc}

0800a41e <__sclose>:
 800a41e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a422:	f000 b84f 	b.w	800a4c4 <_close_r>

0800a426 <strncmp>:
 800a426:	b510      	push	{r4, lr}
 800a428:	b16a      	cbz	r2, 800a446 <strncmp+0x20>
 800a42a:	3901      	subs	r1, #1
 800a42c:	1884      	adds	r4, r0, r2
 800a42e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a432:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a436:	4293      	cmp	r3, r2
 800a438:	d103      	bne.n	800a442 <strncmp+0x1c>
 800a43a:	42a0      	cmp	r0, r4
 800a43c:	d001      	beq.n	800a442 <strncmp+0x1c>
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d1f5      	bne.n	800a42e <strncmp+0x8>
 800a442:	1a98      	subs	r0, r3, r2
 800a444:	bd10      	pop	{r4, pc}
 800a446:	4610      	mov	r0, r2
 800a448:	e7fc      	b.n	800a444 <strncmp+0x1e>

0800a44a <__ascii_wctomb>:
 800a44a:	b149      	cbz	r1, 800a460 <__ascii_wctomb+0x16>
 800a44c:	2aff      	cmp	r2, #255	; 0xff
 800a44e:	bf85      	ittet	hi
 800a450:	238a      	movhi	r3, #138	; 0x8a
 800a452:	6003      	strhi	r3, [r0, #0]
 800a454:	700a      	strbls	r2, [r1, #0]
 800a456:	f04f 30ff 	movhi.w	r0, #4294967295
 800a45a:	bf98      	it	ls
 800a45c:	2001      	movls	r0, #1
 800a45e:	4770      	bx	lr
 800a460:	4608      	mov	r0, r1
 800a462:	4770      	bx	lr

0800a464 <_write_r>:
 800a464:	b538      	push	{r3, r4, r5, lr}
 800a466:	4d07      	ldr	r5, [pc, #28]	; (800a484 <_write_r+0x20>)
 800a468:	4604      	mov	r4, r0
 800a46a:	4608      	mov	r0, r1
 800a46c:	4611      	mov	r1, r2
 800a46e:	2200      	movs	r2, #0
 800a470:	602a      	str	r2, [r5, #0]
 800a472:	461a      	mov	r2, r3
 800a474:	f7f6 fdba 	bl	8000fec <_write>
 800a478:	1c43      	adds	r3, r0, #1
 800a47a:	d102      	bne.n	800a482 <_write_r+0x1e>
 800a47c:	682b      	ldr	r3, [r5, #0]
 800a47e:	b103      	cbz	r3, 800a482 <_write_r+0x1e>
 800a480:	6023      	str	r3, [r4, #0]
 800a482:	bd38      	pop	{r3, r4, r5, pc}
 800a484:	20001dac 	.word	0x20001dac

0800a488 <__assert_func>:
 800a488:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a48a:	4614      	mov	r4, r2
 800a48c:	461a      	mov	r2, r3
 800a48e:	4b09      	ldr	r3, [pc, #36]	; (800a4b4 <__assert_func+0x2c>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	4605      	mov	r5, r0
 800a494:	68d8      	ldr	r0, [r3, #12]
 800a496:	b14c      	cbz	r4, 800a4ac <__assert_func+0x24>
 800a498:	4b07      	ldr	r3, [pc, #28]	; (800a4b8 <__assert_func+0x30>)
 800a49a:	9100      	str	r1, [sp, #0]
 800a49c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a4a0:	4906      	ldr	r1, [pc, #24]	; (800a4bc <__assert_func+0x34>)
 800a4a2:	462b      	mov	r3, r5
 800a4a4:	f000 f81e 	bl	800a4e4 <fiprintf>
 800a4a8:	f000 f8b4 	bl	800a614 <abort>
 800a4ac:	4b04      	ldr	r3, [pc, #16]	; (800a4c0 <__assert_func+0x38>)
 800a4ae:	461c      	mov	r4, r3
 800a4b0:	e7f3      	b.n	800a49a <__assert_func+0x12>
 800a4b2:	bf00      	nop
 800a4b4:	2000005c 	.word	0x2000005c
 800a4b8:	0800b825 	.word	0x0800b825
 800a4bc:	0800b832 	.word	0x0800b832
 800a4c0:	0800b860 	.word	0x0800b860

0800a4c4 <_close_r>:
 800a4c4:	b538      	push	{r3, r4, r5, lr}
 800a4c6:	4d06      	ldr	r5, [pc, #24]	; (800a4e0 <_close_r+0x1c>)
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	4604      	mov	r4, r0
 800a4cc:	4608      	mov	r0, r1
 800a4ce:	602b      	str	r3, [r5, #0]
 800a4d0:	f7f7 fa4d 	bl	800196e <_close>
 800a4d4:	1c43      	adds	r3, r0, #1
 800a4d6:	d102      	bne.n	800a4de <_close_r+0x1a>
 800a4d8:	682b      	ldr	r3, [r5, #0]
 800a4da:	b103      	cbz	r3, 800a4de <_close_r+0x1a>
 800a4dc:	6023      	str	r3, [r4, #0]
 800a4de:	bd38      	pop	{r3, r4, r5, pc}
 800a4e0:	20001dac 	.word	0x20001dac

0800a4e4 <fiprintf>:
 800a4e4:	b40e      	push	{r1, r2, r3}
 800a4e6:	b503      	push	{r0, r1, lr}
 800a4e8:	4601      	mov	r1, r0
 800a4ea:	ab03      	add	r3, sp, #12
 800a4ec:	4805      	ldr	r0, [pc, #20]	; (800a504 <fiprintf+0x20>)
 800a4ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4f2:	6800      	ldr	r0, [r0, #0]
 800a4f4:	9301      	str	r3, [sp, #4]
 800a4f6:	f7ff fe1b 	bl	800a130 <_vfiprintf_r>
 800a4fa:	b002      	add	sp, #8
 800a4fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a500:	b003      	add	sp, #12
 800a502:	4770      	bx	lr
 800a504:	2000005c 	.word	0x2000005c

0800a508 <_fstat_r>:
 800a508:	b538      	push	{r3, r4, r5, lr}
 800a50a:	4d07      	ldr	r5, [pc, #28]	; (800a528 <_fstat_r+0x20>)
 800a50c:	2300      	movs	r3, #0
 800a50e:	4604      	mov	r4, r0
 800a510:	4608      	mov	r0, r1
 800a512:	4611      	mov	r1, r2
 800a514:	602b      	str	r3, [r5, #0]
 800a516:	f7f7 fa36 	bl	8001986 <_fstat>
 800a51a:	1c43      	adds	r3, r0, #1
 800a51c:	d102      	bne.n	800a524 <_fstat_r+0x1c>
 800a51e:	682b      	ldr	r3, [r5, #0]
 800a520:	b103      	cbz	r3, 800a524 <_fstat_r+0x1c>
 800a522:	6023      	str	r3, [r4, #0]
 800a524:	bd38      	pop	{r3, r4, r5, pc}
 800a526:	bf00      	nop
 800a528:	20001dac 	.word	0x20001dac

0800a52c <_isatty_r>:
 800a52c:	b538      	push	{r3, r4, r5, lr}
 800a52e:	4d06      	ldr	r5, [pc, #24]	; (800a548 <_isatty_r+0x1c>)
 800a530:	2300      	movs	r3, #0
 800a532:	4604      	mov	r4, r0
 800a534:	4608      	mov	r0, r1
 800a536:	602b      	str	r3, [r5, #0]
 800a538:	f7f7 fa35 	bl	80019a6 <_isatty>
 800a53c:	1c43      	adds	r3, r0, #1
 800a53e:	d102      	bne.n	800a546 <_isatty_r+0x1a>
 800a540:	682b      	ldr	r3, [r5, #0]
 800a542:	b103      	cbz	r3, 800a546 <_isatty_r+0x1a>
 800a544:	6023      	str	r3, [r4, #0]
 800a546:	bd38      	pop	{r3, r4, r5, pc}
 800a548:	20001dac 	.word	0x20001dac

0800a54c <_lseek_r>:
 800a54c:	b538      	push	{r3, r4, r5, lr}
 800a54e:	4d07      	ldr	r5, [pc, #28]	; (800a56c <_lseek_r+0x20>)
 800a550:	4604      	mov	r4, r0
 800a552:	4608      	mov	r0, r1
 800a554:	4611      	mov	r1, r2
 800a556:	2200      	movs	r2, #0
 800a558:	602a      	str	r2, [r5, #0]
 800a55a:	461a      	mov	r2, r3
 800a55c:	f7f7 fa2e 	bl	80019bc <_lseek>
 800a560:	1c43      	adds	r3, r0, #1
 800a562:	d102      	bne.n	800a56a <_lseek_r+0x1e>
 800a564:	682b      	ldr	r3, [r5, #0]
 800a566:	b103      	cbz	r3, 800a56a <_lseek_r+0x1e>
 800a568:	6023      	str	r3, [r4, #0]
 800a56a:	bd38      	pop	{r3, r4, r5, pc}
 800a56c:	20001dac 	.word	0x20001dac

0800a570 <memmove>:
 800a570:	4288      	cmp	r0, r1
 800a572:	b510      	push	{r4, lr}
 800a574:	eb01 0402 	add.w	r4, r1, r2
 800a578:	d902      	bls.n	800a580 <memmove+0x10>
 800a57a:	4284      	cmp	r4, r0
 800a57c:	4623      	mov	r3, r4
 800a57e:	d807      	bhi.n	800a590 <memmove+0x20>
 800a580:	1e43      	subs	r3, r0, #1
 800a582:	42a1      	cmp	r1, r4
 800a584:	d008      	beq.n	800a598 <memmove+0x28>
 800a586:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a58a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a58e:	e7f8      	b.n	800a582 <memmove+0x12>
 800a590:	4402      	add	r2, r0
 800a592:	4601      	mov	r1, r0
 800a594:	428a      	cmp	r2, r1
 800a596:	d100      	bne.n	800a59a <memmove+0x2a>
 800a598:	bd10      	pop	{r4, pc}
 800a59a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a59e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a5a2:	e7f7      	b.n	800a594 <memmove+0x24>

0800a5a4 <_realloc_r>:
 800a5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5a6:	4607      	mov	r7, r0
 800a5a8:	4614      	mov	r4, r2
 800a5aa:	460e      	mov	r6, r1
 800a5ac:	b921      	cbnz	r1, 800a5b8 <_realloc_r+0x14>
 800a5ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a5b2:	4611      	mov	r1, r2
 800a5b4:	f7fb bb78 	b.w	8005ca8 <_malloc_r>
 800a5b8:	b922      	cbnz	r2, 800a5c4 <_realloc_r+0x20>
 800a5ba:	f7fb fb25 	bl	8005c08 <_free_r>
 800a5be:	4625      	mov	r5, r4
 800a5c0:	4628      	mov	r0, r5
 800a5c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5c4:	f000 f82d 	bl	800a622 <_malloc_usable_size_r>
 800a5c8:	42a0      	cmp	r0, r4
 800a5ca:	d20f      	bcs.n	800a5ec <_realloc_r+0x48>
 800a5cc:	4621      	mov	r1, r4
 800a5ce:	4638      	mov	r0, r7
 800a5d0:	f7fb fb6a 	bl	8005ca8 <_malloc_r>
 800a5d4:	4605      	mov	r5, r0
 800a5d6:	2800      	cmp	r0, #0
 800a5d8:	d0f2      	beq.n	800a5c0 <_realloc_r+0x1c>
 800a5da:	4631      	mov	r1, r6
 800a5dc:	4622      	mov	r2, r4
 800a5de:	f7fb faed 	bl	8005bbc <memcpy>
 800a5e2:	4631      	mov	r1, r6
 800a5e4:	4638      	mov	r0, r7
 800a5e6:	f7fb fb0f 	bl	8005c08 <_free_r>
 800a5ea:	e7e9      	b.n	800a5c0 <_realloc_r+0x1c>
 800a5ec:	4635      	mov	r5, r6
 800a5ee:	e7e7      	b.n	800a5c0 <_realloc_r+0x1c>

0800a5f0 <_read_r>:
 800a5f0:	b538      	push	{r3, r4, r5, lr}
 800a5f2:	4d07      	ldr	r5, [pc, #28]	; (800a610 <_read_r+0x20>)
 800a5f4:	4604      	mov	r4, r0
 800a5f6:	4608      	mov	r0, r1
 800a5f8:	4611      	mov	r1, r2
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	602a      	str	r2, [r5, #0]
 800a5fe:	461a      	mov	r2, r3
 800a600:	f7f7 f998 	bl	8001934 <_read>
 800a604:	1c43      	adds	r3, r0, #1
 800a606:	d102      	bne.n	800a60e <_read_r+0x1e>
 800a608:	682b      	ldr	r3, [r5, #0]
 800a60a:	b103      	cbz	r3, 800a60e <_read_r+0x1e>
 800a60c:	6023      	str	r3, [r4, #0]
 800a60e:	bd38      	pop	{r3, r4, r5, pc}
 800a610:	20001dac 	.word	0x20001dac

0800a614 <abort>:
 800a614:	b508      	push	{r3, lr}
 800a616:	2006      	movs	r0, #6
 800a618:	f000 f834 	bl	800a684 <raise>
 800a61c:	2001      	movs	r0, #1
 800a61e:	f7f7 f97f 	bl	8001920 <_exit>

0800a622 <_malloc_usable_size_r>:
 800a622:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a626:	1f18      	subs	r0, r3, #4
 800a628:	2b00      	cmp	r3, #0
 800a62a:	bfbc      	itt	lt
 800a62c:	580b      	ldrlt	r3, [r1, r0]
 800a62e:	18c0      	addlt	r0, r0, r3
 800a630:	4770      	bx	lr

0800a632 <_raise_r>:
 800a632:	291f      	cmp	r1, #31
 800a634:	b538      	push	{r3, r4, r5, lr}
 800a636:	4604      	mov	r4, r0
 800a638:	460d      	mov	r5, r1
 800a63a:	d904      	bls.n	800a646 <_raise_r+0x14>
 800a63c:	2316      	movs	r3, #22
 800a63e:	6003      	str	r3, [r0, #0]
 800a640:	f04f 30ff 	mov.w	r0, #4294967295
 800a644:	bd38      	pop	{r3, r4, r5, pc}
 800a646:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a648:	b112      	cbz	r2, 800a650 <_raise_r+0x1e>
 800a64a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a64e:	b94b      	cbnz	r3, 800a664 <_raise_r+0x32>
 800a650:	4620      	mov	r0, r4
 800a652:	f000 f831 	bl	800a6b8 <_getpid_r>
 800a656:	462a      	mov	r2, r5
 800a658:	4601      	mov	r1, r0
 800a65a:	4620      	mov	r0, r4
 800a65c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a660:	f000 b818 	b.w	800a694 <_kill_r>
 800a664:	2b01      	cmp	r3, #1
 800a666:	d00a      	beq.n	800a67e <_raise_r+0x4c>
 800a668:	1c59      	adds	r1, r3, #1
 800a66a:	d103      	bne.n	800a674 <_raise_r+0x42>
 800a66c:	2316      	movs	r3, #22
 800a66e:	6003      	str	r3, [r0, #0]
 800a670:	2001      	movs	r0, #1
 800a672:	e7e7      	b.n	800a644 <_raise_r+0x12>
 800a674:	2400      	movs	r4, #0
 800a676:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a67a:	4628      	mov	r0, r5
 800a67c:	4798      	blx	r3
 800a67e:	2000      	movs	r0, #0
 800a680:	e7e0      	b.n	800a644 <_raise_r+0x12>
	...

0800a684 <raise>:
 800a684:	4b02      	ldr	r3, [pc, #8]	; (800a690 <raise+0xc>)
 800a686:	4601      	mov	r1, r0
 800a688:	6818      	ldr	r0, [r3, #0]
 800a68a:	f7ff bfd2 	b.w	800a632 <_raise_r>
 800a68e:	bf00      	nop
 800a690:	2000005c 	.word	0x2000005c

0800a694 <_kill_r>:
 800a694:	b538      	push	{r3, r4, r5, lr}
 800a696:	4d07      	ldr	r5, [pc, #28]	; (800a6b4 <_kill_r+0x20>)
 800a698:	2300      	movs	r3, #0
 800a69a:	4604      	mov	r4, r0
 800a69c:	4608      	mov	r0, r1
 800a69e:	4611      	mov	r1, r2
 800a6a0:	602b      	str	r3, [r5, #0]
 800a6a2:	f7f7 f92d 	bl	8001900 <_kill>
 800a6a6:	1c43      	adds	r3, r0, #1
 800a6a8:	d102      	bne.n	800a6b0 <_kill_r+0x1c>
 800a6aa:	682b      	ldr	r3, [r5, #0]
 800a6ac:	b103      	cbz	r3, 800a6b0 <_kill_r+0x1c>
 800a6ae:	6023      	str	r3, [r4, #0]
 800a6b0:	bd38      	pop	{r3, r4, r5, pc}
 800a6b2:	bf00      	nop
 800a6b4:	20001dac 	.word	0x20001dac

0800a6b8 <_getpid_r>:
 800a6b8:	f7f7 b91a 	b.w	80018f0 <_getpid>

0800a6bc <_init>:
 800a6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6be:	bf00      	nop
 800a6c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6c2:	bc08      	pop	{r3}
 800a6c4:	469e      	mov	lr, r3
 800a6c6:	4770      	bx	lr

0800a6c8 <_fini>:
 800a6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ca:	bf00      	nop
 800a6cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6ce:	bc08      	pop	{r3}
 800a6d0:	469e      	mov	lr, r3
 800a6d2:	4770      	bx	lr
