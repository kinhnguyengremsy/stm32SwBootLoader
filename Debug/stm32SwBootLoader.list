
stm32SwBootLoader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d78  0800d970  0800d970  0001d970  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f6e8  0800f6e8  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800f6e8  0800f6e8  0001f6e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f6f0  0800f6f0  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f6f0  0800f6f0  0001f6f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f6f4  0800f6f4  0001f6f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800f6f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020208  2**0
                  CONTENTS
 10 .bss          000025c4  20000208  20000208  00020208  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200027cc  200027cc  00020208  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018f40  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003814  00000000  00000000  00039178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dc0  00000000  00000000  0003c990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d00  00000000  00000000  0003d750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022b61  00000000  00000000  0003e450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000129b8  00000000  00000000  00060fb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca7f3  00000000  00000000  00073969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013e15c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ed4  00000000  00000000  0013e1b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d954 	.word	0x0800d954

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	0800d954 	.word	0x0800d954

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, 10);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	230a      	movs	r3, #10
 8000ffe:	68b9      	ldr	r1, [r7, #8]
 8001000:	4803      	ldr	r0, [pc, #12]	; (8001010 <_write+0x24>)
 8001002:	f002 fc60 	bl	80038c6 <HAL_UART_Transmit>
  return len;
 8001006:	687b      	ldr	r3, [r7, #4]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000a7c 	.word	0x20000a7c

08001014 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <main+0x38>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f007 ff57 	bl	8008ed4 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001026:	f000 fd49 	bl	8001abc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800102a:	f000 f811 	bl	8001050 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102e:	f000 f94d 	bl	80012cc <MX_GPIO_Init>
  MX_DMA_Init();
 8001032:	f000 f8f5 	bl	8001220 <MX_DMA_Init>
  MX_UART4_Init();
 8001036:	f000 f875 	bl	8001124 <MX_UART4_Init>
  MX_USART2_UART_Init();
 800103a:	f000 f8c7 	bl	80011cc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800103e:	f000 f89b 	bl	8001178 <MX_USART1_UART_Init>
#if (USE_DEVICE_BOOTLOADER == 1)
  uartBootLoaderConfiguration();
#endif

#if(USE_MAVLINK_CONTROL == 1 && USE_HOST_BOOTLOADER == 0)
  mavlinhControlConfiguration();
 8001042:	f003 fe1f 	bl	8004c84 <mavlinhControlConfiguration>

#if (USE_DEVICE_BOOTLOADER == 1)
	  uartBootLoaderProcess();
#endif
#if(USE_MAVLINK_CONTROL == 1 && USE_HOST_BOOTLOADER == 0)
	  mavlinkControl_process();
 8001046:	f003 fe4b 	bl	8004ce0 <mavlinkControl_process>
 800104a:	e7fc      	b.n	8001046 <main+0x32>
 800104c:	20000030 	.word	0x20000030

08001050 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b094      	sub	sp, #80	; 0x50
 8001054:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001056:	f107 0320 	add.w	r3, r7, #32
 800105a:	2230      	movs	r2, #48	; 0x30
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f006 ff5e 	bl	8007f20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001074:	2300      	movs	r3, #0
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	4b28      	ldr	r3, [pc, #160]	; (800111c <SystemClock_Config+0xcc>)
 800107a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107c:	4a27      	ldr	r2, [pc, #156]	; (800111c <SystemClock_Config+0xcc>)
 800107e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001082:	6413      	str	r3, [r2, #64]	; 0x40
 8001084:	4b25      	ldr	r3, [pc, #148]	; (800111c <SystemClock_Config+0xcc>)
 8001086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001090:	2300      	movs	r3, #0
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	4b22      	ldr	r3, [pc, #136]	; (8001120 <SystemClock_Config+0xd0>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a21      	ldr	r2, [pc, #132]	; (8001120 <SystemClock_Config+0xd0>)
 800109a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800109e:	6013      	str	r3, [r2, #0]
 80010a0:	4b1f      	ldr	r3, [pc, #124]	; (8001120 <SystemClock_Config+0xd0>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010ac:	2301      	movs	r3, #1
 80010ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b6:	2302      	movs	r3, #2
 80010b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010c0:	2304      	movs	r3, #4
 80010c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010c4:	23a8      	movs	r3, #168	; 0xa8
 80010c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010c8:	2302      	movs	r3, #2
 80010ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010cc:	2304      	movs	r3, #4
 80010ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d0:	f107 0320 	add.w	r3, r7, #32
 80010d4:	4618      	mov	r0, r3
 80010d6:	f001 ff35 	bl	8002f44 <HAL_RCC_OscConfig>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010e0:	f000 f946 	bl	8001370 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e4:	230f      	movs	r3, #15
 80010e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e8:	2302      	movs	r3, #2
 80010ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010fc:	f107 030c 	add.w	r3, r7, #12
 8001100:	2105      	movs	r1, #5
 8001102:	4618      	mov	r0, r3
 8001104:	f002 f996 	bl	8003434 <HAL_RCC_ClockConfig>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800110e:	f000 f92f 	bl	8001370 <Error_Handler>
  }
}
 8001112:	bf00      	nop
 8001114:	3750      	adds	r7, #80	; 0x50
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40023800 	.word	0x40023800
 8001120:	40007000 	.word	0x40007000

08001124 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001128:	4b11      	ldr	r3, [pc, #68]	; (8001170 <MX_UART4_Init+0x4c>)
 800112a:	4a12      	ldr	r2, [pc, #72]	; (8001174 <MX_UART4_Init+0x50>)
 800112c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800112e:	4b10      	ldr	r3, [pc, #64]	; (8001170 <MX_UART4_Init+0x4c>)
 8001130:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001134:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <MX_UART4_Init+0x4c>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <MX_UART4_Init+0x4c>)
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <MX_UART4_Init+0x4c>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <MX_UART4_Init+0x4c>)
 800114a:	220c      	movs	r2, #12
 800114c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114e:	4b08      	ldr	r3, [pc, #32]	; (8001170 <MX_UART4_Init+0x4c>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <MX_UART4_Init+0x4c>)
 8001156:	2200      	movs	r2, #0
 8001158:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800115a:	4805      	ldr	r0, [pc, #20]	; (8001170 <MX_UART4_Init+0x4c>)
 800115c:	f002 fb66 	bl	800382c <HAL_UART_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001166:	f000 f903 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000ac0 	.word	0x20000ac0
 8001174:	40004c00 	.word	0x40004c00

08001178 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <MX_USART1_UART_Init+0x4c>)
 800117e:	4a12      	ldr	r2, [pc, #72]	; (80011c8 <MX_USART1_UART_Init+0x50>)
 8001180:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001182:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <MX_USART1_UART_Init+0x4c>)
 8001184:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001188:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800118a:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <MX_USART1_UART_Init+0x4c>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <MX_USART1_UART_Init+0x4c>)
 8001192:	2200      	movs	r2, #0
 8001194:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001196:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <MX_USART1_UART_Init+0x4c>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800119c:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <MX_USART1_UART_Init+0x4c>)
 800119e:	220c      	movs	r2, #12
 80011a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011a2:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <MX_USART1_UART_Init+0x4c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <MX_USART1_UART_Init+0x4c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011ae:	4805      	ldr	r0, [pc, #20]	; (80011c4 <MX_USART1_UART_Init+0x4c>)
 80011b0:	f002 fb3c 	bl	800382c <HAL_UART_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011ba:	f000 f8d9 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000a7c 	.word	0x20000a7c
 80011c8:	40011000 	.word	0x40011000

080011cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011d2:	4a12      	ldr	r2, [pc, #72]	; (800121c <MX_USART2_UART_Init+0x50>)
 80011d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011ea:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011f0:	4b09      	ldr	r3, [pc, #36]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011f2:	220c      	movs	r2, #12
 80011f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f6:	4b08      	ldr	r3, [pc, #32]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001202:	4805      	ldr	r0, [pc, #20]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 8001204:	f002 fb12 	bl	800382c <HAL_UART_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800120e:	f000 f8af 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000b04 	.word	0x20000b04
 800121c:	40004400 	.word	0x40004400

08001220 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	4b27      	ldr	r3, [pc, #156]	; (80012c8 <MX_DMA_Init+0xa8>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a26      	ldr	r2, [pc, #152]	; (80012c8 <MX_DMA_Init+0xa8>)
 8001230:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b24      	ldr	r3, [pc, #144]	; (80012c8 <MX_DMA_Init+0xa8>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	603b      	str	r3, [r7, #0]
 8001246:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <MX_DMA_Init+0xa8>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a1f      	ldr	r2, [pc, #124]	; (80012c8 <MX_DMA_Init+0xa8>)
 800124c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <MX_DMA_Init+0xa8>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800125a:	603b      	str	r3, [r7, #0]
 800125c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2100      	movs	r1, #0
 8001262:	200d      	movs	r0, #13
 8001264:	f000 fd9b 	bl	8001d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001268:	200d      	movs	r0, #13
 800126a:	f000 fdb4 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800126e:	2200      	movs	r2, #0
 8001270:	2100      	movs	r1, #0
 8001272:	200f      	movs	r0, #15
 8001274:	f000 fd93 	bl	8001d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001278:	200f      	movs	r0, #15
 800127a:	f000 fdac 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	2100      	movs	r1, #0
 8001282:	2010      	movs	r0, #16
 8001284:	f000 fd8b 	bl	8001d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001288:	2010      	movs	r0, #16
 800128a:	f000 fda4 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	2100      	movs	r1, #0
 8001292:	2011      	movs	r0, #17
 8001294:	f000 fd83 	bl	8001d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001298:	2011      	movs	r0, #17
 800129a:	f000 fd9c 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800129e:	2200      	movs	r2, #0
 80012a0:	2100      	movs	r1, #0
 80012a2:	203a      	movs	r0, #58	; 0x3a
 80012a4:	f000 fd7b 	bl	8001d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80012a8:	203a      	movs	r0, #58	; 0x3a
 80012aa:	f000 fd94 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2100      	movs	r1, #0
 80012b2:	2046      	movs	r0, #70	; 0x46
 80012b4:	f000 fd73 	bl	8001d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80012b8:	2046      	movs	r0, #70	; 0x46
 80012ba:	f000 fd8c 	bl	8001dd6 <HAL_NVIC_EnableIRQ>

}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40023800 	.word	0x40023800

080012cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b088      	sub	sp, #32
 80012d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d2:	f107 030c 	add.w	r3, r7, #12
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
 80012e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	4b20      	ldr	r3, [pc, #128]	; (8001368 <MX_GPIO_Init+0x9c>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a1f      	ldr	r2, [pc, #124]	; (8001368 <MX_GPIO_Init+0x9c>)
 80012ec:	f043 0304 	orr.w	r3, r3, #4
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <MX_GPIO_Init+0x9c>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0304 	and.w	r3, r3, #4
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	4b19      	ldr	r3, [pc, #100]	; (8001368 <MX_GPIO_Init+0x9c>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a18      	ldr	r2, [pc, #96]	; (8001368 <MX_GPIO_Init+0x9c>)
 8001308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b16      	ldr	r3, [pc, #88]	; (8001368 <MX_GPIO_Init+0x9c>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	603b      	str	r3, [r7, #0]
 800131e:	4b12      	ldr	r3, [pc, #72]	; (8001368 <MX_GPIO_Init+0x9c>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a11      	ldr	r2, [pc, #68]	; (8001368 <MX_GPIO_Init+0x9c>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <MX_GPIO_Init+0x9c>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	603b      	str	r3, [r7, #0]
 8001334:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 8001336:	2201      	movs	r2, #1
 8001338:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800133c:	480b      	ldr	r0, [pc, #44]	; (800136c <MX_GPIO_Init+0xa0>)
 800133e:	f001 fde7 	bl	8002f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001342:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001346:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001348:	2301      	movs	r3, #1
 800134a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001350:	2300      	movs	r3, #0
 8001352:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001354:	f107 030c 	add.w	r3, r7, #12
 8001358:	4619      	mov	r1, r3
 800135a:	4804      	ldr	r0, [pc, #16]	; (800136c <MX_GPIO_Init+0xa0>)
 800135c:	f001 fc3c 	bl	8002bd8 <HAL_GPIO_Init>

}
 8001360:	bf00      	nop
 8001362:	3720      	adds	r7, #32
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40023800 	.word	0x40023800
 800136c:	40020800 	.word	0x40020800

08001370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001374:	b672      	cpsid	i
}
 8001376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("\n[Error_Handler] ......\n");
 8001378:	4803      	ldr	r0, [pc, #12]	; (8001388 <Error_Handler+0x18>)
 800137a:	f007 fd93 	bl	8008ea4 <puts>
	  HAL_Delay(1000);
 800137e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001382:	f000 fc0d 	bl	8001ba0 <HAL_Delay>
	  printf("\n[Error_Handler] ......\n");
 8001386:	e7f7      	b.n	8001378 <Error_Handler+0x8>
 8001388:	0800d970 	.word	0x0800d970

0800138c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <HAL_MspInit+0x4c>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	4a0f      	ldr	r2, [pc, #60]	; (80013d8 <HAL_MspInit+0x4c>)
 800139c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a0:	6453      	str	r3, [r2, #68]	; 0x44
 80013a2:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <HAL_MspInit+0x4c>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	603b      	str	r3, [r7, #0]
 80013b2:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <HAL_MspInit+0x4c>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	4a08      	ldr	r2, [pc, #32]	; (80013d8 <HAL_MspInit+0x4c>)
 80013b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013bc:	6413      	str	r3, [r2, #64]	; 0x40
 80013be:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <HAL_MspInit+0x4c>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c6:	603b      	str	r3, [r7, #0]
 80013c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	40023800 	.word	0x40023800

080013dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08e      	sub	sp, #56	; 0x38
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a98      	ldr	r2, [pc, #608]	; (800165c <HAL_UART_MspInit+0x280>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	f040 8095 	bne.w	800152a <HAL_UART_MspInit+0x14e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001400:	2300      	movs	r3, #0
 8001402:	623b      	str	r3, [r7, #32]
 8001404:	4b96      	ldr	r3, [pc, #600]	; (8001660 <HAL_UART_MspInit+0x284>)
 8001406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001408:	4a95      	ldr	r2, [pc, #596]	; (8001660 <HAL_UART_MspInit+0x284>)
 800140a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800140e:	6413      	str	r3, [r2, #64]	; 0x40
 8001410:	4b93      	ldr	r3, [pc, #588]	; (8001660 <HAL_UART_MspInit+0x284>)
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001418:	623b      	str	r3, [r7, #32]
 800141a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800141c:	2300      	movs	r3, #0
 800141e:	61fb      	str	r3, [r7, #28]
 8001420:	4b8f      	ldr	r3, [pc, #572]	; (8001660 <HAL_UART_MspInit+0x284>)
 8001422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001424:	4a8e      	ldr	r2, [pc, #568]	; (8001660 <HAL_UART_MspInit+0x284>)
 8001426:	f043 0304 	orr.w	r3, r3, #4
 800142a:	6313      	str	r3, [r2, #48]	; 0x30
 800142c:	4b8c      	ldr	r3, [pc, #560]	; (8001660 <HAL_UART_MspInit+0x284>)
 800142e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	61fb      	str	r3, [r7, #28]
 8001436:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001438:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143e:	2302      	movs	r3, #2
 8001440:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001446:	2303      	movs	r3, #3
 8001448:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800144a:	2308      	movs	r3, #8
 800144c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800144e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001452:	4619      	mov	r1, r3
 8001454:	4883      	ldr	r0, [pc, #524]	; (8001664 <HAL_UART_MspInit+0x288>)
 8001456:	f001 fbbf 	bl	8002bd8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800145a:	4b83      	ldr	r3, [pc, #524]	; (8001668 <HAL_UART_MspInit+0x28c>)
 800145c:	4a83      	ldr	r2, [pc, #524]	; (800166c <HAL_UART_MspInit+0x290>)
 800145e:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8001460:	4b81      	ldr	r3, [pc, #516]	; (8001668 <HAL_UART_MspInit+0x28c>)
 8001462:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001466:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001468:	4b7f      	ldr	r3, [pc, #508]	; (8001668 <HAL_UART_MspInit+0x28c>)
 800146a:	2240      	movs	r2, #64	; 0x40
 800146c:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800146e:	4b7e      	ldr	r3, [pc, #504]	; (8001668 <HAL_UART_MspInit+0x28c>)
 8001470:	2200      	movs	r2, #0
 8001472:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001474:	4b7c      	ldr	r3, [pc, #496]	; (8001668 <HAL_UART_MspInit+0x28c>)
 8001476:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800147a:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800147c:	4b7a      	ldr	r3, [pc, #488]	; (8001668 <HAL_UART_MspInit+0x28c>)
 800147e:	2200      	movs	r2, #0
 8001480:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001482:	4b79      	ldr	r3, [pc, #484]	; (8001668 <HAL_UART_MspInit+0x28c>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001488:	4b77      	ldr	r3, [pc, #476]	; (8001668 <HAL_UART_MspInit+0x28c>)
 800148a:	2200      	movs	r2, #0
 800148c:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800148e:	4b76      	ldr	r3, [pc, #472]	; (8001668 <HAL_UART_MspInit+0x28c>)
 8001490:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001494:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001496:	4b74      	ldr	r3, [pc, #464]	; (8001668 <HAL_UART_MspInit+0x28c>)
 8001498:	2200      	movs	r2, #0
 800149a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800149c:	4872      	ldr	r0, [pc, #456]	; (8001668 <HAL_UART_MspInit+0x28c>)
 800149e:	f000 fcb5 	bl	8001e0c <HAL_DMA_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80014a8:	f7ff ff62 	bl	8001370 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4a6e      	ldr	r2, [pc, #440]	; (8001668 <HAL_UART_MspInit+0x28c>)
 80014b0:	635a      	str	r2, [r3, #52]	; 0x34
 80014b2:	4a6d      	ldr	r2, [pc, #436]	; (8001668 <HAL_UART_MspInit+0x28c>)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80014b8:	4b6d      	ldr	r3, [pc, #436]	; (8001670 <HAL_UART_MspInit+0x294>)
 80014ba:	4a6e      	ldr	r2, [pc, #440]	; (8001674 <HAL_UART_MspInit+0x298>)
 80014bc:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80014be:	4b6c      	ldr	r3, [pc, #432]	; (8001670 <HAL_UART_MspInit+0x294>)
 80014c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014c4:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014c6:	4b6a      	ldr	r3, [pc, #424]	; (8001670 <HAL_UART_MspInit+0x294>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014cc:	4b68      	ldr	r3, [pc, #416]	; (8001670 <HAL_UART_MspInit+0x294>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014d2:	4b67      	ldr	r3, [pc, #412]	; (8001670 <HAL_UART_MspInit+0x294>)
 80014d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014d8:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014da:	4b65      	ldr	r3, [pc, #404]	; (8001670 <HAL_UART_MspInit+0x294>)
 80014dc:	2200      	movs	r2, #0
 80014de:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014e0:	4b63      	ldr	r3, [pc, #396]	; (8001670 <HAL_UART_MspInit+0x294>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80014e6:	4b62      	ldr	r3, [pc, #392]	; (8001670 <HAL_UART_MspInit+0x294>)
 80014e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014ec:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80014ee:	4b60      	ldr	r3, [pc, #384]	; (8001670 <HAL_UART_MspInit+0x294>)
 80014f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014f4:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014f6:	4b5e      	ldr	r3, [pc, #376]	; (8001670 <HAL_UART_MspInit+0x294>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80014fc:	485c      	ldr	r0, [pc, #368]	; (8001670 <HAL_UART_MspInit+0x294>)
 80014fe:	f000 fc85 	bl	8001e0c <HAL_DMA_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 8001508:	f7ff ff32 	bl	8001370 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a58      	ldr	r2, [pc, #352]	; (8001670 <HAL_UART_MspInit+0x294>)
 8001510:	639a      	str	r2, [r3, #56]	; 0x38
 8001512:	4a57      	ldr	r2, [pc, #348]	; (8001670 <HAL_UART_MspInit+0x294>)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001518:	2200      	movs	r2, #0
 800151a:	2100      	movs	r1, #0
 800151c:	2034      	movs	r0, #52	; 0x34
 800151e:	f000 fc3e 	bl	8001d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001522:	2034      	movs	r0, #52	; 0x34
 8001524:	f000 fc57 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001528:	e14b      	b.n	80017c2 <HAL_UART_MspInit+0x3e6>
  else if(huart->Instance==USART1)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a52      	ldr	r2, [pc, #328]	; (8001678 <HAL_UART_MspInit+0x29c>)
 8001530:	4293      	cmp	r3, r2
 8001532:	f040 80ad 	bne.w	8001690 <HAL_UART_MspInit+0x2b4>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	61bb      	str	r3, [r7, #24]
 800153a:	4b49      	ldr	r3, [pc, #292]	; (8001660 <HAL_UART_MspInit+0x284>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153e:	4a48      	ldr	r2, [pc, #288]	; (8001660 <HAL_UART_MspInit+0x284>)
 8001540:	f043 0310 	orr.w	r3, r3, #16
 8001544:	6453      	str	r3, [r2, #68]	; 0x44
 8001546:	4b46      	ldr	r3, [pc, #280]	; (8001660 <HAL_UART_MspInit+0x284>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	f003 0310 	and.w	r3, r3, #16
 800154e:	61bb      	str	r3, [r7, #24]
 8001550:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	4b42      	ldr	r3, [pc, #264]	; (8001660 <HAL_UART_MspInit+0x284>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a41      	ldr	r2, [pc, #260]	; (8001660 <HAL_UART_MspInit+0x284>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b3f      	ldr	r3, [pc, #252]	; (8001660 <HAL_UART_MspInit+0x284>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800156e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001574:	2302      	movs	r3, #2
 8001576:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157c:	2303      	movs	r3, #3
 800157e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001580:	2307      	movs	r3, #7
 8001582:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001584:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001588:	4619      	mov	r1, r3
 800158a:	483c      	ldr	r0, [pc, #240]	; (800167c <HAL_UART_MspInit+0x2a0>)
 800158c:	f001 fb24 	bl	8002bd8 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001590:	4b3b      	ldr	r3, [pc, #236]	; (8001680 <HAL_UART_MspInit+0x2a4>)
 8001592:	4a3c      	ldr	r2, [pc, #240]	; (8001684 <HAL_UART_MspInit+0x2a8>)
 8001594:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001596:	4b3a      	ldr	r3, [pc, #232]	; (8001680 <HAL_UART_MspInit+0x2a4>)
 8001598:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800159c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800159e:	4b38      	ldr	r3, [pc, #224]	; (8001680 <HAL_UART_MspInit+0x2a4>)
 80015a0:	2240      	movs	r2, #64	; 0x40
 80015a2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015a4:	4b36      	ldr	r3, [pc, #216]	; (8001680 <HAL_UART_MspInit+0x2a4>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015aa:	4b35      	ldr	r3, [pc, #212]	; (8001680 <HAL_UART_MspInit+0x2a4>)
 80015ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015b0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015b2:	4b33      	ldr	r3, [pc, #204]	; (8001680 <HAL_UART_MspInit+0x2a4>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015b8:	4b31      	ldr	r3, [pc, #196]	; (8001680 <HAL_UART_MspInit+0x2a4>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80015be:	4b30      	ldr	r3, [pc, #192]	; (8001680 <HAL_UART_MspInit+0x2a4>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015c4:	4b2e      	ldr	r3, [pc, #184]	; (8001680 <HAL_UART_MspInit+0x2a4>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015ca:	4b2d      	ldr	r3, [pc, #180]	; (8001680 <HAL_UART_MspInit+0x2a4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80015d0:	482b      	ldr	r0, [pc, #172]	; (8001680 <HAL_UART_MspInit+0x2a4>)
 80015d2:	f000 fc1b 	bl	8001e0c <HAL_DMA_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <HAL_UART_MspInit+0x204>
      Error_Handler();
 80015dc:	f7ff fec8 	bl	8001370 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a27      	ldr	r2, [pc, #156]	; (8001680 <HAL_UART_MspInit+0x2a4>)
 80015e4:	635a      	str	r2, [r3, #52]	; 0x34
 80015e6:	4a26      	ldr	r2, [pc, #152]	; (8001680 <HAL_UART_MspInit+0x2a4>)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80015ec:	4b26      	ldr	r3, [pc, #152]	; (8001688 <HAL_UART_MspInit+0x2ac>)
 80015ee:	4a27      	ldr	r2, [pc, #156]	; (800168c <HAL_UART_MspInit+0x2b0>)
 80015f0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80015f2:	4b25      	ldr	r3, [pc, #148]	; (8001688 <HAL_UART_MspInit+0x2ac>)
 80015f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015f8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015fa:	4b23      	ldr	r3, [pc, #140]	; (8001688 <HAL_UART_MspInit+0x2ac>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001600:	4b21      	ldr	r3, [pc, #132]	; (8001688 <HAL_UART_MspInit+0x2ac>)
 8001602:	2200      	movs	r2, #0
 8001604:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001606:	4b20      	ldr	r3, [pc, #128]	; (8001688 <HAL_UART_MspInit+0x2ac>)
 8001608:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800160c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800160e:	4b1e      	ldr	r3, [pc, #120]	; (8001688 <HAL_UART_MspInit+0x2ac>)
 8001610:	2200      	movs	r2, #0
 8001612:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001614:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <HAL_UART_MspInit+0x2ac>)
 8001616:	2200      	movs	r2, #0
 8001618:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800161a:	4b1b      	ldr	r3, [pc, #108]	; (8001688 <HAL_UART_MspInit+0x2ac>)
 800161c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001620:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001622:	4b19      	ldr	r3, [pc, #100]	; (8001688 <HAL_UART_MspInit+0x2ac>)
 8001624:	2200      	movs	r2, #0
 8001626:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001628:	4b17      	ldr	r3, [pc, #92]	; (8001688 <HAL_UART_MspInit+0x2ac>)
 800162a:	2200      	movs	r2, #0
 800162c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800162e:	4816      	ldr	r0, [pc, #88]	; (8001688 <HAL_UART_MspInit+0x2ac>)
 8001630:	f000 fbec 	bl	8001e0c <HAL_DMA_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_UART_MspInit+0x262>
      Error_Handler();
 800163a:	f7ff fe99 	bl	8001370 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a11      	ldr	r2, [pc, #68]	; (8001688 <HAL_UART_MspInit+0x2ac>)
 8001642:	639a      	str	r2, [r3, #56]	; 0x38
 8001644:	4a10      	ldr	r2, [pc, #64]	; (8001688 <HAL_UART_MspInit+0x2ac>)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800164a:	2200      	movs	r2, #0
 800164c:	2100      	movs	r1, #0
 800164e:	2025      	movs	r0, #37	; 0x25
 8001650:	f000 fba5 	bl	8001d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001654:	2025      	movs	r0, #37	; 0x25
 8001656:	f000 fbbe 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
}
 800165a:	e0b2      	b.n	80017c2 <HAL_UART_MspInit+0x3e6>
 800165c:	40004c00 	.word	0x40004c00
 8001660:	40023800 	.word	0x40023800
 8001664:	40020800 	.word	0x40020800
 8001668:	20000b48 	.word	0x20000b48
 800166c:	40026070 	.word	0x40026070
 8001670:	2000089c 	.word	0x2000089c
 8001674:	40026040 	.word	0x40026040
 8001678:	40011000 	.word	0x40011000
 800167c:	40020000 	.word	0x40020000
 8001680:	2000095c 	.word	0x2000095c
 8001684:	400264b8 	.word	0x400264b8
 8001688:	200009bc 	.word	0x200009bc
 800168c:	40026440 	.word	0x40026440
  else if(huart->Instance==USART2)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a4d      	ldr	r2, [pc, #308]	; (80017cc <HAL_UART_MspInit+0x3f0>)
 8001696:	4293      	cmp	r3, r2
 8001698:	f040 8093 	bne.w	80017c2 <HAL_UART_MspInit+0x3e6>
    __HAL_RCC_USART2_CLK_ENABLE();
 800169c:	2300      	movs	r3, #0
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	4b4b      	ldr	r3, [pc, #300]	; (80017d0 <HAL_UART_MspInit+0x3f4>)
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a4:	4a4a      	ldr	r2, [pc, #296]	; (80017d0 <HAL_UART_MspInit+0x3f4>)
 80016a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016aa:	6413      	str	r3, [r2, #64]	; 0x40
 80016ac:	4b48      	ldr	r3, [pc, #288]	; (80017d0 <HAL_UART_MspInit+0x3f4>)
 80016ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b4:	613b      	str	r3, [r7, #16]
 80016b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b8:	2300      	movs	r3, #0
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	4b44      	ldr	r3, [pc, #272]	; (80017d0 <HAL_UART_MspInit+0x3f4>)
 80016be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c0:	4a43      	ldr	r2, [pc, #268]	; (80017d0 <HAL_UART_MspInit+0x3f4>)
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	6313      	str	r3, [r2, #48]	; 0x30
 80016c8:	4b41      	ldr	r3, [pc, #260]	; (80017d0 <HAL_UART_MspInit+0x3f4>)
 80016ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016d4:	230c      	movs	r3, #12
 80016d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e0:	2303      	movs	r3, #3
 80016e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016e4:	2307      	movs	r3, #7
 80016e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ec:	4619      	mov	r1, r3
 80016ee:	4839      	ldr	r0, [pc, #228]	; (80017d4 <HAL_UART_MspInit+0x3f8>)
 80016f0:	f001 fa72 	bl	8002bd8 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80016f4:	4b38      	ldr	r3, [pc, #224]	; (80017d8 <HAL_UART_MspInit+0x3fc>)
 80016f6:	4a39      	ldr	r2, [pc, #228]	; (80017dc <HAL_UART_MspInit+0x400>)
 80016f8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80016fa:	4b37      	ldr	r3, [pc, #220]	; (80017d8 <HAL_UART_MspInit+0x3fc>)
 80016fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001700:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001702:	4b35      	ldr	r3, [pc, #212]	; (80017d8 <HAL_UART_MspInit+0x3fc>)
 8001704:	2240      	movs	r2, #64	; 0x40
 8001706:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001708:	4b33      	ldr	r3, [pc, #204]	; (80017d8 <HAL_UART_MspInit+0x3fc>)
 800170a:	2200      	movs	r2, #0
 800170c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800170e:	4b32      	ldr	r3, [pc, #200]	; (80017d8 <HAL_UART_MspInit+0x3fc>)
 8001710:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001714:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001716:	4b30      	ldr	r3, [pc, #192]	; (80017d8 <HAL_UART_MspInit+0x3fc>)
 8001718:	2200      	movs	r2, #0
 800171a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800171c:	4b2e      	ldr	r3, [pc, #184]	; (80017d8 <HAL_UART_MspInit+0x3fc>)
 800171e:	2200      	movs	r2, #0
 8001720:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001722:	4b2d      	ldr	r3, [pc, #180]	; (80017d8 <HAL_UART_MspInit+0x3fc>)
 8001724:	2200      	movs	r2, #0
 8001726:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001728:	4b2b      	ldr	r3, [pc, #172]	; (80017d8 <HAL_UART_MspInit+0x3fc>)
 800172a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800172e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001730:	4b29      	ldr	r3, [pc, #164]	; (80017d8 <HAL_UART_MspInit+0x3fc>)
 8001732:	2200      	movs	r2, #0
 8001734:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001736:	4828      	ldr	r0, [pc, #160]	; (80017d8 <HAL_UART_MspInit+0x3fc>)
 8001738:	f000 fb68 	bl	8001e0c <HAL_DMA_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <HAL_UART_MspInit+0x36a>
      Error_Handler();
 8001742:	f7ff fe15 	bl	8001370 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a23      	ldr	r2, [pc, #140]	; (80017d8 <HAL_UART_MspInit+0x3fc>)
 800174a:	635a      	str	r2, [r3, #52]	; 0x34
 800174c:	4a22      	ldr	r2, [pc, #136]	; (80017d8 <HAL_UART_MspInit+0x3fc>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001752:	4b23      	ldr	r3, [pc, #140]	; (80017e0 <HAL_UART_MspInit+0x404>)
 8001754:	4a23      	ldr	r2, [pc, #140]	; (80017e4 <HAL_UART_MspInit+0x408>)
 8001756:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001758:	4b21      	ldr	r3, [pc, #132]	; (80017e0 <HAL_UART_MspInit+0x404>)
 800175a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800175e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001760:	4b1f      	ldr	r3, [pc, #124]	; (80017e0 <HAL_UART_MspInit+0x404>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001766:	4b1e      	ldr	r3, [pc, #120]	; (80017e0 <HAL_UART_MspInit+0x404>)
 8001768:	2200      	movs	r2, #0
 800176a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800176c:	4b1c      	ldr	r3, [pc, #112]	; (80017e0 <HAL_UART_MspInit+0x404>)
 800176e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001772:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001774:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <HAL_UART_MspInit+0x404>)
 8001776:	2200      	movs	r2, #0
 8001778:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800177a:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <HAL_UART_MspInit+0x404>)
 800177c:	2200      	movs	r2, #0
 800177e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001780:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <HAL_UART_MspInit+0x404>)
 8001782:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001786:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001788:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <HAL_UART_MspInit+0x404>)
 800178a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800178e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001790:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <HAL_UART_MspInit+0x404>)
 8001792:	2200      	movs	r2, #0
 8001794:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001796:	4812      	ldr	r0, [pc, #72]	; (80017e0 <HAL_UART_MspInit+0x404>)
 8001798:	f000 fb38 	bl	8001e0c <HAL_DMA_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <HAL_UART_MspInit+0x3ca>
      Error_Handler();
 80017a2:	f7ff fde5 	bl	8001370 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a0d      	ldr	r2, [pc, #52]	; (80017e0 <HAL_UART_MspInit+0x404>)
 80017aa:	639a      	str	r2, [r3, #56]	; 0x38
 80017ac:	4a0c      	ldr	r2, [pc, #48]	; (80017e0 <HAL_UART_MspInit+0x404>)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2100      	movs	r1, #0
 80017b6:	2026      	movs	r0, #38	; 0x26
 80017b8:	f000 faf1 	bl	8001d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017bc:	2026      	movs	r0, #38	; 0x26
 80017be:	f000 fb0a 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
}
 80017c2:	bf00      	nop
 80017c4:	3738      	adds	r7, #56	; 0x38
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40004400 	.word	0x40004400
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40020000 	.word	0x40020000
 80017d8:	20000a1c 	.word	0x20000a1c
 80017dc:	400260a0 	.word	0x400260a0
 80017e0:	200008fc 	.word	0x200008fc
 80017e4:	40026088 	.word	0x40026088

080017e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017ec:	e7fe      	b.n	80017ec <NMI_Handler+0x4>

080017ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f2:	e7fe      	b.n	80017f2 <HardFault_Handler+0x4>

080017f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <MemManage_Handler+0x4>

080017fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017fe:	e7fe      	b.n	80017fe <BusFault_Handler+0x4>

08001800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001804:	e7fe      	b.n	8001804 <UsageFault_Handler+0x4>

08001806 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001834:	f000 f994 	bl	8001b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}

0800183c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001840:	4802      	ldr	r0, [pc, #8]	; (800184c <DMA1_Stream2_IRQHandler+0x10>)
 8001842:	f000 fc7b 	bl	800213c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	2000089c 	.word	0x2000089c

08001850 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001854:	4802      	ldr	r0, [pc, #8]	; (8001860 <DMA1_Stream4_IRQHandler+0x10>)
 8001856:	f000 fc71 	bl	800213c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000b48 	.word	0x20000b48

08001864 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001868:	4802      	ldr	r0, [pc, #8]	; (8001874 <DMA1_Stream5_IRQHandler+0x10>)
 800186a:	f000 fc67 	bl	800213c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	200008fc 	.word	0x200008fc

08001878 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800187c:	4802      	ldr	r0, [pc, #8]	; (8001888 <DMA1_Stream6_IRQHandler+0x10>)
 800187e:	f000 fc5d 	bl	800213c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000a1c 	.word	0x20000a1c

0800188c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001890:	4802      	ldr	r0, [pc, #8]	; (800189c <USART1_IRQHandler+0x10>)
 8001892:	f002 f959 	bl	8003b48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000a7c 	.word	0x20000a7c

080018a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018a4:	4802      	ldr	r0, [pc, #8]	; (80018b0 <USART2_IRQHandler+0x10>)
 80018a6:	f002 f94f 	bl	8003b48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000b04 	.word	0x20000b04

080018b4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80018b8:	4802      	ldr	r0, [pc, #8]	; (80018c4 <UART4_IRQHandler+0x10>)
 80018ba:	f002 f945 	bl	8003b48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000ac0 	.word	0x20000ac0

080018c8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80018cc:	4802      	ldr	r0, [pc, #8]	; (80018d8 <DMA2_Stream2_IRQHandler+0x10>)
 80018ce:	f000 fc35 	bl	800213c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	200009bc 	.word	0x200009bc

080018dc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80018e0:	4802      	ldr	r0, [pc, #8]	; (80018ec <DMA2_Stream7_IRQHandler+0x10>)
 80018e2:	f000 fc2b 	bl	800213c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	2000095c 	.word	0x2000095c

080018f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
	return 1;
 80018f4:	2301      	movs	r3, #1
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <_kill>:

int _kill(int pid, int sig)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800190a:	f006 fabb 	bl	8007e84 <__errno>
 800190e:	4603      	mov	r3, r0
 8001910:	2216      	movs	r2, #22
 8001912:	601a      	str	r2, [r3, #0]
	return -1;
 8001914:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001918:	4618      	mov	r0, r3
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <_exit>:

void _exit (int status)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001928:	f04f 31ff 	mov.w	r1, #4294967295
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff ffe7 	bl	8001900 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001932:	e7fe      	b.n	8001932 <_exit+0x12>

08001934 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	e00a      	b.n	800195c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001946:	f3af 8000 	nop.w
 800194a:	4601      	mov	r1, r0
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	1c5a      	adds	r2, r3, #1
 8001950:	60ba      	str	r2, [r7, #8]
 8001952:	b2ca      	uxtb	r2, r1
 8001954:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	3301      	adds	r3, #1
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	429a      	cmp	r2, r3
 8001962:	dbf0      	blt.n	8001946 <_read+0x12>
	}

return len;
 8001964:	687b      	ldr	r3, [r7, #4]
}
 8001966:	4618      	mov	r0, r3
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <_close>:
	}
	return len;
}

int _close(int file)
{
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
	return -1;
 8001976:	f04f 33ff 	mov.w	r3, #4294967295
}
 800197a:	4618      	mov	r0, r3
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
 800198e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001996:	605a      	str	r2, [r3, #4]
	return 0;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <_isatty>:

int _isatty(int file)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
	return 1;
 80019ae:	2301      	movs	r3, #1
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
	return 0;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
	...

080019d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019e0:	4a14      	ldr	r2, [pc, #80]	; (8001a34 <_sbrk+0x5c>)
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <_sbrk+0x60>)
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019ec:	4b13      	ldr	r3, [pc, #76]	; (8001a3c <_sbrk+0x64>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d102      	bne.n	80019fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019f4:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <_sbrk+0x64>)
 80019f6:	4a12      	ldr	r2, [pc, #72]	; (8001a40 <_sbrk+0x68>)
 80019f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019fa:	4b10      	ldr	r3, [pc, #64]	; (8001a3c <_sbrk+0x64>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d207      	bcs.n	8001a18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a08:	f006 fa3c 	bl	8007e84 <__errno>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	220c      	movs	r2, #12
 8001a10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a12:	f04f 33ff 	mov.w	r3, #4294967295
 8001a16:	e009      	b.n	8001a2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a18:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <_sbrk+0x64>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a1e:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <_sbrk+0x64>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4413      	add	r3, r2
 8001a26:	4a05      	ldr	r2, [pc, #20]	; (8001a3c <_sbrk+0x64>)
 8001a28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20020000 	.word	0x20020000
 8001a38:	00000400 	.word	0x00000400
 8001a3c:	20000224 	.word	0x20000224
 8001a40:	200027d0 	.word	0x200027d0

08001a44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a48:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <SystemInit+0x20>)
 8001a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a4e:	4a05      	ldr	r2, [pc, #20]	; (8001a64 <SystemInit+0x20>)
 8001a50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001aa0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a6c:	480d      	ldr	r0, [pc, #52]	; (8001aa4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a6e:	490e      	ldr	r1, [pc, #56]	; (8001aa8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a70:	4a0e      	ldr	r2, [pc, #56]	; (8001aac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a74:	e002      	b.n	8001a7c <LoopCopyDataInit>

08001a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a7a:	3304      	adds	r3, #4

08001a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a80:	d3f9      	bcc.n	8001a76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a82:	4a0b      	ldr	r2, [pc, #44]	; (8001ab0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a84:	4c0b      	ldr	r4, [pc, #44]	; (8001ab4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a88:	e001      	b.n	8001a8e <LoopFillZerobss>

08001a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a8c:	3204      	adds	r2, #4

08001a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a90:	d3fb      	bcc.n	8001a8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a92:	f7ff ffd7 	bl	8001a44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a96:	f006 f9fb 	bl	8007e90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a9a:	f7ff fabb 	bl	8001014 <main>
  bx  lr    
 8001a9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001aa0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aa8:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8001aac:	0800f6f8 	.word	0x0800f6f8
  ldr r2, =_sbss
 8001ab0:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8001ab4:	200027cc 	.word	0x200027cc

08001ab8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ab8:	e7fe      	b.n	8001ab8 <ADC_IRQHandler>
	...

08001abc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ac0:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <HAL_Init+0x40>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a0d      	ldr	r2, [pc, #52]	; (8001afc <HAL_Init+0x40>)
 8001ac6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001acc:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <HAL_Init+0x40>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a0a      	ldr	r2, [pc, #40]	; (8001afc <HAL_Init+0x40>)
 8001ad2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ad6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ad8:	4b08      	ldr	r3, [pc, #32]	; (8001afc <HAL_Init+0x40>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a07      	ldr	r2, [pc, #28]	; (8001afc <HAL_Init+0x40>)
 8001ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae4:	2003      	movs	r0, #3
 8001ae6:	f000 f94f 	bl	8001d88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aea:	200f      	movs	r0, #15
 8001aec:	f000 f808 	bl	8001b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001af0:	f7ff fc4c 	bl	800138c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40023c00 	.word	0x40023c00

08001b00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b08:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <HAL_InitTick+0x54>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <HAL_InitTick+0x58>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	4619      	mov	r1, r3
 8001b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f000 f967 	bl	8001df2 <HAL_SYSTICK_Config>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e00e      	b.n	8001b4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b0f      	cmp	r3, #15
 8001b32:	d80a      	bhi.n	8001b4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b34:	2200      	movs	r2, #0
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	f04f 30ff 	mov.w	r0, #4294967295
 8001b3c:	f000 f92f 	bl	8001d9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b40:	4a06      	ldr	r2, [pc, #24]	; (8001b5c <HAL_InitTick+0x5c>)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
 8001b48:	e000      	b.n	8001b4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20000000 	.word	0x20000000
 8001b58:	20000008 	.word	0x20000008
 8001b5c:	20000004 	.word	0x20000004

08001b60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b64:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <HAL_IncTick+0x20>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <HAL_IncTick+0x24>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4413      	add	r3, r2
 8001b70:	4a04      	ldr	r2, [pc, #16]	; (8001b84 <HAL_IncTick+0x24>)
 8001b72:	6013      	str	r3, [r2, #0]
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	20000008 	.word	0x20000008
 8001b84:	20000ba8 	.word	0x20000ba8

08001b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b8c:	4b03      	ldr	r3, [pc, #12]	; (8001b9c <HAL_GetTick+0x14>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	20000ba8 	.word	0x20000ba8

08001ba0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ba8:	f7ff ffee 	bl	8001b88 <HAL_GetTick>
 8001bac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb8:	d005      	beq.n	8001bc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bba:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <HAL_Delay+0x44>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bc6:	bf00      	nop
 8001bc8:	f7ff ffde 	bl	8001b88 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d8f7      	bhi.n	8001bc8 <HAL_Delay+0x28>
  {
  }
}
 8001bd8:	bf00      	nop
 8001bda:	bf00      	nop
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000008 	.word	0x20000008

08001be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <__NVIC_SetPriorityGrouping+0x44>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c04:	4013      	ands	r3, r2
 8001c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c1a:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <__NVIC_SetPriorityGrouping+0x44>)
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	60d3      	str	r3, [r2, #12]
}
 8001c20:	bf00      	nop
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <__NVIC_GetPriorityGrouping+0x18>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	0a1b      	lsrs	r3, r3, #8
 8001c3a:	f003 0307 	and.w	r3, r3, #7
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	db0b      	blt.n	8001c76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	f003 021f 	and.w	r2, r3, #31
 8001c64:	4907      	ldr	r1, [pc, #28]	; (8001c84 <__NVIC_EnableIRQ+0x38>)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	095b      	lsrs	r3, r3, #5
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	e000e100 	.word	0xe000e100

08001c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	6039      	str	r1, [r7, #0]
 8001c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	db0a      	blt.n	8001cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	490c      	ldr	r1, [pc, #48]	; (8001cd4 <__NVIC_SetPriority+0x4c>)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	0112      	lsls	r2, r2, #4
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	440b      	add	r3, r1
 8001cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb0:	e00a      	b.n	8001cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	4908      	ldr	r1, [pc, #32]	; (8001cd8 <__NVIC_SetPriority+0x50>)
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	3b04      	subs	r3, #4
 8001cc0:	0112      	lsls	r2, r2, #4
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	761a      	strb	r2, [r3, #24]
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	e000e100 	.word	0xe000e100
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b089      	sub	sp, #36	; 0x24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	f1c3 0307 	rsb	r3, r3, #7
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	bf28      	it	cs
 8001cfa:	2304      	movcs	r3, #4
 8001cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	3304      	adds	r3, #4
 8001d02:	2b06      	cmp	r3, #6
 8001d04:	d902      	bls.n	8001d0c <NVIC_EncodePriority+0x30>
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3b03      	subs	r3, #3
 8001d0a:	e000      	b.n	8001d0e <NVIC_EncodePriority+0x32>
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d10:	f04f 32ff 	mov.w	r2, #4294967295
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43da      	mvns	r2, r3
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	401a      	ands	r2, r3
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d24:	f04f 31ff 	mov.w	r1, #4294967295
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2e:	43d9      	mvns	r1, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d34:	4313      	orrs	r3, r2
         );
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3724      	adds	r7, #36	; 0x24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
	...

08001d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d54:	d301      	bcc.n	8001d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d56:	2301      	movs	r3, #1
 8001d58:	e00f      	b.n	8001d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <SysTick_Config+0x40>)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d62:	210f      	movs	r1, #15
 8001d64:	f04f 30ff 	mov.w	r0, #4294967295
 8001d68:	f7ff ff8e 	bl	8001c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d6c:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <SysTick_Config+0x40>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d72:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <SysTick_Config+0x40>)
 8001d74:	2207      	movs	r2, #7
 8001d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	e000e010 	.word	0xe000e010

08001d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7ff ff29 	bl	8001be8 <__NVIC_SetPriorityGrouping>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b086      	sub	sp, #24
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	4603      	mov	r3, r0
 8001da6:	60b9      	str	r1, [r7, #8]
 8001da8:	607a      	str	r2, [r7, #4]
 8001daa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001db0:	f7ff ff3e 	bl	8001c30 <__NVIC_GetPriorityGrouping>
 8001db4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	68b9      	ldr	r1, [r7, #8]
 8001dba:	6978      	ldr	r0, [r7, #20]
 8001dbc:	f7ff ff8e 	bl	8001cdc <NVIC_EncodePriority>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc6:	4611      	mov	r1, r2
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ff5d 	bl	8001c88 <__NVIC_SetPriority>
}
 8001dce:	bf00      	nop
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	4603      	mov	r3, r0
 8001dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ff31 	bl	8001c4c <__NVIC_EnableIRQ>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff ffa2 	bl	8001d44 <SysTick_Config>
 8001e00:	4603      	mov	r3, r0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
	...

08001e0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e18:	f7ff feb6 	bl	8001b88 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e099      	b.n	8001f5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 0201 	bic.w	r2, r2, #1
 8001e46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e48:	e00f      	b.n	8001e6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e4a:	f7ff fe9d 	bl	8001b88 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b05      	cmp	r3, #5
 8001e56:	d908      	bls.n	8001e6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2220      	movs	r2, #32
 8001e5c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2203      	movs	r2, #3
 8001e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e078      	b.n	8001f5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1e8      	bne.n	8001e4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	4b38      	ldr	r3, [pc, #224]	; (8001f64 <HAL_DMA_Init+0x158>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ea2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	2b04      	cmp	r3, #4
 8001ec2:	d107      	bne.n	8001ed4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	f023 0307 	bic.w	r3, r3, #7
 8001eea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	697a      	ldr	r2, [r7, #20]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d117      	bne.n	8001f2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00e      	beq.n	8001f2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 fb01 	bl	8002518 <DMA_CheckFifoParam>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d008      	beq.n	8001f2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2240      	movs	r2, #64	; 0x40
 8001f20:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e016      	b.n	8001f5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 fab8 	bl	80024ac <DMA_CalcBaseAndBitshift>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f44:	223f      	movs	r2, #63	; 0x3f
 8001f46:	409a      	lsls	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	f010803f 	.word	0xf010803f

08001f68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
 8001f74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f76:	2300      	movs	r3, #0
 8001f78:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d101      	bne.n	8001f8e <HAL_DMA_Start_IT+0x26>
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	e040      	b.n	8002010 <HAL_DMA_Start_IT+0xa8>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d12f      	bne.n	8002002 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	68b9      	ldr	r1, [r7, #8]
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f000 fa4a 	bl	8002450 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc0:	223f      	movs	r2, #63	; 0x3f
 8001fc2:	409a      	lsls	r2, r3
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f042 0216 	orr.w	r2, r2, #22
 8001fd6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d007      	beq.n	8001ff0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f042 0208 	orr.w	r2, r2, #8
 8001fee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f042 0201 	orr.w	r2, r2, #1
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	e005      	b.n	800200e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800200a:	2302      	movs	r3, #2
 800200c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800200e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002024:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002026:	f7ff fdaf 	bl	8001b88 <HAL_GetTick>
 800202a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d008      	beq.n	800204a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2280      	movs	r2, #128	; 0x80
 800203c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e052      	b.n	80020f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 0216 	bic.w	r2, r2, #22
 8002058:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	695a      	ldr	r2, [r3, #20]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002068:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	2b00      	cmp	r3, #0
 8002070:	d103      	bne.n	800207a <HAL_DMA_Abort+0x62>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002076:	2b00      	cmp	r3, #0
 8002078:	d007      	beq.n	800208a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 0208 	bic.w	r2, r2, #8
 8002088:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 0201 	bic.w	r2, r2, #1
 8002098:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800209a:	e013      	b.n	80020c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800209c:	f7ff fd74 	bl	8001b88 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b05      	cmp	r3, #5
 80020a8:	d90c      	bls.n	80020c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2220      	movs	r2, #32
 80020ae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2203      	movs	r2, #3
 80020b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e015      	b.n	80020f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1e4      	bne.n	800209c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d6:	223f      	movs	r2, #63	; 0x3f
 80020d8:	409a      	lsls	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d004      	beq.n	8002116 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2280      	movs	r2, #128	; 0x80
 8002110:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e00c      	b.n	8002130 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2205      	movs	r2, #5
 800211a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 0201 	bic.w	r2, r2, #1
 800212c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002144:	2300      	movs	r3, #0
 8002146:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002148:	4b92      	ldr	r3, [pc, #584]	; (8002394 <HAL_DMA_IRQHandler+0x258>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a92      	ldr	r2, [pc, #584]	; (8002398 <HAL_DMA_IRQHandler+0x25c>)
 800214e:	fba2 2303 	umull	r2, r3, r2, r3
 8002152:	0a9b      	lsrs	r3, r3, #10
 8002154:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002166:	2208      	movs	r2, #8
 8002168:	409a      	lsls	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	4013      	ands	r3, r2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d01a      	beq.n	80021a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0304 	and.w	r3, r3, #4
 800217c:	2b00      	cmp	r3, #0
 800217e:	d013      	beq.n	80021a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0204 	bic.w	r2, r2, #4
 800218e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002194:	2208      	movs	r2, #8
 8002196:	409a      	lsls	r2, r3
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a0:	f043 0201 	orr.w	r2, r3, #1
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ac:	2201      	movs	r2, #1
 80021ae:	409a      	lsls	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4013      	ands	r3, r2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d012      	beq.n	80021de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00b      	beq.n	80021de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ca:	2201      	movs	r2, #1
 80021cc:	409a      	lsls	r2, r3
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d6:	f043 0202 	orr.w	r2, r3, #2
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e2:	2204      	movs	r2, #4
 80021e4:	409a      	lsls	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	4013      	ands	r3, r2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d012      	beq.n	8002214 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00b      	beq.n	8002214 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002200:	2204      	movs	r2, #4
 8002202:	409a      	lsls	r2, r3
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800220c:	f043 0204 	orr.w	r2, r3, #4
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002218:	2210      	movs	r2, #16
 800221a:	409a      	lsls	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4013      	ands	r3, r2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d043      	beq.n	80022ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	2b00      	cmp	r3, #0
 8002230:	d03c      	beq.n	80022ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002236:	2210      	movs	r2, #16
 8002238:	409a      	lsls	r2, r3
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d018      	beq.n	800227e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d108      	bne.n	800226c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	2b00      	cmp	r3, #0
 8002260:	d024      	beq.n	80022ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	4798      	blx	r3
 800226a:	e01f      	b.n	80022ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002270:	2b00      	cmp	r3, #0
 8002272:	d01b      	beq.n	80022ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	4798      	blx	r3
 800227c:	e016      	b.n	80022ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002288:	2b00      	cmp	r3, #0
 800228a:	d107      	bne.n	800229c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 0208 	bic.w	r2, r2, #8
 800229a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b0:	2220      	movs	r2, #32
 80022b2:	409a      	lsls	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4013      	ands	r3, r2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 808e 	beq.w	80023da <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0310 	and.w	r3, r3, #16
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 8086 	beq.w	80023da <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d2:	2220      	movs	r2, #32
 80022d4:	409a      	lsls	r2, r3
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b05      	cmp	r3, #5
 80022e4:	d136      	bne.n	8002354 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 0216 	bic.w	r2, r2, #22
 80022f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	695a      	ldr	r2, [r3, #20]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002304:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	2b00      	cmp	r3, #0
 800230c:	d103      	bne.n	8002316 <HAL_DMA_IRQHandler+0x1da>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002312:	2b00      	cmp	r3, #0
 8002314:	d007      	beq.n	8002326 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 0208 	bic.w	r2, r2, #8
 8002324:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232a:	223f      	movs	r2, #63	; 0x3f
 800232c:	409a      	lsls	r2, r3
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002346:	2b00      	cmp	r3, #0
 8002348:	d07d      	beq.n	8002446 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	4798      	blx	r3
        }
        return;
 8002352:	e078      	b.n	8002446 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d01c      	beq.n	800239c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d108      	bne.n	8002382 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002374:	2b00      	cmp	r3, #0
 8002376:	d030      	beq.n	80023da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	4798      	blx	r3
 8002380:	e02b      	b.n	80023da <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002386:	2b00      	cmp	r3, #0
 8002388:	d027      	beq.n	80023da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	4798      	blx	r3
 8002392:	e022      	b.n	80023da <HAL_DMA_IRQHandler+0x29e>
 8002394:	20000000 	.word	0x20000000
 8002398:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10f      	bne.n	80023ca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0210 	bic.w	r2, r2, #16
 80023b8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d032      	beq.n	8002448 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d022      	beq.n	8002434 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2205      	movs	r2, #5
 80023f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f022 0201 	bic.w	r2, r2, #1
 8002404:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	3301      	adds	r3, #1
 800240a:	60bb      	str	r3, [r7, #8]
 800240c:	697a      	ldr	r2, [r7, #20]
 800240e:	429a      	cmp	r2, r3
 8002410:	d307      	bcc.n	8002422 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1f2      	bne.n	8002406 <HAL_DMA_IRQHandler+0x2ca>
 8002420:	e000      	b.n	8002424 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002422:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	4798      	blx	r3
 8002444:	e000      	b.n	8002448 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002446:	bf00      	nop
    }
  }
}
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop

08002450 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
 800245c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800246c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	2b40      	cmp	r3, #64	; 0x40
 800247c:	d108      	bne.n	8002490 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800248e:	e007      	b.n	80024a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68ba      	ldr	r2, [r7, #8]
 8002496:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	60da      	str	r2, [r3, #12]
}
 80024a0:	bf00      	nop
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	3b10      	subs	r3, #16
 80024bc:	4a14      	ldr	r2, [pc, #80]	; (8002510 <DMA_CalcBaseAndBitshift+0x64>)
 80024be:	fba2 2303 	umull	r2, r3, r2, r3
 80024c2:	091b      	lsrs	r3, r3, #4
 80024c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024c6:	4a13      	ldr	r2, [pc, #76]	; (8002514 <DMA_CalcBaseAndBitshift+0x68>)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4413      	add	r3, r2
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	461a      	mov	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2b03      	cmp	r3, #3
 80024d8:	d909      	bls.n	80024ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024e2:	f023 0303 	bic.w	r3, r3, #3
 80024e6:	1d1a      	adds	r2, r3, #4
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	659a      	str	r2, [r3, #88]	; 0x58
 80024ec:	e007      	b.n	80024fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024f6:	f023 0303 	bic.w	r3, r3, #3
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002502:	4618      	mov	r0, r3
 8002504:	3714      	adds	r7, #20
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	aaaaaaab 	.word	0xaaaaaaab
 8002514:	0800e3ac 	.word	0x0800e3ac

08002518 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002520:	2300      	movs	r3, #0
 8002522:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002528:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d11f      	bne.n	8002572 <DMA_CheckFifoParam+0x5a>
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	2b03      	cmp	r3, #3
 8002536:	d856      	bhi.n	80025e6 <DMA_CheckFifoParam+0xce>
 8002538:	a201      	add	r2, pc, #4	; (adr r2, 8002540 <DMA_CheckFifoParam+0x28>)
 800253a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800253e:	bf00      	nop
 8002540:	08002551 	.word	0x08002551
 8002544:	08002563 	.word	0x08002563
 8002548:	08002551 	.word	0x08002551
 800254c:	080025e7 	.word	0x080025e7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002554:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d046      	beq.n	80025ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002560:	e043      	b.n	80025ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002566:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800256a:	d140      	bne.n	80025ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002570:	e03d      	b.n	80025ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800257a:	d121      	bne.n	80025c0 <DMA_CheckFifoParam+0xa8>
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	2b03      	cmp	r3, #3
 8002580:	d837      	bhi.n	80025f2 <DMA_CheckFifoParam+0xda>
 8002582:	a201      	add	r2, pc, #4	; (adr r2, 8002588 <DMA_CheckFifoParam+0x70>)
 8002584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002588:	08002599 	.word	0x08002599
 800258c:	0800259f 	.word	0x0800259f
 8002590:	08002599 	.word	0x08002599
 8002594:	080025b1 	.word	0x080025b1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	73fb      	strb	r3, [r7, #15]
      break;
 800259c:	e030      	b.n	8002600 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d025      	beq.n	80025f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ae:	e022      	b.n	80025f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025b8:	d11f      	bne.n	80025fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025be:	e01c      	b.n	80025fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d903      	bls.n	80025ce <DMA_CheckFifoParam+0xb6>
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	d003      	beq.n	80025d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025cc:	e018      	b.n	8002600 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	73fb      	strb	r3, [r7, #15]
      break;
 80025d2:	e015      	b.n	8002600 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00e      	beq.n	80025fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	73fb      	strb	r3, [r7, #15]
      break;
 80025e4:	e00b      	b.n	80025fe <DMA_CheckFifoParam+0xe6>
      break;
 80025e6:	bf00      	nop
 80025e8:	e00a      	b.n	8002600 <DMA_CheckFifoParam+0xe8>
      break;
 80025ea:	bf00      	nop
 80025ec:	e008      	b.n	8002600 <DMA_CheckFifoParam+0xe8>
      break;
 80025ee:	bf00      	nop
 80025f0:	e006      	b.n	8002600 <DMA_CheckFifoParam+0xe8>
      break;
 80025f2:	bf00      	nop
 80025f4:	e004      	b.n	8002600 <DMA_CheckFifoParam+0xe8>
      break;
 80025f6:	bf00      	nop
 80025f8:	e002      	b.n	8002600 <DMA_CheckFifoParam+0xe8>
      break;   
 80025fa:	bf00      	nop
 80025fc:	e000      	b.n	8002600 <DMA_CheckFifoParam+0xe8>
      break;
 80025fe:	bf00      	nop
    }
  } 
  
  return status; 
 8002600:	7bfb      	ldrb	r3, [r7, #15]
}
 8002602:	4618      	mov	r0, r3
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop

08002610 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002622:	4b23      	ldr	r3, [pc, #140]	; (80026b0 <HAL_FLASH_Program+0xa0>)
 8002624:	7e1b      	ldrb	r3, [r3, #24]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d101      	bne.n	800262e <HAL_FLASH_Program+0x1e>
 800262a:	2302      	movs	r3, #2
 800262c:	e03b      	b.n	80026a6 <HAL_FLASH_Program+0x96>
 800262e:	4b20      	ldr	r3, [pc, #128]	; (80026b0 <HAL_FLASH_Program+0xa0>)
 8002630:	2201      	movs	r2, #1
 8002632:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002634:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002638:	f000 f87c 	bl	8002734 <FLASH_WaitForLastOperation>
 800263c:	4603      	mov	r3, r0
 800263e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002640:	7dfb      	ldrb	r3, [r7, #23]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d12b      	bne.n	800269e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d105      	bne.n	8002658 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800264c:	783b      	ldrb	r3, [r7, #0]
 800264e:	4619      	mov	r1, r3
 8002650:	68b8      	ldr	r0, [r7, #8]
 8002652:	f000 f927 	bl	80028a4 <FLASH_Program_Byte>
 8002656:	e016      	b.n	8002686 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d105      	bne.n	800266a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800265e:	883b      	ldrh	r3, [r7, #0]
 8002660:	4619      	mov	r1, r3
 8002662:	68b8      	ldr	r0, [r7, #8]
 8002664:	f000 f8fa 	bl	800285c <FLASH_Program_HalfWord>
 8002668:	e00d      	b.n	8002686 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2b02      	cmp	r3, #2
 800266e:	d105      	bne.n	800267c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	4619      	mov	r1, r3
 8002674:	68b8      	ldr	r0, [r7, #8]
 8002676:	f000 f8cf 	bl	8002818 <FLASH_Program_Word>
 800267a:	e004      	b.n	8002686 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800267c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002680:	68b8      	ldr	r0, [r7, #8]
 8002682:	f000 f897 	bl	80027b4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002686:	f24c 3050 	movw	r0, #50000	; 0xc350
 800268a:	f000 f853 	bl	8002734 <FLASH_WaitForLastOperation>
 800268e:	4603      	mov	r3, r0
 8002690:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8002692:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <HAL_FLASH_Program+0xa4>)
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	4a07      	ldr	r2, [pc, #28]	; (80026b4 <HAL_FLASH_Program+0xa4>)
 8002698:	f023 0301 	bic.w	r3, r3, #1
 800269c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800269e:	4b04      	ldr	r3, [pc, #16]	; (80026b0 <HAL_FLASH_Program+0xa0>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	761a      	strb	r2, [r3, #24]
  
  return status;
 80026a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3718      	adds	r7, #24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	20000bac 	.word	0x20000bac
 80026b4:	40023c00 	.word	0x40023c00

080026b8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80026be:	2300      	movs	r3, #0
 80026c0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80026c2:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <HAL_FLASH_Unlock+0x38>)
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	da0b      	bge.n	80026e2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80026ca:	4b09      	ldr	r3, [pc, #36]	; (80026f0 <HAL_FLASH_Unlock+0x38>)
 80026cc:	4a09      	ldr	r2, [pc, #36]	; (80026f4 <HAL_FLASH_Unlock+0x3c>)
 80026ce:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80026d0:	4b07      	ldr	r3, [pc, #28]	; (80026f0 <HAL_FLASH_Unlock+0x38>)
 80026d2:	4a09      	ldr	r2, [pc, #36]	; (80026f8 <HAL_FLASH_Unlock+0x40>)
 80026d4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80026d6:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <HAL_FLASH_Unlock+0x38>)
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	da01      	bge.n	80026e2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80026e2:	79fb      	ldrb	r3, [r7, #7]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	40023c00 	.word	0x40023c00
 80026f4:	45670123 	.word	0x45670123
 80026f8:	cdef89ab 	.word	0xcdef89ab

080026fc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002700:	4b05      	ldr	r3, [pc, #20]	; (8002718 <HAL_FLASH_Lock+0x1c>)
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	4a04      	ldr	r2, [pc, #16]	; (8002718 <HAL_FLASH_Lock+0x1c>)
 8002706:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800270a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	40023c00 	.word	0x40023c00

0800271c <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8002720:	4b03      	ldr	r3, [pc, #12]	; (8002730 <HAL_FLASH_GetError+0x14>)
 8002722:	69db      	ldr	r3, [r3, #28]
}  
 8002724:	4618      	mov	r0, r3
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	20000bac 	.word	0x20000bac

08002734 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800273c:	2300      	movs	r3, #0
 800273e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002740:	4b1a      	ldr	r3, [pc, #104]	; (80027ac <FLASH_WaitForLastOperation+0x78>)
 8002742:	2200      	movs	r2, #0
 8002744:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002746:	f7ff fa1f 	bl	8001b88 <HAL_GetTick>
 800274a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800274c:	e010      	b.n	8002770 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002754:	d00c      	beq.n	8002770 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d007      	beq.n	800276c <FLASH_WaitForLastOperation+0x38>
 800275c:	f7ff fa14 	bl	8001b88 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	429a      	cmp	r2, r3
 800276a:	d201      	bcs.n	8002770 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e019      	b.n	80027a4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002770:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <FLASH_WaitForLastOperation+0x7c>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1e8      	bne.n	800274e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800277c:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <FLASH_WaitForLastOperation+0x7c>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	2b00      	cmp	r3, #0
 8002786:	d002      	beq.n	800278e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002788:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <FLASH_WaitForLastOperation+0x7c>)
 800278a:	2201      	movs	r2, #1
 800278c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800278e:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <FLASH_WaitForLastOperation+0x7c>)
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800279a:	f000 f8a5 	bl	80028e8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e000      	b.n	80027a4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
  
}  
 80027a4:	4618      	mov	r0, r3
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	20000bac 	.word	0x20000bac
 80027b0:	40023c00 	.word	0x40023c00

080027b4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80027c0:	4b14      	ldr	r3, [pc, #80]	; (8002814 <FLASH_Program_DoubleWord+0x60>)
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	4a13      	ldr	r2, [pc, #76]	; (8002814 <FLASH_Program_DoubleWord+0x60>)
 80027c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80027cc:	4b11      	ldr	r3, [pc, #68]	; (8002814 <FLASH_Program_DoubleWord+0x60>)
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	4a10      	ldr	r2, [pc, #64]	; (8002814 <FLASH_Program_DoubleWord+0x60>)
 80027d2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80027d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80027d8:	4b0e      	ldr	r3, [pc, #56]	; (8002814 <FLASH_Program_DoubleWord+0x60>)
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	4a0d      	ldr	r2, [pc, #52]	; (8002814 <FLASH_Program_DoubleWord+0x60>)
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80027ea:	f3bf 8f6f 	isb	sy
}
 80027ee:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80027f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	f04f 0300 	mov.w	r3, #0
 80027fc:	000a      	movs	r2, r1
 80027fe:	2300      	movs	r3, #0
 8002800:	68f9      	ldr	r1, [r7, #12]
 8002802:	3104      	adds	r1, #4
 8002804:	4613      	mov	r3, r2
 8002806:	600b      	str	r3, [r1, #0]
}
 8002808:	bf00      	nop
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	40023c00 	.word	0x40023c00

08002818 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002822:	4b0d      	ldr	r3, [pc, #52]	; (8002858 <FLASH_Program_Word+0x40>)
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	4a0c      	ldr	r2, [pc, #48]	; (8002858 <FLASH_Program_Word+0x40>)
 8002828:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800282c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800282e:	4b0a      	ldr	r3, [pc, #40]	; (8002858 <FLASH_Program_Word+0x40>)
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	4a09      	ldr	r2, [pc, #36]	; (8002858 <FLASH_Program_Word+0x40>)
 8002834:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002838:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800283a:	4b07      	ldr	r3, [pc, #28]	; (8002858 <FLASH_Program_Word+0x40>)
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	4a06      	ldr	r2, [pc, #24]	; (8002858 <FLASH_Program_Word+0x40>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	601a      	str	r2, [r3, #0]
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	40023c00 	.word	0x40023c00

0800285c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	460b      	mov	r3, r1
 8002866:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002868:	4b0d      	ldr	r3, [pc, #52]	; (80028a0 <FLASH_Program_HalfWord+0x44>)
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	4a0c      	ldr	r2, [pc, #48]	; (80028a0 <FLASH_Program_HalfWord+0x44>)
 800286e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002872:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002874:	4b0a      	ldr	r3, [pc, #40]	; (80028a0 <FLASH_Program_HalfWord+0x44>)
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	4a09      	ldr	r2, [pc, #36]	; (80028a0 <FLASH_Program_HalfWord+0x44>)
 800287a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800287e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002880:	4b07      	ldr	r3, [pc, #28]	; (80028a0 <FLASH_Program_HalfWord+0x44>)
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	4a06      	ldr	r2, [pc, #24]	; (80028a0 <FLASH_Program_HalfWord+0x44>)
 8002886:	f043 0301 	orr.w	r3, r3, #1
 800288a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	887a      	ldrh	r2, [r7, #2]
 8002890:	801a      	strh	r2, [r3, #0]
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	40023c00 	.word	0x40023c00

080028a4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80028b0:	4b0c      	ldr	r3, [pc, #48]	; (80028e4 <FLASH_Program_Byte+0x40>)
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	4a0b      	ldr	r2, [pc, #44]	; (80028e4 <FLASH_Program_Byte+0x40>)
 80028b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80028bc:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <FLASH_Program_Byte+0x40>)
 80028be:	4a09      	ldr	r2, [pc, #36]	; (80028e4 <FLASH_Program_Byte+0x40>)
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80028c4:	4b07      	ldr	r3, [pc, #28]	; (80028e4 <FLASH_Program_Byte+0x40>)
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	4a06      	ldr	r2, [pc, #24]	; (80028e4 <FLASH_Program_Byte+0x40>)
 80028ca:	f043 0301 	orr.w	r3, r3, #1
 80028ce:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	78fa      	ldrb	r2, [r7, #3]
 80028d4:	701a      	strb	r2, [r3, #0]
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	40023c00 	.word	0x40023c00

080028e8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80028ec:	4b27      	ldr	r3, [pc, #156]	; (800298c <FLASH_SetErrorCode+0xa4>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	f003 0310 	and.w	r3, r3, #16
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d008      	beq.n	800290a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80028f8:	4b25      	ldr	r3, [pc, #148]	; (8002990 <FLASH_SetErrorCode+0xa8>)
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	f043 0310 	orr.w	r3, r3, #16
 8002900:	4a23      	ldr	r2, [pc, #140]	; (8002990 <FLASH_SetErrorCode+0xa8>)
 8002902:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002904:	4b21      	ldr	r3, [pc, #132]	; (800298c <FLASH_SetErrorCode+0xa4>)
 8002906:	2210      	movs	r2, #16
 8002908:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800290a:	4b20      	ldr	r3, [pc, #128]	; (800298c <FLASH_SetErrorCode+0xa4>)
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	f003 0320 	and.w	r3, r3, #32
 8002912:	2b00      	cmp	r3, #0
 8002914:	d008      	beq.n	8002928 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002916:	4b1e      	ldr	r3, [pc, #120]	; (8002990 <FLASH_SetErrorCode+0xa8>)
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	f043 0308 	orr.w	r3, r3, #8
 800291e:	4a1c      	ldr	r2, [pc, #112]	; (8002990 <FLASH_SetErrorCode+0xa8>)
 8002920:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002922:	4b1a      	ldr	r3, [pc, #104]	; (800298c <FLASH_SetErrorCode+0xa4>)
 8002924:	2220      	movs	r2, #32
 8002926:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002928:	4b18      	ldr	r3, [pc, #96]	; (800298c <FLASH_SetErrorCode+0xa4>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002930:	2b00      	cmp	r3, #0
 8002932:	d008      	beq.n	8002946 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002934:	4b16      	ldr	r3, [pc, #88]	; (8002990 <FLASH_SetErrorCode+0xa8>)
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	f043 0304 	orr.w	r3, r3, #4
 800293c:	4a14      	ldr	r2, [pc, #80]	; (8002990 <FLASH_SetErrorCode+0xa8>)
 800293e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002940:	4b12      	ldr	r3, [pc, #72]	; (800298c <FLASH_SetErrorCode+0xa4>)
 8002942:	2240      	movs	r2, #64	; 0x40
 8002944:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002946:	4b11      	ldr	r3, [pc, #68]	; (800298c <FLASH_SetErrorCode+0xa4>)
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800294e:	2b00      	cmp	r3, #0
 8002950:	d008      	beq.n	8002964 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002952:	4b0f      	ldr	r3, [pc, #60]	; (8002990 <FLASH_SetErrorCode+0xa8>)
 8002954:	69db      	ldr	r3, [r3, #28]
 8002956:	f043 0302 	orr.w	r3, r3, #2
 800295a:	4a0d      	ldr	r2, [pc, #52]	; (8002990 <FLASH_SetErrorCode+0xa8>)
 800295c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800295e:	4b0b      	ldr	r3, [pc, #44]	; (800298c <FLASH_SetErrorCode+0xa4>)
 8002960:	2280      	movs	r2, #128	; 0x80
 8002962:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002964:	4b09      	ldr	r3, [pc, #36]	; (800298c <FLASH_SetErrorCode+0xa4>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d008      	beq.n	8002982 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002970:	4b07      	ldr	r3, [pc, #28]	; (8002990 <FLASH_SetErrorCode+0xa8>)
 8002972:	69db      	ldr	r3, [r3, #28]
 8002974:	f043 0320 	orr.w	r3, r3, #32
 8002978:	4a05      	ldr	r2, [pc, #20]	; (8002990 <FLASH_SetErrorCode+0xa8>)
 800297a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800297c:	4b03      	ldr	r3, [pc, #12]	; (800298c <FLASH_SetErrorCode+0xa4>)
 800297e:	2202      	movs	r2, #2
 8002980:	60da      	str	r2, [r3, #12]
  }
}
 8002982:	bf00      	nop
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	40023c00 	.word	0x40023c00
 8002990:	20000bac 	.word	0x20000bac

08002994 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80029a6:	4b31      	ldr	r3, [pc, #196]	; (8002a6c <HAL_FLASHEx_Erase+0xd8>)
 80029a8:	7e1b      	ldrb	r3, [r3, #24]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d101      	bne.n	80029b2 <HAL_FLASHEx_Erase+0x1e>
 80029ae:	2302      	movs	r3, #2
 80029b0:	e058      	b.n	8002a64 <HAL_FLASHEx_Erase+0xd0>
 80029b2:	4b2e      	ldr	r3, [pc, #184]	; (8002a6c <HAL_FLASHEx_Erase+0xd8>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80029b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80029bc:	f7ff feba 	bl	8002734 <FLASH_WaitForLastOperation>
 80029c0:	4603      	mov	r3, r0
 80029c2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80029c4:	7bfb      	ldrb	r3, [r7, #15]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d148      	bne.n	8002a5c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	f04f 32ff 	mov.w	r2, #4294967295
 80029d0:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d115      	bne.n	8002a06 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	4619      	mov	r1, r3
 80029e6:	4610      	mov	r0, r2
 80029e8:	f000 f844 	bl	8002a74 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80029ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80029f0:	f7ff fea0 	bl	8002734 <FLASH_WaitForLastOperation>
 80029f4:	4603      	mov	r3, r0
 80029f6:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80029f8:	4b1d      	ldr	r3, [pc, #116]	; (8002a70 <HAL_FLASHEx_Erase+0xdc>)
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	4a1c      	ldr	r2, [pc, #112]	; (8002a70 <HAL_FLASHEx_Erase+0xdc>)
 80029fe:	f023 0304 	bic.w	r3, r3, #4
 8002a02:	6113      	str	r3, [r2, #16]
 8002a04:	e028      	b.n	8002a58 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	60bb      	str	r3, [r7, #8]
 8002a0c:	e01c      	b.n	8002a48 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	4619      	mov	r1, r3
 8002a16:	68b8      	ldr	r0, [r7, #8]
 8002a18:	f000 f850 	bl	8002abc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a20:	f7ff fe88 	bl	8002734 <FLASH_WaitForLastOperation>
 8002a24:	4603      	mov	r3, r0
 8002a26:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002a28:	4b11      	ldr	r3, [pc, #68]	; (8002a70 <HAL_FLASHEx_Erase+0xdc>)
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	4a10      	ldr	r2, [pc, #64]	; (8002a70 <HAL_FLASHEx_Erase+0xdc>)
 8002a2e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8002a32:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002a34:	7bfb      	ldrb	r3, [r7, #15]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	68ba      	ldr	r2, [r7, #8]
 8002a3e:	601a      	str	r2, [r3, #0]
          break;
 8002a40:	e00a      	b.n	8002a58 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	3301      	adds	r3, #1
 8002a46:	60bb      	str	r3, [r7, #8]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68da      	ldr	r2, [r3, #12]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	4413      	add	r3, r2
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d3da      	bcc.n	8002a0e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002a58:	f000 f878 	bl	8002b4c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002a5c:	4b03      	ldr	r3, [pc, #12]	; (8002a6c <HAL_FLASHEx_Erase+0xd8>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	761a      	strb	r2, [r3, #24]

  return status;
 8002a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	20000bac 	.word	0x20000bac
 8002a70:	40023c00 	.word	0x40023c00

08002a74 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	6039      	str	r1, [r7, #0]
 8002a7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002a80:	4b0d      	ldr	r3, [pc, #52]	; (8002ab8 <FLASH_MassErase+0x44>)
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	4a0c      	ldr	r2, [pc, #48]	; (8002ab8 <FLASH_MassErase+0x44>)
 8002a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002a8c:	4b0a      	ldr	r3, [pc, #40]	; (8002ab8 <FLASH_MassErase+0x44>)
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	4a09      	ldr	r2, [pc, #36]	; (8002ab8 <FLASH_MassErase+0x44>)
 8002a92:	f043 0304 	orr.w	r3, r3, #4
 8002a96:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002a98:	4b07      	ldr	r3, [pc, #28]	; (8002ab8 <FLASH_MassErase+0x44>)
 8002a9a:	691a      	ldr	r2, [r3, #16]
 8002a9c:	79fb      	ldrb	r3, [r7, #7]
 8002a9e:	021b      	lsls	r3, r3, #8
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	4a05      	ldr	r2, [pc, #20]	; (8002ab8 <FLASH_MassErase+0x44>)
 8002aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa8:	6113      	str	r3, [r2, #16]
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	40023c00 	.word	0x40023c00

08002abc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002acc:	78fb      	ldrb	r3, [r7, #3]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d102      	bne.n	8002ad8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	e010      	b.n	8002afa <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002ad8:	78fb      	ldrb	r3, [r7, #3]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d103      	bne.n	8002ae6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002ade:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	e009      	b.n	8002afa <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002ae6:	78fb      	ldrb	r3, [r7, #3]
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d103      	bne.n	8002af4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002aec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	e002      	b.n	8002afa <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002af4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002af8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002afa:	4b13      	ldr	r3, [pc, #76]	; (8002b48 <FLASH_Erase_Sector+0x8c>)
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	4a12      	ldr	r2, [pc, #72]	; (8002b48 <FLASH_Erase_Sector+0x8c>)
 8002b00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b04:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002b06:	4b10      	ldr	r3, [pc, #64]	; (8002b48 <FLASH_Erase_Sector+0x8c>)
 8002b08:	691a      	ldr	r2, [r3, #16]
 8002b0a:	490f      	ldr	r1, [pc, #60]	; (8002b48 <FLASH_Erase_Sector+0x8c>)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002b12:	4b0d      	ldr	r3, [pc, #52]	; (8002b48 <FLASH_Erase_Sector+0x8c>)
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	4a0c      	ldr	r2, [pc, #48]	; (8002b48 <FLASH_Erase_Sector+0x8c>)
 8002b18:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002b1c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002b1e:	4b0a      	ldr	r3, [pc, #40]	; (8002b48 <FLASH_Erase_Sector+0x8c>)
 8002b20:	691a      	ldr	r2, [r3, #16]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	4313      	orrs	r3, r2
 8002b28:	4a07      	ldr	r2, [pc, #28]	; (8002b48 <FLASH_Erase_Sector+0x8c>)
 8002b2a:	f043 0302 	orr.w	r3, r3, #2
 8002b2e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002b30:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <FLASH_Erase_Sector+0x8c>)
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	4a04      	ldr	r2, [pc, #16]	; (8002b48 <FLASH_Erase_Sector+0x8c>)
 8002b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b3a:	6113      	str	r3, [r2, #16]
}
 8002b3c:	bf00      	nop
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	40023c00 	.word	0x40023c00

08002b4c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002b50:	4b20      	ldr	r3, [pc, #128]	; (8002bd4 <FLASH_FlushCaches+0x88>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d017      	beq.n	8002b8c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002b5c:	4b1d      	ldr	r3, [pc, #116]	; (8002bd4 <FLASH_FlushCaches+0x88>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a1c      	ldr	r2, [pc, #112]	; (8002bd4 <FLASH_FlushCaches+0x88>)
 8002b62:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b66:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002b68:	4b1a      	ldr	r3, [pc, #104]	; (8002bd4 <FLASH_FlushCaches+0x88>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a19      	ldr	r2, [pc, #100]	; (8002bd4 <FLASH_FlushCaches+0x88>)
 8002b6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b72:	6013      	str	r3, [r2, #0]
 8002b74:	4b17      	ldr	r3, [pc, #92]	; (8002bd4 <FLASH_FlushCaches+0x88>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a16      	ldr	r2, [pc, #88]	; (8002bd4 <FLASH_FlushCaches+0x88>)
 8002b7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b7e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b80:	4b14      	ldr	r3, [pc, #80]	; (8002bd4 <FLASH_FlushCaches+0x88>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a13      	ldr	r2, [pc, #76]	; (8002bd4 <FLASH_FlushCaches+0x88>)
 8002b86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b8a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002b8c:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <FLASH_FlushCaches+0x88>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d017      	beq.n	8002bc8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002b98:	4b0e      	ldr	r3, [pc, #56]	; (8002bd4 <FLASH_FlushCaches+0x88>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a0d      	ldr	r2, [pc, #52]	; (8002bd4 <FLASH_FlushCaches+0x88>)
 8002b9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ba2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002ba4:	4b0b      	ldr	r3, [pc, #44]	; (8002bd4 <FLASH_FlushCaches+0x88>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a0a      	ldr	r2, [pc, #40]	; (8002bd4 <FLASH_FlushCaches+0x88>)
 8002baa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bae:	6013      	str	r3, [r2, #0]
 8002bb0:	4b08      	ldr	r3, [pc, #32]	; (8002bd4 <FLASH_FlushCaches+0x88>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a07      	ldr	r2, [pc, #28]	; (8002bd4 <FLASH_FlushCaches+0x88>)
 8002bb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bba:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bbc:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <FLASH_FlushCaches+0x88>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a04      	ldr	r2, [pc, #16]	; (8002bd4 <FLASH_FlushCaches+0x88>)
 8002bc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bc6:	6013      	str	r3, [r2, #0]
  }
}
 8002bc8:	bf00      	nop
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	40023c00 	.word	0x40023c00

08002bd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b089      	sub	sp, #36	; 0x24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002be6:	2300      	movs	r3, #0
 8002be8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bea:	2300      	movs	r3, #0
 8002bec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bee:	2300      	movs	r3, #0
 8002bf0:	61fb      	str	r3, [r7, #28]
 8002bf2:	e16b      	b.n	8002ecc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	4013      	ands	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	f040 815a 	bne.w	8002ec6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f003 0303 	and.w	r3, r3, #3
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d005      	beq.n	8002c2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d130      	bne.n	8002c8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	2203      	movs	r2, #3
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	43db      	mvns	r3, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	68da      	ldr	r2, [r3, #12]
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c60:	2201      	movs	r2, #1
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	091b      	lsrs	r3, r3, #4
 8002c76:	f003 0201 	and.w	r2, r3, #1
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f003 0303 	and.w	r3, r3, #3
 8002c94:	2b03      	cmp	r3, #3
 8002c96:	d017      	beq.n	8002cc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	2203      	movs	r2, #3
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4013      	ands	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f003 0303 	and.w	r3, r3, #3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d123      	bne.n	8002d1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	08da      	lsrs	r2, r3, #3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3208      	adds	r2, #8
 8002cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	220f      	movs	r2, #15
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	691a      	ldr	r2, [r3, #16]
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	08da      	lsrs	r2, r3, #3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	3208      	adds	r2, #8
 8002d16:	69b9      	ldr	r1, [r7, #24]
 8002d18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	2203      	movs	r2, #3
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4013      	ands	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f003 0203 	and.w	r2, r3, #3
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 80b4 	beq.w	8002ec6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d5e:	2300      	movs	r3, #0
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	4b60      	ldr	r3, [pc, #384]	; (8002ee4 <HAL_GPIO_Init+0x30c>)
 8002d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d66:	4a5f      	ldr	r2, [pc, #380]	; (8002ee4 <HAL_GPIO_Init+0x30c>)
 8002d68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d6e:	4b5d      	ldr	r3, [pc, #372]	; (8002ee4 <HAL_GPIO_Init+0x30c>)
 8002d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d7a:	4a5b      	ldr	r2, [pc, #364]	; (8002ee8 <HAL_GPIO_Init+0x310>)
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	089b      	lsrs	r3, r3, #2
 8002d80:	3302      	adds	r3, #2
 8002d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	f003 0303 	and.w	r3, r3, #3
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	220f      	movs	r2, #15
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	43db      	mvns	r3, r3
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a52      	ldr	r2, [pc, #328]	; (8002eec <HAL_GPIO_Init+0x314>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d02b      	beq.n	8002dfe <HAL_GPIO_Init+0x226>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a51      	ldr	r2, [pc, #324]	; (8002ef0 <HAL_GPIO_Init+0x318>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d025      	beq.n	8002dfa <HAL_GPIO_Init+0x222>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a50      	ldr	r2, [pc, #320]	; (8002ef4 <HAL_GPIO_Init+0x31c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d01f      	beq.n	8002df6 <HAL_GPIO_Init+0x21e>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a4f      	ldr	r2, [pc, #316]	; (8002ef8 <HAL_GPIO_Init+0x320>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d019      	beq.n	8002df2 <HAL_GPIO_Init+0x21a>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a4e      	ldr	r2, [pc, #312]	; (8002efc <HAL_GPIO_Init+0x324>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d013      	beq.n	8002dee <HAL_GPIO_Init+0x216>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a4d      	ldr	r2, [pc, #308]	; (8002f00 <HAL_GPIO_Init+0x328>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d00d      	beq.n	8002dea <HAL_GPIO_Init+0x212>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a4c      	ldr	r2, [pc, #304]	; (8002f04 <HAL_GPIO_Init+0x32c>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d007      	beq.n	8002de6 <HAL_GPIO_Init+0x20e>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a4b      	ldr	r2, [pc, #300]	; (8002f08 <HAL_GPIO_Init+0x330>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d101      	bne.n	8002de2 <HAL_GPIO_Init+0x20a>
 8002dde:	2307      	movs	r3, #7
 8002de0:	e00e      	b.n	8002e00 <HAL_GPIO_Init+0x228>
 8002de2:	2308      	movs	r3, #8
 8002de4:	e00c      	b.n	8002e00 <HAL_GPIO_Init+0x228>
 8002de6:	2306      	movs	r3, #6
 8002de8:	e00a      	b.n	8002e00 <HAL_GPIO_Init+0x228>
 8002dea:	2305      	movs	r3, #5
 8002dec:	e008      	b.n	8002e00 <HAL_GPIO_Init+0x228>
 8002dee:	2304      	movs	r3, #4
 8002df0:	e006      	b.n	8002e00 <HAL_GPIO_Init+0x228>
 8002df2:	2303      	movs	r3, #3
 8002df4:	e004      	b.n	8002e00 <HAL_GPIO_Init+0x228>
 8002df6:	2302      	movs	r3, #2
 8002df8:	e002      	b.n	8002e00 <HAL_GPIO_Init+0x228>
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e000      	b.n	8002e00 <HAL_GPIO_Init+0x228>
 8002dfe:	2300      	movs	r3, #0
 8002e00:	69fa      	ldr	r2, [r7, #28]
 8002e02:	f002 0203 	and.w	r2, r2, #3
 8002e06:	0092      	lsls	r2, r2, #2
 8002e08:	4093      	lsls	r3, r2
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e10:	4935      	ldr	r1, [pc, #212]	; (8002ee8 <HAL_GPIO_Init+0x310>)
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	089b      	lsrs	r3, r3, #2
 8002e16:	3302      	adds	r3, #2
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e1e:	4b3b      	ldr	r3, [pc, #236]	; (8002f0c <HAL_GPIO_Init+0x334>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	43db      	mvns	r3, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e42:	4a32      	ldr	r2, [pc, #200]	; (8002f0c <HAL_GPIO_Init+0x334>)
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e48:	4b30      	ldr	r3, [pc, #192]	; (8002f0c <HAL_GPIO_Init+0x334>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	43db      	mvns	r3, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4013      	ands	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d003      	beq.n	8002e6c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e6c:	4a27      	ldr	r2, [pc, #156]	; (8002f0c <HAL_GPIO_Init+0x334>)
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e72:	4b26      	ldr	r3, [pc, #152]	; (8002f0c <HAL_GPIO_Init+0x334>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e96:	4a1d      	ldr	r2, [pc, #116]	; (8002f0c <HAL_GPIO_Init+0x334>)
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e9c:	4b1b      	ldr	r3, [pc, #108]	; (8002f0c <HAL_GPIO_Init+0x334>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d003      	beq.n	8002ec0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ec0:	4a12      	ldr	r2, [pc, #72]	; (8002f0c <HAL_GPIO_Init+0x334>)
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	61fb      	str	r3, [r7, #28]
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	2b0f      	cmp	r3, #15
 8002ed0:	f67f ae90 	bls.w	8002bf4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ed4:	bf00      	nop
 8002ed6:	bf00      	nop
 8002ed8:	3724      	adds	r7, #36	; 0x24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	40013800 	.word	0x40013800
 8002eec:	40020000 	.word	0x40020000
 8002ef0:	40020400 	.word	0x40020400
 8002ef4:	40020800 	.word	0x40020800
 8002ef8:	40020c00 	.word	0x40020c00
 8002efc:	40021000 	.word	0x40021000
 8002f00:	40021400 	.word	0x40021400
 8002f04:	40021800 	.word	0x40021800
 8002f08:	40021c00 	.word	0x40021c00
 8002f0c:	40013c00 	.word	0x40013c00

08002f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	807b      	strh	r3, [r7, #2]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f20:	787b      	ldrb	r3, [r7, #1]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f26:	887a      	ldrh	r2, [r7, #2]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f2c:	e003      	b.n	8002f36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f2e:	887b      	ldrh	r3, [r7, #2]
 8002f30:	041a      	lsls	r2, r3, #16
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	619a      	str	r2, [r3, #24]
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
	...

08002f44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e264      	b.n	8003420 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d075      	beq.n	800304e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f62:	4ba3      	ldr	r3, [pc, #652]	; (80031f0 <HAL_RCC_OscConfig+0x2ac>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 030c 	and.w	r3, r3, #12
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d00c      	beq.n	8002f88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f6e:	4ba0      	ldr	r3, [pc, #640]	; (80031f0 <HAL_RCC_OscConfig+0x2ac>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f76:	2b08      	cmp	r3, #8
 8002f78:	d112      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f7a:	4b9d      	ldr	r3, [pc, #628]	; (80031f0 <HAL_RCC_OscConfig+0x2ac>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f86:	d10b      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f88:	4b99      	ldr	r3, [pc, #612]	; (80031f0 <HAL_RCC_OscConfig+0x2ac>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d05b      	beq.n	800304c <HAL_RCC_OscConfig+0x108>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d157      	bne.n	800304c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e23f      	b.n	8003420 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fa8:	d106      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x74>
 8002faa:	4b91      	ldr	r3, [pc, #580]	; (80031f0 <HAL_RCC_OscConfig+0x2ac>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a90      	ldr	r2, [pc, #576]	; (80031f0 <HAL_RCC_OscConfig+0x2ac>)
 8002fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb4:	6013      	str	r3, [r2, #0]
 8002fb6:	e01d      	b.n	8002ff4 <HAL_RCC_OscConfig+0xb0>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fc0:	d10c      	bne.n	8002fdc <HAL_RCC_OscConfig+0x98>
 8002fc2:	4b8b      	ldr	r3, [pc, #556]	; (80031f0 <HAL_RCC_OscConfig+0x2ac>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a8a      	ldr	r2, [pc, #552]	; (80031f0 <HAL_RCC_OscConfig+0x2ac>)
 8002fc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fcc:	6013      	str	r3, [r2, #0]
 8002fce:	4b88      	ldr	r3, [pc, #544]	; (80031f0 <HAL_RCC_OscConfig+0x2ac>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a87      	ldr	r2, [pc, #540]	; (80031f0 <HAL_RCC_OscConfig+0x2ac>)
 8002fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	e00b      	b.n	8002ff4 <HAL_RCC_OscConfig+0xb0>
 8002fdc:	4b84      	ldr	r3, [pc, #528]	; (80031f0 <HAL_RCC_OscConfig+0x2ac>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a83      	ldr	r2, [pc, #524]	; (80031f0 <HAL_RCC_OscConfig+0x2ac>)
 8002fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fe6:	6013      	str	r3, [r2, #0]
 8002fe8:	4b81      	ldr	r3, [pc, #516]	; (80031f0 <HAL_RCC_OscConfig+0x2ac>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a80      	ldr	r2, [pc, #512]	; (80031f0 <HAL_RCC_OscConfig+0x2ac>)
 8002fee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ff2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d013      	beq.n	8003024 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffc:	f7fe fdc4 	bl	8001b88 <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003004:	f7fe fdc0 	bl	8001b88 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b64      	cmp	r3, #100	; 0x64
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e204      	b.n	8003420 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003016:	4b76      	ldr	r3, [pc, #472]	; (80031f0 <HAL_RCC_OscConfig+0x2ac>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0f0      	beq.n	8003004 <HAL_RCC_OscConfig+0xc0>
 8003022:	e014      	b.n	800304e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003024:	f7fe fdb0 	bl	8001b88 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800302c:	f7fe fdac 	bl	8001b88 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b64      	cmp	r3, #100	; 0x64
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e1f0      	b.n	8003420 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800303e:	4b6c      	ldr	r3, [pc, #432]	; (80031f0 <HAL_RCC_OscConfig+0x2ac>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f0      	bne.n	800302c <HAL_RCC_OscConfig+0xe8>
 800304a:	e000      	b.n	800304e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800304c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d063      	beq.n	8003122 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800305a:	4b65      	ldr	r3, [pc, #404]	; (80031f0 <HAL_RCC_OscConfig+0x2ac>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 030c 	and.w	r3, r3, #12
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00b      	beq.n	800307e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003066:	4b62      	ldr	r3, [pc, #392]	; (80031f0 <HAL_RCC_OscConfig+0x2ac>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800306e:	2b08      	cmp	r3, #8
 8003070:	d11c      	bne.n	80030ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003072:	4b5f      	ldr	r3, [pc, #380]	; (80031f0 <HAL_RCC_OscConfig+0x2ac>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d116      	bne.n	80030ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800307e:	4b5c      	ldr	r3, [pc, #368]	; (80031f0 <HAL_RCC_OscConfig+0x2ac>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d005      	beq.n	8003096 <HAL_RCC_OscConfig+0x152>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d001      	beq.n	8003096 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e1c4      	b.n	8003420 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003096:	4b56      	ldr	r3, [pc, #344]	; (80031f0 <HAL_RCC_OscConfig+0x2ac>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	4952      	ldr	r1, [pc, #328]	; (80031f0 <HAL_RCC_OscConfig+0x2ac>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030aa:	e03a      	b.n	8003122 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d020      	beq.n	80030f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030b4:	4b4f      	ldr	r3, [pc, #316]	; (80031f4 <HAL_RCC_OscConfig+0x2b0>)
 80030b6:	2201      	movs	r2, #1
 80030b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ba:	f7fe fd65 	bl	8001b88 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c0:	e008      	b.n	80030d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030c2:	f7fe fd61 	bl	8001b88 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e1a5      	b.n	8003420 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d4:	4b46      	ldr	r3, [pc, #280]	; (80031f0 <HAL_RCC_OscConfig+0x2ac>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0f0      	beq.n	80030c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e0:	4b43      	ldr	r3, [pc, #268]	; (80031f0 <HAL_RCC_OscConfig+0x2ac>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	4940      	ldr	r1, [pc, #256]	; (80031f0 <HAL_RCC_OscConfig+0x2ac>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	600b      	str	r3, [r1, #0]
 80030f4:	e015      	b.n	8003122 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030f6:	4b3f      	ldr	r3, [pc, #252]	; (80031f4 <HAL_RCC_OscConfig+0x2b0>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fc:	f7fe fd44 	bl	8001b88 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003104:	f7fe fd40 	bl	8001b88 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e184      	b.n	8003420 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003116:	4b36      	ldr	r3, [pc, #216]	; (80031f0 <HAL_RCC_OscConfig+0x2ac>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1f0      	bne.n	8003104 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0308 	and.w	r3, r3, #8
 800312a:	2b00      	cmp	r3, #0
 800312c:	d030      	beq.n	8003190 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d016      	beq.n	8003164 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003136:	4b30      	ldr	r3, [pc, #192]	; (80031f8 <HAL_RCC_OscConfig+0x2b4>)
 8003138:	2201      	movs	r2, #1
 800313a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313c:	f7fe fd24 	bl	8001b88 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003144:	f7fe fd20 	bl	8001b88 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e164      	b.n	8003420 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003156:	4b26      	ldr	r3, [pc, #152]	; (80031f0 <HAL_RCC_OscConfig+0x2ac>)
 8003158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0f0      	beq.n	8003144 <HAL_RCC_OscConfig+0x200>
 8003162:	e015      	b.n	8003190 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003164:	4b24      	ldr	r3, [pc, #144]	; (80031f8 <HAL_RCC_OscConfig+0x2b4>)
 8003166:	2200      	movs	r2, #0
 8003168:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800316a:	f7fe fd0d 	bl	8001b88 <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003172:	f7fe fd09 	bl	8001b88 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e14d      	b.n	8003420 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003184:	4b1a      	ldr	r3, [pc, #104]	; (80031f0 <HAL_RCC_OscConfig+0x2ac>)
 8003186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1f0      	bne.n	8003172 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 80a0 	beq.w	80032de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800319e:	2300      	movs	r3, #0
 80031a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031a2:	4b13      	ldr	r3, [pc, #76]	; (80031f0 <HAL_RCC_OscConfig+0x2ac>)
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10f      	bne.n	80031ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ae:	2300      	movs	r3, #0
 80031b0:	60bb      	str	r3, [r7, #8]
 80031b2:	4b0f      	ldr	r3, [pc, #60]	; (80031f0 <HAL_RCC_OscConfig+0x2ac>)
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	4a0e      	ldr	r2, [pc, #56]	; (80031f0 <HAL_RCC_OscConfig+0x2ac>)
 80031b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031bc:	6413      	str	r3, [r2, #64]	; 0x40
 80031be:	4b0c      	ldr	r3, [pc, #48]	; (80031f0 <HAL_RCC_OscConfig+0x2ac>)
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c6:	60bb      	str	r3, [r7, #8]
 80031c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ca:	2301      	movs	r3, #1
 80031cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ce:	4b0b      	ldr	r3, [pc, #44]	; (80031fc <HAL_RCC_OscConfig+0x2b8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d121      	bne.n	800321e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031da:	4b08      	ldr	r3, [pc, #32]	; (80031fc <HAL_RCC_OscConfig+0x2b8>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a07      	ldr	r2, [pc, #28]	; (80031fc <HAL_RCC_OscConfig+0x2b8>)
 80031e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031e6:	f7fe fccf 	bl	8001b88 <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ec:	e011      	b.n	8003212 <HAL_RCC_OscConfig+0x2ce>
 80031ee:	bf00      	nop
 80031f0:	40023800 	.word	0x40023800
 80031f4:	42470000 	.word	0x42470000
 80031f8:	42470e80 	.word	0x42470e80
 80031fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003200:	f7fe fcc2 	bl	8001b88 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e106      	b.n	8003420 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003212:	4b85      	ldr	r3, [pc, #532]	; (8003428 <HAL_RCC_OscConfig+0x4e4>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0f0      	beq.n	8003200 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d106      	bne.n	8003234 <HAL_RCC_OscConfig+0x2f0>
 8003226:	4b81      	ldr	r3, [pc, #516]	; (800342c <HAL_RCC_OscConfig+0x4e8>)
 8003228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322a:	4a80      	ldr	r2, [pc, #512]	; (800342c <HAL_RCC_OscConfig+0x4e8>)
 800322c:	f043 0301 	orr.w	r3, r3, #1
 8003230:	6713      	str	r3, [r2, #112]	; 0x70
 8003232:	e01c      	b.n	800326e <HAL_RCC_OscConfig+0x32a>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	2b05      	cmp	r3, #5
 800323a:	d10c      	bne.n	8003256 <HAL_RCC_OscConfig+0x312>
 800323c:	4b7b      	ldr	r3, [pc, #492]	; (800342c <HAL_RCC_OscConfig+0x4e8>)
 800323e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003240:	4a7a      	ldr	r2, [pc, #488]	; (800342c <HAL_RCC_OscConfig+0x4e8>)
 8003242:	f043 0304 	orr.w	r3, r3, #4
 8003246:	6713      	str	r3, [r2, #112]	; 0x70
 8003248:	4b78      	ldr	r3, [pc, #480]	; (800342c <HAL_RCC_OscConfig+0x4e8>)
 800324a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324c:	4a77      	ldr	r2, [pc, #476]	; (800342c <HAL_RCC_OscConfig+0x4e8>)
 800324e:	f043 0301 	orr.w	r3, r3, #1
 8003252:	6713      	str	r3, [r2, #112]	; 0x70
 8003254:	e00b      	b.n	800326e <HAL_RCC_OscConfig+0x32a>
 8003256:	4b75      	ldr	r3, [pc, #468]	; (800342c <HAL_RCC_OscConfig+0x4e8>)
 8003258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325a:	4a74      	ldr	r2, [pc, #464]	; (800342c <HAL_RCC_OscConfig+0x4e8>)
 800325c:	f023 0301 	bic.w	r3, r3, #1
 8003260:	6713      	str	r3, [r2, #112]	; 0x70
 8003262:	4b72      	ldr	r3, [pc, #456]	; (800342c <HAL_RCC_OscConfig+0x4e8>)
 8003264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003266:	4a71      	ldr	r2, [pc, #452]	; (800342c <HAL_RCC_OscConfig+0x4e8>)
 8003268:	f023 0304 	bic.w	r3, r3, #4
 800326c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d015      	beq.n	80032a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003276:	f7fe fc87 	bl	8001b88 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800327c:	e00a      	b.n	8003294 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800327e:	f7fe fc83 	bl	8001b88 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	f241 3288 	movw	r2, #5000	; 0x1388
 800328c:	4293      	cmp	r3, r2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e0c5      	b.n	8003420 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003294:	4b65      	ldr	r3, [pc, #404]	; (800342c <HAL_RCC_OscConfig+0x4e8>)
 8003296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0ee      	beq.n	800327e <HAL_RCC_OscConfig+0x33a>
 80032a0:	e014      	b.n	80032cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032a2:	f7fe fc71 	bl	8001b88 <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032a8:	e00a      	b.n	80032c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032aa:	f7fe fc6d 	bl	8001b88 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e0af      	b.n	8003420 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032c0:	4b5a      	ldr	r3, [pc, #360]	; (800342c <HAL_RCC_OscConfig+0x4e8>)
 80032c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1ee      	bne.n	80032aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032cc:	7dfb      	ldrb	r3, [r7, #23]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d105      	bne.n	80032de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032d2:	4b56      	ldr	r3, [pc, #344]	; (800342c <HAL_RCC_OscConfig+0x4e8>)
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	4a55      	ldr	r2, [pc, #340]	; (800342c <HAL_RCC_OscConfig+0x4e8>)
 80032d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 809b 	beq.w	800341e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032e8:	4b50      	ldr	r3, [pc, #320]	; (800342c <HAL_RCC_OscConfig+0x4e8>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 030c 	and.w	r3, r3, #12
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d05c      	beq.n	80033ae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d141      	bne.n	8003380 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032fc:	4b4c      	ldr	r3, [pc, #304]	; (8003430 <HAL_RCC_OscConfig+0x4ec>)
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003302:	f7fe fc41 	bl	8001b88 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003308:	e008      	b.n	800331c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800330a:	f7fe fc3d 	bl	8001b88 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e081      	b.n	8003420 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800331c:	4b43      	ldr	r3, [pc, #268]	; (800342c <HAL_RCC_OscConfig+0x4e8>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1f0      	bne.n	800330a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	69da      	ldr	r2, [r3, #28]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	431a      	orrs	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	019b      	lsls	r3, r3, #6
 8003338:	431a      	orrs	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333e:	085b      	lsrs	r3, r3, #1
 8003340:	3b01      	subs	r3, #1
 8003342:	041b      	lsls	r3, r3, #16
 8003344:	431a      	orrs	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334a:	061b      	lsls	r3, r3, #24
 800334c:	4937      	ldr	r1, [pc, #220]	; (800342c <HAL_RCC_OscConfig+0x4e8>)
 800334e:	4313      	orrs	r3, r2
 8003350:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003352:	4b37      	ldr	r3, [pc, #220]	; (8003430 <HAL_RCC_OscConfig+0x4ec>)
 8003354:	2201      	movs	r2, #1
 8003356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003358:	f7fe fc16 	bl	8001b88 <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003360:	f7fe fc12 	bl	8001b88 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e056      	b.n	8003420 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003372:	4b2e      	ldr	r3, [pc, #184]	; (800342c <HAL_RCC_OscConfig+0x4e8>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d0f0      	beq.n	8003360 <HAL_RCC_OscConfig+0x41c>
 800337e:	e04e      	b.n	800341e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003380:	4b2b      	ldr	r3, [pc, #172]	; (8003430 <HAL_RCC_OscConfig+0x4ec>)
 8003382:	2200      	movs	r2, #0
 8003384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003386:	f7fe fbff 	bl	8001b88 <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800338c:	e008      	b.n	80033a0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800338e:	f7fe fbfb 	bl	8001b88 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e03f      	b.n	8003420 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033a0:	4b22      	ldr	r3, [pc, #136]	; (800342c <HAL_RCC_OscConfig+0x4e8>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1f0      	bne.n	800338e <HAL_RCC_OscConfig+0x44a>
 80033ac:	e037      	b.n	800341e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d101      	bne.n	80033ba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e032      	b.n	8003420 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033ba:	4b1c      	ldr	r3, [pc, #112]	; (800342c <HAL_RCC_OscConfig+0x4e8>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d028      	beq.n	800341a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d121      	bne.n	800341a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d11a      	bne.n	800341a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033ea:	4013      	ands	r3, r2
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033f0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d111      	bne.n	800341a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	085b      	lsrs	r3, r3, #1
 8003402:	3b01      	subs	r3, #1
 8003404:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003406:	429a      	cmp	r2, r3
 8003408:	d107      	bne.n	800341a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003414:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003416:	429a      	cmp	r2, r3
 8003418:	d001      	beq.n	800341e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e000      	b.n	8003420 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3718      	adds	r7, #24
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	40007000 	.word	0x40007000
 800342c:	40023800 	.word	0x40023800
 8003430:	42470060 	.word	0x42470060

08003434 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e0cc      	b.n	80035e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003448:	4b68      	ldr	r3, [pc, #416]	; (80035ec <HAL_RCC_ClockConfig+0x1b8>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	429a      	cmp	r2, r3
 8003454:	d90c      	bls.n	8003470 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003456:	4b65      	ldr	r3, [pc, #404]	; (80035ec <HAL_RCC_ClockConfig+0x1b8>)
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800345e:	4b63      	ldr	r3, [pc, #396]	; (80035ec <HAL_RCC_ClockConfig+0x1b8>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	429a      	cmp	r2, r3
 800346a:	d001      	beq.n	8003470 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e0b8      	b.n	80035e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d020      	beq.n	80034be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0304 	and.w	r3, r3, #4
 8003484:	2b00      	cmp	r3, #0
 8003486:	d005      	beq.n	8003494 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003488:	4b59      	ldr	r3, [pc, #356]	; (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	4a58      	ldr	r2, [pc, #352]	; (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 800348e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003492:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0308 	and.w	r3, r3, #8
 800349c:	2b00      	cmp	r3, #0
 800349e:	d005      	beq.n	80034ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034a0:	4b53      	ldr	r3, [pc, #332]	; (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	4a52      	ldr	r2, [pc, #328]	; (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 80034a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034ac:	4b50      	ldr	r3, [pc, #320]	; (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	494d      	ldr	r1, [pc, #308]	; (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d044      	beq.n	8003554 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d107      	bne.n	80034e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034d2:	4b47      	ldr	r3, [pc, #284]	; (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d119      	bne.n	8003512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e07f      	b.n	80035e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d003      	beq.n	80034f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034ee:	2b03      	cmp	r3, #3
 80034f0:	d107      	bne.n	8003502 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034f2:	4b3f      	ldr	r3, [pc, #252]	; (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d109      	bne.n	8003512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e06f      	b.n	80035e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003502:	4b3b      	ldr	r3, [pc, #236]	; (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e067      	b.n	80035e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003512:	4b37      	ldr	r3, [pc, #220]	; (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f023 0203 	bic.w	r2, r3, #3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	4934      	ldr	r1, [pc, #208]	; (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003520:	4313      	orrs	r3, r2
 8003522:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003524:	f7fe fb30 	bl	8001b88 <HAL_GetTick>
 8003528:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800352a:	e00a      	b.n	8003542 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800352c:	f7fe fb2c 	bl	8001b88 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	f241 3288 	movw	r2, #5000	; 0x1388
 800353a:	4293      	cmp	r3, r2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e04f      	b.n	80035e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003542:	4b2b      	ldr	r3, [pc, #172]	; (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 020c 	and.w	r2, r3, #12
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	429a      	cmp	r2, r3
 8003552:	d1eb      	bne.n	800352c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003554:	4b25      	ldr	r3, [pc, #148]	; (80035ec <HAL_RCC_ClockConfig+0x1b8>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0307 	and.w	r3, r3, #7
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d20c      	bcs.n	800357c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003562:	4b22      	ldr	r3, [pc, #136]	; (80035ec <HAL_RCC_ClockConfig+0x1b8>)
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800356a:	4b20      	ldr	r3, [pc, #128]	; (80035ec <HAL_RCC_ClockConfig+0x1b8>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0307 	and.w	r3, r3, #7
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	429a      	cmp	r2, r3
 8003576:	d001      	beq.n	800357c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e032      	b.n	80035e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	2b00      	cmp	r3, #0
 8003586:	d008      	beq.n	800359a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003588:	4b19      	ldr	r3, [pc, #100]	; (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	4916      	ldr	r1, [pc, #88]	; (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003596:	4313      	orrs	r3, r2
 8003598:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0308 	and.w	r3, r3, #8
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d009      	beq.n	80035ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035a6:	4b12      	ldr	r3, [pc, #72]	; (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	490e      	ldr	r1, [pc, #56]	; (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035ba:	f000 f821 	bl	8003600 <HAL_RCC_GetSysClockFreq>
 80035be:	4602      	mov	r2, r0
 80035c0:	4b0b      	ldr	r3, [pc, #44]	; (80035f0 <HAL_RCC_ClockConfig+0x1bc>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	091b      	lsrs	r3, r3, #4
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	490a      	ldr	r1, [pc, #40]	; (80035f4 <HAL_RCC_ClockConfig+0x1c0>)
 80035cc:	5ccb      	ldrb	r3, [r1, r3]
 80035ce:	fa22 f303 	lsr.w	r3, r2, r3
 80035d2:	4a09      	ldr	r2, [pc, #36]	; (80035f8 <HAL_RCC_ClockConfig+0x1c4>)
 80035d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035d6:	4b09      	ldr	r3, [pc, #36]	; (80035fc <HAL_RCC_ClockConfig+0x1c8>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4618      	mov	r0, r3
 80035dc:	f7fe fa90 	bl	8001b00 <HAL_InitTick>

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	40023c00 	.word	0x40023c00
 80035f0:	40023800 	.word	0x40023800
 80035f4:	0800e394 	.word	0x0800e394
 80035f8:	20000000 	.word	0x20000000
 80035fc:	20000004 	.word	0x20000004

08003600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003600:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003604:	b084      	sub	sp, #16
 8003606:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003608:	2300      	movs	r3, #0
 800360a:	607b      	str	r3, [r7, #4]
 800360c:	2300      	movs	r3, #0
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	2300      	movs	r3, #0
 8003612:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003614:	2300      	movs	r3, #0
 8003616:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003618:	4b67      	ldr	r3, [pc, #412]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f003 030c 	and.w	r3, r3, #12
 8003620:	2b08      	cmp	r3, #8
 8003622:	d00d      	beq.n	8003640 <HAL_RCC_GetSysClockFreq+0x40>
 8003624:	2b08      	cmp	r3, #8
 8003626:	f200 80bd 	bhi.w	80037a4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800362a:	2b00      	cmp	r3, #0
 800362c:	d002      	beq.n	8003634 <HAL_RCC_GetSysClockFreq+0x34>
 800362e:	2b04      	cmp	r3, #4
 8003630:	d003      	beq.n	800363a <HAL_RCC_GetSysClockFreq+0x3a>
 8003632:	e0b7      	b.n	80037a4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003634:	4b61      	ldr	r3, [pc, #388]	; (80037bc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003636:	60bb      	str	r3, [r7, #8]
       break;
 8003638:	e0b7      	b.n	80037aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800363a:	4b61      	ldr	r3, [pc, #388]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800363c:	60bb      	str	r3, [r7, #8]
      break;
 800363e:	e0b4      	b.n	80037aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003640:	4b5d      	ldr	r3, [pc, #372]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003648:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800364a:	4b5b      	ldr	r3, [pc, #364]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d04d      	beq.n	80036f2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003656:	4b58      	ldr	r3, [pc, #352]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	099b      	lsrs	r3, r3, #6
 800365c:	461a      	mov	r2, r3
 800365e:	f04f 0300 	mov.w	r3, #0
 8003662:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003666:	f04f 0100 	mov.w	r1, #0
 800366a:	ea02 0800 	and.w	r8, r2, r0
 800366e:	ea03 0901 	and.w	r9, r3, r1
 8003672:	4640      	mov	r0, r8
 8003674:	4649      	mov	r1, r9
 8003676:	f04f 0200 	mov.w	r2, #0
 800367a:	f04f 0300 	mov.w	r3, #0
 800367e:	014b      	lsls	r3, r1, #5
 8003680:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003684:	0142      	lsls	r2, r0, #5
 8003686:	4610      	mov	r0, r2
 8003688:	4619      	mov	r1, r3
 800368a:	ebb0 0008 	subs.w	r0, r0, r8
 800368e:	eb61 0109 	sbc.w	r1, r1, r9
 8003692:	f04f 0200 	mov.w	r2, #0
 8003696:	f04f 0300 	mov.w	r3, #0
 800369a:	018b      	lsls	r3, r1, #6
 800369c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80036a0:	0182      	lsls	r2, r0, #6
 80036a2:	1a12      	subs	r2, r2, r0
 80036a4:	eb63 0301 	sbc.w	r3, r3, r1
 80036a8:	f04f 0000 	mov.w	r0, #0
 80036ac:	f04f 0100 	mov.w	r1, #0
 80036b0:	00d9      	lsls	r1, r3, #3
 80036b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036b6:	00d0      	lsls	r0, r2, #3
 80036b8:	4602      	mov	r2, r0
 80036ba:	460b      	mov	r3, r1
 80036bc:	eb12 0208 	adds.w	r2, r2, r8
 80036c0:	eb43 0309 	adc.w	r3, r3, r9
 80036c4:	f04f 0000 	mov.w	r0, #0
 80036c8:	f04f 0100 	mov.w	r1, #0
 80036cc:	0259      	lsls	r1, r3, #9
 80036ce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80036d2:	0250      	lsls	r0, r2, #9
 80036d4:	4602      	mov	r2, r0
 80036d6:	460b      	mov	r3, r1
 80036d8:	4610      	mov	r0, r2
 80036da:	4619      	mov	r1, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	461a      	mov	r2, r3
 80036e0:	f04f 0300 	mov.w	r3, #0
 80036e4:	f7fd fad0 	bl	8000c88 <__aeabi_uldivmod>
 80036e8:	4602      	mov	r2, r0
 80036ea:	460b      	mov	r3, r1
 80036ec:	4613      	mov	r3, r2
 80036ee:	60fb      	str	r3, [r7, #12]
 80036f0:	e04a      	b.n	8003788 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036f2:	4b31      	ldr	r3, [pc, #196]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	099b      	lsrs	r3, r3, #6
 80036f8:	461a      	mov	r2, r3
 80036fa:	f04f 0300 	mov.w	r3, #0
 80036fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003702:	f04f 0100 	mov.w	r1, #0
 8003706:	ea02 0400 	and.w	r4, r2, r0
 800370a:	ea03 0501 	and.w	r5, r3, r1
 800370e:	4620      	mov	r0, r4
 8003710:	4629      	mov	r1, r5
 8003712:	f04f 0200 	mov.w	r2, #0
 8003716:	f04f 0300 	mov.w	r3, #0
 800371a:	014b      	lsls	r3, r1, #5
 800371c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003720:	0142      	lsls	r2, r0, #5
 8003722:	4610      	mov	r0, r2
 8003724:	4619      	mov	r1, r3
 8003726:	1b00      	subs	r0, r0, r4
 8003728:	eb61 0105 	sbc.w	r1, r1, r5
 800372c:	f04f 0200 	mov.w	r2, #0
 8003730:	f04f 0300 	mov.w	r3, #0
 8003734:	018b      	lsls	r3, r1, #6
 8003736:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800373a:	0182      	lsls	r2, r0, #6
 800373c:	1a12      	subs	r2, r2, r0
 800373e:	eb63 0301 	sbc.w	r3, r3, r1
 8003742:	f04f 0000 	mov.w	r0, #0
 8003746:	f04f 0100 	mov.w	r1, #0
 800374a:	00d9      	lsls	r1, r3, #3
 800374c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003750:	00d0      	lsls	r0, r2, #3
 8003752:	4602      	mov	r2, r0
 8003754:	460b      	mov	r3, r1
 8003756:	1912      	adds	r2, r2, r4
 8003758:	eb45 0303 	adc.w	r3, r5, r3
 800375c:	f04f 0000 	mov.w	r0, #0
 8003760:	f04f 0100 	mov.w	r1, #0
 8003764:	0299      	lsls	r1, r3, #10
 8003766:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800376a:	0290      	lsls	r0, r2, #10
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	4610      	mov	r0, r2
 8003772:	4619      	mov	r1, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	461a      	mov	r2, r3
 8003778:	f04f 0300 	mov.w	r3, #0
 800377c:	f7fd fa84 	bl	8000c88 <__aeabi_uldivmod>
 8003780:	4602      	mov	r2, r0
 8003782:	460b      	mov	r3, r1
 8003784:	4613      	mov	r3, r2
 8003786:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003788:	4b0b      	ldr	r3, [pc, #44]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	0c1b      	lsrs	r3, r3, #16
 800378e:	f003 0303 	and.w	r3, r3, #3
 8003792:	3301      	adds	r3, #1
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a0:	60bb      	str	r3, [r7, #8]
      break;
 80037a2:	e002      	b.n	80037aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037a4:	4b05      	ldr	r3, [pc, #20]	; (80037bc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80037a6:	60bb      	str	r3, [r7, #8]
      break;
 80037a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037aa:	68bb      	ldr	r3, [r7, #8]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80037b6:	bf00      	nop
 80037b8:	40023800 	.word	0x40023800
 80037bc:	00f42400 	.word	0x00f42400
 80037c0:	007a1200 	.word	0x007a1200

080037c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037c8:	4b03      	ldr	r3, [pc, #12]	; (80037d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80037ca:	681b      	ldr	r3, [r3, #0]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	20000000 	.word	0x20000000

080037dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037e0:	f7ff fff0 	bl	80037c4 <HAL_RCC_GetHCLKFreq>
 80037e4:	4602      	mov	r2, r0
 80037e6:	4b05      	ldr	r3, [pc, #20]	; (80037fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	0a9b      	lsrs	r3, r3, #10
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	4903      	ldr	r1, [pc, #12]	; (8003800 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037f2:	5ccb      	ldrb	r3, [r1, r3]
 80037f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40023800 	.word	0x40023800
 8003800:	0800e3a4 	.word	0x0800e3a4

08003804 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003808:	f7ff ffdc 	bl	80037c4 <HAL_RCC_GetHCLKFreq>
 800380c:	4602      	mov	r2, r0
 800380e:	4b05      	ldr	r3, [pc, #20]	; (8003824 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	0b5b      	lsrs	r3, r3, #13
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	4903      	ldr	r1, [pc, #12]	; (8003828 <HAL_RCC_GetPCLK2Freq+0x24>)
 800381a:	5ccb      	ldrb	r3, [r1, r3]
 800381c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003820:	4618      	mov	r0, r3
 8003822:	bd80      	pop	{r7, pc}
 8003824:	40023800 	.word	0x40023800
 8003828:	0800e3a4 	.word	0x0800e3a4

0800382c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e03f      	b.n	80038be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d106      	bne.n	8003858 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7fd fdc2 	bl	80013dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2224      	movs	r2, #36	; 0x24
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800386e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f001 f83f 	bl	80048f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	691a      	ldr	r2, [r3, #16]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003884:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695a      	ldr	r2, [r3, #20]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003894:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68da      	ldr	r2, [r3, #12]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2220      	movs	r2, #32
 80038b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b08a      	sub	sp, #40	; 0x28
 80038ca:	af02      	add	r7, sp, #8
 80038cc:	60f8      	str	r0, [r7, #12]
 80038ce:	60b9      	str	r1, [r7, #8]
 80038d0:	603b      	str	r3, [r7, #0]
 80038d2:	4613      	mov	r3, r2
 80038d4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b20      	cmp	r3, #32
 80038e4:	d17c      	bne.n	80039e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d002      	beq.n	80038f2 <HAL_UART_Transmit+0x2c>
 80038ec:	88fb      	ldrh	r3, [r7, #6]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e075      	b.n	80039e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d101      	bne.n	8003904 <HAL_UART_Transmit+0x3e>
 8003900:	2302      	movs	r3, #2
 8003902:	e06e      	b.n	80039e2 <HAL_UART_Transmit+0x11c>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2221      	movs	r2, #33	; 0x21
 8003916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800391a:	f7fe f935 	bl	8001b88 <HAL_GetTick>
 800391e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	88fa      	ldrh	r2, [r7, #6]
 8003924:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	88fa      	ldrh	r2, [r7, #6]
 800392a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003934:	d108      	bne.n	8003948 <HAL_UART_Transmit+0x82>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d104      	bne.n	8003948 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800393e:	2300      	movs	r3, #0
 8003940:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	61bb      	str	r3, [r7, #24]
 8003946:	e003      	b.n	8003950 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800394c:	2300      	movs	r3, #0
 800394e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003958:	e02a      	b.n	80039b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	2200      	movs	r2, #0
 8003962:	2180      	movs	r1, #128	; 0x80
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f000 fcfa 	bl	800435e <UART_WaitOnFlagUntilTimeout>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e036      	b.n	80039e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10b      	bne.n	8003992 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	881b      	ldrh	r3, [r3, #0]
 800397e:	461a      	mov	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003988:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	3302      	adds	r3, #2
 800398e:	61bb      	str	r3, [r7, #24]
 8003990:	e007      	b.n	80039a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	781a      	ldrb	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	3301      	adds	r3, #1
 80039a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	3b01      	subs	r3, #1
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1cf      	bne.n	800395a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	2200      	movs	r2, #0
 80039c2:	2140      	movs	r1, #64	; 0x40
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 fcca 	bl	800435e <UART_WaitOnFlagUntilTimeout>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e006      	b.n	80039e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2220      	movs	r2, #32
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80039dc:	2300      	movs	r3, #0
 80039de:	e000      	b.n	80039e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80039e0:	2302      	movs	r3, #2
  }
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3720      	adds	r7, #32
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
	...

080039ec <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b08c      	sub	sp, #48	; 0x30
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	4613      	mov	r3, r2
 80039f8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b20      	cmp	r3, #32
 8003a04:	d165      	bne.n	8003ad2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d002      	beq.n	8003a12 <HAL_UART_Transmit_DMA+0x26>
 8003a0c:	88fb      	ldrh	r3, [r7, #6]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e05e      	b.n	8003ad4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d101      	bne.n	8003a24 <HAL_UART_Transmit_DMA+0x38>
 8003a20:	2302      	movs	r3, #2
 8003a22:	e057      	b.n	8003ad4 <HAL_UART_Transmit_DMA+0xe8>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	88fa      	ldrh	r2, [r7, #6]
 8003a36:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	88fa      	ldrh	r2, [r7, #6]
 8003a3c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2221      	movs	r2, #33	; 0x21
 8003a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a50:	4a22      	ldr	r2, [pc, #136]	; (8003adc <HAL_UART_Transmit_DMA+0xf0>)
 8003a52:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a58:	4a21      	ldr	r2, [pc, #132]	; (8003ae0 <HAL_UART_Transmit_DMA+0xf4>)
 8003a5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a60:	4a20      	ldr	r2, [pc, #128]	; (8003ae4 <HAL_UART_Transmit_DMA+0xf8>)
 8003a62:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a68:	2200      	movs	r2, #0
 8003a6a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8003a6c:	f107 0308 	add.w	r3, r7, #8
 8003a70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a78:	6819      	ldr	r1, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	3304      	adds	r3, #4
 8003a80:	461a      	mov	r2, r3
 8003a82:	88fb      	ldrh	r3, [r7, #6]
 8003a84:	f7fe fa70 	bl	8001f68 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a90:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	3314      	adds	r3, #20
 8003aa0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	e853 3f00 	ldrex	r3, [r3]
 8003aa8:	617b      	str	r3, [r7, #20]
   return(result);
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ab0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	3314      	adds	r3, #20
 8003ab8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003aba:	627a      	str	r2, [r7, #36]	; 0x24
 8003abc:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003abe:	6a39      	ldr	r1, [r7, #32]
 8003ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac2:	e841 2300 	strex	r3, r2, [r1]
 8003ac6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1e5      	bne.n	8003a9a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	e000      	b.n	8003ad4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8003ad2:	2302      	movs	r3, #2
  }
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3730      	adds	r7, #48	; 0x30
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	080040b9 	.word	0x080040b9
 8003ae0:	08004153 	.word	0x08004153
 8003ae4:	080042cb 	.word	0x080042cb

08003ae8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	4613      	mov	r3, r2
 8003af4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b20      	cmp	r3, #32
 8003b00:	d11d      	bne.n	8003b3e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d002      	beq.n	8003b0e <HAL_UART_Receive_DMA+0x26>
 8003b08:	88fb      	ldrh	r3, [r7, #6]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e016      	b.n	8003b40 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d101      	bne.n	8003b20 <HAL_UART_Receive_DMA+0x38>
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	e00f      	b.n	8003b40 <HAL_UART_Receive_DMA+0x58>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003b2e:	88fb      	ldrh	r3, [r7, #6]
 8003b30:	461a      	mov	r2, r3
 8003b32:	68b9      	ldr	r1, [r7, #8]
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f000 fc81 	bl	800443c <UART_Start_Receive_DMA>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	e000      	b.n	8003b40 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003b3e:	2302      	movs	r3, #2
  }
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b0ba      	sub	sp, #232	; 0xe8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003b74:	2300      	movs	r3, #0
 8003b76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003b86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10f      	bne.n	8003bae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b92:	f003 0320 	and.w	r3, r3, #32
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d009      	beq.n	8003bae <HAL_UART_IRQHandler+0x66>
 8003b9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b9e:	f003 0320 	and.w	r3, r3, #32
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 fde9 	bl	800477e <UART_Receive_IT>
      return;
 8003bac:	e256      	b.n	800405c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003bae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 80de 	beq.w	8003d74 <HAL_UART_IRQHandler+0x22c>
 8003bb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d106      	bne.n	8003bd2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bc8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 80d1 	beq.w	8003d74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00b      	beq.n	8003bf6 <HAL_UART_IRQHandler+0xae>
 8003bde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d005      	beq.n	8003bf6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	f043 0201 	orr.w	r2, r3, #1
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bfa:	f003 0304 	and.w	r3, r3, #4
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00b      	beq.n	8003c1a <HAL_UART_IRQHandler+0xd2>
 8003c02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d005      	beq.n	8003c1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	f043 0202 	orr.w	r2, r3, #2
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00b      	beq.n	8003c3e <HAL_UART_IRQHandler+0xf6>
 8003c26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d005      	beq.n	8003c3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c36:	f043 0204 	orr.w	r2, r3, #4
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c42:	f003 0308 	and.w	r3, r3, #8
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d011      	beq.n	8003c6e <HAL_UART_IRQHandler+0x126>
 8003c4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c4e:	f003 0320 	and.w	r3, r3, #32
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d105      	bne.n	8003c62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d005      	beq.n	8003c6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	f043 0208 	orr.w	r2, r3, #8
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f000 81ed 	beq.w	8004052 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c7c:	f003 0320 	and.w	r3, r3, #32
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d008      	beq.n	8003c96 <HAL_UART_IRQHandler+0x14e>
 8003c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c88:	f003 0320 	and.w	r3, r3, #32
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d002      	beq.n	8003c96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 fd74 	bl	800477e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca0:	2b40      	cmp	r3, #64	; 0x40
 8003ca2:	bf0c      	ite	eq
 8003ca4:	2301      	moveq	r3, #1
 8003ca6:	2300      	movne	r3, #0
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	f003 0308 	and.w	r3, r3, #8
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d103      	bne.n	8003cc2 <HAL_UART_IRQHandler+0x17a>
 8003cba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d04f      	beq.n	8003d62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 fc7c 	bl	80045c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd2:	2b40      	cmp	r3, #64	; 0x40
 8003cd4:	d141      	bne.n	8003d5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	3314      	adds	r3, #20
 8003cdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ce4:	e853 3f00 	ldrex	r3, [r3]
 8003ce8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003cec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	3314      	adds	r3, #20
 8003cfe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d12:	e841 2300 	strex	r3, r2, [r1]
 8003d16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1d9      	bne.n	8003cd6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d013      	beq.n	8003d52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2e:	4a7d      	ldr	r2, [pc, #500]	; (8003f24 <HAL_UART_IRQHandler+0x3dc>)
 8003d30:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fe f9de 	bl	80020f8 <HAL_DMA_Abort_IT>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d016      	beq.n	8003d70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d4c:	4610      	mov	r0, r2
 8003d4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d50:	e00e      	b.n	8003d70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f99a 	bl	800408c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d58:	e00a      	b.n	8003d70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f996 	bl	800408c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d60:	e006      	b.n	8003d70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f992 	bl	800408c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003d6e:	e170      	b.n	8004052 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d70:	bf00      	nop
    return;
 8003d72:	e16e      	b.n	8004052 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	f040 814a 	bne.w	8004012 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d82:	f003 0310 	and.w	r3, r3, #16
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 8143 	beq.w	8004012 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d90:	f003 0310 	and.w	r3, r3, #16
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 813c 	beq.w	8004012 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	60bb      	str	r3, [r7, #8]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	60bb      	str	r3, [r7, #8]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	60bb      	str	r3, [r7, #8]
 8003dae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dba:	2b40      	cmp	r3, #64	; 0x40
 8003dbc:	f040 80b4 	bne.w	8003f28 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003dcc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f000 8140 	beq.w	8004056 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003dda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003dde:	429a      	cmp	r2, r3
 8003de0:	f080 8139 	bcs.w	8004056 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003dea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003df6:	f000 8088 	beq.w	8003f0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	330c      	adds	r3, #12
 8003e00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e08:	e853 3f00 	ldrex	r3, [r3]
 8003e0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	330c      	adds	r3, #12
 8003e22:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003e26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e36:	e841 2300 	strex	r3, r2, [r1]
 8003e3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1d9      	bne.n	8003dfa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	3314      	adds	r3, #20
 8003e4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e50:	e853 3f00 	ldrex	r3, [r3]
 8003e54:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003e56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e58:	f023 0301 	bic.w	r3, r3, #1
 8003e5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	3314      	adds	r3, #20
 8003e66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e6a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003e6e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e70:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e76:	e841 2300 	strex	r3, r2, [r1]
 8003e7a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003e7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1e1      	bne.n	8003e46 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	3314      	adds	r3, #20
 8003e88:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e8c:	e853 3f00 	ldrex	r3, [r3]
 8003e90:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003e92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	3314      	adds	r3, #20
 8003ea2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003ea6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ea8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eaa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003eac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003eae:	e841 2300 	strex	r3, r2, [r1]
 8003eb2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003eb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1e3      	bne.n	8003e82 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	330c      	adds	r3, #12
 8003ece:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ed2:	e853 3f00 	ldrex	r3, [r3]
 8003ed6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eda:	f023 0310 	bic.w	r3, r3, #16
 8003ede:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	330c      	adds	r3, #12
 8003ee8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003eec:	65ba      	str	r2, [r7, #88]	; 0x58
 8003eee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ef2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ef4:	e841 2300 	strex	r3, r2, [r1]
 8003ef8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003efa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1e3      	bne.n	8003ec8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7fe f887 	bl	8002018 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	4619      	mov	r1, r3
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f8c0 	bl	80040a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f20:	e099      	b.n	8004056 <HAL_UART_IRQHandler+0x50e>
 8003f22:	bf00      	nop
 8003f24:	08004687 	.word	0x08004687
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f000 808b 	beq.w	800405a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003f44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 8086 	beq.w	800405a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	330c      	adds	r3, #12
 8003f54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f58:	e853 3f00 	ldrex	r3, [r3]
 8003f5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	330c      	adds	r3, #12
 8003f6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003f72:	647a      	str	r2, [r7, #68]	; 0x44
 8003f74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f7a:	e841 2300 	strex	r3, r2, [r1]
 8003f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1e3      	bne.n	8003f4e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	3314      	adds	r3, #20
 8003f8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f90:	e853 3f00 	ldrex	r3, [r3]
 8003f94:	623b      	str	r3, [r7, #32]
   return(result);
 8003f96:	6a3b      	ldr	r3, [r7, #32]
 8003f98:	f023 0301 	bic.w	r3, r3, #1
 8003f9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	3314      	adds	r3, #20
 8003fa6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003faa:	633a      	str	r2, [r7, #48]	; 0x30
 8003fac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fb2:	e841 2300 	strex	r3, r2, [r1]
 8003fb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1e3      	bne.n	8003f86 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	330c      	adds	r3, #12
 8003fd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	e853 3f00 	ldrex	r3, [r3]
 8003fda:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f023 0310 	bic.w	r3, r3, #16
 8003fe2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	330c      	adds	r3, #12
 8003fec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003ff0:	61fa      	str	r2, [r7, #28]
 8003ff2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff4:	69b9      	ldr	r1, [r7, #24]
 8003ff6:	69fa      	ldr	r2, [r7, #28]
 8003ff8:	e841 2300 	strex	r3, r2, [r1]
 8003ffc:	617b      	str	r3, [r7, #20]
   return(result);
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1e3      	bne.n	8003fcc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004004:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004008:	4619      	mov	r1, r3
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f848 	bl	80040a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004010:	e023      	b.n	800405a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800401a:	2b00      	cmp	r3, #0
 800401c:	d009      	beq.n	8004032 <HAL_UART_IRQHandler+0x4ea>
 800401e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004026:	2b00      	cmp	r3, #0
 8004028:	d003      	beq.n	8004032 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 fb3f 	bl	80046ae <UART_Transmit_IT>
    return;
 8004030:	e014      	b.n	800405c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00e      	beq.n	800405c <HAL_UART_IRQHandler+0x514>
 800403e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004046:	2b00      	cmp	r3, #0
 8004048:	d008      	beq.n	800405c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 fb7f 	bl	800474e <UART_EndTransmit_IT>
    return;
 8004050:	e004      	b.n	800405c <HAL_UART_IRQHandler+0x514>
    return;
 8004052:	bf00      	nop
 8004054:	e002      	b.n	800405c <HAL_UART_IRQHandler+0x514>
      return;
 8004056:	bf00      	nop
 8004058:	e000      	b.n	800405c <HAL_UART_IRQHandler+0x514>
      return;
 800405a:	bf00      	nop
  }
}
 800405c:	37e8      	adds	r7, #232	; 0xe8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop

08004064 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	460b      	mov	r3, r1
 80040aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b090      	sub	sp, #64	; 0x40
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d137      	bne.n	8004144 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80040d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040d6:	2200      	movs	r2, #0
 80040d8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80040da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	3314      	adds	r3, #20
 80040e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	e853 3f00 	ldrex	r3, [r3]
 80040e8:	623b      	str	r3, [r7, #32]
   return(result);
 80040ea:	6a3b      	ldr	r3, [r7, #32]
 80040ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80040f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	3314      	adds	r3, #20
 80040f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040fa:	633a      	str	r2, [r7, #48]	; 0x30
 80040fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004100:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004102:	e841 2300 	strex	r3, r2, [r1]
 8004106:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1e5      	bne.n	80040da <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800410e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	330c      	adds	r3, #12
 8004114:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	e853 3f00 	ldrex	r3, [r3]
 800411c:	60fb      	str	r3, [r7, #12]
   return(result);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004124:	637b      	str	r3, [r7, #52]	; 0x34
 8004126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	330c      	adds	r3, #12
 800412c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800412e:	61fa      	str	r2, [r7, #28]
 8004130:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004132:	69b9      	ldr	r1, [r7, #24]
 8004134:	69fa      	ldr	r2, [r7, #28]
 8004136:	e841 2300 	strex	r3, r2, [r1]
 800413a:	617b      	str	r3, [r7, #20]
   return(result);
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1e5      	bne.n	800410e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004142:	e002      	b.n	800414a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004144:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004146:	f003 fe63 	bl	8007e10 <HAL_UART_TxCpltCallback>
}
 800414a:	bf00      	nop
 800414c:	3740      	adds	r7, #64	; 0x40
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b084      	sub	sp, #16
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f7ff ff7f 	bl	8004064 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004166:	bf00      	nop
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b09c      	sub	sp, #112	; 0x70
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004186:	2b00      	cmp	r3, #0
 8004188:	d172      	bne.n	8004270 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800418a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800418c:	2200      	movs	r2, #0
 800418e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	330c      	adds	r3, #12
 8004196:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004198:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800419a:	e853 3f00 	ldrex	r3, [r3]
 800419e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80041a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80041a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	330c      	adds	r3, #12
 80041ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80041b0:	65ba      	str	r2, [r7, #88]	; 0x58
 80041b2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041b8:	e841 2300 	strex	r3, r2, [r1]
 80041bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80041be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1e5      	bne.n	8004190 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	3314      	adds	r3, #20
 80041ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ce:	e853 3f00 	ldrex	r3, [r3]
 80041d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80041d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041d6:	f023 0301 	bic.w	r3, r3, #1
 80041da:	667b      	str	r3, [r7, #100]	; 0x64
 80041dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	3314      	adds	r3, #20
 80041e2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80041e4:	647a      	str	r2, [r7, #68]	; 0x44
 80041e6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041ec:	e841 2300 	strex	r3, r2, [r1]
 80041f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80041f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1e5      	bne.n	80041c4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	3314      	adds	r3, #20
 80041fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004202:	e853 3f00 	ldrex	r3, [r3]
 8004206:	623b      	str	r3, [r7, #32]
   return(result);
 8004208:	6a3b      	ldr	r3, [r7, #32]
 800420a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800420e:	663b      	str	r3, [r7, #96]	; 0x60
 8004210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	3314      	adds	r3, #20
 8004216:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004218:	633a      	str	r2, [r7, #48]	; 0x30
 800421a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800421e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004220:	e841 2300 	strex	r3, r2, [r1]
 8004224:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1e5      	bne.n	80041f8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800422c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800422e:	2220      	movs	r2, #32
 8004230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004238:	2b01      	cmp	r3, #1
 800423a:	d119      	bne.n	8004270 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800423c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	330c      	adds	r3, #12
 8004242:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	e853 3f00 	ldrex	r3, [r3]
 800424a:	60fb      	str	r3, [r7, #12]
   return(result);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f023 0310 	bic.w	r3, r3, #16
 8004252:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	330c      	adds	r3, #12
 800425a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800425c:	61fa      	str	r2, [r7, #28]
 800425e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004260:	69b9      	ldr	r1, [r7, #24]
 8004262:	69fa      	ldr	r2, [r7, #28]
 8004264:	e841 2300 	strex	r3, r2, [r1]
 8004268:	617b      	str	r3, [r7, #20]
   return(result);
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1e5      	bne.n	800423c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004274:	2b01      	cmp	r3, #1
 8004276:	d106      	bne.n	8004286 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004278:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800427a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800427c:	4619      	mov	r1, r3
 800427e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004280:	f7ff ff0e 	bl	80040a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004284:	e002      	b.n	800428c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004286:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004288:	f003 fdd8 	bl	8007e3c <HAL_UART_RxCpltCallback>
}
 800428c:	bf00      	nop
 800428e:	3770      	adds	r7, #112	; 0x70
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d108      	bne.n	80042bc <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042ae:	085b      	lsrs	r3, r3, #1
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	4619      	mov	r1, r3
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f7ff fef3 	bl	80040a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80042ba:	e002      	b.n	80042c2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f7ff fedb 	bl	8004078 <HAL_UART_RxHalfCpltCallback>
}
 80042c2:	bf00      	nop
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b084      	sub	sp, #16
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80042d2:	2300      	movs	r3, #0
 80042d4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042da:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e6:	2b80      	cmp	r3, #128	; 0x80
 80042e8:	bf0c      	ite	eq
 80042ea:	2301      	moveq	r3, #1
 80042ec:	2300      	movne	r3, #0
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b21      	cmp	r3, #33	; 0x21
 80042fc:	d108      	bne.n	8004310 <UART_DMAError+0x46>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d005      	beq.n	8004310 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	2200      	movs	r2, #0
 8004308:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800430a:	68b8      	ldr	r0, [r7, #8]
 800430c:	f000 f930 	bl	8004570 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800431a:	2b40      	cmp	r3, #64	; 0x40
 800431c:	bf0c      	ite	eq
 800431e:	2301      	moveq	r3, #1
 8004320:	2300      	movne	r3, #0
 8004322:	b2db      	uxtb	r3, r3
 8004324:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b22      	cmp	r3, #34	; 0x22
 8004330:	d108      	bne.n	8004344 <UART_DMAError+0x7a>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d005      	beq.n	8004344 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	2200      	movs	r2, #0
 800433c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800433e:	68b8      	ldr	r0, [r7, #8]
 8004340:	f000 f93e 	bl	80045c0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004348:	f043 0210 	orr.w	r2, r3, #16
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004350:	68b8      	ldr	r0, [r7, #8]
 8004352:	f7ff fe9b 	bl	800408c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004356:	bf00      	nop
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b090      	sub	sp, #64	; 0x40
 8004362:	af00      	add	r7, sp, #0
 8004364:	60f8      	str	r0, [r7, #12]
 8004366:	60b9      	str	r1, [r7, #8]
 8004368:	603b      	str	r3, [r7, #0]
 800436a:	4613      	mov	r3, r2
 800436c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800436e:	e050      	b.n	8004412 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004370:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004376:	d04c      	beq.n	8004412 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004378:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800437a:	2b00      	cmp	r3, #0
 800437c:	d007      	beq.n	800438e <UART_WaitOnFlagUntilTimeout+0x30>
 800437e:	f7fd fc03 	bl	8001b88 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800438a:	429a      	cmp	r2, r3
 800438c:	d241      	bcs.n	8004412 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	330c      	adds	r3, #12
 8004394:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004398:	e853 3f00 	ldrex	r3, [r3]
 800439c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800439e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	330c      	adds	r3, #12
 80043ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043ae:	637a      	str	r2, [r7, #52]	; 0x34
 80043b0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043b6:	e841 2300 	strex	r3, r2, [r1]
 80043ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80043bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1e5      	bne.n	800438e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	3314      	adds	r3, #20
 80043c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	e853 3f00 	ldrex	r3, [r3]
 80043d0:	613b      	str	r3, [r7, #16]
   return(result);
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	f023 0301 	bic.w	r3, r3, #1
 80043d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	3314      	adds	r3, #20
 80043e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043e2:	623a      	str	r2, [r7, #32]
 80043e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e6:	69f9      	ldr	r1, [r7, #28]
 80043e8:	6a3a      	ldr	r2, [r7, #32]
 80043ea:	e841 2300 	strex	r3, r2, [r1]
 80043ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1e5      	bne.n	80043c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2220      	movs	r2, #32
 80043fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2220      	movs	r2, #32
 8004402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e00f      	b.n	8004432 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	4013      	ands	r3, r2
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	429a      	cmp	r2, r3
 8004420:	bf0c      	ite	eq
 8004422:	2301      	moveq	r3, #1
 8004424:	2300      	movne	r3, #0
 8004426:	b2db      	uxtb	r3, r3
 8004428:	461a      	mov	r2, r3
 800442a:	79fb      	ldrb	r3, [r7, #7]
 800442c:	429a      	cmp	r2, r3
 800442e:	d09f      	beq.n	8004370 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3740      	adds	r7, #64	; 0x40
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
	...

0800443c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b098      	sub	sp, #96	; 0x60
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	4613      	mov	r3, r2
 8004448:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	88fa      	ldrh	r2, [r7, #6]
 8004454:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2222      	movs	r2, #34	; 0x22
 8004460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004468:	4a3e      	ldr	r2, [pc, #248]	; (8004564 <UART_Start_Receive_DMA+0x128>)
 800446a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004470:	4a3d      	ldr	r2, [pc, #244]	; (8004568 <UART_Start_Receive_DMA+0x12c>)
 8004472:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004478:	4a3c      	ldr	r2, [pc, #240]	; (800456c <UART_Start_Receive_DMA+0x130>)
 800447a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004480:	2200      	movs	r2, #0
 8004482:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004484:	f107 0308 	add.w	r3, r7, #8
 8004488:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	3304      	adds	r3, #4
 8004494:	4619      	mov	r1, r3
 8004496:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	88fb      	ldrh	r3, [r7, #6]
 800449c:	f7fd fd64 	bl	8001f68 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80044a0:	2300      	movs	r3, #0
 80044a2:	613b      	str	r3, [r7, #16]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	613b      	str	r3, [r7, #16]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	613b      	str	r3, [r7, #16]
 80044b4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	330c      	adds	r3, #12
 80044c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044c8:	e853 3f00 	ldrex	r3, [r3]
 80044cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	330c      	adds	r3, #12
 80044dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044de:	64fa      	str	r2, [r7, #76]	; 0x4c
 80044e0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80044e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044e6:	e841 2300 	strex	r3, r2, [r1]
 80044ea:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80044ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1e5      	bne.n	80044be <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	3314      	adds	r3, #20
 80044f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fc:	e853 3f00 	ldrex	r3, [r3]
 8004500:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004504:	f043 0301 	orr.w	r3, r3, #1
 8004508:	657b      	str	r3, [r7, #84]	; 0x54
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	3314      	adds	r3, #20
 8004510:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004512:	63ba      	str	r2, [r7, #56]	; 0x38
 8004514:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004516:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004518:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800451a:	e841 2300 	strex	r3, r2, [r1]
 800451e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1e5      	bne.n	80044f2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	3314      	adds	r3, #20
 800452c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	e853 3f00 	ldrex	r3, [r3]
 8004534:	617b      	str	r3, [r7, #20]
   return(result);
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800453c:	653b      	str	r3, [r7, #80]	; 0x50
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	3314      	adds	r3, #20
 8004544:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004546:	627a      	str	r2, [r7, #36]	; 0x24
 8004548:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454a:	6a39      	ldr	r1, [r7, #32]
 800454c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800454e:	e841 2300 	strex	r3, r2, [r1]
 8004552:	61fb      	str	r3, [r7, #28]
   return(result);
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1e5      	bne.n	8004526 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3760      	adds	r7, #96	; 0x60
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	0800416f 	.word	0x0800416f
 8004568:	08004295 	.word	0x08004295
 800456c:	080042cb 	.word	0x080042cb

08004570 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004570:	b480      	push	{r7}
 8004572:	b089      	sub	sp, #36	; 0x24
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	330c      	adds	r3, #12
 800457e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	e853 3f00 	ldrex	r3, [r3]
 8004586:	60bb      	str	r3, [r7, #8]
   return(result);
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800458e:	61fb      	str	r3, [r7, #28]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	330c      	adds	r3, #12
 8004596:	69fa      	ldr	r2, [r7, #28]
 8004598:	61ba      	str	r2, [r7, #24]
 800459a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459c:	6979      	ldr	r1, [r7, #20]
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	e841 2300 	strex	r3, r2, [r1]
 80045a4:	613b      	str	r3, [r7, #16]
   return(result);
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1e5      	bne.n	8004578 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2220      	movs	r2, #32
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80045b4:	bf00      	nop
 80045b6:	3724      	adds	r7, #36	; 0x24
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b095      	sub	sp, #84	; 0x54
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	330c      	adds	r3, #12
 80045ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045d2:	e853 3f00 	ldrex	r3, [r3]
 80045d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	330c      	adds	r3, #12
 80045e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045e8:	643a      	str	r2, [r7, #64]	; 0x40
 80045ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045f0:	e841 2300 	strex	r3, r2, [r1]
 80045f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1e5      	bne.n	80045c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	3314      	adds	r3, #20
 8004602:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	e853 3f00 	ldrex	r3, [r3]
 800460a:	61fb      	str	r3, [r7, #28]
   return(result);
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	f023 0301 	bic.w	r3, r3, #1
 8004612:	64bb      	str	r3, [r7, #72]	; 0x48
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	3314      	adds	r3, #20
 800461a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800461c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800461e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004620:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004622:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004624:	e841 2300 	strex	r3, r2, [r1]
 8004628:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1e5      	bne.n	80045fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004634:	2b01      	cmp	r3, #1
 8004636:	d119      	bne.n	800466c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	330c      	adds	r3, #12
 800463e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	e853 3f00 	ldrex	r3, [r3]
 8004646:	60bb      	str	r3, [r7, #8]
   return(result);
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	f023 0310 	bic.w	r3, r3, #16
 800464e:	647b      	str	r3, [r7, #68]	; 0x44
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	330c      	adds	r3, #12
 8004656:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004658:	61ba      	str	r2, [r7, #24]
 800465a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465c:	6979      	ldr	r1, [r7, #20]
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	e841 2300 	strex	r3, r2, [r1]
 8004664:	613b      	str	r3, [r7, #16]
   return(result);
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1e5      	bne.n	8004638 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2220      	movs	r2, #32
 8004670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	631a      	str	r2, [r3, #48]	; 0x30
}
 800467a:	bf00      	nop
 800467c:	3754      	adds	r7, #84	; 0x54
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b084      	sub	sp, #16
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004692:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f7ff fcf3 	bl	800408c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046a6:	bf00      	nop
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b085      	sub	sp, #20
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b21      	cmp	r3, #33	; 0x21
 80046c0:	d13e      	bne.n	8004740 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ca:	d114      	bne.n	80046f6 <UART_Transmit_IT+0x48>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d110      	bne.n	80046f6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a1b      	ldr	r3, [r3, #32]
 80046d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	881b      	ldrh	r3, [r3, #0]
 80046de:	461a      	mov	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	1c9a      	adds	r2, r3, #2
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	621a      	str	r2, [r3, #32]
 80046f4:	e008      	b.n	8004708 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	1c59      	adds	r1, r3, #1
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	6211      	str	r1, [r2, #32]
 8004700:	781a      	ldrb	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800470c:	b29b      	uxth	r3, r3
 800470e:	3b01      	subs	r3, #1
 8004710:	b29b      	uxth	r3, r3
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	4619      	mov	r1, r3
 8004716:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10f      	bne.n	800473c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800472a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68da      	ldr	r2, [r3, #12]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800473a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800473c:	2300      	movs	r3, #0
 800473e:	e000      	b.n	8004742 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004740:	2302      	movs	r3, #2
  }
}
 8004742:	4618      	mov	r0, r3
 8004744:	3714      	adds	r7, #20
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr

0800474e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b082      	sub	sp, #8
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68da      	ldr	r2, [r3, #12]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004764:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2220      	movs	r2, #32
 800476a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f003 fb4e 	bl	8007e10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b08c      	sub	sp, #48	; 0x30
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b22      	cmp	r3, #34	; 0x22
 8004790:	f040 80ab 	bne.w	80048ea <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800479c:	d117      	bne.n	80047ce <UART_Receive_IT+0x50>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d113      	bne.n	80047ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80047a6:	2300      	movs	r3, #0
 80047a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047bc:	b29a      	uxth	r2, r3
 80047be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c6:	1c9a      	adds	r2, r3, #2
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	629a      	str	r2, [r3, #40]	; 0x28
 80047cc:	e026      	b.n	800481c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80047d4:	2300      	movs	r3, #0
 80047d6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e0:	d007      	beq.n	80047f2 <UART_Receive_IT+0x74>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10a      	bne.n	8004800 <UART_Receive_IT+0x82>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d106      	bne.n	8004800 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	b2da      	uxtb	r2, r3
 80047fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047fc:	701a      	strb	r2, [r3, #0]
 80047fe:	e008      	b.n	8004812 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	b2db      	uxtb	r3, r3
 8004808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800480c:	b2da      	uxtb	r2, r3
 800480e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004810:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004816:	1c5a      	adds	r2, r3, #1
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004820:	b29b      	uxth	r3, r3
 8004822:	3b01      	subs	r3, #1
 8004824:	b29b      	uxth	r3, r3
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	4619      	mov	r1, r3
 800482a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800482c:	2b00      	cmp	r3, #0
 800482e:	d15a      	bne.n	80048e6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68da      	ldr	r2, [r3, #12]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 0220 	bic.w	r2, r2, #32
 800483e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800484e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	695a      	ldr	r2, [r3, #20]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f022 0201 	bic.w	r2, r2, #1
 800485e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2220      	movs	r2, #32
 8004864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486c:	2b01      	cmp	r3, #1
 800486e:	d135      	bne.n	80048dc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	330c      	adds	r3, #12
 800487c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	e853 3f00 	ldrex	r3, [r3]
 8004884:	613b      	str	r3, [r7, #16]
   return(result);
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	f023 0310 	bic.w	r3, r3, #16
 800488c:	627b      	str	r3, [r7, #36]	; 0x24
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	330c      	adds	r3, #12
 8004894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004896:	623a      	str	r2, [r7, #32]
 8004898:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489a:	69f9      	ldr	r1, [r7, #28]
 800489c:	6a3a      	ldr	r2, [r7, #32]
 800489e:	e841 2300 	strex	r3, r2, [r1]
 80048a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1e5      	bne.n	8004876 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0310 	and.w	r3, r3, #16
 80048b4:	2b10      	cmp	r3, #16
 80048b6:	d10a      	bne.n	80048ce <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048b8:	2300      	movs	r3, #0
 80048ba:	60fb      	str	r3, [r7, #12]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	60fb      	str	r3, [r7, #12]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	60fb      	str	r3, [r7, #12]
 80048cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048d2:	4619      	mov	r1, r3
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7ff fbe3 	bl	80040a0 <HAL_UARTEx_RxEventCallback>
 80048da:	e002      	b.n	80048e2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f003 faad 	bl	8007e3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048e2:	2300      	movs	r3, #0
 80048e4:	e002      	b.n	80048ec <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80048e6:	2300      	movs	r3, #0
 80048e8:	e000      	b.n	80048ec <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80048ea:	2302      	movs	r3, #2
  }
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3730      	adds	r7, #48	; 0x30
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048f8:	b09f      	sub	sp, #124	; 0x7c
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800490a:	68d9      	ldr	r1, [r3, #12]
 800490c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	ea40 0301 	orr.w	r3, r0, r1
 8004914:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004918:	689a      	ldr	r2, [r3, #8]
 800491a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	431a      	orrs	r2, r3
 8004920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	431a      	orrs	r2, r3
 8004926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	4313      	orrs	r3, r2
 800492c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800492e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004938:	f021 010c 	bic.w	r1, r1, #12
 800493c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004942:	430b      	orrs	r3, r1
 8004944:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004952:	6999      	ldr	r1, [r3, #24]
 8004954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	ea40 0301 	orr.w	r3, r0, r1
 800495c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800495e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	4bc5      	ldr	r3, [pc, #788]	; (8004c78 <UART_SetConfig+0x384>)
 8004964:	429a      	cmp	r2, r3
 8004966:	d004      	beq.n	8004972 <UART_SetConfig+0x7e>
 8004968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	4bc3      	ldr	r3, [pc, #780]	; (8004c7c <UART_SetConfig+0x388>)
 800496e:	429a      	cmp	r2, r3
 8004970:	d103      	bne.n	800497a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004972:	f7fe ff47 	bl	8003804 <HAL_RCC_GetPCLK2Freq>
 8004976:	6778      	str	r0, [r7, #116]	; 0x74
 8004978:	e002      	b.n	8004980 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800497a:	f7fe ff2f 	bl	80037dc <HAL_RCC_GetPCLK1Freq>
 800497e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004982:	69db      	ldr	r3, [r3, #28]
 8004984:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004988:	f040 80b6 	bne.w	8004af8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800498c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800498e:	461c      	mov	r4, r3
 8004990:	f04f 0500 	mov.w	r5, #0
 8004994:	4622      	mov	r2, r4
 8004996:	462b      	mov	r3, r5
 8004998:	1891      	adds	r1, r2, r2
 800499a:	6439      	str	r1, [r7, #64]	; 0x40
 800499c:	415b      	adcs	r3, r3
 800499e:	647b      	str	r3, [r7, #68]	; 0x44
 80049a0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80049a4:	1912      	adds	r2, r2, r4
 80049a6:	eb45 0303 	adc.w	r3, r5, r3
 80049aa:	f04f 0000 	mov.w	r0, #0
 80049ae:	f04f 0100 	mov.w	r1, #0
 80049b2:	00d9      	lsls	r1, r3, #3
 80049b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049b8:	00d0      	lsls	r0, r2, #3
 80049ba:	4602      	mov	r2, r0
 80049bc:	460b      	mov	r3, r1
 80049be:	1911      	adds	r1, r2, r4
 80049c0:	6639      	str	r1, [r7, #96]	; 0x60
 80049c2:	416b      	adcs	r3, r5
 80049c4:	667b      	str	r3, [r7, #100]	; 0x64
 80049c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	461a      	mov	r2, r3
 80049cc:	f04f 0300 	mov.w	r3, #0
 80049d0:	1891      	adds	r1, r2, r2
 80049d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80049d4:	415b      	adcs	r3, r3
 80049d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80049dc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80049e0:	f7fc f952 	bl	8000c88 <__aeabi_uldivmod>
 80049e4:	4602      	mov	r2, r0
 80049e6:	460b      	mov	r3, r1
 80049e8:	4ba5      	ldr	r3, [pc, #660]	; (8004c80 <UART_SetConfig+0x38c>)
 80049ea:	fba3 2302 	umull	r2, r3, r3, r2
 80049ee:	095b      	lsrs	r3, r3, #5
 80049f0:	011e      	lsls	r6, r3, #4
 80049f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049f4:	461c      	mov	r4, r3
 80049f6:	f04f 0500 	mov.w	r5, #0
 80049fa:	4622      	mov	r2, r4
 80049fc:	462b      	mov	r3, r5
 80049fe:	1891      	adds	r1, r2, r2
 8004a00:	6339      	str	r1, [r7, #48]	; 0x30
 8004a02:	415b      	adcs	r3, r3
 8004a04:	637b      	str	r3, [r7, #52]	; 0x34
 8004a06:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004a0a:	1912      	adds	r2, r2, r4
 8004a0c:	eb45 0303 	adc.w	r3, r5, r3
 8004a10:	f04f 0000 	mov.w	r0, #0
 8004a14:	f04f 0100 	mov.w	r1, #0
 8004a18:	00d9      	lsls	r1, r3, #3
 8004a1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a1e:	00d0      	lsls	r0, r2, #3
 8004a20:	4602      	mov	r2, r0
 8004a22:	460b      	mov	r3, r1
 8004a24:	1911      	adds	r1, r2, r4
 8004a26:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a28:	416b      	adcs	r3, r5
 8004a2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	461a      	mov	r2, r3
 8004a32:	f04f 0300 	mov.w	r3, #0
 8004a36:	1891      	adds	r1, r2, r2
 8004a38:	62b9      	str	r1, [r7, #40]	; 0x28
 8004a3a:	415b      	adcs	r3, r3
 8004a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a42:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004a46:	f7fc f91f 	bl	8000c88 <__aeabi_uldivmod>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	4b8c      	ldr	r3, [pc, #560]	; (8004c80 <UART_SetConfig+0x38c>)
 8004a50:	fba3 1302 	umull	r1, r3, r3, r2
 8004a54:	095b      	lsrs	r3, r3, #5
 8004a56:	2164      	movs	r1, #100	; 0x64
 8004a58:	fb01 f303 	mul.w	r3, r1, r3
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	00db      	lsls	r3, r3, #3
 8004a60:	3332      	adds	r3, #50	; 0x32
 8004a62:	4a87      	ldr	r2, [pc, #540]	; (8004c80 <UART_SetConfig+0x38c>)
 8004a64:	fba2 2303 	umull	r2, r3, r2, r3
 8004a68:	095b      	lsrs	r3, r3, #5
 8004a6a:	005b      	lsls	r3, r3, #1
 8004a6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a70:	441e      	add	r6, r3
 8004a72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a74:	4618      	mov	r0, r3
 8004a76:	f04f 0100 	mov.w	r1, #0
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	1894      	adds	r4, r2, r2
 8004a80:	623c      	str	r4, [r7, #32]
 8004a82:	415b      	adcs	r3, r3
 8004a84:	627b      	str	r3, [r7, #36]	; 0x24
 8004a86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a8a:	1812      	adds	r2, r2, r0
 8004a8c:	eb41 0303 	adc.w	r3, r1, r3
 8004a90:	f04f 0400 	mov.w	r4, #0
 8004a94:	f04f 0500 	mov.w	r5, #0
 8004a98:	00dd      	lsls	r5, r3, #3
 8004a9a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004a9e:	00d4      	lsls	r4, r2, #3
 8004aa0:	4622      	mov	r2, r4
 8004aa2:	462b      	mov	r3, r5
 8004aa4:	1814      	adds	r4, r2, r0
 8004aa6:	653c      	str	r4, [r7, #80]	; 0x50
 8004aa8:	414b      	adcs	r3, r1
 8004aaa:	657b      	str	r3, [r7, #84]	; 0x54
 8004aac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	f04f 0300 	mov.w	r3, #0
 8004ab6:	1891      	adds	r1, r2, r2
 8004ab8:	61b9      	str	r1, [r7, #24]
 8004aba:	415b      	adcs	r3, r3
 8004abc:	61fb      	str	r3, [r7, #28]
 8004abe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ac2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004ac6:	f7fc f8df 	bl	8000c88 <__aeabi_uldivmod>
 8004aca:	4602      	mov	r2, r0
 8004acc:	460b      	mov	r3, r1
 8004ace:	4b6c      	ldr	r3, [pc, #432]	; (8004c80 <UART_SetConfig+0x38c>)
 8004ad0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ad4:	095b      	lsrs	r3, r3, #5
 8004ad6:	2164      	movs	r1, #100	; 0x64
 8004ad8:	fb01 f303 	mul.w	r3, r1, r3
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	00db      	lsls	r3, r3, #3
 8004ae0:	3332      	adds	r3, #50	; 0x32
 8004ae2:	4a67      	ldr	r2, [pc, #412]	; (8004c80 <UART_SetConfig+0x38c>)
 8004ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae8:	095b      	lsrs	r3, r3, #5
 8004aea:	f003 0207 	and.w	r2, r3, #7
 8004aee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4432      	add	r2, r6
 8004af4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004af6:	e0b9      	b.n	8004c6c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004af8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004afa:	461c      	mov	r4, r3
 8004afc:	f04f 0500 	mov.w	r5, #0
 8004b00:	4622      	mov	r2, r4
 8004b02:	462b      	mov	r3, r5
 8004b04:	1891      	adds	r1, r2, r2
 8004b06:	6139      	str	r1, [r7, #16]
 8004b08:	415b      	adcs	r3, r3
 8004b0a:	617b      	str	r3, [r7, #20]
 8004b0c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004b10:	1912      	adds	r2, r2, r4
 8004b12:	eb45 0303 	adc.w	r3, r5, r3
 8004b16:	f04f 0000 	mov.w	r0, #0
 8004b1a:	f04f 0100 	mov.w	r1, #0
 8004b1e:	00d9      	lsls	r1, r3, #3
 8004b20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b24:	00d0      	lsls	r0, r2, #3
 8004b26:	4602      	mov	r2, r0
 8004b28:	460b      	mov	r3, r1
 8004b2a:	eb12 0804 	adds.w	r8, r2, r4
 8004b2e:	eb43 0905 	adc.w	r9, r3, r5
 8004b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f04f 0100 	mov.w	r1, #0
 8004b3c:	f04f 0200 	mov.w	r2, #0
 8004b40:	f04f 0300 	mov.w	r3, #0
 8004b44:	008b      	lsls	r3, r1, #2
 8004b46:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b4a:	0082      	lsls	r2, r0, #2
 8004b4c:	4640      	mov	r0, r8
 8004b4e:	4649      	mov	r1, r9
 8004b50:	f7fc f89a 	bl	8000c88 <__aeabi_uldivmod>
 8004b54:	4602      	mov	r2, r0
 8004b56:	460b      	mov	r3, r1
 8004b58:	4b49      	ldr	r3, [pc, #292]	; (8004c80 <UART_SetConfig+0x38c>)
 8004b5a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b5e:	095b      	lsrs	r3, r3, #5
 8004b60:	011e      	lsls	r6, r3, #4
 8004b62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b64:	4618      	mov	r0, r3
 8004b66:	f04f 0100 	mov.w	r1, #0
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	1894      	adds	r4, r2, r2
 8004b70:	60bc      	str	r4, [r7, #8]
 8004b72:	415b      	adcs	r3, r3
 8004b74:	60fb      	str	r3, [r7, #12]
 8004b76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b7a:	1812      	adds	r2, r2, r0
 8004b7c:	eb41 0303 	adc.w	r3, r1, r3
 8004b80:	f04f 0400 	mov.w	r4, #0
 8004b84:	f04f 0500 	mov.w	r5, #0
 8004b88:	00dd      	lsls	r5, r3, #3
 8004b8a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b8e:	00d4      	lsls	r4, r2, #3
 8004b90:	4622      	mov	r2, r4
 8004b92:	462b      	mov	r3, r5
 8004b94:	1814      	adds	r4, r2, r0
 8004b96:	64bc      	str	r4, [r7, #72]	; 0x48
 8004b98:	414b      	adcs	r3, r1
 8004b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f04f 0100 	mov.w	r1, #0
 8004ba6:	f04f 0200 	mov.w	r2, #0
 8004baa:	f04f 0300 	mov.w	r3, #0
 8004bae:	008b      	lsls	r3, r1, #2
 8004bb0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004bb4:	0082      	lsls	r2, r0, #2
 8004bb6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004bba:	f7fc f865 	bl	8000c88 <__aeabi_uldivmod>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	4b2f      	ldr	r3, [pc, #188]	; (8004c80 <UART_SetConfig+0x38c>)
 8004bc4:	fba3 1302 	umull	r1, r3, r3, r2
 8004bc8:	095b      	lsrs	r3, r3, #5
 8004bca:	2164      	movs	r1, #100	; 0x64
 8004bcc:	fb01 f303 	mul.w	r3, r1, r3
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	011b      	lsls	r3, r3, #4
 8004bd4:	3332      	adds	r3, #50	; 0x32
 8004bd6:	4a2a      	ldr	r2, [pc, #168]	; (8004c80 <UART_SetConfig+0x38c>)
 8004bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bdc:	095b      	lsrs	r3, r3, #5
 8004bde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004be2:	441e      	add	r6, r3
 8004be4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004be6:	4618      	mov	r0, r3
 8004be8:	f04f 0100 	mov.w	r1, #0
 8004bec:	4602      	mov	r2, r0
 8004bee:	460b      	mov	r3, r1
 8004bf0:	1894      	adds	r4, r2, r2
 8004bf2:	603c      	str	r4, [r7, #0]
 8004bf4:	415b      	adcs	r3, r3
 8004bf6:	607b      	str	r3, [r7, #4]
 8004bf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bfc:	1812      	adds	r2, r2, r0
 8004bfe:	eb41 0303 	adc.w	r3, r1, r3
 8004c02:	f04f 0400 	mov.w	r4, #0
 8004c06:	f04f 0500 	mov.w	r5, #0
 8004c0a:	00dd      	lsls	r5, r3, #3
 8004c0c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004c10:	00d4      	lsls	r4, r2, #3
 8004c12:	4622      	mov	r2, r4
 8004c14:	462b      	mov	r3, r5
 8004c16:	eb12 0a00 	adds.w	sl, r2, r0
 8004c1a:	eb43 0b01 	adc.w	fp, r3, r1
 8004c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	4618      	mov	r0, r3
 8004c24:	f04f 0100 	mov.w	r1, #0
 8004c28:	f04f 0200 	mov.w	r2, #0
 8004c2c:	f04f 0300 	mov.w	r3, #0
 8004c30:	008b      	lsls	r3, r1, #2
 8004c32:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004c36:	0082      	lsls	r2, r0, #2
 8004c38:	4650      	mov	r0, sl
 8004c3a:	4659      	mov	r1, fp
 8004c3c:	f7fc f824 	bl	8000c88 <__aeabi_uldivmod>
 8004c40:	4602      	mov	r2, r0
 8004c42:	460b      	mov	r3, r1
 8004c44:	4b0e      	ldr	r3, [pc, #56]	; (8004c80 <UART_SetConfig+0x38c>)
 8004c46:	fba3 1302 	umull	r1, r3, r3, r2
 8004c4a:	095b      	lsrs	r3, r3, #5
 8004c4c:	2164      	movs	r1, #100	; 0x64
 8004c4e:	fb01 f303 	mul.w	r3, r1, r3
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	3332      	adds	r3, #50	; 0x32
 8004c58:	4a09      	ldr	r2, [pc, #36]	; (8004c80 <UART_SetConfig+0x38c>)
 8004c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5e:	095b      	lsrs	r3, r3, #5
 8004c60:	f003 020f 	and.w	r2, r3, #15
 8004c64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4432      	add	r2, r6
 8004c6a:	609a      	str	r2, [r3, #8]
}
 8004c6c:	bf00      	nop
 8004c6e:	377c      	adds	r7, #124	; 0x7c
 8004c70:	46bd      	mov	sp, r7
 8004c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c76:	bf00      	nop
 8004c78:	40011000 	.word	0x40011000
 8004c7c:	40011400 	.word	0x40011400
 8004c80:	51eb851f 	.word	0x51eb851f

08004c84 <mavlinhControlConfiguration>:
#define __MAVLINK_CONTROL_CONFIGURATION
/** @brief  mavlinhControlConfiguration
    @return none
*/
void mavlinhControlConfiguration(void)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	af00      	add	r7, sp, #0
	mavlinkMsg_configuration();
 8004c88:	f000 fa60 	bl	800514c <mavlinkMsg_configuration>

	storageFlash_configuration();
 8004c8c:	f002 fa06 	bl	800709c <storageFlash_configuration>

	uartCLI_configuration(&cli);
 8004c90:	4805      	ldr	r0, [pc, #20]	; (8004ca8 <mavlinhControlConfiguration+0x24>)
 8004c92:	f002 fe37 	bl	8007904 <uartCLI_configuration>
	memset(&cli, 0, sizeof(uartCLI_t));
 8004c96:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8004c9a:	2100      	movs	r1, #0
 8004c9c:	4802      	ldr	r0, [pc, #8]	; (8004ca8 <mavlinhControlConfiguration+0x24>)
 8004c9e:	f003 f93f 	bl	8007f20 <memset>

//	__cmdCli()->flagMsgHeartBeat = true;
}
 8004ca2:	bf00      	nop
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	20000bcc 	.word	0x20000bcc

08004cac <mavlinkControlSendHeartBeart>:
/** @brief  mavlinkControlSendHeartBeart
 *  @param[in] channel
    @return none
*/
static void mavlinkControlSendHeartBeart(uint8_t channel)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	71fb      	strb	r3, [r7, #7]
	mavlinkMsg_send_heartbeat(channel);
 8004cb6:	79fb      	ldrb	r3, [r7, #7]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f000 fc5b 	bl	8005574 <mavlinkMsg_send_heartbeat>
}
 8004cbe:	bf00      	nop
 8004cc0:	3708      	adds	r7, #8
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <mavlinkControlSendCmdJumTaget>:
/** @brief  mavlinkControl_sendCmdJumTaget
 *  @param[in] channel
    @return none
*/
static void mavlinkControlSendCmdJumTaget(uint8_t channel)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b082      	sub	sp, #8
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	4603      	mov	r3, r0
 8004cce:	71fb      	strb	r3, [r7, #7]
	mavlinkMsg_send_cmdJumTarget(channel);
 8004cd0:	79fb      	ldrb	r3, [r7, #7]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f000 fc5c 	bl	8005590 <mavlinkMsg_send_cmdJumTarget>
}
 8004cd8:	bf00      	nop
 8004cda:	3708      	adds	r7, #8
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <mavlinkControl_process>:
#define __MAVLINK_CONTROL_PROCESS
/** @brief  mavlinkControl_process
    @return none
*/
void mavlinkControl_process(void)
{
 8004ce0:	b598      	push	{r3, r4, r7, lr}
 8004ce2:	af00      	add	r7, sp, #0
	static uint16_t storageFlashDummyValue = 0;
	static uint16_t storageFlashDummyReadValue = 0;
	static uint16_t storageFlashDummyReadAddress = 0;
	static uint16_t storageFlashDummyAddress = 0;

	uartCLI_process();
 8004ce4:	f003 f808 	bl	8007cf8 <uartCLI_process>

	mavlinkMsg_readData();
 8004ce8:	f000 fc30 	bl	800554c <mavlinkMsg_readData>

	if(HAL_GetTick() - timeSendHeartBeat > 500)
 8004cec:	f7fc ff4c 	bl	8001b88 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	4b3b      	ldr	r3, [pc, #236]	; (8004de0 <mavlinkControl_process+0x100>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004cfc:	d90d      	bls.n	8004d1a <mavlinkControl_process+0x3a>
	{
		timeSendHeartBeat = HAL_GetTick();
 8004cfe:	f7fc ff43 	bl	8001b88 <HAL_GetTick>
 8004d02:	4603      	mov	r3, r0
 8004d04:	4a36      	ldr	r2, [pc, #216]	; (8004de0 <mavlinkControl_process+0x100>)
 8004d06:	6013      	str	r3, [r2, #0]

		if(__cmdCli()->flagMsgHeartBeat == true)
 8004d08:	f002 fe18 	bl	800793c <__cmdCli>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d002      	beq.n	8004d1a <mavlinkControl_process+0x3a>
		mavlinkControlSendHeartBeart(1);
 8004d14:	2001      	movs	r0, #1
 8004d16:	f7ff ffc9 	bl	8004cac <mavlinkControlSendHeartBeart>
	}

	if(__cmdCli()->flagMsgJumTarget == true)
 8004d1a:	f002 fe0f 	bl	800793c <__cmdCli>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	785b      	ldrb	r3, [r3, #1]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d007      	beq.n	8004d36 <mavlinkControl_process+0x56>
	{
		__cmdCli()->flagMsgJumTarget = false;
 8004d26:	f002 fe09 	bl	800793c <__cmdCli>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	705a      	strb	r2, [r3, #1]
		mavlinkControlSendCmdJumTaget(1);
 8004d30:	2001      	movs	r0, #1
 8004d32:	f7ff ffc8 	bl	8004cc6 <mavlinkControlSendCmdJumTaget>
	}

	if(__cmdCli()->flagStorageRead == true)
 8004d36:	f002 fe01 	bl	800793c <__cmdCli>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	78db      	ldrb	r3, [r3, #3]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d020      	beq.n	8004d84 <mavlinkControl_process+0xa4>
	{
		__cmdCli()->flagStorageRead = false;
 8004d42:	f002 fdfb 	bl	800793c <__cmdCli>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2200      	movs	r2, #0
 8004d4a:	70da      	strb	r2, [r3, #3]
		storageFlash_styleGremsy_read(__cmdCli()->value[7], &storageFlashDummyReadValue);
 8004d4c:	f002 fdf6 	bl	800793c <__cmdCli>
 8004d50:	4603      	mov	r3, r0
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	4923      	ldr	r1, [pc, #140]	; (8004de4 <mavlinkControl_process+0x104>)
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f002 fd93 	bl	8007884 <storageFlash_styleGremsy_read>
		printf("\n[storageFlash_test_read] address = 0x%x | value = %d\n", (int)__cmdCli()->value[7], (int)storageFlashDummyReadValue);
 8004d5e:	f002 fded 	bl	800793c <__cmdCli>
 8004d62:	4603      	mov	r3, r0
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	4a1f      	ldr	r2, [pc, #124]	; (8004de4 <mavlinkControl_process+0x104>)
 8004d68:	8812      	ldrh	r2, [r2, #0]
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	481e      	ldr	r0, [pc, #120]	; (8004de8 <mavlinkControl_process+0x108>)
 8004d6e:	f004 f813 	bl	8008d98 <iprintf>
		storageFlashDummyReadAddress++;
 8004d72:	4b1e      	ldr	r3, [pc, #120]	; (8004dec <mavlinkControl_process+0x10c>)
 8004d74:	881b      	ldrh	r3, [r3, #0]
 8004d76:	3301      	adds	r3, #1
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	4b1c      	ldr	r3, [pc, #112]	; (8004dec <mavlinkControl_process+0x10c>)
 8004d7c:	801a      	strh	r2, [r3, #0]
		storageFlashDummyReadValue = 0;
 8004d7e:	4b19      	ldr	r3, [pc, #100]	; (8004de4 <mavlinkControl_process+0x104>)
 8004d80:	2200      	movs	r2, #0
 8004d82:	801a      	strh	r2, [r3, #0]
	}

	if(__cmdCli()->flagStorageWrite == true)
 8004d84:	f002 fdda 	bl	800793c <__cmdCli>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	789b      	ldrb	r3, [r3, #2]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d025      	beq.n	8004ddc <mavlinkControl_process+0xfc>
	{
		__cmdCli()->flagStorageWrite = false;
 8004d90:	f002 fdd4 	bl	800793c <__cmdCli>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2200      	movs	r2, #0
 8004d98:	709a      	strb	r2, [r3, #2]
		storageFlash_styleGremsy_write(__cmdCli()->value[5], __cmdCli()->value[6]);
 8004d9a:	f002 fdcf 	bl	800793c <__cmdCli>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	b29c      	uxth	r4, r3
 8004da4:	f002 fdca 	bl	800793c <__cmdCli>
 8004da8:	4603      	mov	r3, r0
 8004daa:	69db      	ldr	r3, [r3, #28]
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	4619      	mov	r1, r3
 8004db0:	4620      	mov	r0, r4
 8004db2:	f002 fd45 	bl	8007840 <storageFlash_styleGremsy_write>
		printf("\n[storageFlash_test_write] address = 0x%x | value = %d\n", (int)__cmdCli()->value[5], (int)__cmdCli()->value[6]);
 8004db6:	f002 fdc1 	bl	800793c <__cmdCli>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	699c      	ldr	r4, [r3, #24]
 8004dbe:	f002 fdbd 	bl	800793c <__cmdCli>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	69db      	ldr	r3, [r3, #28]
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	4621      	mov	r1, r4
 8004dca:	4809      	ldr	r0, [pc, #36]	; (8004df0 <mavlinkControl_process+0x110>)
 8004dcc:	f003 ffe4 	bl	8008d98 <iprintf>
		storageFlashDummyAddress++;
 8004dd0:	4b08      	ldr	r3, [pc, #32]	; (8004df4 <mavlinkControl_process+0x114>)
 8004dd2:	881b      	ldrh	r3, [r3, #0]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	4b06      	ldr	r3, [pc, #24]	; (8004df4 <mavlinkControl_process+0x114>)
 8004dda:	801a      	strh	r2, [r3, #0]
	}
}
 8004ddc:	bf00      	nop
 8004dde:	bd98      	pop	{r3, r4, r7, pc}
 8004de0:	20000228 	.word	0x20000228
 8004de4:	2000022c 	.word	0x2000022c
 8004de8:	0800d988 	.word	0x0800d988
 8004dec:	2000022e 	.word	0x2000022e
 8004df0:	0800d9c0 	.word	0x0800d9c0
 8004df4:	20000230 	.word	0x20000230

08004df8 <mavlink_msg_heartbeat_pack_chan>:
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_heartbeat_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t type,uint8_t autopilot,uint8_t base_mode,uint32_t custom_mode,uint8_t system_status)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b08a      	sub	sp, #40	; 0x28
 8004dfc:	af04      	add	r7, sp, #16
 8004dfe:	603b      	str	r3, [r7, #0]
 8004e00:	4603      	mov	r3, r0
 8004e02:	71fb      	strb	r3, [r7, #7]
 8004e04:	460b      	mov	r3, r1
 8004e06:	71bb      	strb	r3, [r7, #6]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	717b      	strb	r3, [r7, #5]
    _mav_put_uint8_t(buf, 8, 3);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#else
    mavlink_heartbeat_t packet;
    packet.custom_mode = custom_mode;
 8004e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e0e:	60fb      	str	r3, [r7, #12]
    packet.type = type;
 8004e10:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004e14:	743b      	strb	r3, [r7, #16]
    packet.autopilot = autopilot;
 8004e16:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004e1a:	747b      	strb	r3, [r7, #17]
    packet.base_mode = base_mode;
 8004e1c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e20:	74bb      	strb	r3, [r7, #18]
    packet.system_status = system_status;
 8004e22:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004e26:	74fb      	strb	r3, [r7, #19]
    packet.mavlink_version = 3;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	753b      	strb	r3, [r7, #20]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	3310      	adds	r3, #16
 8004e30:	f107 010c 	add.w	r1, r7, #12
 8004e34:	2209      	movs	r2, #9
 8004e36:	4618      	mov	r0, r3
 8004e38:	f003 f864 	bl	8007f04 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	725a      	strb	r2, [r3, #9]
 8004e42:	2200      	movs	r2, #0
 8004e44:	729a      	strb	r2, [r3, #10]
 8004e46:	2200      	movs	r2, #0
 8004e48:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, MAVLINK_MSG_ID_HEARTBEAT_MIN_LEN, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
 8004e4a:	797b      	ldrb	r3, [r7, #5]
 8004e4c:	79ba      	ldrb	r2, [r7, #6]
 8004e4e:	79f9      	ldrb	r1, [r7, #7]
 8004e50:	2032      	movs	r0, #50	; 0x32
 8004e52:	9002      	str	r0, [sp, #8]
 8004e54:	2009      	movs	r0, #9
 8004e56:	9001      	str	r0, [sp, #4]
 8004e58:	2009      	movs	r0, #9
 8004e5a:	9000      	str	r0, [sp, #0]
 8004e5c:	6838      	ldr	r0, [r7, #0]
 8004e5e:	f001 fa05 	bl	800626c <mavlink_finalize_message_chan>
 8004e62:	4603      	mov	r3, r0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3718      	adds	r7, #24
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <mavlink_msg_heartbeat_encode_chan>:
 * @param chan The MAVLink channel this message will be sent over
 * @param msg The MAVLink message to compress the data into
 * @param heartbeat C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_heartbeat_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_heartbeat_t* heartbeat)
{
 8004e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e6e:	b089      	sub	sp, #36	; 0x24
 8004e70:	af06      	add	r7, sp, #24
 8004e72:	603b      	str	r3, [r7, #0]
 8004e74:	4603      	mov	r3, r0
 8004e76:	71fb      	strb	r3, [r7, #7]
 8004e78:	460b      	mov	r3, r1
 8004e7a:	71bb      	strb	r3, [r7, #6]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	717b      	strb	r3, [r7, #5]
    return mavlink_msg_heartbeat_pack_chan(system_id, component_id, chan, msg, heartbeat->type, heartbeat->autopilot, heartbeat->base_mode, heartbeat->custom_mode, heartbeat->system_status);
 8004e80:	6a3b      	ldr	r3, [r7, #32]
 8004e82:	791b      	ldrb	r3, [r3, #4]
 8004e84:	6a3a      	ldr	r2, [r7, #32]
 8004e86:	7952      	ldrb	r2, [r2, #5]
 8004e88:	6a39      	ldr	r1, [r7, #32]
 8004e8a:	7989      	ldrb	r1, [r1, #6]
 8004e8c:	6a38      	ldr	r0, [r7, #32]
 8004e8e:	6800      	ldr	r0, [r0, #0]
 8004e90:	6a3c      	ldr	r4, [r7, #32]
 8004e92:	79e4      	ldrb	r4, [r4, #7]
 8004e94:	f897 c005 	ldrb.w	ip, [r7, #5]
 8004e98:	79be      	ldrb	r6, [r7, #6]
 8004e9a:	79fd      	ldrb	r5, [r7, #7]
 8004e9c:	9404      	str	r4, [sp, #16]
 8004e9e:	9003      	str	r0, [sp, #12]
 8004ea0:	9102      	str	r1, [sp, #8]
 8004ea2:	9201      	str	r2, [sp, #4]
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	4662      	mov	r2, ip
 8004eaa:	4631      	mov	r1, r6
 8004eac:	4628      	mov	r0, r5
 8004eae:	f7ff ffa3 	bl	8004df8 <mavlink_msg_heartbeat_pack_chan>
 8004eb2:	4603      	mov	r3, r0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ebc <mavlink_msg_heartbeat_decode>:
 *
 * @param msg The message to decode
 * @param heartbeat C-struct to decode the message contents into
 */
static inline void mavlink_msg_heartbeat_decode(const mavlink_message_t* msg, mavlink_heartbeat_t* heartbeat)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
    heartbeat->autopilot = mavlink_msg_heartbeat_get_autopilot(msg);
    heartbeat->base_mode = mavlink_msg_heartbeat_get_base_mode(msg);
    heartbeat->system_status = mavlink_msg_heartbeat_get_system_status(msg);
    heartbeat->mavlink_version = mavlink_msg_heartbeat_get_mavlink_version(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_HEARTBEAT_LEN? msg->len : MAVLINK_MSG_ID_HEARTBEAT_LEN;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	78db      	ldrb	r3, [r3, #3]
 8004eca:	2b09      	cmp	r3, #9
 8004ecc:	bf28      	it	cs
 8004ece:	2309      	movcs	r3, #9
 8004ed0:	73fb      	strb	r3, [r7, #15]
        memset(heartbeat, 0, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 8004ed2:	2209      	movs	r2, #9
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	6838      	ldr	r0, [r7, #0]
 8004ed8:	f003 f822 	bl	8007f20 <memset>
    memcpy(heartbeat, _MAV_PAYLOAD(msg), len);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	3310      	adds	r3, #16
 8004ee0:	7bfa      	ldrb	r2, [r7, #15]
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	6838      	ldr	r0, [r7, #0]
 8004ee6:	f003 f80d 	bl	8007f04 <memcpy>
#endif
}
 8004eea:	bf00      	nop
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <mavlink_msg_command_long_pack_chan>:
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_command_long_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint16_t command,uint8_t confirmation,float param1,float param2,float param3,float param4,float param5,float param6,float param7)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b098      	sub	sp, #96	; 0x60
 8004ef6:	af04      	add	r7, sp, #16
 8004ef8:	623b      	str	r3, [r7, #32]
 8004efa:	ed87 0a07 	vstr	s0, [r7, #28]
 8004efe:	edc7 0a06 	vstr	s1, [r7, #24]
 8004f02:	ed87 1a05 	vstr	s2, [r7, #20]
 8004f06:	edc7 1a04 	vstr	s3, [r7, #16]
 8004f0a:	ed87 2a03 	vstr	s4, [r7, #12]
 8004f0e:	edc7 2a02 	vstr	s5, [r7, #8]
 8004f12:	ed87 3a01 	vstr	s6, [r7, #4]
 8004f16:	4603      	mov	r3, r0
 8004f18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004f22:	4613      	mov	r3, r2
 8004f24:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    _mav_put_uint8_t(buf, 32, confirmation);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_COMMAND_LONG_LEN);
#else
    mavlink_command_long_t packet;
    packet.param1 = param1;
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    packet.param2 = param2;
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	633b      	str	r3, [r7, #48]	; 0x30
    packet.param3 = param3;
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	637b      	str	r3, [r7, #52]	; 0x34
    packet.param4 = param4;
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	63bb      	str	r3, [r7, #56]	; 0x38
    packet.param5 = param5;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
    packet.param6 = param6;
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	643b      	str	r3, [r7, #64]	; 0x40
    packet.param7 = param7;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	647b      	str	r3, [r7, #68]	; 0x44
    packet.command = command;
 8004f44:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8004f48:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    packet.target_system = target_system;
 8004f4c:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8004f50:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
    packet.target_component = target_component;
 8004f54:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8004f58:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    packet.confirmation = confirmation;
 8004f5c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8004f60:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_COMMAND_LONG_LEN);
 8004f64:	6a3b      	ldr	r3, [r7, #32]
 8004f66:	3310      	adds	r3, #16
 8004f68:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8004f6c:	2221      	movs	r2, #33	; 0x21
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f002 ffc8 	bl	8007f04 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_COMMAND_LONG;
 8004f74:	6a3b      	ldr	r3, [r7, #32]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f042 024c 	orr.w	r2, r2, #76	; 0x4c
 8004f7c:	725a      	strb	r2, [r3, #9]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	729a      	strb	r2, [r3, #10]
 8004f82:	2200      	movs	r2, #0
 8004f84:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, MAVLINK_MSG_ID_COMMAND_LONG_MIN_LEN, MAVLINK_MSG_ID_COMMAND_LONG_LEN, MAVLINK_MSG_ID_COMMAND_LONG_CRC);
 8004f86:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004f8a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004f8e:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8004f92:	2098      	movs	r0, #152	; 0x98
 8004f94:	9002      	str	r0, [sp, #8]
 8004f96:	2021      	movs	r0, #33	; 0x21
 8004f98:	9001      	str	r0, [sp, #4]
 8004f9a:	2021      	movs	r0, #33	; 0x21
 8004f9c:	9000      	str	r0, [sp, #0]
 8004f9e:	6a38      	ldr	r0, [r7, #32]
 8004fa0:	f001 f964 	bl	800626c <mavlink_finalize_message_chan>
 8004fa4:	4603      	mov	r3, r0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3750      	adds	r7, #80	; 0x50
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <mavlink_msg_command_long_encode_chan>:
 * @param chan The MAVLink channel this message will be sent over
 * @param msg The MAVLink message to compress the data into
 * @param command_long C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_command_long_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_command_long_t* command_long)
{
 8004fae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fb0:	b087      	sub	sp, #28
 8004fb2:	af04      	add	r7, sp, #16
 8004fb4:	603b      	str	r3, [r7, #0]
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	71fb      	strb	r3, [r7, #7]
 8004fba:	460b      	mov	r3, r1
 8004fbc:	71bb      	strb	r3, [r7, #6]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	717b      	strb	r3, [r7, #5]
    return mavlink_msg_command_long_pack_chan(system_id, component_id, chan, msg, command_long->target_system, command_long->target_component, command_long->command, command_long->confirmation, command_long->param1, command_long->param2, command_long->param3, command_long->param4, command_long->param5, command_long->param6, command_long->param7);
 8004fc2:	6a3b      	ldr	r3, [r7, #32]
 8004fc4:	7f9b      	ldrb	r3, [r3, #30]
 8004fc6:	6a3a      	ldr	r2, [r7, #32]
 8004fc8:	7fd2      	ldrb	r2, [r2, #31]
 8004fca:	6a39      	ldr	r1, [r7, #32]
 8004fcc:	8b89      	ldrh	r1, [r1, #28]
 8004fce:	6a38      	ldr	r0, [r7, #32]
 8004fd0:	f890 0020 	ldrb.w	r0, [r0, #32]
 8004fd4:	6a3c      	ldr	r4, [r7, #32]
 8004fd6:	edd4 7a00 	vldr	s15, [r4]
 8004fda:	6a3c      	ldr	r4, [r7, #32]
 8004fdc:	ed94 7a01 	vldr	s14, [r4, #4]
 8004fe0:	6a3c      	ldr	r4, [r7, #32]
 8004fe2:	edd4 6a02 	vldr	s13, [r4, #8]
 8004fe6:	6a3c      	ldr	r4, [r7, #32]
 8004fe8:	ed94 6a03 	vldr	s12, [r4, #12]
 8004fec:	6a3c      	ldr	r4, [r7, #32]
 8004fee:	edd4 5a04 	vldr	s11, [r4, #16]
 8004ff2:	6a3c      	ldr	r4, [r7, #32]
 8004ff4:	ed94 5a05 	vldr	s10, [r4, #20]
 8004ff8:	6a3c      	ldr	r4, [r7, #32]
 8004ffa:	edd4 4a06 	vldr	s9, [r4, #24]
 8004ffe:	797e      	ldrb	r6, [r7, #5]
 8005000:	79bd      	ldrb	r5, [r7, #6]
 8005002:	79fc      	ldrb	r4, [r7, #7]
 8005004:	9003      	str	r0, [sp, #12]
 8005006:	9102      	str	r1, [sp, #8]
 8005008:	9201      	str	r2, [sp, #4]
 800500a:	9300      	str	r3, [sp, #0]
 800500c:	eeb0 3a64 	vmov.f32	s6, s9
 8005010:	eef0 2a45 	vmov.f32	s5, s10
 8005014:	eeb0 2a65 	vmov.f32	s4, s11
 8005018:	eef0 1a46 	vmov.f32	s3, s12
 800501c:	eeb0 1a66 	vmov.f32	s2, s13
 8005020:	eef0 0a47 	vmov.f32	s1, s14
 8005024:	eeb0 0a67 	vmov.f32	s0, s15
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	4632      	mov	r2, r6
 800502c:	4629      	mov	r1, r5
 800502e:	4620      	mov	r0, r4
 8005030:	f7ff ff5f 	bl	8004ef2 <mavlink_msg_command_long_pack_chan>
 8005034:	4603      	mov	r3, r0
}
 8005036:	4618      	mov	r0, r3
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800503e <mavlink_msg_command_ack_decode>:
 *
 * @param msg The message to decode
 * @param command_ack C-struct to decode the message contents into
 */
static inline void mavlink_msg_command_ack_decode(const mavlink_message_t* msg, mavlink_command_ack_t* command_ack)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b084      	sub	sp, #16
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
 8005046:	6039      	str	r1, [r7, #0]
    command_ack->progress = mavlink_msg_command_ack_get_progress(msg);
    command_ack->result_param2 = mavlink_msg_command_ack_get_result_param2(msg);
    command_ack->target_system = mavlink_msg_command_ack_get_target_system(msg);
    command_ack->target_component = mavlink_msg_command_ack_get_target_component(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_COMMAND_ACK_LEN? msg->len : MAVLINK_MSG_ID_COMMAND_ACK_LEN;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	78db      	ldrb	r3, [r3, #3]
 800504c:	2b0a      	cmp	r3, #10
 800504e:	bf28      	it	cs
 8005050:	230a      	movcs	r3, #10
 8005052:	73fb      	strb	r3, [r7, #15]
        memset(command_ack, 0, MAVLINK_MSG_ID_COMMAND_ACK_LEN);
 8005054:	220a      	movs	r2, #10
 8005056:	2100      	movs	r1, #0
 8005058:	6838      	ldr	r0, [r7, #0]
 800505a:	f002 ff61 	bl	8007f20 <memset>
    memcpy(command_ack, _MAV_PAYLOAD(msg), len);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	3310      	adds	r3, #16
 8005062:	7bfa      	ldrb	r2, [r7, #15]
 8005064:	4619      	mov	r1, r3
 8005066:	6838      	ldr	r0, [r7, #0]
 8005068:	f002 ff4c 	bl	8007f04 <memcpy>
#endif
}
 800506c:	bf00      	nop
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <mavlink_msg_log_request_data_decode>:
 *
 * @param msg The message to decode
 * @param log_request_data C-struct to decode the message contents into
 */
static inline void mavlink_msg_log_request_data_decode(const mavlink_message_t* msg, mavlink_log_request_data_t* log_request_data)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
    log_request_data->count = mavlink_msg_log_request_data_get_count(msg);
    log_request_data->id = mavlink_msg_log_request_data_get_id(msg);
    log_request_data->target_system = mavlink_msg_log_request_data_get_target_system(msg);
    log_request_data->target_component = mavlink_msg_log_request_data_get_target_component(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_LOG_REQUEST_DATA_LEN? msg->len : MAVLINK_MSG_ID_LOG_REQUEST_DATA_LEN;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	78db      	ldrb	r3, [r3, #3]
 8005082:	2b0c      	cmp	r3, #12
 8005084:	bf28      	it	cs
 8005086:	230c      	movcs	r3, #12
 8005088:	73fb      	strb	r3, [r7, #15]
        memset(log_request_data, 0, MAVLINK_MSG_ID_LOG_REQUEST_DATA_LEN);
 800508a:	220c      	movs	r2, #12
 800508c:	2100      	movs	r1, #0
 800508e:	6838      	ldr	r0, [r7, #0]
 8005090:	f002 ff46 	bl	8007f20 <memset>
    memcpy(log_request_data, _MAV_PAYLOAD(msg), len);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	3310      	adds	r3, #16
 8005098:	7bfa      	ldrb	r2, [r7, #15]
 800509a:	4619      	mov	r1, r3
 800509c:	6838      	ldr	r0, [r7, #0]
 800509e:	f002 ff31 	bl	8007f04 <memcpy>
#endif
}
 80050a2:	bf00      	nop
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <mavlink_msg_log_data_decode>:
 *
 * @param msg The message to decode
 * @param log_data C-struct to decode the message contents into
 */
static inline void mavlink_msg_log_data_decode(const mavlink_message_t* msg, mavlink_log_data_t* log_data)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b084      	sub	sp, #16
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
 80050b2:	6039      	str	r1, [r7, #0]
    log_data->ofs = mavlink_msg_log_data_get_ofs(msg);
    log_data->id = mavlink_msg_log_data_get_id(msg);
    log_data->count = mavlink_msg_log_data_get_count(msg);
    mavlink_msg_log_data_get_data(msg, log_data->data);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_LOG_DATA_LEN? msg->len : MAVLINK_MSG_ID_LOG_DATA_LEN;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	78db      	ldrb	r3, [r3, #3]
 80050b8:	2b61      	cmp	r3, #97	; 0x61
 80050ba:	bf28      	it	cs
 80050bc:	2361      	movcs	r3, #97	; 0x61
 80050be:	73fb      	strb	r3, [r7, #15]
        memset(log_data, 0, MAVLINK_MSG_ID_LOG_DATA_LEN);
 80050c0:	2261      	movs	r2, #97	; 0x61
 80050c2:	2100      	movs	r1, #0
 80050c4:	6838      	ldr	r0, [r7, #0]
 80050c6:	f002 ff2b 	bl	8007f20 <memset>
    memcpy(log_data, _MAV_PAYLOAD(msg), len);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	3310      	adds	r3, #16
 80050ce:	7bfa      	ldrb	r2, [r7, #15]
 80050d0:	4619      	mov	r1, r3
 80050d2:	6838      	ldr	r0, [r7, #0]
 80050d4:	f002 ff16 	bl	8007f04 <memcpy>
#endif
}
 80050d8:	bf00      	nop
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <mavlink_msg_log_request_end_decode>:
 *
 * @param msg The message to decode
 * @param log_request_end C-struct to decode the message contents into
 */
static inline void mavlink_msg_log_request_end_decode(const mavlink_message_t* msg, mavlink_log_request_end_t* log_request_end)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    log_request_end->target_system = mavlink_msg_log_request_end_get_target_system(msg);
    log_request_end->target_component = mavlink_msg_log_request_end_get_target_component(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_LOG_REQUEST_END_LEN? msg->len : MAVLINK_MSG_ID_LOG_REQUEST_END_LEN;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	78db      	ldrb	r3, [r3, #3]
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	bf28      	it	cs
 80050f2:	2302      	movcs	r3, #2
 80050f4:	73fb      	strb	r3, [r7, #15]
        memset(log_request_end, 0, MAVLINK_MSG_ID_LOG_REQUEST_END_LEN);
 80050f6:	2202      	movs	r2, #2
 80050f8:	2100      	movs	r1, #0
 80050fa:	6838      	ldr	r0, [r7, #0]
 80050fc:	f002 ff10 	bl	8007f20 <memset>
    memcpy(log_request_end, _MAV_PAYLOAD(msg), len);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	3310      	adds	r3, #16
 8005104:	7bfa      	ldrb	r2, [r7, #15]
 8005106:	4619      	mov	r1, r3
 8005108:	6838      	ldr	r0, [r7, #0]
 800510a:	f002 fefb 	bl	8007f04 <memcpy>
#endif
}
 800510e:	bf00      	nop
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <mavlink_msg_mount_orientation_decode>:
 *
 * @param msg The message to decode
 * @param mount_orientation C-struct to decode the message contents into
 */
static inline void mavlink_msg_mount_orientation_decode(const mavlink_message_t* msg, mavlink_mount_orientation_t* mount_orientation)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b084      	sub	sp, #16
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
 800511e:	6039      	str	r1, [r7, #0]
    mount_orientation->roll = mavlink_msg_mount_orientation_get_roll(msg);
    mount_orientation->pitch = mavlink_msg_mount_orientation_get_pitch(msg);
    mount_orientation->yaw = mavlink_msg_mount_orientation_get_yaw(msg);
    mount_orientation->yaw_absolute = mavlink_msg_mount_orientation_get_yaw_absolute(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_MOUNT_ORIENTATION_LEN? msg->len : MAVLINK_MSG_ID_MOUNT_ORIENTATION_LEN;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	78db      	ldrb	r3, [r3, #3]
 8005124:	2b14      	cmp	r3, #20
 8005126:	bf28      	it	cs
 8005128:	2314      	movcs	r3, #20
 800512a:	73fb      	strb	r3, [r7, #15]
        memset(mount_orientation, 0, MAVLINK_MSG_ID_MOUNT_ORIENTATION_LEN);
 800512c:	2214      	movs	r2, #20
 800512e:	2100      	movs	r1, #0
 8005130:	6838      	ldr	r0, [r7, #0]
 8005132:	f002 fef5 	bl	8007f20 <memset>
    memcpy(mount_orientation, _MAV_PAYLOAD(msg), len);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	3310      	adds	r3, #16
 800513a:	7bfa      	ldrb	r2, [r7, #15]
 800513c:	4619      	mov	r1, r3
 800513e:	6838      	ldr	r0, [r7, #0]
 8005140:	f002 fee0 	bl	8007f04 <memcpy>
#endif
}
 8005144:	bf00      	nop
 8005146:	3710      	adds	r7, #16
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <mavlinkMsg_configuration>:
#define __MAVLINK_MSG_CONFIGURATION
/** @brief  mavlinkMsg_configuration
    @return none
*/
void mavlinkMsg_configuration(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	af00      	add	r7, sp, #0
	mavlinkProtocol_init();
 8005150:	f001 fd46 	bl	8006be0 <mavlinkProtocol_init>
}
 8005154:	bf00      	nop
 8005156:	bd80      	pop	{r7, pc}

08005158 <mavlinkMsg_sendHeartBeat>:
#define __MAVLINK_MSG_HANDLE_FUNCTION
/** @brief  mavlinkMsg_sendHeartBeat
    @return none
*/
static void mavlinkMsg_sendHeartBeat(mavlink_channel_t channel)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	f5ad 7d1c 	sub.w	sp, sp, #624	; 0x270
 800515e:	af02      	add	r7, sp, #8
 8005160:	4602      	mov	r2, r0
 8005162:	1dfb      	adds	r3, r7, #7
 8005164:	701a      	strb	r2, [r3, #0]
	mavlink_message_t 	msg;
	mavlink_heartbeat_t heartBeat;
	uint16_t 			len = 0;
 8005166:	2300      	movs	r3, #0
 8005168:	f8a7 3266 	strh.w	r3, [r7, #614]	; 0x266

	heartBeat.type          = MAV_TYPE_ONBOARD_TESTER;
 800516c:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8005170:	227b      	movs	r2, #123	; 0x7b
 8005172:	711a      	strb	r2, [r3, #4]
	heartBeat.autopilot     = MAV_AUTOPILOT_INVALID;
 8005174:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8005178:	2208      	movs	r2, #8
 800517a:	715a      	strb	r2, [r3, #5]
	heartBeat.base_mode     = 0;
 800517c:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8005180:	2200      	movs	r2, #0
 8005182:	719a      	strb	r2, [r3, #6]
    heartBeat.custom_mode   = 0;
 8005184:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8005188:	2200      	movs	r2, #0
 800518a:	601a      	str	r2, [r3, #0]
    heartBeat.system_status = MAV_STATE_ACTIVE;
 800518c:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8005190:	2204      	movs	r2, #4
 8005192:	71da      	strb	r2, [r3, #7]
    /*
      save and restore sequence number for chan, as it is used by
      generated encode functions
     */

    mavlink_status_t    *chan_status = mavlink_get_channel_status(channel);
 8005194:	1dfb      	adds	r3, r7, #7
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	4618      	mov	r0, r3
 800519a:	f000 fd79 	bl	8005c90 <mavlink_get_channel_status>
 800519e:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
    uint8_t saved_seq = chan_status->current_tx_seq;
 80051a2:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80051a6:	799b      	ldrb	r3, [r3, #6]
 80051a8:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f

    mavlink_msg_heartbeat_encode_chan(  1,
 80051ac:	f507 7198 	add.w	r1, r7, #304	; 0x130
 80051b0:	1dfb      	adds	r3, r7, #7
 80051b2:	781a      	ldrb	r2, [r3, #0]
 80051b4:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80051b8:	9300      	str	r3, [sp, #0]
 80051ba:	460b      	mov	r3, r1
 80051bc:	21fa      	movs	r1, #250	; 0xfa
 80051be:	2001      	movs	r0, #1
 80051c0:	f7ff fe54 	bl	8004e6c <mavlink_msg_heartbeat_encode_chan>
                                        MAV_COMP_ID_SYSTEM_CONTROL,
                                        channel,
                                        &msg,
                                        &heartBeat);

    chan_status->current_tx_seq = saved_seq;
 80051c4:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80051c8:	f897 225f 	ldrb.w	r2, [r7, #607]	; 0x25f
 80051cc:	719a      	strb	r2, [r3, #6]

    uint8_t msgbuf[MAVLINK_MAX_PACKET_LEN];
    len = mavlink_msg_to_send_buffer(msgbuf, &msg);
 80051ce:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80051d2:	f107 030c 	add.w	r3, r7, #12
 80051d6:	4611      	mov	r1, r2
 80051d8:	4618      	mov	r0, r3
 80051da:	f001 f87b 	bl	80062d4 <mavlink_msg_to_send_buffer>
 80051de:	4603      	mov	r3, r0
 80051e0:	f8a7 3266 	strh.w	r3, [r7, #614]	; 0x266

    if(len > 0)
 80051e4:	f8b7 3266 	ldrh.w	r3, [r7, #614]	; 0x266
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d008      	beq.n	80051fe <mavlinkMsg_sendHeartBeat+0xa6>
    {
        _mavlink_send_uart(channel,(const char*) msgbuf, len);
 80051ec:	f8b7 2266 	ldrh.w	r2, [r7, #614]	; 0x266
 80051f0:	f107 010c 	add.w	r1, r7, #12
 80051f4:	1dfb      	adds	r3, r7, #7
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	4618      	mov	r0, r3
 80051fa:	f001 fcbd 	bl	8006b78 <_mavlink_send_uart>
    }
}
 80051fe:	bf00      	nop
 8005200:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <mavlinkMsg_sendCmdLong>:
									uint16_t command,
									uint8_t target_system,
									uint8_t target_component,
									uint8_t confirmation,
									mavlink_channel_t channel)
{
 8005208:	b5b0      	push	{r4, r5, r7, lr}
 800520a:	f5ad 7d2a 	sub.w	sp, sp, #680	; 0x2a8
 800520e:	af02      	add	r7, sp, #8
 8005210:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8005214:	ed84 0a00 	vstr	s0, [r4]
 8005218:	f107 0420 	add.w	r4, r7, #32
 800521c:	edc4 0a00 	vstr	s1, [r4]
 8005220:	f107 041c 	add.w	r4, r7, #28
 8005224:	ed84 1a00 	vstr	s2, [r4]
 8005228:	f107 0418 	add.w	r4, r7, #24
 800522c:	edc4 1a00 	vstr	s3, [r4]
 8005230:	f107 0414 	add.w	r4, r7, #20
 8005234:	ed84 2a00 	vstr	s4, [r4]
 8005238:	f107 0410 	add.w	r4, r7, #16
 800523c:	edc4 2a00 	vstr	s5, [r4]
 8005240:	f107 040c 	add.w	r4, r7, #12
 8005244:	ed84 3a00 	vstr	s6, [r4]
 8005248:	4605      	mov	r5, r0
 800524a:	460c      	mov	r4, r1
 800524c:	4610      	mov	r0, r2
 800524e:	4619      	mov	r1, r3
 8005250:	f107 030a 	add.w	r3, r7, #10
 8005254:	462a      	mov	r2, r5
 8005256:	801a      	strh	r2, [r3, #0]
 8005258:	f107 0309 	add.w	r3, r7, #9
 800525c:	4622      	mov	r2, r4
 800525e:	701a      	strb	r2, [r3, #0]
 8005260:	f107 0308 	add.w	r3, r7, #8
 8005264:	4602      	mov	r2, r0
 8005266:	701a      	strb	r2, [r3, #0]
 8005268:	1dfb      	adds	r3, r7, #7
 800526a:	460a      	mov	r2, r1
 800526c:	701a      	strb	r2, [r3, #0]
	mavlink_message_t 			msg;
	mavlink_command_long_t 		command_long;
	uint16_t 					len = 0;
 800526e:	2300      	movs	r3, #0
 8005270:	f8a7 329e 	strh.w	r3, [r7, #670]	; 0x29e

	command_long.command = command;
 8005274:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8005278:	f107 020a 	add.w	r2, r7, #10
 800527c:	8812      	ldrh	r2, [r2, #0]
 800527e:	839a      	strh	r2, [r3, #28]
	command_long.confirmation = confirmation;
 8005280:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8005284:	1dfa      	adds	r2, r7, #7
 8005286:	7812      	ldrb	r2, [r2, #0]
 8005288:	f883 2020 	strb.w	r2, [r3, #32]
	command_long.param1 = param1;
 800528c:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8005290:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005294:	6812      	ldr	r2, [r2, #0]
 8005296:	601a      	str	r2, [r3, #0]
	command_long.param2 = param2;
 8005298:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800529c:	f107 0220 	add.w	r2, r7, #32
 80052a0:	6812      	ldr	r2, [r2, #0]
 80052a2:	605a      	str	r2, [r3, #4]
	command_long.param3 = param3;
 80052a4:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80052a8:	f107 021c 	add.w	r2, r7, #28
 80052ac:	6812      	ldr	r2, [r2, #0]
 80052ae:	609a      	str	r2, [r3, #8]
	command_long.param4 = param4;
 80052b0:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80052b4:	f107 0218 	add.w	r2, r7, #24
 80052b8:	6812      	ldr	r2, [r2, #0]
 80052ba:	60da      	str	r2, [r3, #12]
	command_long.param5 = param5;
 80052bc:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80052c0:	f107 0214 	add.w	r2, r7, #20
 80052c4:	6812      	ldr	r2, [r2, #0]
 80052c6:	611a      	str	r2, [r3, #16]
	command_long.param6 = param6;
 80052c8:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80052cc:	f107 0210 	add.w	r2, r7, #16
 80052d0:	6812      	ldr	r2, [r2, #0]
 80052d2:	615a      	str	r2, [r3, #20]
	command_long.param7 = param7;
 80052d4:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80052d8:	f107 020c 	add.w	r2, r7, #12
 80052dc:	6812      	ldr	r2, [r2, #0]
 80052de:	619a      	str	r2, [r3, #24]
	command_long.target_component = target_component;
 80052e0:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80052e4:	f107 0208 	add.w	r2, r7, #8
 80052e8:	7812      	ldrb	r2, [r2, #0]
 80052ea:	77da      	strb	r2, [r3, #31]
	command_long.target_system = target_system;
 80052ec:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80052f0:	f107 0209 	add.w	r2, r7, #9
 80052f4:	7812      	ldrb	r2, [r2, #0]
 80052f6:	779a      	strb	r2, [r3, #30]
    /*
      save and restore sequence number for chan, as it is used by
      generated encode functions
     */

    mavlink_status_t    *chan_status = mavlink_get_channel_status(channel);
 80052f8:	f897 32b0 	ldrb.w	r3, [r7, #688]	; 0x2b0
 80052fc:	4618      	mov	r0, r3
 80052fe:	f000 fcc7 	bl	8005c90 <mavlink_get_channel_status>
 8005302:	f8c7 0298 	str.w	r0, [r7, #664]	; 0x298
    uint8_t saved_seq = chan_status->current_tx_seq;
 8005306:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800530a:	799b      	ldrb	r3, [r3, #6]
 800530c:	f887 3297 	strb.w	r3, [r7, #663]	; 0x297

    /// encode msg
    mavlink_msg_command_long_encode_chan(1, MAV_COMP_ID_SYSTEM_CONTROL, channel, &msg, &command_long);
 8005310:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 8005314:	f897 22b0 	ldrb.w	r2, [r7, #688]	; 0x2b0
 8005318:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	460b      	mov	r3, r1
 8005320:	21fa      	movs	r1, #250	; 0xfa
 8005322:	2001      	movs	r0, #1
 8005324:	f7ff fe43 	bl	8004fae <mavlink_msg_command_long_encode_chan>


    chan_status->current_tx_seq = saved_seq;
 8005328:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800532c:	f897 2297 	ldrb.w	r2, [r7, #663]	; 0x297
 8005330:	719a      	strb	r2, [r3, #6]

    uint8_t msgbuf[MAVLINK_MAX_PACKET_LEN];
    len = mavlink_msg_to_send_buffer(msgbuf, &msg);
 8005332:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8005336:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800533a:	4611      	mov	r1, r2
 800533c:	4618      	mov	r0, r3
 800533e:	f000 ffc9 	bl	80062d4 <mavlink_msg_to_send_buffer>
 8005342:	4603      	mov	r3, r0
 8005344:	f8a7 329e 	strh.w	r3, [r7, #670]	; 0x29e

    if(len > 0)
 8005348:	f8b7 329e 	ldrh.w	r3, [r7, #670]	; 0x29e
 800534c:	2b00      	cmp	r3, #0
 800534e:	d008      	beq.n	8005362 <mavlinkMsg_sendCmdLong+0x15a>
    {
        _mavlink_send_uart(channel,(const char*) msgbuf, len);
 8005350:	f8b7 229e 	ldrh.w	r2, [r7, #670]	; 0x29e
 8005354:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8005358:	f897 32b0 	ldrb.w	r3, [r7, #688]	; 0x2b0
 800535c:	4618      	mov	r0, r3
 800535e:	f001 fc0b 	bl	8006b78 <_mavlink_send_uart>
    }
}
 8005362:	bf00      	nop
 8005364:	f507 7728 	add.w	r7, r7, #672	; 0x2a0
 8005368:	46bd      	mov	sp, r7
 800536a:	bdb0      	pop	{r4, r5, r7, pc}

0800536c <mavlinkMsg_RecieverProcess>:

/** @brief  mavlinkMsg_RecieverProcess
    @return none
*/
static void mavlinkMsg_RecieverProcess(mav_state_t *mavState, mavlinkMsgHandle_t *handle, mavlink_channel_t channel)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b0ae      	sub	sp, #184	; 0xb8
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	4613      	mov	r3, r2
 8005378:	71fb      	strb	r3, [r7, #7]
	uint32_t msgId = mavState->rxmsg.msgid;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8005382:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

	switch(msgId)
 8005386:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800538a:	f240 1209 	movw	r2, #265	; 0x109
 800538e:	4293      	cmp	r3, r2
 8005390:	f000 809e 	beq.w	80054d0 <mavlinkMsg_RecieverProcess+0x164>
 8005394:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005398:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 800539c:	f080 80cb 	bcs.w	8005536 <mavlinkMsg_RecieverProcess+0x1ca>
 80053a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80053a4:	2b7a      	cmp	r3, #122	; 0x7a
 80053a6:	d07c      	beq.n	80054a2 <mavlinkMsg_RecieverProcess+0x136>
 80053a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80053ac:	2b7a      	cmp	r3, #122	; 0x7a
 80053ae:	f200 80c2 	bhi.w	8005536 <mavlinkMsg_RecieverProcess+0x1ca>
 80053b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80053b6:	2b78      	cmp	r3, #120	; 0x78
 80053b8:	d03f      	beq.n	800543a <mavlinkMsg_RecieverProcess+0xce>
 80053ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80053be:	2b78      	cmp	r3, #120	; 0x78
 80053c0:	f200 80b9 	bhi.w	8005536 <mavlinkMsg_RecieverProcess+0x1ca>
 80053c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80053c8:	2b77      	cmp	r3, #119	; 0x77
 80053ca:	d050      	beq.n	800546e <mavlinkMsg_RecieverProcess+0x102>
 80053cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80053d0:	2b77      	cmp	r3, #119	; 0x77
 80053d2:	f200 80b0 	bhi.w	8005536 <mavlinkMsg_RecieverProcess+0x1ca>
 80053d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d005      	beq.n	80053ea <mavlinkMsg_RecieverProcess+0x7e>
 80053de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80053e2:	2b4d      	cmp	r3, #77	; 0x4d
 80053e4:	f000 8084 	beq.w	80054f0 <mavlinkMsg_RecieverProcess+0x184>
		}break;
#endif
		default :
		{

		}break;
 80053e8:	e0a5      	b.n	8005536 <mavlinkMsg_RecieverProcess+0x1ca>
			mavlink_msg_heartbeat_decode(&mavState->rxmsg, &heartbeat);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80053f0:	4611      	mov	r1, r2
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7ff fd62 	bl	8004ebc <mavlink_msg_heartbeat_decode>
			handle->vehicle_system_id = mavState->rxmsg.sysid;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	79da      	ldrb	r2, [r3, #7]
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	701a      	strb	r2, [r3, #0]
			handle->vehicle_component_id = mavState->rxmsg.compid;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	7a1a      	ldrb	r2, [r3, #8]
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	705a      	strb	r2, [r3, #1]
			memcpy(&handle->heartBeat, &heartbeat, sizeof(mavlink_heartbeat_t));
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	3304      	adds	r3, #4
 800540c:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8005410:	220c      	movs	r2, #12
 8005412:	4618      	mov	r0, r3
 8005414:	f002 fd76 	bl	8007f04 <memcpy>
			(mavlinkPrivate.seenHeartBeatCOM2 = true, mavlinkPrivate.enableSendHeartBeat[0] = true) : \
 8005418:	79fb      	ldrb	r3, [r7, #7]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d106      	bne.n	800542c <mavlinkMsg_RecieverProcess+0xc0>
 800541e:	4b49      	ldr	r3, [pc, #292]	; (8005544 <mavlinkMsg_RecieverProcess+0x1d8>)
 8005420:	2201      	movs	r2, #1
 8005422:	709a      	strb	r2, [r3, #2]
 8005424:	4b47      	ldr	r3, [pc, #284]	; (8005544 <mavlinkMsg_RecieverProcess+0x1d8>)
 8005426:	2201      	movs	r2, #1
 8005428:	701a      	strb	r2, [r3, #0]
		}break;
 800542a:	e087      	b.n	800553c <mavlinkMsg_RecieverProcess+0x1d0>
			(mavlinkPrivate.seenHeartBeatCOM4 = true, mavlinkPrivate.enableSendHeartBeat[1] = true);
 800542c:	4b45      	ldr	r3, [pc, #276]	; (8005544 <mavlinkMsg_RecieverProcess+0x1d8>)
 800542e:	2201      	movs	r2, #1
 8005430:	70da      	strb	r2, [r3, #3]
 8005432:	4b44      	ldr	r3, [pc, #272]	; (8005544 <mavlinkMsg_RecieverProcess+0x1d8>)
 8005434:	2201      	movs	r2, #1
 8005436:	705a      	strb	r2, [r3, #1]
		}break;
 8005438:	e080      	b.n	800553c <mavlinkMsg_RecieverProcess+0x1d0>
			mavlink_msg_log_data_decode(&mavState->rxmsg, &log_data);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f107 0214 	add.w	r2, r7, #20
 8005440:	4611      	mov	r1, r2
 8005442:	4618      	mov	r0, r3
 8005444:	f7ff fe31 	bl	80050aa <mavlink_msg_log_data_decode>
			memcpy(&handle->logData, &log_data, sizeof(mavlink_msg_log_data_t));
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	3310      	adds	r3, #16
 800544c:	f107 0114 	add.w	r1, r7, #20
 8005450:	2264      	movs	r2, #100	; 0x64
 8005452:	4618      	mov	r0, r3
 8005454:	f002 fd56 	bl	8007f04 <memcpy>
			(channel == MAVLINK_COMM_1) ? (mavlinkPrivate.isMsg_logDataCOM2 = true) : (mavlinkPrivate.isMsg_logDataCOM4 = true);
 8005458:	79fb      	ldrb	r3, [r7, #7]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d103      	bne.n	8005466 <mavlinkMsg_RecieverProcess+0xfa>
 800545e:	4b39      	ldr	r3, [pc, #228]	; (8005544 <mavlinkMsg_RecieverProcess+0x1d8>)
 8005460:	2201      	movs	r2, #1
 8005462:	719a      	strb	r2, [r3, #6]
		}break;
 8005464:	e06a      	b.n	800553c <mavlinkMsg_RecieverProcess+0x1d0>
			(channel == MAVLINK_COMM_1) ? (mavlinkPrivate.isMsg_logDataCOM2 = true) : (mavlinkPrivate.isMsg_logDataCOM4 = true);
 8005466:	4b37      	ldr	r3, [pc, #220]	; (8005544 <mavlinkMsg_RecieverProcess+0x1d8>)
 8005468:	2201      	movs	r2, #1
 800546a:	71da      	strb	r2, [r3, #7]
		}break;
 800546c:	e066      	b.n	800553c <mavlinkMsg_RecieverProcess+0x1d0>
			mavlink_msg_log_request_data_decode(&mavState->rxmsg, &log_request_data);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8005474:	4611      	mov	r1, r2
 8005476:	4618      	mov	r0, r3
 8005478:	f7ff fdfc 	bl	8005074 <mavlink_msg_log_request_data_decode>
			memcpy(&handle->logRequestData, &log_request_data, sizeof(mavlink_msg_log_request_data_t));
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	3374      	adds	r3, #116	; 0x74
 8005480:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8005484:	220c      	movs	r2, #12
 8005486:	4618      	mov	r0, r3
 8005488:	f002 fd3c 	bl	8007f04 <memcpy>
			(channel == MAVLINK_COMM_1) ? (mavlinkPrivate.isMsg_logRequestDataCOM2 = true) : (mavlinkPrivate.isMsg_logRequestDataCOM4 = true);
 800548c:	79fb      	ldrb	r3, [r7, #7]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d103      	bne.n	800549a <mavlinkMsg_RecieverProcess+0x12e>
 8005492:	4b2c      	ldr	r3, [pc, #176]	; (8005544 <mavlinkMsg_RecieverProcess+0x1d8>)
 8005494:	2201      	movs	r2, #1
 8005496:	711a      	strb	r2, [r3, #4]
		}break;
 8005498:	e050      	b.n	800553c <mavlinkMsg_RecieverProcess+0x1d0>
			(channel == MAVLINK_COMM_1) ? (mavlinkPrivate.isMsg_logRequestDataCOM2 = true) : (mavlinkPrivate.isMsg_logRequestDataCOM4 = true);
 800549a:	4b2a      	ldr	r3, [pc, #168]	; (8005544 <mavlinkMsg_RecieverProcess+0x1d8>)
 800549c:	2201      	movs	r2, #1
 800549e:	715a      	strb	r2, [r3, #5]
		}break;
 80054a0:	e04c      	b.n	800553c <mavlinkMsg_RecieverProcess+0x1d0>
			mavlink_msg_log_request_end_decode(&mavState->rxmsg, &log_request_end);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80054a8:	4611      	mov	r1, r2
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7ff fe18 	bl	80050e0 <mavlink_msg_log_request_end_decode>
			memcpy(&handle->logRequestEnd, &log_request_end, sizeof(mavlink_msg_log_request_end_t));
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	3380      	adds	r3, #128	; 0x80
 80054b4:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 80054b8:	801a      	strh	r2, [r3, #0]
			(channel == MAVLINK_COMM_1) ? (mavlinkPrivate.isMsg_logRequestEndCOM2 = true) : (mavlinkPrivate.isMsg_logRequestEndCOM4 = true);
 80054ba:	79fb      	ldrb	r3, [r7, #7]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d103      	bne.n	80054c8 <mavlinkMsg_RecieverProcess+0x15c>
 80054c0:	4b20      	ldr	r3, [pc, #128]	; (8005544 <mavlinkMsg_RecieverProcess+0x1d8>)
 80054c2:	2201      	movs	r2, #1
 80054c4:	721a      	strb	r2, [r3, #8]
		}break;
 80054c6:	e039      	b.n	800553c <mavlinkMsg_RecieverProcess+0x1d0>
			(channel == MAVLINK_COMM_1) ? (mavlinkPrivate.isMsg_logRequestEndCOM2 = true) : (mavlinkPrivate.isMsg_logRequestEndCOM4 = true);
 80054c8:	4b1e      	ldr	r3, [pc, #120]	; (8005544 <mavlinkMsg_RecieverProcess+0x1d8>)
 80054ca:	2201      	movs	r2, #1
 80054cc:	725a      	strb	r2, [r3, #9]
		}break;
 80054ce:	e035      	b.n	800553c <mavlinkMsg_RecieverProcess+0x1d0>
			mavlink_msg_mount_orientation_decode(&mavState->rxmsg, &mount_orientation);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80054d6:	4611      	mov	r1, r2
 80054d8:	4618      	mov	r0, r3
 80054da:	f7ff fe1c 	bl	8005116 <mavlink_msg_mount_orientation_decode>
			memcpy(&handle->mount_orientation, &mount_orientation, sizeof(mavlink_msg_mount_orientation_t));
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	3384      	adds	r3, #132	; 0x84
 80054e2:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80054e6:	2214      	movs	r2, #20
 80054e8:	4618      	mov	r0, r3
 80054ea:	f002 fd0b 	bl	8007f04 <memcpy>
		}break;
 80054ee:	e025      	b.n	800553c <mavlinkMsg_RecieverProcess+0x1d0>
			memset(&command_ack, 0, sizeof(mavlink_command_ack_t));
 80054f0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80054f4:	220c      	movs	r2, #12
 80054f6:	2100      	movs	r1, #0
 80054f8:	4618      	mov	r0, r3
 80054fa:	f002 fd11 	bl	8007f20 <memset>
			mavlink_msg_command_ack_decode(&mavState->rxmsg, &command_ack);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8005504:	4611      	mov	r1, r2
 8005506:	4618      	mov	r0, r3
 8005508:	f7ff fd99 	bl	800503e <mavlink_msg_command_ack_decode>
			memcpy(&handle->command_ack, &command_ack, sizeof(mavlink_msg_command_ack_t));
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	3398      	adds	r3, #152	; 0x98
 8005510:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8005514:	220c      	movs	r2, #12
 8005516:	4618      	mov	r0, r3
 8005518:	f002 fcf4 	bl	8007f04 <memcpy>
			if(command_ack.command == MAV_CMD_JUMP_TAG)
 800551c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8005520:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8005524:	d109      	bne.n	800553a <mavlinkMsg_RecieverProcess+0x1ce>
				if(command_ack.result == MAV_RESULT_ACCEPTED)
 8005526:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 800552a:	2b00      	cmp	r3, #0
 800552c:	d105      	bne.n	800553a <mavlinkMsg_RecieverProcess+0x1ce>
					printf("\n[MAV_CMD_JUMP_TAG] cmd accepted\n");
 800552e:	4806      	ldr	r0, [pc, #24]	; (8005548 <mavlinkMsg_RecieverProcess+0x1dc>)
 8005530:	f003 fcb8 	bl	8008ea4 <puts>
		}break;
 8005534:	e001      	b.n	800553a <mavlinkMsg_RecieverProcess+0x1ce>
		}break;
 8005536:	bf00      	nop
 8005538:	e000      	b.n	800553c <mavlinkMsg_RecieverProcess+0x1d0>
		}break;
 800553a:	bf00      	nop
	}
}
 800553c:	bf00      	nop
 800553e:	37b8      	adds	r7, #184	; 0xb8
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	200010dc 	.word	0x200010dc
 8005548:	0800d9f8 	.word	0x0800d9f8

0800554c <mavlinkMsg_readData>:

/** @brief  mavlinkMsg_readData
    @return none
*/
void mavlinkMsg_readData(void)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	af00      	add	r7, sp, #0
	if(mavlinkProtocol_serialPort3_readData(&mav_state_COM2) == true)
 8005550:	4806      	ldr	r0, [pc, #24]	; (800556c <mavlinkMsg_readData+0x20>)
 8005552:	f001 fb51 	bl	8006bf8 <mavlinkProtocol_serialPort3_readData>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d004      	beq.n	8005566 <mavlinkMsg_readData+0x1a>
	{
//		mavlink_status_t *chanStatus = mavlink_get_channel_status(MAVLINK_COMM_1);

		if(1)//chanStatus->parse_state == MAVLINK_PARSE_STATE_IDLE)
		{
			mavlinkMsg_RecieverProcess(&mav_state_COM2, &mavlinkCOM2, MAVLINK_COMM_1);
 800555c:	2201      	movs	r2, #1
 800555e:	4904      	ldr	r1, [pc, #16]	; (8005570 <mavlinkMsg_readData+0x24>)
 8005560:	4802      	ldr	r0, [pc, #8]	; (800556c <mavlinkMsg_readData+0x20>)
 8005562:	f7ff ff03 	bl	800536c <mavlinkMsg_RecieverProcess>
//		if(1)//chanStatus->parse_state == MAVLINK_PARSE_STATE_IDLE)
//		{
//			mavlinkMsg_RecieverProcess(&mav_state_COM4, &mavlinkCOM4, MAVLINK_COMM_2);
//		}
//	}
}
 8005566:	bf00      	nop
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	20000db8 	.word	0x20000db8
 8005570:	20000d10 	.word	0x20000d10

08005574 <mavlinkMsg_send_heartbeat>:
/** @brief  mavlinkMsg_process
 *  @param[in] channel kenh gui msg
    @return none
*/
void mavlinkMsg_send_heartbeat(uint8_t channel)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	4603      	mov	r3, r0
 800557c:	71fb      	strb	r3, [r7, #7]
	mavlinkMsg_sendHeartBeat((mavlink_channel_t)channel);
 800557e:	79fb      	ldrb	r3, [r7, #7]
 8005580:	4618      	mov	r0, r3
 8005582:	f7ff fde9 	bl	8005158 <mavlinkMsg_sendHeartBeat>
}
 8005586:	bf00      	nop
 8005588:	3708      	adds	r7, #8
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
	...

08005590 <mavlinkMsg_send_cmdJumTarget>:
/** @brief  mavlinkMsg_send_cmdJumTarget
 *  @param[in] channel kenh gui msg
    @return none
*/
void mavlinkMsg_send_cmdJumTarget(uint8_t channel)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af02      	add	r7, sp, #8
 8005596:	4603      	mov	r3, r0
 8005598:	71fb      	strb	r3, [r7, #7]
	mavlinkMsg_sendCmdLong(0, 0, 0, 0, 0, 0, 0, MAV_CMD_JUMP_TAG, 10, MAV_COMP_ID_GIMBAL, 0, (mavlink_channel_t)channel);
 800559a:	79fb      	ldrb	r3, [r7, #7]
 800559c:	9300      	str	r3, [sp, #0]
 800559e:	2300      	movs	r3, #0
 80055a0:	229a      	movs	r2, #154	; 0x9a
 80055a2:	210a      	movs	r1, #10
 80055a4:	f44f 7016 	mov.w	r0, #600	; 0x258
 80055a8:	ed9f 3a09 	vldr	s6, [pc, #36]	; 80055d0 <mavlinkMsg_send_cmdJumTarget+0x40>
 80055ac:	eddf 2a08 	vldr	s5, [pc, #32]	; 80055d0 <mavlinkMsg_send_cmdJumTarget+0x40>
 80055b0:	ed9f 2a07 	vldr	s4, [pc, #28]	; 80055d0 <mavlinkMsg_send_cmdJumTarget+0x40>
 80055b4:	eddf 1a06 	vldr	s3, [pc, #24]	; 80055d0 <mavlinkMsg_send_cmdJumTarget+0x40>
 80055b8:	ed9f 1a05 	vldr	s2, [pc, #20]	; 80055d0 <mavlinkMsg_send_cmdJumTarget+0x40>
 80055bc:	eddf 0a04 	vldr	s1, [pc, #16]	; 80055d0 <mavlinkMsg_send_cmdJumTarget+0x40>
 80055c0:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80055d0 <mavlinkMsg_send_cmdJumTarget+0x40>
 80055c4:	f7ff fe20 	bl	8005208 <mavlinkMsg_sendCmdLong>
}
 80055c8:	bf00      	nop
 80055ca:	3708      	adds	r7, #8
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	00000000 	.word	0x00000000

080055d4 <valid_channel>:

/// Sanity check MAVLink channel
///
/// @param chan		Channel to send to
static inline bool valid_channel(mavlink_channel_t chan)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	4603      	mov	r3, r0
 80055dc:	71fb      	strb	r3, [r7, #7]
//#pragma clang diagnostic push
//#pragma clang diagnostic ignored "-Wtautological-constant-out-of-range-compare"
    return chan < MAVLINK_COMM_NUM_BUFFERS;
 80055de:	79fb      	ldrb	r3, [r7, #7]
 80055e0:	2b04      	cmp	r3, #4
 80055e2:	bf94      	ite	ls
 80055e4:	2301      	movls	r3, #1
 80055e6:	2300      	movhi	r3, #0
 80055e8:	b2db      	uxtb	r3, r3
//#pragma clang diagnostic pop
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	370c      	adds	r7, #12
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b085      	sub	sp, #20
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	4603      	mov	r3, r0
 80055fe:	6039      	str	r1, [r7, #0]
 8005600:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	881b      	ldrh	r3, [r3, #0]
 8005606:	b2da      	uxtb	r2, r3
 8005608:	79fb      	ldrb	r3, [r7, #7]
 800560a:	4053      	eors	r3, r2
 800560c:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 800560e:	7bfb      	ldrb	r3, [r7, #15]
 8005610:	011b      	lsls	r3, r3, #4
 8005612:	b25a      	sxtb	r2, r3
 8005614:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005618:	4053      	eors	r3, r2
 800561a:	b25b      	sxtb	r3, r3
 800561c:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	881b      	ldrh	r3, [r3, #0]
 8005622:	0a1b      	lsrs	r3, r3, #8
 8005624:	b29b      	uxth	r3, r3
 8005626:	b21a      	sxth	r2, r3
 8005628:	7bfb      	ldrb	r3, [r7, #15]
 800562a:	021b      	lsls	r3, r3, #8
 800562c:	b21b      	sxth	r3, r3
 800562e:	4053      	eors	r3, r2
 8005630:	b21a      	sxth	r2, r3
 8005632:	7bfb      	ldrb	r3, [r7, #15]
 8005634:	00db      	lsls	r3, r3, #3
 8005636:	b21b      	sxth	r3, r3
 8005638:	4053      	eors	r3, r2
 800563a:	b21a      	sxth	r2, r3
 800563c:	7bfb      	ldrb	r3, [r7, #15]
 800563e:	091b      	lsrs	r3, r3, #4
 8005640:	b2db      	uxtb	r3, r3
 8005642:	b21b      	sxth	r3, r3
 8005644:	4053      	eors	r3, r2
 8005646:	b21b      	sxth	r3, r3
 8005648:	b29a      	uxth	r2, r3
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	801a      	strh	r2, [r3, #0]
}
 800564e:	bf00      	nop
 8005650:	3714      	adds	r7, #20
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
 800565a:	b480      	push	{r7}
 800565c:	b083      	sub	sp, #12
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005668:	801a      	strh	r2, [r3, #0]
}
 800566a:	bf00      	nop
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr

08005676 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 8005676:	b580      	push	{r7, lr}
 8005678:	b084      	sub	sp, #16
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
 800567e:	460b      	mov	r3, r1
 8005680:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 8005682:	f107 030e 	add.w	r3, r7, #14
 8005686:	4618      	mov	r0, r3
 8005688:	f7ff ffe7 	bl	800565a <crc_init>
	while (length--) {
 800568c:	e009      	b.n	80056a2 <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	1c5a      	adds	r2, r3, #1
 8005692:	607a      	str	r2, [r7, #4]
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	f107 020e 	add.w	r2, r7, #14
 800569a:	4611      	mov	r1, r2
 800569c:	4618      	mov	r0, r3
 800569e:	f7ff ffaa 	bl	80055f6 <crc_accumulate>
	while (length--) {
 80056a2:	887b      	ldrh	r3, [r7, #2]
 80056a4:	1e5a      	subs	r2, r3, #1
 80056a6:	807a      	strh	r2, [r7, #2]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1f0      	bne.n	800568e <crc_calculate+0x18>
        }
        return crcTmp;
 80056ac:	89fb      	ldrh	r3, [r7, #14]
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b086      	sub	sp, #24
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	60f8      	str	r0, [r7, #12]
 80056be:	60b9      	str	r1, [r7, #8]
 80056c0:	4613      	mov	r3, r2
 80056c2:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	617b      	str	r3, [r7, #20]
	while (length--) {
 80056c8:	e007      	b.n	80056da <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	1c5a      	adds	r2, r3, #1
 80056ce:	617a      	str	r2, [r7, #20]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	68f9      	ldr	r1, [r7, #12]
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7ff ff8e 	bl	80055f6 <crc_accumulate>
	while (length--) {
 80056da:	88fb      	ldrh	r3, [r7, #6]
 80056dc:	1e5a      	subs	r2, r3, #1
 80056de:	80fa      	strh	r2, [r7, #6]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1f2      	bne.n	80056ca <crc_accumulate_buffer+0x14>
        }
}
 80056e4:	bf00      	nop
 80056e6:	bf00      	nop
 80056e8:	3718      	adds	r7, #24
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
	...

080056f0 <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	605a      	str	r2, [r3, #4]
    A = 0x6a09e667;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a0e      	ldr	r2, [pc, #56]	; (8005740 <mavlink_sha256_init+0x50>)
 8005708:	609a      	str	r2, [r3, #8]
    B = 0xbb67ae85;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a0d      	ldr	r2, [pc, #52]	; (8005744 <mavlink_sha256_init+0x54>)
 800570e:	60da      	str	r2, [r3, #12]
    C = 0x3c6ef372;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a0d      	ldr	r2, [pc, #52]	; (8005748 <mavlink_sha256_init+0x58>)
 8005714:	611a      	str	r2, [r3, #16]
    D = 0xa54ff53a;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a0c      	ldr	r2, [pc, #48]	; (800574c <mavlink_sha256_init+0x5c>)
 800571a:	615a      	str	r2, [r3, #20]
    E = 0x510e527f;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a0c      	ldr	r2, [pc, #48]	; (8005750 <mavlink_sha256_init+0x60>)
 8005720:	619a      	str	r2, [r3, #24]
    F = 0x9b05688c;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a0b      	ldr	r2, [pc, #44]	; (8005754 <mavlink_sha256_init+0x64>)
 8005726:	61da      	str	r2, [r3, #28]
    G = 0x1f83d9ab;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a0b      	ldr	r2, [pc, #44]	; (8005758 <mavlink_sha256_init+0x68>)
 800572c:	621a      	str	r2, [r3, #32]
    H = 0x5be0cd19;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a0a      	ldr	r2, [pc, #40]	; (800575c <mavlink_sha256_init+0x6c>)
 8005732:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	6a09e667 	.word	0x6a09e667
 8005744:	bb67ae85 	.word	0xbb67ae85
 8005748:	3c6ef372 	.word	0x3c6ef372
 800574c:	a54ff53a 	.word	0xa54ff53a
 8005750:	510e527f 	.word	0x510e527f
 8005754:	9b05688c 	.word	0x9b05688c
 8005758:	1f83d9ab 	.word	0x1f83d9ab
 800575c:	5be0cd19 	.word	0x5be0cd19

08005760 <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 8005760:	b480      	push	{r7}
 8005762:	b0cf      	sub	sp, #316	; 0x13c
 8005764:	af00      	add	r7, sp, #0
 8005766:	1d3b      	adds	r3, r7, #4
 8005768:	6018      	str	r0, [r3, #0]
 800576a:	463b      	mov	r3, r7
 800576c:	6019      	str	r1, [r3, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = A;
 800576e:	1d3b      	adds	r3, r7, #4
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    BB = B;
 8005778:	1d3b      	adds	r3, r7, #4
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    CC = C;
 8005782:	1d3b      	adds	r3, r7, #4
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    DD = D;
 800578c:	1d3b      	adds	r3, r7, #4
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    EE = E;
 8005796:	1d3b      	adds	r3, r7, #4
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    FF = F;
 80057a0:	1d3b      	adds	r3, r7, #4
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	69db      	ldr	r3, [r3, #28]
 80057a6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GG = G;
 80057aa:	1d3b      	adds	r3, r7, #4
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	6a1b      	ldr	r3, [r3, #32]
 80057b0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HH = H;
 80057b4:	1d3b      	adds	r3, r7, #4
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    for (i = 0; i < 16; ++i)
 80057be:	2300      	movs	r3, #0
 80057c0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80057c4:	e011      	b.n	80057ea <mavlink_sha256_calc+0x8a>
	data[i] = in[i];
 80057c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	463a      	mov	r2, r7
 80057ce:	6812      	ldr	r2, [r2, #0]
 80057d0:	4413      	add	r3, r2
 80057d2:	6819      	ldr	r1, [r3, #0]
 80057d4:	f107 030c 	add.w	r3, r7, #12
 80057d8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80057dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 80057e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057e4:	3301      	adds	r3, #1
 80057e6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80057ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057ee:	2b0f      	cmp	r3, #15
 80057f0:	dde9      	ble.n	80057c6 <mavlink_sha256_calc+0x66>
    for (i = 16; i < 64; ++i)
 80057f2:	2310      	movs	r3, #16
 80057f4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80057f8:	e057      	b.n	80058aa <mavlink_sha256_calc+0x14a>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80057fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057fe:	1e9a      	subs	r2, r3, #2
 8005800:	f107 030c 	add.w	r3, r7, #12
 8005804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005808:	ea4f 4273 	mov.w	r2, r3, ror #17
 800580c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005810:	1e99      	subs	r1, r3, #2
 8005812:	f107 030c 	add.w	r3, r7, #12
 8005816:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800581a:	ea4f 43f3 	mov.w	r3, r3, ror #19
 800581e:	405a      	eors	r2, r3
 8005820:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005824:	1e99      	subs	r1, r3, #2
 8005826:	f107 030c 	add.w	r3, r7, #12
 800582a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800582e:	0a9b      	lsrs	r3, r3, #10
 8005830:	405a      	eors	r2, r3
 8005832:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005836:	1fd9      	subs	r1, r3, #7
 8005838:	f107 030c 	add.w	r3, r7, #12
 800583c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005840:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8005842:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005846:	f1a3 010f 	sub.w	r1, r3, #15
 800584a:	f107 030c 	add.w	r3, r7, #12
 800584e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005852:	ea4f 11f3 	mov.w	r1, r3, ror #7
 8005856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800585a:	f1a3 000f 	sub.w	r0, r3, #15
 800585e:	f107 030c 	add.w	r3, r7, #12
 8005862:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8005866:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800586a:	4059      	eors	r1, r3
 800586c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005870:	f1a3 000f 	sub.w	r0, r3, #15
 8005874:	f107 030c 	add.w	r3, r7, #12
 8005878:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800587c:	08db      	lsrs	r3, r3, #3
 800587e:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8005880:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8005882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005886:	f1a3 0110 	sub.w	r1, r3, #16
 800588a:	f107 030c 	add.w	r3, r7, #12
 800588e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005892:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8005894:	f107 030c 	add.w	r3, r7, #12
 8005898:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800589c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 80058a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058a4:	3301      	adds	r3, #1
 80058a6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80058aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058ae:	2b3f      	cmp	r3, #63	; 0x3f
 80058b0:	dda3      	ble.n	80057fa <mavlink_sha256_calc+0x9a>

    for (i = 0; i < 64; i++) {
 80058b2:	2300      	movs	r3, #0
 80058b4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80058b8:	e076      	b.n	80059a8 <mavlink_sha256_calc+0x248>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 80058ba:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80058be:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80058c2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80058c6:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80058ca:	405a      	eors	r2, r3
 80058cc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80058d0:	ea4f 6373 	mov.w	r3, r3, ror #25
 80058d4:	405a      	eors	r2, r3
 80058d6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80058da:	441a      	add	r2, r3
 80058dc:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 80058e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80058e4:	4019      	ands	r1, r3
 80058e6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80058ea:	43d8      	mvns	r0, r3
 80058ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80058f0:	4003      	ands	r3, r0
 80058f2:	404b      	eors	r3, r1
 80058f4:	441a      	add	r2, r3
 80058f6:	4956      	ldr	r1, [pc, #344]	; (8005a50 <mavlink_sha256_calc+0x2f0>)
 80058f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005900:	441a      	add	r2, r3
 8005902:	f107 030c 	add.w	r3, r7, #12
 8005906:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800590a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800590e:	4413      	add	r3, r2
 8005910:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8005914:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005918:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800591c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005920:	ea4f 3373 	mov.w	r3, r3, ror #13
 8005924:	405a      	eors	r2, r3
 8005926:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800592a:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800592e:	405a      	eors	r2, r3
 8005930:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8005934:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005938:	4059      	eors	r1, r3
 800593a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800593e:	4019      	ands	r1, r3
 8005940:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8005944:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005948:	4003      	ands	r3, r0
 800594a:	404b      	eors	r3, r1
 800594c:	4413      	add	r3, r2
 800594e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			     
	HH = GG;
 8005952:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005956:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	GG = FF;
 800595a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800595e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	FF = EE;
 8005962:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005966:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	EE = DD + T1;
 800596a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800596e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005972:	4413      	add	r3, r2
 8005974:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	DD = CC;
 8005978:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800597c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	CC = BB;
 8005980:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005984:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	BB = AA;
 8005988:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800598c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	AA = T1 + T2;
 8005990:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8005994:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005998:	4413      	add	r3, r2
 800599a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (i = 0; i < 64; i++) {
 800599e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059a2:	3301      	adds	r3, #1
 80059a4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80059a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059ac:	2b3f      	cmp	r3, #63	; 0x3f
 80059ae:	dd84      	ble.n	80058ba <mavlink_sha256_calc+0x15a>
    }

    A += AA;
 80059b0:	1d3b      	adds	r3, r7, #4
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	689a      	ldr	r2, [r3, #8]
 80059b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80059ba:	441a      	add	r2, r3
 80059bc:	1d3b      	adds	r3, r7, #4
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	609a      	str	r2, [r3, #8]
    B += BB;
 80059c2:	1d3b      	adds	r3, r7, #4
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68da      	ldr	r2, [r3, #12]
 80059c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80059cc:	441a      	add	r2, r3
 80059ce:	1d3b      	adds	r3, r7, #4
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	60da      	str	r2, [r3, #12]
    C += CC;
 80059d4:	1d3b      	adds	r3, r7, #4
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	691a      	ldr	r2, [r3, #16]
 80059da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059de:	441a      	add	r2, r3
 80059e0:	1d3b      	adds	r3, r7, #4
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	611a      	str	r2, [r3, #16]
    D += DD;
 80059e6:	1d3b      	adds	r3, r7, #4
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	695a      	ldr	r2, [r3, #20]
 80059ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80059f0:	441a      	add	r2, r3
 80059f2:	1d3b      	adds	r3, r7, #4
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	615a      	str	r2, [r3, #20]
    E += EE;
 80059f8:	1d3b      	adds	r3, r7, #4
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	699a      	ldr	r2, [r3, #24]
 80059fe:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005a02:	441a      	add	r2, r3
 8005a04:	1d3b      	adds	r3, r7, #4
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	619a      	str	r2, [r3, #24]
    F += FF;
 8005a0a:	1d3b      	adds	r3, r7, #4
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	69da      	ldr	r2, [r3, #28]
 8005a10:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005a14:	441a      	add	r2, r3
 8005a16:	1d3b      	adds	r3, r7, #4
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	61da      	str	r2, [r3, #28]
    G += GG;
 8005a1c:	1d3b      	adds	r3, r7, #4
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6a1a      	ldr	r2, [r3, #32]
 8005a22:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a26:	441a      	add	r2, r3
 8005a28:	1d3b      	adds	r3, r7, #4
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	621a      	str	r2, [r3, #32]
    H += HH;
 8005a2e:	1d3b      	adds	r3, r7, #4
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a34:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005a38:	441a      	add	r2, r3
 8005a3a:	1d3b      	adds	r3, r7, #4
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005a40:	bf00      	nop
 8005a42:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	0800e3b4 	.word	0x0800e3b4

08005a54 <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b09c      	sub	sp, #112	; 0x70
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	66fb      	str	r3, [r7, #108]	; 0x6c
    uint32_t old_sz = m->sz[0];
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	00db      	lsls	r3, r3, #3
 8005a72:	441a      	add	r2, r3
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d904      	bls.n	8005a8c <mavlink_sha256_update+0x38>
	++m->sz[1];
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	1c5a      	adds	r2, r3, #1
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 8005a8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a8e:	08db      	lsrs	r3, r3, #3
 8005a90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a94:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8005a96:	e054      	b.n	8005b42 <mavlink_sha256_update+0xee>
	uint32_t l = 64 - offset;
 8005a98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a9a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8005a9e:	667b      	str	r3, [r7, #100]	; 0x64
        if (len < l) {
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d201      	bcs.n	8005aac <mavlink_sha256_update+0x58>
            l = len;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	667b      	str	r3, [r7, #100]	; 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8005ab2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ab4:	4413      	add	r3, r2
 8005ab6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005ab8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005aba:	4618      	mov	r0, r3
 8005abc:	f002 fa22 	bl	8007f04 <memcpy>
	offset += l;
 8005ac0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005ac2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ac4:	4413      	add	r3, r2
 8005ac6:	66bb      	str	r3, [r7, #104]	; 0x68
	p += l;
 8005ac8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005aca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005acc:	4413      	add	r3, r2
 8005ace:	66fb      	str	r3, [r7, #108]	; 0x6c
	len -= l;
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 8005ad8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ada:	2b40      	cmp	r3, #64	; 0x40
 8005adc:	d131      	bne.n	8005b42 <mavlink_sha256_update+0xee>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	3328      	adds	r3, #40	; 0x28
 8005ae2:	65bb      	str	r3, [r7, #88]	; 0x58
	    for (i = 0; i < 16; i++){
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	663b      	str	r3, [r7, #96]	; 0x60
 8005ae8:	e020      	b.n	8005b2c <mavlink_sha256_update+0xd8>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 8005aea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005af0:	4413      	add	r3, r2
 8005af2:	657b      	str	r3, [r7, #84]	; 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 8005af4:	f107 0210 	add.w	r2, r7, #16
 8005af8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	4413      	add	r3, r2
 8005afe:	653b      	str	r3, [r7, #80]	; 0x50
                p2[0] = p1[3];
 8005b00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b02:	78da      	ldrb	r2, [r3, #3]
 8005b04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b06:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 8005b08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005b0e:	7892      	ldrb	r2, [r2, #2]
 8005b10:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 8005b12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b14:	3302      	adds	r3, #2
 8005b16:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005b18:	7852      	ldrb	r2, [r2, #1]
 8005b1a:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 8005b1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b1e:	3303      	adds	r3, #3
 8005b20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005b22:	7812      	ldrb	r2, [r2, #0]
 8005b24:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 8005b26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b28:	3301      	adds	r3, #1
 8005b2a:	663b      	str	r3, [r7, #96]	; 0x60
 8005b2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b2e:	2b0f      	cmp	r3, #15
 8005b30:	dddb      	ble.n	8005aea <mavlink_sha256_update+0x96>
	    }
	    mavlink_sha256_calc(m, current);
 8005b32:	f107 0310 	add.w	r3, r7, #16
 8005b36:	4619      	mov	r1, r3
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f7ff fe11 	bl	8005760 <mavlink_sha256_calc>
	    offset = 0;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1a7      	bne.n	8005a98 <mavlink_sha256_update+0x44>
	}
    }
}
 8005b48:	bf00      	nop
 8005b4a:	bf00      	nop
 8005b4c:	3770      	adds	r7, #112	; 0x70
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b098      	sub	sp, #96	; 0x60
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
 8005b5a:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	08db      	lsrs	r3, r3, #3
 8005b62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b66:	65fb      	str	r3, [r7, #92]	; 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8005b68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b6a:	f1c3 0377 	rsb	r3, r3, #119	; 0x77
 8005b6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b72:	3301      	adds	r3, #1
 8005b74:	65bb      	str	r3, [r7, #88]	; 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	3308      	adds	r3, #8
 8005b7a:	657b      	str	r3, [r7, #84]	; 0x54
    
    *zeros = 0x80;
 8005b7c:	2380      	movs	r3, #128	; 0x80
 8005b7e:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8005b80:	f107 030c 	add.w	r3, r7, #12
 8005b84:	3301      	adds	r3, #1
 8005b86:	2247      	movs	r2, #71	; 0x47
 8005b88:	2100      	movs	r1, #0
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f002 f9c8 	bl	8007f20 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b96:	3307      	adds	r3, #7
 8005b98:	b2d2      	uxtb	r2, r2
 8005b9a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8005b9e:	440b      	add	r3, r1
 8005ba0:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	0a1a      	lsrs	r2, r3, #8
 8005baa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bac:	3306      	adds	r3, #6
 8005bae:	b2d2      	uxtb	r2, r2
 8005bb0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8005bb4:	440b      	add	r3, r1
 8005bb6:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	0c1a      	lsrs	r2, r3, #16
 8005bc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bc2:	3305      	adds	r3, #5
 8005bc4:	b2d2      	uxtb	r2, r2
 8005bc6:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8005bca:	440b      	add	r3, r1
 8005bcc:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	0e1a      	lsrs	r2, r3, #24
 8005bd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bd8:	3304      	adds	r3, #4
 8005bda:	b2d2      	uxtb	r2, r2
 8005bdc:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8005be0:	440b      	add	r3, r1
 8005be2:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685a      	ldr	r2, [r3, #4]
 8005bea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bec:	3303      	adds	r3, #3
 8005bee:	b2d2      	uxtb	r2, r2
 8005bf0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8005bf4:	440b      	add	r3, r1
 8005bf6:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	0a1a      	lsrs	r2, r3, #8
 8005c00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c02:	3302      	adds	r3, #2
 8005c04:	b2d2      	uxtb	r2, r2
 8005c06:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8005c0a:	440b      	add	r3, r1
 8005c0c:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	0c1a      	lsrs	r2, r3, #16
 8005c16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c18:	3301      	adds	r3, #1
 8005c1a:	b2d2      	uxtb	r2, r2
 8005c1c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8005c20:	440b      	add	r3, r1
 8005c22:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	0e1b      	lsrs	r3, r3, #24
 8005c2c:	b2d9      	uxtb	r1, r3
 8005c2e:	f107 020c 	add.w	r2, r7, #12
 8005c32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c34:	4413      	add	r3, r2
 8005c36:	460a      	mov	r2, r1
 8005c38:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 8005c3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c3c:	f103 0208 	add.w	r2, r3, #8
 8005c40:	f107 030c 	add.w	r3, r7, #12
 8005c44:	4619      	mov	r1, r3
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f7ff ff04 	bl	8005a54 <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 8005c4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c4e:	78da      	ldrb	r2, [r3, #3]
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	3301      	adds	r3, #1
 8005c58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005c5a:	7892      	ldrb	r2, [r2, #2]
 8005c5c:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	3302      	adds	r3, #2
 8005c62:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005c64:	7852      	ldrb	r2, [r2, #1]
 8005c66:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	3303      	adds	r3, #3
 8005c6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005c6e:	7812      	ldrb	r2, [r2, #0]
 8005c70:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	3304      	adds	r3, #4
 8005c76:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005c78:	79d2      	ldrb	r2, [r2, #7]
 8005c7a:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	3305      	adds	r3, #5
 8005c80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005c82:	7992      	ldrb	r2, [r2, #6]
 8005c84:	701a      	strb	r2, [r3, #0]
}
 8005c86:	bf00      	nop
 8005c88:	3760      	adds	r7, #96	; 0x60
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
	...

08005c90 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	4603      	mov	r3, r0
 8005c98:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 8005c9a:	79fa      	ldrb	r2, [r7, #7]
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	005b      	lsls	r3, r3, #1
 8005ca0:	4413      	add	r3, r2
 8005ca2:	00db      	lsls	r3, r3, #3
 8005ca4:	4a03      	ldr	r2, [pc, #12]	; (8005cb4 <mavlink_get_channel_status+0x24>)
 8005ca6:	4413      	add	r3, r2
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	20000234 	.word	0x20000234

08005cb8 <mavlink_get_channel_buffer>:
/*
 * Internal function to give access to the channel buffer for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_BUFFER
MAVLINK_HELPER mavlink_message_t* mavlink_get_channel_buffer(uint8_t chan)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_buffer array defined in function,
	// has to be defined externally
#else
	static mavlink_message_t m_mavlink_buffer[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_buffer[chan];
 8005cc2:	79fb      	ldrb	r3, [r7, #7]
 8005cc4:	f44f 7294 	mov.w	r2, #296	; 0x128
 8005cc8:	fb02 f303 	mul.w	r3, r2, r3
 8005ccc:	4a03      	ldr	r2, [pc, #12]	; (8005cdc <mavlink_get_channel_buffer+0x24>)
 8005cce:	4413      	add	r3, r2
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	200002b0 	.word	0x200002b0

08005ce0 <mavlink_sign_packet>:
MAVLINK_HELPER uint8_t mavlink_sign_packet(mavlink_signing_t *signing,
					   uint8_t signature[MAVLINK_SIGNATURE_BLOCK_LEN],
					   const uint8_t *header, uint8_t header_len,
					   const uint8_t *packet, uint8_t packet_len,
					   const uint8_t crc[2])
{
 8005ce0:	b5b0      	push	{r4, r5, r7, lr}
 8005ce2:	b0a0      	sub	sp, #128	; 0x80
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
 8005cec:	70fb      	strb	r3, [r7, #3]
	mavlink_sha256_ctx ctx;
	union {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d005      	beq.n	8005d00 <mavlink_sign_packet+0x20>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	f003 0301 	and.w	r3, r3, #1
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d101      	bne.n	8005d04 <mavlink_sign_packet+0x24>
	    return 0;
 8005d00:	2300      	movs	r3, #0
 8005d02:	e04f      	b.n	8005da4 <mavlink_sign_packet+0xc4>
	}
	signature[0] = signing->link_id;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	785a      	ldrb	r2, [r3, #1]
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	701a      	strb	r2, [r3, #0]
	tstamp.t64 = signing->timestamp;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005d12:	e9c7 2304 	strd	r2, r3, [r7, #16]
	memcpy(&signature[1], tstamp.t8, 6);
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	f107 0110 	add.w	r1, r7, #16
 8005d1e:	2206      	movs	r2, #6
 8005d20:	4618      	mov	r0, r3
 8005d22:	f002 f8ef 	bl	8007f04 <memcpy>
	signing->timestamp++;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005d2c:	1c54      	adds	r4, r2, #1
 8005d2e:	f143 0500 	adc.w	r5, r3, #0
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	e9c3 4502 	strd	r4, r5, [r3, #8]
	
	mavlink_sha256_init(&ctx);
 8005d38:	f107 0318 	add.w	r3, r7, #24
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7ff fcd7 	bl	80056f0 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f103 0110 	add.w	r1, r3, #16
 8005d48:	f107 0318 	add.w	r3, r7, #24
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7ff fe80 	bl	8005a54 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8005d54:	78fa      	ldrb	r2, [r7, #3]
 8005d56:	f107 0318 	add.w	r3, r7, #24
 8005d5a:	6879      	ldr	r1, [r7, #4]
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7ff fe79 	bl	8005a54 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8005d62:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
 8005d66:	f107 0318 	add.w	r3, r7, #24
 8005d6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7ff fe70 	bl	8005a54 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8005d74:	f107 0318 	add.w	r3, r7, #24
 8005d78:	2202      	movs	r2, #2
 8005d7a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f7ff fe68 	bl	8005a54 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8005d84:	f107 0318 	add.w	r3, r7, #24
 8005d88:	2207      	movs	r2, #7
 8005d8a:	68b9      	ldr	r1, [r7, #8]
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f7ff fe61 	bl	8005a54 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, &signature[7]);
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	1dda      	adds	r2, r3, #7
 8005d96:	f107 0318 	add.w	r3, r7, #24
 8005d9a:	4611      	mov	r1, r2
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f7ff fed8 	bl	8005b52 <mavlink_sha256_final_48>
	
	return MAVLINK_SIGNATURE_BLOCK_LEN;
 8005da2:	230d      	movs	r3, #13
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3780      	adds	r7, #128	; 0x80
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bdb0      	pop	{r4, r5, r7, pc}

08005dac <_mav_trim_payload>:
 * return new packet length for trimming payload of any trailing zero
 * bytes. Used in MAVLink2 to give simple support for variable length
 * arrays.
 */
MAVLINK_HELPER uint8_t _mav_trim_payload(const char *payload, uint8_t length)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	460b      	mov	r3, r1
 8005db6:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8005db8:	e002      	b.n	8005dc0 <_mav_trim_payload+0x14>
		length--;
 8005dba:	78fb      	ldrb	r3, [r7, #3]
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8005dc0:	78fb      	ldrb	r3, [r7, #3]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d906      	bls.n	8005dd4 <_mav_trim_payload+0x28>
 8005dc6:	78fb      	ldrb	r3, [r7, #3]
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	4413      	add	r3, r2
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d0f2      	beq.n	8005dba <_mav_trim_payload+0xe>
	}
	return length;
 8005dd4:	78fb      	ldrb	r3, [r7, #3]
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	370c      	adds	r7, #12
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
	...

08005de4 <mavlink_signature_check>:
 * @brief check a signature block for a packet
 */
MAVLINK_HELPER bool mavlink_signature_check(mavlink_signing_t *signing,
					    mavlink_signing_streams_t *signing_streams,
					    const mavlink_message_t *msg)
{
 8005de4:	b5b0      	push	{r4, r5, r7, lr}
 8005de6:	b0aa      	sub	sp, #168	; 0xa8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
	if (signing == NULL) {
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d101      	bne.n	8005dfa <mavlink_signature_check+0x16>
		return true;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e120      	b.n	800603c <mavlink_signature_check+0x258>
	}
        const uint8_t *p = (const uint8_t *)&msg->magic;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	3302      	adds	r3, #2
 8005dfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	const uint8_t *psig = msg->signature;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8005e08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        const uint8_t *incoming_signature = psig+7;
 8005e0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e10:	3307      	adds	r3, #7
 8005e12:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	mavlink_sha256_ctx ctx;
	uint8_t signature[6];
	uint16_t i;
        
	mavlink_sha256_init(&ctx);
 8005e16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7ff fc68 	bl	80056f0 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f103 0110 	add.w	r1, r3, #16
 8005e26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7ff fe11 	bl	8005a54 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, p, MAVLINK_CORE_HEADER_LEN+1+msg->len);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	78db      	ldrb	r3, [r3, #3]
 8005e36:	330a      	adds	r3, #10
 8005e38:	461a      	mov	r2, r3
 8005e3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e3e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7ff fe06 	bl	8005a54 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, msg->ck, 2);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f503 718c 	add.w	r1, r3, #280	; 0x118
 8005e4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e52:	2202      	movs	r2, #2
 8005e54:	4618      	mov	r0, r3
 8005e56:	f7ff fdfd 	bl	8005a54 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, psig, 1+6);
 8005e5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e5e:	2207      	movs	r2, #7
 8005e60:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8005e64:	4618      	mov	r0, r3
 8005e66:	f7ff fdf5 	bl	8005a54 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, signature);
 8005e6a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005e6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e72:	4611      	mov	r1, r2
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7ff fe6c 	bl	8005b52 <mavlink_sha256_final_48>
	if (memcmp(signature, incoming_signature, 6) != 0) {
 8005e7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e7e:	2206      	movs	r2, #6
 8005e80:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8005e84:	4618      	mov	r0, r3
 8005e86:	f002 f82f 	bl	8007ee8 <memcmp>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d001      	beq.n	8005e94 <mavlink_signature_check+0xb0>
		return false;
 8005e90:	2300      	movs	r3, #0
 8005e92:	e0d3      	b.n	800603c <mavlink_signature_check+0x258>
	// now check timestamp
	union tstamp {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	uint8_t link_id = psig[0];
 8005e94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	tstamp.t64 = 0;
 8005e9e:	f04f 0200 	mov.w	r2, #0
 8005ea2:	f04f 0300 	mov.w	r3, #0
 8005ea6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	memcpy(tstamp.t8, psig+1, 6);
 8005eaa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005eae:	1c59      	adds	r1, r3, #1
 8005eb0:	f107 0318 	add.w	r3, r7, #24
 8005eb4:	2206      	movs	r2, #6
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f002 f824 	bl	8007f04 <memcpy>

	if (signing_streams == NULL) {
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d101      	bne.n	8005ec6 <mavlink_signature_check+0xe2>
		return false;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	e0ba      	b.n	800603c <mavlink_signature_check+0x258>
	}
	
	// find stream
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8005ecc:	e02b      	b.n	8005f26 <mavlink_signature_check+0x142>
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	79d9      	ldrb	r1, [r3, #7]
 8005ed2:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8005ed6:	68b8      	ldr	r0, [r7, #8]
 8005ed8:	4613      	mov	r3, r2
 8005eda:	00db      	lsls	r3, r3, #3
 8005edc:	4413      	add	r3, r2
 8005ede:	4403      	add	r3, r0
 8005ee0:	3303      	adds	r3, #3
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	4299      	cmp	r1, r3
 8005ee6:	d119      	bne.n	8005f1c <mavlink_signature_check+0x138>
		    msg->compid == signing_streams->stream[i].compid &&
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	7a19      	ldrb	r1, [r3, #8]
 8005eec:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8005ef0:	68b8      	ldr	r0, [r7, #8]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	00db      	lsls	r3, r3, #3
 8005ef6:	4413      	add	r3, r2
 8005ef8:	4403      	add	r3, r0
 8005efa:	3304      	adds	r3, #4
 8005efc:	781b      	ldrb	r3, [r3, #0]
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8005efe:	4299      	cmp	r1, r3
 8005f00:	d10c      	bne.n	8005f1c <mavlink_signature_check+0x138>
		    link_id == signing_streams->stream[i].link_id) {
 8005f02:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8005f06:	68b9      	ldr	r1, [r7, #8]
 8005f08:	4613      	mov	r3, r2
 8005f0a:	00db      	lsls	r3, r3, #3
 8005f0c:	4413      	add	r3, r2
 8005f0e:	440b      	add	r3, r1
 8005f10:	3302      	adds	r3, #2
 8005f12:	781b      	ldrb	r3, [r3, #0]
		    msg->compid == signing_streams->stream[i].compid &&
 8005f14:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d00b      	beq.n	8005f34 <mavlink_signature_check+0x150>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8005f1c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8005f20:	3301      	adds	r3, #1
 8005f22:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	881b      	ldrh	r3, [r3, #0]
 8005f2a:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d3cd      	bcc.n	8005ece <mavlink_signature_check+0xea>
 8005f32:	e000      	b.n	8005f36 <mavlink_signature_check+0x152>
			break;
 8005f34:	bf00      	nop
		}
	}
	if (i == signing_streams->num_signing_streams) {
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	881b      	ldrh	r3, [r3, #0]
 8005f3a:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d140      	bne.n	8005fc4 <mavlink_signature_check+0x1e0>
		if (signing_streams->num_signing_streams >= MAVLINK_MAX_SIGNING_STREAMS) {
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	881b      	ldrh	r3, [r3, #0]
 8005f46:	2b0f      	cmp	r3, #15
 8005f48:	d901      	bls.n	8005f4e <mavlink_signature_check+0x16a>
			// over max number of streams
			return false;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	e076      	b.n	800603c <mavlink_signature_check+0x258>
		}
		// new stream. Only accept if timestamp is not more than 1 minute old
		if (tstamp.t64 + 6000*1000UL < signing->timestamp) {
 8005f4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f52:	483c      	ldr	r0, [pc, #240]	; (8006044 <mavlink_signature_check+0x260>)
 8005f54:	f04f 0100 	mov.w	r1, #0
 8005f58:	1814      	adds	r4, r2, r0
 8005f5a:	eb43 0501 	adc.w	r5, r3, r1
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005f64:	429d      	cmp	r5, r3
 8005f66:	bf08      	it	eq
 8005f68:	4294      	cmpeq	r4, r2
 8005f6a:	d201      	bcs.n	8005f70 <mavlink_signature_check+0x18c>
			return false;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	e065      	b.n	800603c <mavlink_signature_check+0x258>
		}
		// add new stream
		signing_streams->stream[i].sysid = msg->sysid;
 8005f70:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	79d8      	ldrb	r0, [r3, #7]
 8005f78:	68b9      	ldr	r1, [r7, #8]
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	00db      	lsls	r3, r3, #3
 8005f7e:	4413      	add	r3, r2
 8005f80:	440b      	add	r3, r1
 8005f82:	3303      	adds	r3, #3
 8005f84:	4602      	mov	r2, r0
 8005f86:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].compid = msg->compid;
 8005f88:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	7a18      	ldrb	r0, [r3, #8]
 8005f90:	68b9      	ldr	r1, [r7, #8]
 8005f92:	4613      	mov	r3, r2
 8005f94:	00db      	lsls	r3, r3, #3
 8005f96:	4413      	add	r3, r2
 8005f98:	440b      	add	r3, r1
 8005f9a:	3304      	adds	r3, #4
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].link_id = link_id;
 8005fa0:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8005fa4:	68b9      	ldr	r1, [r7, #8]
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	00db      	lsls	r3, r3, #3
 8005faa:	4413      	add	r3, r2
 8005fac:	440b      	add	r3, r1
 8005fae:	3302      	adds	r3, #2
 8005fb0:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8005fb4:	701a      	strb	r2, [r3, #0]
		signing_streams->num_signing_streams++;
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	881b      	ldrh	r3, [r3, #0]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	801a      	strh	r2, [r3, #0]
 8005fc2:	e01d      	b.n	8006000 <mavlink_signature_check+0x21c>
	} else {
		union tstamp last_tstamp;
		last_tstamp.t64 = 0;
 8005fc4:	f04f 0200 	mov.w	r2, #0
 8005fc8:	f04f 0300 	mov.w	r3, #0
 8005fcc:	e9c7 2304 	strd	r2, r3, [r7, #16]
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 8005fd0:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	00db      	lsls	r3, r3, #3
 8005fd8:	4413      	add	r3, r2
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	4413      	add	r3, r2
 8005fde:	1d59      	adds	r1, r3, #5
 8005fe0:	f107 0310 	add.w	r3, r7, #16
 8005fe4:	2206      	movs	r2, #6
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f001 ff8c 	bl	8007f04 <memcpy>
		if (tstamp.t64 <= last_tstamp.t64) {
 8005fec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ff0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005ff4:	4299      	cmp	r1, r3
 8005ff6:	bf08      	it	eq
 8005ff8:	4290      	cmpeq	r0, r2
 8005ffa:	d301      	bcc.n	8006000 <mavlink_signature_check+0x21c>
			// repeating old timestamp
			return false;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	e01d      	b.n	800603c <mavlink_signature_check+0x258>
		}
	}

	// remember last timestamp
	memcpy(signing_streams->stream[i].timestamp_bytes, psig+1, 6);
 8006000:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8006004:	4613      	mov	r3, r2
 8006006:	00db      	lsls	r3, r3, #3
 8006008:	4413      	add	r3, r2
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	4413      	add	r3, r2
 800600e:	1d58      	adds	r0, r3, #5
 8006010:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006014:	3301      	adds	r3, #1
 8006016:	2206      	movs	r2, #6
 8006018:	4619      	mov	r1, r3
 800601a:	f001 ff73 	bl	8007f04 <memcpy>

	// our next timestamp must be at least this timestamp
	if (tstamp.t64 > signing->timestamp) {
 800601e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006022:	68f9      	ldr	r1, [r7, #12]
 8006024:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8006028:	4299      	cmp	r1, r3
 800602a:	bf08      	it	eq
 800602c:	4290      	cmpeq	r0, r2
 800602e:	d204      	bcs.n	800603a <mavlink_signature_check+0x256>
		signing->timestamp = tstamp.t64;
 8006030:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006034:	68f9      	ldr	r1, [r7, #12]
 8006036:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
	return true;
 800603a:	2301      	movs	r3, #1
}
 800603c:	4618      	mov	r0, r3
 800603e:	37a8      	adds	r7, #168	; 0xa8
 8006040:	46bd      	mov	sp, r7
 8006042:	bdb0      	pop	{r4, r5, r7, pc}
 8006044:	005b8d80 	.word	0x005b8d80

08006048 <mavlink_finalize_message_buffer>:
 * @param system_id Id of the sending (this) system, 1-127
 * @param length Message length
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      mavlink_status_t* status, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8006048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800604a:	b08d      	sub	sp, #52	; 0x34
 800604c:	af04      	add	r7, sp, #16
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	607b      	str	r3, [r7, #4]
 8006052:	460b      	mov	r3, r1
 8006054:	72fb      	strb	r3, [r7, #11]
 8006056:	4613      	mov	r3, r2
 8006058:	72bb      	strb	r3, [r7, #10]
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	7b1b      	ldrb	r3, [r3, #12]
 800605e:	f003 0302 	and.w	r3, r3, #2
 8006062:	2b00      	cmp	r3, #0
 8006064:	bf14      	ite	ne
 8006066:	2301      	movne	r3, #1
 8006068:	2300      	moveq	r3, #0
 800606a:	77bb      	strb	r3, [r7, #30]
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 800606c:	7fbb      	ldrb	r3, [r7, #30]
 800606e:	f083 0301 	eor.w	r3, r3, #1
 8006072:	b2db      	uxtb	r3, r3
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00c      	beq.n	8006092 <mavlink_finalize_message_buffer+0x4a>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d008      	beq.n	8006092 <mavlink_finalize_message_buffer+0x4a>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	f003 0301 	and.w	r3, r3, #1
 800608a:	2b00      	cmp	r3, #0
 800608c:	d001      	beq.n	8006092 <mavlink_finalize_message_buffer+0x4a>
 800608e:	2301      	movs	r3, #1
 8006090:	e000      	b.n	8006094 <mavlink_finalize_message_buffer+0x4c>
 8006092:	2300      	movs	r3, #0
 8006094:	777b      	strb	r3, [r7, #29]
 8006096:	7f7b      	ldrb	r3, [r7, #29]
 8006098:	f003 0301 	and.w	r3, r3, #1
 800609c:	777b      	strb	r3, [r7, #29]
	uint8_t signature_len = signing? MAVLINK_SIGNATURE_BLOCK_LEN : 0;
 800609e:	7f7b      	ldrb	r3, [r7, #29]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d001      	beq.n	80060a8 <mavlink_finalize_message_buffer+0x60>
 80060a4:	230d      	movs	r3, #13
 80060a6:	e000      	b.n	80060aa <mavlink_finalize_message_buffer+0x62>
 80060a8:	2300      	movs	r3, #0
 80060aa:	773b      	strb	r3, [r7, #28]
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 80060ac:	230a      	movs	r3, #10
 80060ae:	77fb      	strb	r3, [r7, #31]
	uint8_t buf[MAVLINK_CORE_HEADER_LEN+1];
	if (mavlink1) {
 80060b0:	7fbb      	ldrb	r3, [r7, #30]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d005      	beq.n	80060c2 <mavlink_finalize_message_buffer+0x7a>
		msg->magic = MAVLINK_STX_MAVLINK1;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	22fe      	movs	r2, #254	; 0xfe
 80060ba:	709a      	strb	r2, [r3, #2]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 80060bc:	2306      	movs	r3, #6
 80060be:	77fb      	strb	r3, [r7, #31]
 80060c0:	e002      	b.n	80060c8 <mavlink_finalize_message_buffer+0x80>
	} else {
		msg->magic = MAVLINK_STX;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	22fd      	movs	r2, #253	; 0xfd
 80060c6:	709a      	strb	r2, [r3, #2]
	}
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 80060c8:	7fbb      	ldrb	r3, [r7, #30]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d10a      	bne.n	80060e4 <mavlink_finalize_message_buffer+0x9c>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	3310      	adds	r3, #16
 80060d2:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80060d6:	4611      	mov	r1, r2
 80060d8:	4618      	mov	r0, r3
 80060da:	f7ff fe67 	bl	8005dac <_mav_trim_payload>
 80060de:	4603      	mov	r3, r0
 80060e0:	461a      	mov	r2, r3
 80060e2:	e001      	b.n	80060e8 <mavlink_finalize_message_buffer+0xa0>
 80060e4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	7afa      	ldrb	r2, [r7, #11]
 80060f0:	71da      	strb	r2, [r3, #7]
	msg->compid = component_id;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	7aba      	ldrb	r2, [r7, #10]
 80060f6:	721a      	strb	r2, [r3, #8]
	msg->incompat_flags = 0;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	711a      	strb	r2, [r3, #4]
	if (signing) {
 80060fe:	7f7b      	ldrb	r3, [r7, #29]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d006      	beq.n	8006112 <mavlink_finalize_message_buffer+0xca>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	791b      	ldrb	r3, [r3, #4]
 8006108:	f043 0301 	orr.w	r3, r3, #1
 800610c:	b2da      	uxtb	r2, r3
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	711a      	strb	r2, [r3, #4]
	}
	msg->compat_flags = 0;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	715a      	strb	r2, [r3, #5]
	msg->seq = status->current_tx_seq;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	799a      	ldrb	r2, [r3, #6]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	719a      	strb	r2, [r3, #6]
	status->current_tx_seq = status->current_tx_seq + 1;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	799b      	ldrb	r3, [r3, #6]
 8006124:	3301      	adds	r3, #1
 8006126:	b2da      	uxtb	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	719a      	strb	r2, [r3, #6]

	// form the header as a byte array for the crc
	buf[0] = msg->magic;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	789b      	ldrb	r3, [r3, #2]
 8006130:	743b      	strb	r3, [r7, #16]
	buf[1] = msg->len;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	78db      	ldrb	r3, [r3, #3]
 8006136:	747b      	strb	r3, [r7, #17]
	if (mavlink1) {
 8006138:	7fbb      	ldrb	r3, [r7, #30]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00f      	beq.n	800615e <mavlink_finalize_message_buffer+0x116>
		buf[2] = msg->seq;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	799b      	ldrb	r3, [r3, #6]
 8006142:	74bb      	strb	r3, [r7, #18]
		buf[3] = msg->sysid;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	79db      	ldrb	r3, [r3, #7]
 8006148:	74fb      	strb	r3, [r7, #19]
		buf[4] = msg->compid;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	7a1b      	ldrb	r3, [r3, #8]
 800614e:	753b      	strb	r3, [r7, #20]
		buf[5] = msg->msgid & 0xFF;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8006158:	b2db      	uxtb	r3, r3
 800615a:	757b      	strb	r3, [r7, #21]
 800615c:	e022      	b.n	80061a4 <mavlink_finalize_message_buffer+0x15c>
	} else {
		buf[2] = msg->incompat_flags;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	791b      	ldrb	r3, [r3, #4]
 8006162:	74bb      	strb	r3, [r7, #18]
		buf[3] = msg->compat_flags;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	795b      	ldrb	r3, [r3, #5]
 8006168:	74fb      	strb	r3, [r7, #19]
		buf[4] = msg->seq;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	799b      	ldrb	r3, [r3, #6]
 800616e:	753b      	strb	r3, [r7, #20]
		buf[5] = msg->sysid;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	79db      	ldrb	r3, [r3, #7]
 8006174:	757b      	strb	r3, [r7, #21]
		buf[6] = msg->compid;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	7a1b      	ldrb	r3, [r3, #8]
 800617a:	75bb      	strb	r3, [r7, #22]
		buf[7] = msg->msgid & 0xFF;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8006184:	b2db      	uxtb	r3, r3
 8006186:	75fb      	strb	r3, [r7, #23]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8006190:	121b      	asrs	r3, r3, #8
 8006192:	b2db      	uxtb	r3, r3
 8006194:	763b      	strb	r3, [r7, #24]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800619e:	141b      	asrs	r3, r3, #16
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	767b      	strb	r3, [r7, #25]
	}
	
	msg->checksum = crc_calculate(&buf[1], header_len-1);
 80061a4:	7ffb      	ldrb	r3, [r7, #31]
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	3b01      	subs	r3, #1
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	f107 0310 	add.w	r3, r7, #16
 80061b0:	3301      	adds	r3, #1
 80061b2:	4611      	mov	r1, r2
 80061b4:	4618      	mov	r0, r3
 80061b6:	f7ff fa5e 	bl	8005676 <crc_calculate>
 80061ba:	4603      	mov	r3, r0
 80061bc:	461a      	mov	r2, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	801a      	strh	r2, [r3, #0]
	crc_accumulate_buffer(&msg->checksum, _MAV_PAYLOAD(msg), msg->len);
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f103 0110 	add.w	r1, r3, #16
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	78db      	ldrb	r3, [r3, #3]
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	461a      	mov	r2, r3
 80061d2:	f7ff fa70 	bl	80056b6 <crc_accumulate_buffer>
	crc_accumulate(crc_extra, &msg->checksum);
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80061dc:	4611      	mov	r1, r2
 80061de:	4618      	mov	r0, r3
 80061e0:	f7ff fa09 	bl	80055f6 <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(msg->checksum & 0xFF);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	8819      	ldrh	r1, [r3, #0]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	3310      	adds	r3, #16
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	78d2      	ldrb	r2, [r2, #3]
 80061f0:	4413      	add	r3, r2
 80061f2:	b2ca      	uxtb	r2, r1
 80061f4:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(msg->checksum >> 8);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	881b      	ldrh	r3, [r3, #0]
 80061fa:	0a1b      	lsrs	r3, r3, #8
 80061fc:	b299      	uxth	r1, r3
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f103 0210 	add.w	r2, r3, #16
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	78db      	ldrb	r3, [r3, #3]
 8006208:	3301      	adds	r3, #1
 800620a:	4413      	add	r3, r2
 800620c:	b2ca      	uxtb	r2, r1
 800620e:	701a      	strb	r2, [r3, #0]

	if (signing) {
 8006210:	7f7b      	ldrb	r3, [r7, #29]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d019      	beq.n	800624a <mavlink_finalize_message_buffer+0x202>
		mavlink_sign_packet(status->signing,
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	691c      	ldr	r4, [r3, #16]
				    msg->signature,
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f503 758d 	add.w	r5, r3, #282	; 0x11a
				    (const uint8_t *)buf, header_len,
				    (const uint8_t *)_MAV_PAYLOAD(msg), msg->len,
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	3310      	adds	r3, #16
		mavlink_sign_packet(status->signing,
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	78d2      	ldrb	r2, [r2, #3]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8006228:	68f9      	ldr	r1, [r7, #12]
 800622a:	3110      	adds	r1, #16
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	78c0      	ldrb	r0, [r0, #3]
		mavlink_sign_packet(status->signing,
 8006230:	4401      	add	r1, r0
 8006232:	7ffe      	ldrb	r6, [r7, #31]
 8006234:	f107 0010 	add.w	r0, r7, #16
 8006238:	9102      	str	r1, [sp, #8]
 800623a:	9201      	str	r2, [sp, #4]
 800623c:	9300      	str	r3, [sp, #0]
 800623e:	4633      	mov	r3, r6
 8006240:	4602      	mov	r2, r0
 8006242:	4629      	mov	r1, r5
 8006244:	4620      	mov	r0, r4
 8006246:	f7ff fd4b 	bl	8005ce0 <mavlink_sign_packet>
	}
	
	return msg->len + header_len + 2 + signature_len;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	78db      	ldrb	r3, [r3, #3]
 800624e:	b29a      	uxth	r2, r3
 8006250:	7ffb      	ldrb	r3, [r7, #31]
 8006252:	b29b      	uxth	r3, r3
 8006254:	4413      	add	r3, r2
 8006256:	b29a      	uxth	r2, r3
 8006258:	7f3b      	ldrb	r3, [r7, #28]
 800625a:	b29b      	uxth	r3, r3
 800625c:	4413      	add	r3, r2
 800625e:	b29b      	uxth	r3, r3
 8006260:	3302      	adds	r3, #2
 8006262:	b29b      	uxth	r3, r3
}
 8006264:	4618      	mov	r0, r3
 8006266:	3724      	adds	r7, #36	; 0x24
 8006268:	46bd      	mov	sp, r7
 800626a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800626c <mavlink_finalize_message_chan>:

MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      uint8_t chan, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b088      	sub	sp, #32
 8006270:	af04      	add	r7, sp, #16
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	4608      	mov	r0, r1
 8006276:	4611      	mov	r1, r2
 8006278:	461a      	mov	r2, r3
 800627a:	4603      	mov	r3, r0
 800627c:	70fb      	strb	r3, [r7, #3]
 800627e:	460b      	mov	r3, r1
 8006280:	70bb      	strb	r3, [r7, #2]
 8006282:	4613      	mov	r3, r2
 8006284:	707b      	strb	r3, [r7, #1]
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 8006286:	787b      	ldrb	r3, [r7, #1]
 8006288:	4618      	mov	r0, r3
 800628a:	f7ff fd01 	bl	8005c90 <mavlink_get_channel_status>
 800628e:	60f8      	str	r0, [r7, #12]
	return mavlink_finalize_message_buffer(msg, system_id, component_id, status, min_length, length, crc_extra);
 8006290:	78ba      	ldrb	r2, [r7, #2]
 8006292:	78f9      	ldrb	r1, [r7, #3]
 8006294:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006298:	9302      	str	r3, [sp, #8]
 800629a:	7f3b      	ldrb	r3, [r7, #28]
 800629c:	9301      	str	r3, [sp, #4]
 800629e:	7e3b      	ldrb	r3, [r7, #24]
 80062a0:	9300      	str	r3, [sp, #0]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f7ff fecf 	bl	8006048 <mavlink_finalize_message_buffer>
 80062aa:	4603      	mov	r3, r0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3710      	adds	r7, #16
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <_mav_parse_error>:
{
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
}

static inline void _mav_parse_error(mavlink_status_t *status)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
    status->parse_error++;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	789b      	ldrb	r3, [r3, #2]
 80062c0:	3301      	adds	r3, #1
 80062c2:	b2da      	uxtb	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	709a      	strb	r2, [r3, #2]
}
 80062c8:	bf00      	nop
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buf, const mavlink_message_t *msg)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b086      	sub	sp, #24
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
	uint8_t signature_len, header_len;
	uint8_t *ck;
        uint8_t length = msg->len;
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	78db      	ldrb	r3, [r3, #3]
 80062e2:	73fb      	strb	r3, [r7, #15]
        
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	789b      	ldrb	r3, [r3, #2]
 80062e8:	2bfe      	cmp	r3, #254	; 0xfe
 80062ea:	d135      	bne.n	8006358 <mavlink_msg_to_send_buffer+0x84>
		signature_len = 0;
 80062ec:	2300      	movs	r3, #0
 80062ee:	75fb      	strb	r3, [r7, #23]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 80062f0:	2305      	movs	r3, #5
 80062f2:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	789a      	ldrb	r2, [r3, #2]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	3301      	adds	r3, #1
 8006300:	7bfa      	ldrb	r2, [r7, #15]
 8006302:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->seq;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	3302      	adds	r3, #2
 8006308:	683a      	ldr	r2, [r7, #0]
 800630a:	7992      	ldrb	r2, [r2, #6]
 800630c:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->sysid;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	3303      	adds	r3, #3
 8006312:	683a      	ldr	r2, [r7, #0]
 8006314:	79d2      	ldrb	r2, [r2, #7]
 8006316:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->compid;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	3304      	adds	r3, #4
 800631c:	683a      	ldr	r2, [r7, #0]
 800631e:	7a12      	ldrb	r2, [r2, #8]
 8006320:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->msgid & 0xFF;
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f3c3 2217 	ubfx	r2, r3, #8, #24
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	3305      	adds	r3, #5
 800632e:	b2d2      	uxtb	r2, r2
 8006330:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	1d98      	adds	r0, r3, #6
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	f103 0110 	add.w	r1, r3, #16
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	78db      	ldrb	r3, [r3, #3]
 8006340:	461a      	mov	r2, r3
 8006342:	f001 fddf 	bl	8007f04 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8006346:	7dbb      	ldrb	r3, [r7, #22]
 8006348:	683a      	ldr	r2, [r7, #0]
 800634a:	78d2      	ldrb	r2, [r2, #3]
 800634c:	4413      	add	r3, r2
 800634e:	3301      	adds	r3, #1
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	4413      	add	r3, r2
 8006354:	613b      	str	r3, [r7, #16]
 8006356:	e05f      	b.n	8006418 <mavlink_msg_to_send_buffer+0x144>
	} else {
		length = _mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	3310      	adds	r3, #16
 800635c:	7bfa      	ldrb	r2, [r7, #15]
 800635e:	4611      	mov	r1, r2
 8006360:	4618      	mov	r0, r3
 8006362:	f7ff fd23 	bl	8005dac <_mav_trim_payload>
 8006366:	4603      	mov	r3, r0
 8006368:	73fb      	strb	r3, [r7, #15]
		header_len = MAVLINK_CORE_HEADER_LEN;
 800636a:	2309      	movs	r3, #9
 800636c:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	789a      	ldrb	r2, [r3, #2]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	3301      	adds	r3, #1
 800637a:	7bfa      	ldrb	r2, [r7, #15]
 800637c:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->incompat_flags;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	3302      	adds	r3, #2
 8006382:	683a      	ldr	r2, [r7, #0]
 8006384:	7912      	ldrb	r2, [r2, #4]
 8006386:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->compat_flags;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	3303      	adds	r3, #3
 800638c:	683a      	ldr	r2, [r7, #0]
 800638e:	7952      	ldrb	r2, [r2, #5]
 8006390:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->seq;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	3304      	adds	r3, #4
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	7992      	ldrb	r2, [r2, #6]
 800639a:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->sysid;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	3305      	adds	r3, #5
 80063a0:	683a      	ldr	r2, [r7, #0]
 80063a2:	79d2      	ldrb	r2, [r2, #7]
 80063a4:	701a      	strb	r2, [r3, #0]
		buf[6] = msg->compid;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	3306      	adds	r3, #6
 80063aa:	683a      	ldr	r2, [r7, #0]
 80063ac:	7a12      	ldrb	r2, [r2, #8]
 80063ae:	701a      	strb	r2, [r3, #0]
		buf[7] = msg->msgid & 0xFF;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	f3c3 2217 	ubfx	r2, r3, #8, #24
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	3307      	adds	r3, #7
 80063bc:	b2d2      	uxtb	r2, r2
 80063be:	701a      	strb	r2, [r3, #0]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80063c8:	121a      	asrs	r2, r3, #8
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	3308      	adds	r3, #8
 80063ce:	b2d2      	uxtb	r2, r2
 80063d0:	701a      	strb	r2, [r3, #0]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80063da:	141a      	asrs	r2, r3, #16
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	3309      	adds	r3, #9
 80063e0:	b2d2      	uxtb	r2, r2
 80063e2:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f103 000a 	add.w	r0, r3, #10
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	3310      	adds	r3, #16
 80063ee:	7bfa      	ldrb	r2, [r7, #15]
 80063f0:	4619      	mov	r1, r3
 80063f2:	f001 fd87 	bl	8007f04 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 80063f6:	7dba      	ldrb	r2, [r7, #22]
 80063f8:	7bfb      	ldrb	r3, [r7, #15]
 80063fa:	4413      	add	r3, r2
 80063fc:	3301      	adds	r3, #1
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	4413      	add	r3, r2
 8006402:	613b      	str	r3, [r7, #16]
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	791b      	ldrb	r3, [r3, #4]
 8006408:	f003 0301 	and.w	r3, r3, #1
 800640c:	2b00      	cmp	r3, #0
 800640e:	d001      	beq.n	8006414 <mavlink_msg_to_send_buffer+0x140>
 8006410:	230d      	movs	r3, #13
 8006412:	e000      	b.n	8006416 <mavlink_msg_to_send_buffer+0x142>
 8006414:	2300      	movs	r3, #0
 8006416:	75fb      	strb	r3, [r7, #23]
	}
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	881b      	ldrh	r3, [r3, #0]
 800641c:	b2da      	uxtb	r2, r3
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	0a1b      	lsrs	r3, r3, #8
 8006428:	b29a      	uxth	r2, r3
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	3301      	adds	r3, #1
 800642e:	b2d2      	uxtb	r2, r2
 8006430:	701a      	strb	r2, [r3, #0]
	if (signature_len > 0) {
 8006432:	7dfb      	ldrb	r3, [r7, #23]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d008      	beq.n	800644a <mavlink_msg_to_send_buffer+0x176>
		memcpy(&ck[2], msg->signature, signature_len);
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	1c98      	adds	r0, r3, #2
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8006442:	7dfa      	ldrb	r2, [r7, #23]
 8006444:	4619      	mov	r1, r3
 8006446:	f001 fd5d 	bl	8007f04 <memcpy>
	}

	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 800644a:	7dbb      	ldrb	r3, [r7, #22]
 800644c:	b29a      	uxth	r2, r3
 800644e:	7bfb      	ldrb	r3, [r7, #15]
 8006450:	b29b      	uxth	r3, r3
 8006452:	4413      	add	r3, r2
 8006454:	b29a      	uxth	r2, r3
 8006456:	7dfb      	ldrb	r3, [r7, #23]
 8006458:	b29b      	uxth	r3, r3
 800645a:	4413      	add	r3, r2
 800645c:	b29b      	uxth	r3, r3
 800645e:	3303      	adds	r3, #3
 8006460:	b29b      	uxth	r3, r3
}
 8006462:	4618      	mov	r0, r3
 8006464:	3718      	adds	r7, #24
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}

0800646a <mavlink_start_checksum>:
	int32_t int32;
};


MAVLINK_HELPER void mavlink_start_checksum(mavlink_message_t* msg)
{
 800646a:	b580      	push	{r7, lr}
 800646c:	b082      	sub	sp, #8
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
	crc_init(&msg->checksum);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4618      	mov	r0, r3
 8006476:	f7ff f8f0 	bl	800565a <crc_init>
}
 800647a:	bf00      	nop
 800647c:	3708      	adds	r7, #8
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <mavlink_update_checksum>:

MAVLINK_HELPER void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c)
{
 8006482:	b580      	push	{r7, lr}
 8006484:	b082      	sub	sp, #8
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
 800648a:	460b      	mov	r3, r1
 800648c:	70fb      	strb	r3, [r7, #3]
	crc_accumulate(c, &msg->checksum);
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	78fb      	ldrb	r3, [r7, #3]
 8006492:	4611      	mov	r1, r2
 8006494:	4618      	mov	r0, r3
 8006496:	f7ff f8ae 	bl	80055f6 <crc_accumulate>
}
 800649a:	bf00      	nop
 800649c:	3708      	adds	r7, #8
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
	...

080064a4 <mavlink_get_msg_entry>:
/*
  return the crc_entry value for a msgid
*/
#ifndef MAVLINK_GET_MSG_ENTRY
MAVLINK_HELPER const mavlink_msg_entry_t *mavlink_get_msg_entry(uint32_t msgid)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b087      	sub	sp, #28
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
	static const mavlink_msg_entry_t mavlink_message_crcs[] = MAVLINK_MESSAGE_CRCS;
        /*
	  use a bisection search to find the right entry. A perfect hash may be better
	  Note that this assumes the table is sorted by msgid
	*/
        uint32_t low=0, high=sizeof(mavlink_message_crcs)/sizeof(mavlink_message_crcs[0]);
 80064ac:	2300      	movs	r3, #0
 80064ae:	617b      	str	r3, [r7, #20]
 80064b0:	f44f 738d 	mov.w	r3, #282	; 0x11a
 80064b4:	613b      	str	r3, [r7, #16]
        while (low < high) {
 80064b6:	e025      	b.n	8006504 <mavlink_get_msg_entry+0x60>
            uint32_t mid = (low+1+high)/2;
 80064b8:	697a      	ldr	r2, [r7, #20]
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	4413      	add	r3, r2
 80064be:	3301      	adds	r3, #1
 80064c0:	085b      	lsrs	r3, r3, #1
 80064c2:	60fb      	str	r3, [r7, #12]
            if (msgid < mavlink_message_crcs[mid].msgid) {
 80064c4:	491e      	ldr	r1, [pc, #120]	; (8006540 <mavlink_get_msg_entry+0x9c>)
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	4613      	mov	r3, r2
 80064ca:	005b      	lsls	r3, r3, #1
 80064cc:	4413      	add	r3, r2
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	440b      	add	r3, r1
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d203      	bcs.n	80064e2 <mavlink_get_msg_entry+0x3e>
                high = mid-1;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	3b01      	subs	r3, #1
 80064de:	613b      	str	r3, [r7, #16]
                continue;
 80064e0:	e010      	b.n	8006504 <mavlink_get_msg_entry+0x60>
            }
            if (msgid > mavlink_message_crcs[mid].msgid) {
 80064e2:	4917      	ldr	r1, [pc, #92]	; (8006540 <mavlink_get_msg_entry+0x9c>)
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	4613      	mov	r3, r2
 80064e8:	005b      	lsls	r3, r3, #1
 80064ea:	4413      	add	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	440b      	add	r3, r1
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d902      	bls.n	80064fe <mavlink_get_msg_entry+0x5a>
                low = mid;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	617b      	str	r3, [r7, #20]
                continue;
 80064fc:	e002      	b.n	8006504 <mavlink_get_msg_entry+0x60>
            }
            low = mid;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	617b      	str	r3, [r7, #20]
            break;
 8006502:	e003      	b.n	800650c <mavlink_get_msg_entry+0x68>
        while (low < high) {
 8006504:	697a      	ldr	r2, [r7, #20]
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	429a      	cmp	r2, r3
 800650a:	d3d5      	bcc.n	80064b8 <mavlink_get_msg_entry+0x14>
        }
        if (mavlink_message_crcs[low].msgid != msgid) {
 800650c:	490c      	ldr	r1, [pc, #48]	; (8006540 <mavlink_get_msg_entry+0x9c>)
 800650e:	697a      	ldr	r2, [r7, #20]
 8006510:	4613      	mov	r3, r2
 8006512:	005b      	lsls	r3, r3, #1
 8006514:	4413      	add	r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	440b      	add	r3, r1
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	429a      	cmp	r2, r3
 8006520:	d001      	beq.n	8006526 <mavlink_get_msg_entry+0x82>
            // msgid is not in the table
            return NULL;
 8006522:	2300      	movs	r3, #0
 8006524:	e006      	b.n	8006534 <mavlink_get_msg_entry+0x90>
        }
        return &mavlink_message_crcs[low];
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	4613      	mov	r3, r2
 800652a:	005b      	lsls	r3, r3, #1
 800652c:	4413      	add	r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4a03      	ldr	r2, [pc, #12]	; (8006540 <mavlink_get_msg_entry+0x9c>)
 8006532:	4413      	add	r3, r2
}
 8006534:	4618      	mov	r0, r3
 8006536:	371c      	adds	r7, #28
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr
 8006540:	0800e4b4 	.word	0x0800e4b4

08006544 <mavlink_frame_char_buffer>:
MAVLINK_HELPER uint8_t mavlink_frame_char_buffer(mavlink_message_t* rxmsg, 
                                                 mavlink_status_t* status,
                                                 uint8_t c, 
                                                 mavlink_message_t* r_message, 
                                                 mavlink_status_t* r_mavlink_status)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b088      	sub	sp, #32
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	603b      	str	r3, [r7, #0]
 8006550:	4613      	mov	r3, r2
 8006552:	71fb      	strb	r3, [r7, #7]
	static const uint8_t mavlink_message_lengths[256] = MAVLINK_MESSAGE_LENGTHS;
#define MAVLINK_MESSAGE_LENGTH(msgid) mavlink_message_lengths[msgid]
#endif
#endif

	int bufferIndex = 0;
 8006554:	2300      	movs	r3, #0
 8006556:	61bb      	str	r3, [r7, #24]

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	2200      	movs	r2, #0
 800655c:	701a      	strb	r2, [r3, #0]

	switch (status->parse_state)
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	78db      	ldrb	r3, [r3, #3]
 8006562:	2b0f      	cmp	r3, #15
 8006564:	f200 8251 	bhi.w	8006a0a <mavlink_frame_char_buffer+0x4c6>
 8006568:	a201      	add	r2, pc, #4	; (adr r2, 8006570 <mavlink_frame_char_buffer+0x2c>)
 800656a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800656e:	bf00      	nop
 8006570:	080065b1 	.word	0x080065b1
 8006574:	080065b1 	.word	0x080065b1
 8006578:	0800660f 	.word	0x0800660f
 800657c:	08006675 	.word	0x08006675
 8006580:	080066ad 	.word	0x080066ad
 8006584:	080066c5 	.word	0x080066c5
 8006588:	080066dd 	.word	0x080066dd
 800658c:	080066f5 	.word	0x080066f5
 8006590:	0800670d 	.word	0x0800670d
 8006594:	08006767 	.word	0x08006767
 8006598:	080067ab 	.word	0x080067ab
 800659c:	080067ff 	.word	0x080067ff
 80065a0:	08006837 	.word	0x08006837
 80065a4:	080068b9 	.word	0x080068b9
 80065a8:	080068b9 	.word	0x080068b9
 80065ac:	08006963 	.word	0x08006963
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
 80065b0:	79fb      	ldrb	r3, [r7, #7]
 80065b2:	2bfd      	cmp	r3, #253	; 0xfd
 80065b4:	d113      	bne.n	80065de <mavlink_frame_char_buffer+0x9a>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	2202      	movs	r2, #2
 80065ba:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	79fa      	ldrb	r2, [r7, #7]
 80065c6:	709a      	strb	r2, [r3, #2]
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	7b1b      	ldrb	r3, [r3, #12]
 80065cc:	f023 0301 	bic.w	r3, r3, #1
 80065d0:	b2da      	uxtb	r2, r3
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 80065d6:	68f8      	ldr	r0, [r7, #12]
 80065d8:	f7ff ff47 	bl	800646a <mavlink_start_checksum>
			rxmsg->len = 0;
			rxmsg->magic = c;
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
			mavlink_start_checksum(rxmsg);
		}
		break;
 80065dc:	e20c      	b.n	80069f8 <mavlink_frame_char_buffer+0x4b4>
		} else if (c == MAVLINK_STX_MAVLINK1)
 80065de:	79fb      	ldrb	r3, [r7, #7]
 80065e0:	2bfe      	cmp	r3, #254	; 0xfe
 80065e2:	f040 8209 	bne.w	80069f8 <mavlink_frame_char_buffer+0x4b4>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	2202      	movs	r2, #2
 80065ea:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2200      	movs	r2, #0
 80065f0:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	79fa      	ldrb	r2, [r7, #7]
 80065f6:	709a      	strb	r2, [r3, #2]
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	7b1b      	ldrb	r3, [r3, #12]
 80065fc:	f043 0301 	orr.w	r3, r3, #1
 8006600:	b2da      	uxtb	r2, r3
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	f7ff ff2f 	bl	800646a <mavlink_start_checksum>
		break;
 800660c:	e1f4      	b.n	80069f8 <mavlink_frame_char_buffer+0x4b4>

	case MAVLINK_PARSE_STATE_GOT_STX:
			if (status->msg_received 
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00f      	beq.n	8006636 <mavlink_frame_char_buffer+0xf2>
#if (MAVLINK_MAX_PAYLOAD_LEN < 255)
				|| c > MAVLINK_MAX_PAYLOAD_LEN
#endif
				)
		{
			status->buffer_overrun++;
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	785b      	ldrb	r3, [r3, #1]
 800661a:	3301      	adds	r3, #1
 800661c:	b2da      	uxtb	r2, r3
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	705a      	strb	r2, [r3, #1]
			_mav_parse_error(status);
 8006622:	68b8      	ldr	r0, [r7, #8]
 8006624:	f7ff fe46 	bl	80062b4 <_mav_parse_error>
			status->msg_received = 0;
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	2200      	movs	r2, #0
 800662c:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	2201      	movs	r2, #1
 8006632:	70da      	strb	r2, [r3, #3]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
                        } else {
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
                        }
		}
		break;
 8006634:	e1e9      	b.n	8006a0a <mavlink_frame_char_buffer+0x4c6>
			rxmsg->len = c;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	79fa      	ldrb	r2, [r7, #7]
 800663a:	70da      	strb	r2, [r3, #3]
			status->packet_idx = 0;
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	2200      	movs	r2, #0
 8006640:	711a      	strb	r2, [r3, #4]
			mavlink_update_checksum(rxmsg, c);
 8006642:	79fb      	ldrb	r3, [r7, #7]
 8006644:	4619      	mov	r1, r3
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f7ff ff1b 	bl	8006482 <mavlink_update_checksum>
                        if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	7b1b      	ldrb	r3, [r3, #12]
 8006650:	f003 0301 	and.w	r3, r3, #1
 8006654:	2b00      	cmp	r3, #0
 8006656:	d009      	beq.n	800666c <mavlink_frame_char_buffer+0x128>
                            rxmsg->incompat_flags = 0;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	711a      	strb	r2, [r3, #4]
                            rxmsg->compat_flags = 0;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	715a      	strb	r2, [r3, #5]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	2205      	movs	r2, #5
 8006668:	70da      	strb	r2, [r3, #3]
		break;
 800666a:	e1ce      	b.n	8006a0a <mavlink_frame_char_buffer+0x4c6>
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	2203      	movs	r2, #3
 8006670:	70da      	strb	r2, [r3, #3]
		break;
 8006672:	e1ca      	b.n	8006a0a <mavlink_frame_char_buffer+0x4c6>

	case MAVLINK_PARSE_STATE_GOT_LENGTH:
		rxmsg->incompat_flags = c;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	79fa      	ldrb	r2, [r7, #7]
 8006678:	711a      	strb	r2, [r3, #4]
		if ((rxmsg->incompat_flags & ~MAVLINK_IFLAG_MASK) != 0) {
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	791b      	ldrb	r3, [r3, #4]
 800667e:	f023 0301 	bic.w	r3, r3, #1
 8006682:	2b00      	cmp	r3, #0
 8006684:	d009      	beq.n	800669a <mavlink_frame_char_buffer+0x156>
			// message includes an incompatible feature flag
			_mav_parse_error(status);
 8006686:	68b8      	ldr	r0, [r7, #8]
 8006688:	f7ff fe14 	bl	80062b4 <_mav_parse_error>
			status->msg_received = 0;
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	2200      	movs	r2, #0
 8006690:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	2201      	movs	r2, #1
 8006696:	70da      	strb	r2, [r3, #3]
			break;
 8006698:	e1b7      	b.n	8006a0a <mavlink_frame_char_buffer+0x4c6>
		}
		mavlink_update_checksum(rxmsg, c);
 800669a:	79fb      	ldrb	r3, [r7, #7]
 800669c:	4619      	mov	r1, r3
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	f7ff feef 	bl	8006482 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS;
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	2204      	movs	r2, #4
 80066a8:	70da      	strb	r2, [r3, #3]
		break;
 80066aa:	e1ae      	b.n	8006a0a <mavlink_frame_char_buffer+0x4c6>

	case MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS:
		rxmsg->compat_flags = c;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	79fa      	ldrb	r2, [r7, #7]
 80066b0:	715a      	strb	r2, [r3, #5]
		mavlink_update_checksum(rxmsg, c);
 80066b2:	79fb      	ldrb	r3, [r7, #7]
 80066b4:	4619      	mov	r1, r3
 80066b6:	68f8      	ldr	r0, [r7, #12]
 80066b8:	f7ff fee3 	bl	8006482 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	2205      	movs	r2, #5
 80066c0:	70da      	strb	r2, [r3, #3]
		break;
 80066c2:	e1a2      	b.n	8006a0a <mavlink_frame_char_buffer+0x4c6>

	case MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS:
		rxmsg->seq = c;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	79fa      	ldrb	r2, [r7, #7]
 80066c8:	719a      	strb	r2, [r3, #6]
		mavlink_update_checksum(rxmsg, c);
 80066ca:	79fb      	ldrb	r3, [r7, #7]
 80066cc:	4619      	mov	r1, r3
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f7ff fed7 	bl	8006482 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	2206      	movs	r2, #6
 80066d8:	70da      	strb	r2, [r3, #3]
		break;
 80066da:	e196      	b.n	8006a0a <mavlink_frame_char_buffer+0x4c6>
                
	case MAVLINK_PARSE_STATE_GOT_SEQ:
		rxmsg->sysid = c;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	79fa      	ldrb	r2, [r7, #7]
 80066e0:	71da      	strb	r2, [r3, #7]
		mavlink_update_checksum(rxmsg, c);
 80066e2:	79fb      	ldrb	r3, [r7, #7]
 80066e4:	4619      	mov	r1, r3
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f7ff fecb 	bl	8006482 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	2207      	movs	r2, #7
 80066f0:	70da      	strb	r2, [r3, #3]
		break;
 80066f2:	e18a      	b.n	8006a0a <mavlink_frame_char_buffer+0x4c6>

	case MAVLINK_PARSE_STATE_GOT_SYSID:
		rxmsg->compid = c;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	79fa      	ldrb	r2, [r7, #7]
 80066f8:	721a      	strb	r2, [r3, #8]
		mavlink_update_checksum(rxmsg, c);
 80066fa:	79fb      	ldrb	r3, [r7, #7]
 80066fc:	4619      	mov	r1, r3
 80066fe:	68f8      	ldr	r0, [r7, #12]
 8006700:	f7ff febf 	bl	8006482 <mavlink_update_checksum>
                status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	2208      	movs	r2, #8
 8006708:	70da      	strb	r2, [r3, #3]
		break;
 800670a:	e17e      	b.n	8006a0a <mavlink_frame_char_buffer+0x4c6>

	case MAVLINK_PARSE_STATE_GOT_COMPID:
		rxmsg->msgid = c;
 800670c:	79fb      	ldrb	r3, [r7, #7]
 800670e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	b2d9      	uxtb	r1, r3
 8006716:	2000      	movs	r0, #0
 8006718:	4301      	orrs	r1, r0
 800671a:	7251      	strb	r1, [r2, #9]
 800671c:	0a19      	lsrs	r1, r3, #8
 800671e:	b2c9      	uxtb	r1, r1
 8006720:	2000      	movs	r0, #0
 8006722:	4301      	orrs	r1, r0
 8006724:	7291      	strb	r1, [r2, #10]
 8006726:	0c1b      	lsrs	r3, r3, #16
 8006728:	b2db      	uxtb	r3, r3
 800672a:	2100      	movs	r1, #0
 800672c:	430b      	orrs	r3, r1
 800672e:	72d3      	strb	r3, [r2, #11]
		mavlink_update_checksum(rxmsg, c);
 8006730:	79fb      	ldrb	r3, [r7, #7]
 8006732:	4619      	mov	r1, r3
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f7ff fea4 	bl	8006482 <mavlink_update_checksum>
                if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	7b1b      	ldrb	r3, [r3, #12]
 800673e:	f003 0301 	and.w	r3, r3, #1
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00b      	beq.n	800675e <mavlink_frame_char_buffer+0x21a>
                    if(rxmsg->len > 0){
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	78db      	ldrb	r3, [r3, #3]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d003      	beq.n	8006756 <mavlink_frame_char_buffer+0x212>
                        status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	220b      	movs	r2, #11
 8006752:	70da      	strb	r2, [r3, #3]
                    }
#endif
                } else {
                    status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
                }
		break;
 8006754:	e159      	b.n	8006a0a <mavlink_frame_char_buffer+0x4c6>
                        status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	220c      	movs	r2, #12
 800675a:	70da      	strb	r2, [r3, #3]
		break;
 800675c:	e155      	b.n	8006a0a <mavlink_frame_char_buffer+0x4c6>
                    status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	2209      	movs	r2, #9
 8006762:	70da      	strb	r2, [r3, #3]
		break;
 8006764:	e151      	b.n	8006a0a <mavlink_frame_char_buffer+0x4c6>

	case MAVLINK_PARSE_STATE_GOT_MSGID1:
		rxmsg->msgid |= c<<8;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800676e:	461a      	mov	r2, r3
 8006770:	79fb      	ldrb	r3, [r7, #7]
 8006772:	021b      	lsls	r3, r3, #8
 8006774:	4313      	orrs	r3, r2
 8006776:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	b2d1      	uxtb	r1, r2
 800677e:	2000      	movs	r0, #0
 8006780:	4301      	orrs	r1, r0
 8006782:	7259      	strb	r1, [r3, #9]
 8006784:	0a11      	lsrs	r1, r2, #8
 8006786:	b2c9      	uxtb	r1, r1
 8006788:	2000      	movs	r0, #0
 800678a:	4301      	orrs	r1, r0
 800678c:	7299      	strb	r1, [r3, #10]
 800678e:	0c12      	lsrs	r2, r2, #16
 8006790:	b2d2      	uxtb	r2, r2
 8006792:	2100      	movs	r1, #0
 8006794:	430a      	orrs	r2, r1
 8006796:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 8006798:	79fb      	ldrb	r3, [r7, #7]
 800679a:	4619      	mov	r1, r3
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	f7ff fe70 	bl	8006482 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID2;
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	220a      	movs	r2, #10
 80067a6:	70da      	strb	r2, [r3, #3]
		break;
 80067a8:	e12f      	b.n	8006a0a <mavlink_frame_char_buffer+0x4c6>

	case MAVLINK_PARSE_STATE_GOT_MSGID2:
		rxmsg->msgid |= ((uint32_t)c)<<16;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80067b2:	461a      	mov	r2, r3
 80067b4:	79fb      	ldrb	r3, [r7, #7]
 80067b6:	041b      	lsls	r3, r3, #16
 80067b8:	4313      	orrs	r3, r2
 80067ba:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	b2d1      	uxtb	r1, r2
 80067c2:	2000      	movs	r0, #0
 80067c4:	4301      	orrs	r1, r0
 80067c6:	7259      	strb	r1, [r3, #9]
 80067c8:	0a11      	lsrs	r1, r2, #8
 80067ca:	b2c9      	uxtb	r1, r1
 80067cc:	2000      	movs	r0, #0
 80067ce:	4301      	orrs	r1, r0
 80067d0:	7299      	strb	r1, [r3, #10]
 80067d2:	0c12      	lsrs	r2, r2, #16
 80067d4:	b2d2      	uxtb	r2, r2
 80067d6:	2100      	movs	r1, #0
 80067d8:	430a      	orrs	r2, r1
 80067da:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 80067dc:	79fb      	ldrb	r3, [r7, #7]
 80067de:	4619      	mov	r1, r3
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	f7ff fe4e 	bl	8006482 <mavlink_update_checksum>
		if(rxmsg->len > 0){
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	78db      	ldrb	r3, [r3, #3]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d003      	beq.n	80067f6 <mavlink_frame_char_buffer+0x2b2>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	220b      	movs	r2, #11
 80067f2:	70da      	strb	r2, [r3, #3]
			_mav_parse_error(status);
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			break;
                }
#endif
		break;
 80067f4:	e109      	b.n	8006a0a <mavlink_frame_char_buffer+0x4c6>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	220c      	movs	r2, #12
 80067fa:	70da      	strb	r2, [r3, #3]
		break;
 80067fc:	e105      	b.n	8006a0a <mavlink_frame_char_buffer+0x4c6>
                
	case MAVLINK_PARSE_STATE_GOT_MSGID3:
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f103 0210 	add.w	r2, r3, #16
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	791b      	ldrb	r3, [r3, #4]
 8006808:	1c59      	adds	r1, r3, #1
 800680a:	b2c8      	uxtb	r0, r1
 800680c:	68b9      	ldr	r1, [r7, #8]
 800680e:	7108      	strb	r0, [r1, #4]
 8006810:	4413      	add	r3, r2
 8006812:	79fa      	ldrb	r2, [r7, #7]
 8006814:	701a      	strb	r2, [r3, #0]
		mavlink_update_checksum(rxmsg, c);
 8006816:	79fb      	ldrb	r3, [r7, #7]
 8006818:	4619      	mov	r1, r3
 800681a:	68f8      	ldr	r0, [r7, #12]
 800681c:	f7ff fe31 	bl	8006482 <mavlink_update_checksum>
		if (status->packet_idx == rxmsg->len)
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	791a      	ldrb	r2, [r3, #4]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	78db      	ldrb	r3, [r3, #3]
 8006828:	429a      	cmp	r2, r3
 800682a:	f040 80e7 	bne.w	80069fc <mavlink_frame_char_buffer+0x4b8>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	220c      	movs	r2, #12
 8006832:	70da      	strb	r2, [r3, #3]
		}
		break;
 8006834:	e0e2      	b.n	80069fc <mavlink_frame_char_buffer+0x4b8>

	case MAVLINK_PARSE_STATE_GOT_PAYLOAD: {
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800683e:	4618      	mov	r0, r3
 8006840:	f7ff fe30 	bl	80064a4 <mavlink_get_msg_entry>
 8006844:	6178      	str	r0, [r7, #20]
		uint8_t crc_extra = e?e->crc_extra:0;
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d002      	beq.n	8006852 <mavlink_frame_char_buffer+0x30e>
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	791b      	ldrb	r3, [r3, #4]
 8006850:	e000      	b.n	8006854 <mavlink_frame_char_buffer+0x310>
 8006852:	2300      	movs	r3, #0
 8006854:	74fb      	strb	r3, [r7, #19]
		mavlink_update_checksum(rxmsg, crc_extra);
 8006856:	7cfb      	ldrb	r3, [r7, #19]
 8006858:	4619      	mov	r1, r3
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f7ff fe11 	bl	8006482 <mavlink_update_checksum>
		if (c != (rxmsg->checksum & 0xFF)) {
 8006860:	79fa      	ldrb	r2, [r7, #7]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	881b      	ldrh	r3, [r3, #0]
 8006866:	b2db      	uxtb	r3, r3
 8006868:	429a      	cmp	r2, r3
 800686a:	d003      	beq.n	8006874 <mavlink_frame_char_buffer+0x330>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	220e      	movs	r2, #14
 8006870:	70da      	strb	r2, [r3, #3]
 8006872:	e002      	b.n	800687a <mavlink_frame_char_buffer+0x336>
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	220d      	movs	r2, #13
 8006878:	70da      	strb	r2, [r3, #3]
		}
                rxmsg->ck[0] = c;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	79fa      	ldrb	r2, [r7, #7]
 800687e:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118

		// zero-fill the packet to cope with short incoming packets
		if (e && status->packet_idx < e->msg_len) {
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	2b00      	cmp	r3, #0
 8006886:	f000 80bb 	beq.w	8006a00 <mavlink_frame_char_buffer+0x4bc>
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	791a      	ldrb	r2, [r3, #4]
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	795b      	ldrb	r3, [r3, #5]
 8006892:	429a      	cmp	r2, r3
 8006894:	f080 80b4 	bcs.w	8006a00 <mavlink_frame_char_buffer+0x4bc>
			memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->msg_len - status->packet_idx);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	3310      	adds	r3, #16
 800689c:	68ba      	ldr	r2, [r7, #8]
 800689e:	7912      	ldrb	r2, [r2, #4]
 80068a0:	1898      	adds	r0, r3, r2
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	795b      	ldrb	r3, [r3, #5]
 80068a6:	461a      	mov	r2, r3
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	791b      	ldrb	r3, [r3, #4]
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	461a      	mov	r2, r3
 80068b0:	2100      	movs	r1, #0
 80068b2:	f001 fb35 	bl	8007f20 <memset>
		}
		break;
 80068b6:	e0a3      	b.n	8006a00 <mavlink_frame_char_buffer+0x4bc>
        }

	case MAVLINK_PARSE_STATE_GOT_CRC1:
	case MAVLINK_PARSE_STATE_GOT_BAD_CRC1:
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	78db      	ldrb	r3, [r3, #3]
 80068bc:	2b0e      	cmp	r3, #14
 80068be:	d007      	beq.n	80068d0 <mavlink_frame_char_buffer+0x38c>
 80068c0:	79fb      	ldrb	r3, [r7, #7]
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	881b      	ldrh	r3, [r3, #0]
 80068c8:	0a1b      	lsrs	r3, r3, #8
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d003      	beq.n	80068d8 <mavlink_frame_char_buffer+0x394>
			// got a bad CRC message
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	2202      	movs	r2, #2
 80068d4:	701a      	strb	r2, [r3, #0]
 80068d6:	e002      	b.n	80068de <mavlink_frame_char_buffer+0x39a>
		} else {
			// Successfully got message
			status->msg_received = MAVLINK_FRAMING_OK;
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	2201      	movs	r2, #1
 80068dc:	701a      	strb	r2, [r3, #0]
		}
		rxmsg->ck[1] = c;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	79fa      	ldrb	r2, [r7, #7]
 80068e2:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119

		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	791b      	ldrb	r3, [r3, #4]
 80068ea:	f003 0301 	and.w	r3, r3, #1
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00d      	beq.n	800690e <mavlink_frame_char_buffer+0x3ca>
			status->parse_state = MAVLINK_PARSE_STATE_SIGNATURE_WAIT;
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	220f      	movs	r2, #15
 80068f6:	70da      	strb	r2, [r3, #3]
			status->signature_wait = MAVLINK_SIGNATURE_BLOCK_LEN;
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	220d      	movs	r2, #13
 80068fc:	735a      	strb	r2, [r3, #13]

			// If the CRC is already wrong, don't overwrite msg_received,
			// otherwise we can end up with garbage flagged as valid.
			if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	2b02      	cmp	r3, #2
 8006904:	d07e      	beq.n	8006a04 <mavlink_frame_char_buffer+0x4c0>
				status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	2200      	movs	r2, #0
 800690a:	701a      	strb	r2, [r3, #0]
				}
			}
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
		}
		break;
 800690c:	e07a      	b.n	8006a04 <mavlink_frame_char_buffer+0x4c0>
			if (status->signing &&
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d01b      	beq.n	800694e <mavlink_frame_char_buffer+0x40a>
			   	(status->signing->accept_unsigned_callback == NULL ||
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (status->signing &&
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00f      	beq.n	8006940 <mavlink_frame_char_buffer+0x3fc>
			   	 !status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	6892      	ldr	r2, [r2, #8]
 800692a:	f3c2 2217 	ubfx	r2, r2, #8, #24
 800692e:	4611      	mov	r1, r2
 8006930:	68b8      	ldr	r0, [r7, #8]
 8006932:	4798      	blx	r3
 8006934:	4603      	mov	r3, r0
 8006936:	f083 0301 	eor.w	r3, r3, #1
 800693a:	b2db      	uxtb	r3, r3
			   	(status->signing->accept_unsigned_callback == NULL ||
 800693c:	2b00      	cmp	r3, #0
 800693e:	d006      	beq.n	800694e <mavlink_frame_char_buffer+0x40a>
				if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	2b02      	cmp	r3, #2
 8006946:	d002      	beq.n	800694e <mavlink_frame_char_buffer+0x40a>
					status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	2203      	movs	r2, #3
 800694c:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	2201      	movs	r2, #1
 8006952:	70da      	strb	r2, [r3, #3]
			memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8006954:	f44f 7294 	mov.w	r2, #296	; 0x128
 8006958:	68f9      	ldr	r1, [r7, #12]
 800695a:	6838      	ldr	r0, [r7, #0]
 800695c:	f001 fad2 	bl	8007f04 <memcpy>
		break;
 8006960:	e050      	b.n	8006a04 <mavlink_frame_char_buffer+0x4c0>
	case MAVLINK_PARSE_STATE_SIGNATURE_WAIT:
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	7b5b      	ldrb	r3, [r3, #13]
 8006966:	f1c3 030d 	rsb	r3, r3, #13
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	4413      	add	r3, r2
 800696e:	79fa      	ldrb	r2, [r7, #7]
 8006970:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
		status->signature_wait--;
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	7b5b      	ldrb	r3, [r3, #13]
 8006978:	3b01      	subs	r3, #1
 800697a:	b2da      	uxtb	r2, r3
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	735a      	strb	r2, [r3, #13]
		if (status->signature_wait == 0) {
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	7b5b      	ldrb	r3, [r3, #13]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d13f      	bne.n	8006a08 <mavlink_frame_char_buffer+0x4c4>
			// we have the whole signature, check it is OK
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	6918      	ldr	r0, [r3, #16]
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	695b      	ldr	r3, [r3, #20]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	4619      	mov	r1, r3
 8006994:	f7ff fa26 	bl	8005de4 <mavlink_signature_check>
 8006998:	4603      	mov	r3, r0
 800699a:	77fb      	strb	r3, [r7, #31]
			if (!sig_ok &&
 800699c:	7ffb      	ldrb	r3, [r7, #31]
 800699e:	f083 0301 	eor.w	r3, r3, #1
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d013      	beq.n	80069d0 <mavlink_frame_char_buffer+0x48c>
			   	(status->signing->accept_unsigned_callback &&
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (!sig_ok &&
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00e      	beq.n	80069d0 <mavlink_frame_char_buffer+0x48c>
			   	 status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	6892      	ldr	r2, [r2, #8]
 80069bc:	f3c2 2217 	ubfx	r2, r2, #8, #24
 80069c0:	4611      	mov	r1, r2
 80069c2:	68b8      	ldr	r0, [r7, #8]
 80069c4:	4798      	blx	r3
 80069c6:	4603      	mov	r3, r0
			   	(status->signing->accept_unsigned_callback &&
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d001      	beq.n	80069d0 <mavlink_frame_char_buffer+0x48c>
				// accepted via application level override
				sig_ok = true;
 80069cc:	2301      	movs	r3, #1
 80069ce:	77fb      	strb	r3, [r7, #31]
			}
			if (sig_ok) {
 80069d0:	7ffb      	ldrb	r3, [r7, #31]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d003      	beq.n	80069de <mavlink_frame_char_buffer+0x49a>
				status->msg_received = MAVLINK_FRAMING_OK;
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	2201      	movs	r2, #1
 80069da:	701a      	strb	r2, [r3, #0]
 80069dc:	e002      	b.n	80069e4 <mavlink_frame_char_buffer+0x4a0>
			} else {
				status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	2203      	movs	r2, #3
 80069e2:	701a      	strb	r2, [r3, #0]
			}
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	2201      	movs	r2, #1
 80069e8:	70da      	strb	r2, [r3, #3]
			memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 80069ea:	f44f 7294 	mov.w	r2, #296	; 0x128
 80069ee:	68f9      	ldr	r1, [r7, #12]
 80069f0:	6838      	ldr	r0, [r7, #0]
 80069f2:	f001 fa87 	bl	8007f04 <memcpy>
		}
		break;
 80069f6:	e007      	b.n	8006a08 <mavlink_frame_char_buffer+0x4c4>
		break;
 80069f8:	bf00      	nop
 80069fa:	e006      	b.n	8006a0a <mavlink_frame_char_buffer+0x4c6>
		break;
 80069fc:	bf00      	nop
 80069fe:	e004      	b.n	8006a0a <mavlink_frame_char_buffer+0x4c6>
		break;
 8006a00:	bf00      	nop
 8006a02:	e002      	b.n	8006a0a <mavlink_frame_char_buffer+0x4c6>
		break;
 8006a04:	bf00      	nop
 8006a06:	e000      	b.n	8006a0a <mavlink_frame_char_buffer+0x4c6>
		break;
 8006a08:	bf00      	nop
	}

	bufferIndex++;
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	61bb      	str	r3, [r7, #24]
	// If a message has been sucessfully decoded, check index
	if (status->msg_received == MAVLINK_FRAMING_OK)
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d110      	bne.n	8006a3a <mavlink_frame_char_buffer+0x4f6>
		//while(status->current_seq != rxmsg->seq)
		//{
		//	status->packet_rx_drop_count++;
		//               status->current_seq++;
		//}
		status->current_rx_seq = rxmsg->seq;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	799a      	ldrb	r2, [r3, #6]
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	715a      	strb	r2, [r3, #5]
		// Initial condition: If no packet has been received so far, drop count is undefined
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	891b      	ldrh	r3, [r3, #8]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d102      	bne.n	8006a2e <mavlink_frame_char_buffer+0x4ea>
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	815a      	strh	r2, [r3, #10]
		// Count this packet as received
		status->packet_rx_success_count++;
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	891b      	ldrh	r3, [r3, #8]
 8006a32:	3301      	adds	r3, #1
 8006a34:	b29a      	uxth	r2, r3
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	811a      	strh	r2, [r3, #8]
	}

       if (NULL != r_message) {
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d003      	beq.n	8006a48 <mavlink_frame_char_buffer+0x504>
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	78da      	ldrb	r2, [r3, #3]
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	70da      	strb	r2, [r3, #3]
       }
       if (NULL != r_mavlink_status) {	
 8006a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d01a      	beq.n	8006a84 <mavlink_frame_char_buffer+0x540>
           r_mavlink_status->parse_state = status->parse_state;
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	78da      	ldrb	r2, [r3, #3]
 8006a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a54:	70da      	strb	r2, [r3, #3]
           r_mavlink_status->packet_idx = status->packet_idx;
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	791a      	ldrb	r2, [r3, #4]
 8006a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5c:	711a      	strb	r2, [r3, #4]
           r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	795b      	ldrb	r3, [r3, #5]
 8006a62:	3301      	adds	r3, #1
 8006a64:	b2da      	uxtb	r2, r3
 8006a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a68:	715a      	strb	r2, [r3, #5]
           r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	891a      	ldrh	r2, [r3, #8]
 8006a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a70:	811a      	strh	r2, [r3, #8]
           r_mavlink_status->packet_rx_drop_count = status->parse_error;
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	789b      	ldrb	r3, [r3, #2]
 8006a76:	b29a      	uxth	r2, r3
 8006a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7a:	815a      	strh	r2, [r3, #10]
           r_mavlink_status->flags = status->flags;
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	7b1a      	ldrb	r2, [r3, #12]
 8006a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a82:	731a      	strb	r2, [r3, #12]
       }
       status->parse_error = 0;
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	2200      	movs	r2, #0
 8006a88:	709a      	strb	r2, [r3, #2]

	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d110      	bne.n	8006ab4 <mavlink_frame_char_buffer+0x570>
		  msg CRC with the one on the wire so that if the
		  caller decides to forward the message anyway that
		  mavlink_msg_to_send_buffer() won't overwrite the
		  checksum
		 */
            if (NULL != r_message) {
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00d      	beq.n	8006ab4 <mavlink_frame_char_buffer+0x570>
                r_message->checksum = rxmsg->ck[0] | (rxmsg->ck[1]<<8);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8006a9e:	b21a      	sxth	r2, r3
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 8006aa6:	021b      	lsls	r3, r3, #8
 8006aa8:	b21b      	sxth	r3, r3
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	b21b      	sxth	r3, r3
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	801a      	strh	r2, [r3, #0]
            }
	}

	return status->msg_received;
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3720      	adds	r7, #32
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <mavlink_frame_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_frame_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 8006ac0:	b590      	push	{r4, r7, lr}
 8006ac2:	b087      	sub	sp, #28
 8006ac4:	af02      	add	r7, sp, #8
 8006ac6:	60ba      	str	r2, [r7, #8]
 8006ac8:	607b      	str	r3, [r7, #4]
 8006aca:	4603      	mov	r3, r0
 8006acc:	73fb      	strb	r3, [r7, #15]
 8006ace:	460b      	mov	r3, r1
 8006ad0:	73bb      	strb	r3, [r7, #14]
	return mavlink_frame_char_buffer(mavlink_get_channel_buffer(chan),
 8006ad2:	7bfb      	ldrb	r3, [r7, #15]
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f7ff f8ef 	bl	8005cb8 <mavlink_get_channel_buffer>
 8006ada:	4604      	mov	r4, r0
 8006adc:	7bfb      	ldrb	r3, [r7, #15]
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f7ff f8d6 	bl	8005c90 <mavlink_get_channel_status>
 8006ae4:	4601      	mov	r1, r0
 8006ae6:	7bba      	ldrb	r2, [r7, #14]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	9300      	str	r3, [sp, #0]
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	4620      	mov	r0, r4
 8006af0:	f7ff fd28 	bl	8006544 <mavlink_frame_char_buffer>
 8006af4:	4603      	mov	r3, r0
					 mavlink_get_channel_status(chan),
					 c,
					 r_message,
					 r_mavlink_status);
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3714      	adds	r7, #20
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd90      	pop	{r4, r7, pc}

08006afe <mavlink_parse_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_parse_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b088      	sub	sp, #32
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	60ba      	str	r2, [r7, #8]
 8006b06:	607b      	str	r3, [r7, #4]
 8006b08:	4603      	mov	r3, r0
 8006b0a:	73fb      	strb	r3, [r7, #15]
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	73bb      	strb	r3, [r7, #14]
    uint8_t msg_received = mavlink_frame_char(chan, c, r_message, r_mavlink_status);
 8006b10:	7bb9      	ldrb	r1, [r7, #14]
 8006b12:	7bf8      	ldrb	r0, [r7, #15]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	f7ff ffd2 	bl	8006ac0 <mavlink_frame_char>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	77fb      	strb	r3, [r7, #31]
    if (msg_received == MAVLINK_FRAMING_BAD_CRC ||
 8006b20:	7ffb      	ldrb	r3, [r7, #31]
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d002      	beq.n	8006b2c <mavlink_parse_char+0x2e>
 8006b26:	7ffb      	ldrb	r3, [r7, #31]
 8006b28:	2b03      	cmp	r3, #3
 8006b2a:	d120      	bne.n	8006b6e <mavlink_parse_char+0x70>
	msg_received == MAVLINK_FRAMING_BAD_SIGNATURE) {
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
 8006b2c:	7bfb      	ldrb	r3, [r7, #15]
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f7ff f8c2 	bl	8005cb8 <mavlink_get_channel_buffer>
 8006b34:	61b8      	str	r0, [r7, #24]
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
 8006b36:	7bfb      	ldrb	r3, [r7, #15]
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f7ff f8a9 	bl	8005c90 <mavlink_get_channel_status>
 8006b3e:	6178      	str	r0, [r7, #20]
	    _mav_parse_error(status);
 8006b40:	6978      	ldr	r0, [r7, #20]
 8006b42:	f7ff fbb7 	bl	80062b4 <_mav_parse_error>
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	701a      	strb	r2, [r3, #0]
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	70da      	strb	r2, [r3, #3]
	    if (c == MAVLINK_STX)
 8006b52:	7bbb      	ldrb	r3, [r7, #14]
 8006b54:	2bfd      	cmp	r3, #253	; 0xfd
 8006b56:	d108      	bne.n	8006b6a <mavlink_parse_char+0x6c>
	    {
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	2202      	movs	r2, #2
 8006b5c:	70da      	strb	r2, [r3, #3]
		    rxmsg->len = 0;
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	2200      	movs	r2, #0
 8006b62:	70da      	strb	r2, [r3, #3]
		    mavlink_start_checksum(rxmsg);
 8006b64:	69b8      	ldr	r0, [r7, #24]
 8006b66:	f7ff fc80 	bl	800646a <mavlink_start_checksum>
	    }
	    return 0;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	e000      	b.n	8006b70 <mavlink_parse_char+0x72>
    }
    return msg_received;
 8006b6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3720      	adds	r7, #32
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <_mavlink_send_uart>:
    }
}
 */

MAVLINK_HELPER void _mavlink_send_uart(mavlink_channel_t chan, const char *buf, uint16_t len)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	4603      	mov	r3, r0
 8006b80:	6039      	str	r1, [r7, #0]
 8006b82:	71fb      	strb	r3, [r7, #7]
 8006b84:	4613      	mov	r3, r2
 8006b86:	80bb      	strh	r3, [r7, #4]
#ifdef MAVLINK_SEND_UART_BYTES
	/* this is the more efficient approach, if the platform
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
 8006b88:	88bb      	ldrh	r3, [r7, #4]
 8006b8a:	b2da      	uxtb	r2, r3
 8006b8c:	79fb      	ldrb	r3, [r7, #7]
 8006b8e:	6839      	ldr	r1, [r7, #0]
 8006b90:	4618      	mov	r0, r3
 8006b92:	f000 f869 	bl	8006c68 <comm_send_buffer>
	uint16_t i;
	for (i = 0; i < len; i++) {
		comm_send_ch(chan, (uint8_t)buf[i]);
	}
#endif
}
 8006b96:	bf00      	nop
 8006b98:	3708      	adds	r7, #8
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
	...

08006ba0 <mavlinkProtocol_serialPort3_init>:
#define MAVLINK_PROTOCOL_CONFIGURATION
/** @brief serialPort3_init
    @return none
*/
void mavlinkProtocol_serialPort3_init(void)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	af00      	add	r7, sp, #0
    /// init serialPort library
    serial_port2.zPrivate.uartHandle.hdmarx = &hdma_usart2_rx;
 8006ba4:	4b09      	ldr	r3, [pc, #36]	; (8006bcc <mavlinkProtocol_serialPort3_init+0x2c>)
 8006ba6:	4a0a      	ldr	r2, [pc, #40]	; (8006bd0 <mavlinkProtocol_serialPort3_init+0x30>)
 8006ba8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    serial_port2.zPrivate.uartHandle.Instance = USART2;
 8006bac:	4b07      	ldr	r3, [pc, #28]	; (8006bcc <mavlinkProtocol_serialPort3_init+0x2c>)
 8006bae:	4a09      	ldr	r2, [pc, #36]	; (8006bd4 <mavlinkProtocol_serialPort3_init+0x34>)
 8006bb0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    serial_port2.isWriteFinish = true;
 8006bb4:	4b05      	ldr	r3, [pc, #20]	; (8006bcc <mavlinkProtocol_serialPort3_init+0x2c>)
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

    /// init uart3 reciver hardware
    HAL_UART_Receive_DMA(&huart2, serial_port2.zPrivate.readBuffer, 256);
 8006bbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006bc0:	4905      	ldr	r1, [pc, #20]	; (8006bd8 <mavlinkProtocol_serialPort3_init+0x38>)
 8006bc2:	4806      	ldr	r0, [pc, #24]	; (8006bdc <mavlinkProtocol_serialPort3_init+0x3c>)
 8006bc4:	f7fc ff90 	bl	8003ae8 <HAL_UART_Receive_DMA>
//    HAL_UART_Receive_IT(&huart3, &dataRx, 1);
}
 8006bc8:	bf00      	nop
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	20001bc8 	.word	0x20001bc8
 8006bd0:	200008fc 	.word	0x200008fc
 8006bd4:	40004400 	.word	0x40004400
 8006bd8:	20001dd6 	.word	0x20001dd6
 8006bdc:	20000b04 	.word	0x20000b04

08006be0 <mavlinkProtocol_init>:
 * The function shall initialize independence com channel
 * @param NONE
 * @return NONE
 */
void mavlinkProtocol_init(void)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	af00      	add	r7, sp, #0
	#if (USE_MAVLINK_BOOTLOADER == 1)
		mavlinkProtocol_serialPort3_init();
		printf("mavlinkPinout : USART2 (tx : A2, rx : A3)  -> COM2\n");
	#endif
	#if (USE_MAVLINK_CONTROL == 1)
		mavlinkProtocol_serialPort3_init();
 8006be4:	f7ff ffdc 	bl	8006ba0 <mavlinkProtocol_serialPort3_init>
		printf("mavlinkPinout : USART2 (tx : A2, rx : A3)  -> COM2\n");
 8006be8:	4802      	ldr	r0, [pc, #8]	; (8006bf4 <mavlinkProtocol_init+0x14>)
 8006bea:	f002 f95b 	bl	8008ea4 <puts>
	#endif
}
 8006bee:	bf00      	nop
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	0800db74 	.word	0x0800db74

08006bf8 <mavlinkProtocol_serialPort3_readData>:
/**
 * @brief  This is function read data from gimbal
 * @return bool
 */
bool mavlinkProtocol_serialPort3_readData(mav_state_t *mav)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b086      	sub	sp, #24
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
    bool ret = false;
 8006c00:	2300      	movs	r3, #0
 8006c02:	75fb      	strb	r3, [r7, #23]

    if(serialPort_read(&serial_port2, 256))
 8006c04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006c08:	4816      	ldr	r0, [pc, #88]	; (8006c64 <mavlinkProtocol_serialPort3_readData+0x6c>)
 8006c0a:	f000 f8e7 	bl	8006ddc <serialPort_read>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d021      	beq.n	8006c58 <mavlinkProtocol_serialPort3_readData+0x60>
    {
        int i = 0;
 8006c14:	2300      	movs	r3, #0
 8006c16:	613b      	str	r3, [r7, #16]

        for(i = 0; i < serial_port2.bytesToRead; i++)
 8006c18:	2300      	movs	r3, #0
 8006c1a:	613b      	str	r3, [r7, #16]
 8006c1c:	e015      	b.n	8006c4a <mavlinkProtocol_serialPort3_readData+0x52>
        {
            uint8_t msg_received;
            /* Paser data */
            msg_received = mavlink_parse_char(  MAVLINK_COMM_1,
 8006c1e:	4a11      	ldr	r2, [pc, #68]	; (8006c64 <mavlinkProtocol_serialPort3_readData+0x6c>)
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	4413      	add	r3, r2
 8006c24:	3304      	adds	r3, #4
 8006c26:	7819      	ldrb	r1, [r3, #0]
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8006c30:	2001      	movs	r0, #1
 8006c32:	f7ff ff64 	bl	8006afe <mavlink_parse_char>
 8006c36:	4603      	mov	r3, r0
 8006c38:	73fb      	strb	r3, [r7, #15]
            									serial_port2.readBuffer[i],
                                                &mav->rxmsg,
                                                &mav->status);
            /** 0 if no message could be decoded or bad CRC, 1 on good message and CRC*/
            if(msg_received)
 8006c3a:	7bfb      	ldrb	r3, [r7, #15]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d001      	beq.n	8006c44 <mavlinkProtocol_serialPort3_readData+0x4c>
            {
                ret = true;
 8006c40:	2301      	movs	r3, #1
 8006c42:	75fb      	strb	r3, [r7, #23]
        for(i = 0; i < serial_port2.bytesToRead; i++)
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	3301      	adds	r3, #1
 8006c48:	613b      	str	r3, [r7, #16]
 8006c4a:	4b06      	ldr	r3, [pc, #24]	; (8006c64 <mavlinkProtocol_serialPort3_readData+0x6c>)
 8006c4c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8006c50:	461a      	mov	r2, r3
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	4293      	cmp	r3, r2
 8006c56:	dbe2      	blt.n	8006c1e <mavlinkProtocol_serialPort3_readData+0x26>
            }
        }
    }

    return ret;
 8006c58:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3718      	adds	r7, #24
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	20001bc8 	.word	0x20001bc8

08006c68 <comm_send_buffer>:
    @param[in] buf
    @param[in] len
    @return none
*/
void comm_send_buffer(mavlink_channel_t chan, const uint8_t *buf, uint8_t len)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	4603      	mov	r3, r0
 8006c70:	6039      	str	r1, [r7, #0]
 8006c72:	71fb      	strb	r3, [r7, #7]
 8006c74:	4613      	mov	r3, r2
 8006c76:	71bb      	strb	r3, [r7, #6]
    if (!valid_channel(chan))
 8006c78:	79fb      	ldrb	r3, [r7, #7]
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f7fe fcaa 	bl	80055d4 <valid_channel>
 8006c80:	4603      	mov	r3, r0
 8006c82:	f083 0301 	eor.w	r3, r3, #1
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d10f      	bne.n	8006cac <comm_send_buffer+0x44>
    {
        return;
    }
    if(chan == ONBOARD_CHANNEL)
 8006c8c:	79fb      	ldrb	r3, [r7, #7]
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d104      	bne.n	8006c9c <comm_send_buffer+0x34>
    {
        /* Send data to serial port 2*/
        serialPort_write_list(&serial_port2, (uint8_t *)buf);
 8006c92:	6839      	ldr	r1, [r7, #0]
 8006c94:	4807      	ldr	r0, [pc, #28]	; (8006cb4 <comm_send_buffer+0x4c>)
 8006c96:	f000 f99d 	bl	8006fd4 <serialPort_write_list>
 8006c9a:	e008      	b.n	8006cae <comm_send_buffer+0x46>
    }
    else if(chan == MAVLINK_COMM_2)
 8006c9c:	79fb      	ldrb	r3, [r7, #7]
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d105      	bne.n	8006cae <comm_send_buffer+0x46>
    {
        /* Send data to serial port 4 */
        serialPort_write_list(&serial_port4, (uint8_t *)buf);
 8006ca2:	6839      	ldr	r1, [r7, #0]
 8006ca4:	4804      	ldr	r0, [pc, #16]	; (8006cb8 <comm_send_buffer+0x50>)
 8006ca6:	f000 f995 	bl	8006fd4 <serialPort_write_list>
 8006caa:	e000      	b.n	8006cae <comm_send_buffer+0x46>
        return;
 8006cac:	bf00      	nop
    }
}
 8006cae:	3708      	adds	r7, #8
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	20001bc8 	.word	0x20001bc8
 8006cb8:	200010e8 	.word	0x200010e8

08006cbc <ringBufferWrite>:
#define __RING_BUFFER_FUNCTION
/** @brief  ringBufferWrite
    @return ringBufferState_t
*/
ringBufferState_t ringBufferWrite(ringBuffer_t *rBuff, uint8_t wData)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	70fb      	strb	r3, [r7, #3]
	if(rBuff->len >= RING_BUFFER_LEN)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	889b      	ldrh	r3, [r3, #4]
 8006ccc:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8006cd0:	d301      	bcc.n	8006cd6 <ringBufferWrite+0x1a>
	{
		return RING_BUFFER_ERROR;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	e01f      	b.n	8006d16 <ringBufferWrite+0x5a>
	}

	rBuff->buffer[rBuff->tail] = wData;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	885b      	ldrh	r3, [r3, #2]
 8006cda:	461a      	mov	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4413      	add	r3, r2
 8006ce0:	78fa      	ldrb	r2, [r7, #3]
 8006ce2:	719a      	strb	r2, [r3, #6]
	rBuff->tail = (rBuff->tail + 1) % RING_BUFFER_LEN;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	885b      	ldrh	r3, [r3, #2]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	4a0e      	ldr	r2, [pc, #56]	; (8006d24 <ringBufferWrite+0x68>)
 8006cec:	fb82 1203 	smull	r1, r2, r2, r3
 8006cf0:	441a      	add	r2, r3
 8006cf2:	1211      	asrs	r1, r2, #8
 8006cf4:	17da      	asrs	r2, r3, #31
 8006cf6:	1a8a      	subs	r2, r1, r2
 8006cf8:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8006cfc:	fb01 f202 	mul.w	r2, r1, r2
 8006d00:	1a9a      	subs	r2, r3, r2
 8006d02:	b292      	uxth	r2, r2
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	805a      	strh	r2, [r3, #2]
	rBuff->len++;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	889b      	ldrh	r3, [r3, #4]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	b29a      	uxth	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	809a      	strh	r2, [r3, #4]

	return RING_BUFFER_OK;
 8006d14:	2301      	movs	r3, #1
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	370c      	adds	r7, #12
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop
 8006d24:	f2b9d649 	.word	0xf2b9d649

08006d28 <ringBufferRead>:

/** @brief  ringBufferRead
    @return ringBufferState_t
*/
ringBufferState_t ringBufferRead(ringBuffer_t *rBuff, uint8_t *rData)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
	if(rBuff->len == 0)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	889b      	ldrh	r3, [r3, #4]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d101      	bne.n	8006d3e <ringBufferRead+0x16>
	{
		return RING_BUFFER_ERROR;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	e020      	b.n	8006d80 <ringBufferRead+0x58>
	}

	*rData = rBuff->buffer[rBuff->head];
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	881b      	ldrh	r3, [r3, #0]
 8006d42:	461a      	mov	r2, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4413      	add	r3, r2
 8006d48:	799a      	ldrb	r2, [r3, #6]
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	701a      	strb	r2, [r3, #0]

	rBuff->head = (rBuff->head + 1) % RING_BUFFER_LEN;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	881b      	ldrh	r3, [r3, #0]
 8006d52:	3301      	adds	r3, #1
 8006d54:	4a0d      	ldr	r2, [pc, #52]	; (8006d8c <ringBufferRead+0x64>)
 8006d56:	fb82 1203 	smull	r1, r2, r2, r3
 8006d5a:	441a      	add	r2, r3
 8006d5c:	1211      	asrs	r1, r2, #8
 8006d5e:	17da      	asrs	r2, r3, #31
 8006d60:	1a8a      	subs	r2, r1, r2
 8006d62:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8006d66:	fb01 f202 	mul.w	r2, r1, r2
 8006d6a:	1a9a      	subs	r2, r3, r2
 8006d6c:	b292      	uxth	r2, r2
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	801a      	strh	r2, [r3, #0]
	rBuff->len--;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	889b      	ldrh	r3, [r3, #4]
 8006d76:	3b01      	subs	r3, #1
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	809a      	strh	r2, [r3, #4]

	return RING_BUFFER_OK;
 8006d7e:	2301      	movs	r3, #1
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr
 8006d8c:	f2b9d649 	.word	0xf2b9d649

08006d90 <serialPort_read_byte_count>:
/** @brief    serialPort_read_byte_count
	@param[1] serial
	@return   uint16_t
*/
uint16_t serialPort_read_byte_count(serialPort_t* serial)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b085      	sub	sp, #20
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
    if(serial->readBufferSize == 0)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d10a      	bne.n	8006db8 <serialPort_read_byte_count+0x28>
    {
        uint16_t countCur = __HAL_DMA_GET_COUNTER(serial->zPrivate.uartHandle.hdmarx);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	81fb      	strh	r3, [r7, #14]
        return 256 - countCur;
 8006dae:	89fb      	ldrh	r3, [r7, #14]
 8006db0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	e00b      	b.n	8006dd0 <serialPort_read_byte_count+0x40>
    }
    else
    {
        return serial->readBufferSize - __HAL_DMA_GET_COUNTER(serial->zPrivate.uartHandle.hdmarx);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	1ad3      	subs	r3, r2, r3
 8006dce:	b29b      	uxth	r3, r3
    }
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3714      	adds	r7, #20
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <serialPort_read>:
	@param[1] serial
	@param[2] buffsize
	@return   bool
*/
bool serialPort_read(serialPort_t* serial, uint16_t buffsize)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	460b      	mov	r3, r1
 8006de6:	807b      	strh	r3, [r7, #2]
    int16_t dataCnt =   serialPort_read_byte_count(serial);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f7ff ffd1 	bl	8006d90 <serialPort_read_byte_count>
 8006dee:	4603      	mov	r3, r0
 8006df0:	813b      	strh	r3, [r7, #8]
    int16_t n  =     dataCnt - serial->zPrivate.uartDataCount;
 8006df2:	893a      	ldrh	r2, [r7, #8]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	81fb      	strh	r3, [r7, #14]
    uint16_t i =    0;
 8006e00:	2300      	movs	r3, #0
 8006e02:	81bb      	strh	r3, [r7, #12]
    uint16_t j =    0;
 8006e04:	2300      	movs	r3, #0
 8006e06:	817b      	strh	r3, [r7, #10]

    //reset byte to read
    serial->bytesToRead = 0;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104

    if(n<0)
 8006e10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	da04      	bge.n	8006e22 <serialPort_read+0x46>
    {
        n += buffsize;
 8006e18:	89fa      	ldrh	r2, [r7, #14]
 8006e1a:	887b      	ldrh	r3, [r7, #2]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	81fb      	strh	r3, [r7, #14]
    }

    if(n != 0)
 8006e22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d02d      	beq.n	8006e86 <serialPort_read+0xaa>
    {
        for(i = 0; i < n; i++)
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	81bb      	strh	r3, [r7, #12]
 8006e2e:	e01a      	b.n	8006e66 <serialPort_read+0x8a>
        {
            j = i + serial->zPrivate.uartDataCount;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8b3 220c 	ldrh.w	r2, [r3, #524]	; 0x20c
 8006e36:	89bb      	ldrh	r3, [r7, #12]
 8006e38:	4413      	add	r3, r2
 8006e3a:	817b      	strh	r3, [r7, #10]

            if(j >= buffsize) j -= buffsize;
 8006e3c:	897a      	ldrh	r2, [r7, #10]
 8006e3e:	887b      	ldrh	r3, [r7, #2]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d303      	bcc.n	8006e4c <serialPort_read+0x70>
 8006e44:	897a      	ldrh	r2, [r7, #10]
 8006e46:	887b      	ldrh	r3, [r7, #2]
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	817b      	strh	r3, [r7, #10]

            serial->readBuffer[i] = serial->zPrivate.readBuffer[j];
 8006e4c:	897a      	ldrh	r2, [r7, #10]
 8006e4e:	89bb      	ldrh	r3, [r7, #12]
 8006e50:	6879      	ldr	r1, [r7, #4]
 8006e52:	440a      	add	r2, r1
 8006e54:	f892 120e 	ldrb.w	r1, [r2, #526]	; 0x20e
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	460a      	mov	r2, r1
 8006e5e:	711a      	strb	r2, [r3, #4]
        for(i = 0; i < n; i++)
 8006e60:	89bb      	ldrh	r3, [r7, #12]
 8006e62:	3301      	adds	r3, #1
 8006e64:	81bb      	strh	r3, [r7, #12]
 8006e66:	89ba      	ldrh	r2, [r7, #12]
 8006e68:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	dbdf      	blt.n	8006e30 <serialPort_read+0x54>
        }

        serial->zPrivate.uartDataCount = dataCnt;
 8006e70:	893a      	ldrh	r2, [r7, #8]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
        serial->bytesToRead = n;
 8006e78:	89fb      	ldrh	r3, [r7, #14]
 8006e7a:	b2da      	uxtb	r2, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104

        return true;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e000      	b.n	8006e88 <serialPort_read+0xac>
    }

    return false;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <serialPort_send>:
/** @brief    serialPort_send
	@param[1] serial
	@return   none
*/
void serialPort_send(serialPort_t* serial)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
    if(serial->zPrivate.uartHandle.Instance == USART2)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006e9e:	4a12      	ldr	r2, [pc, #72]	; (8006ee8 <serialPort_send+0x58>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d10b      	bne.n	8006ebc <serialPort_send+0x2c>
    {
        HAL_UART_Transmit_DMA(&huart2, serial->zPrivate.writeBuffer, serial->zPrivate.writeBufferPtr);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f203 310e 	addw	r1, r3, #782	; 0x30e
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 3ade 	ldrb.w	r3, [r3, #2782]	; 0xade
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	480d      	ldr	r0, [pc, #52]	; (8006eec <serialPort_send+0x5c>)
 8006eb6:	f7fc fd99 	bl	80039ec <HAL_UART_Transmit_DMA>
    }
    else if(serial->zPrivate.uartHandle.Instance == UART4)
    {
        HAL_UART_Transmit_DMA(&huart4, serial->zPrivate.writeBuffer, serial->zPrivate.writeBufferPtr);
    }
}
 8006eba:	e010      	b.n	8006ede <serialPort_send+0x4e>
    else if(serial->zPrivate.uartHandle.Instance == UART4)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006ec2:	4a0b      	ldr	r2, [pc, #44]	; (8006ef0 <serialPort_send+0x60>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d10a      	bne.n	8006ede <serialPort_send+0x4e>
        HAL_UART_Transmit_DMA(&huart4, serial->zPrivate.writeBuffer, serial->zPrivate.writeBufferPtr);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f203 310e 	addw	r1, r3, #782	; 0x30e
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 3ade 	ldrb.w	r3, [r3, #2782]	; 0xade
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	4806      	ldr	r0, [pc, #24]	; (8006ef4 <serialPort_send+0x64>)
 8006eda:	f7fc fd87 	bl	80039ec <HAL_UART_Transmit_DMA>
}
 8006ede:	bf00      	nop
 8006ee0:	3708      	adds	r7, #8
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	40004400 	.word	0x40004400
 8006eec:	20000b04 	.word	0x20000b04
 8006ef0:	40004c00 	.word	0x40004c00
 8006ef4:	20000ac0 	.word	0x20000ac0

08006ef8 <serialPort_write>:
	@param[2] buff
	@param[3] len
	@return   none
*/
void serialPort_write(serialPort_t* serial, uint8_t* buff, uint8_t len)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b086      	sub	sp, #24
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	4613      	mov	r3, r2
 8006f04:	71fb      	strb	r3, [r7, #7]
    uint16_t i = 0;
 8006f06:	2300      	movs	r3, #0
 8006f08:	82fb      	strh	r3, [r7, #22]

    if(serial->isWriteFinish == true)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d03f      	beq.n	8006f94 <serialPort_write+0x9c>
     {
        for( i = 0; i < serial->zPrivate.writeBufferPtr; i++)
 8006f14:	2300      	movs	r3, #0
 8006f16:	82fb      	strh	r3, [r7, #22]
 8006f18:	e00d      	b.n	8006f36 <serialPort_write+0x3e>
        {
            serial->zPrivate.writeBuffer[i] = serial->zPrivate.writeBufferTemp[i];
 8006f1a:	8afa      	ldrh	r2, [r7, #22]
 8006f1c:	8afb      	ldrh	r3, [r7, #22]
 8006f1e:	68f9      	ldr	r1, [r7, #12]
 8006f20:	440a      	add	r2, r1
 8006f22:	f892 16f6 	ldrb.w	r1, [r2, #1782]	; 0x6f6
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	4413      	add	r3, r2
 8006f2a:	460a      	mov	r2, r1
 8006f2c:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e
        for( i = 0; i < serial->zPrivate.writeBufferPtr; i++)
 8006f30:	8afb      	ldrh	r3, [r7, #22]
 8006f32:	3301      	adds	r3, #1
 8006f34:	82fb      	strh	r3, [r7, #22]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f893 3ade 	ldrb.w	r3, [r3, #2782]	; 0xade
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	8afa      	ldrh	r2, [r7, #22]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d3ea      	bcc.n	8006f1a <serialPort_write+0x22>
        }

        for( i = 0; i < len; i++)
 8006f44:	2300      	movs	r3, #0
 8006f46:	82fb      	strh	r3, [r7, #22]
 8006f48:	e013      	b.n	8006f72 <serialPort_write+0x7a>
        {
            serial->zPrivate.writeBuffer[serial->zPrivate.writeBufferPtr++] = buff[i];
 8006f4a:	8afb      	ldrh	r3, [r7, #22]
 8006f4c:	68ba      	ldr	r2, [r7, #8]
 8006f4e:	441a      	add	r2, r3
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f893 3ade 	ldrb.w	r3, [r3, #2782]	; 0xade
 8006f56:	1c59      	adds	r1, r3, #1
 8006f58:	b2c8      	uxtb	r0, r1
 8006f5a:	68f9      	ldr	r1, [r7, #12]
 8006f5c:	f881 0ade 	strb.w	r0, [r1, #2782]	; 0xade
 8006f60:	4619      	mov	r1, r3
 8006f62:	7812      	ldrb	r2, [r2, #0]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	440b      	add	r3, r1
 8006f68:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e
        for( i = 0; i < len; i++)
 8006f6c:	8afb      	ldrh	r3, [r7, #22]
 8006f6e:	3301      	adds	r3, #1
 8006f70:	82fb      	strh	r3, [r7, #22]
 8006f72:	79fb      	ldrb	r3, [r7, #7]
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	8afa      	ldrh	r2, [r7, #22]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d3e6      	bcc.n	8006f4a <serialPort_write+0x52>
        }

        serialPort_send(serial);
 8006f7c:	68f8      	ldr	r0, [r7, #12]
 8006f7e:	f7ff ff87 	bl	8006e90 <serialPort_send>

        serial->zPrivate.writeBufferPtr = 0;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 2ade 	strb.w	r2, [r3, #2782]	; 0xade
        serial->isWriteFinish = false;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
        for( i = 0; i < len; i++)
        {
            serial->zPrivate.writeBufferTemp[serial->zPrivate.writeBufferPtr++] = buff[i];
        }
    }
}
 8006f92:	e01b      	b.n	8006fcc <serialPort_write+0xd4>
        for( i = 0; i < len; i++)
 8006f94:	2300      	movs	r3, #0
 8006f96:	82fb      	strh	r3, [r7, #22]
 8006f98:	e013      	b.n	8006fc2 <serialPort_write+0xca>
            serial->zPrivate.writeBufferTemp[serial->zPrivate.writeBufferPtr++] = buff[i];
 8006f9a:	8afb      	ldrh	r3, [r7, #22]
 8006f9c:	68ba      	ldr	r2, [r7, #8]
 8006f9e:	441a      	add	r2, r3
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f893 3ade 	ldrb.w	r3, [r3, #2782]	; 0xade
 8006fa6:	1c59      	adds	r1, r3, #1
 8006fa8:	b2c8      	uxtb	r0, r1
 8006faa:	68f9      	ldr	r1, [r7, #12]
 8006fac:	f881 0ade 	strb.w	r0, [r1, #2782]	; 0xade
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	7812      	ldrb	r2, [r2, #0]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	440b      	add	r3, r1
 8006fb8:	f883 26f6 	strb.w	r2, [r3, #1782]	; 0x6f6
        for( i = 0; i < len; i++)
 8006fbc:	8afb      	ldrh	r3, [r7, #22]
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	82fb      	strh	r3, [r7, #22]
 8006fc2:	79fb      	ldrb	r3, [r7, #7]
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	8afa      	ldrh	r2, [r7, #22]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d3e6      	bcc.n	8006f9a <serialPort_write+0xa2>
}
 8006fcc:	bf00      	nop
 8006fce:	3718      	adds	r7, #24
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <serialPort_write_list>:
	@param[2] buff
	@param[3] ...
	@return   none
*/
void serialPort_write_list(serialPort_t* serial, void* buff,...)
{
 8006fd4:	b40e      	push	{r1, r2, r3}
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b087      	sub	sp, #28
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
    int len = 0;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	617b      	str	r3, [r7, #20]
    uint8_t* ptr = buff;
 8006fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe4:	613b      	str	r3, [r7, #16]

    va_list list;
    va_start(list, buff);
 8006fe6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006fea:	60fb      	str	r3, [r7, #12]
    len = va_arg(list, int);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	1d1a      	adds	r2, r3, #4
 8006ff0:	60fa      	str	r2, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	617b      	str	r3, [r7, #20]

    if(len < 256 && len > 0)    serialPort_write(serial, ptr, len);
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	2bff      	cmp	r3, #255	; 0xff
 8006ffa:	dc0a      	bgt.n	8007012 <serialPort_write_list+0x3e>
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	dd07      	ble.n	8007012 <serialPort_write_list+0x3e>
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	b2db      	uxtb	r3, r3
 8007006:	461a      	mov	r2, r3
 8007008:	6939      	ldr	r1, [r7, #16]
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f7ff ff74 	bl	8006ef8 <serialPort_write>
 8007010:	e00a      	b.n	8007028 <serialPort_write_list+0x54>
    else                        serialPort_write(serial, ptr, strlen((char*)ptr));
 8007012:	6938      	ldr	r0, [r7, #16]
 8007014:	f7f9 f8dc 	bl	80001d0 <strlen>
 8007018:	4603      	mov	r3, r0
 800701a:	b2db      	uxtb	r3, r3
 800701c:	461a      	mov	r2, r3
 800701e:	6939      	ldr	r1, [r7, #16]
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f7ff ff69 	bl	8006ef8 <serialPort_write>
}
 8007026:	bf00      	nop
 8007028:	bf00      	nop
 800702a:	371c      	adds	r7, #28
 800702c:	46bd      	mov	sp, r7
 800702e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007032:	b003      	add	sp, #12
 8007034:	4770      	bx	lr

08007036 <serialPort_tx_finish>:
/** @brief    serialPort_tx_finish
	@param[1] serial
	@return   none
*/
void serialPort_tx_finish(serialPort_t* serial)
{
 8007036:	b580      	push	{r7, lr}
 8007038:	b084      	sub	sp, #16
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
    if(serial->zPrivate.writeBufferPtr != 0)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f893 3ade 	ldrb.w	r3, [r3, #2782]	; 0xade
 8007044:	2b00      	cmp	r3, #0
 8007046:	d020      	beq.n	800708a <serialPort_tx_finish+0x54>
    {
        uint8_t i = 0;
 8007048:	2300      	movs	r3, #0
 800704a:	73fb      	strb	r3, [r7, #15]

        for( i = 0; i < serial->zPrivate.writeBufferPtr; i++)
 800704c:	2300      	movs	r3, #0
 800704e:	73fb      	strb	r3, [r7, #15]
 8007050:	e00d      	b.n	800706e <serialPort_tx_finish+0x38>
        {
            serial->zPrivate.writeBuffer[i] = serial->zPrivate.writeBufferTemp[i];
 8007052:	7bfa      	ldrb	r2, [r7, #15]
 8007054:	7bfb      	ldrb	r3, [r7, #15]
 8007056:	6879      	ldr	r1, [r7, #4]
 8007058:	440a      	add	r2, r1
 800705a:	f892 16f6 	ldrb.w	r1, [r2, #1782]	; 0x6f6
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	4413      	add	r3, r2
 8007062:	460a      	mov	r2, r1
 8007064:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e
        for( i = 0; i < serial->zPrivate.writeBufferPtr; i++)
 8007068:	7bfb      	ldrb	r3, [r7, #15]
 800706a:	3301      	adds	r3, #1
 800706c:	73fb      	strb	r3, [r7, #15]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f893 3ade 	ldrb.w	r3, [r3, #2782]	; 0xade
 8007074:	7bfa      	ldrb	r2, [r7, #15]
 8007076:	429a      	cmp	r2, r3
 8007078:	d3eb      	bcc.n	8007052 <serialPort_tx_finish+0x1c>
        }

        serialPort_send(serial);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f7ff ff08 	bl	8006e90 <serialPort_send>
        serial->zPrivate.writeBufferPtr = 0;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	f883 2ade 	strb.w	r2, [r3, #2782]	; 0xade
    }
    else
    {
        serial->isWriteFinish = true;
    }
}
 8007088:	e003      	b.n	8007092 <serialPort_tx_finish+0x5c>
        serial->isWriteFinish = true;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2201      	movs	r2, #1
 800708e:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
}
 8007092:	bf00      	nop
 8007094:	3710      	adds	r7, #16
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
	...

0800709c <storageFlash_configuration>:
#define __STORAGE_FLASH_CONFIGURATION
/** @brief	storageFlash_configuration
    @return none
*/
void storageFlash_configuration(void)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
	flashStatus_t status = FLASH_STATUS_COMPLETE;
 80070a2:	2302      	movs	r3, #2
 80070a4:	71fb      	strb	r3, [r7, #7]
	printf("\n[storageFlash_configuration] : nomal config\n");
 80070a6:	480a      	ldr	r0, [pc, #40]	; (80070d0 <storageFlash_configuration+0x34>)
 80070a8:	f001 fefc 	bl	8008ea4 <puts>

	status = storageFlash_styleGremsy_configuration();
 80070ac:	f000 f960 	bl	8007370 <storageFlash_styleGremsy_configuration>
 80070b0:	4603      	mov	r3, r0
 80070b2:	71fb      	strb	r3, [r7, #7]
	if(status != FLASH_STATUS_COMPLETE)
 80070b4:	79fb      	ldrb	r3, [r7, #7]
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d003      	beq.n	80070c2 <storageFlash_configuration+0x26>
	{
		printf("\n[storageFlash_configuration] flash config gremsy style fail \n");
 80070ba:	4806      	ldr	r0, [pc, #24]	; (80070d4 <storageFlash_configuration+0x38>)
 80070bc:	f001 fef2 	bl	8008ea4 <puts>
	}
	else
	{
		printf("\n[storageFlash_configuration] flash config gremsy style successful \n");
	}
}
 80070c0:	e002      	b.n	80070c8 <storageFlash_configuration+0x2c>
		printf("\n[storageFlash_configuration] flash config gremsy style successful \n");
 80070c2:	4805      	ldr	r0, [pc, #20]	; (80070d8 <storageFlash_configuration+0x3c>)
 80070c4:	f001 feee 	bl	8008ea4 <puts>
}
 80070c8:	bf00      	nop
 80070ca:	3708      	adds	r7, #8
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	0800dba8 	.word	0x0800dba8
 80070d4:	0800dbd8 	.word	0x0800dbd8
 80070d8:	0800dc18 	.word	0x0800dc18

080070dc <storageFlash_GetSector>:

/** @brief  storageFlash_GetSector
    @return uint32_t
*/
static uint32_t storageFlash_GetSector(uint32_t Address)
{
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
	uint32_t sector = 0;
 80070e4:	2300      	movs	r3, #0
 80070e6:	60fb      	str	r3, [r7, #12]

	if((Address < 0x08003FFF) && (Address >= 0x08000000))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4a44      	ldr	r2, [pc, #272]	; (80071fc <storageFlash_GetSector+0x120>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d806      	bhi.n	80070fe <storageFlash_GetSector+0x22>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070f6:	d302      	bcc.n	80070fe <storageFlash_GetSector+0x22>
	{
		sector = FLASH_SECTOR_0;
 80070f8:	2300      	movs	r3, #0
 80070fa:	60fb      	str	r3, [r7, #12]
 80070fc:	e077      	b.n	80071ee <storageFlash_GetSector+0x112>
	}
	else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a3f      	ldr	r2, [pc, #252]	; (8007200 <storageFlash_GetSector+0x124>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d806      	bhi.n	8007114 <storageFlash_GetSector+0x38>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a3e      	ldr	r2, [pc, #248]	; (8007204 <storageFlash_GetSector+0x128>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d302      	bcc.n	8007114 <storageFlash_GetSector+0x38>
	{
		sector = FLASH_SECTOR_1;
 800710e:	2301      	movs	r3, #1
 8007110:	60fb      	str	r3, [r7, #12]
 8007112:	e06c      	b.n	80071ee <storageFlash_GetSector+0x112>
	}
	else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a3c      	ldr	r2, [pc, #240]	; (8007208 <storageFlash_GetSector+0x12c>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d806      	bhi.n	800712a <storageFlash_GetSector+0x4e>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a3b      	ldr	r2, [pc, #236]	; (800720c <storageFlash_GetSector+0x130>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d302      	bcc.n	800712a <storageFlash_GetSector+0x4e>
	{
		sector = FLASH_SECTOR_2;
 8007124:	2302      	movs	r3, #2
 8007126:	60fb      	str	r3, [r7, #12]
 8007128:	e061      	b.n	80071ee <storageFlash_GetSector+0x112>
	}
	else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a38      	ldr	r2, [pc, #224]	; (8007210 <storageFlash_GetSector+0x134>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d206      	bcs.n	8007140 <storageFlash_GetSector+0x64>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a37      	ldr	r2, [pc, #220]	; (8007214 <storageFlash_GetSector+0x138>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d302      	bcc.n	8007140 <storageFlash_GetSector+0x64>
	{
		sector = FLASH_SECTOR_3;
 800713a:	2303      	movs	r3, #3
 800713c:	60fb      	str	r3, [r7, #12]
 800713e:	e056      	b.n	80071ee <storageFlash_GetSector+0x112>
	}
	else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4a35      	ldr	r2, [pc, #212]	; (8007218 <storageFlash_GetSector+0x13c>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d206      	bcs.n	8007156 <storageFlash_GetSector+0x7a>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4a31      	ldr	r2, [pc, #196]	; (8007210 <storageFlash_GetSector+0x134>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d902      	bls.n	8007156 <storageFlash_GetSector+0x7a>
	{
		sector = FLASH_SECTOR_4;
 8007150:	2304      	movs	r3, #4
 8007152:	60fb      	str	r3, [r7, #12]
 8007154:	e04b      	b.n	80071ee <storageFlash_GetSector+0x112>
	}
	else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a30      	ldr	r2, [pc, #192]	; (800721c <storageFlash_GetSector+0x140>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d206      	bcs.n	800716c <storageFlash_GetSector+0x90>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a2d      	ldr	r2, [pc, #180]	; (8007218 <storageFlash_GetSector+0x13c>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d902      	bls.n	800716c <storageFlash_GetSector+0x90>
	{
		sector = FLASH_SECTOR_5;
 8007166:	2305      	movs	r3, #5
 8007168:	60fb      	str	r3, [r7, #12]
 800716a:	e040      	b.n	80071ee <storageFlash_GetSector+0x112>
	}
	else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a2c      	ldr	r2, [pc, #176]	; (8007220 <storageFlash_GetSector+0x144>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d206      	bcs.n	8007182 <storageFlash_GetSector+0xa6>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a29      	ldr	r2, [pc, #164]	; (800721c <storageFlash_GetSector+0x140>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d902      	bls.n	8007182 <storageFlash_GetSector+0xa6>
	{
		sector = FLASH_SECTOR_6;
 800717c:	2306      	movs	r3, #6
 800717e:	60fb      	str	r3, [r7, #12]
 8007180:	e035      	b.n	80071ee <storageFlash_GetSector+0x112>
	}
	else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a27      	ldr	r2, [pc, #156]	; (8007224 <storageFlash_GetSector+0x148>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d206      	bcs.n	8007198 <storageFlash_GetSector+0xbc>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a24      	ldr	r2, [pc, #144]	; (8007220 <storageFlash_GetSector+0x144>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d902      	bls.n	8007198 <storageFlash_GetSector+0xbc>
	{
		sector = FLASH_SECTOR_7;
 8007192:	2307      	movs	r3, #7
 8007194:	60fb      	str	r3, [r7, #12]
 8007196:	e02a      	b.n	80071ee <storageFlash_GetSector+0x112>
	}
	else if((Address < 0x0809FFFF) && (Address >= 0x08080000))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a23      	ldr	r2, [pc, #140]	; (8007228 <storageFlash_GetSector+0x14c>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d206      	bcs.n	80071ae <storageFlash_GetSector+0xd2>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a20      	ldr	r2, [pc, #128]	; (8007224 <storageFlash_GetSector+0x148>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d902      	bls.n	80071ae <storageFlash_GetSector+0xd2>
	{
		sector = FLASH_SECTOR_8;
 80071a8:	2308      	movs	r3, #8
 80071aa:	60fb      	str	r3, [r7, #12]
 80071ac:	e01f      	b.n	80071ee <storageFlash_GetSector+0x112>
	}
	else if((Address < 0x080BFFFF) && (Address >= 0x080A0000))
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4a1e      	ldr	r2, [pc, #120]	; (800722c <storageFlash_GetSector+0x150>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d206      	bcs.n	80071c4 <storageFlash_GetSector+0xe8>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a1b      	ldr	r2, [pc, #108]	; (8007228 <storageFlash_GetSector+0x14c>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d902      	bls.n	80071c4 <storageFlash_GetSector+0xe8>
	{
		sector = FLASH_SECTOR_9;
 80071be:	2309      	movs	r3, #9
 80071c0:	60fb      	str	r3, [r7, #12]
 80071c2:	e014      	b.n	80071ee <storageFlash_GetSector+0x112>
	}
	else if((Address < 0x080DFFFF) && (Address >= 0x080C0000))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a1a      	ldr	r2, [pc, #104]	; (8007230 <storageFlash_GetSector+0x154>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d806      	bhi.n	80071da <storageFlash_GetSector+0xfe>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a17      	ldr	r2, [pc, #92]	; (800722c <storageFlash_GetSector+0x150>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d902      	bls.n	80071da <storageFlash_GetSector+0xfe>
	{
		sector = FLASH_SECTOR_10;
 80071d4:	230a      	movs	r3, #10
 80071d6:	60fb      	str	r3, [r7, #12]
 80071d8:	e009      	b.n	80071ee <storageFlash_GetSector+0x112>
	}
	else if((Address < 0x080FFFFF) && (Address >= 0x080E0000))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a15      	ldr	r2, [pc, #84]	; (8007234 <storageFlash_GetSector+0x158>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d805      	bhi.n	80071ee <storageFlash_GetSector+0x112>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a14      	ldr	r2, [pc, #80]	; (8007238 <storageFlash_GetSector+0x15c>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d901      	bls.n	80071ee <storageFlash_GetSector+0x112>
	{
		sector = FLASH_SECTOR_11;
 80071ea:	230b      	movs	r3, #11
 80071ec:	60fb      	str	r3, [r7, #12]
	}

	return sector;
 80071ee:	68fb      	ldr	r3, [r7, #12]
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3714      	adds	r7, #20
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr
 80071fc:	08003ffe 	.word	0x08003ffe
 8007200:	08007ffe 	.word	0x08007ffe
 8007204:	08004000 	.word	0x08004000
 8007208:	0800bffe 	.word	0x0800bffe
 800720c:	08008000 	.word	0x08008000
 8007210:	0800ffff 	.word	0x0800ffff
 8007214:	0800c000 	.word	0x0800c000
 8007218:	0801ffff 	.word	0x0801ffff
 800721c:	0803ffff 	.word	0x0803ffff
 8007220:	0805ffff 	.word	0x0805ffff
 8007224:	0807ffff 	.word	0x0807ffff
 8007228:	0809ffff 	.word	0x0809ffff
 800722c:	080bffff 	.word	0x080bffff
 8007230:	080dfffe 	.word	0x080dfffe
 8007234:	080ffffe 	.word	0x080ffffe
 8007238:	080dffff 	.word	0x080dffff

0800723c <storageFlash_EraseSector>:

/** @brief  storageFlash_EraseSector
    @return bool
*/
uint32_t storageFlash_EraseSector(uint32_t startSectorAddress, uint32_t offsets)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b086      	sub	sp, #24
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;

	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 8007246:	f7fb fa37 	bl	80026b8 <HAL_FLASH_Unlock>

	/* Get the number of sector to erase from 1st sector */

	uint32_t StartSector = storageFlash_GetSector(startSectorAddress);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f7ff ff46 	bl	80070dc <storageFlash_GetSector>
 8007250:	6178      	str	r0, [r7, #20]
	uint32_t EndSectorAddress = startSectorAddress + offsets;
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	4413      	add	r3, r2
 8007258:	613b      	str	r3, [r7, #16]
	uint32_t EndSector = storageFlash_GetSector(EndSectorAddress);
 800725a:	6938      	ldr	r0, [r7, #16]
 800725c:	f7ff ff3e 	bl	80070dc <storageFlash_GetSector>
 8007260:	60f8      	str	r0, [r7, #12]

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8007262:	4b14      	ldr	r3, [pc, #80]	; (80072b4 <storageFlash_EraseSector+0x78>)
 8007264:	2200      	movs	r2, #0
 8007266:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8007268:	4b12      	ldr	r3, [pc, #72]	; (80072b4 <storageFlash_EraseSector+0x78>)
 800726a:	2202      	movs	r2, #2
 800726c:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector        = StartSector;
 800726e:	4a11      	ldr	r2, [pc, #68]	; (80072b4 <storageFlash_EraseSector+0x78>)
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	3301      	adds	r3, #1
 800727c:	4a0d      	ldr	r2, [pc, #52]	; (80072b4 <storageFlash_EraseSector+0x78>)
 800727e:	60d3      	str	r3, [r2, #12]

	printf("\n[storageFlash_EraseSector] StartSector : 0x%x - EndSector 0x%x\n", (int)startSectorAddress, (int)EndSectorAddress);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	693a      	ldr	r2, [r7, #16]
 8007284:	4619      	mov	r1, r3
 8007286:	480c      	ldr	r0, [pc, #48]	; (80072b8 <storageFlash_EraseSector+0x7c>)
 8007288:	f001 fd86 	bl	8008d98 <iprintf>

	/* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	 you have to make sure that these data are rewritten before they are accessed during code
	 execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	 DCRST and ICRST bits in the FLASH_CR register. */
	if (HAL_FLASHEx_Erase(&EraseInitStruct, & SECTORError) != HAL_OK)
 800728c:	f107 0308 	add.w	r3, r7, #8
 8007290:	4619      	mov	r1, r3
 8007292:	4808      	ldr	r0, [pc, #32]	; (80072b4 <storageFlash_EraseSector+0x78>)
 8007294:	f7fb fb7e 	bl	8002994 <HAL_FLASHEx_Erase>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d003      	beq.n	80072a6 <storageFlash_EraseSector+0x6a>
	{
		return HAL_FLASH_GetError();
 800729e:	f7fb fa3d 	bl	800271c <HAL_FLASH_GetError>
 80072a2:	4603      	mov	r3, r0
 80072a4:	e002      	b.n	80072ac <storageFlash_EraseSector+0x70>
	}

	/* Lock the Flash to disable the flash control register access (recommended
	 to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 80072a6:	f7fb fa29 	bl	80026fc <HAL_FLASH_Lock>

	return 0;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3718      	adds	r7, #24
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	20000878 	.word	0x20000878
 80072b8:	0800dcc0 	.word	0x0800dcc0

080072bc <storageFlash_format>:
#define __STORAGE_FLASH_STYLE_GREMSY
/** @brief	storageFlash_format
    @return flashStatus_t
*/
static flashStatus_t storageFlash_format(void)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
	uint32_t page0Address = ADDR_FLASH_SECTOR_10;
 80072c2:	4b25      	ldr	r3, [pc, #148]	; (8007358 <storageFlash_format+0x9c>)
 80072c4:	607b      	str	r3, [r7, #4]
	uint32_t page1Address = ADDR_FLASH_SECTOR_11;
 80072c6:	4b25      	ldr	r3, [pc, #148]	; (800735c <storageFlash_format+0xa0>)
 80072c8:	603b      	str	r3, [r7, #0]

	if(storageFlash_EraseSector(page0Address, 0x20000) != 0)
 80072ca:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f7ff ffb4 	bl	800723c <storageFlash_EraseSector>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d004      	beq.n	80072e4 <storageFlash_format+0x28>
	{
		printf("\n[storageFlash_format] erase page1 fail ...\n");
 80072da:	4821      	ldr	r0, [pc, #132]	; (8007360 <storageFlash_format+0xa4>)
 80072dc:	f001 fde2 	bl	8008ea4 <puts>
		return FLASH_STATUS_ER_PROGRAM;
 80072e0:	2300      	movs	r3, #0
 80072e2:	e034      	b.n	800734e <storageFlash_format+0x92>
	}

	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 80072e4:	f7fb f9e8 	bl	80026b8 <HAL_FLASH_Unlock>

	// ghi gia tri page reciever vao page0
	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, page0Address, GREMSY_STORAGE_FLASH_RECEIVER) != HAL_OK)
 80072e8:	4a1e      	ldr	r2, [pc, #120]	; (8007364 <storageFlash_format+0xa8>)
 80072ea:	f04f 0300 	mov.w	r3, #0
 80072ee:	6879      	ldr	r1, [r7, #4]
 80072f0:	2002      	movs	r0, #2
 80072f2:	f7fb f98d 	bl	8002610 <HAL_FLASH_Program>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d004      	beq.n	8007306 <storageFlash_format+0x4a>
	{
		printf("\n[storageFlash_format] write to page0 value reciever fail ...\n");
 80072fc:	481a      	ldr	r0, [pc, #104]	; (8007368 <storageFlash_format+0xac>)
 80072fe:	f001 fdd1 	bl	8008ea4 <puts>
		return FLASH_STATUS_ER_PROGRAM;
 8007302:	2300      	movs	r3, #0
 8007304:	e023      	b.n	800734e <storageFlash_format+0x92>
	}

	/* Lock the Flash to disable the flash control register access (recommended
	 to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 8007306:	f7fb f9f9 	bl	80026fc <HAL_FLASH_Lock>

	/// erase page1
	if(storageFlash_EraseSector(page1Address, 0x20000) != 0)
 800730a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800730e:	6838      	ldr	r0, [r7, #0]
 8007310:	f7ff ff94 	bl	800723c <storageFlash_EraseSector>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d004      	beq.n	8007324 <storageFlash_format+0x68>
	{
		printf("\n[storageFlash_format] erase page1 fail ...\n");
 800731a:	4811      	ldr	r0, [pc, #68]	; (8007360 <storageFlash_format+0xa4>)
 800731c:	f001 fdc2 	bl	8008ea4 <puts>
		return FLASH_STATUS_ER_PROGRAM;
 8007320:	2300      	movs	r3, #0
 8007322:	e014      	b.n	800734e <storageFlash_format+0x92>
	}

	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 8007324:	f7fb f9c8 	bl	80026b8 <HAL_FLASH_Unlock>

	// ghi gia tri page reciever vao page1
	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, page1Address, GREMSY_STORAGE_FLASH_EMPTY) != HAL_OK)
 8007328:	f04f 32ee 	mov.w	r2, #4008636142	; 0xeeeeeeee
 800732c:	f04f 0300 	mov.w	r3, #0
 8007330:	6839      	ldr	r1, [r7, #0]
 8007332:	2002      	movs	r0, #2
 8007334:	f7fb f96c 	bl	8002610 <HAL_FLASH_Program>
 8007338:	4603      	mov	r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d004      	beq.n	8007348 <storageFlash_format+0x8c>
	{
		printf("\n[storageFlash_format] write to page1 value reciever fail ...\n");
 800733e:	480b      	ldr	r0, [pc, #44]	; (800736c <storageFlash_format+0xb0>)
 8007340:	f001 fdb0 	bl	8008ea4 <puts>
		return FLASH_STATUS_ER_PROGRAM;
 8007344:	2300      	movs	r3, #0
 8007346:	e002      	b.n	800734e <storageFlash_format+0x92>
	}

	/* Lock the Flash to disable the flash control register access (recommended
	 to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 8007348:	f7fb f9d8 	bl	80026fc <HAL_FLASH_Lock>

	return FLASH_STATUS_COMPLETE;
 800734c:	2302      	movs	r3, #2
}
 800734e:	4618      	mov	r0, r3
 8007350:	3708      	adds	r7, #8
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	080c0000 	.word	0x080c0000
 800735c:	080e0000 	.word	0x080e0000
 8007360:	0800dd3c 	.word	0x0800dd3c
 8007364:	eeeeeeea 	.word	0xeeeeeeea
 8007368:	0800dd68 	.word	0x0800dd68
 800736c:	0800dda8 	.word	0x0800dda8

08007370 <storageFlash_styleGremsy_configuration>:

/** @brief	storageFlash_styleGremsy_configuration
    @return flashStatus_t
*/
static flashStatus_t storageFlash_styleGremsy_configuration(void)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b086      	sub	sp, #24
 8007374:	af00      	add	r7, sp, #0
	flashStatus_t status = FLASH_STATUS_COMPLETE;
 8007376:	2302      	movs	r3, #2
 8007378:	75fb      	strb	r3, [r7, #23]
	uint32_t page0Address = ADDR_FLASH_SECTOR_10;
 800737a:	4b5a      	ldr	r3, [pc, #360]	; (80074e4 <storageFlash_styleGremsy_configuration+0x174>)
 800737c:	613b      	str	r3, [r7, #16]
	uint32_t page1Address = ADDR_FLASH_SECTOR_11;
 800737e:	4b5a      	ldr	r3, [pc, #360]	; (80074e8 <storageFlash_styleGremsy_configuration+0x178>)
 8007380:	60fb      	str	r3, [r7, #12]
	uint32_t page0Status = (*(uint32_t *)ADDR_FLASH_SECTOR_10);
 8007382:	4b58      	ldr	r3, [pc, #352]	; (80074e4 <storageFlash_styleGremsy_configuration+0x174>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	60bb      	str	r3, [r7, #8]
	uint32_t page1Status = (*(uint32_t *)ADDR_FLASH_SECTOR_11);
 8007388:	4b57      	ldr	r3, [pc, #348]	; (80074e8 <storageFlash_styleGremsy_configuration+0x178>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	607b      	str	r3, [r7, #4]

	/// clear pending flag (if any)
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR  | FLASH_FLAG_WRPERR |
 800738e:	4b57      	ldr	r3, [pc, #348]	; (80074ec <storageFlash_styleGremsy_configuration+0x17c>)
 8007390:	22f3      	movs	r2, #243	; 0xf3
 8007392:	60da      	str	r2, [r3, #12]
            FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);

	printf("\n[storageFlash_styleGremsy_configuration] page0 use sector 0x%x\n", (int)page0Address);
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	4619      	mov	r1, r3
 8007398:	4855      	ldr	r0, [pc, #340]	; (80074f0 <storageFlash_styleGremsy_configuration+0x180>)
 800739a:	f001 fcfd 	bl	8008d98 <iprintf>
	printf("\n[storageFlash_styleGremsy_configuration] page1 use sector 0x%x\n", (int)page1Address);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	4619      	mov	r1, r3
 80073a2:	4854      	ldr	r0, [pc, #336]	; (80074f4 <storageFlash_styleGremsy_configuration+0x184>)
 80073a4:	f001 fcf8 	bl	8008d98 <iprintf>

	switch(page0Status)
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	f1b3 3fee 	cmp.w	r3, #4008636142	; 0xeeeeeeee
 80073ae:	d00d      	beq.n	80073cc <storageFlash_styleGremsy_configuration+0x5c>
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	f1b3 3fee 	cmp.w	r3, #4008636142	; 0xeeeeeeee
 80073b6:	f200 8081 	bhi.w	80074bc <storageFlash_styleGremsy_configuration+0x14c>
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	4a4e      	ldr	r2, [pc, #312]	; (80074f8 <storageFlash_styleGremsy_configuration+0x188>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d049      	beq.n	8007456 <storageFlash_styleGremsy_configuration+0xe6>
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	4a4d      	ldr	r2, [pc, #308]	; (80074fc <storageFlash_styleGremsy_configuration+0x18c>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d013      	beq.n	80073f2 <storageFlash_styleGremsy_configuration+0x82>
 80073ca:	e077      	b.n	80074bc <storageFlash_styleGremsy_configuration+0x14c>
	{
		case GREMSY_STORAGE_FLASH_EMPTY:
		{
			printf("\n[storageFlash_styleGremsy_configuration] page0 is empty\n");
 80073cc:	484c      	ldr	r0, [pc, #304]	; (8007500 <storageFlash_styleGremsy_configuration+0x190>)
 80073ce:	f001 fd69 	bl	8008ea4 <puts>

			/// ktra page1
			if(page1Status != GREMSY_STORAGE_FLASH_RECEIVER)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4a49      	ldr	r2, [pc, #292]	; (80074fc <storageFlash_styleGremsy_configuration+0x18c>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d007      	beq.n	80073ea <storageFlash_styleGremsy_configuration+0x7a>
			{
				printf("\n[storageFlash_styleGremsy_configuration] page0 and page1 format\n");
 80073da:	484a      	ldr	r0, [pc, #296]	; (8007504 <storageFlash_styleGremsy_configuration+0x194>)
 80073dc:	f001 fd62 	bl	8008ea4 <puts>

				/// dua flash ve mac dinh
				status = storageFlash_format();
 80073e0:	f7ff ff6c 	bl	80072bc <storageFlash_format>
 80073e4:	4603      	mov	r3, r0
 80073e6:	75fb      	strb	r3, [r7, #23]
			}
			else
			{
				printf("\n[storageFlash_styleGremsy_configuration] page1 is reciever\n");
			}
		}break;
 80073e8:	e073      	b.n	80074d2 <storageFlash_styleGremsy_configuration+0x162>
				printf("\n[storageFlash_styleGremsy_configuration] page1 is reciever\n");
 80073ea:	4847      	ldr	r0, [pc, #284]	; (8007508 <storageFlash_styleGremsy_configuration+0x198>)
 80073ec:	f001 fd5a 	bl	8008ea4 <puts>
		}break;
 80073f0:	e06f      	b.n	80074d2 <storageFlash_styleGremsy_configuration+0x162>
		case GREMSY_STORAGE_FLASH_RECEIVER:
		{
			printf("\n[storageFlash_styleGremsy_configuration] page0 is reciever\n");
 80073f2:	4846      	ldr	r0, [pc, #280]	; (800750c <storageFlash_styleGremsy_configuration+0x19c>)
 80073f4:	f001 fd56 	bl	8008ea4 <puts>

			if(page1Status != GREMSY_STORAGE_FLASH_EMPTY)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f1b3 3fee 	cmp.w	r3, #4008636142	; 0xeeeeeeee
 80073fe:	d026      	beq.n	800744e <storageFlash_styleGremsy_configuration+0xde>
			{
				printf("\n[storageFlash_styleGremsy_configuration] page1 erase and write empty\n");
 8007400:	4843      	ldr	r0, [pc, #268]	; (8007510 <storageFlash_styleGremsy_configuration+0x1a0>)
 8007402:	f001 fd4f 	bl	8008ea4 <puts>

				if(storageFlash_EraseSector(page1Address, 0x20000) != 0)
 8007406:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f7ff ff16 	bl	800723c <storageFlash_EraseSector>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d004      	beq.n	8007420 <storageFlash_styleGremsy_configuration+0xb0>
				{
					printf("\n[storageFlash_styleGremsy_configuration] page1 erase fail\n");
 8007416:	483f      	ldr	r0, [pc, #252]	; (8007514 <storageFlash_styleGremsy_configuration+0x1a4>)
 8007418:	f001 fd44 	bl	8008ea4 <puts>
					return FLASH_STATUS_ER_PROGRAM;
 800741c:	2300      	movs	r3, #0
 800741e:	e05c      	b.n	80074da <storageFlash_styleGremsy_configuration+0x16a>
				}

				/* Unlock the Flash to enable the flash control register access *************/
				HAL_FLASH_Unlock();
 8007420:	f7fb f94a 	bl	80026b8 <HAL_FLASH_Unlock>

				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, page1Address, GREMSY_STORAGE_FLASH_EMPTY) != HAL_OK)
 8007424:	f04f 32ee 	mov.w	r2, #4008636142	; 0xeeeeeeee
 8007428:	f04f 0300 	mov.w	r3, #0
 800742c:	68f9      	ldr	r1, [r7, #12]
 800742e:	2002      	movs	r0, #2
 8007430:	f7fb f8ee 	bl	8002610 <HAL_FLASH_Program>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d004      	beq.n	8007444 <storageFlash_styleGremsy_configuration+0xd4>
				{
					printf("\n[storageFlash_format] write to page1 value empty fail ...\n");
 800743a:	4837      	ldr	r0, [pc, #220]	; (8007518 <storageFlash_styleGremsy_configuration+0x1a8>)
 800743c:	f001 fd32 	bl	8008ea4 <puts>
					return FLASH_STATUS_ER_PROGRAM;
 8007440:	2300      	movs	r3, #0
 8007442:	e04a      	b.n	80074da <storageFlash_styleGremsy_configuration+0x16a>
				}

				/* Lock the Flash to disable the flash control register access (recommended
				 to protect the FLASH memory against possible unwanted operation) *********/
				HAL_FLASH_Lock();
 8007444:	f7fb f95a 	bl	80026fc <HAL_FLASH_Lock>

				status = FLASH_STATUS_COMPLETE;
 8007448:	2302      	movs	r3, #2
 800744a:	75fb      	strb	r3, [r7, #23]
			}
			else
			{
				printf("\n[storageFlash_styleGremsy_configuration] page1 is empty\n");
			}
		}break;
 800744c:	e041      	b.n	80074d2 <storageFlash_styleGremsy_configuration+0x162>
				printf("\n[storageFlash_styleGremsy_configuration] page1 is empty\n");
 800744e:	4833      	ldr	r0, [pc, #204]	; (800751c <storageFlash_styleGremsy_configuration+0x1ac>)
 8007450:	f001 fd28 	bl	8008ea4 <puts>
		}break;
 8007454:	e03d      	b.n	80074d2 <storageFlash_styleGremsy_configuration+0x162>
		case GREMSY_STORAGE_FLASH_FULL:
		{
			printf("\n[storageFlash_styleGremsy_configuration] page0 is full\n");
 8007456:	4832      	ldr	r0, [pc, #200]	; (8007520 <storageFlash_styleGremsy_configuration+0x1b0>)
 8007458:	f001 fd24 	bl	8008ea4 <puts>

			if(page1Status == GREMSY_STORAGE_FLASH_RECEIVER)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a27      	ldr	r2, [pc, #156]	; (80074fc <storageFlash_styleGremsy_configuration+0x18c>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d123      	bne.n	80074ac <storageFlash_styleGremsy_configuration+0x13c>
			{
				printf("\n[storageFlash_styleGremsy_configuration] page0 erase and write empty\n");
 8007464:	482f      	ldr	r0, [pc, #188]	; (8007524 <storageFlash_styleGremsy_configuration+0x1b4>)
 8007466:	f001 fd1d 	bl	8008ea4 <puts>

				if(storageFlash_EraseSector(page0Address, 0x20000) != 0)
 800746a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800746e:	6938      	ldr	r0, [r7, #16]
 8007470:	f7ff fee4 	bl	800723c <storageFlash_EraseSector>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d001      	beq.n	800747e <storageFlash_styleGremsy_configuration+0x10e>
				{
					return FLASH_STATUS_ER_PROGRAM;
 800747a:	2300      	movs	r3, #0
 800747c:	e02d      	b.n	80074da <storageFlash_styleGremsy_configuration+0x16a>
				}

				/* Unlock the Flash to enable the flash control register access *************/
				HAL_FLASH_Unlock();
 800747e:	f7fb f91b 	bl	80026b8 <HAL_FLASH_Unlock>

				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, page0Address, GREMSY_STORAGE_FLASH_EMPTY) != HAL_OK)
 8007482:	f04f 32ee 	mov.w	r2, #4008636142	; 0xeeeeeeee
 8007486:	f04f 0300 	mov.w	r3, #0
 800748a:	6939      	ldr	r1, [r7, #16]
 800748c:	2002      	movs	r0, #2
 800748e:	f7fb f8bf 	bl	8002610 <HAL_FLASH_Program>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d004      	beq.n	80074a2 <storageFlash_styleGremsy_configuration+0x132>
				{
					printf("\n[storageFlash_format] write to page1 value empty fail ...\n");
 8007498:	481f      	ldr	r0, [pc, #124]	; (8007518 <storageFlash_styleGremsy_configuration+0x1a8>)
 800749a:	f001 fd03 	bl	8008ea4 <puts>
					return FLASH_STATUS_ER_PROGRAM;
 800749e:	2300      	movs	r3, #0
 80074a0:	e01b      	b.n	80074da <storageFlash_styleGremsy_configuration+0x16a>
				}

				/* Lock the Flash to disable the flash control register access (recommended
				 to protect the FLASH memory against possible unwanted operation) *********/
				HAL_FLASH_Lock();
 80074a2:	f7fb f92b 	bl	80026fc <HAL_FLASH_Lock>

				status = FLASH_STATUS_COMPLETE;
 80074a6:	2302      	movs	r3, #2
 80074a8:	75fb      	strb	r3, [r7, #23]
			{
				printf("\n[storageFlash_styleGremsy_configuration] page0 and page1 format\n");

				status = storageFlash_format();
			}
		}break;
 80074aa:	e012      	b.n	80074d2 <storageFlash_styleGremsy_configuration+0x162>
				printf("\n[storageFlash_styleGremsy_configuration] page0 and page1 format\n");
 80074ac:	4815      	ldr	r0, [pc, #84]	; (8007504 <storageFlash_styleGremsy_configuration+0x194>)
 80074ae:	f001 fcf9 	bl	8008ea4 <puts>
				status = storageFlash_format();
 80074b2:	f7ff ff03 	bl	80072bc <storageFlash_format>
 80074b6:	4603      	mov	r3, r0
 80074b8:	75fb      	strb	r3, [r7, #23]
		}break;
 80074ba:	e00a      	b.n	80074d2 <storageFlash_styleGremsy_configuration+0x162>
		default:
		{
			printf("\n[storageFlash_styleGremsy_configuration] page0 and is other\n");
 80074bc:	481a      	ldr	r0, [pc, #104]	; (8007528 <storageFlash_styleGremsy_configuration+0x1b8>)
 80074be:	f001 fcf1 	bl	8008ea4 <puts>

			printf("\n[storageFlash_styleGremsy_configuration] page0 and page1 format\n");
 80074c2:	4810      	ldr	r0, [pc, #64]	; (8007504 <storageFlash_styleGremsy_configuration+0x194>)
 80074c4:	f001 fcee 	bl	8008ea4 <puts>

			status = storageFlash_format();
 80074c8:	f7ff fef8 	bl	80072bc <storageFlash_format>
 80074cc:	4603      	mov	r3, r0
 80074ce:	75fb      	strb	r3, [r7, #23]
		}break;
 80074d0:	bf00      	nop
	}

	/// a little delay wait for flash
	HAL_Delay(100);
 80074d2:	2064      	movs	r0, #100	; 0x64
 80074d4:	f7fa fb64 	bl	8001ba0 <HAL_Delay>

	return status;
 80074d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3718      	adds	r7, #24
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	080c0000 	.word	0x080c0000
 80074e8:	080e0000 	.word	0x080e0000
 80074ec:	40023c00 	.word	0x40023c00
 80074f0:	0800dde8 	.word	0x0800dde8
 80074f4:	0800de2c 	.word	0x0800de2c
 80074f8:	eeeeeee0 	.word	0xeeeeeee0
 80074fc:	eeeeeeea 	.word	0xeeeeeeea
 8007500:	0800de70 	.word	0x0800de70
 8007504:	0800deac 	.word	0x0800deac
 8007508:	0800def0 	.word	0x0800def0
 800750c:	0800df2c 	.word	0x0800df2c
 8007510:	0800df68 	.word	0x0800df68
 8007514:	0800dfb0 	.word	0x0800dfb0
 8007518:	0800dfec 	.word	0x0800dfec
 800751c:	0800e028 	.word	0x0800e028
 8007520:	0800e064 	.word	0x0800e064
 8007524:	0800e09c 	.word	0x0800e09c
 8007528:	0800e0e4 	.word	0x0800e0e4

0800752c <storageFlash_findPageFull>:

/** @brief  storageFlash_findPageFull
    @return uint32_t page address
*/
static uint32_t storageFlash_findPageFull(void)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
	uint32_t pageAddress = 0;
 8007532:	2300      	movs	r3, #0
 8007534:	60fb      	str	r3, [r7, #12]

	uint32_t page0Status = (*(uint32_t *)ADDR_FLASH_SECTOR_10);
 8007536:	4b0e      	ldr	r3, [pc, #56]	; (8007570 <storageFlash_findPageFull+0x44>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	60bb      	str	r3, [r7, #8]
	uint32_t page1Status = (*(uint32_t *)ADDR_FLASH_SECTOR_11);
 800753c:	4b0d      	ldr	r3, [pc, #52]	; (8007574 <storageFlash_findPageFull+0x48>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	607b      	str	r3, [r7, #4]

    if(page0Status == GREMSY_STORAGE_FLASH_FULL)
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	4a0c      	ldr	r2, [pc, #48]	; (8007578 <storageFlash_findPageFull+0x4c>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d102      	bne.n	8007550 <storageFlash_findPageFull+0x24>
    {
    	pageAddress = ADDR_FLASH_SECTOR_10;
 800754a:	4b09      	ldr	r3, [pc, #36]	; (8007570 <storageFlash_findPageFull+0x44>)
 800754c:	60fb      	str	r3, [r7, #12]
 800754e:	e009      	b.n	8007564 <storageFlash_findPageFull+0x38>
    }
    else if(page1Status == GREMSY_STORAGE_FLASH_FULL)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a09      	ldr	r2, [pc, #36]	; (8007578 <storageFlash_findPageFull+0x4c>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d102      	bne.n	800755e <storageFlash_findPageFull+0x32>
    {
    	pageAddress = ADDR_FLASH_SECTOR_11;
 8007558:	4b06      	ldr	r3, [pc, #24]	; (8007574 <storageFlash_findPageFull+0x48>)
 800755a:	60fb      	str	r3, [r7, #12]
 800755c:	e002      	b.n	8007564 <storageFlash_findPageFull+0x38>
    }
    else
    {
    	printf("\n[storageFlash_findPageFull] no find page full\n");
 800755e:	4807      	ldr	r0, [pc, #28]	; (800757c <storageFlash_findPageFull+0x50>)
 8007560:	f001 fca0 	bl	8008ea4 <puts>
    }

	return pageAddress;
 8007564:	68fb      	ldr	r3, [r7, #12]
}
 8007566:	4618      	mov	r0, r3
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	080c0000 	.word	0x080c0000
 8007574:	080e0000 	.word	0x080e0000
 8007578:	eeeeeee0 	.word	0xeeeeeee0
 800757c:	0800e124 	.word	0x0800e124

08007580 <storageFlash_findPageEmpty>:

/** @brief  storageFlash_findPageEmpty
    @return uint32_t page address
*/
static uint32_t storageFlash_findPageEmpty(void)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
	uint32_t pageAddress = 0;
 8007586:	2300      	movs	r3, #0
 8007588:	60fb      	str	r3, [r7, #12]

	uint32_t page0Status = (*(uint32_t *)ADDR_FLASH_SECTOR_10);
 800758a:	4b0e      	ldr	r3, [pc, #56]	; (80075c4 <storageFlash_findPageEmpty+0x44>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	60bb      	str	r3, [r7, #8]
	uint32_t page1Status = (*(uint32_t *)ADDR_FLASH_SECTOR_11);
 8007590:	4b0d      	ldr	r3, [pc, #52]	; (80075c8 <storageFlash_findPageEmpty+0x48>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	607b      	str	r3, [r7, #4]

    if(page0Status == GREMSY_STORAGE_FLASH_EMPTY)
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	f1b3 3fee 	cmp.w	r3, #4008636142	; 0xeeeeeeee
 800759c:	d102      	bne.n	80075a4 <storageFlash_findPageEmpty+0x24>
    {
    	pageAddress = ADDR_FLASH_SECTOR_10;
 800759e:	4b09      	ldr	r3, [pc, #36]	; (80075c4 <storageFlash_findPageEmpty+0x44>)
 80075a0:	60fb      	str	r3, [r7, #12]
 80075a2:	e009      	b.n	80075b8 <storageFlash_findPageEmpty+0x38>
    }
    else if(page1Status == GREMSY_STORAGE_FLASH_EMPTY)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f1b3 3fee 	cmp.w	r3, #4008636142	; 0xeeeeeeee
 80075aa:	d102      	bne.n	80075b2 <storageFlash_findPageEmpty+0x32>
    {
    	pageAddress = ADDR_FLASH_SECTOR_11;
 80075ac:	4b06      	ldr	r3, [pc, #24]	; (80075c8 <storageFlash_findPageEmpty+0x48>)
 80075ae:	60fb      	str	r3, [r7, #12]
 80075b0:	e002      	b.n	80075b8 <storageFlash_findPageEmpty+0x38>
    }
    else
    {
    	printf("\n[storageFlash_findPageEmpty] no find page empty\n");
 80075b2:	4806      	ldr	r0, [pc, #24]	; (80075cc <storageFlash_findPageEmpty+0x4c>)
 80075b4:	f001 fc76 	bl	8008ea4 <puts>
    }

	return pageAddress;
 80075b8:	68fb      	ldr	r3, [r7, #12]
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	080c0000 	.word	0x080c0000
 80075c8:	080e0000 	.word	0x080e0000
 80075cc:	0800e154 	.word	0x0800e154

080075d0 <storageFlash_findPageReciever>:

/** @brief  storageFlash_findPageReciever
    @return uint32_t page address
*/
static uint32_t storageFlash_findPageReciever(void)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
	uint32_t pageAddress = 0;
 80075d6:	2300      	movs	r3, #0
 80075d8:	60fb      	str	r3, [r7, #12]

	uint32_t page0Status = (*(uint32_t *)ADDR_FLASH_SECTOR_10);
 80075da:	4b0e      	ldr	r3, [pc, #56]	; (8007614 <storageFlash_findPageReciever+0x44>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	60bb      	str	r3, [r7, #8]
	uint32_t page1Status = (*(uint32_t *)ADDR_FLASH_SECTOR_11);
 80075e0:	4b0d      	ldr	r3, [pc, #52]	; (8007618 <storageFlash_findPageReciever+0x48>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	607b      	str	r3, [r7, #4]

    if(page0Status == GREMSY_STORAGE_FLASH_RECEIVER)
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	4a0c      	ldr	r2, [pc, #48]	; (800761c <storageFlash_findPageReciever+0x4c>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d102      	bne.n	80075f4 <storageFlash_findPageReciever+0x24>
    {
    	pageAddress = ADDR_FLASH_SECTOR_10;
 80075ee:	4b09      	ldr	r3, [pc, #36]	; (8007614 <storageFlash_findPageReciever+0x44>)
 80075f0:	60fb      	str	r3, [r7, #12]
 80075f2:	e009      	b.n	8007608 <storageFlash_findPageReciever+0x38>
    }
    else if(page1Status == GREMSY_STORAGE_FLASH_RECEIVER)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4a09      	ldr	r2, [pc, #36]	; (800761c <storageFlash_findPageReciever+0x4c>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d102      	bne.n	8007602 <storageFlash_findPageReciever+0x32>
    {
    	pageAddress = ADDR_FLASH_SECTOR_11;
 80075fc:	4b06      	ldr	r3, [pc, #24]	; (8007618 <storageFlash_findPageReciever+0x48>)
 80075fe:	60fb      	str	r3, [r7, #12]
 8007600:	e002      	b.n	8007608 <storageFlash_findPageReciever+0x38>
    }
    else
    {
    	printf("\n[storageFlash_findPageReciever] no find page reciever\n");
 8007602:	4807      	ldr	r0, [pc, #28]	; (8007620 <storageFlash_findPageReciever+0x50>)
 8007604:	f001 fc4e 	bl	8008ea4 <puts>
    }

	return pageAddress;
 8007608:	68fb      	ldr	r3, [r7, #12]
}
 800760a:	4618      	mov	r0, r3
 800760c:	3710      	adds	r7, #16
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	080c0000 	.word	0x080c0000
 8007618:	080e0000 	.word	0x080e0000
 800761c:	eeeeeeea 	.word	0xeeeeeeea
 8007620:	0800e188 	.word	0x0800e188

08007624 <storageFlash_writeAndVerifyPageFull>:
 *  @param[in] address (use style gremsy) of value write
 *  @param[in] value : value write to flash
    @return flashStatus_t
*/
static flashStatus_t storageFlash_writeAndVerifyPageFull(uint16_t address, uint16_t value)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b088      	sub	sp, #32
 8007628:	af00      	add	r7, sp, #0
 800762a:	4603      	mov	r3, r0
 800762c:	460a      	mov	r2, r1
 800762e:	80fb      	strh	r3, [r7, #6]
 8007630:	4613      	mov	r3, r2
 8007632:	80bb      	strh	r3, [r7, #4]
	uint32_t startAddress = 0;
 8007634:	2300      	movs	r3, #0
 8007636:	61bb      	str	r3, [r7, #24]
	uint32_t endAddress = 0;
 8007638:	2300      	movs	r3, #0
 800763a:	617b      	str	r3, [r7, #20]
	uint32_t runAddress = 0;
 800763c:	2300      	movs	r3, #0
 800763e:	61fb      	str	r3, [r7, #28]

	/// chuyen address (2 bytes) va value (2 bytes) thanh 4 byte
	uint32_t valueFlash = (uint32_t)address << 16 | value;
 8007640:	88fb      	ldrh	r3, [r7, #6]
 8007642:	041a      	lsls	r2, r3, #16
 8007644:	88bb      	ldrh	r3, [r7, #4]
 8007646:	4313      	orrs	r3, r2
 8007648:	613b      	str	r3, [r7, #16]

	/// tim page sang sang ghi du lieu
	uint32_t pageAddress = storageFlash_findPageReciever();
 800764a:	f7ff ffc1 	bl	80075d0 <storageFlash_findPageReciever>
 800764e:	60f8      	str	r0, [r7, #12]

	startAddress = pageAddress;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	61bb      	str	r3, [r7, #24]
	endAddress = pageAddress + 128*KBYTE - 2;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800765a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800765e:	617b      	str	r3, [r7, #20]

	/// dia chi bat dau ghi vao flash
	runAddress = startAddress;
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	61fb      	str	r3, [r7, #28]

	/// kiem tra cung nho trong
	while(runAddress < endAddress)
 8007664:	e019      	b.n	800769a <storageFlash_writeAndVerifyPageFull+0x76>
	{
		if(*(__IO uint32_t*)runAddress == 0xffffffff)
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800766e:	d111      	bne.n	8007694 <storageFlash_writeAndVerifyPageFull+0x70>
		{
			/* Unlock the Flash to enable the flash control register access *************/
			HAL_FLASH_Unlock();
 8007670:	f7fb f822 	bl	80026b8 <HAL_FLASH_Unlock>

			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, runAddress, valueFlash) == HAL_OK)
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	461a      	mov	r2, r3
 8007678:	f04f 0300 	mov.w	r3, #0
 800767c:	69f9      	ldr	r1, [r7, #28]
 800767e:	2002      	movs	r0, #2
 8007680:	f7fa ffc6 	bl	8002610 <HAL_FLASH_Program>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d101      	bne.n	800768e <storageFlash_writeAndVerifyPageFull+0x6a>
			{
				return FLASH_STATUS_COMPLETE;
 800768a:	2302      	movs	r3, #2
 800768c:	e00a      	b.n	80076a4 <storageFlash_writeAndVerifyPageFull+0x80>
			}

			/* Lock the Flash to disable the flash control register access (recommended
			 to protect the FLASH memory against possible unwanted operation) *********/
			HAL_FLASH_Lock();
 800768e:	f7fb f835 	bl	80026fc <HAL_FLASH_Lock>
 8007692:	e002      	b.n	800769a <storageFlash_writeAndVerifyPageFull+0x76>
		}
		else
		{
			runAddress += 4;
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	3304      	adds	r3, #4
 8007698:	61fb      	str	r3, [r7, #28]
	while(runAddress < endAddress)
 800769a:	69fa      	ldr	r2, [r7, #28]
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d3e1      	bcc.n	8007666 <storageFlash_writeAndVerifyPageFull+0x42>
		}
	}

	return FLASH_STATUS_ER_PROGRAM;
 80076a2:	2300      	movs	r3, #0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3720      	adds	r7, #32
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <storageFlash_readPageFull>:
 *  @param[in] address (use style gremsy) of value read
 *  @param[in] *data : value read to flash
    @return bool
*/
static bool storageFlash_readPageFull(uint16_t address, uint16_t *data)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b088      	sub	sp, #32
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	4603      	mov	r3, r0
 80076b4:	6039      	str	r1, [r7, #0]
 80076b6:	80fb      	strh	r3, [r7, #6]
	uint32_t pageFullAddress = 0;
 80076b8:	2300      	movs	r3, #0
 80076ba:	61bb      	str	r3, [r7, #24]

	uint32_t startAddress = 0;
 80076bc:	2300      	movs	r3, #0
 80076be:	617b      	str	r3, [r7, #20]
	uint32_t endAddress = 0;
 80076c0:	2300      	movs	r3, #0
 80076c2:	613b      	str	r3, [r7, #16]

	uint32_t runAddress = 0;
 80076c4:	2300      	movs	r3, #0
 80076c6:	61fb      	str	r3, [r7, #28]
	uint16_t addressValue = 0xfffe;
 80076c8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80076cc:	81fb      	strh	r3, [r7, #14]

	pageFullAddress = storageFlash_findPageFull();
 80076ce:	f7ff ff2d 	bl	800752c <storageFlash_findPageFull>
 80076d2:	61b8      	str	r0, [r7, #24]
	if(pageFullAddress == 0)
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d101      	bne.n	80076de <storageFlash_readPageFull+0x32>
	{
		return false;
 80076da:	2300      	movs	r3, #0
 80076dc:	e022      	b.n	8007724 <storageFlash_readPageFull+0x78>
	}

	startAddress = pageFullAddress;
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	617b      	str	r3, [r7, #20]
	endAddress = startAddress + 128*KBYTE - 2;
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 80076e8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80076ec:	613b      	str	r3, [r7, #16]

	/// lay dia chi bat dau doc
	runAddress = endAddress;
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	61fb      	str	r3, [r7, #28]

	/// doc du lieu
	while(runAddress > (startAddress + 2))
 80076f2:	e011      	b.n	8007718 <storageFlash_readPageFull+0x6c>
	{
        /* Get the current location content to be compared with virtual address */
		addressValue = (*(__IO uint16_t*)runAddress);
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	881b      	ldrh	r3, [r3, #0]
 80076f8:	81fb      	strh	r3, [r7, #14]

        /* Compare the read address with the virtual address */
        if(addressValue == address)
 80076fa:	89fa      	ldrh	r2, [r7, #14]
 80076fc:	88fb      	ldrh	r3, [r7, #6]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d107      	bne.n	8007712 <storageFlash_readPageFull+0x66>
        {
            /* Get content of Address-2 which is variable value */
            *data = (*(__IO uint16_t*)(runAddress - 2));
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	3b02      	subs	r3, #2
 8007706:	881b      	ldrh	r3, [r3, #0]
 8007708:	b29a      	uxth	r2, r3
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	801a      	strh	r2, [r3, #0]

            return true;
 800770e:	2301      	movs	r3, #1
 8007710:	e008      	b.n	8007724 <storageFlash_readPageFull+0x78>
        }
        else
        {
        	runAddress = runAddress - 4;
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	3b04      	subs	r3, #4
 8007716:	61fb      	str	r3, [r7, #28]
	while(runAddress > (startAddress + 2))
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	3302      	adds	r3, #2
 800771c:	69fa      	ldr	r2, [r7, #28]
 800771e:	429a      	cmp	r2, r3
 8007720:	d8e8      	bhi.n	80076f4 <storageFlash_readPageFull+0x48>
        }
	}

	return false;
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	3720      	adds	r7, #32
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <storageFlash_tranferData>:

/** @brief  storageFlash_styleGremsy_write
    @return bool
*/
static flashStatus_t storageFlash_tranferData(uint16_t address, uint16_t value)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b088      	sub	sp, #32
 8007730:	af00      	add	r7, sp, #0
 8007732:	4603      	mov	r3, r0
 8007734:	460a      	mov	r2, r1
 8007736:	80fb      	strh	r3, [r7, #6]
 8007738:	4613      	mov	r3, r2
 800773a:	80bb      	strh	r3, [r7, #4]
	uint32_t addressEmpty = 0;
 800773c:	2300      	movs	r3, #0
 800773e:	61fb      	str	r3, [r7, #28]
	uint32_t addressReciever = 0;
 8007740:	2300      	movs	r3, #0
 8007742:	61bb      	str	r3, [r7, #24]

	uint32_t pageEmpty = storageFlash_findPageEmpty();
 8007744:	f7ff ff1c 	bl	8007580 <storageFlash_findPageEmpty>
 8007748:	6138      	str	r0, [r7, #16]
	if(pageEmpty == ADDR_FLASH_SECTOR_10)
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	4a37      	ldr	r2, [pc, #220]	; (800782c <storageFlash_tranferData+0x100>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d104      	bne.n	800775c <storageFlash_tranferData+0x30>
	{
		addressEmpty 	= ADDR_FLASH_SECTOR_10;
 8007752:	4b36      	ldr	r3, [pc, #216]	; (800782c <storageFlash_tranferData+0x100>)
 8007754:	61fb      	str	r3, [r7, #28]
		addressReciever = ADDR_FLASH_SECTOR_11;
 8007756:	4b36      	ldr	r3, [pc, #216]	; (8007830 <storageFlash_tranferData+0x104>)
 8007758:	61bb      	str	r3, [r7, #24]
 800775a:	e00a      	b.n	8007772 <storageFlash_tranferData+0x46>
	}
	else if(pageEmpty == ADDR_FLASH_SECTOR_11)
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	4a34      	ldr	r2, [pc, #208]	; (8007830 <storageFlash_tranferData+0x104>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d104      	bne.n	800776e <storageFlash_tranferData+0x42>
	{
		addressEmpty 	= ADDR_FLASH_SECTOR_11;
 8007764:	4b32      	ldr	r3, [pc, #200]	; (8007830 <storageFlash_tranferData+0x104>)
 8007766:	61fb      	str	r3, [r7, #28]
		addressReciever = ADDR_FLASH_SECTOR_10;
 8007768:	4b30      	ldr	r3, [pc, #192]	; (800782c <storageFlash_tranferData+0x100>)
 800776a:	61bb      	str	r3, [r7, #24]
 800776c:	e001      	b.n	8007772 <storageFlash_tranferData+0x46>
	}
	else
	{
		return FLASH_STATUS_ER_OPERATION;
 800776e:	2301      	movs	r3, #1
 8007770:	e057      	b.n	8007822 <storageFlash_tranferData+0xf6>
	}

	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 8007772:	f7fa ffa1 	bl	80026b8 <HAL_FLASH_Unlock>

	/// write header data switch page empty to page reciver
	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addressEmpty, GREMSY_STORAGE_FLASH_RECEIVER) != HAL_OK)
 8007776:	4a2f      	ldr	r2, [pc, #188]	; (8007834 <storageFlash_tranferData+0x108>)
 8007778:	f04f 0300 	mov.w	r3, #0
 800777c:	69f9      	ldr	r1, [r7, #28]
 800777e:	2002      	movs	r0, #2
 8007780:	f7fa ff46 	bl	8002610 <HAL_FLASH_Program>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d001      	beq.n	800778e <storageFlash_tranferData+0x62>
	{
		return FLASH_STATUS_ER_PROGRAM;
 800778a:	2300      	movs	r3, #0
 800778c:	e049      	b.n	8007822 <storageFlash_tranferData+0xf6>
//
//	/* Unlock the Flash to enable the flash control register access *************/
//	HAL_FLASH_Unlock();

	/// write header data switch page reciever to page full
	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addressReciever, GREMSY_STORAGE_FLASH_FULL) != HAL_OK)
 800778e:	4a2a      	ldr	r2, [pc, #168]	; (8007838 <storageFlash_tranferData+0x10c>)
 8007790:	f04f 0300 	mov.w	r3, #0
 8007794:	69b9      	ldr	r1, [r7, #24]
 8007796:	2002      	movs	r0, #2
 8007798:	f7fa ff3a 	bl	8002610 <HAL_FLASH_Program>
 800779c:	4603      	mov	r3, r0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d001      	beq.n	80077a6 <storageFlash_tranferData+0x7a>
	{
		return FLASH_STATUS_ER_PROGRAM;
 80077a2:	2300      	movs	r3, #0
 80077a4:	e03d      	b.n	8007822 <storageFlash_tranferData+0xf6>
		printf("\n[storageFlash_tranferData] write hearder flash switch lage reciever to full fail\n");
	}

	/* Lock the Flash to disable the flash control register access (recommended
	 to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 80077a6:	f7fa ffa9 	bl	80026fc <HAL_FLASH_Lock>

	/// write value vao page reciever moi duoc chuyen
	flashStatus_t status = storageFlash_writeAndVerifyPageFull(address, value);
 80077aa:	88ba      	ldrh	r2, [r7, #4]
 80077ac:	88fb      	ldrh	r3, [r7, #6]
 80077ae:	4611      	mov	r1, r2
 80077b0:	4618      	mov	r0, r3
 80077b2:	f7ff ff37 	bl	8007624 <storageFlash_writeAndVerifyPageFull>
 80077b6:	4603      	mov	r3, r0
 80077b8:	73fb      	strb	r3, [r7, #15]
	if(status != FLASH_STATUS_COMPLETE)
 80077ba:	7bfb      	ldrb	r3, [r7, #15]
 80077bc:	2b02      	cmp	r3, #2
 80077be:	d004      	beq.n	80077ca <storageFlash_tranferData+0x9e>
	{
		printf("\n[storageFlash_tranferData] write value to reciever fail\n");
 80077c0:	481e      	ldr	r0, [pc, #120]	; (800783c <storageFlash_tranferData+0x110>)
 80077c2:	f001 fb6f 	bl	8008ea4 <puts>
		return FLASH_STATUS_ER_PROGRAM;
 80077c6:	2300      	movs	r3, #0
 80077c8:	e02b      	b.n	8007822 <storageFlash_tranferData+0xf6>
	}

    /* Transfer process: transfer variables from old to the new active page */
    for (int i = 0; i < GREMSY_STORAGE_PARAM_NUM; i++)
 80077ca:	2300      	movs	r3, #0
 80077cc:	617b      	str	r3, [r7, #20]
 80077ce:	e024      	b.n	800781a <storageFlash_tranferData+0xee>
    {
        if (i != address)  /* Check each variable except the one passed as parameter */
 80077d0:	88fb      	ldrh	r3, [r7, #6]
 80077d2:	697a      	ldr	r2, [r7, #20]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d01d      	beq.n	8007814 <storageFlash_tranferData+0xe8>
        {
            uint16_t dataVar;

            /* Read the other last variable updates */
            bool readResult = storageFlash_readPageFull(i, &dataVar);
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	b29b      	uxth	r3, r3
 80077dc:	f107 020a 	add.w	r2, r7, #10
 80077e0:	4611      	mov	r1, r2
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7ff ff62 	bl	80076ac <storageFlash_readPageFull>
 80077e8:	4603      	mov	r3, r0
 80077ea:	73bb      	strb	r3, [r7, #14]

            /* In case variable corresponding to the virtual address was found */
            if (readResult == true)
 80077ec:	7bbb      	ldrb	r3, [r7, #14]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d010      	beq.n	8007814 <storageFlash_tranferData+0xe8>
            {
                /* Transfer the variable to the new active page */
                flashStatus_t status = storageFlash_writeAndVerifyPageFull(i, dataVar);
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	897a      	ldrh	r2, [r7, #10]
 80077f8:	4611      	mov	r1, r2
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7ff ff12 	bl	8007624 <storageFlash_writeAndVerifyPageFull>
 8007800:	4603      	mov	r3, r0
 8007802:	737b      	strb	r3, [r7, #13]

                /* If program operation was failed, a Flash error code is returned */
                if (status != FLASH_STATUS_COMPLETE)
 8007804:	7b7b      	ldrb	r3, [r7, #13]
 8007806:	2b02      	cmp	r3, #2
 8007808:	d004      	beq.n	8007814 <storageFlash_tranferData+0xe8>
                {
                	printf("\n[storageFlash_tranferData] write value to reciever fail\n");
 800780a:	480c      	ldr	r0, [pc, #48]	; (800783c <storageFlash_tranferData+0x110>)
 800780c:	f001 fb4a 	bl	8008ea4 <puts>
                    return FLASH_STATUS_ER_PROGRAM;
 8007810:	2300      	movs	r3, #0
 8007812:	e006      	b.n	8007822 <storageFlash_tranferData+0xf6>
    for (int i = 0; i < GREMSY_STORAGE_PARAM_NUM; i++)
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	3301      	adds	r3, #1
 8007818:	617b      	str	r3, [r7, #20]
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	2b4f      	cmp	r3, #79	; 0x4f
 800781e:	ddd7      	ble.n	80077d0 <storageFlash_tranferData+0xa4>
                }
            }
        }
    }

	return FLASH_STATUS_COMPLETE;
 8007820:	2302      	movs	r3, #2
}
 8007822:	4618      	mov	r0, r3
 8007824:	3720      	adds	r7, #32
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	080c0000 	.word	0x080c0000
 8007830:	080e0000 	.word	0x080e0000
 8007834:	eeeeeeea 	.word	0xeeeeeeea
 8007838:	eeeeeee0 	.word	0xeeeeeee0
 800783c:	0800e1c0 	.word	0x0800e1c0

08007840 <storageFlash_styleGremsy_write>:

/** @brief  storageFlash_styleGremsy_write
    @return bool
*/
flashStatus_t storageFlash_styleGremsy_write(uint16_t address, uint16_t value)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	4603      	mov	r3, r0
 8007848:	460a      	mov	r2, r1
 800784a:	80fb      	strh	r3, [r7, #6]
 800784c:	4613      	mov	r3, r2
 800784e:	80bb      	strh	r3, [r7, #4]
	flashStatus_t status = FLASH_STATUS_COMPLETE;
 8007850:	2302      	movs	r3, #2
 8007852:	73fb      	strb	r3, [r7, #15]

	status = storageFlash_writeAndVerifyPageFull(address, value);
 8007854:	88ba      	ldrh	r2, [r7, #4]
 8007856:	88fb      	ldrh	r3, [r7, #6]
 8007858:	4611      	mov	r1, r2
 800785a:	4618      	mov	r0, r3
 800785c:	f7ff fee2 	bl	8007624 <storageFlash_writeAndVerifyPageFull>
 8007860:	4603      	mov	r3, r0
 8007862:	73fb      	strb	r3, [r7, #15]
	if(status == FLASH_STATUS_ER_PROGRAM)
 8007864:	7bfb      	ldrb	r3, [r7, #15]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d107      	bne.n	800787a <storageFlash_styleGremsy_write+0x3a>
	{
		/// chuyen flash page
		status= storageFlash_tranferData(address, value);
 800786a:	88ba      	ldrh	r2, [r7, #4]
 800786c:	88fb      	ldrh	r3, [r7, #6]
 800786e:	4611      	mov	r1, r2
 8007870:	4618      	mov	r0, r3
 8007872:	f7ff ff5b 	bl	800772c <storageFlash_tranferData>
 8007876:	4603      	mov	r3, r0
 8007878:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 800787a:	7bfb      	ldrb	r3, [r7, #15]
}
 800787c:	4618      	mov	r0, r3
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <storageFlash_styleGremsy_read>:

/** @brief  storageFlash_styleGremsy_read
    @return bool
*/
bool storageFlash_styleGremsy_read(uint16_t address, uint16_t *data)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b088      	sub	sp, #32
 8007888:	af00      	add	r7, sp, #0
 800788a:	4603      	mov	r3, r0
 800788c:	6039      	str	r1, [r7, #0]
 800788e:	80fb      	strh	r3, [r7, #6]
	uint32_t pageFullAddress = 0;
 8007890:	2300      	movs	r3, #0
 8007892:	61bb      	str	r3, [r7, #24]

	uint32_t startAddress = 0;
 8007894:	2300      	movs	r3, #0
 8007896:	617b      	str	r3, [r7, #20]
	uint32_t endAddress = 0;
 8007898:	2300      	movs	r3, #0
 800789a:	613b      	str	r3, [r7, #16]

	uint32_t runAddress = 0;
 800789c:	2300      	movs	r3, #0
 800789e:	61fb      	str	r3, [r7, #28]
	uint16_t addressValue = 0xfffe;
 80078a0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80078a4:	81fb      	strh	r3, [r7, #14]

	pageFullAddress = storageFlash_findPageReciever();
 80078a6:	f7ff fe93 	bl	80075d0 <storageFlash_findPageReciever>
 80078aa:	61b8      	str	r0, [r7, #24]
	if(pageFullAddress == 0)
 80078ac:	69bb      	ldr	r3, [r7, #24]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d101      	bne.n	80078b6 <storageFlash_styleGremsy_read+0x32>
	{
		return false;
 80078b2:	2300      	movs	r3, #0
 80078b4:	e022      	b.n	80078fc <storageFlash_styleGremsy_read+0x78>
	}

	startAddress = pageFullAddress;
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	617b      	str	r3, [r7, #20]
	endAddress = startAddress + 128*KBYTE - 2;
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 80078c0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80078c4:	613b      	str	r3, [r7, #16]

	/// lay dia chi bat dau doc
	runAddress = endAddress;
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	61fb      	str	r3, [r7, #28]

	/// doc du lieu
	while(runAddress > (startAddress + 2))
 80078ca:	e011      	b.n	80078f0 <storageFlash_styleGremsy_read+0x6c>
	{
        /* Get the current location content to be compared with virtual address */
		addressValue = (*(__IO uint16_t*)runAddress);
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	881b      	ldrh	r3, [r3, #0]
 80078d0:	81fb      	strh	r3, [r7, #14]

        /* Compare the read address with the virtual address */
        if(addressValue == address)
 80078d2:	89fa      	ldrh	r2, [r7, #14]
 80078d4:	88fb      	ldrh	r3, [r7, #6]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d107      	bne.n	80078ea <storageFlash_styleGremsy_read+0x66>
        {
            /* Get content of Address-2 which is variable value */
            *data = (*(__IO uint16_t*)(runAddress - 2));
 80078da:	69fb      	ldr	r3, [r7, #28]
 80078dc:	3b02      	subs	r3, #2
 80078de:	881b      	ldrh	r3, [r3, #0]
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	801a      	strh	r2, [r3, #0]

            return true;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e008      	b.n	80078fc <storageFlash_styleGremsy_read+0x78>
        }
        else
        {
        	runAddress = runAddress - 4;
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	3b04      	subs	r3, #4
 80078ee:	61fb      	str	r3, [r7, #28]
	while(runAddress > (startAddress + 2))
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	3302      	adds	r3, #2
 80078f4:	69fa      	ldr	r2, [r7, #28]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d8e8      	bhi.n	80078cc <storageFlash_styleGremsy_read+0x48>
        }
	}

	return false;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3720      	adds	r7, #32
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <uartCLI_configuration>:
#define __UART_CLI_CONFIGURATION
/** @brief  uartCLI_configuration
    @return none
*/
void uartCLI_configuration(uartCLI_t *_cli)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
	 cli = _cli;
 800790c:	4a08      	ldr	r2, [pc, #32]	; (8007930 <uartCLI_configuration+0x2c>)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6013      	str	r3, [r2, #0]

	if(HAL_UART_Receive_DMA(&huart1, &usart1WData, 1) != HAL_OK)
 8007912:	2201      	movs	r2, #1
 8007914:	4907      	ldr	r1, [pc, #28]	; (8007934 <uartCLI_configuration+0x30>)
 8007916:	4808      	ldr	r0, [pc, #32]	; (8007938 <uartCLI_configuration+0x34>)
 8007918:	f7fc f8e6 	bl	8003ae8 <HAL_UART_Receive_DMA>
 800791c:	4603      	mov	r3, r0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d001      	beq.n	8007926 <uartCLI_configuration+0x22>
	{
		Error_Handler();
 8007922:	f7f9 fd25 	bl	8001370 <Error_Handler>
	}
}
 8007926:	bf00      	nop
 8007928:	3708      	adds	r7, #8
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop
 8007930:	2000088c 	.word	0x2000088c
 8007934:	200027bc 	.word	0x200027bc
 8007938:	20000a7c 	.word	0x20000a7c

0800793c <__cmdCli>:

/** @brief  __cmdCli
    @return pointer struct support uart cli
*/
uartCLI_t* __cmdCli(void)
{
 800793c:	b480      	push	{r7}
 800793e:	af00      	add	r7, sp, #0
	return cli;
 8007940:	4b03      	ldr	r3, [pc, #12]	; (8007950 <__cmdCli+0x14>)
 8007942:	681b      	ldr	r3, [r3, #0]
}
 8007944:	4618      	mov	r0, r3
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	2000088c 	.word	0x2000088c

08007954 <uartCLI_getCmd>:
#define __UART_CLI_FUNCTIONS
/** @brief  uartCLI_getCmd
    @return position cmd
*/
static cmdIndex_t uartCLI_getCmd(void)
{
 8007954:	b5b0      	push	{r4, r5, r7, lr}
 8007956:	b086      	sub	sp, #24
 8007958:	af00      	add	r7, sp, #0
	uint8_t rData;
	bool isCmdSetValue = false;
 800795a:	2300      	movs	r3, #0
 800795c:	73fb      	strb	r3, [r7, #15]

	if(endCmd == true)
 800795e:	4b53      	ldr	r3, [pc, #332]	; (8007aac <uartCLI_getCmd+0x158>)
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	2b00      	cmp	r3, #0
 8007964:	f000 809d 	beq.w	8007aa2 <uartCLI_getCmd+0x14e>
	{
 8007968:	466b      	mov	r3, sp
 800796a:	461d      	mov	r5, r3
		endCmd = false;
 800796c:	4b4f      	ldr	r3, [pc, #316]	; (8007aac <uartCLI_getCmd+0x158>)
 800796e:	2200      	movs	r2, #0
 8007970:	701a      	strb	r2, [r3, #0]

		uint8_t cmdLength = rBufferRxU1.len - 1; /// bo ky tu '\n'
 8007972:	4b4f      	ldr	r3, [pc, #316]	; (8007ab0 <uartCLI_getCmd+0x15c>)
 8007974:	889b      	ldrh	r3, [r3, #4]
 8007976:	b2db      	uxtb	r3, r3
 8007978:	3b01      	subs	r3, #1
 800797a:	73bb      	strb	r3, [r7, #14]
		char cmdRecBuffer[cmdLength];
 800797c:	7bbc      	ldrb	r4, [r7, #14]
 800797e:	4623      	mov	r3, r4
 8007980:	3b01      	subs	r3, #1
 8007982:	60bb      	str	r3, [r7, #8]
 8007984:	b2e0      	uxtb	r0, r4
 8007986:	f04f 0100 	mov.w	r1, #0
 800798a:	f04f 0200 	mov.w	r2, #0
 800798e:	f04f 0300 	mov.w	r3, #0
 8007992:	00cb      	lsls	r3, r1, #3
 8007994:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8007998:	00c2      	lsls	r2, r0, #3
 800799a:	b2e0      	uxtb	r0, r4
 800799c:	f04f 0100 	mov.w	r1, #0
 80079a0:	f04f 0200 	mov.w	r2, #0
 80079a4:	f04f 0300 	mov.w	r3, #0
 80079a8:	00cb      	lsls	r3, r1, #3
 80079aa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80079ae:	00c2      	lsls	r2, r0, #3
 80079b0:	4623      	mov	r3, r4
 80079b2:	3307      	adds	r3, #7
 80079b4:	08db      	lsrs	r3, r3, #3
 80079b6:	00db      	lsls	r3, r3, #3
 80079b8:	ebad 0d03 	sub.w	sp, sp, r3
 80079bc:	466b      	mov	r3, sp
 80079be:	3300      	adds	r3, #0
 80079c0:	607b      	str	r3, [r7, #4]

		memset(cmdRecBuffer, 0, cmdLength);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	7bba      	ldrb	r2, [r7, #14]
 80079c6:	2100      	movs	r1, #0
 80079c8:	4618      	mov	r0, r3
 80079ca:	f000 faa9 	bl	8007f20 <memset>

		for(uint32_t i = 0; i < cmdLength; i++)
 80079ce:	2300      	movs	r3, #0
 80079d0:	613b      	str	r3, [r7, #16]
 80079d2:	e027      	b.n	8007a24 <uartCLI_getCmd+0xd0>
		{
			if(ringBufferRead(&rBufferRxU1, &rData))
 80079d4:	1c7b      	adds	r3, r7, #1
 80079d6:	4619      	mov	r1, r3
 80079d8:	4835      	ldr	r0, [pc, #212]	; (8007ab0 <uartCLI_getCmd+0x15c>)
 80079da:	f7ff f9a5 	bl	8006d28 <ringBufferRead>
 80079de:	4603      	mov	r3, r0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d01c      	beq.n	8007a1e <uartCLI_getCmd+0xca>
			{
				/// cmd value other
				if(isCmdSetValue == true)
 80079e4:	7bfb      	ldrb	r3, [r7, #15]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d008      	beq.n	80079fc <uartCLI_getCmd+0xa8>
				{
					ringBufferWrite(&cli->vSet, rData);
 80079ea:	4b32      	ldr	r3, [pc, #200]	; (8007ab4 <uartCLI_getCmd+0x160>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	332e      	adds	r3, #46	; 0x2e
 80079f0:	787a      	ldrb	r2, [r7, #1]
 80079f2:	4611      	mov	r1, r2
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7ff f961 	bl	8006cbc <ringBufferWrite>
 80079fa:	e010      	b.n	8007a1e <uartCLI_getCmd+0xca>
				}
				else
				{
					if(rData == '=')
 80079fc:	787b      	ldrb	r3, [r7, #1]
 80079fe:	2b3d      	cmp	r3, #61	; 0x3d
 8007a00:	d107      	bne.n	8007a12 <uartCLI_getCmd+0xbe>
					{
						isCmdSetValue = true;
 8007a02:	2301      	movs	r3, #1
 8007a04:	73fb      	strb	r3, [r7, #15]
						cli->isHaveValue = true;
 8007a06:	4b2b      	ldr	r3, [pc, #172]	; (8007ab4 <uartCLI_getCmd+0x160>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8007a10:	e005      	b.n	8007a1e <uartCLI_getCmd+0xca>
					}
					else
					{
						cmdRecBuffer[i] = rData;
 8007a12:	7879      	ldrb	r1, [r7, #1]
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	4413      	add	r3, r2
 8007a1a:	460a      	mov	r2, r1
 8007a1c:	701a      	strb	r2, [r3, #0]
		for(uint32_t i = 0; i < cmdLength; i++)
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	3301      	adds	r3, #1
 8007a22:	613b      	str	r3, [r7, #16]
 8007a24:	7bbb      	ldrb	r3, [r7, #14]
 8007a26:	693a      	ldr	r2, [r7, #16]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d3d3      	bcc.n	80079d4 <uartCLI_getCmd+0x80>
				}
			}
		}

		/// lay ra ky tu '\n'
		ringBufferRead(&rBufferRxU1, &rData);
 8007a2c:	1c7b      	adds	r3, r7, #1
 8007a2e:	4619      	mov	r1, r3
 8007a30:	481f      	ldr	r0, [pc, #124]	; (8007ab0 <uartCLI_getCmd+0x15c>)
 8007a32:	f7ff f979 	bl	8006d28 <ringBufferRead>

		for(uint8_t j = 1; j < MAX_NUMBER_CMD_CLI; j++)
 8007a36:	2301      	movs	r3, #1
 8007a38:	75fb      	strb	r3, [r7, #23]
 8007a3a:	e028      	b.n	8007a8e <uartCLI_getCmd+0x13a>
		{
			uint16_t len = strlen(cmdInfo_t[j].cmdName);
 8007a3c:	7dfb      	ldrb	r3, [r7, #23]
 8007a3e:	4a1e      	ldr	r2, [pc, #120]	; (8007ab8 <uartCLI_getCmd+0x164>)
 8007a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7f8 fbc3 	bl	80001d0 <strlen>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	807b      	strh	r3, [r7, #2]
			if(!memcmp(cmdInfo_t[j].cmdName, cmdRecBuffer, len))//(cmdLength - (cli->vSet.len + 1))))
 8007a4e:	7dfb      	ldrb	r3, [r7, #23]
 8007a50:	4a19      	ldr	r2, [pc, #100]	; (8007ab8 <uartCLI_getCmd+0x164>)
 8007a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a56:	6879      	ldr	r1, [r7, #4]
 8007a58:	887a      	ldrh	r2, [r7, #2]
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f000 fa44 	bl	8007ee8 <memcmp>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d110      	bne.n	8007a88 <uartCLI_getCmd+0x134>
			{
				printf("\n[uartCLI_getCmd] cmd name : %s\n", cmdInfo_t[j].cmdName);
 8007a66:	7dfb      	ldrb	r3, [r7, #23]
 8007a68:	4a13      	ldr	r2, [pc, #76]	; (8007ab8 <uartCLI_getCmd+0x164>)
 8007a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a6e:	4619      	mov	r1, r3
 8007a70:	4812      	ldr	r0, [pc, #72]	; (8007abc <uartCLI_getCmd+0x168>)
 8007a72:	f001 f991 	bl	8008d98 <iprintf>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8007a76:	2200      	movs	r2, #0
 8007a78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007a7c:	4810      	ldr	r0, [pc, #64]	; (8007ac0 <uartCLI_getCmd+0x16c>)
 8007a7e:	f7fb fa47 	bl	8002f10 <HAL_GPIO_WritePin>
				return (cmdIndex_t)j;
 8007a82:	7dfb      	ldrb	r3, [r7, #23]
 8007a84:	46ad      	mov	sp, r5
 8007a86:	e00d      	b.n	8007aa4 <uartCLI_getCmd+0x150>
		for(uint8_t j = 1; j < MAX_NUMBER_CMD_CLI; j++)
 8007a88:	7dfb      	ldrb	r3, [r7, #23]
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	75fb      	strb	r3, [r7, #23]
 8007a8e:	7dfb      	ldrb	r3, [r7, #23]
 8007a90:	2b08      	cmp	r3, #8
 8007a92:	d9d3      	bls.n	8007a3c <uartCLI_getCmd+0xe8>
			}
		}

		printf("\n[uartCLI_getCmd] cmd not found");
 8007a94:	480b      	ldr	r0, [pc, #44]	; (8007ac4 <uartCLI_getCmd+0x170>)
 8007a96:	f001 f97f 	bl	8008d98 <iprintf>
		printf("\n[uartCLI_getCmd] please enter 'Help' to find command format\n");
 8007a9a:	480b      	ldr	r0, [pc, #44]	; (8007ac8 <uartCLI_getCmd+0x174>)
 8007a9c:	f001 fa02 	bl	8008ea4 <puts>
 8007aa0:	46ad      	mov	sp, r5
	}

	return CMD_CLI_NONE;
 8007aa2:	2300      	movs	r3, #0
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3718      	adds	r7, #24
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bdb0      	pop	{r4, r5, r7, pc}
 8007aac:	200027bd 	.word	0x200027bd
 8007ab0:	200026a8 	.word	0x200026a8
 8007ab4:	2000088c 	.word	0x2000088c
 8007ab8:	2000000c 	.word	0x2000000c
 8007abc:	0800e27c 	.word	0x0800e27c
 8007ac0:	40020800 	.word	0x40020800
 8007ac4:	0800e2a0 	.word	0x0800e2a0
 8007ac8:	0800e2c0 	.word	0x0800e2c0
 8007acc:	00000000 	.word	0x00000000

08007ad0 <cmdCLI_getValueSet>:

/** @brief  cmdCLI_getValueSet
    @return none
*/
static void cmdCLI_getValueSet(ringBuffer_t *rB, int len, int *value)
{
 8007ad0:	b5b0      	push	{r4, r5, r7, lr}
 8007ad2:	b086      	sub	sp, #24
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	607a      	str	r2, [r7, #4]
	uint8_t valueSetLength = rB->len;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	889b      	ldrh	r3, [r3, #4]
 8007ae0:	74fb      	strb	r3, [r7, #19]
	uint8_t rData = 0;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	74bb      	strb	r3, [r7, #18]
	bool nextValue = false;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	75fb      	strb	r3, [r7, #23]
	uint8_t nextValueCount = 0;
 8007aea:	2300      	movs	r3, #0
 8007aec:	75bb      	strb	r3, [r7, #22]

	if(cli->isHaveValue == true)
 8007aee:	4b6c      	ldr	r3, [pc, #432]	; (8007ca0 <cmdCLI_getValueSet+0x1d0>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	f000 80c8 	beq.w	8007c8c <cmdCLI_getValueSet+0x1bc>
	{
		cli->isHaveValue = false;
 8007afc:	4b68      	ldr	r3, [pc, #416]	; (8007ca0 <cmdCLI_getValueSet+0x1d0>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		for(uint8_t i = 0; i < valueSetLength; i++)
 8007b06:	2300      	movs	r3, #0
 8007b08:	757b      	strb	r3, [r7, #21]
 8007b0a:	e081      	b.n	8007c10 <cmdCLI_getValueSet+0x140>
		{
			if(ringBufferRead(rB, &rData) == RING_BUFFER_OK)
 8007b0c:	f107 0312 	add.w	r3, r7, #18
 8007b10:	4619      	mov	r1, r3
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	f7ff f908 	bl	8006d28 <ringBufferRead>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d175      	bne.n	8007c0a <cmdCLI_getValueSet+0x13a>
			{
				/// get next value
				if(nextValue == true)
 8007b1e:	7dfb      	ldrb	r3, [r7, #23]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d037      	beq.n	8007b94 <cmdCLI_getValueSet+0xc4>
				{
					nextValueCount++;
 8007b24:	7dbb      	ldrb	r3, [r7, #22]
 8007b26:	3301      	adds	r3, #1
 8007b28:	75bb      	strb	r3, [r7, #22]
					value[1] += (rData - 48) * pow(10, rB->len);
 8007b2a:	7cbb      	ldrb	r3, [r7, #18]
 8007b2c:	3b30      	subs	r3, #48	; 0x30
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f7f8 fcf8 	bl	8000524 <__aeabi_i2d>
 8007b34:	4604      	mov	r4, r0
 8007b36:	460d      	mov	r5, r1
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	889b      	ldrh	r3, [r3, #4]
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7f8 fce1 	bl	8000504 <__aeabi_ui2d>
 8007b42:	4602      	mov	r2, r0
 8007b44:	460b      	mov	r3, r1
 8007b46:	ec43 2b11 	vmov	d1, r2, r3
 8007b4a:	ed9f 0b53 	vldr	d0, [pc, #332]	; 8007c98 <cmdCLI_getValueSet+0x1c8>
 8007b4e:	f004 ff59 	bl	800ca04 <pow>
 8007b52:	ec53 2b10 	vmov	r2, r3, d0
 8007b56:	4620      	mov	r0, r4
 8007b58:	4629      	mov	r1, r5
 8007b5a:	f7f8 fd4d 	bl	80005f8 <__aeabi_dmul>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	460b      	mov	r3, r1
 8007b62:	4614      	mov	r4, r2
 8007b64:	461d      	mov	r5, r3
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	3304      	adds	r3, #4
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f7f8 fcd9 	bl	8000524 <__aeabi_i2d>
 8007b72:	4602      	mov	r2, r0
 8007b74:	460b      	mov	r3, r1
 8007b76:	4620      	mov	r0, r4
 8007b78:	4629      	mov	r1, r5
 8007b7a:	f7f8 fb87 	bl	800028c <__adddf3>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	460b      	mov	r3, r1
 8007b82:	4610      	mov	r0, r2
 8007b84:	4619      	mov	r1, r3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	1d1c      	adds	r4, r3, #4
 8007b8a:	f7f8 ffe5 	bl	8000b58 <__aeabi_d2iz>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	6023      	str	r3, [r4, #0]
 8007b92:	e03a      	b.n	8007c0a <cmdCLI_getValueSet+0x13a>
				}
				else
				{
					if(rData == ',')
 8007b94:	7cbb      	ldrb	r3, [r7, #18]
 8007b96:	2b2c      	cmp	r3, #44	; 0x2c
 8007b98:	d105      	bne.n	8007ba6 <cmdCLI_getValueSet+0xd6>
					{
						nextValue = true;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	75fb      	strb	r3, [r7, #23]
						nextValueCount++;
 8007b9e:	7dbb      	ldrb	r3, [r7, #22]
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	75bb      	strb	r3, [r7, #22]
 8007ba4:	e031      	b.n	8007c0a <cmdCLI_getValueSet+0x13a>
					}
					else
					{
						value[0] += (rData - 48) * pow(10, rB->len);
 8007ba6:	7cbb      	ldrb	r3, [r7, #18]
 8007ba8:	3b30      	subs	r3, #48	; 0x30
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7f8 fcba 	bl	8000524 <__aeabi_i2d>
 8007bb0:	4604      	mov	r4, r0
 8007bb2:	460d      	mov	r5, r1
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	889b      	ldrh	r3, [r3, #4]
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f7f8 fca3 	bl	8000504 <__aeabi_ui2d>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	ec43 2b11 	vmov	d1, r2, r3
 8007bc6:	ed9f 0b34 	vldr	d0, [pc, #208]	; 8007c98 <cmdCLI_getValueSet+0x1c8>
 8007bca:	f004 ff1b 	bl	800ca04 <pow>
 8007bce:	ec53 2b10 	vmov	r2, r3, d0
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	4629      	mov	r1, r5
 8007bd6:	f7f8 fd0f 	bl	80005f8 <__aeabi_dmul>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	460b      	mov	r3, r1
 8007bde:	4614      	mov	r4, r2
 8007be0:	461d      	mov	r5, r3
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7f8 fc9c 	bl	8000524 <__aeabi_i2d>
 8007bec:	4602      	mov	r2, r0
 8007bee:	460b      	mov	r3, r1
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	4629      	mov	r1, r5
 8007bf4:	f7f8 fb4a 	bl	800028c <__adddf3>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	4610      	mov	r0, r2
 8007bfe:	4619      	mov	r1, r3
 8007c00:	f7f8 ffaa 	bl	8000b58 <__aeabi_d2iz>
 8007c04:	4602      	mov	r2, r0
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	601a      	str	r2, [r3, #0]
		for(uint8_t i = 0; i < valueSetLength; i++)
 8007c0a:	7d7b      	ldrb	r3, [r7, #21]
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	757b      	strb	r3, [r7, #21]
 8007c10:	7d7a      	ldrb	r2, [r7, #21]
 8007c12:	7cfb      	ldrb	r3, [r7, #19]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	f4ff af79 	bcc.w	8007b0c <cmdCLI_getValueSet+0x3c>
				}
			}
		}

		/// tinh lai gia tri value[0] khi co 2 gia tri
		if(nextValue == true)
 8007c1a:	7dfb      	ldrb	r3, [r7, #23]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d021      	beq.n	8007c64 <cmdCLI_getValueSet+0x194>
		{
			value[0] = value[0] / pow(10, nextValueCount);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7f8 fc7d 	bl	8000524 <__aeabi_i2d>
 8007c2a:	4604      	mov	r4, r0
 8007c2c:	460d      	mov	r5, r1
 8007c2e:	7dbb      	ldrb	r3, [r7, #22]
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7f8 fc67 	bl	8000504 <__aeabi_ui2d>
 8007c36:	4602      	mov	r2, r0
 8007c38:	460b      	mov	r3, r1
 8007c3a:	ec43 2b11 	vmov	d1, r2, r3
 8007c3e:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8007c98 <cmdCLI_getValueSet+0x1c8>
 8007c42:	f004 fedf 	bl	800ca04 <pow>
 8007c46:	ec53 2b10 	vmov	r2, r3, d0
 8007c4a:	4620      	mov	r0, r4
 8007c4c:	4629      	mov	r1, r5
 8007c4e:	f7f8 fdfd 	bl	800084c <__aeabi_ddiv>
 8007c52:	4602      	mov	r2, r0
 8007c54:	460b      	mov	r3, r1
 8007c56:	4610      	mov	r0, r2
 8007c58:	4619      	mov	r1, r3
 8007c5a:	f7f8 ff7d 	bl	8000b58 <__aeabi_d2iz>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	601a      	str	r2, [r3, #0]
		}

		for(uint8_t j = 0; j < len; j++)
 8007c64:	2300      	movs	r3, #0
 8007c66:	753b      	strb	r3, [r7, #20]
 8007c68:	e00c      	b.n	8007c84 <cmdCLI_getValueSet+0x1b4>
		{
			printf("\nvalue set%d = %d\n", (int)j, value[j]);
 8007c6a:	7d39      	ldrb	r1, [r7, #20]
 8007c6c:	7d3b      	ldrb	r3, [r7, #20]
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	4413      	add	r3, r2
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	461a      	mov	r2, r3
 8007c78:	480a      	ldr	r0, [pc, #40]	; (8007ca4 <cmdCLI_getValueSet+0x1d4>)
 8007c7a:	f001 f88d 	bl	8008d98 <iprintf>
		for(uint8_t j = 0; j < len; j++)
 8007c7e:	7d3b      	ldrb	r3, [r7, #20]
 8007c80:	3301      	adds	r3, #1
 8007c82:	753b      	strb	r3, [r7, #20]
 8007c84:	7d3b      	ldrb	r3, [r7, #20]
 8007c86:	68ba      	ldr	r2, [r7, #8]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	dcee      	bgt.n	8007c6a <cmdCLI_getValueSet+0x19a>
		}

	}
}
 8007c8c:	bf00      	nop
 8007c8e:	3718      	adds	r7, #24
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bdb0      	pop	{r4, r5, r7, pc}
 8007c94:	f3af 8000 	nop.w
 8007c98:	00000000 	.word	0x00000000
 8007c9c:	40240000 	.word	0x40240000
 8007ca0:	2000088c 	.word	0x2000088c
 8007ca4:	0800e300 	.word	0x0800e300

08007ca8 <uartCLI_cmdHelp>:

/** @brief  uartCLI_cmdHelp
    @return none
*/
static void uartCLI_cmdHelp(void)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
	printf("\n[uartCLI_cmdHelp] command list\n");
 8007cae:	480e      	ldr	r0, [pc, #56]	; (8007ce8 <uartCLI_cmdHelp+0x40>)
 8007cb0:	f001 f8f8 	bl	8008ea4 <puts>
	for(uint8_t i = 1; i < MAX_NUMBER_CMD_CLI - 1; i++)
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	71fb      	strb	r3, [r7, #7]
 8007cb8:	e009      	b.n	8007cce <uartCLI_cmdHelp+0x26>
	{
		printf("%s\n", cmdInfo_t[i].cmdName);
 8007cba:	79fb      	ldrb	r3, [r7, #7]
 8007cbc:	4a0b      	ldr	r2, [pc, #44]	; (8007cec <uartCLI_cmdHelp+0x44>)
 8007cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f001 f8ee 	bl	8008ea4 <puts>
	for(uint8_t i = 1; i < MAX_NUMBER_CMD_CLI - 1; i++)
 8007cc8:	79fb      	ldrb	r3, [r7, #7]
 8007cca:	3301      	adds	r3, #1
 8007ccc:	71fb      	strb	r3, [r7, #7]
 8007cce:	79fb      	ldrb	r3, [r7, #7]
 8007cd0:	2b07      	cmp	r3, #7
 8007cd2:	d9f2      	bls.n	8007cba <uartCLI_cmdHelp+0x12>
	}

	printf("Command nomal example : {'cmd name'}");
 8007cd4:	4806      	ldr	r0, [pc, #24]	; (8007cf0 <uartCLI_cmdHelp+0x48>)
 8007cd6:	f001 f85f 	bl	8008d98 <iprintf>
	printf("Command set example : {cmd name = 'value1','value2'}");
 8007cda:	4806      	ldr	r0, [pc, #24]	; (8007cf4 <uartCLI_cmdHelp+0x4c>)
 8007cdc:	f001 f85c 	bl	8008d98 <iprintf>

}
 8007ce0:	bf00      	nop
 8007ce2:	3708      	adds	r7, #8
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	0800e314 	.word	0x0800e314
 8007cec:	2000000c 	.word	0x2000000c
 8007cf0:	0800e334 	.word	0x0800e334
 8007cf4:	0800e35c 	.word	0x0800e35c

08007cf8 <uartCLI_process>:
#define __UART_CLI_PROCESS
/** @brief  uartCLI_process
    @return none
*/
void uartCLI_process(void)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
	static cmdIndex_t cmdReciever = 0;

	switch((uint8_t)cmdReciever)
 8007cfe:	4b41      	ldr	r3, [pc, #260]	; (8007e04 <uartCLI_process+0x10c>)
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	2b08      	cmp	r3, #8
 8007d04:	d87a      	bhi.n	8007dfc <uartCLI_process+0x104>
 8007d06:	a201      	add	r2, pc, #4	; (adr r2, 8007d0c <uartCLI_process+0x14>)
 8007d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d0c:	08007d31 	.word	0x08007d31
 8007d10:	08007d4b 	.word	0x08007d4b
 8007d14:	08007d5b 	.word	0x08007d5b
 8007d18:	08007d6b 	.word	0x08007d6b
 8007d1c:	08007d7b 	.word	0x08007d7b
 8007d20:	08007dfd 	.word	0x08007dfd
 8007d24:	08007d8b 	.word	0x08007d8b
 8007d28:	08007dc5 	.word	0x08007dc5
 8007d2c:	08007df1 	.word	0x08007df1
	{
		case CMD_CLI_NONE:
		{
			cmdReciever = uartCLI_getCmd();
 8007d30:	f7ff fe10 	bl	8007954 <uartCLI_getCmd>
 8007d34:	4603      	mov	r3, r0
 8007d36:	461a      	mov	r2, r3
 8007d38:	4b32      	ldr	r3, [pc, #200]	; (8007e04 <uartCLI_process+0x10c>)
 8007d3a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007d42:	4831      	ldr	r0, [pc, #196]	; (8007e08 <uartCLI_process+0x110>)
 8007d44:	f7fb f8e4 	bl	8002f10 <HAL_GPIO_WritePin>
		}break;
 8007d48:	e058      	b.n	8007dfc <uartCLI_process+0x104>
		case CMD_CLI_00:
		{
			cli->flagMsgHeartBeat = true;
 8007d4a:	4b30      	ldr	r3, [pc, #192]	; (8007e0c <uartCLI_process+0x114>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	701a      	strb	r2, [r3, #0]
			cmdReciever = CMD_CLI_NONE;
 8007d52:	4b2c      	ldr	r3, [pc, #176]	; (8007e04 <uartCLI_process+0x10c>)
 8007d54:	2200      	movs	r2, #0
 8007d56:	701a      	strb	r2, [r3, #0]
		}break;
 8007d58:	e050      	b.n	8007dfc <uartCLI_process+0x104>
		case CMD_CLI_01:
		{
			cli->flagMsgHeartBeat = false;
 8007d5a:	4b2c      	ldr	r3, [pc, #176]	; (8007e0c <uartCLI_process+0x114>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	701a      	strb	r2, [r3, #0]
			cmdReciever = CMD_CLI_NONE;
 8007d62:	4b28      	ldr	r3, [pc, #160]	; (8007e04 <uartCLI_process+0x10c>)
 8007d64:	2200      	movs	r2, #0
 8007d66:	701a      	strb	r2, [r3, #0]
		}break;
 8007d68:	e048      	b.n	8007dfc <uartCLI_process+0x104>
		case CMD_CLI_02:
		{
			cli->flagMsgJumTarget = true;
 8007d6a:	4b28      	ldr	r3, [pc, #160]	; (8007e0c <uartCLI_process+0x114>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	705a      	strb	r2, [r3, #1]
			cmdReciever = CMD_CLI_NONE;
 8007d72:	4b24      	ldr	r3, [pc, #144]	; (8007e04 <uartCLI_process+0x10c>)
 8007d74:	2200      	movs	r2, #0
 8007d76:	701a      	strb	r2, [r3, #0]
		}break;
 8007d78:	e040      	b.n	8007dfc <uartCLI_process+0x104>
		case CMD_CLI_03:
		{
			cli->flagMsgJumTarget = false;
 8007d7a:	4b24      	ldr	r3, [pc, #144]	; (8007e0c <uartCLI_process+0x114>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	705a      	strb	r2, [r3, #1]
			cmdReciever = CMD_CLI_NONE;
 8007d82:	4b20      	ldr	r3, [pc, #128]	; (8007e04 <uartCLI_process+0x10c>)
 8007d84:	2200      	movs	r2, #0
 8007d86:	701a      	strb	r2, [r3, #0]
		}break;
 8007d88:	e038      	b.n	8007dfc <uartCLI_process+0x104>
		case CMD_CLI_05:
		{
			int value[2] = {0, 0};
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	60bb      	str	r3, [r7, #8]
 8007d8e:	2300      	movs	r3, #0
 8007d90:	60fb      	str	r3, [r7, #12]

			cli->flagStorageWrite = true;
 8007d92:	4b1e      	ldr	r3, [pc, #120]	; (8007e0c <uartCLI_process+0x114>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2201      	movs	r2, #1
 8007d98:	709a      	strb	r2, [r3, #2]
			cmdCLI_getValueSet(&cli->vSet, 2, value);
 8007d9a:	4b1c      	ldr	r3, [pc, #112]	; (8007e0c <uartCLI_process+0x114>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	332e      	adds	r3, #46	; 0x2e
 8007da0:	f107 0208 	add.w	r2, r7, #8
 8007da4:	2102      	movs	r1, #2
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7ff fe92 	bl	8007ad0 <cmdCLI_getValueSet>
			cli->value[CMD_CLI_04] = value[0];
 8007dac:	4b17      	ldr	r3, [pc, #92]	; (8007e0c <uartCLI_process+0x114>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	68ba      	ldr	r2, [r7, #8]
 8007db2:	619a      	str	r2, [r3, #24]
			cli->value[CMD_CLI_05] = value[1];
 8007db4:	4b15      	ldr	r3, [pc, #84]	; (8007e0c <uartCLI_process+0x114>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68fa      	ldr	r2, [r7, #12]
 8007dba:	61da      	str	r2, [r3, #28]
			cmdReciever = CMD_CLI_NONE;
 8007dbc:	4b11      	ldr	r3, [pc, #68]	; (8007e04 <uartCLI_process+0x10c>)
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	701a      	strb	r2, [r3, #0]
		}break;
 8007dc2:	e01b      	b.n	8007dfc <uartCLI_process+0x104>
		case CMD_CLI_06:
		{
			int value = 0;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	607b      	str	r3, [r7, #4]

			cli->flagStorageRead = true;
 8007dc8:	4b10      	ldr	r3, [pc, #64]	; (8007e0c <uartCLI_process+0x114>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	2201      	movs	r2, #1
 8007dce:	70da      	strb	r2, [r3, #3]
			cmdCLI_getValueSet(&cli->vSet, 1, &value);
 8007dd0:	4b0e      	ldr	r3, [pc, #56]	; (8007e0c <uartCLI_process+0x114>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	332e      	adds	r3, #46	; 0x2e
 8007dd6:	1d3a      	adds	r2, r7, #4
 8007dd8:	2101      	movs	r1, #1
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7ff fe78 	bl	8007ad0 <cmdCLI_getValueSet>
			cli->value[CMD_CLI_06] = value;
 8007de0:	4b0a      	ldr	r3, [pc, #40]	; (8007e0c <uartCLI_process+0x114>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	621a      	str	r2, [r3, #32]
			cmdReciever = CMD_CLI_NONE;
 8007de8:	4b06      	ldr	r3, [pc, #24]	; (8007e04 <uartCLI_process+0x10c>)
 8007dea:	2200      	movs	r2, #0
 8007dec:	701a      	strb	r2, [r3, #0]
		}break;
 8007dee:	e005      	b.n	8007dfc <uartCLI_process+0x104>
		case CMD_CLI_07:
		{
			uartCLI_cmdHelp();
 8007df0:	f7ff ff5a 	bl	8007ca8 <uartCLI_cmdHelp>
			cmdReciever = CMD_CLI_NONE;
 8007df4:	4b03      	ldr	r3, [pc, #12]	; (8007e04 <uartCLI_process+0x10c>)
 8007df6:	2200      	movs	r2, #0
 8007df8:	701a      	strb	r2, [r3, #0]
		}break;
 8007dfa:	bf00      	nop
	}
}
 8007dfc:	bf00      	nop
 8007dfe:	3710      	adds	r7, #16
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	20000890 	.word	0x20000890
 8007e08:	40020800 	.word	0x40020800
 8007e0c:	2000088c 	.word	0x2000088c

08007e10 <HAL_UART_TxCpltCallback>:
#define __UART_TX_CALLBACK
/** @brief
    @return
*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
		{
			serialPort_tx_finish(&serial_port2);
		}
	#endif
	#if (USE_MAVLINK_CONTROL == 1 && USE_HOST_BOOTLOADER == 0)
		if(huart->Instance == huart2.Instance)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	4b05      	ldr	r3, [pc, #20]	; (8007e34 <HAL_UART_TxCpltCallback+0x24>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d102      	bne.n	8007e2a <HAL_UART_TxCpltCallback+0x1a>
		{
			serialPort_tx_finish(&serial_port2);
 8007e24:	4804      	ldr	r0, [pc, #16]	; (8007e38 <HAL_UART_TxCpltCallback+0x28>)
 8007e26:	f7ff f906 	bl	8007036 <serialPort_tx_finish>
		}
	#endif
}
 8007e2a:	bf00      	nop
 8007e2c:	3708      	adds	r7, #8
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	20000b04 	.word	0x20000b04
 8007e38:	20001bc8 	.word	0x20001bc8

08007e3c <HAL_UART_RxCpltCallback>:
#define __UART_RX_CALLBACK
/** @brief
    @return
*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]

		}
	#endif

	#if (USE_COMMAND_LINE_INTERFACE == 1)
		if(huart->Instance == huart1.Instance)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	4b0a      	ldr	r3, [pc, #40]	; (8007e74 <HAL_UART_RxCpltCallback+0x38>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d10c      	bne.n	8007e6a <HAL_UART_RxCpltCallback+0x2e>
		{
			ringBufferWrite(&rBufferRxU1, usart1WData);
 8007e50:	4b09      	ldr	r3, [pc, #36]	; (8007e78 <HAL_UART_RxCpltCallback+0x3c>)
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	4619      	mov	r1, r3
 8007e56:	4809      	ldr	r0, [pc, #36]	; (8007e7c <HAL_UART_RxCpltCallback+0x40>)
 8007e58:	f7fe ff30 	bl	8006cbc <ringBufferWrite>

			if(usart1WData == '\n')
 8007e5c:	4b06      	ldr	r3, [pc, #24]	; (8007e78 <HAL_UART_RxCpltCallback+0x3c>)
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	2b0a      	cmp	r3, #10
 8007e62:	d102      	bne.n	8007e6a <HAL_UART_RxCpltCallback+0x2e>
			{
				endCmd = true;
 8007e64:	4b06      	ldr	r3, [pc, #24]	; (8007e80 <HAL_UART_RxCpltCallback+0x44>)
 8007e66:	2201      	movs	r2, #1
 8007e68:	701a      	strb	r2, [r3, #0]
			}
		}
	#endif
}
 8007e6a:	bf00      	nop
 8007e6c:	3708      	adds	r7, #8
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	20000a7c 	.word	0x20000a7c
 8007e78:	200027bc 	.word	0x200027bc
 8007e7c:	200026a8 	.word	0x200026a8
 8007e80:	200027bd 	.word	0x200027bd

08007e84 <__errno>:
 8007e84:	4b01      	ldr	r3, [pc, #4]	; (8007e8c <__errno+0x8>)
 8007e86:	6818      	ldr	r0, [r3, #0]
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop
 8007e8c:	20000030 	.word	0x20000030

08007e90 <__libc_init_array>:
 8007e90:	b570      	push	{r4, r5, r6, lr}
 8007e92:	4d0d      	ldr	r5, [pc, #52]	; (8007ec8 <__libc_init_array+0x38>)
 8007e94:	4c0d      	ldr	r4, [pc, #52]	; (8007ecc <__libc_init_array+0x3c>)
 8007e96:	1b64      	subs	r4, r4, r5
 8007e98:	10a4      	asrs	r4, r4, #2
 8007e9a:	2600      	movs	r6, #0
 8007e9c:	42a6      	cmp	r6, r4
 8007e9e:	d109      	bne.n	8007eb4 <__libc_init_array+0x24>
 8007ea0:	4d0b      	ldr	r5, [pc, #44]	; (8007ed0 <__libc_init_array+0x40>)
 8007ea2:	4c0c      	ldr	r4, [pc, #48]	; (8007ed4 <__libc_init_array+0x44>)
 8007ea4:	f005 fd56 	bl	800d954 <_init>
 8007ea8:	1b64      	subs	r4, r4, r5
 8007eaa:	10a4      	asrs	r4, r4, #2
 8007eac:	2600      	movs	r6, #0
 8007eae:	42a6      	cmp	r6, r4
 8007eb0:	d105      	bne.n	8007ebe <__libc_init_array+0x2e>
 8007eb2:	bd70      	pop	{r4, r5, r6, pc}
 8007eb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eb8:	4798      	blx	r3
 8007eba:	3601      	adds	r6, #1
 8007ebc:	e7ee      	b.n	8007e9c <__libc_init_array+0xc>
 8007ebe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ec2:	4798      	blx	r3
 8007ec4:	3601      	adds	r6, #1
 8007ec6:	e7f2      	b.n	8007eae <__libc_init_array+0x1e>
 8007ec8:	0800f6f0 	.word	0x0800f6f0
 8007ecc:	0800f6f0 	.word	0x0800f6f0
 8007ed0:	0800f6f0 	.word	0x0800f6f0
 8007ed4:	0800f6f4 	.word	0x0800f6f4

08007ed8 <malloc>:
 8007ed8:	4b02      	ldr	r3, [pc, #8]	; (8007ee4 <malloc+0xc>)
 8007eda:	4601      	mov	r1, r0
 8007edc:	6818      	ldr	r0, [r3, #0]
 8007ede:	f000 b887 	b.w	8007ff0 <_malloc_r>
 8007ee2:	bf00      	nop
 8007ee4:	20000030 	.word	0x20000030

08007ee8 <memcmp>:
 8007ee8:	b530      	push	{r4, r5, lr}
 8007eea:	3901      	subs	r1, #1
 8007eec:	2400      	movs	r4, #0
 8007eee:	42a2      	cmp	r2, r4
 8007ef0:	d101      	bne.n	8007ef6 <memcmp+0xe>
 8007ef2:	2000      	movs	r0, #0
 8007ef4:	e005      	b.n	8007f02 <memcmp+0x1a>
 8007ef6:	5d03      	ldrb	r3, [r0, r4]
 8007ef8:	3401      	adds	r4, #1
 8007efa:	5d0d      	ldrb	r5, [r1, r4]
 8007efc:	42ab      	cmp	r3, r5
 8007efe:	d0f6      	beq.n	8007eee <memcmp+0x6>
 8007f00:	1b58      	subs	r0, r3, r5
 8007f02:	bd30      	pop	{r4, r5, pc}

08007f04 <memcpy>:
 8007f04:	440a      	add	r2, r1
 8007f06:	4291      	cmp	r1, r2
 8007f08:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f0c:	d100      	bne.n	8007f10 <memcpy+0xc>
 8007f0e:	4770      	bx	lr
 8007f10:	b510      	push	{r4, lr}
 8007f12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f1a:	4291      	cmp	r1, r2
 8007f1c:	d1f9      	bne.n	8007f12 <memcpy+0xe>
 8007f1e:	bd10      	pop	{r4, pc}

08007f20 <memset>:
 8007f20:	4402      	add	r2, r0
 8007f22:	4603      	mov	r3, r0
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d100      	bne.n	8007f2a <memset+0xa>
 8007f28:	4770      	bx	lr
 8007f2a:	f803 1b01 	strb.w	r1, [r3], #1
 8007f2e:	e7f9      	b.n	8007f24 <memset+0x4>

08007f30 <_calloc_r>:
 8007f30:	b513      	push	{r0, r1, r4, lr}
 8007f32:	434a      	muls	r2, r1
 8007f34:	4611      	mov	r1, r2
 8007f36:	9201      	str	r2, [sp, #4]
 8007f38:	f000 f85a 	bl	8007ff0 <_malloc_r>
 8007f3c:	4604      	mov	r4, r0
 8007f3e:	b118      	cbz	r0, 8007f48 <_calloc_r+0x18>
 8007f40:	9a01      	ldr	r2, [sp, #4]
 8007f42:	2100      	movs	r1, #0
 8007f44:	f7ff ffec 	bl	8007f20 <memset>
 8007f48:	4620      	mov	r0, r4
 8007f4a:	b002      	add	sp, #8
 8007f4c:	bd10      	pop	{r4, pc}
	...

08007f50 <_free_r>:
 8007f50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f52:	2900      	cmp	r1, #0
 8007f54:	d048      	beq.n	8007fe8 <_free_r+0x98>
 8007f56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f5a:	9001      	str	r0, [sp, #4]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	f1a1 0404 	sub.w	r4, r1, #4
 8007f62:	bfb8      	it	lt
 8007f64:	18e4      	addlt	r4, r4, r3
 8007f66:	f003 fc3b 	bl	800b7e0 <__malloc_lock>
 8007f6a:	4a20      	ldr	r2, [pc, #128]	; (8007fec <_free_r+0x9c>)
 8007f6c:	9801      	ldr	r0, [sp, #4]
 8007f6e:	6813      	ldr	r3, [r2, #0]
 8007f70:	4615      	mov	r5, r2
 8007f72:	b933      	cbnz	r3, 8007f82 <_free_r+0x32>
 8007f74:	6063      	str	r3, [r4, #4]
 8007f76:	6014      	str	r4, [r2, #0]
 8007f78:	b003      	add	sp, #12
 8007f7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f7e:	f003 bc35 	b.w	800b7ec <__malloc_unlock>
 8007f82:	42a3      	cmp	r3, r4
 8007f84:	d90b      	bls.n	8007f9e <_free_r+0x4e>
 8007f86:	6821      	ldr	r1, [r4, #0]
 8007f88:	1862      	adds	r2, r4, r1
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	bf04      	itt	eq
 8007f8e:	681a      	ldreq	r2, [r3, #0]
 8007f90:	685b      	ldreq	r3, [r3, #4]
 8007f92:	6063      	str	r3, [r4, #4]
 8007f94:	bf04      	itt	eq
 8007f96:	1852      	addeq	r2, r2, r1
 8007f98:	6022      	streq	r2, [r4, #0]
 8007f9a:	602c      	str	r4, [r5, #0]
 8007f9c:	e7ec      	b.n	8007f78 <_free_r+0x28>
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	b10b      	cbz	r3, 8007fa8 <_free_r+0x58>
 8007fa4:	42a3      	cmp	r3, r4
 8007fa6:	d9fa      	bls.n	8007f9e <_free_r+0x4e>
 8007fa8:	6811      	ldr	r1, [r2, #0]
 8007faa:	1855      	adds	r5, r2, r1
 8007fac:	42a5      	cmp	r5, r4
 8007fae:	d10b      	bne.n	8007fc8 <_free_r+0x78>
 8007fb0:	6824      	ldr	r4, [r4, #0]
 8007fb2:	4421      	add	r1, r4
 8007fb4:	1854      	adds	r4, r2, r1
 8007fb6:	42a3      	cmp	r3, r4
 8007fb8:	6011      	str	r1, [r2, #0]
 8007fba:	d1dd      	bne.n	8007f78 <_free_r+0x28>
 8007fbc:	681c      	ldr	r4, [r3, #0]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	6053      	str	r3, [r2, #4]
 8007fc2:	4421      	add	r1, r4
 8007fc4:	6011      	str	r1, [r2, #0]
 8007fc6:	e7d7      	b.n	8007f78 <_free_r+0x28>
 8007fc8:	d902      	bls.n	8007fd0 <_free_r+0x80>
 8007fca:	230c      	movs	r3, #12
 8007fcc:	6003      	str	r3, [r0, #0]
 8007fce:	e7d3      	b.n	8007f78 <_free_r+0x28>
 8007fd0:	6825      	ldr	r5, [r4, #0]
 8007fd2:	1961      	adds	r1, r4, r5
 8007fd4:	428b      	cmp	r3, r1
 8007fd6:	bf04      	itt	eq
 8007fd8:	6819      	ldreq	r1, [r3, #0]
 8007fda:	685b      	ldreq	r3, [r3, #4]
 8007fdc:	6063      	str	r3, [r4, #4]
 8007fde:	bf04      	itt	eq
 8007fe0:	1949      	addeq	r1, r1, r5
 8007fe2:	6021      	streq	r1, [r4, #0]
 8007fe4:	6054      	str	r4, [r2, #4]
 8007fe6:	e7c7      	b.n	8007f78 <_free_r+0x28>
 8007fe8:	b003      	add	sp, #12
 8007fea:	bd30      	pop	{r4, r5, pc}
 8007fec:	20000894 	.word	0x20000894

08007ff0 <_malloc_r>:
 8007ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff2:	1ccd      	adds	r5, r1, #3
 8007ff4:	f025 0503 	bic.w	r5, r5, #3
 8007ff8:	3508      	adds	r5, #8
 8007ffa:	2d0c      	cmp	r5, #12
 8007ffc:	bf38      	it	cc
 8007ffe:	250c      	movcc	r5, #12
 8008000:	2d00      	cmp	r5, #0
 8008002:	4606      	mov	r6, r0
 8008004:	db01      	blt.n	800800a <_malloc_r+0x1a>
 8008006:	42a9      	cmp	r1, r5
 8008008:	d903      	bls.n	8008012 <_malloc_r+0x22>
 800800a:	230c      	movs	r3, #12
 800800c:	6033      	str	r3, [r6, #0]
 800800e:	2000      	movs	r0, #0
 8008010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008012:	f003 fbe5 	bl	800b7e0 <__malloc_lock>
 8008016:	4921      	ldr	r1, [pc, #132]	; (800809c <_malloc_r+0xac>)
 8008018:	680a      	ldr	r2, [r1, #0]
 800801a:	4614      	mov	r4, r2
 800801c:	b99c      	cbnz	r4, 8008046 <_malloc_r+0x56>
 800801e:	4f20      	ldr	r7, [pc, #128]	; (80080a0 <_malloc_r+0xb0>)
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	b923      	cbnz	r3, 800802e <_malloc_r+0x3e>
 8008024:	4621      	mov	r1, r4
 8008026:	4630      	mov	r0, r6
 8008028:	f000 ff44 	bl	8008eb4 <_sbrk_r>
 800802c:	6038      	str	r0, [r7, #0]
 800802e:	4629      	mov	r1, r5
 8008030:	4630      	mov	r0, r6
 8008032:	f000 ff3f 	bl	8008eb4 <_sbrk_r>
 8008036:	1c43      	adds	r3, r0, #1
 8008038:	d123      	bne.n	8008082 <_malloc_r+0x92>
 800803a:	230c      	movs	r3, #12
 800803c:	6033      	str	r3, [r6, #0]
 800803e:	4630      	mov	r0, r6
 8008040:	f003 fbd4 	bl	800b7ec <__malloc_unlock>
 8008044:	e7e3      	b.n	800800e <_malloc_r+0x1e>
 8008046:	6823      	ldr	r3, [r4, #0]
 8008048:	1b5b      	subs	r3, r3, r5
 800804a:	d417      	bmi.n	800807c <_malloc_r+0x8c>
 800804c:	2b0b      	cmp	r3, #11
 800804e:	d903      	bls.n	8008058 <_malloc_r+0x68>
 8008050:	6023      	str	r3, [r4, #0]
 8008052:	441c      	add	r4, r3
 8008054:	6025      	str	r5, [r4, #0]
 8008056:	e004      	b.n	8008062 <_malloc_r+0x72>
 8008058:	6863      	ldr	r3, [r4, #4]
 800805a:	42a2      	cmp	r2, r4
 800805c:	bf0c      	ite	eq
 800805e:	600b      	streq	r3, [r1, #0]
 8008060:	6053      	strne	r3, [r2, #4]
 8008062:	4630      	mov	r0, r6
 8008064:	f003 fbc2 	bl	800b7ec <__malloc_unlock>
 8008068:	f104 000b 	add.w	r0, r4, #11
 800806c:	1d23      	adds	r3, r4, #4
 800806e:	f020 0007 	bic.w	r0, r0, #7
 8008072:	1ac2      	subs	r2, r0, r3
 8008074:	d0cc      	beq.n	8008010 <_malloc_r+0x20>
 8008076:	1a1b      	subs	r3, r3, r0
 8008078:	50a3      	str	r3, [r4, r2]
 800807a:	e7c9      	b.n	8008010 <_malloc_r+0x20>
 800807c:	4622      	mov	r2, r4
 800807e:	6864      	ldr	r4, [r4, #4]
 8008080:	e7cc      	b.n	800801c <_malloc_r+0x2c>
 8008082:	1cc4      	adds	r4, r0, #3
 8008084:	f024 0403 	bic.w	r4, r4, #3
 8008088:	42a0      	cmp	r0, r4
 800808a:	d0e3      	beq.n	8008054 <_malloc_r+0x64>
 800808c:	1a21      	subs	r1, r4, r0
 800808e:	4630      	mov	r0, r6
 8008090:	f000 ff10 	bl	8008eb4 <_sbrk_r>
 8008094:	3001      	adds	r0, #1
 8008096:	d1dd      	bne.n	8008054 <_malloc_r+0x64>
 8008098:	e7cf      	b.n	800803a <_malloc_r+0x4a>
 800809a:	bf00      	nop
 800809c:	20000894 	.word	0x20000894
 80080a0:	20000898 	.word	0x20000898

080080a4 <__cvt>:
 80080a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080a8:	ec55 4b10 	vmov	r4, r5, d0
 80080ac:	2d00      	cmp	r5, #0
 80080ae:	460e      	mov	r6, r1
 80080b0:	4619      	mov	r1, r3
 80080b2:	462b      	mov	r3, r5
 80080b4:	bfbb      	ittet	lt
 80080b6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80080ba:	461d      	movlt	r5, r3
 80080bc:	2300      	movge	r3, #0
 80080be:	232d      	movlt	r3, #45	; 0x2d
 80080c0:	700b      	strb	r3, [r1, #0]
 80080c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080c4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80080c8:	4691      	mov	r9, r2
 80080ca:	f023 0820 	bic.w	r8, r3, #32
 80080ce:	bfbc      	itt	lt
 80080d0:	4622      	movlt	r2, r4
 80080d2:	4614      	movlt	r4, r2
 80080d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80080d8:	d005      	beq.n	80080e6 <__cvt+0x42>
 80080da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80080de:	d100      	bne.n	80080e2 <__cvt+0x3e>
 80080e0:	3601      	adds	r6, #1
 80080e2:	2102      	movs	r1, #2
 80080e4:	e000      	b.n	80080e8 <__cvt+0x44>
 80080e6:	2103      	movs	r1, #3
 80080e8:	ab03      	add	r3, sp, #12
 80080ea:	9301      	str	r3, [sp, #4]
 80080ec:	ab02      	add	r3, sp, #8
 80080ee:	9300      	str	r3, [sp, #0]
 80080f0:	ec45 4b10 	vmov	d0, r4, r5
 80080f4:	4653      	mov	r3, sl
 80080f6:	4632      	mov	r2, r6
 80080f8:	f001 ffe2 	bl	800a0c0 <_dtoa_r>
 80080fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008100:	4607      	mov	r7, r0
 8008102:	d102      	bne.n	800810a <__cvt+0x66>
 8008104:	f019 0f01 	tst.w	r9, #1
 8008108:	d022      	beq.n	8008150 <__cvt+0xac>
 800810a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800810e:	eb07 0906 	add.w	r9, r7, r6
 8008112:	d110      	bne.n	8008136 <__cvt+0x92>
 8008114:	783b      	ldrb	r3, [r7, #0]
 8008116:	2b30      	cmp	r3, #48	; 0x30
 8008118:	d10a      	bne.n	8008130 <__cvt+0x8c>
 800811a:	2200      	movs	r2, #0
 800811c:	2300      	movs	r3, #0
 800811e:	4620      	mov	r0, r4
 8008120:	4629      	mov	r1, r5
 8008122:	f7f8 fcd1 	bl	8000ac8 <__aeabi_dcmpeq>
 8008126:	b918      	cbnz	r0, 8008130 <__cvt+0x8c>
 8008128:	f1c6 0601 	rsb	r6, r6, #1
 800812c:	f8ca 6000 	str.w	r6, [sl]
 8008130:	f8da 3000 	ldr.w	r3, [sl]
 8008134:	4499      	add	r9, r3
 8008136:	2200      	movs	r2, #0
 8008138:	2300      	movs	r3, #0
 800813a:	4620      	mov	r0, r4
 800813c:	4629      	mov	r1, r5
 800813e:	f7f8 fcc3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008142:	b108      	cbz	r0, 8008148 <__cvt+0xa4>
 8008144:	f8cd 900c 	str.w	r9, [sp, #12]
 8008148:	2230      	movs	r2, #48	; 0x30
 800814a:	9b03      	ldr	r3, [sp, #12]
 800814c:	454b      	cmp	r3, r9
 800814e:	d307      	bcc.n	8008160 <__cvt+0xbc>
 8008150:	9b03      	ldr	r3, [sp, #12]
 8008152:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008154:	1bdb      	subs	r3, r3, r7
 8008156:	4638      	mov	r0, r7
 8008158:	6013      	str	r3, [r2, #0]
 800815a:	b004      	add	sp, #16
 800815c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008160:	1c59      	adds	r1, r3, #1
 8008162:	9103      	str	r1, [sp, #12]
 8008164:	701a      	strb	r2, [r3, #0]
 8008166:	e7f0      	b.n	800814a <__cvt+0xa6>

08008168 <__exponent>:
 8008168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800816a:	4603      	mov	r3, r0
 800816c:	2900      	cmp	r1, #0
 800816e:	bfb8      	it	lt
 8008170:	4249      	neglt	r1, r1
 8008172:	f803 2b02 	strb.w	r2, [r3], #2
 8008176:	bfb4      	ite	lt
 8008178:	222d      	movlt	r2, #45	; 0x2d
 800817a:	222b      	movge	r2, #43	; 0x2b
 800817c:	2909      	cmp	r1, #9
 800817e:	7042      	strb	r2, [r0, #1]
 8008180:	dd2a      	ble.n	80081d8 <__exponent+0x70>
 8008182:	f10d 0407 	add.w	r4, sp, #7
 8008186:	46a4      	mov	ip, r4
 8008188:	270a      	movs	r7, #10
 800818a:	46a6      	mov	lr, r4
 800818c:	460a      	mov	r2, r1
 800818e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008192:	fb07 1516 	mls	r5, r7, r6, r1
 8008196:	3530      	adds	r5, #48	; 0x30
 8008198:	2a63      	cmp	r2, #99	; 0x63
 800819a:	f104 34ff 	add.w	r4, r4, #4294967295
 800819e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80081a2:	4631      	mov	r1, r6
 80081a4:	dcf1      	bgt.n	800818a <__exponent+0x22>
 80081a6:	3130      	adds	r1, #48	; 0x30
 80081a8:	f1ae 0502 	sub.w	r5, lr, #2
 80081ac:	f804 1c01 	strb.w	r1, [r4, #-1]
 80081b0:	1c44      	adds	r4, r0, #1
 80081b2:	4629      	mov	r1, r5
 80081b4:	4561      	cmp	r1, ip
 80081b6:	d30a      	bcc.n	80081ce <__exponent+0x66>
 80081b8:	f10d 0209 	add.w	r2, sp, #9
 80081bc:	eba2 020e 	sub.w	r2, r2, lr
 80081c0:	4565      	cmp	r5, ip
 80081c2:	bf88      	it	hi
 80081c4:	2200      	movhi	r2, #0
 80081c6:	4413      	add	r3, r2
 80081c8:	1a18      	subs	r0, r3, r0
 80081ca:	b003      	add	sp, #12
 80081cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081d2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80081d6:	e7ed      	b.n	80081b4 <__exponent+0x4c>
 80081d8:	2330      	movs	r3, #48	; 0x30
 80081da:	3130      	adds	r1, #48	; 0x30
 80081dc:	7083      	strb	r3, [r0, #2]
 80081de:	70c1      	strb	r1, [r0, #3]
 80081e0:	1d03      	adds	r3, r0, #4
 80081e2:	e7f1      	b.n	80081c8 <__exponent+0x60>

080081e4 <_printf_float>:
 80081e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e8:	ed2d 8b02 	vpush	{d8}
 80081ec:	b08d      	sub	sp, #52	; 0x34
 80081ee:	460c      	mov	r4, r1
 80081f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80081f4:	4616      	mov	r6, r2
 80081f6:	461f      	mov	r7, r3
 80081f8:	4605      	mov	r5, r0
 80081fa:	f003 fa73 	bl	800b6e4 <_localeconv_r>
 80081fe:	f8d0 a000 	ldr.w	sl, [r0]
 8008202:	4650      	mov	r0, sl
 8008204:	f7f7 ffe4 	bl	80001d0 <strlen>
 8008208:	2300      	movs	r3, #0
 800820a:	930a      	str	r3, [sp, #40]	; 0x28
 800820c:	6823      	ldr	r3, [r4, #0]
 800820e:	9305      	str	r3, [sp, #20]
 8008210:	f8d8 3000 	ldr.w	r3, [r8]
 8008214:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008218:	3307      	adds	r3, #7
 800821a:	f023 0307 	bic.w	r3, r3, #7
 800821e:	f103 0208 	add.w	r2, r3, #8
 8008222:	f8c8 2000 	str.w	r2, [r8]
 8008226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800822e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008232:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008236:	9307      	str	r3, [sp, #28]
 8008238:	f8cd 8018 	str.w	r8, [sp, #24]
 800823c:	ee08 0a10 	vmov	s16, r0
 8008240:	4b9f      	ldr	r3, [pc, #636]	; (80084c0 <_printf_float+0x2dc>)
 8008242:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008246:	f04f 32ff 	mov.w	r2, #4294967295
 800824a:	f7f8 fc6f 	bl	8000b2c <__aeabi_dcmpun>
 800824e:	bb88      	cbnz	r0, 80082b4 <_printf_float+0xd0>
 8008250:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008254:	4b9a      	ldr	r3, [pc, #616]	; (80084c0 <_printf_float+0x2dc>)
 8008256:	f04f 32ff 	mov.w	r2, #4294967295
 800825a:	f7f8 fc49 	bl	8000af0 <__aeabi_dcmple>
 800825e:	bb48      	cbnz	r0, 80082b4 <_printf_float+0xd0>
 8008260:	2200      	movs	r2, #0
 8008262:	2300      	movs	r3, #0
 8008264:	4640      	mov	r0, r8
 8008266:	4649      	mov	r1, r9
 8008268:	f7f8 fc38 	bl	8000adc <__aeabi_dcmplt>
 800826c:	b110      	cbz	r0, 8008274 <_printf_float+0x90>
 800826e:	232d      	movs	r3, #45	; 0x2d
 8008270:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008274:	4b93      	ldr	r3, [pc, #588]	; (80084c4 <_printf_float+0x2e0>)
 8008276:	4894      	ldr	r0, [pc, #592]	; (80084c8 <_printf_float+0x2e4>)
 8008278:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800827c:	bf94      	ite	ls
 800827e:	4698      	movls	r8, r3
 8008280:	4680      	movhi	r8, r0
 8008282:	2303      	movs	r3, #3
 8008284:	6123      	str	r3, [r4, #16]
 8008286:	9b05      	ldr	r3, [sp, #20]
 8008288:	f023 0204 	bic.w	r2, r3, #4
 800828c:	6022      	str	r2, [r4, #0]
 800828e:	f04f 0900 	mov.w	r9, #0
 8008292:	9700      	str	r7, [sp, #0]
 8008294:	4633      	mov	r3, r6
 8008296:	aa0b      	add	r2, sp, #44	; 0x2c
 8008298:	4621      	mov	r1, r4
 800829a:	4628      	mov	r0, r5
 800829c:	f000 f9d8 	bl	8008650 <_printf_common>
 80082a0:	3001      	adds	r0, #1
 80082a2:	f040 8090 	bne.w	80083c6 <_printf_float+0x1e2>
 80082a6:	f04f 30ff 	mov.w	r0, #4294967295
 80082aa:	b00d      	add	sp, #52	; 0x34
 80082ac:	ecbd 8b02 	vpop	{d8}
 80082b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082b4:	4642      	mov	r2, r8
 80082b6:	464b      	mov	r3, r9
 80082b8:	4640      	mov	r0, r8
 80082ba:	4649      	mov	r1, r9
 80082bc:	f7f8 fc36 	bl	8000b2c <__aeabi_dcmpun>
 80082c0:	b140      	cbz	r0, 80082d4 <_printf_float+0xf0>
 80082c2:	464b      	mov	r3, r9
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	bfbc      	itt	lt
 80082c8:	232d      	movlt	r3, #45	; 0x2d
 80082ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80082ce:	487f      	ldr	r0, [pc, #508]	; (80084cc <_printf_float+0x2e8>)
 80082d0:	4b7f      	ldr	r3, [pc, #508]	; (80084d0 <_printf_float+0x2ec>)
 80082d2:	e7d1      	b.n	8008278 <_printf_float+0x94>
 80082d4:	6863      	ldr	r3, [r4, #4]
 80082d6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80082da:	9206      	str	r2, [sp, #24]
 80082dc:	1c5a      	adds	r2, r3, #1
 80082de:	d13f      	bne.n	8008360 <_printf_float+0x17c>
 80082e0:	2306      	movs	r3, #6
 80082e2:	6063      	str	r3, [r4, #4]
 80082e4:	9b05      	ldr	r3, [sp, #20]
 80082e6:	6861      	ldr	r1, [r4, #4]
 80082e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80082ec:	2300      	movs	r3, #0
 80082ee:	9303      	str	r3, [sp, #12]
 80082f0:	ab0a      	add	r3, sp, #40	; 0x28
 80082f2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80082f6:	ab09      	add	r3, sp, #36	; 0x24
 80082f8:	ec49 8b10 	vmov	d0, r8, r9
 80082fc:	9300      	str	r3, [sp, #0]
 80082fe:	6022      	str	r2, [r4, #0]
 8008300:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008304:	4628      	mov	r0, r5
 8008306:	f7ff fecd 	bl	80080a4 <__cvt>
 800830a:	9b06      	ldr	r3, [sp, #24]
 800830c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800830e:	2b47      	cmp	r3, #71	; 0x47
 8008310:	4680      	mov	r8, r0
 8008312:	d108      	bne.n	8008326 <_printf_float+0x142>
 8008314:	1cc8      	adds	r0, r1, #3
 8008316:	db02      	blt.n	800831e <_printf_float+0x13a>
 8008318:	6863      	ldr	r3, [r4, #4]
 800831a:	4299      	cmp	r1, r3
 800831c:	dd41      	ble.n	80083a2 <_printf_float+0x1be>
 800831e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008322:	fa5f fb8b 	uxtb.w	fp, fp
 8008326:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800832a:	d820      	bhi.n	800836e <_printf_float+0x18a>
 800832c:	3901      	subs	r1, #1
 800832e:	465a      	mov	r2, fp
 8008330:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008334:	9109      	str	r1, [sp, #36]	; 0x24
 8008336:	f7ff ff17 	bl	8008168 <__exponent>
 800833a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800833c:	1813      	adds	r3, r2, r0
 800833e:	2a01      	cmp	r2, #1
 8008340:	4681      	mov	r9, r0
 8008342:	6123      	str	r3, [r4, #16]
 8008344:	dc02      	bgt.n	800834c <_printf_float+0x168>
 8008346:	6822      	ldr	r2, [r4, #0]
 8008348:	07d2      	lsls	r2, r2, #31
 800834a:	d501      	bpl.n	8008350 <_printf_float+0x16c>
 800834c:	3301      	adds	r3, #1
 800834e:	6123      	str	r3, [r4, #16]
 8008350:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008354:	2b00      	cmp	r3, #0
 8008356:	d09c      	beq.n	8008292 <_printf_float+0xae>
 8008358:	232d      	movs	r3, #45	; 0x2d
 800835a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800835e:	e798      	b.n	8008292 <_printf_float+0xae>
 8008360:	9a06      	ldr	r2, [sp, #24]
 8008362:	2a47      	cmp	r2, #71	; 0x47
 8008364:	d1be      	bne.n	80082e4 <_printf_float+0x100>
 8008366:	2b00      	cmp	r3, #0
 8008368:	d1bc      	bne.n	80082e4 <_printf_float+0x100>
 800836a:	2301      	movs	r3, #1
 800836c:	e7b9      	b.n	80082e2 <_printf_float+0xfe>
 800836e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008372:	d118      	bne.n	80083a6 <_printf_float+0x1c2>
 8008374:	2900      	cmp	r1, #0
 8008376:	6863      	ldr	r3, [r4, #4]
 8008378:	dd0b      	ble.n	8008392 <_printf_float+0x1ae>
 800837a:	6121      	str	r1, [r4, #16]
 800837c:	b913      	cbnz	r3, 8008384 <_printf_float+0x1a0>
 800837e:	6822      	ldr	r2, [r4, #0]
 8008380:	07d0      	lsls	r0, r2, #31
 8008382:	d502      	bpl.n	800838a <_printf_float+0x1a6>
 8008384:	3301      	adds	r3, #1
 8008386:	440b      	add	r3, r1
 8008388:	6123      	str	r3, [r4, #16]
 800838a:	65a1      	str	r1, [r4, #88]	; 0x58
 800838c:	f04f 0900 	mov.w	r9, #0
 8008390:	e7de      	b.n	8008350 <_printf_float+0x16c>
 8008392:	b913      	cbnz	r3, 800839a <_printf_float+0x1b6>
 8008394:	6822      	ldr	r2, [r4, #0]
 8008396:	07d2      	lsls	r2, r2, #31
 8008398:	d501      	bpl.n	800839e <_printf_float+0x1ba>
 800839a:	3302      	adds	r3, #2
 800839c:	e7f4      	b.n	8008388 <_printf_float+0x1a4>
 800839e:	2301      	movs	r3, #1
 80083a0:	e7f2      	b.n	8008388 <_printf_float+0x1a4>
 80083a2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80083a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083a8:	4299      	cmp	r1, r3
 80083aa:	db05      	blt.n	80083b8 <_printf_float+0x1d4>
 80083ac:	6823      	ldr	r3, [r4, #0]
 80083ae:	6121      	str	r1, [r4, #16]
 80083b0:	07d8      	lsls	r0, r3, #31
 80083b2:	d5ea      	bpl.n	800838a <_printf_float+0x1a6>
 80083b4:	1c4b      	adds	r3, r1, #1
 80083b6:	e7e7      	b.n	8008388 <_printf_float+0x1a4>
 80083b8:	2900      	cmp	r1, #0
 80083ba:	bfd4      	ite	le
 80083bc:	f1c1 0202 	rsble	r2, r1, #2
 80083c0:	2201      	movgt	r2, #1
 80083c2:	4413      	add	r3, r2
 80083c4:	e7e0      	b.n	8008388 <_printf_float+0x1a4>
 80083c6:	6823      	ldr	r3, [r4, #0]
 80083c8:	055a      	lsls	r2, r3, #21
 80083ca:	d407      	bmi.n	80083dc <_printf_float+0x1f8>
 80083cc:	6923      	ldr	r3, [r4, #16]
 80083ce:	4642      	mov	r2, r8
 80083d0:	4631      	mov	r1, r6
 80083d2:	4628      	mov	r0, r5
 80083d4:	47b8      	blx	r7
 80083d6:	3001      	adds	r0, #1
 80083d8:	d12c      	bne.n	8008434 <_printf_float+0x250>
 80083da:	e764      	b.n	80082a6 <_printf_float+0xc2>
 80083dc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80083e0:	f240 80e0 	bls.w	80085a4 <_printf_float+0x3c0>
 80083e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80083e8:	2200      	movs	r2, #0
 80083ea:	2300      	movs	r3, #0
 80083ec:	f7f8 fb6c 	bl	8000ac8 <__aeabi_dcmpeq>
 80083f0:	2800      	cmp	r0, #0
 80083f2:	d034      	beq.n	800845e <_printf_float+0x27a>
 80083f4:	4a37      	ldr	r2, [pc, #220]	; (80084d4 <_printf_float+0x2f0>)
 80083f6:	2301      	movs	r3, #1
 80083f8:	4631      	mov	r1, r6
 80083fa:	4628      	mov	r0, r5
 80083fc:	47b8      	blx	r7
 80083fe:	3001      	adds	r0, #1
 8008400:	f43f af51 	beq.w	80082a6 <_printf_float+0xc2>
 8008404:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008408:	429a      	cmp	r2, r3
 800840a:	db02      	blt.n	8008412 <_printf_float+0x22e>
 800840c:	6823      	ldr	r3, [r4, #0]
 800840e:	07d8      	lsls	r0, r3, #31
 8008410:	d510      	bpl.n	8008434 <_printf_float+0x250>
 8008412:	ee18 3a10 	vmov	r3, s16
 8008416:	4652      	mov	r2, sl
 8008418:	4631      	mov	r1, r6
 800841a:	4628      	mov	r0, r5
 800841c:	47b8      	blx	r7
 800841e:	3001      	adds	r0, #1
 8008420:	f43f af41 	beq.w	80082a6 <_printf_float+0xc2>
 8008424:	f04f 0800 	mov.w	r8, #0
 8008428:	f104 091a 	add.w	r9, r4, #26
 800842c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800842e:	3b01      	subs	r3, #1
 8008430:	4543      	cmp	r3, r8
 8008432:	dc09      	bgt.n	8008448 <_printf_float+0x264>
 8008434:	6823      	ldr	r3, [r4, #0]
 8008436:	079b      	lsls	r3, r3, #30
 8008438:	f100 8105 	bmi.w	8008646 <_printf_float+0x462>
 800843c:	68e0      	ldr	r0, [r4, #12]
 800843e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008440:	4298      	cmp	r0, r3
 8008442:	bfb8      	it	lt
 8008444:	4618      	movlt	r0, r3
 8008446:	e730      	b.n	80082aa <_printf_float+0xc6>
 8008448:	2301      	movs	r3, #1
 800844a:	464a      	mov	r2, r9
 800844c:	4631      	mov	r1, r6
 800844e:	4628      	mov	r0, r5
 8008450:	47b8      	blx	r7
 8008452:	3001      	adds	r0, #1
 8008454:	f43f af27 	beq.w	80082a6 <_printf_float+0xc2>
 8008458:	f108 0801 	add.w	r8, r8, #1
 800845c:	e7e6      	b.n	800842c <_printf_float+0x248>
 800845e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008460:	2b00      	cmp	r3, #0
 8008462:	dc39      	bgt.n	80084d8 <_printf_float+0x2f4>
 8008464:	4a1b      	ldr	r2, [pc, #108]	; (80084d4 <_printf_float+0x2f0>)
 8008466:	2301      	movs	r3, #1
 8008468:	4631      	mov	r1, r6
 800846a:	4628      	mov	r0, r5
 800846c:	47b8      	blx	r7
 800846e:	3001      	adds	r0, #1
 8008470:	f43f af19 	beq.w	80082a6 <_printf_float+0xc2>
 8008474:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008478:	4313      	orrs	r3, r2
 800847a:	d102      	bne.n	8008482 <_printf_float+0x29e>
 800847c:	6823      	ldr	r3, [r4, #0]
 800847e:	07d9      	lsls	r1, r3, #31
 8008480:	d5d8      	bpl.n	8008434 <_printf_float+0x250>
 8008482:	ee18 3a10 	vmov	r3, s16
 8008486:	4652      	mov	r2, sl
 8008488:	4631      	mov	r1, r6
 800848a:	4628      	mov	r0, r5
 800848c:	47b8      	blx	r7
 800848e:	3001      	adds	r0, #1
 8008490:	f43f af09 	beq.w	80082a6 <_printf_float+0xc2>
 8008494:	f04f 0900 	mov.w	r9, #0
 8008498:	f104 0a1a 	add.w	sl, r4, #26
 800849c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800849e:	425b      	negs	r3, r3
 80084a0:	454b      	cmp	r3, r9
 80084a2:	dc01      	bgt.n	80084a8 <_printf_float+0x2c4>
 80084a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084a6:	e792      	b.n	80083ce <_printf_float+0x1ea>
 80084a8:	2301      	movs	r3, #1
 80084aa:	4652      	mov	r2, sl
 80084ac:	4631      	mov	r1, r6
 80084ae:	4628      	mov	r0, r5
 80084b0:	47b8      	blx	r7
 80084b2:	3001      	adds	r0, #1
 80084b4:	f43f aef7 	beq.w	80082a6 <_printf_float+0xc2>
 80084b8:	f109 0901 	add.w	r9, r9, #1
 80084bc:	e7ee      	b.n	800849c <_printf_float+0x2b8>
 80084be:	bf00      	nop
 80084c0:	7fefffff 	.word	0x7fefffff
 80084c4:	0800f1f0 	.word	0x0800f1f0
 80084c8:	0800f1f4 	.word	0x0800f1f4
 80084cc:	0800f1fc 	.word	0x0800f1fc
 80084d0:	0800f1f8 	.word	0x0800f1f8
 80084d4:	0800f200 	.word	0x0800f200
 80084d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084dc:	429a      	cmp	r2, r3
 80084de:	bfa8      	it	ge
 80084e0:	461a      	movge	r2, r3
 80084e2:	2a00      	cmp	r2, #0
 80084e4:	4691      	mov	r9, r2
 80084e6:	dc37      	bgt.n	8008558 <_printf_float+0x374>
 80084e8:	f04f 0b00 	mov.w	fp, #0
 80084ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80084f0:	f104 021a 	add.w	r2, r4, #26
 80084f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084f6:	9305      	str	r3, [sp, #20]
 80084f8:	eba3 0309 	sub.w	r3, r3, r9
 80084fc:	455b      	cmp	r3, fp
 80084fe:	dc33      	bgt.n	8008568 <_printf_float+0x384>
 8008500:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008504:	429a      	cmp	r2, r3
 8008506:	db3b      	blt.n	8008580 <_printf_float+0x39c>
 8008508:	6823      	ldr	r3, [r4, #0]
 800850a:	07da      	lsls	r2, r3, #31
 800850c:	d438      	bmi.n	8008580 <_printf_float+0x39c>
 800850e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008510:	9b05      	ldr	r3, [sp, #20]
 8008512:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008514:	1ad3      	subs	r3, r2, r3
 8008516:	eba2 0901 	sub.w	r9, r2, r1
 800851a:	4599      	cmp	r9, r3
 800851c:	bfa8      	it	ge
 800851e:	4699      	movge	r9, r3
 8008520:	f1b9 0f00 	cmp.w	r9, #0
 8008524:	dc35      	bgt.n	8008592 <_printf_float+0x3ae>
 8008526:	f04f 0800 	mov.w	r8, #0
 800852a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800852e:	f104 0a1a 	add.w	sl, r4, #26
 8008532:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008536:	1a9b      	subs	r3, r3, r2
 8008538:	eba3 0309 	sub.w	r3, r3, r9
 800853c:	4543      	cmp	r3, r8
 800853e:	f77f af79 	ble.w	8008434 <_printf_float+0x250>
 8008542:	2301      	movs	r3, #1
 8008544:	4652      	mov	r2, sl
 8008546:	4631      	mov	r1, r6
 8008548:	4628      	mov	r0, r5
 800854a:	47b8      	blx	r7
 800854c:	3001      	adds	r0, #1
 800854e:	f43f aeaa 	beq.w	80082a6 <_printf_float+0xc2>
 8008552:	f108 0801 	add.w	r8, r8, #1
 8008556:	e7ec      	b.n	8008532 <_printf_float+0x34e>
 8008558:	4613      	mov	r3, r2
 800855a:	4631      	mov	r1, r6
 800855c:	4642      	mov	r2, r8
 800855e:	4628      	mov	r0, r5
 8008560:	47b8      	blx	r7
 8008562:	3001      	adds	r0, #1
 8008564:	d1c0      	bne.n	80084e8 <_printf_float+0x304>
 8008566:	e69e      	b.n	80082a6 <_printf_float+0xc2>
 8008568:	2301      	movs	r3, #1
 800856a:	4631      	mov	r1, r6
 800856c:	4628      	mov	r0, r5
 800856e:	9205      	str	r2, [sp, #20]
 8008570:	47b8      	blx	r7
 8008572:	3001      	adds	r0, #1
 8008574:	f43f ae97 	beq.w	80082a6 <_printf_float+0xc2>
 8008578:	9a05      	ldr	r2, [sp, #20]
 800857a:	f10b 0b01 	add.w	fp, fp, #1
 800857e:	e7b9      	b.n	80084f4 <_printf_float+0x310>
 8008580:	ee18 3a10 	vmov	r3, s16
 8008584:	4652      	mov	r2, sl
 8008586:	4631      	mov	r1, r6
 8008588:	4628      	mov	r0, r5
 800858a:	47b8      	blx	r7
 800858c:	3001      	adds	r0, #1
 800858e:	d1be      	bne.n	800850e <_printf_float+0x32a>
 8008590:	e689      	b.n	80082a6 <_printf_float+0xc2>
 8008592:	9a05      	ldr	r2, [sp, #20]
 8008594:	464b      	mov	r3, r9
 8008596:	4442      	add	r2, r8
 8008598:	4631      	mov	r1, r6
 800859a:	4628      	mov	r0, r5
 800859c:	47b8      	blx	r7
 800859e:	3001      	adds	r0, #1
 80085a0:	d1c1      	bne.n	8008526 <_printf_float+0x342>
 80085a2:	e680      	b.n	80082a6 <_printf_float+0xc2>
 80085a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085a6:	2a01      	cmp	r2, #1
 80085a8:	dc01      	bgt.n	80085ae <_printf_float+0x3ca>
 80085aa:	07db      	lsls	r3, r3, #31
 80085ac:	d538      	bpl.n	8008620 <_printf_float+0x43c>
 80085ae:	2301      	movs	r3, #1
 80085b0:	4642      	mov	r2, r8
 80085b2:	4631      	mov	r1, r6
 80085b4:	4628      	mov	r0, r5
 80085b6:	47b8      	blx	r7
 80085b8:	3001      	adds	r0, #1
 80085ba:	f43f ae74 	beq.w	80082a6 <_printf_float+0xc2>
 80085be:	ee18 3a10 	vmov	r3, s16
 80085c2:	4652      	mov	r2, sl
 80085c4:	4631      	mov	r1, r6
 80085c6:	4628      	mov	r0, r5
 80085c8:	47b8      	blx	r7
 80085ca:	3001      	adds	r0, #1
 80085cc:	f43f ae6b 	beq.w	80082a6 <_printf_float+0xc2>
 80085d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80085d4:	2200      	movs	r2, #0
 80085d6:	2300      	movs	r3, #0
 80085d8:	f7f8 fa76 	bl	8000ac8 <__aeabi_dcmpeq>
 80085dc:	b9d8      	cbnz	r0, 8008616 <_printf_float+0x432>
 80085de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085e0:	f108 0201 	add.w	r2, r8, #1
 80085e4:	3b01      	subs	r3, #1
 80085e6:	4631      	mov	r1, r6
 80085e8:	4628      	mov	r0, r5
 80085ea:	47b8      	blx	r7
 80085ec:	3001      	adds	r0, #1
 80085ee:	d10e      	bne.n	800860e <_printf_float+0x42a>
 80085f0:	e659      	b.n	80082a6 <_printf_float+0xc2>
 80085f2:	2301      	movs	r3, #1
 80085f4:	4652      	mov	r2, sl
 80085f6:	4631      	mov	r1, r6
 80085f8:	4628      	mov	r0, r5
 80085fa:	47b8      	blx	r7
 80085fc:	3001      	adds	r0, #1
 80085fe:	f43f ae52 	beq.w	80082a6 <_printf_float+0xc2>
 8008602:	f108 0801 	add.w	r8, r8, #1
 8008606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008608:	3b01      	subs	r3, #1
 800860a:	4543      	cmp	r3, r8
 800860c:	dcf1      	bgt.n	80085f2 <_printf_float+0x40e>
 800860e:	464b      	mov	r3, r9
 8008610:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008614:	e6dc      	b.n	80083d0 <_printf_float+0x1ec>
 8008616:	f04f 0800 	mov.w	r8, #0
 800861a:	f104 0a1a 	add.w	sl, r4, #26
 800861e:	e7f2      	b.n	8008606 <_printf_float+0x422>
 8008620:	2301      	movs	r3, #1
 8008622:	4642      	mov	r2, r8
 8008624:	e7df      	b.n	80085e6 <_printf_float+0x402>
 8008626:	2301      	movs	r3, #1
 8008628:	464a      	mov	r2, r9
 800862a:	4631      	mov	r1, r6
 800862c:	4628      	mov	r0, r5
 800862e:	47b8      	blx	r7
 8008630:	3001      	adds	r0, #1
 8008632:	f43f ae38 	beq.w	80082a6 <_printf_float+0xc2>
 8008636:	f108 0801 	add.w	r8, r8, #1
 800863a:	68e3      	ldr	r3, [r4, #12]
 800863c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800863e:	1a5b      	subs	r3, r3, r1
 8008640:	4543      	cmp	r3, r8
 8008642:	dcf0      	bgt.n	8008626 <_printf_float+0x442>
 8008644:	e6fa      	b.n	800843c <_printf_float+0x258>
 8008646:	f04f 0800 	mov.w	r8, #0
 800864a:	f104 0919 	add.w	r9, r4, #25
 800864e:	e7f4      	b.n	800863a <_printf_float+0x456>

08008650 <_printf_common>:
 8008650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008654:	4616      	mov	r6, r2
 8008656:	4699      	mov	r9, r3
 8008658:	688a      	ldr	r2, [r1, #8]
 800865a:	690b      	ldr	r3, [r1, #16]
 800865c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008660:	4293      	cmp	r3, r2
 8008662:	bfb8      	it	lt
 8008664:	4613      	movlt	r3, r2
 8008666:	6033      	str	r3, [r6, #0]
 8008668:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800866c:	4607      	mov	r7, r0
 800866e:	460c      	mov	r4, r1
 8008670:	b10a      	cbz	r2, 8008676 <_printf_common+0x26>
 8008672:	3301      	adds	r3, #1
 8008674:	6033      	str	r3, [r6, #0]
 8008676:	6823      	ldr	r3, [r4, #0]
 8008678:	0699      	lsls	r1, r3, #26
 800867a:	bf42      	ittt	mi
 800867c:	6833      	ldrmi	r3, [r6, #0]
 800867e:	3302      	addmi	r3, #2
 8008680:	6033      	strmi	r3, [r6, #0]
 8008682:	6825      	ldr	r5, [r4, #0]
 8008684:	f015 0506 	ands.w	r5, r5, #6
 8008688:	d106      	bne.n	8008698 <_printf_common+0x48>
 800868a:	f104 0a19 	add.w	sl, r4, #25
 800868e:	68e3      	ldr	r3, [r4, #12]
 8008690:	6832      	ldr	r2, [r6, #0]
 8008692:	1a9b      	subs	r3, r3, r2
 8008694:	42ab      	cmp	r3, r5
 8008696:	dc26      	bgt.n	80086e6 <_printf_common+0x96>
 8008698:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800869c:	1e13      	subs	r3, r2, #0
 800869e:	6822      	ldr	r2, [r4, #0]
 80086a0:	bf18      	it	ne
 80086a2:	2301      	movne	r3, #1
 80086a4:	0692      	lsls	r2, r2, #26
 80086a6:	d42b      	bmi.n	8008700 <_printf_common+0xb0>
 80086a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086ac:	4649      	mov	r1, r9
 80086ae:	4638      	mov	r0, r7
 80086b0:	47c0      	blx	r8
 80086b2:	3001      	adds	r0, #1
 80086b4:	d01e      	beq.n	80086f4 <_printf_common+0xa4>
 80086b6:	6823      	ldr	r3, [r4, #0]
 80086b8:	68e5      	ldr	r5, [r4, #12]
 80086ba:	6832      	ldr	r2, [r6, #0]
 80086bc:	f003 0306 	and.w	r3, r3, #6
 80086c0:	2b04      	cmp	r3, #4
 80086c2:	bf08      	it	eq
 80086c4:	1aad      	subeq	r5, r5, r2
 80086c6:	68a3      	ldr	r3, [r4, #8]
 80086c8:	6922      	ldr	r2, [r4, #16]
 80086ca:	bf0c      	ite	eq
 80086cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086d0:	2500      	movne	r5, #0
 80086d2:	4293      	cmp	r3, r2
 80086d4:	bfc4      	itt	gt
 80086d6:	1a9b      	subgt	r3, r3, r2
 80086d8:	18ed      	addgt	r5, r5, r3
 80086da:	2600      	movs	r6, #0
 80086dc:	341a      	adds	r4, #26
 80086de:	42b5      	cmp	r5, r6
 80086e0:	d11a      	bne.n	8008718 <_printf_common+0xc8>
 80086e2:	2000      	movs	r0, #0
 80086e4:	e008      	b.n	80086f8 <_printf_common+0xa8>
 80086e6:	2301      	movs	r3, #1
 80086e8:	4652      	mov	r2, sl
 80086ea:	4649      	mov	r1, r9
 80086ec:	4638      	mov	r0, r7
 80086ee:	47c0      	blx	r8
 80086f0:	3001      	adds	r0, #1
 80086f2:	d103      	bne.n	80086fc <_printf_common+0xac>
 80086f4:	f04f 30ff 	mov.w	r0, #4294967295
 80086f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086fc:	3501      	adds	r5, #1
 80086fe:	e7c6      	b.n	800868e <_printf_common+0x3e>
 8008700:	18e1      	adds	r1, r4, r3
 8008702:	1c5a      	adds	r2, r3, #1
 8008704:	2030      	movs	r0, #48	; 0x30
 8008706:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800870a:	4422      	add	r2, r4
 800870c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008710:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008714:	3302      	adds	r3, #2
 8008716:	e7c7      	b.n	80086a8 <_printf_common+0x58>
 8008718:	2301      	movs	r3, #1
 800871a:	4622      	mov	r2, r4
 800871c:	4649      	mov	r1, r9
 800871e:	4638      	mov	r0, r7
 8008720:	47c0      	blx	r8
 8008722:	3001      	adds	r0, #1
 8008724:	d0e6      	beq.n	80086f4 <_printf_common+0xa4>
 8008726:	3601      	adds	r6, #1
 8008728:	e7d9      	b.n	80086de <_printf_common+0x8e>
	...

0800872c <_printf_i>:
 800872c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008730:	460c      	mov	r4, r1
 8008732:	4691      	mov	r9, r2
 8008734:	7e27      	ldrb	r7, [r4, #24]
 8008736:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008738:	2f78      	cmp	r7, #120	; 0x78
 800873a:	4680      	mov	r8, r0
 800873c:	469a      	mov	sl, r3
 800873e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008742:	d807      	bhi.n	8008754 <_printf_i+0x28>
 8008744:	2f62      	cmp	r7, #98	; 0x62
 8008746:	d80a      	bhi.n	800875e <_printf_i+0x32>
 8008748:	2f00      	cmp	r7, #0
 800874a:	f000 80d8 	beq.w	80088fe <_printf_i+0x1d2>
 800874e:	2f58      	cmp	r7, #88	; 0x58
 8008750:	f000 80a3 	beq.w	800889a <_printf_i+0x16e>
 8008754:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008758:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800875c:	e03a      	b.n	80087d4 <_printf_i+0xa8>
 800875e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008762:	2b15      	cmp	r3, #21
 8008764:	d8f6      	bhi.n	8008754 <_printf_i+0x28>
 8008766:	a001      	add	r0, pc, #4	; (adr r0, 800876c <_printf_i+0x40>)
 8008768:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800876c:	080087c5 	.word	0x080087c5
 8008770:	080087d9 	.word	0x080087d9
 8008774:	08008755 	.word	0x08008755
 8008778:	08008755 	.word	0x08008755
 800877c:	08008755 	.word	0x08008755
 8008780:	08008755 	.word	0x08008755
 8008784:	080087d9 	.word	0x080087d9
 8008788:	08008755 	.word	0x08008755
 800878c:	08008755 	.word	0x08008755
 8008790:	08008755 	.word	0x08008755
 8008794:	08008755 	.word	0x08008755
 8008798:	080088e5 	.word	0x080088e5
 800879c:	08008809 	.word	0x08008809
 80087a0:	080088c7 	.word	0x080088c7
 80087a4:	08008755 	.word	0x08008755
 80087a8:	08008755 	.word	0x08008755
 80087ac:	08008907 	.word	0x08008907
 80087b0:	08008755 	.word	0x08008755
 80087b4:	08008809 	.word	0x08008809
 80087b8:	08008755 	.word	0x08008755
 80087bc:	08008755 	.word	0x08008755
 80087c0:	080088cf 	.word	0x080088cf
 80087c4:	680b      	ldr	r3, [r1, #0]
 80087c6:	1d1a      	adds	r2, r3, #4
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	600a      	str	r2, [r1, #0]
 80087cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80087d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087d4:	2301      	movs	r3, #1
 80087d6:	e0a3      	b.n	8008920 <_printf_i+0x1f4>
 80087d8:	6825      	ldr	r5, [r4, #0]
 80087da:	6808      	ldr	r0, [r1, #0]
 80087dc:	062e      	lsls	r6, r5, #24
 80087de:	f100 0304 	add.w	r3, r0, #4
 80087e2:	d50a      	bpl.n	80087fa <_printf_i+0xce>
 80087e4:	6805      	ldr	r5, [r0, #0]
 80087e6:	600b      	str	r3, [r1, #0]
 80087e8:	2d00      	cmp	r5, #0
 80087ea:	da03      	bge.n	80087f4 <_printf_i+0xc8>
 80087ec:	232d      	movs	r3, #45	; 0x2d
 80087ee:	426d      	negs	r5, r5
 80087f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087f4:	485e      	ldr	r0, [pc, #376]	; (8008970 <_printf_i+0x244>)
 80087f6:	230a      	movs	r3, #10
 80087f8:	e019      	b.n	800882e <_printf_i+0x102>
 80087fa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80087fe:	6805      	ldr	r5, [r0, #0]
 8008800:	600b      	str	r3, [r1, #0]
 8008802:	bf18      	it	ne
 8008804:	b22d      	sxthne	r5, r5
 8008806:	e7ef      	b.n	80087e8 <_printf_i+0xbc>
 8008808:	680b      	ldr	r3, [r1, #0]
 800880a:	6825      	ldr	r5, [r4, #0]
 800880c:	1d18      	adds	r0, r3, #4
 800880e:	6008      	str	r0, [r1, #0]
 8008810:	0628      	lsls	r0, r5, #24
 8008812:	d501      	bpl.n	8008818 <_printf_i+0xec>
 8008814:	681d      	ldr	r5, [r3, #0]
 8008816:	e002      	b.n	800881e <_printf_i+0xf2>
 8008818:	0669      	lsls	r1, r5, #25
 800881a:	d5fb      	bpl.n	8008814 <_printf_i+0xe8>
 800881c:	881d      	ldrh	r5, [r3, #0]
 800881e:	4854      	ldr	r0, [pc, #336]	; (8008970 <_printf_i+0x244>)
 8008820:	2f6f      	cmp	r7, #111	; 0x6f
 8008822:	bf0c      	ite	eq
 8008824:	2308      	moveq	r3, #8
 8008826:	230a      	movne	r3, #10
 8008828:	2100      	movs	r1, #0
 800882a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800882e:	6866      	ldr	r6, [r4, #4]
 8008830:	60a6      	str	r6, [r4, #8]
 8008832:	2e00      	cmp	r6, #0
 8008834:	bfa2      	ittt	ge
 8008836:	6821      	ldrge	r1, [r4, #0]
 8008838:	f021 0104 	bicge.w	r1, r1, #4
 800883c:	6021      	strge	r1, [r4, #0]
 800883e:	b90d      	cbnz	r5, 8008844 <_printf_i+0x118>
 8008840:	2e00      	cmp	r6, #0
 8008842:	d04d      	beq.n	80088e0 <_printf_i+0x1b4>
 8008844:	4616      	mov	r6, r2
 8008846:	fbb5 f1f3 	udiv	r1, r5, r3
 800884a:	fb03 5711 	mls	r7, r3, r1, r5
 800884e:	5dc7      	ldrb	r7, [r0, r7]
 8008850:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008854:	462f      	mov	r7, r5
 8008856:	42bb      	cmp	r3, r7
 8008858:	460d      	mov	r5, r1
 800885a:	d9f4      	bls.n	8008846 <_printf_i+0x11a>
 800885c:	2b08      	cmp	r3, #8
 800885e:	d10b      	bne.n	8008878 <_printf_i+0x14c>
 8008860:	6823      	ldr	r3, [r4, #0]
 8008862:	07df      	lsls	r7, r3, #31
 8008864:	d508      	bpl.n	8008878 <_printf_i+0x14c>
 8008866:	6923      	ldr	r3, [r4, #16]
 8008868:	6861      	ldr	r1, [r4, #4]
 800886a:	4299      	cmp	r1, r3
 800886c:	bfde      	ittt	le
 800886e:	2330      	movle	r3, #48	; 0x30
 8008870:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008874:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008878:	1b92      	subs	r2, r2, r6
 800887a:	6122      	str	r2, [r4, #16]
 800887c:	f8cd a000 	str.w	sl, [sp]
 8008880:	464b      	mov	r3, r9
 8008882:	aa03      	add	r2, sp, #12
 8008884:	4621      	mov	r1, r4
 8008886:	4640      	mov	r0, r8
 8008888:	f7ff fee2 	bl	8008650 <_printf_common>
 800888c:	3001      	adds	r0, #1
 800888e:	d14c      	bne.n	800892a <_printf_i+0x1fe>
 8008890:	f04f 30ff 	mov.w	r0, #4294967295
 8008894:	b004      	add	sp, #16
 8008896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800889a:	4835      	ldr	r0, [pc, #212]	; (8008970 <_printf_i+0x244>)
 800889c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80088a0:	6823      	ldr	r3, [r4, #0]
 80088a2:	680e      	ldr	r6, [r1, #0]
 80088a4:	061f      	lsls	r7, r3, #24
 80088a6:	f856 5b04 	ldr.w	r5, [r6], #4
 80088aa:	600e      	str	r6, [r1, #0]
 80088ac:	d514      	bpl.n	80088d8 <_printf_i+0x1ac>
 80088ae:	07d9      	lsls	r1, r3, #31
 80088b0:	bf44      	itt	mi
 80088b2:	f043 0320 	orrmi.w	r3, r3, #32
 80088b6:	6023      	strmi	r3, [r4, #0]
 80088b8:	b91d      	cbnz	r5, 80088c2 <_printf_i+0x196>
 80088ba:	6823      	ldr	r3, [r4, #0]
 80088bc:	f023 0320 	bic.w	r3, r3, #32
 80088c0:	6023      	str	r3, [r4, #0]
 80088c2:	2310      	movs	r3, #16
 80088c4:	e7b0      	b.n	8008828 <_printf_i+0xfc>
 80088c6:	6823      	ldr	r3, [r4, #0]
 80088c8:	f043 0320 	orr.w	r3, r3, #32
 80088cc:	6023      	str	r3, [r4, #0]
 80088ce:	2378      	movs	r3, #120	; 0x78
 80088d0:	4828      	ldr	r0, [pc, #160]	; (8008974 <_printf_i+0x248>)
 80088d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80088d6:	e7e3      	b.n	80088a0 <_printf_i+0x174>
 80088d8:	065e      	lsls	r6, r3, #25
 80088da:	bf48      	it	mi
 80088dc:	b2ad      	uxthmi	r5, r5
 80088de:	e7e6      	b.n	80088ae <_printf_i+0x182>
 80088e0:	4616      	mov	r6, r2
 80088e2:	e7bb      	b.n	800885c <_printf_i+0x130>
 80088e4:	680b      	ldr	r3, [r1, #0]
 80088e6:	6826      	ldr	r6, [r4, #0]
 80088e8:	6960      	ldr	r0, [r4, #20]
 80088ea:	1d1d      	adds	r5, r3, #4
 80088ec:	600d      	str	r5, [r1, #0]
 80088ee:	0635      	lsls	r5, r6, #24
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	d501      	bpl.n	80088f8 <_printf_i+0x1cc>
 80088f4:	6018      	str	r0, [r3, #0]
 80088f6:	e002      	b.n	80088fe <_printf_i+0x1d2>
 80088f8:	0671      	lsls	r1, r6, #25
 80088fa:	d5fb      	bpl.n	80088f4 <_printf_i+0x1c8>
 80088fc:	8018      	strh	r0, [r3, #0]
 80088fe:	2300      	movs	r3, #0
 8008900:	6123      	str	r3, [r4, #16]
 8008902:	4616      	mov	r6, r2
 8008904:	e7ba      	b.n	800887c <_printf_i+0x150>
 8008906:	680b      	ldr	r3, [r1, #0]
 8008908:	1d1a      	adds	r2, r3, #4
 800890a:	600a      	str	r2, [r1, #0]
 800890c:	681e      	ldr	r6, [r3, #0]
 800890e:	6862      	ldr	r2, [r4, #4]
 8008910:	2100      	movs	r1, #0
 8008912:	4630      	mov	r0, r6
 8008914:	f7f7 fc64 	bl	80001e0 <memchr>
 8008918:	b108      	cbz	r0, 800891e <_printf_i+0x1f2>
 800891a:	1b80      	subs	r0, r0, r6
 800891c:	6060      	str	r0, [r4, #4]
 800891e:	6863      	ldr	r3, [r4, #4]
 8008920:	6123      	str	r3, [r4, #16]
 8008922:	2300      	movs	r3, #0
 8008924:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008928:	e7a8      	b.n	800887c <_printf_i+0x150>
 800892a:	6923      	ldr	r3, [r4, #16]
 800892c:	4632      	mov	r2, r6
 800892e:	4649      	mov	r1, r9
 8008930:	4640      	mov	r0, r8
 8008932:	47d0      	blx	sl
 8008934:	3001      	adds	r0, #1
 8008936:	d0ab      	beq.n	8008890 <_printf_i+0x164>
 8008938:	6823      	ldr	r3, [r4, #0]
 800893a:	079b      	lsls	r3, r3, #30
 800893c:	d413      	bmi.n	8008966 <_printf_i+0x23a>
 800893e:	68e0      	ldr	r0, [r4, #12]
 8008940:	9b03      	ldr	r3, [sp, #12]
 8008942:	4298      	cmp	r0, r3
 8008944:	bfb8      	it	lt
 8008946:	4618      	movlt	r0, r3
 8008948:	e7a4      	b.n	8008894 <_printf_i+0x168>
 800894a:	2301      	movs	r3, #1
 800894c:	4632      	mov	r2, r6
 800894e:	4649      	mov	r1, r9
 8008950:	4640      	mov	r0, r8
 8008952:	47d0      	blx	sl
 8008954:	3001      	adds	r0, #1
 8008956:	d09b      	beq.n	8008890 <_printf_i+0x164>
 8008958:	3501      	adds	r5, #1
 800895a:	68e3      	ldr	r3, [r4, #12]
 800895c:	9903      	ldr	r1, [sp, #12]
 800895e:	1a5b      	subs	r3, r3, r1
 8008960:	42ab      	cmp	r3, r5
 8008962:	dcf2      	bgt.n	800894a <_printf_i+0x21e>
 8008964:	e7eb      	b.n	800893e <_printf_i+0x212>
 8008966:	2500      	movs	r5, #0
 8008968:	f104 0619 	add.w	r6, r4, #25
 800896c:	e7f5      	b.n	800895a <_printf_i+0x22e>
 800896e:	bf00      	nop
 8008970:	0800f202 	.word	0x0800f202
 8008974:	0800f213 	.word	0x0800f213

08008978 <_scanf_float>:
 8008978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800897c:	b087      	sub	sp, #28
 800897e:	4617      	mov	r7, r2
 8008980:	9303      	str	r3, [sp, #12]
 8008982:	688b      	ldr	r3, [r1, #8]
 8008984:	1e5a      	subs	r2, r3, #1
 8008986:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800898a:	bf83      	ittte	hi
 800898c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008990:	195b      	addhi	r3, r3, r5
 8008992:	9302      	strhi	r3, [sp, #8]
 8008994:	2300      	movls	r3, #0
 8008996:	bf86      	itte	hi
 8008998:	f240 135d 	movwhi	r3, #349	; 0x15d
 800899c:	608b      	strhi	r3, [r1, #8]
 800899e:	9302      	strls	r3, [sp, #8]
 80089a0:	680b      	ldr	r3, [r1, #0]
 80089a2:	468b      	mov	fp, r1
 80089a4:	2500      	movs	r5, #0
 80089a6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80089aa:	f84b 3b1c 	str.w	r3, [fp], #28
 80089ae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80089b2:	4680      	mov	r8, r0
 80089b4:	460c      	mov	r4, r1
 80089b6:	465e      	mov	r6, fp
 80089b8:	46aa      	mov	sl, r5
 80089ba:	46a9      	mov	r9, r5
 80089bc:	9501      	str	r5, [sp, #4]
 80089be:	68a2      	ldr	r2, [r4, #8]
 80089c0:	b152      	cbz	r2, 80089d8 <_scanf_float+0x60>
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	2b4e      	cmp	r3, #78	; 0x4e
 80089c8:	d864      	bhi.n	8008a94 <_scanf_float+0x11c>
 80089ca:	2b40      	cmp	r3, #64	; 0x40
 80089cc:	d83c      	bhi.n	8008a48 <_scanf_float+0xd0>
 80089ce:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80089d2:	b2c8      	uxtb	r0, r1
 80089d4:	280e      	cmp	r0, #14
 80089d6:	d93a      	bls.n	8008a4e <_scanf_float+0xd6>
 80089d8:	f1b9 0f00 	cmp.w	r9, #0
 80089dc:	d003      	beq.n	80089e6 <_scanf_float+0x6e>
 80089de:	6823      	ldr	r3, [r4, #0]
 80089e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089e4:	6023      	str	r3, [r4, #0]
 80089e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80089ea:	f1ba 0f01 	cmp.w	sl, #1
 80089ee:	f200 8113 	bhi.w	8008c18 <_scanf_float+0x2a0>
 80089f2:	455e      	cmp	r6, fp
 80089f4:	f200 8105 	bhi.w	8008c02 <_scanf_float+0x28a>
 80089f8:	2501      	movs	r5, #1
 80089fa:	4628      	mov	r0, r5
 80089fc:	b007      	add	sp, #28
 80089fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a02:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008a06:	2a0d      	cmp	r2, #13
 8008a08:	d8e6      	bhi.n	80089d8 <_scanf_float+0x60>
 8008a0a:	a101      	add	r1, pc, #4	; (adr r1, 8008a10 <_scanf_float+0x98>)
 8008a0c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008a10:	08008b4f 	.word	0x08008b4f
 8008a14:	080089d9 	.word	0x080089d9
 8008a18:	080089d9 	.word	0x080089d9
 8008a1c:	080089d9 	.word	0x080089d9
 8008a20:	08008baf 	.word	0x08008baf
 8008a24:	08008b87 	.word	0x08008b87
 8008a28:	080089d9 	.word	0x080089d9
 8008a2c:	080089d9 	.word	0x080089d9
 8008a30:	08008b5d 	.word	0x08008b5d
 8008a34:	080089d9 	.word	0x080089d9
 8008a38:	080089d9 	.word	0x080089d9
 8008a3c:	080089d9 	.word	0x080089d9
 8008a40:	080089d9 	.word	0x080089d9
 8008a44:	08008b15 	.word	0x08008b15
 8008a48:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008a4c:	e7db      	b.n	8008a06 <_scanf_float+0x8e>
 8008a4e:	290e      	cmp	r1, #14
 8008a50:	d8c2      	bhi.n	80089d8 <_scanf_float+0x60>
 8008a52:	a001      	add	r0, pc, #4	; (adr r0, 8008a58 <_scanf_float+0xe0>)
 8008a54:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008a58:	08008b07 	.word	0x08008b07
 8008a5c:	080089d9 	.word	0x080089d9
 8008a60:	08008b07 	.word	0x08008b07
 8008a64:	08008b9b 	.word	0x08008b9b
 8008a68:	080089d9 	.word	0x080089d9
 8008a6c:	08008ab5 	.word	0x08008ab5
 8008a70:	08008af1 	.word	0x08008af1
 8008a74:	08008af1 	.word	0x08008af1
 8008a78:	08008af1 	.word	0x08008af1
 8008a7c:	08008af1 	.word	0x08008af1
 8008a80:	08008af1 	.word	0x08008af1
 8008a84:	08008af1 	.word	0x08008af1
 8008a88:	08008af1 	.word	0x08008af1
 8008a8c:	08008af1 	.word	0x08008af1
 8008a90:	08008af1 	.word	0x08008af1
 8008a94:	2b6e      	cmp	r3, #110	; 0x6e
 8008a96:	d809      	bhi.n	8008aac <_scanf_float+0x134>
 8008a98:	2b60      	cmp	r3, #96	; 0x60
 8008a9a:	d8b2      	bhi.n	8008a02 <_scanf_float+0x8a>
 8008a9c:	2b54      	cmp	r3, #84	; 0x54
 8008a9e:	d077      	beq.n	8008b90 <_scanf_float+0x218>
 8008aa0:	2b59      	cmp	r3, #89	; 0x59
 8008aa2:	d199      	bne.n	80089d8 <_scanf_float+0x60>
 8008aa4:	2d07      	cmp	r5, #7
 8008aa6:	d197      	bne.n	80089d8 <_scanf_float+0x60>
 8008aa8:	2508      	movs	r5, #8
 8008aaa:	e029      	b.n	8008b00 <_scanf_float+0x188>
 8008aac:	2b74      	cmp	r3, #116	; 0x74
 8008aae:	d06f      	beq.n	8008b90 <_scanf_float+0x218>
 8008ab0:	2b79      	cmp	r3, #121	; 0x79
 8008ab2:	e7f6      	b.n	8008aa2 <_scanf_float+0x12a>
 8008ab4:	6821      	ldr	r1, [r4, #0]
 8008ab6:	05c8      	lsls	r0, r1, #23
 8008ab8:	d51a      	bpl.n	8008af0 <_scanf_float+0x178>
 8008aba:	9b02      	ldr	r3, [sp, #8]
 8008abc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008ac0:	6021      	str	r1, [r4, #0]
 8008ac2:	f109 0901 	add.w	r9, r9, #1
 8008ac6:	b11b      	cbz	r3, 8008ad0 <_scanf_float+0x158>
 8008ac8:	3b01      	subs	r3, #1
 8008aca:	3201      	adds	r2, #1
 8008acc:	9302      	str	r3, [sp, #8]
 8008ace:	60a2      	str	r2, [r4, #8]
 8008ad0:	68a3      	ldr	r3, [r4, #8]
 8008ad2:	3b01      	subs	r3, #1
 8008ad4:	60a3      	str	r3, [r4, #8]
 8008ad6:	6923      	ldr	r3, [r4, #16]
 8008ad8:	3301      	adds	r3, #1
 8008ada:	6123      	str	r3, [r4, #16]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	607b      	str	r3, [r7, #4]
 8008ae4:	f340 8084 	ble.w	8008bf0 <_scanf_float+0x278>
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	3301      	adds	r3, #1
 8008aec:	603b      	str	r3, [r7, #0]
 8008aee:	e766      	b.n	80089be <_scanf_float+0x46>
 8008af0:	eb1a 0f05 	cmn.w	sl, r5
 8008af4:	f47f af70 	bne.w	80089d8 <_scanf_float+0x60>
 8008af8:	6822      	ldr	r2, [r4, #0]
 8008afa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008afe:	6022      	str	r2, [r4, #0]
 8008b00:	f806 3b01 	strb.w	r3, [r6], #1
 8008b04:	e7e4      	b.n	8008ad0 <_scanf_float+0x158>
 8008b06:	6822      	ldr	r2, [r4, #0]
 8008b08:	0610      	lsls	r0, r2, #24
 8008b0a:	f57f af65 	bpl.w	80089d8 <_scanf_float+0x60>
 8008b0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b12:	e7f4      	b.n	8008afe <_scanf_float+0x186>
 8008b14:	f1ba 0f00 	cmp.w	sl, #0
 8008b18:	d10e      	bne.n	8008b38 <_scanf_float+0x1c0>
 8008b1a:	f1b9 0f00 	cmp.w	r9, #0
 8008b1e:	d10e      	bne.n	8008b3e <_scanf_float+0x1c6>
 8008b20:	6822      	ldr	r2, [r4, #0]
 8008b22:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008b26:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008b2a:	d108      	bne.n	8008b3e <_scanf_float+0x1c6>
 8008b2c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008b30:	6022      	str	r2, [r4, #0]
 8008b32:	f04f 0a01 	mov.w	sl, #1
 8008b36:	e7e3      	b.n	8008b00 <_scanf_float+0x188>
 8008b38:	f1ba 0f02 	cmp.w	sl, #2
 8008b3c:	d055      	beq.n	8008bea <_scanf_float+0x272>
 8008b3e:	2d01      	cmp	r5, #1
 8008b40:	d002      	beq.n	8008b48 <_scanf_float+0x1d0>
 8008b42:	2d04      	cmp	r5, #4
 8008b44:	f47f af48 	bne.w	80089d8 <_scanf_float+0x60>
 8008b48:	3501      	adds	r5, #1
 8008b4a:	b2ed      	uxtb	r5, r5
 8008b4c:	e7d8      	b.n	8008b00 <_scanf_float+0x188>
 8008b4e:	f1ba 0f01 	cmp.w	sl, #1
 8008b52:	f47f af41 	bne.w	80089d8 <_scanf_float+0x60>
 8008b56:	f04f 0a02 	mov.w	sl, #2
 8008b5a:	e7d1      	b.n	8008b00 <_scanf_float+0x188>
 8008b5c:	b97d      	cbnz	r5, 8008b7e <_scanf_float+0x206>
 8008b5e:	f1b9 0f00 	cmp.w	r9, #0
 8008b62:	f47f af3c 	bne.w	80089de <_scanf_float+0x66>
 8008b66:	6822      	ldr	r2, [r4, #0]
 8008b68:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008b6c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008b70:	f47f af39 	bne.w	80089e6 <_scanf_float+0x6e>
 8008b74:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008b78:	6022      	str	r2, [r4, #0]
 8008b7a:	2501      	movs	r5, #1
 8008b7c:	e7c0      	b.n	8008b00 <_scanf_float+0x188>
 8008b7e:	2d03      	cmp	r5, #3
 8008b80:	d0e2      	beq.n	8008b48 <_scanf_float+0x1d0>
 8008b82:	2d05      	cmp	r5, #5
 8008b84:	e7de      	b.n	8008b44 <_scanf_float+0x1cc>
 8008b86:	2d02      	cmp	r5, #2
 8008b88:	f47f af26 	bne.w	80089d8 <_scanf_float+0x60>
 8008b8c:	2503      	movs	r5, #3
 8008b8e:	e7b7      	b.n	8008b00 <_scanf_float+0x188>
 8008b90:	2d06      	cmp	r5, #6
 8008b92:	f47f af21 	bne.w	80089d8 <_scanf_float+0x60>
 8008b96:	2507      	movs	r5, #7
 8008b98:	e7b2      	b.n	8008b00 <_scanf_float+0x188>
 8008b9a:	6822      	ldr	r2, [r4, #0]
 8008b9c:	0591      	lsls	r1, r2, #22
 8008b9e:	f57f af1b 	bpl.w	80089d8 <_scanf_float+0x60>
 8008ba2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008ba6:	6022      	str	r2, [r4, #0]
 8008ba8:	f8cd 9004 	str.w	r9, [sp, #4]
 8008bac:	e7a8      	b.n	8008b00 <_scanf_float+0x188>
 8008bae:	6822      	ldr	r2, [r4, #0]
 8008bb0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008bb4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008bb8:	d006      	beq.n	8008bc8 <_scanf_float+0x250>
 8008bba:	0550      	lsls	r0, r2, #21
 8008bbc:	f57f af0c 	bpl.w	80089d8 <_scanf_float+0x60>
 8008bc0:	f1b9 0f00 	cmp.w	r9, #0
 8008bc4:	f43f af0f 	beq.w	80089e6 <_scanf_float+0x6e>
 8008bc8:	0591      	lsls	r1, r2, #22
 8008bca:	bf58      	it	pl
 8008bcc:	9901      	ldrpl	r1, [sp, #4]
 8008bce:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008bd2:	bf58      	it	pl
 8008bd4:	eba9 0101 	subpl.w	r1, r9, r1
 8008bd8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008bdc:	bf58      	it	pl
 8008bde:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008be2:	6022      	str	r2, [r4, #0]
 8008be4:	f04f 0900 	mov.w	r9, #0
 8008be8:	e78a      	b.n	8008b00 <_scanf_float+0x188>
 8008bea:	f04f 0a03 	mov.w	sl, #3
 8008bee:	e787      	b.n	8008b00 <_scanf_float+0x188>
 8008bf0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008bf4:	4639      	mov	r1, r7
 8008bf6:	4640      	mov	r0, r8
 8008bf8:	4798      	blx	r3
 8008bfa:	2800      	cmp	r0, #0
 8008bfc:	f43f aedf 	beq.w	80089be <_scanf_float+0x46>
 8008c00:	e6ea      	b.n	80089d8 <_scanf_float+0x60>
 8008c02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008c0a:	463a      	mov	r2, r7
 8008c0c:	4640      	mov	r0, r8
 8008c0e:	4798      	blx	r3
 8008c10:	6923      	ldr	r3, [r4, #16]
 8008c12:	3b01      	subs	r3, #1
 8008c14:	6123      	str	r3, [r4, #16]
 8008c16:	e6ec      	b.n	80089f2 <_scanf_float+0x7a>
 8008c18:	1e6b      	subs	r3, r5, #1
 8008c1a:	2b06      	cmp	r3, #6
 8008c1c:	d825      	bhi.n	8008c6a <_scanf_float+0x2f2>
 8008c1e:	2d02      	cmp	r5, #2
 8008c20:	d836      	bhi.n	8008c90 <_scanf_float+0x318>
 8008c22:	455e      	cmp	r6, fp
 8008c24:	f67f aee8 	bls.w	80089f8 <_scanf_float+0x80>
 8008c28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c2c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008c30:	463a      	mov	r2, r7
 8008c32:	4640      	mov	r0, r8
 8008c34:	4798      	blx	r3
 8008c36:	6923      	ldr	r3, [r4, #16]
 8008c38:	3b01      	subs	r3, #1
 8008c3a:	6123      	str	r3, [r4, #16]
 8008c3c:	e7f1      	b.n	8008c22 <_scanf_float+0x2aa>
 8008c3e:	9802      	ldr	r0, [sp, #8]
 8008c40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c44:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008c48:	9002      	str	r0, [sp, #8]
 8008c4a:	463a      	mov	r2, r7
 8008c4c:	4640      	mov	r0, r8
 8008c4e:	4798      	blx	r3
 8008c50:	6923      	ldr	r3, [r4, #16]
 8008c52:	3b01      	subs	r3, #1
 8008c54:	6123      	str	r3, [r4, #16]
 8008c56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c5a:	fa5f fa8a 	uxtb.w	sl, sl
 8008c5e:	f1ba 0f02 	cmp.w	sl, #2
 8008c62:	d1ec      	bne.n	8008c3e <_scanf_float+0x2c6>
 8008c64:	3d03      	subs	r5, #3
 8008c66:	b2ed      	uxtb	r5, r5
 8008c68:	1b76      	subs	r6, r6, r5
 8008c6a:	6823      	ldr	r3, [r4, #0]
 8008c6c:	05da      	lsls	r2, r3, #23
 8008c6e:	d52f      	bpl.n	8008cd0 <_scanf_float+0x358>
 8008c70:	055b      	lsls	r3, r3, #21
 8008c72:	d510      	bpl.n	8008c96 <_scanf_float+0x31e>
 8008c74:	455e      	cmp	r6, fp
 8008c76:	f67f aebf 	bls.w	80089f8 <_scanf_float+0x80>
 8008c7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008c82:	463a      	mov	r2, r7
 8008c84:	4640      	mov	r0, r8
 8008c86:	4798      	blx	r3
 8008c88:	6923      	ldr	r3, [r4, #16]
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	6123      	str	r3, [r4, #16]
 8008c8e:	e7f1      	b.n	8008c74 <_scanf_float+0x2fc>
 8008c90:	46aa      	mov	sl, r5
 8008c92:	9602      	str	r6, [sp, #8]
 8008c94:	e7df      	b.n	8008c56 <_scanf_float+0x2de>
 8008c96:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008c9a:	6923      	ldr	r3, [r4, #16]
 8008c9c:	2965      	cmp	r1, #101	; 0x65
 8008c9e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008ca2:	f106 35ff 	add.w	r5, r6, #4294967295
 8008ca6:	6123      	str	r3, [r4, #16]
 8008ca8:	d00c      	beq.n	8008cc4 <_scanf_float+0x34c>
 8008caa:	2945      	cmp	r1, #69	; 0x45
 8008cac:	d00a      	beq.n	8008cc4 <_scanf_float+0x34c>
 8008cae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008cb2:	463a      	mov	r2, r7
 8008cb4:	4640      	mov	r0, r8
 8008cb6:	4798      	blx	r3
 8008cb8:	6923      	ldr	r3, [r4, #16]
 8008cba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008cbe:	3b01      	subs	r3, #1
 8008cc0:	1eb5      	subs	r5, r6, #2
 8008cc2:	6123      	str	r3, [r4, #16]
 8008cc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008cc8:	463a      	mov	r2, r7
 8008cca:	4640      	mov	r0, r8
 8008ccc:	4798      	blx	r3
 8008cce:	462e      	mov	r6, r5
 8008cd0:	6825      	ldr	r5, [r4, #0]
 8008cd2:	f015 0510 	ands.w	r5, r5, #16
 8008cd6:	d158      	bne.n	8008d8a <_scanf_float+0x412>
 8008cd8:	7035      	strb	r5, [r6, #0]
 8008cda:	6823      	ldr	r3, [r4, #0]
 8008cdc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008ce0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ce4:	d11c      	bne.n	8008d20 <_scanf_float+0x3a8>
 8008ce6:	9b01      	ldr	r3, [sp, #4]
 8008ce8:	454b      	cmp	r3, r9
 8008cea:	eba3 0209 	sub.w	r2, r3, r9
 8008cee:	d124      	bne.n	8008d3a <_scanf_float+0x3c2>
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	4659      	mov	r1, fp
 8008cf4:	4640      	mov	r0, r8
 8008cf6:	f001 f809 	bl	8009d0c <_strtod_r>
 8008cfa:	9b03      	ldr	r3, [sp, #12]
 8008cfc:	6821      	ldr	r1, [r4, #0]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f011 0f02 	tst.w	r1, #2
 8008d04:	ec57 6b10 	vmov	r6, r7, d0
 8008d08:	f103 0204 	add.w	r2, r3, #4
 8008d0c:	d020      	beq.n	8008d50 <_scanf_float+0x3d8>
 8008d0e:	9903      	ldr	r1, [sp, #12]
 8008d10:	600a      	str	r2, [r1, #0]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	e9c3 6700 	strd	r6, r7, [r3]
 8008d18:	68e3      	ldr	r3, [r4, #12]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	60e3      	str	r3, [r4, #12]
 8008d1e:	e66c      	b.n	80089fa <_scanf_float+0x82>
 8008d20:	9b04      	ldr	r3, [sp, #16]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d0e4      	beq.n	8008cf0 <_scanf_float+0x378>
 8008d26:	9905      	ldr	r1, [sp, #20]
 8008d28:	230a      	movs	r3, #10
 8008d2a:	462a      	mov	r2, r5
 8008d2c:	3101      	adds	r1, #1
 8008d2e:	4640      	mov	r0, r8
 8008d30:	f001 f876 	bl	8009e20 <_strtol_r>
 8008d34:	9b04      	ldr	r3, [sp, #16]
 8008d36:	9e05      	ldr	r6, [sp, #20]
 8008d38:	1ac2      	subs	r2, r0, r3
 8008d3a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008d3e:	429e      	cmp	r6, r3
 8008d40:	bf28      	it	cs
 8008d42:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008d46:	4912      	ldr	r1, [pc, #72]	; (8008d90 <_scanf_float+0x418>)
 8008d48:	4630      	mov	r0, r6
 8008d4a:	f000 f997 	bl	800907c <siprintf>
 8008d4e:	e7cf      	b.n	8008cf0 <_scanf_float+0x378>
 8008d50:	f011 0f04 	tst.w	r1, #4
 8008d54:	9903      	ldr	r1, [sp, #12]
 8008d56:	600a      	str	r2, [r1, #0]
 8008d58:	d1db      	bne.n	8008d12 <_scanf_float+0x39a>
 8008d5a:	f8d3 8000 	ldr.w	r8, [r3]
 8008d5e:	ee10 2a10 	vmov	r2, s0
 8008d62:	ee10 0a10 	vmov	r0, s0
 8008d66:	463b      	mov	r3, r7
 8008d68:	4639      	mov	r1, r7
 8008d6a:	f7f7 fedf 	bl	8000b2c <__aeabi_dcmpun>
 8008d6e:	b128      	cbz	r0, 8008d7c <_scanf_float+0x404>
 8008d70:	4808      	ldr	r0, [pc, #32]	; (8008d94 <_scanf_float+0x41c>)
 8008d72:	f000 f97d 	bl	8009070 <nanf>
 8008d76:	ed88 0a00 	vstr	s0, [r8]
 8008d7a:	e7cd      	b.n	8008d18 <_scanf_float+0x3a0>
 8008d7c:	4630      	mov	r0, r6
 8008d7e:	4639      	mov	r1, r7
 8008d80:	f7f7 ff32 	bl	8000be8 <__aeabi_d2f>
 8008d84:	f8c8 0000 	str.w	r0, [r8]
 8008d88:	e7c6      	b.n	8008d18 <_scanf_float+0x3a0>
 8008d8a:	2500      	movs	r5, #0
 8008d8c:	e635      	b.n	80089fa <_scanf_float+0x82>
 8008d8e:	bf00      	nop
 8008d90:	0800f224 	.word	0x0800f224
 8008d94:	0800f6a0 	.word	0x0800f6a0

08008d98 <iprintf>:
 8008d98:	b40f      	push	{r0, r1, r2, r3}
 8008d9a:	4b0a      	ldr	r3, [pc, #40]	; (8008dc4 <iprintf+0x2c>)
 8008d9c:	b513      	push	{r0, r1, r4, lr}
 8008d9e:	681c      	ldr	r4, [r3, #0]
 8008da0:	b124      	cbz	r4, 8008dac <iprintf+0x14>
 8008da2:	69a3      	ldr	r3, [r4, #24]
 8008da4:	b913      	cbnz	r3, 8008dac <iprintf+0x14>
 8008da6:	4620      	mov	r0, r4
 8008da8:	f002 f890 	bl	800aecc <__sinit>
 8008dac:	ab05      	add	r3, sp, #20
 8008dae:	9a04      	ldr	r2, [sp, #16]
 8008db0:	68a1      	ldr	r1, [r4, #8]
 8008db2:	9301      	str	r3, [sp, #4]
 8008db4:	4620      	mov	r0, r4
 8008db6:	f003 fb5f 	bl	800c478 <_vfiprintf_r>
 8008dba:	b002      	add	sp, #8
 8008dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dc0:	b004      	add	sp, #16
 8008dc2:	4770      	bx	lr
 8008dc4:	20000030 	.word	0x20000030

08008dc8 <_puts_r>:
 8008dc8:	b570      	push	{r4, r5, r6, lr}
 8008dca:	460e      	mov	r6, r1
 8008dcc:	4605      	mov	r5, r0
 8008dce:	b118      	cbz	r0, 8008dd8 <_puts_r+0x10>
 8008dd0:	6983      	ldr	r3, [r0, #24]
 8008dd2:	b90b      	cbnz	r3, 8008dd8 <_puts_r+0x10>
 8008dd4:	f002 f87a 	bl	800aecc <__sinit>
 8008dd8:	69ab      	ldr	r3, [r5, #24]
 8008dda:	68ac      	ldr	r4, [r5, #8]
 8008ddc:	b913      	cbnz	r3, 8008de4 <_puts_r+0x1c>
 8008dde:	4628      	mov	r0, r5
 8008de0:	f002 f874 	bl	800aecc <__sinit>
 8008de4:	4b2c      	ldr	r3, [pc, #176]	; (8008e98 <_puts_r+0xd0>)
 8008de6:	429c      	cmp	r4, r3
 8008de8:	d120      	bne.n	8008e2c <_puts_r+0x64>
 8008dea:	686c      	ldr	r4, [r5, #4]
 8008dec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008dee:	07db      	lsls	r3, r3, #31
 8008df0:	d405      	bmi.n	8008dfe <_puts_r+0x36>
 8008df2:	89a3      	ldrh	r3, [r4, #12]
 8008df4:	0598      	lsls	r0, r3, #22
 8008df6:	d402      	bmi.n	8008dfe <_puts_r+0x36>
 8008df8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dfa:	f002 fc78 	bl	800b6ee <__retarget_lock_acquire_recursive>
 8008dfe:	89a3      	ldrh	r3, [r4, #12]
 8008e00:	0719      	lsls	r1, r3, #28
 8008e02:	d51d      	bpl.n	8008e40 <_puts_r+0x78>
 8008e04:	6923      	ldr	r3, [r4, #16]
 8008e06:	b1db      	cbz	r3, 8008e40 <_puts_r+0x78>
 8008e08:	3e01      	subs	r6, #1
 8008e0a:	68a3      	ldr	r3, [r4, #8]
 8008e0c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008e10:	3b01      	subs	r3, #1
 8008e12:	60a3      	str	r3, [r4, #8]
 8008e14:	bb39      	cbnz	r1, 8008e66 <_puts_r+0x9e>
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	da38      	bge.n	8008e8c <_puts_r+0xc4>
 8008e1a:	4622      	mov	r2, r4
 8008e1c:	210a      	movs	r1, #10
 8008e1e:	4628      	mov	r0, r5
 8008e20:	f001 f800 	bl	8009e24 <__swbuf_r>
 8008e24:	3001      	adds	r0, #1
 8008e26:	d011      	beq.n	8008e4c <_puts_r+0x84>
 8008e28:	250a      	movs	r5, #10
 8008e2a:	e011      	b.n	8008e50 <_puts_r+0x88>
 8008e2c:	4b1b      	ldr	r3, [pc, #108]	; (8008e9c <_puts_r+0xd4>)
 8008e2e:	429c      	cmp	r4, r3
 8008e30:	d101      	bne.n	8008e36 <_puts_r+0x6e>
 8008e32:	68ac      	ldr	r4, [r5, #8]
 8008e34:	e7da      	b.n	8008dec <_puts_r+0x24>
 8008e36:	4b1a      	ldr	r3, [pc, #104]	; (8008ea0 <_puts_r+0xd8>)
 8008e38:	429c      	cmp	r4, r3
 8008e3a:	bf08      	it	eq
 8008e3c:	68ec      	ldreq	r4, [r5, #12]
 8008e3e:	e7d5      	b.n	8008dec <_puts_r+0x24>
 8008e40:	4621      	mov	r1, r4
 8008e42:	4628      	mov	r0, r5
 8008e44:	f001 f840 	bl	8009ec8 <__swsetup_r>
 8008e48:	2800      	cmp	r0, #0
 8008e4a:	d0dd      	beq.n	8008e08 <_puts_r+0x40>
 8008e4c:	f04f 35ff 	mov.w	r5, #4294967295
 8008e50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e52:	07da      	lsls	r2, r3, #31
 8008e54:	d405      	bmi.n	8008e62 <_puts_r+0x9a>
 8008e56:	89a3      	ldrh	r3, [r4, #12]
 8008e58:	059b      	lsls	r3, r3, #22
 8008e5a:	d402      	bmi.n	8008e62 <_puts_r+0x9a>
 8008e5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e5e:	f002 fc47 	bl	800b6f0 <__retarget_lock_release_recursive>
 8008e62:	4628      	mov	r0, r5
 8008e64:	bd70      	pop	{r4, r5, r6, pc}
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	da04      	bge.n	8008e74 <_puts_r+0xac>
 8008e6a:	69a2      	ldr	r2, [r4, #24]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	dc06      	bgt.n	8008e7e <_puts_r+0xb6>
 8008e70:	290a      	cmp	r1, #10
 8008e72:	d004      	beq.n	8008e7e <_puts_r+0xb6>
 8008e74:	6823      	ldr	r3, [r4, #0]
 8008e76:	1c5a      	adds	r2, r3, #1
 8008e78:	6022      	str	r2, [r4, #0]
 8008e7a:	7019      	strb	r1, [r3, #0]
 8008e7c:	e7c5      	b.n	8008e0a <_puts_r+0x42>
 8008e7e:	4622      	mov	r2, r4
 8008e80:	4628      	mov	r0, r5
 8008e82:	f000 ffcf 	bl	8009e24 <__swbuf_r>
 8008e86:	3001      	adds	r0, #1
 8008e88:	d1bf      	bne.n	8008e0a <_puts_r+0x42>
 8008e8a:	e7df      	b.n	8008e4c <_puts_r+0x84>
 8008e8c:	6823      	ldr	r3, [r4, #0]
 8008e8e:	250a      	movs	r5, #10
 8008e90:	1c5a      	adds	r2, r3, #1
 8008e92:	6022      	str	r2, [r4, #0]
 8008e94:	701d      	strb	r5, [r3, #0]
 8008e96:	e7db      	b.n	8008e50 <_puts_r+0x88>
 8008e98:	0800f438 	.word	0x0800f438
 8008e9c:	0800f458 	.word	0x0800f458
 8008ea0:	0800f418 	.word	0x0800f418

08008ea4 <puts>:
 8008ea4:	4b02      	ldr	r3, [pc, #8]	; (8008eb0 <puts+0xc>)
 8008ea6:	4601      	mov	r1, r0
 8008ea8:	6818      	ldr	r0, [r3, #0]
 8008eaa:	f7ff bf8d 	b.w	8008dc8 <_puts_r>
 8008eae:	bf00      	nop
 8008eb0:	20000030 	.word	0x20000030

08008eb4 <_sbrk_r>:
 8008eb4:	b538      	push	{r3, r4, r5, lr}
 8008eb6:	4d06      	ldr	r5, [pc, #24]	; (8008ed0 <_sbrk_r+0x1c>)
 8008eb8:	2300      	movs	r3, #0
 8008eba:	4604      	mov	r4, r0
 8008ebc:	4608      	mov	r0, r1
 8008ebe:	602b      	str	r3, [r5, #0]
 8008ec0:	f7f8 fd8a 	bl	80019d8 <_sbrk>
 8008ec4:	1c43      	adds	r3, r0, #1
 8008ec6:	d102      	bne.n	8008ece <_sbrk_r+0x1a>
 8008ec8:	682b      	ldr	r3, [r5, #0]
 8008eca:	b103      	cbz	r3, 8008ece <_sbrk_r+0x1a>
 8008ecc:	6023      	str	r3, [r4, #0]
 8008ece:	bd38      	pop	{r3, r4, r5, pc}
 8008ed0:	200027c8 	.word	0x200027c8

08008ed4 <setbuf>:
 8008ed4:	2900      	cmp	r1, #0
 8008ed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008eda:	bf0c      	ite	eq
 8008edc:	2202      	moveq	r2, #2
 8008ede:	2200      	movne	r2, #0
 8008ee0:	f000 b800 	b.w	8008ee4 <setvbuf>

08008ee4 <setvbuf>:
 8008ee4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ee8:	461d      	mov	r5, r3
 8008eea:	4b5d      	ldr	r3, [pc, #372]	; (8009060 <setvbuf+0x17c>)
 8008eec:	681f      	ldr	r7, [r3, #0]
 8008eee:	4604      	mov	r4, r0
 8008ef0:	460e      	mov	r6, r1
 8008ef2:	4690      	mov	r8, r2
 8008ef4:	b127      	cbz	r7, 8008f00 <setvbuf+0x1c>
 8008ef6:	69bb      	ldr	r3, [r7, #24]
 8008ef8:	b913      	cbnz	r3, 8008f00 <setvbuf+0x1c>
 8008efa:	4638      	mov	r0, r7
 8008efc:	f001 ffe6 	bl	800aecc <__sinit>
 8008f00:	4b58      	ldr	r3, [pc, #352]	; (8009064 <setvbuf+0x180>)
 8008f02:	429c      	cmp	r4, r3
 8008f04:	d167      	bne.n	8008fd6 <setvbuf+0xf2>
 8008f06:	687c      	ldr	r4, [r7, #4]
 8008f08:	f1b8 0f02 	cmp.w	r8, #2
 8008f0c:	d006      	beq.n	8008f1c <setvbuf+0x38>
 8008f0e:	f1b8 0f01 	cmp.w	r8, #1
 8008f12:	f200 809f 	bhi.w	8009054 <setvbuf+0x170>
 8008f16:	2d00      	cmp	r5, #0
 8008f18:	f2c0 809c 	blt.w	8009054 <setvbuf+0x170>
 8008f1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f1e:	07db      	lsls	r3, r3, #31
 8008f20:	d405      	bmi.n	8008f2e <setvbuf+0x4a>
 8008f22:	89a3      	ldrh	r3, [r4, #12]
 8008f24:	0598      	lsls	r0, r3, #22
 8008f26:	d402      	bmi.n	8008f2e <setvbuf+0x4a>
 8008f28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f2a:	f002 fbe0 	bl	800b6ee <__retarget_lock_acquire_recursive>
 8008f2e:	4621      	mov	r1, r4
 8008f30:	4638      	mov	r0, r7
 8008f32:	f001 ff37 	bl	800ada4 <_fflush_r>
 8008f36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f38:	b141      	cbz	r1, 8008f4c <setvbuf+0x68>
 8008f3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f3e:	4299      	cmp	r1, r3
 8008f40:	d002      	beq.n	8008f48 <setvbuf+0x64>
 8008f42:	4638      	mov	r0, r7
 8008f44:	f7ff f804 	bl	8007f50 <_free_r>
 8008f48:	2300      	movs	r3, #0
 8008f4a:	6363      	str	r3, [r4, #52]	; 0x34
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	61a3      	str	r3, [r4, #24]
 8008f50:	6063      	str	r3, [r4, #4]
 8008f52:	89a3      	ldrh	r3, [r4, #12]
 8008f54:	0619      	lsls	r1, r3, #24
 8008f56:	d503      	bpl.n	8008f60 <setvbuf+0x7c>
 8008f58:	6921      	ldr	r1, [r4, #16]
 8008f5a:	4638      	mov	r0, r7
 8008f5c:	f7fe fff8 	bl	8007f50 <_free_r>
 8008f60:	89a3      	ldrh	r3, [r4, #12]
 8008f62:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8008f66:	f023 0303 	bic.w	r3, r3, #3
 8008f6a:	f1b8 0f02 	cmp.w	r8, #2
 8008f6e:	81a3      	strh	r3, [r4, #12]
 8008f70:	d06c      	beq.n	800904c <setvbuf+0x168>
 8008f72:	ab01      	add	r3, sp, #4
 8008f74:	466a      	mov	r2, sp
 8008f76:	4621      	mov	r1, r4
 8008f78:	4638      	mov	r0, r7
 8008f7a:	f002 fbba 	bl	800b6f2 <__swhatbuf_r>
 8008f7e:	89a3      	ldrh	r3, [r4, #12]
 8008f80:	4318      	orrs	r0, r3
 8008f82:	81a0      	strh	r0, [r4, #12]
 8008f84:	2d00      	cmp	r5, #0
 8008f86:	d130      	bne.n	8008fea <setvbuf+0x106>
 8008f88:	9d00      	ldr	r5, [sp, #0]
 8008f8a:	4628      	mov	r0, r5
 8008f8c:	f7fe ffa4 	bl	8007ed8 <malloc>
 8008f90:	4606      	mov	r6, r0
 8008f92:	2800      	cmp	r0, #0
 8008f94:	d155      	bne.n	8009042 <setvbuf+0x15e>
 8008f96:	f8dd 9000 	ldr.w	r9, [sp]
 8008f9a:	45a9      	cmp	r9, r5
 8008f9c:	d14a      	bne.n	8009034 <setvbuf+0x150>
 8008f9e:	f04f 35ff 	mov.w	r5, #4294967295
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	60a2      	str	r2, [r4, #8]
 8008fa6:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8008faa:	6022      	str	r2, [r4, #0]
 8008fac:	6122      	str	r2, [r4, #16]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fb4:	6162      	str	r2, [r4, #20]
 8008fb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008fb8:	f043 0302 	orr.w	r3, r3, #2
 8008fbc:	07d2      	lsls	r2, r2, #31
 8008fbe:	81a3      	strh	r3, [r4, #12]
 8008fc0:	d405      	bmi.n	8008fce <setvbuf+0xea>
 8008fc2:	f413 7f00 	tst.w	r3, #512	; 0x200
 8008fc6:	d102      	bne.n	8008fce <setvbuf+0xea>
 8008fc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fca:	f002 fb91 	bl	800b6f0 <__retarget_lock_release_recursive>
 8008fce:	4628      	mov	r0, r5
 8008fd0:	b003      	add	sp, #12
 8008fd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008fd6:	4b24      	ldr	r3, [pc, #144]	; (8009068 <setvbuf+0x184>)
 8008fd8:	429c      	cmp	r4, r3
 8008fda:	d101      	bne.n	8008fe0 <setvbuf+0xfc>
 8008fdc:	68bc      	ldr	r4, [r7, #8]
 8008fde:	e793      	b.n	8008f08 <setvbuf+0x24>
 8008fe0:	4b22      	ldr	r3, [pc, #136]	; (800906c <setvbuf+0x188>)
 8008fe2:	429c      	cmp	r4, r3
 8008fe4:	bf08      	it	eq
 8008fe6:	68fc      	ldreq	r4, [r7, #12]
 8008fe8:	e78e      	b.n	8008f08 <setvbuf+0x24>
 8008fea:	2e00      	cmp	r6, #0
 8008fec:	d0cd      	beq.n	8008f8a <setvbuf+0xa6>
 8008fee:	69bb      	ldr	r3, [r7, #24]
 8008ff0:	b913      	cbnz	r3, 8008ff8 <setvbuf+0x114>
 8008ff2:	4638      	mov	r0, r7
 8008ff4:	f001 ff6a 	bl	800aecc <__sinit>
 8008ff8:	f1b8 0f01 	cmp.w	r8, #1
 8008ffc:	bf08      	it	eq
 8008ffe:	89a3      	ldrheq	r3, [r4, #12]
 8009000:	6026      	str	r6, [r4, #0]
 8009002:	bf04      	itt	eq
 8009004:	f043 0301 	orreq.w	r3, r3, #1
 8009008:	81a3      	strheq	r3, [r4, #12]
 800900a:	89a2      	ldrh	r2, [r4, #12]
 800900c:	f012 0308 	ands.w	r3, r2, #8
 8009010:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8009014:	d01c      	beq.n	8009050 <setvbuf+0x16c>
 8009016:	07d3      	lsls	r3, r2, #31
 8009018:	bf41      	itttt	mi
 800901a:	2300      	movmi	r3, #0
 800901c:	426d      	negmi	r5, r5
 800901e:	60a3      	strmi	r3, [r4, #8]
 8009020:	61a5      	strmi	r5, [r4, #24]
 8009022:	bf58      	it	pl
 8009024:	60a5      	strpl	r5, [r4, #8]
 8009026:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8009028:	f015 0501 	ands.w	r5, r5, #1
 800902c:	d115      	bne.n	800905a <setvbuf+0x176>
 800902e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8009032:	e7c8      	b.n	8008fc6 <setvbuf+0xe2>
 8009034:	4648      	mov	r0, r9
 8009036:	f7fe ff4f 	bl	8007ed8 <malloc>
 800903a:	4606      	mov	r6, r0
 800903c:	2800      	cmp	r0, #0
 800903e:	d0ae      	beq.n	8008f9e <setvbuf+0xba>
 8009040:	464d      	mov	r5, r9
 8009042:	89a3      	ldrh	r3, [r4, #12]
 8009044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009048:	81a3      	strh	r3, [r4, #12]
 800904a:	e7d0      	b.n	8008fee <setvbuf+0x10a>
 800904c:	2500      	movs	r5, #0
 800904e:	e7a8      	b.n	8008fa2 <setvbuf+0xbe>
 8009050:	60a3      	str	r3, [r4, #8]
 8009052:	e7e8      	b.n	8009026 <setvbuf+0x142>
 8009054:	f04f 35ff 	mov.w	r5, #4294967295
 8009058:	e7b9      	b.n	8008fce <setvbuf+0xea>
 800905a:	2500      	movs	r5, #0
 800905c:	e7b7      	b.n	8008fce <setvbuf+0xea>
 800905e:	bf00      	nop
 8009060:	20000030 	.word	0x20000030
 8009064:	0800f438 	.word	0x0800f438
 8009068:	0800f458 	.word	0x0800f458
 800906c:	0800f418 	.word	0x0800f418

08009070 <nanf>:
 8009070:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009078 <nanf+0x8>
 8009074:	4770      	bx	lr
 8009076:	bf00      	nop
 8009078:	7fc00000 	.word	0x7fc00000

0800907c <siprintf>:
 800907c:	b40e      	push	{r1, r2, r3}
 800907e:	b500      	push	{lr}
 8009080:	b09c      	sub	sp, #112	; 0x70
 8009082:	ab1d      	add	r3, sp, #116	; 0x74
 8009084:	9002      	str	r0, [sp, #8]
 8009086:	9006      	str	r0, [sp, #24]
 8009088:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800908c:	4809      	ldr	r0, [pc, #36]	; (80090b4 <siprintf+0x38>)
 800908e:	9107      	str	r1, [sp, #28]
 8009090:	9104      	str	r1, [sp, #16]
 8009092:	4909      	ldr	r1, [pc, #36]	; (80090b8 <siprintf+0x3c>)
 8009094:	f853 2b04 	ldr.w	r2, [r3], #4
 8009098:	9105      	str	r1, [sp, #20]
 800909a:	6800      	ldr	r0, [r0, #0]
 800909c:	9301      	str	r3, [sp, #4]
 800909e:	a902      	add	r1, sp, #8
 80090a0:	f003 f8c0 	bl	800c224 <_svfiprintf_r>
 80090a4:	9b02      	ldr	r3, [sp, #8]
 80090a6:	2200      	movs	r2, #0
 80090a8:	701a      	strb	r2, [r3, #0]
 80090aa:	b01c      	add	sp, #112	; 0x70
 80090ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80090b0:	b003      	add	sp, #12
 80090b2:	4770      	bx	lr
 80090b4:	20000030 	.word	0x20000030
 80090b8:	ffff0208 	.word	0xffff0208

080090bc <sulp>:
 80090bc:	b570      	push	{r4, r5, r6, lr}
 80090be:	4604      	mov	r4, r0
 80090c0:	460d      	mov	r5, r1
 80090c2:	ec45 4b10 	vmov	d0, r4, r5
 80090c6:	4616      	mov	r6, r2
 80090c8:	f002 ff02 	bl	800bed0 <__ulp>
 80090cc:	ec51 0b10 	vmov	r0, r1, d0
 80090d0:	b17e      	cbz	r6, 80090f2 <sulp+0x36>
 80090d2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80090d6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80090da:	2b00      	cmp	r3, #0
 80090dc:	dd09      	ble.n	80090f2 <sulp+0x36>
 80090de:	051b      	lsls	r3, r3, #20
 80090e0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80090e4:	2400      	movs	r4, #0
 80090e6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80090ea:	4622      	mov	r2, r4
 80090ec:	462b      	mov	r3, r5
 80090ee:	f7f7 fa83 	bl	80005f8 <__aeabi_dmul>
 80090f2:	bd70      	pop	{r4, r5, r6, pc}
 80090f4:	0000      	movs	r0, r0
	...

080090f8 <_strtod_l>:
 80090f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090fc:	b0a3      	sub	sp, #140	; 0x8c
 80090fe:	461f      	mov	r7, r3
 8009100:	2300      	movs	r3, #0
 8009102:	931e      	str	r3, [sp, #120]	; 0x78
 8009104:	4ba4      	ldr	r3, [pc, #656]	; (8009398 <_strtod_l+0x2a0>)
 8009106:	9219      	str	r2, [sp, #100]	; 0x64
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	9307      	str	r3, [sp, #28]
 800910c:	4604      	mov	r4, r0
 800910e:	4618      	mov	r0, r3
 8009110:	4688      	mov	r8, r1
 8009112:	f7f7 f85d 	bl	80001d0 <strlen>
 8009116:	f04f 0a00 	mov.w	sl, #0
 800911a:	4605      	mov	r5, r0
 800911c:	f04f 0b00 	mov.w	fp, #0
 8009120:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009124:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009126:	781a      	ldrb	r2, [r3, #0]
 8009128:	2a2b      	cmp	r2, #43	; 0x2b
 800912a:	d04c      	beq.n	80091c6 <_strtod_l+0xce>
 800912c:	d839      	bhi.n	80091a2 <_strtod_l+0xaa>
 800912e:	2a0d      	cmp	r2, #13
 8009130:	d832      	bhi.n	8009198 <_strtod_l+0xa0>
 8009132:	2a08      	cmp	r2, #8
 8009134:	d832      	bhi.n	800919c <_strtod_l+0xa4>
 8009136:	2a00      	cmp	r2, #0
 8009138:	d03c      	beq.n	80091b4 <_strtod_l+0xbc>
 800913a:	2300      	movs	r3, #0
 800913c:	930e      	str	r3, [sp, #56]	; 0x38
 800913e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009140:	7833      	ldrb	r3, [r6, #0]
 8009142:	2b30      	cmp	r3, #48	; 0x30
 8009144:	f040 80b4 	bne.w	80092b0 <_strtod_l+0x1b8>
 8009148:	7873      	ldrb	r3, [r6, #1]
 800914a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800914e:	2b58      	cmp	r3, #88	; 0x58
 8009150:	d16c      	bne.n	800922c <_strtod_l+0x134>
 8009152:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009154:	9301      	str	r3, [sp, #4]
 8009156:	ab1e      	add	r3, sp, #120	; 0x78
 8009158:	9702      	str	r7, [sp, #8]
 800915a:	9300      	str	r3, [sp, #0]
 800915c:	4a8f      	ldr	r2, [pc, #572]	; (800939c <_strtod_l+0x2a4>)
 800915e:	ab1f      	add	r3, sp, #124	; 0x7c
 8009160:	a91d      	add	r1, sp, #116	; 0x74
 8009162:	4620      	mov	r0, r4
 8009164:	f001 ffb6 	bl	800b0d4 <__gethex>
 8009168:	f010 0707 	ands.w	r7, r0, #7
 800916c:	4605      	mov	r5, r0
 800916e:	d005      	beq.n	800917c <_strtod_l+0x84>
 8009170:	2f06      	cmp	r7, #6
 8009172:	d12a      	bne.n	80091ca <_strtod_l+0xd2>
 8009174:	3601      	adds	r6, #1
 8009176:	2300      	movs	r3, #0
 8009178:	961d      	str	r6, [sp, #116]	; 0x74
 800917a:	930e      	str	r3, [sp, #56]	; 0x38
 800917c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800917e:	2b00      	cmp	r3, #0
 8009180:	f040 8596 	bne.w	8009cb0 <_strtod_l+0xbb8>
 8009184:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009186:	b1db      	cbz	r3, 80091c0 <_strtod_l+0xc8>
 8009188:	4652      	mov	r2, sl
 800918a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800918e:	ec43 2b10 	vmov	d0, r2, r3
 8009192:	b023      	add	sp, #140	; 0x8c
 8009194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009198:	2a20      	cmp	r2, #32
 800919a:	d1ce      	bne.n	800913a <_strtod_l+0x42>
 800919c:	3301      	adds	r3, #1
 800919e:	931d      	str	r3, [sp, #116]	; 0x74
 80091a0:	e7c0      	b.n	8009124 <_strtod_l+0x2c>
 80091a2:	2a2d      	cmp	r2, #45	; 0x2d
 80091a4:	d1c9      	bne.n	800913a <_strtod_l+0x42>
 80091a6:	2201      	movs	r2, #1
 80091a8:	920e      	str	r2, [sp, #56]	; 0x38
 80091aa:	1c5a      	adds	r2, r3, #1
 80091ac:	921d      	str	r2, [sp, #116]	; 0x74
 80091ae:	785b      	ldrb	r3, [r3, #1]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d1c4      	bne.n	800913e <_strtod_l+0x46>
 80091b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80091b6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	f040 8576 	bne.w	8009cac <_strtod_l+0xbb4>
 80091c0:	4652      	mov	r2, sl
 80091c2:	465b      	mov	r3, fp
 80091c4:	e7e3      	b.n	800918e <_strtod_l+0x96>
 80091c6:	2200      	movs	r2, #0
 80091c8:	e7ee      	b.n	80091a8 <_strtod_l+0xb0>
 80091ca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80091cc:	b13a      	cbz	r2, 80091de <_strtod_l+0xe6>
 80091ce:	2135      	movs	r1, #53	; 0x35
 80091d0:	a820      	add	r0, sp, #128	; 0x80
 80091d2:	f002 ff88 	bl	800c0e6 <__copybits>
 80091d6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80091d8:	4620      	mov	r0, r4
 80091da:	f002 fb4d 	bl	800b878 <_Bfree>
 80091de:	3f01      	subs	r7, #1
 80091e0:	2f05      	cmp	r7, #5
 80091e2:	d807      	bhi.n	80091f4 <_strtod_l+0xfc>
 80091e4:	e8df f007 	tbb	[pc, r7]
 80091e8:	1d180b0e 	.word	0x1d180b0e
 80091ec:	030e      	.short	0x030e
 80091ee:	f04f 0b00 	mov.w	fp, #0
 80091f2:	46da      	mov	sl, fp
 80091f4:	0728      	lsls	r0, r5, #28
 80091f6:	d5c1      	bpl.n	800917c <_strtod_l+0x84>
 80091f8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80091fc:	e7be      	b.n	800917c <_strtod_l+0x84>
 80091fe:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8009202:	e7f7      	b.n	80091f4 <_strtod_l+0xfc>
 8009204:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8009208:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800920a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800920e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009212:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009216:	e7ed      	b.n	80091f4 <_strtod_l+0xfc>
 8009218:	f8df b184 	ldr.w	fp, [pc, #388]	; 80093a0 <_strtod_l+0x2a8>
 800921c:	f04f 0a00 	mov.w	sl, #0
 8009220:	e7e8      	b.n	80091f4 <_strtod_l+0xfc>
 8009222:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009226:	f04f 3aff 	mov.w	sl, #4294967295
 800922a:	e7e3      	b.n	80091f4 <_strtod_l+0xfc>
 800922c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800922e:	1c5a      	adds	r2, r3, #1
 8009230:	921d      	str	r2, [sp, #116]	; 0x74
 8009232:	785b      	ldrb	r3, [r3, #1]
 8009234:	2b30      	cmp	r3, #48	; 0x30
 8009236:	d0f9      	beq.n	800922c <_strtod_l+0x134>
 8009238:	2b00      	cmp	r3, #0
 800923a:	d09f      	beq.n	800917c <_strtod_l+0x84>
 800923c:	2301      	movs	r3, #1
 800923e:	f04f 0900 	mov.w	r9, #0
 8009242:	9304      	str	r3, [sp, #16]
 8009244:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009246:	930a      	str	r3, [sp, #40]	; 0x28
 8009248:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800924c:	464f      	mov	r7, r9
 800924e:	220a      	movs	r2, #10
 8009250:	981d      	ldr	r0, [sp, #116]	; 0x74
 8009252:	7806      	ldrb	r6, [r0, #0]
 8009254:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009258:	b2d9      	uxtb	r1, r3
 800925a:	2909      	cmp	r1, #9
 800925c:	d92a      	bls.n	80092b4 <_strtod_l+0x1bc>
 800925e:	9907      	ldr	r1, [sp, #28]
 8009260:	462a      	mov	r2, r5
 8009262:	f003 fa84 	bl	800c76e <strncmp>
 8009266:	b398      	cbz	r0, 80092d0 <_strtod_l+0x1d8>
 8009268:	2000      	movs	r0, #0
 800926a:	4633      	mov	r3, r6
 800926c:	463d      	mov	r5, r7
 800926e:	9007      	str	r0, [sp, #28]
 8009270:	4602      	mov	r2, r0
 8009272:	2b65      	cmp	r3, #101	; 0x65
 8009274:	d001      	beq.n	800927a <_strtod_l+0x182>
 8009276:	2b45      	cmp	r3, #69	; 0x45
 8009278:	d118      	bne.n	80092ac <_strtod_l+0x1b4>
 800927a:	b91d      	cbnz	r5, 8009284 <_strtod_l+0x18c>
 800927c:	9b04      	ldr	r3, [sp, #16]
 800927e:	4303      	orrs	r3, r0
 8009280:	d098      	beq.n	80091b4 <_strtod_l+0xbc>
 8009282:	2500      	movs	r5, #0
 8009284:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8009288:	f108 0301 	add.w	r3, r8, #1
 800928c:	931d      	str	r3, [sp, #116]	; 0x74
 800928e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009292:	2b2b      	cmp	r3, #43	; 0x2b
 8009294:	d075      	beq.n	8009382 <_strtod_l+0x28a>
 8009296:	2b2d      	cmp	r3, #45	; 0x2d
 8009298:	d07b      	beq.n	8009392 <_strtod_l+0x29a>
 800929a:	f04f 0c00 	mov.w	ip, #0
 800929e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80092a2:	2909      	cmp	r1, #9
 80092a4:	f240 8082 	bls.w	80093ac <_strtod_l+0x2b4>
 80092a8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80092ac:	2600      	movs	r6, #0
 80092ae:	e09d      	b.n	80093ec <_strtod_l+0x2f4>
 80092b0:	2300      	movs	r3, #0
 80092b2:	e7c4      	b.n	800923e <_strtod_l+0x146>
 80092b4:	2f08      	cmp	r7, #8
 80092b6:	bfd8      	it	le
 80092b8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80092ba:	f100 0001 	add.w	r0, r0, #1
 80092be:	bfda      	itte	le
 80092c0:	fb02 3301 	mlale	r3, r2, r1, r3
 80092c4:	9309      	strle	r3, [sp, #36]	; 0x24
 80092c6:	fb02 3909 	mlagt	r9, r2, r9, r3
 80092ca:	3701      	adds	r7, #1
 80092cc:	901d      	str	r0, [sp, #116]	; 0x74
 80092ce:	e7bf      	b.n	8009250 <_strtod_l+0x158>
 80092d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80092d2:	195a      	adds	r2, r3, r5
 80092d4:	921d      	str	r2, [sp, #116]	; 0x74
 80092d6:	5d5b      	ldrb	r3, [r3, r5]
 80092d8:	2f00      	cmp	r7, #0
 80092da:	d037      	beq.n	800934c <_strtod_l+0x254>
 80092dc:	9007      	str	r0, [sp, #28]
 80092de:	463d      	mov	r5, r7
 80092e0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80092e4:	2a09      	cmp	r2, #9
 80092e6:	d912      	bls.n	800930e <_strtod_l+0x216>
 80092e8:	2201      	movs	r2, #1
 80092ea:	e7c2      	b.n	8009272 <_strtod_l+0x17a>
 80092ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80092ee:	1c5a      	adds	r2, r3, #1
 80092f0:	921d      	str	r2, [sp, #116]	; 0x74
 80092f2:	785b      	ldrb	r3, [r3, #1]
 80092f4:	3001      	adds	r0, #1
 80092f6:	2b30      	cmp	r3, #48	; 0x30
 80092f8:	d0f8      	beq.n	80092ec <_strtod_l+0x1f4>
 80092fa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80092fe:	2a08      	cmp	r2, #8
 8009300:	f200 84db 	bhi.w	8009cba <_strtod_l+0xbc2>
 8009304:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009306:	9007      	str	r0, [sp, #28]
 8009308:	2000      	movs	r0, #0
 800930a:	920a      	str	r2, [sp, #40]	; 0x28
 800930c:	4605      	mov	r5, r0
 800930e:	3b30      	subs	r3, #48	; 0x30
 8009310:	f100 0201 	add.w	r2, r0, #1
 8009314:	d014      	beq.n	8009340 <_strtod_l+0x248>
 8009316:	9907      	ldr	r1, [sp, #28]
 8009318:	4411      	add	r1, r2
 800931a:	9107      	str	r1, [sp, #28]
 800931c:	462a      	mov	r2, r5
 800931e:	eb00 0e05 	add.w	lr, r0, r5
 8009322:	210a      	movs	r1, #10
 8009324:	4572      	cmp	r2, lr
 8009326:	d113      	bne.n	8009350 <_strtod_l+0x258>
 8009328:	182a      	adds	r2, r5, r0
 800932a:	2a08      	cmp	r2, #8
 800932c:	f105 0501 	add.w	r5, r5, #1
 8009330:	4405      	add	r5, r0
 8009332:	dc1c      	bgt.n	800936e <_strtod_l+0x276>
 8009334:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009336:	220a      	movs	r2, #10
 8009338:	fb02 3301 	mla	r3, r2, r1, r3
 800933c:	9309      	str	r3, [sp, #36]	; 0x24
 800933e:	2200      	movs	r2, #0
 8009340:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009342:	1c59      	adds	r1, r3, #1
 8009344:	911d      	str	r1, [sp, #116]	; 0x74
 8009346:	785b      	ldrb	r3, [r3, #1]
 8009348:	4610      	mov	r0, r2
 800934a:	e7c9      	b.n	80092e0 <_strtod_l+0x1e8>
 800934c:	4638      	mov	r0, r7
 800934e:	e7d2      	b.n	80092f6 <_strtod_l+0x1fe>
 8009350:	2a08      	cmp	r2, #8
 8009352:	dc04      	bgt.n	800935e <_strtod_l+0x266>
 8009354:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009356:	434e      	muls	r6, r1
 8009358:	9609      	str	r6, [sp, #36]	; 0x24
 800935a:	3201      	adds	r2, #1
 800935c:	e7e2      	b.n	8009324 <_strtod_l+0x22c>
 800935e:	f102 0c01 	add.w	ip, r2, #1
 8009362:	f1bc 0f10 	cmp.w	ip, #16
 8009366:	bfd8      	it	le
 8009368:	fb01 f909 	mulle.w	r9, r1, r9
 800936c:	e7f5      	b.n	800935a <_strtod_l+0x262>
 800936e:	2d10      	cmp	r5, #16
 8009370:	bfdc      	itt	le
 8009372:	220a      	movle	r2, #10
 8009374:	fb02 3909 	mlale	r9, r2, r9, r3
 8009378:	e7e1      	b.n	800933e <_strtod_l+0x246>
 800937a:	2300      	movs	r3, #0
 800937c:	9307      	str	r3, [sp, #28]
 800937e:	2201      	movs	r2, #1
 8009380:	e77c      	b.n	800927c <_strtod_l+0x184>
 8009382:	f04f 0c00 	mov.w	ip, #0
 8009386:	f108 0302 	add.w	r3, r8, #2
 800938a:	931d      	str	r3, [sp, #116]	; 0x74
 800938c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8009390:	e785      	b.n	800929e <_strtod_l+0x1a6>
 8009392:	f04f 0c01 	mov.w	ip, #1
 8009396:	e7f6      	b.n	8009386 <_strtod_l+0x28e>
 8009398:	0800f4e4 	.word	0x0800f4e4
 800939c:	0800f22c 	.word	0x0800f22c
 80093a0:	7ff00000 	.word	0x7ff00000
 80093a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80093a6:	1c59      	adds	r1, r3, #1
 80093a8:	911d      	str	r1, [sp, #116]	; 0x74
 80093aa:	785b      	ldrb	r3, [r3, #1]
 80093ac:	2b30      	cmp	r3, #48	; 0x30
 80093ae:	d0f9      	beq.n	80093a4 <_strtod_l+0x2ac>
 80093b0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80093b4:	2908      	cmp	r1, #8
 80093b6:	f63f af79 	bhi.w	80092ac <_strtod_l+0x1b4>
 80093ba:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80093be:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80093c0:	9308      	str	r3, [sp, #32]
 80093c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80093c4:	1c59      	adds	r1, r3, #1
 80093c6:	911d      	str	r1, [sp, #116]	; 0x74
 80093c8:	785b      	ldrb	r3, [r3, #1]
 80093ca:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80093ce:	2e09      	cmp	r6, #9
 80093d0:	d937      	bls.n	8009442 <_strtod_l+0x34a>
 80093d2:	9e08      	ldr	r6, [sp, #32]
 80093d4:	1b89      	subs	r1, r1, r6
 80093d6:	2908      	cmp	r1, #8
 80093d8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80093dc:	dc02      	bgt.n	80093e4 <_strtod_l+0x2ec>
 80093de:	4576      	cmp	r6, lr
 80093e0:	bfa8      	it	ge
 80093e2:	4676      	movge	r6, lr
 80093e4:	f1bc 0f00 	cmp.w	ip, #0
 80093e8:	d000      	beq.n	80093ec <_strtod_l+0x2f4>
 80093ea:	4276      	negs	r6, r6
 80093ec:	2d00      	cmp	r5, #0
 80093ee:	d14f      	bne.n	8009490 <_strtod_l+0x398>
 80093f0:	9904      	ldr	r1, [sp, #16]
 80093f2:	4301      	orrs	r1, r0
 80093f4:	f47f aec2 	bne.w	800917c <_strtod_l+0x84>
 80093f8:	2a00      	cmp	r2, #0
 80093fa:	f47f aedb 	bne.w	80091b4 <_strtod_l+0xbc>
 80093fe:	2b69      	cmp	r3, #105	; 0x69
 8009400:	d027      	beq.n	8009452 <_strtod_l+0x35a>
 8009402:	dc24      	bgt.n	800944e <_strtod_l+0x356>
 8009404:	2b49      	cmp	r3, #73	; 0x49
 8009406:	d024      	beq.n	8009452 <_strtod_l+0x35a>
 8009408:	2b4e      	cmp	r3, #78	; 0x4e
 800940a:	f47f aed3 	bne.w	80091b4 <_strtod_l+0xbc>
 800940e:	499e      	ldr	r1, [pc, #632]	; (8009688 <_strtod_l+0x590>)
 8009410:	a81d      	add	r0, sp, #116	; 0x74
 8009412:	f002 f8b7 	bl	800b584 <__match>
 8009416:	2800      	cmp	r0, #0
 8009418:	f43f aecc 	beq.w	80091b4 <_strtod_l+0xbc>
 800941c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	2b28      	cmp	r3, #40	; 0x28
 8009422:	d12d      	bne.n	8009480 <_strtod_l+0x388>
 8009424:	4999      	ldr	r1, [pc, #612]	; (800968c <_strtod_l+0x594>)
 8009426:	aa20      	add	r2, sp, #128	; 0x80
 8009428:	a81d      	add	r0, sp, #116	; 0x74
 800942a:	f002 f8bf 	bl	800b5ac <__hexnan>
 800942e:	2805      	cmp	r0, #5
 8009430:	d126      	bne.n	8009480 <_strtod_l+0x388>
 8009432:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009434:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8009438:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800943c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009440:	e69c      	b.n	800917c <_strtod_l+0x84>
 8009442:	210a      	movs	r1, #10
 8009444:	fb01 3e0e 	mla	lr, r1, lr, r3
 8009448:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800944c:	e7b9      	b.n	80093c2 <_strtod_l+0x2ca>
 800944e:	2b6e      	cmp	r3, #110	; 0x6e
 8009450:	e7db      	b.n	800940a <_strtod_l+0x312>
 8009452:	498f      	ldr	r1, [pc, #572]	; (8009690 <_strtod_l+0x598>)
 8009454:	a81d      	add	r0, sp, #116	; 0x74
 8009456:	f002 f895 	bl	800b584 <__match>
 800945a:	2800      	cmp	r0, #0
 800945c:	f43f aeaa 	beq.w	80091b4 <_strtod_l+0xbc>
 8009460:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009462:	498c      	ldr	r1, [pc, #560]	; (8009694 <_strtod_l+0x59c>)
 8009464:	3b01      	subs	r3, #1
 8009466:	a81d      	add	r0, sp, #116	; 0x74
 8009468:	931d      	str	r3, [sp, #116]	; 0x74
 800946a:	f002 f88b 	bl	800b584 <__match>
 800946e:	b910      	cbnz	r0, 8009476 <_strtod_l+0x37e>
 8009470:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009472:	3301      	adds	r3, #1
 8009474:	931d      	str	r3, [sp, #116]	; 0x74
 8009476:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80096a4 <_strtod_l+0x5ac>
 800947a:	f04f 0a00 	mov.w	sl, #0
 800947e:	e67d      	b.n	800917c <_strtod_l+0x84>
 8009480:	4885      	ldr	r0, [pc, #532]	; (8009698 <_strtod_l+0x5a0>)
 8009482:	f003 f929 	bl	800c6d8 <nan>
 8009486:	ed8d 0b04 	vstr	d0, [sp, #16]
 800948a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800948e:	e675      	b.n	800917c <_strtod_l+0x84>
 8009490:	9b07      	ldr	r3, [sp, #28]
 8009492:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009494:	1af3      	subs	r3, r6, r3
 8009496:	2f00      	cmp	r7, #0
 8009498:	bf08      	it	eq
 800949a:	462f      	moveq	r7, r5
 800949c:	2d10      	cmp	r5, #16
 800949e:	9308      	str	r3, [sp, #32]
 80094a0:	46a8      	mov	r8, r5
 80094a2:	bfa8      	it	ge
 80094a4:	f04f 0810 	movge.w	r8, #16
 80094a8:	f7f7 f82c 	bl	8000504 <__aeabi_ui2d>
 80094ac:	2d09      	cmp	r5, #9
 80094ae:	4682      	mov	sl, r0
 80094b0:	468b      	mov	fp, r1
 80094b2:	dd13      	ble.n	80094dc <_strtod_l+0x3e4>
 80094b4:	4b79      	ldr	r3, [pc, #484]	; (800969c <_strtod_l+0x5a4>)
 80094b6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80094ba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80094be:	f7f7 f89b 	bl	80005f8 <__aeabi_dmul>
 80094c2:	4682      	mov	sl, r0
 80094c4:	4648      	mov	r0, r9
 80094c6:	468b      	mov	fp, r1
 80094c8:	f7f7 f81c 	bl	8000504 <__aeabi_ui2d>
 80094cc:	4602      	mov	r2, r0
 80094ce:	460b      	mov	r3, r1
 80094d0:	4650      	mov	r0, sl
 80094d2:	4659      	mov	r1, fp
 80094d4:	f7f6 feda 	bl	800028c <__adddf3>
 80094d8:	4682      	mov	sl, r0
 80094da:	468b      	mov	fp, r1
 80094dc:	2d0f      	cmp	r5, #15
 80094de:	dc38      	bgt.n	8009552 <_strtod_l+0x45a>
 80094e0:	9b08      	ldr	r3, [sp, #32]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	f43f ae4a 	beq.w	800917c <_strtod_l+0x84>
 80094e8:	dd24      	ble.n	8009534 <_strtod_l+0x43c>
 80094ea:	2b16      	cmp	r3, #22
 80094ec:	dc0b      	bgt.n	8009506 <_strtod_l+0x40e>
 80094ee:	4d6b      	ldr	r5, [pc, #428]	; (800969c <_strtod_l+0x5a4>)
 80094f0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80094f4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80094f8:	4652      	mov	r2, sl
 80094fa:	465b      	mov	r3, fp
 80094fc:	f7f7 f87c 	bl	80005f8 <__aeabi_dmul>
 8009500:	4682      	mov	sl, r0
 8009502:	468b      	mov	fp, r1
 8009504:	e63a      	b.n	800917c <_strtod_l+0x84>
 8009506:	9a08      	ldr	r2, [sp, #32]
 8009508:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800950c:	4293      	cmp	r3, r2
 800950e:	db20      	blt.n	8009552 <_strtod_l+0x45a>
 8009510:	4c62      	ldr	r4, [pc, #392]	; (800969c <_strtod_l+0x5a4>)
 8009512:	f1c5 050f 	rsb	r5, r5, #15
 8009516:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800951a:	4652      	mov	r2, sl
 800951c:	465b      	mov	r3, fp
 800951e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009522:	f7f7 f869 	bl	80005f8 <__aeabi_dmul>
 8009526:	9b08      	ldr	r3, [sp, #32]
 8009528:	1b5d      	subs	r5, r3, r5
 800952a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800952e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009532:	e7e3      	b.n	80094fc <_strtod_l+0x404>
 8009534:	9b08      	ldr	r3, [sp, #32]
 8009536:	3316      	adds	r3, #22
 8009538:	db0b      	blt.n	8009552 <_strtod_l+0x45a>
 800953a:	9b07      	ldr	r3, [sp, #28]
 800953c:	4a57      	ldr	r2, [pc, #348]	; (800969c <_strtod_l+0x5a4>)
 800953e:	1b9e      	subs	r6, r3, r6
 8009540:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8009544:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009548:	4650      	mov	r0, sl
 800954a:	4659      	mov	r1, fp
 800954c:	f7f7 f97e 	bl	800084c <__aeabi_ddiv>
 8009550:	e7d6      	b.n	8009500 <_strtod_l+0x408>
 8009552:	9b08      	ldr	r3, [sp, #32]
 8009554:	eba5 0808 	sub.w	r8, r5, r8
 8009558:	4498      	add	r8, r3
 800955a:	f1b8 0f00 	cmp.w	r8, #0
 800955e:	dd71      	ble.n	8009644 <_strtod_l+0x54c>
 8009560:	f018 030f 	ands.w	r3, r8, #15
 8009564:	d00a      	beq.n	800957c <_strtod_l+0x484>
 8009566:	494d      	ldr	r1, [pc, #308]	; (800969c <_strtod_l+0x5a4>)
 8009568:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800956c:	4652      	mov	r2, sl
 800956e:	465b      	mov	r3, fp
 8009570:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009574:	f7f7 f840 	bl	80005f8 <__aeabi_dmul>
 8009578:	4682      	mov	sl, r0
 800957a:	468b      	mov	fp, r1
 800957c:	f038 080f 	bics.w	r8, r8, #15
 8009580:	d04d      	beq.n	800961e <_strtod_l+0x526>
 8009582:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009586:	dd22      	ble.n	80095ce <_strtod_l+0x4d6>
 8009588:	2500      	movs	r5, #0
 800958a:	462e      	mov	r6, r5
 800958c:	9509      	str	r5, [sp, #36]	; 0x24
 800958e:	9507      	str	r5, [sp, #28]
 8009590:	2322      	movs	r3, #34	; 0x22
 8009592:	f8df b110 	ldr.w	fp, [pc, #272]	; 80096a4 <_strtod_l+0x5ac>
 8009596:	6023      	str	r3, [r4, #0]
 8009598:	f04f 0a00 	mov.w	sl, #0
 800959c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800959e:	2b00      	cmp	r3, #0
 80095a0:	f43f adec 	beq.w	800917c <_strtod_l+0x84>
 80095a4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80095a6:	4620      	mov	r0, r4
 80095a8:	f002 f966 	bl	800b878 <_Bfree>
 80095ac:	9907      	ldr	r1, [sp, #28]
 80095ae:	4620      	mov	r0, r4
 80095b0:	f002 f962 	bl	800b878 <_Bfree>
 80095b4:	4631      	mov	r1, r6
 80095b6:	4620      	mov	r0, r4
 80095b8:	f002 f95e 	bl	800b878 <_Bfree>
 80095bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80095be:	4620      	mov	r0, r4
 80095c0:	f002 f95a 	bl	800b878 <_Bfree>
 80095c4:	4629      	mov	r1, r5
 80095c6:	4620      	mov	r0, r4
 80095c8:	f002 f956 	bl	800b878 <_Bfree>
 80095cc:	e5d6      	b.n	800917c <_strtod_l+0x84>
 80095ce:	2300      	movs	r3, #0
 80095d0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80095d4:	4650      	mov	r0, sl
 80095d6:	4659      	mov	r1, fp
 80095d8:	4699      	mov	r9, r3
 80095da:	f1b8 0f01 	cmp.w	r8, #1
 80095de:	dc21      	bgt.n	8009624 <_strtod_l+0x52c>
 80095e0:	b10b      	cbz	r3, 80095e6 <_strtod_l+0x4ee>
 80095e2:	4682      	mov	sl, r0
 80095e4:	468b      	mov	fp, r1
 80095e6:	4b2e      	ldr	r3, [pc, #184]	; (80096a0 <_strtod_l+0x5a8>)
 80095e8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80095ec:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80095f0:	4652      	mov	r2, sl
 80095f2:	465b      	mov	r3, fp
 80095f4:	e9d9 0100 	ldrd	r0, r1, [r9]
 80095f8:	f7f6 fffe 	bl	80005f8 <__aeabi_dmul>
 80095fc:	4b29      	ldr	r3, [pc, #164]	; (80096a4 <_strtod_l+0x5ac>)
 80095fe:	460a      	mov	r2, r1
 8009600:	400b      	ands	r3, r1
 8009602:	4929      	ldr	r1, [pc, #164]	; (80096a8 <_strtod_l+0x5b0>)
 8009604:	428b      	cmp	r3, r1
 8009606:	4682      	mov	sl, r0
 8009608:	d8be      	bhi.n	8009588 <_strtod_l+0x490>
 800960a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800960e:	428b      	cmp	r3, r1
 8009610:	bf86      	itte	hi
 8009612:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80096ac <_strtod_l+0x5b4>
 8009616:	f04f 3aff 	movhi.w	sl, #4294967295
 800961a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800961e:	2300      	movs	r3, #0
 8009620:	9304      	str	r3, [sp, #16]
 8009622:	e081      	b.n	8009728 <_strtod_l+0x630>
 8009624:	f018 0f01 	tst.w	r8, #1
 8009628:	d007      	beq.n	800963a <_strtod_l+0x542>
 800962a:	4b1d      	ldr	r3, [pc, #116]	; (80096a0 <_strtod_l+0x5a8>)
 800962c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8009630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009634:	f7f6 ffe0 	bl	80005f8 <__aeabi_dmul>
 8009638:	2301      	movs	r3, #1
 800963a:	f109 0901 	add.w	r9, r9, #1
 800963e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009642:	e7ca      	b.n	80095da <_strtod_l+0x4e2>
 8009644:	d0eb      	beq.n	800961e <_strtod_l+0x526>
 8009646:	f1c8 0800 	rsb	r8, r8, #0
 800964a:	f018 020f 	ands.w	r2, r8, #15
 800964e:	d00a      	beq.n	8009666 <_strtod_l+0x56e>
 8009650:	4b12      	ldr	r3, [pc, #72]	; (800969c <_strtod_l+0x5a4>)
 8009652:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009656:	4650      	mov	r0, sl
 8009658:	4659      	mov	r1, fp
 800965a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800965e:	f7f7 f8f5 	bl	800084c <__aeabi_ddiv>
 8009662:	4682      	mov	sl, r0
 8009664:	468b      	mov	fp, r1
 8009666:	ea5f 1828 	movs.w	r8, r8, asr #4
 800966a:	d0d8      	beq.n	800961e <_strtod_l+0x526>
 800966c:	f1b8 0f1f 	cmp.w	r8, #31
 8009670:	dd1e      	ble.n	80096b0 <_strtod_l+0x5b8>
 8009672:	2500      	movs	r5, #0
 8009674:	462e      	mov	r6, r5
 8009676:	9509      	str	r5, [sp, #36]	; 0x24
 8009678:	9507      	str	r5, [sp, #28]
 800967a:	2322      	movs	r3, #34	; 0x22
 800967c:	f04f 0a00 	mov.w	sl, #0
 8009680:	f04f 0b00 	mov.w	fp, #0
 8009684:	6023      	str	r3, [r4, #0]
 8009686:	e789      	b.n	800959c <_strtod_l+0x4a4>
 8009688:	0800f1fd 	.word	0x0800f1fd
 800968c:	0800f240 	.word	0x0800f240
 8009690:	0800f1f5 	.word	0x0800f1f5
 8009694:	0800f384 	.word	0x0800f384
 8009698:	0800f6a0 	.word	0x0800f6a0
 800969c:	0800f580 	.word	0x0800f580
 80096a0:	0800f558 	.word	0x0800f558
 80096a4:	7ff00000 	.word	0x7ff00000
 80096a8:	7ca00000 	.word	0x7ca00000
 80096ac:	7fefffff 	.word	0x7fefffff
 80096b0:	f018 0310 	ands.w	r3, r8, #16
 80096b4:	bf18      	it	ne
 80096b6:	236a      	movne	r3, #106	; 0x6a
 80096b8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8009a70 <_strtod_l+0x978>
 80096bc:	9304      	str	r3, [sp, #16]
 80096be:	4650      	mov	r0, sl
 80096c0:	4659      	mov	r1, fp
 80096c2:	2300      	movs	r3, #0
 80096c4:	f018 0f01 	tst.w	r8, #1
 80096c8:	d004      	beq.n	80096d4 <_strtod_l+0x5dc>
 80096ca:	e9d9 2300 	ldrd	r2, r3, [r9]
 80096ce:	f7f6 ff93 	bl	80005f8 <__aeabi_dmul>
 80096d2:	2301      	movs	r3, #1
 80096d4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80096d8:	f109 0908 	add.w	r9, r9, #8
 80096dc:	d1f2      	bne.n	80096c4 <_strtod_l+0x5cc>
 80096de:	b10b      	cbz	r3, 80096e4 <_strtod_l+0x5ec>
 80096e0:	4682      	mov	sl, r0
 80096e2:	468b      	mov	fp, r1
 80096e4:	9b04      	ldr	r3, [sp, #16]
 80096e6:	b1bb      	cbz	r3, 8009718 <_strtod_l+0x620>
 80096e8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80096ec:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	4659      	mov	r1, fp
 80096f4:	dd10      	ble.n	8009718 <_strtod_l+0x620>
 80096f6:	2b1f      	cmp	r3, #31
 80096f8:	f340 8128 	ble.w	800994c <_strtod_l+0x854>
 80096fc:	2b34      	cmp	r3, #52	; 0x34
 80096fe:	bfde      	ittt	le
 8009700:	3b20      	suble	r3, #32
 8009702:	f04f 32ff 	movle.w	r2, #4294967295
 8009706:	fa02 f303 	lslle.w	r3, r2, r3
 800970a:	f04f 0a00 	mov.w	sl, #0
 800970e:	bfcc      	ite	gt
 8009710:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009714:	ea03 0b01 	andle.w	fp, r3, r1
 8009718:	2200      	movs	r2, #0
 800971a:	2300      	movs	r3, #0
 800971c:	4650      	mov	r0, sl
 800971e:	4659      	mov	r1, fp
 8009720:	f7f7 f9d2 	bl	8000ac8 <__aeabi_dcmpeq>
 8009724:	2800      	cmp	r0, #0
 8009726:	d1a4      	bne.n	8009672 <_strtod_l+0x57a>
 8009728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800972a:	9300      	str	r3, [sp, #0]
 800972c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800972e:	462b      	mov	r3, r5
 8009730:	463a      	mov	r2, r7
 8009732:	4620      	mov	r0, r4
 8009734:	f002 f90c 	bl	800b950 <__s2b>
 8009738:	9009      	str	r0, [sp, #36]	; 0x24
 800973a:	2800      	cmp	r0, #0
 800973c:	f43f af24 	beq.w	8009588 <_strtod_l+0x490>
 8009740:	9b07      	ldr	r3, [sp, #28]
 8009742:	1b9e      	subs	r6, r3, r6
 8009744:	9b08      	ldr	r3, [sp, #32]
 8009746:	2b00      	cmp	r3, #0
 8009748:	bfb4      	ite	lt
 800974a:	4633      	movlt	r3, r6
 800974c:	2300      	movge	r3, #0
 800974e:	9310      	str	r3, [sp, #64]	; 0x40
 8009750:	9b08      	ldr	r3, [sp, #32]
 8009752:	2500      	movs	r5, #0
 8009754:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009758:	9318      	str	r3, [sp, #96]	; 0x60
 800975a:	462e      	mov	r6, r5
 800975c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800975e:	4620      	mov	r0, r4
 8009760:	6859      	ldr	r1, [r3, #4]
 8009762:	f002 f849 	bl	800b7f8 <_Balloc>
 8009766:	9007      	str	r0, [sp, #28]
 8009768:	2800      	cmp	r0, #0
 800976a:	f43f af11 	beq.w	8009590 <_strtod_l+0x498>
 800976e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009770:	691a      	ldr	r2, [r3, #16]
 8009772:	3202      	adds	r2, #2
 8009774:	f103 010c 	add.w	r1, r3, #12
 8009778:	0092      	lsls	r2, r2, #2
 800977a:	300c      	adds	r0, #12
 800977c:	f7fe fbc2 	bl	8007f04 <memcpy>
 8009780:	ec4b ab10 	vmov	d0, sl, fp
 8009784:	aa20      	add	r2, sp, #128	; 0x80
 8009786:	a91f      	add	r1, sp, #124	; 0x7c
 8009788:	4620      	mov	r0, r4
 800978a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800978e:	f002 fc1b 	bl	800bfc8 <__d2b>
 8009792:	901e      	str	r0, [sp, #120]	; 0x78
 8009794:	2800      	cmp	r0, #0
 8009796:	f43f aefb 	beq.w	8009590 <_strtod_l+0x498>
 800979a:	2101      	movs	r1, #1
 800979c:	4620      	mov	r0, r4
 800979e:	f002 f971 	bl	800ba84 <__i2b>
 80097a2:	4606      	mov	r6, r0
 80097a4:	2800      	cmp	r0, #0
 80097a6:	f43f aef3 	beq.w	8009590 <_strtod_l+0x498>
 80097aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80097ac:	9904      	ldr	r1, [sp, #16]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	bfab      	itete	ge
 80097b2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80097b4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80097b6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80097b8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80097bc:	bfac      	ite	ge
 80097be:	eb03 0902 	addge.w	r9, r3, r2
 80097c2:	1ad7      	sublt	r7, r2, r3
 80097c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80097c6:	eba3 0801 	sub.w	r8, r3, r1
 80097ca:	4490      	add	r8, r2
 80097cc:	4ba3      	ldr	r3, [pc, #652]	; (8009a5c <_strtod_l+0x964>)
 80097ce:	f108 38ff 	add.w	r8, r8, #4294967295
 80097d2:	4598      	cmp	r8, r3
 80097d4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80097d8:	f280 80cc 	bge.w	8009974 <_strtod_l+0x87c>
 80097dc:	eba3 0308 	sub.w	r3, r3, r8
 80097e0:	2b1f      	cmp	r3, #31
 80097e2:	eba2 0203 	sub.w	r2, r2, r3
 80097e6:	f04f 0101 	mov.w	r1, #1
 80097ea:	f300 80b6 	bgt.w	800995a <_strtod_l+0x862>
 80097ee:	fa01 f303 	lsl.w	r3, r1, r3
 80097f2:	9311      	str	r3, [sp, #68]	; 0x44
 80097f4:	2300      	movs	r3, #0
 80097f6:	930c      	str	r3, [sp, #48]	; 0x30
 80097f8:	eb09 0802 	add.w	r8, r9, r2
 80097fc:	9b04      	ldr	r3, [sp, #16]
 80097fe:	45c1      	cmp	r9, r8
 8009800:	4417      	add	r7, r2
 8009802:	441f      	add	r7, r3
 8009804:	464b      	mov	r3, r9
 8009806:	bfa8      	it	ge
 8009808:	4643      	movge	r3, r8
 800980a:	42bb      	cmp	r3, r7
 800980c:	bfa8      	it	ge
 800980e:	463b      	movge	r3, r7
 8009810:	2b00      	cmp	r3, #0
 8009812:	bfc2      	ittt	gt
 8009814:	eba8 0803 	subgt.w	r8, r8, r3
 8009818:	1aff      	subgt	r7, r7, r3
 800981a:	eba9 0903 	subgt.w	r9, r9, r3
 800981e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009820:	2b00      	cmp	r3, #0
 8009822:	dd17      	ble.n	8009854 <_strtod_l+0x75c>
 8009824:	4631      	mov	r1, r6
 8009826:	461a      	mov	r2, r3
 8009828:	4620      	mov	r0, r4
 800982a:	f002 f9e7 	bl	800bbfc <__pow5mult>
 800982e:	4606      	mov	r6, r0
 8009830:	2800      	cmp	r0, #0
 8009832:	f43f aead 	beq.w	8009590 <_strtod_l+0x498>
 8009836:	4601      	mov	r1, r0
 8009838:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800983a:	4620      	mov	r0, r4
 800983c:	f002 f938 	bl	800bab0 <__multiply>
 8009840:	900f      	str	r0, [sp, #60]	; 0x3c
 8009842:	2800      	cmp	r0, #0
 8009844:	f43f aea4 	beq.w	8009590 <_strtod_l+0x498>
 8009848:	991e      	ldr	r1, [sp, #120]	; 0x78
 800984a:	4620      	mov	r0, r4
 800984c:	f002 f814 	bl	800b878 <_Bfree>
 8009850:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009852:	931e      	str	r3, [sp, #120]	; 0x78
 8009854:	f1b8 0f00 	cmp.w	r8, #0
 8009858:	f300 8091 	bgt.w	800997e <_strtod_l+0x886>
 800985c:	9b08      	ldr	r3, [sp, #32]
 800985e:	2b00      	cmp	r3, #0
 8009860:	dd08      	ble.n	8009874 <_strtod_l+0x77c>
 8009862:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009864:	9907      	ldr	r1, [sp, #28]
 8009866:	4620      	mov	r0, r4
 8009868:	f002 f9c8 	bl	800bbfc <__pow5mult>
 800986c:	9007      	str	r0, [sp, #28]
 800986e:	2800      	cmp	r0, #0
 8009870:	f43f ae8e 	beq.w	8009590 <_strtod_l+0x498>
 8009874:	2f00      	cmp	r7, #0
 8009876:	dd08      	ble.n	800988a <_strtod_l+0x792>
 8009878:	9907      	ldr	r1, [sp, #28]
 800987a:	463a      	mov	r2, r7
 800987c:	4620      	mov	r0, r4
 800987e:	f002 fa17 	bl	800bcb0 <__lshift>
 8009882:	9007      	str	r0, [sp, #28]
 8009884:	2800      	cmp	r0, #0
 8009886:	f43f ae83 	beq.w	8009590 <_strtod_l+0x498>
 800988a:	f1b9 0f00 	cmp.w	r9, #0
 800988e:	dd08      	ble.n	80098a2 <_strtod_l+0x7aa>
 8009890:	4631      	mov	r1, r6
 8009892:	464a      	mov	r2, r9
 8009894:	4620      	mov	r0, r4
 8009896:	f002 fa0b 	bl	800bcb0 <__lshift>
 800989a:	4606      	mov	r6, r0
 800989c:	2800      	cmp	r0, #0
 800989e:	f43f ae77 	beq.w	8009590 <_strtod_l+0x498>
 80098a2:	9a07      	ldr	r2, [sp, #28]
 80098a4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80098a6:	4620      	mov	r0, r4
 80098a8:	f002 fa8a 	bl	800bdc0 <__mdiff>
 80098ac:	4605      	mov	r5, r0
 80098ae:	2800      	cmp	r0, #0
 80098b0:	f43f ae6e 	beq.w	8009590 <_strtod_l+0x498>
 80098b4:	68c3      	ldr	r3, [r0, #12]
 80098b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80098b8:	2300      	movs	r3, #0
 80098ba:	60c3      	str	r3, [r0, #12]
 80098bc:	4631      	mov	r1, r6
 80098be:	f002 fa63 	bl	800bd88 <__mcmp>
 80098c2:	2800      	cmp	r0, #0
 80098c4:	da65      	bge.n	8009992 <_strtod_l+0x89a>
 80098c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098c8:	ea53 030a 	orrs.w	r3, r3, sl
 80098cc:	f040 8087 	bne.w	80099de <_strtod_l+0x8e6>
 80098d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	f040 8082 	bne.w	80099de <_strtod_l+0x8e6>
 80098da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80098de:	0d1b      	lsrs	r3, r3, #20
 80098e0:	051b      	lsls	r3, r3, #20
 80098e2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80098e6:	d97a      	bls.n	80099de <_strtod_l+0x8e6>
 80098e8:	696b      	ldr	r3, [r5, #20]
 80098ea:	b913      	cbnz	r3, 80098f2 <_strtod_l+0x7fa>
 80098ec:	692b      	ldr	r3, [r5, #16]
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	dd75      	ble.n	80099de <_strtod_l+0x8e6>
 80098f2:	4629      	mov	r1, r5
 80098f4:	2201      	movs	r2, #1
 80098f6:	4620      	mov	r0, r4
 80098f8:	f002 f9da 	bl	800bcb0 <__lshift>
 80098fc:	4631      	mov	r1, r6
 80098fe:	4605      	mov	r5, r0
 8009900:	f002 fa42 	bl	800bd88 <__mcmp>
 8009904:	2800      	cmp	r0, #0
 8009906:	dd6a      	ble.n	80099de <_strtod_l+0x8e6>
 8009908:	9904      	ldr	r1, [sp, #16]
 800990a:	4a55      	ldr	r2, [pc, #340]	; (8009a60 <_strtod_l+0x968>)
 800990c:	465b      	mov	r3, fp
 800990e:	2900      	cmp	r1, #0
 8009910:	f000 8085 	beq.w	8009a1e <_strtod_l+0x926>
 8009914:	ea02 010b 	and.w	r1, r2, fp
 8009918:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800991c:	dc7f      	bgt.n	8009a1e <_strtod_l+0x926>
 800991e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009922:	f77f aeaa 	ble.w	800967a <_strtod_l+0x582>
 8009926:	4a4f      	ldr	r2, [pc, #316]	; (8009a64 <_strtod_l+0x96c>)
 8009928:	2300      	movs	r3, #0
 800992a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800992e:	4650      	mov	r0, sl
 8009930:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8009934:	4659      	mov	r1, fp
 8009936:	f7f6 fe5f 	bl	80005f8 <__aeabi_dmul>
 800993a:	460b      	mov	r3, r1
 800993c:	4303      	orrs	r3, r0
 800993e:	bf08      	it	eq
 8009940:	2322      	moveq	r3, #34	; 0x22
 8009942:	4682      	mov	sl, r0
 8009944:	468b      	mov	fp, r1
 8009946:	bf08      	it	eq
 8009948:	6023      	streq	r3, [r4, #0]
 800994a:	e62b      	b.n	80095a4 <_strtod_l+0x4ac>
 800994c:	f04f 32ff 	mov.w	r2, #4294967295
 8009950:	fa02 f303 	lsl.w	r3, r2, r3
 8009954:	ea03 0a0a 	and.w	sl, r3, sl
 8009958:	e6de      	b.n	8009718 <_strtod_l+0x620>
 800995a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800995e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009962:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009966:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800996a:	fa01 f308 	lsl.w	r3, r1, r8
 800996e:	930c      	str	r3, [sp, #48]	; 0x30
 8009970:	9111      	str	r1, [sp, #68]	; 0x44
 8009972:	e741      	b.n	80097f8 <_strtod_l+0x700>
 8009974:	2300      	movs	r3, #0
 8009976:	930c      	str	r3, [sp, #48]	; 0x30
 8009978:	2301      	movs	r3, #1
 800997a:	9311      	str	r3, [sp, #68]	; 0x44
 800997c:	e73c      	b.n	80097f8 <_strtod_l+0x700>
 800997e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009980:	4642      	mov	r2, r8
 8009982:	4620      	mov	r0, r4
 8009984:	f002 f994 	bl	800bcb0 <__lshift>
 8009988:	901e      	str	r0, [sp, #120]	; 0x78
 800998a:	2800      	cmp	r0, #0
 800998c:	f47f af66 	bne.w	800985c <_strtod_l+0x764>
 8009990:	e5fe      	b.n	8009590 <_strtod_l+0x498>
 8009992:	465f      	mov	r7, fp
 8009994:	d16e      	bne.n	8009a74 <_strtod_l+0x97c>
 8009996:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009998:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800999c:	b342      	cbz	r2, 80099f0 <_strtod_l+0x8f8>
 800999e:	4a32      	ldr	r2, [pc, #200]	; (8009a68 <_strtod_l+0x970>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d128      	bne.n	80099f6 <_strtod_l+0x8fe>
 80099a4:	9b04      	ldr	r3, [sp, #16]
 80099a6:	4650      	mov	r0, sl
 80099a8:	b1eb      	cbz	r3, 80099e6 <_strtod_l+0x8ee>
 80099aa:	4a2d      	ldr	r2, [pc, #180]	; (8009a60 <_strtod_l+0x968>)
 80099ac:	403a      	ands	r2, r7
 80099ae:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80099b2:	f04f 31ff 	mov.w	r1, #4294967295
 80099b6:	d819      	bhi.n	80099ec <_strtod_l+0x8f4>
 80099b8:	0d12      	lsrs	r2, r2, #20
 80099ba:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80099be:	fa01 f303 	lsl.w	r3, r1, r3
 80099c2:	4298      	cmp	r0, r3
 80099c4:	d117      	bne.n	80099f6 <_strtod_l+0x8fe>
 80099c6:	4b29      	ldr	r3, [pc, #164]	; (8009a6c <_strtod_l+0x974>)
 80099c8:	429f      	cmp	r7, r3
 80099ca:	d102      	bne.n	80099d2 <_strtod_l+0x8da>
 80099cc:	3001      	adds	r0, #1
 80099ce:	f43f addf 	beq.w	8009590 <_strtod_l+0x498>
 80099d2:	4b23      	ldr	r3, [pc, #140]	; (8009a60 <_strtod_l+0x968>)
 80099d4:	403b      	ands	r3, r7
 80099d6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80099da:	f04f 0a00 	mov.w	sl, #0
 80099de:	9b04      	ldr	r3, [sp, #16]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d1a0      	bne.n	8009926 <_strtod_l+0x82e>
 80099e4:	e5de      	b.n	80095a4 <_strtod_l+0x4ac>
 80099e6:	f04f 33ff 	mov.w	r3, #4294967295
 80099ea:	e7ea      	b.n	80099c2 <_strtod_l+0x8ca>
 80099ec:	460b      	mov	r3, r1
 80099ee:	e7e8      	b.n	80099c2 <_strtod_l+0x8ca>
 80099f0:	ea53 030a 	orrs.w	r3, r3, sl
 80099f4:	d088      	beq.n	8009908 <_strtod_l+0x810>
 80099f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099f8:	b1db      	cbz	r3, 8009a32 <_strtod_l+0x93a>
 80099fa:	423b      	tst	r3, r7
 80099fc:	d0ef      	beq.n	80099de <_strtod_l+0x8e6>
 80099fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a00:	9a04      	ldr	r2, [sp, #16]
 8009a02:	4650      	mov	r0, sl
 8009a04:	4659      	mov	r1, fp
 8009a06:	b1c3      	cbz	r3, 8009a3a <_strtod_l+0x942>
 8009a08:	f7ff fb58 	bl	80090bc <sulp>
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	460b      	mov	r3, r1
 8009a10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009a14:	f7f6 fc3a 	bl	800028c <__adddf3>
 8009a18:	4682      	mov	sl, r0
 8009a1a:	468b      	mov	fp, r1
 8009a1c:	e7df      	b.n	80099de <_strtod_l+0x8e6>
 8009a1e:	4013      	ands	r3, r2
 8009a20:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009a24:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009a28:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009a2c:	f04f 3aff 	mov.w	sl, #4294967295
 8009a30:	e7d5      	b.n	80099de <_strtod_l+0x8e6>
 8009a32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a34:	ea13 0f0a 	tst.w	r3, sl
 8009a38:	e7e0      	b.n	80099fc <_strtod_l+0x904>
 8009a3a:	f7ff fb3f 	bl	80090bc <sulp>
 8009a3e:	4602      	mov	r2, r0
 8009a40:	460b      	mov	r3, r1
 8009a42:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009a46:	f7f6 fc1f 	bl	8000288 <__aeabi_dsub>
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	4682      	mov	sl, r0
 8009a50:	468b      	mov	fp, r1
 8009a52:	f7f7 f839 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a56:	2800      	cmp	r0, #0
 8009a58:	d0c1      	beq.n	80099de <_strtod_l+0x8e6>
 8009a5a:	e60e      	b.n	800967a <_strtod_l+0x582>
 8009a5c:	fffffc02 	.word	0xfffffc02
 8009a60:	7ff00000 	.word	0x7ff00000
 8009a64:	39500000 	.word	0x39500000
 8009a68:	000fffff 	.word	0x000fffff
 8009a6c:	7fefffff 	.word	0x7fefffff
 8009a70:	0800f258 	.word	0x0800f258
 8009a74:	4631      	mov	r1, r6
 8009a76:	4628      	mov	r0, r5
 8009a78:	f002 fb02 	bl	800c080 <__ratio>
 8009a7c:	ec59 8b10 	vmov	r8, r9, d0
 8009a80:	ee10 0a10 	vmov	r0, s0
 8009a84:	2200      	movs	r2, #0
 8009a86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009a8a:	4649      	mov	r1, r9
 8009a8c:	f7f7 f830 	bl	8000af0 <__aeabi_dcmple>
 8009a90:	2800      	cmp	r0, #0
 8009a92:	d07c      	beq.n	8009b8e <_strtod_l+0xa96>
 8009a94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d04c      	beq.n	8009b34 <_strtod_l+0xa3c>
 8009a9a:	4b95      	ldr	r3, [pc, #596]	; (8009cf0 <_strtod_l+0xbf8>)
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009aa2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009cf0 <_strtod_l+0xbf8>
 8009aa6:	f04f 0800 	mov.w	r8, #0
 8009aaa:	4b92      	ldr	r3, [pc, #584]	; (8009cf4 <_strtod_l+0xbfc>)
 8009aac:	403b      	ands	r3, r7
 8009aae:	9311      	str	r3, [sp, #68]	; 0x44
 8009ab0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009ab2:	4b91      	ldr	r3, [pc, #580]	; (8009cf8 <_strtod_l+0xc00>)
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	f040 80b2 	bne.w	8009c1e <_strtod_l+0xb26>
 8009aba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009abe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009ac2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009ac6:	ec4b ab10 	vmov	d0, sl, fp
 8009aca:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8009ace:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009ad2:	f002 f9fd 	bl	800bed0 <__ulp>
 8009ad6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009ada:	ec53 2b10 	vmov	r2, r3, d0
 8009ade:	f7f6 fd8b 	bl	80005f8 <__aeabi_dmul>
 8009ae2:	4652      	mov	r2, sl
 8009ae4:	465b      	mov	r3, fp
 8009ae6:	f7f6 fbd1 	bl	800028c <__adddf3>
 8009aea:	460b      	mov	r3, r1
 8009aec:	4981      	ldr	r1, [pc, #516]	; (8009cf4 <_strtod_l+0xbfc>)
 8009aee:	4a83      	ldr	r2, [pc, #524]	; (8009cfc <_strtod_l+0xc04>)
 8009af0:	4019      	ands	r1, r3
 8009af2:	4291      	cmp	r1, r2
 8009af4:	4682      	mov	sl, r0
 8009af6:	d95e      	bls.n	8009bb6 <_strtod_l+0xabe>
 8009af8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009afa:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d103      	bne.n	8009b0a <_strtod_l+0xa12>
 8009b02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b04:	3301      	adds	r3, #1
 8009b06:	f43f ad43 	beq.w	8009590 <_strtod_l+0x498>
 8009b0a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8009d08 <_strtod_l+0xc10>
 8009b0e:	f04f 3aff 	mov.w	sl, #4294967295
 8009b12:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009b14:	4620      	mov	r0, r4
 8009b16:	f001 feaf 	bl	800b878 <_Bfree>
 8009b1a:	9907      	ldr	r1, [sp, #28]
 8009b1c:	4620      	mov	r0, r4
 8009b1e:	f001 feab 	bl	800b878 <_Bfree>
 8009b22:	4631      	mov	r1, r6
 8009b24:	4620      	mov	r0, r4
 8009b26:	f001 fea7 	bl	800b878 <_Bfree>
 8009b2a:	4629      	mov	r1, r5
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	f001 fea3 	bl	800b878 <_Bfree>
 8009b32:	e613      	b.n	800975c <_strtod_l+0x664>
 8009b34:	f1ba 0f00 	cmp.w	sl, #0
 8009b38:	d11b      	bne.n	8009b72 <_strtod_l+0xa7a>
 8009b3a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b3e:	b9f3      	cbnz	r3, 8009b7e <_strtod_l+0xa86>
 8009b40:	4b6b      	ldr	r3, [pc, #428]	; (8009cf0 <_strtod_l+0xbf8>)
 8009b42:	2200      	movs	r2, #0
 8009b44:	4640      	mov	r0, r8
 8009b46:	4649      	mov	r1, r9
 8009b48:	f7f6 ffc8 	bl	8000adc <__aeabi_dcmplt>
 8009b4c:	b9d0      	cbnz	r0, 8009b84 <_strtod_l+0xa8c>
 8009b4e:	4640      	mov	r0, r8
 8009b50:	4649      	mov	r1, r9
 8009b52:	4b6b      	ldr	r3, [pc, #428]	; (8009d00 <_strtod_l+0xc08>)
 8009b54:	2200      	movs	r2, #0
 8009b56:	f7f6 fd4f 	bl	80005f8 <__aeabi_dmul>
 8009b5a:	4680      	mov	r8, r0
 8009b5c:	4689      	mov	r9, r1
 8009b5e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009b62:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8009b66:	931b      	str	r3, [sp, #108]	; 0x6c
 8009b68:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8009b6c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009b70:	e79b      	b.n	8009aaa <_strtod_l+0x9b2>
 8009b72:	f1ba 0f01 	cmp.w	sl, #1
 8009b76:	d102      	bne.n	8009b7e <_strtod_l+0xa86>
 8009b78:	2f00      	cmp	r7, #0
 8009b7a:	f43f ad7e 	beq.w	800967a <_strtod_l+0x582>
 8009b7e:	4b61      	ldr	r3, [pc, #388]	; (8009d04 <_strtod_l+0xc0c>)
 8009b80:	2200      	movs	r2, #0
 8009b82:	e78c      	b.n	8009a9e <_strtod_l+0x9a6>
 8009b84:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009d00 <_strtod_l+0xc08>
 8009b88:	f04f 0800 	mov.w	r8, #0
 8009b8c:	e7e7      	b.n	8009b5e <_strtod_l+0xa66>
 8009b8e:	4b5c      	ldr	r3, [pc, #368]	; (8009d00 <_strtod_l+0xc08>)
 8009b90:	4640      	mov	r0, r8
 8009b92:	4649      	mov	r1, r9
 8009b94:	2200      	movs	r2, #0
 8009b96:	f7f6 fd2f 	bl	80005f8 <__aeabi_dmul>
 8009b9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b9c:	4680      	mov	r8, r0
 8009b9e:	4689      	mov	r9, r1
 8009ba0:	b933      	cbnz	r3, 8009bb0 <_strtod_l+0xab8>
 8009ba2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ba6:	9012      	str	r0, [sp, #72]	; 0x48
 8009ba8:	9313      	str	r3, [sp, #76]	; 0x4c
 8009baa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8009bae:	e7dd      	b.n	8009b6c <_strtod_l+0xa74>
 8009bb0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8009bb4:	e7f9      	b.n	8009baa <_strtod_l+0xab2>
 8009bb6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009bba:	9b04      	ldr	r3, [sp, #16]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d1a8      	bne.n	8009b12 <_strtod_l+0xa1a>
 8009bc0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009bc4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009bc6:	0d1b      	lsrs	r3, r3, #20
 8009bc8:	051b      	lsls	r3, r3, #20
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	d1a1      	bne.n	8009b12 <_strtod_l+0xa1a>
 8009bce:	4640      	mov	r0, r8
 8009bd0:	4649      	mov	r1, r9
 8009bd2:	f7f7 f871 	bl	8000cb8 <__aeabi_d2lz>
 8009bd6:	f7f6 fce1 	bl	800059c <__aeabi_l2d>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	460b      	mov	r3, r1
 8009bde:	4640      	mov	r0, r8
 8009be0:	4649      	mov	r1, r9
 8009be2:	f7f6 fb51 	bl	8000288 <__aeabi_dsub>
 8009be6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009be8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009bec:	ea43 030a 	orr.w	r3, r3, sl
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	4680      	mov	r8, r0
 8009bf4:	4689      	mov	r9, r1
 8009bf6:	d053      	beq.n	8009ca0 <_strtod_l+0xba8>
 8009bf8:	a335      	add	r3, pc, #212	; (adr r3, 8009cd0 <_strtod_l+0xbd8>)
 8009bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfe:	f7f6 ff6d 	bl	8000adc <__aeabi_dcmplt>
 8009c02:	2800      	cmp	r0, #0
 8009c04:	f47f acce 	bne.w	80095a4 <_strtod_l+0x4ac>
 8009c08:	a333      	add	r3, pc, #204	; (adr r3, 8009cd8 <_strtod_l+0xbe0>)
 8009c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c0e:	4640      	mov	r0, r8
 8009c10:	4649      	mov	r1, r9
 8009c12:	f7f6 ff81 	bl	8000b18 <__aeabi_dcmpgt>
 8009c16:	2800      	cmp	r0, #0
 8009c18:	f43f af7b 	beq.w	8009b12 <_strtod_l+0xa1a>
 8009c1c:	e4c2      	b.n	80095a4 <_strtod_l+0x4ac>
 8009c1e:	9b04      	ldr	r3, [sp, #16]
 8009c20:	b333      	cbz	r3, 8009c70 <_strtod_l+0xb78>
 8009c22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c24:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009c28:	d822      	bhi.n	8009c70 <_strtod_l+0xb78>
 8009c2a:	a32d      	add	r3, pc, #180	; (adr r3, 8009ce0 <_strtod_l+0xbe8>)
 8009c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c30:	4640      	mov	r0, r8
 8009c32:	4649      	mov	r1, r9
 8009c34:	f7f6 ff5c 	bl	8000af0 <__aeabi_dcmple>
 8009c38:	b1a0      	cbz	r0, 8009c64 <_strtod_l+0xb6c>
 8009c3a:	4649      	mov	r1, r9
 8009c3c:	4640      	mov	r0, r8
 8009c3e:	f7f6 ffb3 	bl	8000ba8 <__aeabi_d2uiz>
 8009c42:	2801      	cmp	r0, #1
 8009c44:	bf38      	it	cc
 8009c46:	2001      	movcc	r0, #1
 8009c48:	f7f6 fc5c 	bl	8000504 <__aeabi_ui2d>
 8009c4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c4e:	4680      	mov	r8, r0
 8009c50:	4689      	mov	r9, r1
 8009c52:	bb13      	cbnz	r3, 8009c9a <_strtod_l+0xba2>
 8009c54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c58:	9014      	str	r0, [sp, #80]	; 0x50
 8009c5a:	9315      	str	r3, [sp, #84]	; 0x54
 8009c5c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009c60:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009c64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c66:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009c68:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009c6c:	1a9b      	subs	r3, r3, r2
 8009c6e:	930d      	str	r3, [sp, #52]	; 0x34
 8009c70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009c74:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009c78:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009c7c:	f002 f928 	bl	800bed0 <__ulp>
 8009c80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009c84:	ec53 2b10 	vmov	r2, r3, d0
 8009c88:	f7f6 fcb6 	bl	80005f8 <__aeabi_dmul>
 8009c8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009c90:	f7f6 fafc 	bl	800028c <__adddf3>
 8009c94:	4682      	mov	sl, r0
 8009c96:	468b      	mov	fp, r1
 8009c98:	e78f      	b.n	8009bba <_strtod_l+0xac2>
 8009c9a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8009c9e:	e7dd      	b.n	8009c5c <_strtod_l+0xb64>
 8009ca0:	a311      	add	r3, pc, #68	; (adr r3, 8009ce8 <_strtod_l+0xbf0>)
 8009ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca6:	f7f6 ff19 	bl	8000adc <__aeabi_dcmplt>
 8009caa:	e7b4      	b.n	8009c16 <_strtod_l+0xb1e>
 8009cac:	2300      	movs	r3, #0
 8009cae:	930e      	str	r3, [sp, #56]	; 0x38
 8009cb0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009cb2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009cb4:	6013      	str	r3, [r2, #0]
 8009cb6:	f7ff ba65 	b.w	8009184 <_strtod_l+0x8c>
 8009cba:	2b65      	cmp	r3, #101	; 0x65
 8009cbc:	f43f ab5d 	beq.w	800937a <_strtod_l+0x282>
 8009cc0:	2b45      	cmp	r3, #69	; 0x45
 8009cc2:	f43f ab5a 	beq.w	800937a <_strtod_l+0x282>
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	f7ff bb92 	b.w	80093f0 <_strtod_l+0x2f8>
 8009ccc:	f3af 8000 	nop.w
 8009cd0:	94a03595 	.word	0x94a03595
 8009cd4:	3fdfffff 	.word	0x3fdfffff
 8009cd8:	35afe535 	.word	0x35afe535
 8009cdc:	3fe00000 	.word	0x3fe00000
 8009ce0:	ffc00000 	.word	0xffc00000
 8009ce4:	41dfffff 	.word	0x41dfffff
 8009ce8:	94a03595 	.word	0x94a03595
 8009cec:	3fcfffff 	.word	0x3fcfffff
 8009cf0:	3ff00000 	.word	0x3ff00000
 8009cf4:	7ff00000 	.word	0x7ff00000
 8009cf8:	7fe00000 	.word	0x7fe00000
 8009cfc:	7c9fffff 	.word	0x7c9fffff
 8009d00:	3fe00000 	.word	0x3fe00000
 8009d04:	bff00000 	.word	0xbff00000
 8009d08:	7fefffff 	.word	0x7fefffff

08009d0c <_strtod_r>:
 8009d0c:	4b01      	ldr	r3, [pc, #4]	; (8009d14 <_strtod_r+0x8>)
 8009d0e:	f7ff b9f3 	b.w	80090f8 <_strtod_l>
 8009d12:	bf00      	nop
 8009d14:	20000098 	.word	0x20000098

08009d18 <_strtol_l.isra.0>:
 8009d18:	2b01      	cmp	r3, #1
 8009d1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d1e:	d001      	beq.n	8009d24 <_strtol_l.isra.0+0xc>
 8009d20:	2b24      	cmp	r3, #36	; 0x24
 8009d22:	d906      	bls.n	8009d32 <_strtol_l.isra.0+0x1a>
 8009d24:	f7fe f8ae 	bl	8007e84 <__errno>
 8009d28:	2316      	movs	r3, #22
 8009d2a:	6003      	str	r3, [r0, #0]
 8009d2c:	2000      	movs	r0, #0
 8009d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d32:	4f3a      	ldr	r7, [pc, #232]	; (8009e1c <_strtol_l.isra.0+0x104>)
 8009d34:	468e      	mov	lr, r1
 8009d36:	4676      	mov	r6, lr
 8009d38:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009d3c:	5de5      	ldrb	r5, [r4, r7]
 8009d3e:	f015 0508 	ands.w	r5, r5, #8
 8009d42:	d1f8      	bne.n	8009d36 <_strtol_l.isra.0+0x1e>
 8009d44:	2c2d      	cmp	r4, #45	; 0x2d
 8009d46:	d134      	bne.n	8009db2 <_strtol_l.isra.0+0x9a>
 8009d48:	f89e 4000 	ldrb.w	r4, [lr]
 8009d4c:	f04f 0801 	mov.w	r8, #1
 8009d50:	f106 0e02 	add.w	lr, r6, #2
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d05c      	beq.n	8009e12 <_strtol_l.isra.0+0xfa>
 8009d58:	2b10      	cmp	r3, #16
 8009d5a:	d10c      	bne.n	8009d76 <_strtol_l.isra.0+0x5e>
 8009d5c:	2c30      	cmp	r4, #48	; 0x30
 8009d5e:	d10a      	bne.n	8009d76 <_strtol_l.isra.0+0x5e>
 8009d60:	f89e 4000 	ldrb.w	r4, [lr]
 8009d64:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009d68:	2c58      	cmp	r4, #88	; 0x58
 8009d6a:	d14d      	bne.n	8009e08 <_strtol_l.isra.0+0xf0>
 8009d6c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8009d70:	2310      	movs	r3, #16
 8009d72:	f10e 0e02 	add.w	lr, lr, #2
 8009d76:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8009d7a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009d7e:	2600      	movs	r6, #0
 8009d80:	fbbc f9f3 	udiv	r9, ip, r3
 8009d84:	4635      	mov	r5, r6
 8009d86:	fb03 ca19 	mls	sl, r3, r9, ip
 8009d8a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009d8e:	2f09      	cmp	r7, #9
 8009d90:	d818      	bhi.n	8009dc4 <_strtol_l.isra.0+0xac>
 8009d92:	463c      	mov	r4, r7
 8009d94:	42a3      	cmp	r3, r4
 8009d96:	dd24      	ble.n	8009de2 <_strtol_l.isra.0+0xca>
 8009d98:	2e00      	cmp	r6, #0
 8009d9a:	db1f      	blt.n	8009ddc <_strtol_l.isra.0+0xc4>
 8009d9c:	45a9      	cmp	r9, r5
 8009d9e:	d31d      	bcc.n	8009ddc <_strtol_l.isra.0+0xc4>
 8009da0:	d101      	bne.n	8009da6 <_strtol_l.isra.0+0x8e>
 8009da2:	45a2      	cmp	sl, r4
 8009da4:	db1a      	blt.n	8009ddc <_strtol_l.isra.0+0xc4>
 8009da6:	fb05 4503 	mla	r5, r5, r3, r4
 8009daa:	2601      	movs	r6, #1
 8009dac:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009db0:	e7eb      	b.n	8009d8a <_strtol_l.isra.0+0x72>
 8009db2:	2c2b      	cmp	r4, #43	; 0x2b
 8009db4:	bf08      	it	eq
 8009db6:	f89e 4000 	ldrbeq.w	r4, [lr]
 8009dba:	46a8      	mov	r8, r5
 8009dbc:	bf08      	it	eq
 8009dbe:	f106 0e02 	addeq.w	lr, r6, #2
 8009dc2:	e7c7      	b.n	8009d54 <_strtol_l.isra.0+0x3c>
 8009dc4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009dc8:	2f19      	cmp	r7, #25
 8009dca:	d801      	bhi.n	8009dd0 <_strtol_l.isra.0+0xb8>
 8009dcc:	3c37      	subs	r4, #55	; 0x37
 8009dce:	e7e1      	b.n	8009d94 <_strtol_l.isra.0+0x7c>
 8009dd0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009dd4:	2f19      	cmp	r7, #25
 8009dd6:	d804      	bhi.n	8009de2 <_strtol_l.isra.0+0xca>
 8009dd8:	3c57      	subs	r4, #87	; 0x57
 8009dda:	e7db      	b.n	8009d94 <_strtol_l.isra.0+0x7c>
 8009ddc:	f04f 36ff 	mov.w	r6, #4294967295
 8009de0:	e7e4      	b.n	8009dac <_strtol_l.isra.0+0x94>
 8009de2:	2e00      	cmp	r6, #0
 8009de4:	da05      	bge.n	8009df2 <_strtol_l.isra.0+0xda>
 8009de6:	2322      	movs	r3, #34	; 0x22
 8009de8:	6003      	str	r3, [r0, #0]
 8009dea:	4665      	mov	r5, ip
 8009dec:	b942      	cbnz	r2, 8009e00 <_strtol_l.isra.0+0xe8>
 8009dee:	4628      	mov	r0, r5
 8009df0:	e79d      	b.n	8009d2e <_strtol_l.isra.0+0x16>
 8009df2:	f1b8 0f00 	cmp.w	r8, #0
 8009df6:	d000      	beq.n	8009dfa <_strtol_l.isra.0+0xe2>
 8009df8:	426d      	negs	r5, r5
 8009dfa:	2a00      	cmp	r2, #0
 8009dfc:	d0f7      	beq.n	8009dee <_strtol_l.isra.0+0xd6>
 8009dfe:	b10e      	cbz	r6, 8009e04 <_strtol_l.isra.0+0xec>
 8009e00:	f10e 31ff 	add.w	r1, lr, #4294967295
 8009e04:	6011      	str	r1, [r2, #0]
 8009e06:	e7f2      	b.n	8009dee <_strtol_l.isra.0+0xd6>
 8009e08:	2430      	movs	r4, #48	; 0x30
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d1b3      	bne.n	8009d76 <_strtol_l.isra.0+0x5e>
 8009e0e:	2308      	movs	r3, #8
 8009e10:	e7b1      	b.n	8009d76 <_strtol_l.isra.0+0x5e>
 8009e12:	2c30      	cmp	r4, #48	; 0x30
 8009e14:	d0a4      	beq.n	8009d60 <_strtol_l.isra.0+0x48>
 8009e16:	230a      	movs	r3, #10
 8009e18:	e7ad      	b.n	8009d76 <_strtol_l.isra.0+0x5e>
 8009e1a:	bf00      	nop
 8009e1c:	0800f281 	.word	0x0800f281

08009e20 <_strtol_r>:
 8009e20:	f7ff bf7a 	b.w	8009d18 <_strtol_l.isra.0>

08009e24 <__swbuf_r>:
 8009e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e26:	460e      	mov	r6, r1
 8009e28:	4614      	mov	r4, r2
 8009e2a:	4605      	mov	r5, r0
 8009e2c:	b118      	cbz	r0, 8009e36 <__swbuf_r+0x12>
 8009e2e:	6983      	ldr	r3, [r0, #24]
 8009e30:	b90b      	cbnz	r3, 8009e36 <__swbuf_r+0x12>
 8009e32:	f001 f84b 	bl	800aecc <__sinit>
 8009e36:	4b21      	ldr	r3, [pc, #132]	; (8009ebc <__swbuf_r+0x98>)
 8009e38:	429c      	cmp	r4, r3
 8009e3a:	d12b      	bne.n	8009e94 <__swbuf_r+0x70>
 8009e3c:	686c      	ldr	r4, [r5, #4]
 8009e3e:	69a3      	ldr	r3, [r4, #24]
 8009e40:	60a3      	str	r3, [r4, #8]
 8009e42:	89a3      	ldrh	r3, [r4, #12]
 8009e44:	071a      	lsls	r2, r3, #28
 8009e46:	d52f      	bpl.n	8009ea8 <__swbuf_r+0x84>
 8009e48:	6923      	ldr	r3, [r4, #16]
 8009e4a:	b36b      	cbz	r3, 8009ea8 <__swbuf_r+0x84>
 8009e4c:	6923      	ldr	r3, [r4, #16]
 8009e4e:	6820      	ldr	r0, [r4, #0]
 8009e50:	1ac0      	subs	r0, r0, r3
 8009e52:	6963      	ldr	r3, [r4, #20]
 8009e54:	b2f6      	uxtb	r6, r6
 8009e56:	4283      	cmp	r3, r0
 8009e58:	4637      	mov	r7, r6
 8009e5a:	dc04      	bgt.n	8009e66 <__swbuf_r+0x42>
 8009e5c:	4621      	mov	r1, r4
 8009e5e:	4628      	mov	r0, r5
 8009e60:	f000 ffa0 	bl	800ada4 <_fflush_r>
 8009e64:	bb30      	cbnz	r0, 8009eb4 <__swbuf_r+0x90>
 8009e66:	68a3      	ldr	r3, [r4, #8]
 8009e68:	3b01      	subs	r3, #1
 8009e6a:	60a3      	str	r3, [r4, #8]
 8009e6c:	6823      	ldr	r3, [r4, #0]
 8009e6e:	1c5a      	adds	r2, r3, #1
 8009e70:	6022      	str	r2, [r4, #0]
 8009e72:	701e      	strb	r6, [r3, #0]
 8009e74:	6963      	ldr	r3, [r4, #20]
 8009e76:	3001      	adds	r0, #1
 8009e78:	4283      	cmp	r3, r0
 8009e7a:	d004      	beq.n	8009e86 <__swbuf_r+0x62>
 8009e7c:	89a3      	ldrh	r3, [r4, #12]
 8009e7e:	07db      	lsls	r3, r3, #31
 8009e80:	d506      	bpl.n	8009e90 <__swbuf_r+0x6c>
 8009e82:	2e0a      	cmp	r6, #10
 8009e84:	d104      	bne.n	8009e90 <__swbuf_r+0x6c>
 8009e86:	4621      	mov	r1, r4
 8009e88:	4628      	mov	r0, r5
 8009e8a:	f000 ff8b 	bl	800ada4 <_fflush_r>
 8009e8e:	b988      	cbnz	r0, 8009eb4 <__swbuf_r+0x90>
 8009e90:	4638      	mov	r0, r7
 8009e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e94:	4b0a      	ldr	r3, [pc, #40]	; (8009ec0 <__swbuf_r+0x9c>)
 8009e96:	429c      	cmp	r4, r3
 8009e98:	d101      	bne.n	8009e9e <__swbuf_r+0x7a>
 8009e9a:	68ac      	ldr	r4, [r5, #8]
 8009e9c:	e7cf      	b.n	8009e3e <__swbuf_r+0x1a>
 8009e9e:	4b09      	ldr	r3, [pc, #36]	; (8009ec4 <__swbuf_r+0xa0>)
 8009ea0:	429c      	cmp	r4, r3
 8009ea2:	bf08      	it	eq
 8009ea4:	68ec      	ldreq	r4, [r5, #12]
 8009ea6:	e7ca      	b.n	8009e3e <__swbuf_r+0x1a>
 8009ea8:	4621      	mov	r1, r4
 8009eaa:	4628      	mov	r0, r5
 8009eac:	f000 f80c 	bl	8009ec8 <__swsetup_r>
 8009eb0:	2800      	cmp	r0, #0
 8009eb2:	d0cb      	beq.n	8009e4c <__swbuf_r+0x28>
 8009eb4:	f04f 37ff 	mov.w	r7, #4294967295
 8009eb8:	e7ea      	b.n	8009e90 <__swbuf_r+0x6c>
 8009eba:	bf00      	nop
 8009ebc:	0800f438 	.word	0x0800f438
 8009ec0:	0800f458 	.word	0x0800f458
 8009ec4:	0800f418 	.word	0x0800f418

08009ec8 <__swsetup_r>:
 8009ec8:	4b32      	ldr	r3, [pc, #200]	; (8009f94 <__swsetup_r+0xcc>)
 8009eca:	b570      	push	{r4, r5, r6, lr}
 8009ecc:	681d      	ldr	r5, [r3, #0]
 8009ece:	4606      	mov	r6, r0
 8009ed0:	460c      	mov	r4, r1
 8009ed2:	b125      	cbz	r5, 8009ede <__swsetup_r+0x16>
 8009ed4:	69ab      	ldr	r3, [r5, #24]
 8009ed6:	b913      	cbnz	r3, 8009ede <__swsetup_r+0x16>
 8009ed8:	4628      	mov	r0, r5
 8009eda:	f000 fff7 	bl	800aecc <__sinit>
 8009ede:	4b2e      	ldr	r3, [pc, #184]	; (8009f98 <__swsetup_r+0xd0>)
 8009ee0:	429c      	cmp	r4, r3
 8009ee2:	d10f      	bne.n	8009f04 <__swsetup_r+0x3c>
 8009ee4:	686c      	ldr	r4, [r5, #4]
 8009ee6:	89a3      	ldrh	r3, [r4, #12]
 8009ee8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009eec:	0719      	lsls	r1, r3, #28
 8009eee:	d42c      	bmi.n	8009f4a <__swsetup_r+0x82>
 8009ef0:	06dd      	lsls	r5, r3, #27
 8009ef2:	d411      	bmi.n	8009f18 <__swsetup_r+0x50>
 8009ef4:	2309      	movs	r3, #9
 8009ef6:	6033      	str	r3, [r6, #0]
 8009ef8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009efc:	81a3      	strh	r3, [r4, #12]
 8009efe:	f04f 30ff 	mov.w	r0, #4294967295
 8009f02:	e03e      	b.n	8009f82 <__swsetup_r+0xba>
 8009f04:	4b25      	ldr	r3, [pc, #148]	; (8009f9c <__swsetup_r+0xd4>)
 8009f06:	429c      	cmp	r4, r3
 8009f08:	d101      	bne.n	8009f0e <__swsetup_r+0x46>
 8009f0a:	68ac      	ldr	r4, [r5, #8]
 8009f0c:	e7eb      	b.n	8009ee6 <__swsetup_r+0x1e>
 8009f0e:	4b24      	ldr	r3, [pc, #144]	; (8009fa0 <__swsetup_r+0xd8>)
 8009f10:	429c      	cmp	r4, r3
 8009f12:	bf08      	it	eq
 8009f14:	68ec      	ldreq	r4, [r5, #12]
 8009f16:	e7e6      	b.n	8009ee6 <__swsetup_r+0x1e>
 8009f18:	0758      	lsls	r0, r3, #29
 8009f1a:	d512      	bpl.n	8009f42 <__swsetup_r+0x7a>
 8009f1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f1e:	b141      	cbz	r1, 8009f32 <__swsetup_r+0x6a>
 8009f20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f24:	4299      	cmp	r1, r3
 8009f26:	d002      	beq.n	8009f2e <__swsetup_r+0x66>
 8009f28:	4630      	mov	r0, r6
 8009f2a:	f7fe f811 	bl	8007f50 <_free_r>
 8009f2e:	2300      	movs	r3, #0
 8009f30:	6363      	str	r3, [r4, #52]	; 0x34
 8009f32:	89a3      	ldrh	r3, [r4, #12]
 8009f34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f38:	81a3      	strh	r3, [r4, #12]
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	6063      	str	r3, [r4, #4]
 8009f3e:	6923      	ldr	r3, [r4, #16]
 8009f40:	6023      	str	r3, [r4, #0]
 8009f42:	89a3      	ldrh	r3, [r4, #12]
 8009f44:	f043 0308 	orr.w	r3, r3, #8
 8009f48:	81a3      	strh	r3, [r4, #12]
 8009f4a:	6923      	ldr	r3, [r4, #16]
 8009f4c:	b94b      	cbnz	r3, 8009f62 <__swsetup_r+0x9a>
 8009f4e:	89a3      	ldrh	r3, [r4, #12]
 8009f50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f58:	d003      	beq.n	8009f62 <__swsetup_r+0x9a>
 8009f5a:	4621      	mov	r1, r4
 8009f5c:	4630      	mov	r0, r6
 8009f5e:	f001 fbed 	bl	800b73c <__smakebuf_r>
 8009f62:	89a0      	ldrh	r0, [r4, #12]
 8009f64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f68:	f010 0301 	ands.w	r3, r0, #1
 8009f6c:	d00a      	beq.n	8009f84 <__swsetup_r+0xbc>
 8009f6e:	2300      	movs	r3, #0
 8009f70:	60a3      	str	r3, [r4, #8]
 8009f72:	6963      	ldr	r3, [r4, #20]
 8009f74:	425b      	negs	r3, r3
 8009f76:	61a3      	str	r3, [r4, #24]
 8009f78:	6923      	ldr	r3, [r4, #16]
 8009f7a:	b943      	cbnz	r3, 8009f8e <__swsetup_r+0xc6>
 8009f7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009f80:	d1ba      	bne.n	8009ef8 <__swsetup_r+0x30>
 8009f82:	bd70      	pop	{r4, r5, r6, pc}
 8009f84:	0781      	lsls	r1, r0, #30
 8009f86:	bf58      	it	pl
 8009f88:	6963      	ldrpl	r3, [r4, #20]
 8009f8a:	60a3      	str	r3, [r4, #8]
 8009f8c:	e7f4      	b.n	8009f78 <__swsetup_r+0xb0>
 8009f8e:	2000      	movs	r0, #0
 8009f90:	e7f7      	b.n	8009f82 <__swsetup_r+0xba>
 8009f92:	bf00      	nop
 8009f94:	20000030 	.word	0x20000030
 8009f98:	0800f438 	.word	0x0800f438
 8009f9c:	0800f458 	.word	0x0800f458
 8009fa0:	0800f418 	.word	0x0800f418

08009fa4 <quorem>:
 8009fa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa8:	6903      	ldr	r3, [r0, #16]
 8009faa:	690c      	ldr	r4, [r1, #16]
 8009fac:	42a3      	cmp	r3, r4
 8009fae:	4607      	mov	r7, r0
 8009fb0:	f2c0 8081 	blt.w	800a0b6 <quorem+0x112>
 8009fb4:	3c01      	subs	r4, #1
 8009fb6:	f101 0814 	add.w	r8, r1, #20
 8009fba:	f100 0514 	add.w	r5, r0, #20
 8009fbe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009fc2:	9301      	str	r3, [sp, #4]
 8009fc4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009fc8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009fcc:	3301      	adds	r3, #1
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009fd4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009fd8:	fbb2 f6f3 	udiv	r6, r2, r3
 8009fdc:	d331      	bcc.n	800a042 <quorem+0x9e>
 8009fde:	f04f 0e00 	mov.w	lr, #0
 8009fe2:	4640      	mov	r0, r8
 8009fe4:	46ac      	mov	ip, r5
 8009fe6:	46f2      	mov	sl, lr
 8009fe8:	f850 2b04 	ldr.w	r2, [r0], #4
 8009fec:	b293      	uxth	r3, r2
 8009fee:	fb06 e303 	mla	r3, r6, r3, lr
 8009ff2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	ebaa 0303 	sub.w	r3, sl, r3
 8009ffc:	0c12      	lsrs	r2, r2, #16
 8009ffe:	f8dc a000 	ldr.w	sl, [ip]
 800a002:	fb06 e202 	mla	r2, r6, r2, lr
 800a006:	fa13 f38a 	uxtah	r3, r3, sl
 800a00a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a00e:	fa1f fa82 	uxth.w	sl, r2
 800a012:	f8dc 2000 	ldr.w	r2, [ip]
 800a016:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a01a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a01e:	b29b      	uxth	r3, r3
 800a020:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a024:	4581      	cmp	r9, r0
 800a026:	f84c 3b04 	str.w	r3, [ip], #4
 800a02a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a02e:	d2db      	bcs.n	8009fe8 <quorem+0x44>
 800a030:	f855 300b 	ldr.w	r3, [r5, fp]
 800a034:	b92b      	cbnz	r3, 800a042 <quorem+0x9e>
 800a036:	9b01      	ldr	r3, [sp, #4]
 800a038:	3b04      	subs	r3, #4
 800a03a:	429d      	cmp	r5, r3
 800a03c:	461a      	mov	r2, r3
 800a03e:	d32e      	bcc.n	800a09e <quorem+0xfa>
 800a040:	613c      	str	r4, [r7, #16]
 800a042:	4638      	mov	r0, r7
 800a044:	f001 fea0 	bl	800bd88 <__mcmp>
 800a048:	2800      	cmp	r0, #0
 800a04a:	db24      	blt.n	800a096 <quorem+0xf2>
 800a04c:	3601      	adds	r6, #1
 800a04e:	4628      	mov	r0, r5
 800a050:	f04f 0c00 	mov.w	ip, #0
 800a054:	f858 2b04 	ldr.w	r2, [r8], #4
 800a058:	f8d0 e000 	ldr.w	lr, [r0]
 800a05c:	b293      	uxth	r3, r2
 800a05e:	ebac 0303 	sub.w	r3, ip, r3
 800a062:	0c12      	lsrs	r2, r2, #16
 800a064:	fa13 f38e 	uxtah	r3, r3, lr
 800a068:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a06c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a070:	b29b      	uxth	r3, r3
 800a072:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a076:	45c1      	cmp	r9, r8
 800a078:	f840 3b04 	str.w	r3, [r0], #4
 800a07c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a080:	d2e8      	bcs.n	800a054 <quorem+0xb0>
 800a082:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a086:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a08a:	b922      	cbnz	r2, 800a096 <quorem+0xf2>
 800a08c:	3b04      	subs	r3, #4
 800a08e:	429d      	cmp	r5, r3
 800a090:	461a      	mov	r2, r3
 800a092:	d30a      	bcc.n	800a0aa <quorem+0x106>
 800a094:	613c      	str	r4, [r7, #16]
 800a096:	4630      	mov	r0, r6
 800a098:	b003      	add	sp, #12
 800a09a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a09e:	6812      	ldr	r2, [r2, #0]
 800a0a0:	3b04      	subs	r3, #4
 800a0a2:	2a00      	cmp	r2, #0
 800a0a4:	d1cc      	bne.n	800a040 <quorem+0x9c>
 800a0a6:	3c01      	subs	r4, #1
 800a0a8:	e7c7      	b.n	800a03a <quorem+0x96>
 800a0aa:	6812      	ldr	r2, [r2, #0]
 800a0ac:	3b04      	subs	r3, #4
 800a0ae:	2a00      	cmp	r2, #0
 800a0b0:	d1f0      	bne.n	800a094 <quorem+0xf0>
 800a0b2:	3c01      	subs	r4, #1
 800a0b4:	e7eb      	b.n	800a08e <quorem+0xea>
 800a0b6:	2000      	movs	r0, #0
 800a0b8:	e7ee      	b.n	800a098 <quorem+0xf4>
 800a0ba:	0000      	movs	r0, r0
 800a0bc:	0000      	movs	r0, r0
	...

0800a0c0 <_dtoa_r>:
 800a0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c4:	ed2d 8b02 	vpush	{d8}
 800a0c8:	ec57 6b10 	vmov	r6, r7, d0
 800a0cc:	b095      	sub	sp, #84	; 0x54
 800a0ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a0d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a0d4:	9105      	str	r1, [sp, #20]
 800a0d6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a0da:	4604      	mov	r4, r0
 800a0dc:	9209      	str	r2, [sp, #36]	; 0x24
 800a0de:	930f      	str	r3, [sp, #60]	; 0x3c
 800a0e0:	b975      	cbnz	r5, 800a100 <_dtoa_r+0x40>
 800a0e2:	2010      	movs	r0, #16
 800a0e4:	f7fd fef8 	bl	8007ed8 <malloc>
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	6260      	str	r0, [r4, #36]	; 0x24
 800a0ec:	b920      	cbnz	r0, 800a0f8 <_dtoa_r+0x38>
 800a0ee:	4bb2      	ldr	r3, [pc, #712]	; (800a3b8 <_dtoa_r+0x2f8>)
 800a0f0:	21ea      	movs	r1, #234	; 0xea
 800a0f2:	48b2      	ldr	r0, [pc, #712]	; (800a3bc <_dtoa_r+0x2fc>)
 800a0f4:	f002 fb6c 	bl	800c7d0 <__assert_func>
 800a0f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a0fc:	6005      	str	r5, [r0, #0]
 800a0fe:	60c5      	str	r5, [r0, #12]
 800a100:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a102:	6819      	ldr	r1, [r3, #0]
 800a104:	b151      	cbz	r1, 800a11c <_dtoa_r+0x5c>
 800a106:	685a      	ldr	r2, [r3, #4]
 800a108:	604a      	str	r2, [r1, #4]
 800a10a:	2301      	movs	r3, #1
 800a10c:	4093      	lsls	r3, r2
 800a10e:	608b      	str	r3, [r1, #8]
 800a110:	4620      	mov	r0, r4
 800a112:	f001 fbb1 	bl	800b878 <_Bfree>
 800a116:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a118:	2200      	movs	r2, #0
 800a11a:	601a      	str	r2, [r3, #0]
 800a11c:	1e3b      	subs	r3, r7, #0
 800a11e:	bfb9      	ittee	lt
 800a120:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a124:	9303      	strlt	r3, [sp, #12]
 800a126:	2300      	movge	r3, #0
 800a128:	f8c8 3000 	strge.w	r3, [r8]
 800a12c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a130:	4ba3      	ldr	r3, [pc, #652]	; (800a3c0 <_dtoa_r+0x300>)
 800a132:	bfbc      	itt	lt
 800a134:	2201      	movlt	r2, #1
 800a136:	f8c8 2000 	strlt.w	r2, [r8]
 800a13a:	ea33 0309 	bics.w	r3, r3, r9
 800a13e:	d11b      	bne.n	800a178 <_dtoa_r+0xb8>
 800a140:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a142:	f242 730f 	movw	r3, #9999	; 0x270f
 800a146:	6013      	str	r3, [r2, #0]
 800a148:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a14c:	4333      	orrs	r3, r6
 800a14e:	f000 857a 	beq.w	800ac46 <_dtoa_r+0xb86>
 800a152:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a154:	b963      	cbnz	r3, 800a170 <_dtoa_r+0xb0>
 800a156:	4b9b      	ldr	r3, [pc, #620]	; (800a3c4 <_dtoa_r+0x304>)
 800a158:	e024      	b.n	800a1a4 <_dtoa_r+0xe4>
 800a15a:	4b9b      	ldr	r3, [pc, #620]	; (800a3c8 <_dtoa_r+0x308>)
 800a15c:	9300      	str	r3, [sp, #0]
 800a15e:	3308      	adds	r3, #8
 800a160:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a162:	6013      	str	r3, [r2, #0]
 800a164:	9800      	ldr	r0, [sp, #0]
 800a166:	b015      	add	sp, #84	; 0x54
 800a168:	ecbd 8b02 	vpop	{d8}
 800a16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a170:	4b94      	ldr	r3, [pc, #592]	; (800a3c4 <_dtoa_r+0x304>)
 800a172:	9300      	str	r3, [sp, #0]
 800a174:	3303      	adds	r3, #3
 800a176:	e7f3      	b.n	800a160 <_dtoa_r+0xa0>
 800a178:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a17c:	2200      	movs	r2, #0
 800a17e:	ec51 0b17 	vmov	r0, r1, d7
 800a182:	2300      	movs	r3, #0
 800a184:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a188:	f7f6 fc9e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a18c:	4680      	mov	r8, r0
 800a18e:	b158      	cbz	r0, 800a1a8 <_dtoa_r+0xe8>
 800a190:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a192:	2301      	movs	r3, #1
 800a194:	6013      	str	r3, [r2, #0]
 800a196:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a198:	2b00      	cmp	r3, #0
 800a19a:	f000 8551 	beq.w	800ac40 <_dtoa_r+0xb80>
 800a19e:	488b      	ldr	r0, [pc, #556]	; (800a3cc <_dtoa_r+0x30c>)
 800a1a0:	6018      	str	r0, [r3, #0]
 800a1a2:	1e43      	subs	r3, r0, #1
 800a1a4:	9300      	str	r3, [sp, #0]
 800a1a6:	e7dd      	b.n	800a164 <_dtoa_r+0xa4>
 800a1a8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a1ac:	aa12      	add	r2, sp, #72	; 0x48
 800a1ae:	a913      	add	r1, sp, #76	; 0x4c
 800a1b0:	4620      	mov	r0, r4
 800a1b2:	f001 ff09 	bl	800bfc8 <__d2b>
 800a1b6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a1ba:	4683      	mov	fp, r0
 800a1bc:	2d00      	cmp	r5, #0
 800a1be:	d07c      	beq.n	800a2ba <_dtoa_r+0x1fa>
 800a1c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1c2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a1c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a1ca:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a1ce:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a1d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a1d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a1da:	4b7d      	ldr	r3, [pc, #500]	; (800a3d0 <_dtoa_r+0x310>)
 800a1dc:	2200      	movs	r2, #0
 800a1de:	4630      	mov	r0, r6
 800a1e0:	4639      	mov	r1, r7
 800a1e2:	f7f6 f851 	bl	8000288 <__aeabi_dsub>
 800a1e6:	a36e      	add	r3, pc, #440	; (adr r3, 800a3a0 <_dtoa_r+0x2e0>)
 800a1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ec:	f7f6 fa04 	bl	80005f8 <__aeabi_dmul>
 800a1f0:	a36d      	add	r3, pc, #436	; (adr r3, 800a3a8 <_dtoa_r+0x2e8>)
 800a1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f6:	f7f6 f849 	bl	800028c <__adddf3>
 800a1fa:	4606      	mov	r6, r0
 800a1fc:	4628      	mov	r0, r5
 800a1fe:	460f      	mov	r7, r1
 800a200:	f7f6 f990 	bl	8000524 <__aeabi_i2d>
 800a204:	a36a      	add	r3, pc, #424	; (adr r3, 800a3b0 <_dtoa_r+0x2f0>)
 800a206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a20a:	f7f6 f9f5 	bl	80005f8 <__aeabi_dmul>
 800a20e:	4602      	mov	r2, r0
 800a210:	460b      	mov	r3, r1
 800a212:	4630      	mov	r0, r6
 800a214:	4639      	mov	r1, r7
 800a216:	f7f6 f839 	bl	800028c <__adddf3>
 800a21a:	4606      	mov	r6, r0
 800a21c:	460f      	mov	r7, r1
 800a21e:	f7f6 fc9b 	bl	8000b58 <__aeabi_d2iz>
 800a222:	2200      	movs	r2, #0
 800a224:	4682      	mov	sl, r0
 800a226:	2300      	movs	r3, #0
 800a228:	4630      	mov	r0, r6
 800a22a:	4639      	mov	r1, r7
 800a22c:	f7f6 fc56 	bl	8000adc <__aeabi_dcmplt>
 800a230:	b148      	cbz	r0, 800a246 <_dtoa_r+0x186>
 800a232:	4650      	mov	r0, sl
 800a234:	f7f6 f976 	bl	8000524 <__aeabi_i2d>
 800a238:	4632      	mov	r2, r6
 800a23a:	463b      	mov	r3, r7
 800a23c:	f7f6 fc44 	bl	8000ac8 <__aeabi_dcmpeq>
 800a240:	b908      	cbnz	r0, 800a246 <_dtoa_r+0x186>
 800a242:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a246:	f1ba 0f16 	cmp.w	sl, #22
 800a24a:	d854      	bhi.n	800a2f6 <_dtoa_r+0x236>
 800a24c:	4b61      	ldr	r3, [pc, #388]	; (800a3d4 <_dtoa_r+0x314>)
 800a24e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a256:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a25a:	f7f6 fc3f 	bl	8000adc <__aeabi_dcmplt>
 800a25e:	2800      	cmp	r0, #0
 800a260:	d04b      	beq.n	800a2fa <_dtoa_r+0x23a>
 800a262:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a266:	2300      	movs	r3, #0
 800a268:	930e      	str	r3, [sp, #56]	; 0x38
 800a26a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a26c:	1b5d      	subs	r5, r3, r5
 800a26e:	1e6b      	subs	r3, r5, #1
 800a270:	9304      	str	r3, [sp, #16]
 800a272:	bf43      	ittte	mi
 800a274:	2300      	movmi	r3, #0
 800a276:	f1c5 0801 	rsbmi	r8, r5, #1
 800a27a:	9304      	strmi	r3, [sp, #16]
 800a27c:	f04f 0800 	movpl.w	r8, #0
 800a280:	f1ba 0f00 	cmp.w	sl, #0
 800a284:	db3b      	blt.n	800a2fe <_dtoa_r+0x23e>
 800a286:	9b04      	ldr	r3, [sp, #16]
 800a288:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a28c:	4453      	add	r3, sl
 800a28e:	9304      	str	r3, [sp, #16]
 800a290:	2300      	movs	r3, #0
 800a292:	9306      	str	r3, [sp, #24]
 800a294:	9b05      	ldr	r3, [sp, #20]
 800a296:	2b09      	cmp	r3, #9
 800a298:	d869      	bhi.n	800a36e <_dtoa_r+0x2ae>
 800a29a:	2b05      	cmp	r3, #5
 800a29c:	bfc4      	itt	gt
 800a29e:	3b04      	subgt	r3, #4
 800a2a0:	9305      	strgt	r3, [sp, #20]
 800a2a2:	9b05      	ldr	r3, [sp, #20]
 800a2a4:	f1a3 0302 	sub.w	r3, r3, #2
 800a2a8:	bfcc      	ite	gt
 800a2aa:	2500      	movgt	r5, #0
 800a2ac:	2501      	movle	r5, #1
 800a2ae:	2b03      	cmp	r3, #3
 800a2b0:	d869      	bhi.n	800a386 <_dtoa_r+0x2c6>
 800a2b2:	e8df f003 	tbb	[pc, r3]
 800a2b6:	4e2c      	.short	0x4e2c
 800a2b8:	5a4c      	.short	0x5a4c
 800a2ba:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a2be:	441d      	add	r5, r3
 800a2c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a2c4:	2b20      	cmp	r3, #32
 800a2c6:	bfc1      	itttt	gt
 800a2c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a2cc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a2d0:	fa09 f303 	lslgt.w	r3, r9, r3
 800a2d4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a2d8:	bfda      	itte	le
 800a2da:	f1c3 0320 	rsble	r3, r3, #32
 800a2de:	fa06 f003 	lslle.w	r0, r6, r3
 800a2e2:	4318      	orrgt	r0, r3
 800a2e4:	f7f6 f90e 	bl	8000504 <__aeabi_ui2d>
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	4606      	mov	r6, r0
 800a2ec:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a2f0:	3d01      	subs	r5, #1
 800a2f2:	9310      	str	r3, [sp, #64]	; 0x40
 800a2f4:	e771      	b.n	800a1da <_dtoa_r+0x11a>
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	e7b6      	b.n	800a268 <_dtoa_r+0x1a8>
 800a2fa:	900e      	str	r0, [sp, #56]	; 0x38
 800a2fc:	e7b5      	b.n	800a26a <_dtoa_r+0x1aa>
 800a2fe:	f1ca 0300 	rsb	r3, sl, #0
 800a302:	9306      	str	r3, [sp, #24]
 800a304:	2300      	movs	r3, #0
 800a306:	eba8 080a 	sub.w	r8, r8, sl
 800a30a:	930d      	str	r3, [sp, #52]	; 0x34
 800a30c:	e7c2      	b.n	800a294 <_dtoa_r+0x1d4>
 800a30e:	2300      	movs	r3, #0
 800a310:	9308      	str	r3, [sp, #32]
 800a312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a314:	2b00      	cmp	r3, #0
 800a316:	dc39      	bgt.n	800a38c <_dtoa_r+0x2cc>
 800a318:	f04f 0901 	mov.w	r9, #1
 800a31c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a320:	464b      	mov	r3, r9
 800a322:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a326:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a328:	2200      	movs	r2, #0
 800a32a:	6042      	str	r2, [r0, #4]
 800a32c:	2204      	movs	r2, #4
 800a32e:	f102 0614 	add.w	r6, r2, #20
 800a332:	429e      	cmp	r6, r3
 800a334:	6841      	ldr	r1, [r0, #4]
 800a336:	d92f      	bls.n	800a398 <_dtoa_r+0x2d8>
 800a338:	4620      	mov	r0, r4
 800a33a:	f001 fa5d 	bl	800b7f8 <_Balloc>
 800a33e:	9000      	str	r0, [sp, #0]
 800a340:	2800      	cmp	r0, #0
 800a342:	d14b      	bne.n	800a3dc <_dtoa_r+0x31c>
 800a344:	4b24      	ldr	r3, [pc, #144]	; (800a3d8 <_dtoa_r+0x318>)
 800a346:	4602      	mov	r2, r0
 800a348:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a34c:	e6d1      	b.n	800a0f2 <_dtoa_r+0x32>
 800a34e:	2301      	movs	r3, #1
 800a350:	e7de      	b.n	800a310 <_dtoa_r+0x250>
 800a352:	2300      	movs	r3, #0
 800a354:	9308      	str	r3, [sp, #32]
 800a356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a358:	eb0a 0903 	add.w	r9, sl, r3
 800a35c:	f109 0301 	add.w	r3, r9, #1
 800a360:	2b01      	cmp	r3, #1
 800a362:	9301      	str	r3, [sp, #4]
 800a364:	bfb8      	it	lt
 800a366:	2301      	movlt	r3, #1
 800a368:	e7dd      	b.n	800a326 <_dtoa_r+0x266>
 800a36a:	2301      	movs	r3, #1
 800a36c:	e7f2      	b.n	800a354 <_dtoa_r+0x294>
 800a36e:	2501      	movs	r5, #1
 800a370:	2300      	movs	r3, #0
 800a372:	9305      	str	r3, [sp, #20]
 800a374:	9508      	str	r5, [sp, #32]
 800a376:	f04f 39ff 	mov.w	r9, #4294967295
 800a37a:	2200      	movs	r2, #0
 800a37c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a380:	2312      	movs	r3, #18
 800a382:	9209      	str	r2, [sp, #36]	; 0x24
 800a384:	e7cf      	b.n	800a326 <_dtoa_r+0x266>
 800a386:	2301      	movs	r3, #1
 800a388:	9308      	str	r3, [sp, #32]
 800a38a:	e7f4      	b.n	800a376 <_dtoa_r+0x2b6>
 800a38c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a390:	f8cd 9004 	str.w	r9, [sp, #4]
 800a394:	464b      	mov	r3, r9
 800a396:	e7c6      	b.n	800a326 <_dtoa_r+0x266>
 800a398:	3101      	adds	r1, #1
 800a39a:	6041      	str	r1, [r0, #4]
 800a39c:	0052      	lsls	r2, r2, #1
 800a39e:	e7c6      	b.n	800a32e <_dtoa_r+0x26e>
 800a3a0:	636f4361 	.word	0x636f4361
 800a3a4:	3fd287a7 	.word	0x3fd287a7
 800a3a8:	8b60c8b3 	.word	0x8b60c8b3
 800a3ac:	3fc68a28 	.word	0x3fc68a28
 800a3b0:	509f79fb 	.word	0x509f79fb
 800a3b4:	3fd34413 	.word	0x3fd34413
 800a3b8:	0800f38e 	.word	0x0800f38e
 800a3bc:	0800f3a5 	.word	0x0800f3a5
 800a3c0:	7ff00000 	.word	0x7ff00000
 800a3c4:	0800f38a 	.word	0x0800f38a
 800a3c8:	0800f381 	.word	0x0800f381
 800a3cc:	0800f201 	.word	0x0800f201
 800a3d0:	3ff80000 	.word	0x3ff80000
 800a3d4:	0800f580 	.word	0x0800f580
 800a3d8:	0800f404 	.word	0x0800f404
 800a3dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3de:	9a00      	ldr	r2, [sp, #0]
 800a3e0:	601a      	str	r2, [r3, #0]
 800a3e2:	9b01      	ldr	r3, [sp, #4]
 800a3e4:	2b0e      	cmp	r3, #14
 800a3e6:	f200 80ad 	bhi.w	800a544 <_dtoa_r+0x484>
 800a3ea:	2d00      	cmp	r5, #0
 800a3ec:	f000 80aa 	beq.w	800a544 <_dtoa_r+0x484>
 800a3f0:	f1ba 0f00 	cmp.w	sl, #0
 800a3f4:	dd36      	ble.n	800a464 <_dtoa_r+0x3a4>
 800a3f6:	4ac3      	ldr	r2, [pc, #780]	; (800a704 <_dtoa_r+0x644>)
 800a3f8:	f00a 030f 	and.w	r3, sl, #15
 800a3fc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a400:	ed93 7b00 	vldr	d7, [r3]
 800a404:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a408:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a40c:	eeb0 8a47 	vmov.f32	s16, s14
 800a410:	eef0 8a67 	vmov.f32	s17, s15
 800a414:	d016      	beq.n	800a444 <_dtoa_r+0x384>
 800a416:	4bbc      	ldr	r3, [pc, #752]	; (800a708 <_dtoa_r+0x648>)
 800a418:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a41c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a420:	f7f6 fa14 	bl	800084c <__aeabi_ddiv>
 800a424:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a428:	f007 070f 	and.w	r7, r7, #15
 800a42c:	2503      	movs	r5, #3
 800a42e:	4eb6      	ldr	r6, [pc, #728]	; (800a708 <_dtoa_r+0x648>)
 800a430:	b957      	cbnz	r7, 800a448 <_dtoa_r+0x388>
 800a432:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a436:	ec53 2b18 	vmov	r2, r3, d8
 800a43a:	f7f6 fa07 	bl	800084c <__aeabi_ddiv>
 800a43e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a442:	e029      	b.n	800a498 <_dtoa_r+0x3d8>
 800a444:	2502      	movs	r5, #2
 800a446:	e7f2      	b.n	800a42e <_dtoa_r+0x36e>
 800a448:	07f9      	lsls	r1, r7, #31
 800a44a:	d508      	bpl.n	800a45e <_dtoa_r+0x39e>
 800a44c:	ec51 0b18 	vmov	r0, r1, d8
 800a450:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a454:	f7f6 f8d0 	bl	80005f8 <__aeabi_dmul>
 800a458:	ec41 0b18 	vmov	d8, r0, r1
 800a45c:	3501      	adds	r5, #1
 800a45e:	107f      	asrs	r7, r7, #1
 800a460:	3608      	adds	r6, #8
 800a462:	e7e5      	b.n	800a430 <_dtoa_r+0x370>
 800a464:	f000 80a6 	beq.w	800a5b4 <_dtoa_r+0x4f4>
 800a468:	f1ca 0600 	rsb	r6, sl, #0
 800a46c:	4ba5      	ldr	r3, [pc, #660]	; (800a704 <_dtoa_r+0x644>)
 800a46e:	4fa6      	ldr	r7, [pc, #664]	; (800a708 <_dtoa_r+0x648>)
 800a470:	f006 020f 	and.w	r2, r6, #15
 800a474:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a47c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a480:	f7f6 f8ba 	bl	80005f8 <__aeabi_dmul>
 800a484:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a488:	1136      	asrs	r6, r6, #4
 800a48a:	2300      	movs	r3, #0
 800a48c:	2502      	movs	r5, #2
 800a48e:	2e00      	cmp	r6, #0
 800a490:	f040 8085 	bne.w	800a59e <_dtoa_r+0x4de>
 800a494:	2b00      	cmp	r3, #0
 800a496:	d1d2      	bne.n	800a43e <_dtoa_r+0x37e>
 800a498:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	f000 808c 	beq.w	800a5b8 <_dtoa_r+0x4f8>
 800a4a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a4a4:	4b99      	ldr	r3, [pc, #612]	; (800a70c <_dtoa_r+0x64c>)
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	4630      	mov	r0, r6
 800a4aa:	4639      	mov	r1, r7
 800a4ac:	f7f6 fb16 	bl	8000adc <__aeabi_dcmplt>
 800a4b0:	2800      	cmp	r0, #0
 800a4b2:	f000 8081 	beq.w	800a5b8 <_dtoa_r+0x4f8>
 800a4b6:	9b01      	ldr	r3, [sp, #4]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d07d      	beq.n	800a5b8 <_dtoa_r+0x4f8>
 800a4bc:	f1b9 0f00 	cmp.w	r9, #0
 800a4c0:	dd3c      	ble.n	800a53c <_dtoa_r+0x47c>
 800a4c2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a4c6:	9307      	str	r3, [sp, #28]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	4b91      	ldr	r3, [pc, #580]	; (800a710 <_dtoa_r+0x650>)
 800a4cc:	4630      	mov	r0, r6
 800a4ce:	4639      	mov	r1, r7
 800a4d0:	f7f6 f892 	bl	80005f8 <__aeabi_dmul>
 800a4d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4d8:	3501      	adds	r5, #1
 800a4da:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a4de:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a4e2:	4628      	mov	r0, r5
 800a4e4:	f7f6 f81e 	bl	8000524 <__aeabi_i2d>
 800a4e8:	4632      	mov	r2, r6
 800a4ea:	463b      	mov	r3, r7
 800a4ec:	f7f6 f884 	bl	80005f8 <__aeabi_dmul>
 800a4f0:	4b88      	ldr	r3, [pc, #544]	; (800a714 <_dtoa_r+0x654>)
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f7f5 feca 	bl	800028c <__adddf3>
 800a4f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a4fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a500:	9303      	str	r3, [sp, #12]
 800a502:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a504:	2b00      	cmp	r3, #0
 800a506:	d15c      	bne.n	800a5c2 <_dtoa_r+0x502>
 800a508:	4b83      	ldr	r3, [pc, #524]	; (800a718 <_dtoa_r+0x658>)
 800a50a:	2200      	movs	r2, #0
 800a50c:	4630      	mov	r0, r6
 800a50e:	4639      	mov	r1, r7
 800a510:	f7f5 feba 	bl	8000288 <__aeabi_dsub>
 800a514:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a518:	4606      	mov	r6, r0
 800a51a:	460f      	mov	r7, r1
 800a51c:	f7f6 fafc 	bl	8000b18 <__aeabi_dcmpgt>
 800a520:	2800      	cmp	r0, #0
 800a522:	f040 8296 	bne.w	800aa52 <_dtoa_r+0x992>
 800a526:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a52a:	4630      	mov	r0, r6
 800a52c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a530:	4639      	mov	r1, r7
 800a532:	f7f6 fad3 	bl	8000adc <__aeabi_dcmplt>
 800a536:	2800      	cmp	r0, #0
 800a538:	f040 8288 	bne.w	800aa4c <_dtoa_r+0x98c>
 800a53c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a540:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a544:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a546:	2b00      	cmp	r3, #0
 800a548:	f2c0 8158 	blt.w	800a7fc <_dtoa_r+0x73c>
 800a54c:	f1ba 0f0e 	cmp.w	sl, #14
 800a550:	f300 8154 	bgt.w	800a7fc <_dtoa_r+0x73c>
 800a554:	4b6b      	ldr	r3, [pc, #428]	; (800a704 <_dtoa_r+0x644>)
 800a556:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a55a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a55e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a560:	2b00      	cmp	r3, #0
 800a562:	f280 80e3 	bge.w	800a72c <_dtoa_r+0x66c>
 800a566:	9b01      	ldr	r3, [sp, #4]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	f300 80df 	bgt.w	800a72c <_dtoa_r+0x66c>
 800a56e:	f040 826d 	bne.w	800aa4c <_dtoa_r+0x98c>
 800a572:	4b69      	ldr	r3, [pc, #420]	; (800a718 <_dtoa_r+0x658>)
 800a574:	2200      	movs	r2, #0
 800a576:	4640      	mov	r0, r8
 800a578:	4649      	mov	r1, r9
 800a57a:	f7f6 f83d 	bl	80005f8 <__aeabi_dmul>
 800a57e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a582:	f7f6 fabf 	bl	8000b04 <__aeabi_dcmpge>
 800a586:	9e01      	ldr	r6, [sp, #4]
 800a588:	4637      	mov	r7, r6
 800a58a:	2800      	cmp	r0, #0
 800a58c:	f040 8243 	bne.w	800aa16 <_dtoa_r+0x956>
 800a590:	9d00      	ldr	r5, [sp, #0]
 800a592:	2331      	movs	r3, #49	; 0x31
 800a594:	f805 3b01 	strb.w	r3, [r5], #1
 800a598:	f10a 0a01 	add.w	sl, sl, #1
 800a59c:	e23f      	b.n	800aa1e <_dtoa_r+0x95e>
 800a59e:	07f2      	lsls	r2, r6, #31
 800a5a0:	d505      	bpl.n	800a5ae <_dtoa_r+0x4ee>
 800a5a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5a6:	f7f6 f827 	bl	80005f8 <__aeabi_dmul>
 800a5aa:	3501      	adds	r5, #1
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	1076      	asrs	r6, r6, #1
 800a5b0:	3708      	adds	r7, #8
 800a5b2:	e76c      	b.n	800a48e <_dtoa_r+0x3ce>
 800a5b4:	2502      	movs	r5, #2
 800a5b6:	e76f      	b.n	800a498 <_dtoa_r+0x3d8>
 800a5b8:	9b01      	ldr	r3, [sp, #4]
 800a5ba:	f8cd a01c 	str.w	sl, [sp, #28]
 800a5be:	930c      	str	r3, [sp, #48]	; 0x30
 800a5c0:	e78d      	b.n	800a4de <_dtoa_r+0x41e>
 800a5c2:	9900      	ldr	r1, [sp, #0]
 800a5c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a5c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a5c8:	4b4e      	ldr	r3, [pc, #312]	; (800a704 <_dtoa_r+0x644>)
 800a5ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a5ce:	4401      	add	r1, r0
 800a5d0:	9102      	str	r1, [sp, #8]
 800a5d2:	9908      	ldr	r1, [sp, #32]
 800a5d4:	eeb0 8a47 	vmov.f32	s16, s14
 800a5d8:	eef0 8a67 	vmov.f32	s17, s15
 800a5dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a5e4:	2900      	cmp	r1, #0
 800a5e6:	d045      	beq.n	800a674 <_dtoa_r+0x5b4>
 800a5e8:	494c      	ldr	r1, [pc, #304]	; (800a71c <_dtoa_r+0x65c>)
 800a5ea:	2000      	movs	r0, #0
 800a5ec:	f7f6 f92e 	bl	800084c <__aeabi_ddiv>
 800a5f0:	ec53 2b18 	vmov	r2, r3, d8
 800a5f4:	f7f5 fe48 	bl	8000288 <__aeabi_dsub>
 800a5f8:	9d00      	ldr	r5, [sp, #0]
 800a5fa:	ec41 0b18 	vmov	d8, r0, r1
 800a5fe:	4639      	mov	r1, r7
 800a600:	4630      	mov	r0, r6
 800a602:	f7f6 faa9 	bl	8000b58 <__aeabi_d2iz>
 800a606:	900c      	str	r0, [sp, #48]	; 0x30
 800a608:	f7f5 ff8c 	bl	8000524 <__aeabi_i2d>
 800a60c:	4602      	mov	r2, r0
 800a60e:	460b      	mov	r3, r1
 800a610:	4630      	mov	r0, r6
 800a612:	4639      	mov	r1, r7
 800a614:	f7f5 fe38 	bl	8000288 <__aeabi_dsub>
 800a618:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a61a:	3330      	adds	r3, #48	; 0x30
 800a61c:	f805 3b01 	strb.w	r3, [r5], #1
 800a620:	ec53 2b18 	vmov	r2, r3, d8
 800a624:	4606      	mov	r6, r0
 800a626:	460f      	mov	r7, r1
 800a628:	f7f6 fa58 	bl	8000adc <__aeabi_dcmplt>
 800a62c:	2800      	cmp	r0, #0
 800a62e:	d165      	bne.n	800a6fc <_dtoa_r+0x63c>
 800a630:	4632      	mov	r2, r6
 800a632:	463b      	mov	r3, r7
 800a634:	4935      	ldr	r1, [pc, #212]	; (800a70c <_dtoa_r+0x64c>)
 800a636:	2000      	movs	r0, #0
 800a638:	f7f5 fe26 	bl	8000288 <__aeabi_dsub>
 800a63c:	ec53 2b18 	vmov	r2, r3, d8
 800a640:	f7f6 fa4c 	bl	8000adc <__aeabi_dcmplt>
 800a644:	2800      	cmp	r0, #0
 800a646:	f040 80b9 	bne.w	800a7bc <_dtoa_r+0x6fc>
 800a64a:	9b02      	ldr	r3, [sp, #8]
 800a64c:	429d      	cmp	r5, r3
 800a64e:	f43f af75 	beq.w	800a53c <_dtoa_r+0x47c>
 800a652:	4b2f      	ldr	r3, [pc, #188]	; (800a710 <_dtoa_r+0x650>)
 800a654:	ec51 0b18 	vmov	r0, r1, d8
 800a658:	2200      	movs	r2, #0
 800a65a:	f7f5 ffcd 	bl	80005f8 <__aeabi_dmul>
 800a65e:	4b2c      	ldr	r3, [pc, #176]	; (800a710 <_dtoa_r+0x650>)
 800a660:	ec41 0b18 	vmov	d8, r0, r1
 800a664:	2200      	movs	r2, #0
 800a666:	4630      	mov	r0, r6
 800a668:	4639      	mov	r1, r7
 800a66a:	f7f5 ffc5 	bl	80005f8 <__aeabi_dmul>
 800a66e:	4606      	mov	r6, r0
 800a670:	460f      	mov	r7, r1
 800a672:	e7c4      	b.n	800a5fe <_dtoa_r+0x53e>
 800a674:	ec51 0b17 	vmov	r0, r1, d7
 800a678:	f7f5 ffbe 	bl	80005f8 <__aeabi_dmul>
 800a67c:	9b02      	ldr	r3, [sp, #8]
 800a67e:	9d00      	ldr	r5, [sp, #0]
 800a680:	930c      	str	r3, [sp, #48]	; 0x30
 800a682:	ec41 0b18 	vmov	d8, r0, r1
 800a686:	4639      	mov	r1, r7
 800a688:	4630      	mov	r0, r6
 800a68a:	f7f6 fa65 	bl	8000b58 <__aeabi_d2iz>
 800a68e:	9011      	str	r0, [sp, #68]	; 0x44
 800a690:	f7f5 ff48 	bl	8000524 <__aeabi_i2d>
 800a694:	4602      	mov	r2, r0
 800a696:	460b      	mov	r3, r1
 800a698:	4630      	mov	r0, r6
 800a69a:	4639      	mov	r1, r7
 800a69c:	f7f5 fdf4 	bl	8000288 <__aeabi_dsub>
 800a6a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a6a2:	3330      	adds	r3, #48	; 0x30
 800a6a4:	f805 3b01 	strb.w	r3, [r5], #1
 800a6a8:	9b02      	ldr	r3, [sp, #8]
 800a6aa:	429d      	cmp	r5, r3
 800a6ac:	4606      	mov	r6, r0
 800a6ae:	460f      	mov	r7, r1
 800a6b0:	f04f 0200 	mov.w	r2, #0
 800a6b4:	d134      	bne.n	800a720 <_dtoa_r+0x660>
 800a6b6:	4b19      	ldr	r3, [pc, #100]	; (800a71c <_dtoa_r+0x65c>)
 800a6b8:	ec51 0b18 	vmov	r0, r1, d8
 800a6bc:	f7f5 fde6 	bl	800028c <__adddf3>
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	460b      	mov	r3, r1
 800a6c4:	4630      	mov	r0, r6
 800a6c6:	4639      	mov	r1, r7
 800a6c8:	f7f6 fa26 	bl	8000b18 <__aeabi_dcmpgt>
 800a6cc:	2800      	cmp	r0, #0
 800a6ce:	d175      	bne.n	800a7bc <_dtoa_r+0x6fc>
 800a6d0:	ec53 2b18 	vmov	r2, r3, d8
 800a6d4:	4911      	ldr	r1, [pc, #68]	; (800a71c <_dtoa_r+0x65c>)
 800a6d6:	2000      	movs	r0, #0
 800a6d8:	f7f5 fdd6 	bl	8000288 <__aeabi_dsub>
 800a6dc:	4602      	mov	r2, r0
 800a6de:	460b      	mov	r3, r1
 800a6e0:	4630      	mov	r0, r6
 800a6e2:	4639      	mov	r1, r7
 800a6e4:	f7f6 f9fa 	bl	8000adc <__aeabi_dcmplt>
 800a6e8:	2800      	cmp	r0, #0
 800a6ea:	f43f af27 	beq.w	800a53c <_dtoa_r+0x47c>
 800a6ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a6f0:	1e6b      	subs	r3, r5, #1
 800a6f2:	930c      	str	r3, [sp, #48]	; 0x30
 800a6f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a6f8:	2b30      	cmp	r3, #48	; 0x30
 800a6fa:	d0f8      	beq.n	800a6ee <_dtoa_r+0x62e>
 800a6fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a700:	e04a      	b.n	800a798 <_dtoa_r+0x6d8>
 800a702:	bf00      	nop
 800a704:	0800f580 	.word	0x0800f580
 800a708:	0800f558 	.word	0x0800f558
 800a70c:	3ff00000 	.word	0x3ff00000
 800a710:	40240000 	.word	0x40240000
 800a714:	401c0000 	.word	0x401c0000
 800a718:	40140000 	.word	0x40140000
 800a71c:	3fe00000 	.word	0x3fe00000
 800a720:	4baf      	ldr	r3, [pc, #700]	; (800a9e0 <_dtoa_r+0x920>)
 800a722:	f7f5 ff69 	bl	80005f8 <__aeabi_dmul>
 800a726:	4606      	mov	r6, r0
 800a728:	460f      	mov	r7, r1
 800a72a:	e7ac      	b.n	800a686 <_dtoa_r+0x5c6>
 800a72c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a730:	9d00      	ldr	r5, [sp, #0]
 800a732:	4642      	mov	r2, r8
 800a734:	464b      	mov	r3, r9
 800a736:	4630      	mov	r0, r6
 800a738:	4639      	mov	r1, r7
 800a73a:	f7f6 f887 	bl	800084c <__aeabi_ddiv>
 800a73e:	f7f6 fa0b 	bl	8000b58 <__aeabi_d2iz>
 800a742:	9002      	str	r0, [sp, #8]
 800a744:	f7f5 feee 	bl	8000524 <__aeabi_i2d>
 800a748:	4642      	mov	r2, r8
 800a74a:	464b      	mov	r3, r9
 800a74c:	f7f5 ff54 	bl	80005f8 <__aeabi_dmul>
 800a750:	4602      	mov	r2, r0
 800a752:	460b      	mov	r3, r1
 800a754:	4630      	mov	r0, r6
 800a756:	4639      	mov	r1, r7
 800a758:	f7f5 fd96 	bl	8000288 <__aeabi_dsub>
 800a75c:	9e02      	ldr	r6, [sp, #8]
 800a75e:	9f01      	ldr	r7, [sp, #4]
 800a760:	3630      	adds	r6, #48	; 0x30
 800a762:	f805 6b01 	strb.w	r6, [r5], #1
 800a766:	9e00      	ldr	r6, [sp, #0]
 800a768:	1bae      	subs	r6, r5, r6
 800a76a:	42b7      	cmp	r7, r6
 800a76c:	4602      	mov	r2, r0
 800a76e:	460b      	mov	r3, r1
 800a770:	d137      	bne.n	800a7e2 <_dtoa_r+0x722>
 800a772:	f7f5 fd8b 	bl	800028c <__adddf3>
 800a776:	4642      	mov	r2, r8
 800a778:	464b      	mov	r3, r9
 800a77a:	4606      	mov	r6, r0
 800a77c:	460f      	mov	r7, r1
 800a77e:	f7f6 f9cb 	bl	8000b18 <__aeabi_dcmpgt>
 800a782:	b9c8      	cbnz	r0, 800a7b8 <_dtoa_r+0x6f8>
 800a784:	4642      	mov	r2, r8
 800a786:	464b      	mov	r3, r9
 800a788:	4630      	mov	r0, r6
 800a78a:	4639      	mov	r1, r7
 800a78c:	f7f6 f99c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a790:	b110      	cbz	r0, 800a798 <_dtoa_r+0x6d8>
 800a792:	9b02      	ldr	r3, [sp, #8]
 800a794:	07d9      	lsls	r1, r3, #31
 800a796:	d40f      	bmi.n	800a7b8 <_dtoa_r+0x6f8>
 800a798:	4620      	mov	r0, r4
 800a79a:	4659      	mov	r1, fp
 800a79c:	f001 f86c 	bl	800b878 <_Bfree>
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	702b      	strb	r3, [r5, #0]
 800a7a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7a6:	f10a 0001 	add.w	r0, sl, #1
 800a7aa:	6018      	str	r0, [r3, #0]
 800a7ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	f43f acd8 	beq.w	800a164 <_dtoa_r+0xa4>
 800a7b4:	601d      	str	r5, [r3, #0]
 800a7b6:	e4d5      	b.n	800a164 <_dtoa_r+0xa4>
 800a7b8:	f8cd a01c 	str.w	sl, [sp, #28]
 800a7bc:	462b      	mov	r3, r5
 800a7be:	461d      	mov	r5, r3
 800a7c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a7c4:	2a39      	cmp	r2, #57	; 0x39
 800a7c6:	d108      	bne.n	800a7da <_dtoa_r+0x71a>
 800a7c8:	9a00      	ldr	r2, [sp, #0]
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d1f7      	bne.n	800a7be <_dtoa_r+0x6fe>
 800a7ce:	9a07      	ldr	r2, [sp, #28]
 800a7d0:	9900      	ldr	r1, [sp, #0]
 800a7d2:	3201      	adds	r2, #1
 800a7d4:	9207      	str	r2, [sp, #28]
 800a7d6:	2230      	movs	r2, #48	; 0x30
 800a7d8:	700a      	strb	r2, [r1, #0]
 800a7da:	781a      	ldrb	r2, [r3, #0]
 800a7dc:	3201      	adds	r2, #1
 800a7de:	701a      	strb	r2, [r3, #0]
 800a7e0:	e78c      	b.n	800a6fc <_dtoa_r+0x63c>
 800a7e2:	4b7f      	ldr	r3, [pc, #508]	; (800a9e0 <_dtoa_r+0x920>)
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	f7f5 ff07 	bl	80005f8 <__aeabi_dmul>
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	4606      	mov	r6, r0
 800a7f0:	460f      	mov	r7, r1
 800a7f2:	f7f6 f969 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7f6:	2800      	cmp	r0, #0
 800a7f8:	d09b      	beq.n	800a732 <_dtoa_r+0x672>
 800a7fa:	e7cd      	b.n	800a798 <_dtoa_r+0x6d8>
 800a7fc:	9a08      	ldr	r2, [sp, #32]
 800a7fe:	2a00      	cmp	r2, #0
 800a800:	f000 80c4 	beq.w	800a98c <_dtoa_r+0x8cc>
 800a804:	9a05      	ldr	r2, [sp, #20]
 800a806:	2a01      	cmp	r2, #1
 800a808:	f300 80a8 	bgt.w	800a95c <_dtoa_r+0x89c>
 800a80c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a80e:	2a00      	cmp	r2, #0
 800a810:	f000 80a0 	beq.w	800a954 <_dtoa_r+0x894>
 800a814:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a818:	9e06      	ldr	r6, [sp, #24]
 800a81a:	4645      	mov	r5, r8
 800a81c:	9a04      	ldr	r2, [sp, #16]
 800a81e:	2101      	movs	r1, #1
 800a820:	441a      	add	r2, r3
 800a822:	4620      	mov	r0, r4
 800a824:	4498      	add	r8, r3
 800a826:	9204      	str	r2, [sp, #16]
 800a828:	f001 f92c 	bl	800ba84 <__i2b>
 800a82c:	4607      	mov	r7, r0
 800a82e:	2d00      	cmp	r5, #0
 800a830:	dd0b      	ble.n	800a84a <_dtoa_r+0x78a>
 800a832:	9b04      	ldr	r3, [sp, #16]
 800a834:	2b00      	cmp	r3, #0
 800a836:	dd08      	ble.n	800a84a <_dtoa_r+0x78a>
 800a838:	42ab      	cmp	r3, r5
 800a83a:	9a04      	ldr	r2, [sp, #16]
 800a83c:	bfa8      	it	ge
 800a83e:	462b      	movge	r3, r5
 800a840:	eba8 0803 	sub.w	r8, r8, r3
 800a844:	1aed      	subs	r5, r5, r3
 800a846:	1ad3      	subs	r3, r2, r3
 800a848:	9304      	str	r3, [sp, #16]
 800a84a:	9b06      	ldr	r3, [sp, #24]
 800a84c:	b1fb      	cbz	r3, 800a88e <_dtoa_r+0x7ce>
 800a84e:	9b08      	ldr	r3, [sp, #32]
 800a850:	2b00      	cmp	r3, #0
 800a852:	f000 809f 	beq.w	800a994 <_dtoa_r+0x8d4>
 800a856:	2e00      	cmp	r6, #0
 800a858:	dd11      	ble.n	800a87e <_dtoa_r+0x7be>
 800a85a:	4639      	mov	r1, r7
 800a85c:	4632      	mov	r2, r6
 800a85e:	4620      	mov	r0, r4
 800a860:	f001 f9cc 	bl	800bbfc <__pow5mult>
 800a864:	465a      	mov	r2, fp
 800a866:	4601      	mov	r1, r0
 800a868:	4607      	mov	r7, r0
 800a86a:	4620      	mov	r0, r4
 800a86c:	f001 f920 	bl	800bab0 <__multiply>
 800a870:	4659      	mov	r1, fp
 800a872:	9007      	str	r0, [sp, #28]
 800a874:	4620      	mov	r0, r4
 800a876:	f000 ffff 	bl	800b878 <_Bfree>
 800a87a:	9b07      	ldr	r3, [sp, #28]
 800a87c:	469b      	mov	fp, r3
 800a87e:	9b06      	ldr	r3, [sp, #24]
 800a880:	1b9a      	subs	r2, r3, r6
 800a882:	d004      	beq.n	800a88e <_dtoa_r+0x7ce>
 800a884:	4659      	mov	r1, fp
 800a886:	4620      	mov	r0, r4
 800a888:	f001 f9b8 	bl	800bbfc <__pow5mult>
 800a88c:	4683      	mov	fp, r0
 800a88e:	2101      	movs	r1, #1
 800a890:	4620      	mov	r0, r4
 800a892:	f001 f8f7 	bl	800ba84 <__i2b>
 800a896:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a898:	2b00      	cmp	r3, #0
 800a89a:	4606      	mov	r6, r0
 800a89c:	dd7c      	ble.n	800a998 <_dtoa_r+0x8d8>
 800a89e:	461a      	mov	r2, r3
 800a8a0:	4601      	mov	r1, r0
 800a8a2:	4620      	mov	r0, r4
 800a8a4:	f001 f9aa 	bl	800bbfc <__pow5mult>
 800a8a8:	9b05      	ldr	r3, [sp, #20]
 800a8aa:	2b01      	cmp	r3, #1
 800a8ac:	4606      	mov	r6, r0
 800a8ae:	dd76      	ble.n	800a99e <_dtoa_r+0x8de>
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	9306      	str	r3, [sp, #24]
 800a8b4:	6933      	ldr	r3, [r6, #16]
 800a8b6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a8ba:	6918      	ldr	r0, [r3, #16]
 800a8bc:	f001 f892 	bl	800b9e4 <__hi0bits>
 800a8c0:	f1c0 0020 	rsb	r0, r0, #32
 800a8c4:	9b04      	ldr	r3, [sp, #16]
 800a8c6:	4418      	add	r0, r3
 800a8c8:	f010 001f 	ands.w	r0, r0, #31
 800a8cc:	f000 8086 	beq.w	800a9dc <_dtoa_r+0x91c>
 800a8d0:	f1c0 0320 	rsb	r3, r0, #32
 800a8d4:	2b04      	cmp	r3, #4
 800a8d6:	dd7f      	ble.n	800a9d8 <_dtoa_r+0x918>
 800a8d8:	f1c0 001c 	rsb	r0, r0, #28
 800a8dc:	9b04      	ldr	r3, [sp, #16]
 800a8de:	4403      	add	r3, r0
 800a8e0:	4480      	add	r8, r0
 800a8e2:	4405      	add	r5, r0
 800a8e4:	9304      	str	r3, [sp, #16]
 800a8e6:	f1b8 0f00 	cmp.w	r8, #0
 800a8ea:	dd05      	ble.n	800a8f8 <_dtoa_r+0x838>
 800a8ec:	4659      	mov	r1, fp
 800a8ee:	4642      	mov	r2, r8
 800a8f0:	4620      	mov	r0, r4
 800a8f2:	f001 f9dd 	bl	800bcb0 <__lshift>
 800a8f6:	4683      	mov	fp, r0
 800a8f8:	9b04      	ldr	r3, [sp, #16]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	dd05      	ble.n	800a90a <_dtoa_r+0x84a>
 800a8fe:	4631      	mov	r1, r6
 800a900:	461a      	mov	r2, r3
 800a902:	4620      	mov	r0, r4
 800a904:	f001 f9d4 	bl	800bcb0 <__lshift>
 800a908:	4606      	mov	r6, r0
 800a90a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d069      	beq.n	800a9e4 <_dtoa_r+0x924>
 800a910:	4631      	mov	r1, r6
 800a912:	4658      	mov	r0, fp
 800a914:	f001 fa38 	bl	800bd88 <__mcmp>
 800a918:	2800      	cmp	r0, #0
 800a91a:	da63      	bge.n	800a9e4 <_dtoa_r+0x924>
 800a91c:	2300      	movs	r3, #0
 800a91e:	4659      	mov	r1, fp
 800a920:	220a      	movs	r2, #10
 800a922:	4620      	mov	r0, r4
 800a924:	f000 ffca 	bl	800b8bc <__multadd>
 800a928:	9b08      	ldr	r3, [sp, #32]
 800a92a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a92e:	4683      	mov	fp, r0
 800a930:	2b00      	cmp	r3, #0
 800a932:	f000 818f 	beq.w	800ac54 <_dtoa_r+0xb94>
 800a936:	4639      	mov	r1, r7
 800a938:	2300      	movs	r3, #0
 800a93a:	220a      	movs	r2, #10
 800a93c:	4620      	mov	r0, r4
 800a93e:	f000 ffbd 	bl	800b8bc <__multadd>
 800a942:	f1b9 0f00 	cmp.w	r9, #0
 800a946:	4607      	mov	r7, r0
 800a948:	f300 808e 	bgt.w	800aa68 <_dtoa_r+0x9a8>
 800a94c:	9b05      	ldr	r3, [sp, #20]
 800a94e:	2b02      	cmp	r3, #2
 800a950:	dc50      	bgt.n	800a9f4 <_dtoa_r+0x934>
 800a952:	e089      	b.n	800aa68 <_dtoa_r+0x9a8>
 800a954:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a956:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a95a:	e75d      	b.n	800a818 <_dtoa_r+0x758>
 800a95c:	9b01      	ldr	r3, [sp, #4]
 800a95e:	1e5e      	subs	r6, r3, #1
 800a960:	9b06      	ldr	r3, [sp, #24]
 800a962:	42b3      	cmp	r3, r6
 800a964:	bfbf      	itttt	lt
 800a966:	9b06      	ldrlt	r3, [sp, #24]
 800a968:	9606      	strlt	r6, [sp, #24]
 800a96a:	1af2      	sublt	r2, r6, r3
 800a96c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a96e:	bfb6      	itet	lt
 800a970:	189b      	addlt	r3, r3, r2
 800a972:	1b9e      	subge	r6, r3, r6
 800a974:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a976:	9b01      	ldr	r3, [sp, #4]
 800a978:	bfb8      	it	lt
 800a97a:	2600      	movlt	r6, #0
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	bfb5      	itete	lt
 800a980:	eba8 0503 	sublt.w	r5, r8, r3
 800a984:	9b01      	ldrge	r3, [sp, #4]
 800a986:	2300      	movlt	r3, #0
 800a988:	4645      	movge	r5, r8
 800a98a:	e747      	b.n	800a81c <_dtoa_r+0x75c>
 800a98c:	9e06      	ldr	r6, [sp, #24]
 800a98e:	9f08      	ldr	r7, [sp, #32]
 800a990:	4645      	mov	r5, r8
 800a992:	e74c      	b.n	800a82e <_dtoa_r+0x76e>
 800a994:	9a06      	ldr	r2, [sp, #24]
 800a996:	e775      	b.n	800a884 <_dtoa_r+0x7c4>
 800a998:	9b05      	ldr	r3, [sp, #20]
 800a99a:	2b01      	cmp	r3, #1
 800a99c:	dc18      	bgt.n	800a9d0 <_dtoa_r+0x910>
 800a99e:	9b02      	ldr	r3, [sp, #8]
 800a9a0:	b9b3      	cbnz	r3, 800a9d0 <_dtoa_r+0x910>
 800a9a2:	9b03      	ldr	r3, [sp, #12]
 800a9a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9a8:	b9a3      	cbnz	r3, 800a9d4 <_dtoa_r+0x914>
 800a9aa:	9b03      	ldr	r3, [sp, #12]
 800a9ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a9b0:	0d1b      	lsrs	r3, r3, #20
 800a9b2:	051b      	lsls	r3, r3, #20
 800a9b4:	b12b      	cbz	r3, 800a9c2 <_dtoa_r+0x902>
 800a9b6:	9b04      	ldr	r3, [sp, #16]
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	9304      	str	r3, [sp, #16]
 800a9bc:	f108 0801 	add.w	r8, r8, #1
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	9306      	str	r3, [sp, #24]
 800a9c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	f47f af74 	bne.w	800a8b4 <_dtoa_r+0x7f4>
 800a9cc:	2001      	movs	r0, #1
 800a9ce:	e779      	b.n	800a8c4 <_dtoa_r+0x804>
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	e7f6      	b.n	800a9c2 <_dtoa_r+0x902>
 800a9d4:	9b02      	ldr	r3, [sp, #8]
 800a9d6:	e7f4      	b.n	800a9c2 <_dtoa_r+0x902>
 800a9d8:	d085      	beq.n	800a8e6 <_dtoa_r+0x826>
 800a9da:	4618      	mov	r0, r3
 800a9dc:	301c      	adds	r0, #28
 800a9de:	e77d      	b.n	800a8dc <_dtoa_r+0x81c>
 800a9e0:	40240000 	.word	0x40240000
 800a9e4:	9b01      	ldr	r3, [sp, #4]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	dc38      	bgt.n	800aa5c <_dtoa_r+0x99c>
 800a9ea:	9b05      	ldr	r3, [sp, #20]
 800a9ec:	2b02      	cmp	r3, #2
 800a9ee:	dd35      	ble.n	800aa5c <_dtoa_r+0x99c>
 800a9f0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a9f4:	f1b9 0f00 	cmp.w	r9, #0
 800a9f8:	d10d      	bne.n	800aa16 <_dtoa_r+0x956>
 800a9fa:	4631      	mov	r1, r6
 800a9fc:	464b      	mov	r3, r9
 800a9fe:	2205      	movs	r2, #5
 800aa00:	4620      	mov	r0, r4
 800aa02:	f000 ff5b 	bl	800b8bc <__multadd>
 800aa06:	4601      	mov	r1, r0
 800aa08:	4606      	mov	r6, r0
 800aa0a:	4658      	mov	r0, fp
 800aa0c:	f001 f9bc 	bl	800bd88 <__mcmp>
 800aa10:	2800      	cmp	r0, #0
 800aa12:	f73f adbd 	bgt.w	800a590 <_dtoa_r+0x4d0>
 800aa16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa18:	9d00      	ldr	r5, [sp, #0]
 800aa1a:	ea6f 0a03 	mvn.w	sl, r3
 800aa1e:	f04f 0800 	mov.w	r8, #0
 800aa22:	4631      	mov	r1, r6
 800aa24:	4620      	mov	r0, r4
 800aa26:	f000 ff27 	bl	800b878 <_Bfree>
 800aa2a:	2f00      	cmp	r7, #0
 800aa2c:	f43f aeb4 	beq.w	800a798 <_dtoa_r+0x6d8>
 800aa30:	f1b8 0f00 	cmp.w	r8, #0
 800aa34:	d005      	beq.n	800aa42 <_dtoa_r+0x982>
 800aa36:	45b8      	cmp	r8, r7
 800aa38:	d003      	beq.n	800aa42 <_dtoa_r+0x982>
 800aa3a:	4641      	mov	r1, r8
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	f000 ff1b 	bl	800b878 <_Bfree>
 800aa42:	4639      	mov	r1, r7
 800aa44:	4620      	mov	r0, r4
 800aa46:	f000 ff17 	bl	800b878 <_Bfree>
 800aa4a:	e6a5      	b.n	800a798 <_dtoa_r+0x6d8>
 800aa4c:	2600      	movs	r6, #0
 800aa4e:	4637      	mov	r7, r6
 800aa50:	e7e1      	b.n	800aa16 <_dtoa_r+0x956>
 800aa52:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800aa54:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800aa58:	4637      	mov	r7, r6
 800aa5a:	e599      	b.n	800a590 <_dtoa_r+0x4d0>
 800aa5c:	9b08      	ldr	r3, [sp, #32]
 800aa5e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	f000 80fd 	beq.w	800ac62 <_dtoa_r+0xba2>
 800aa68:	2d00      	cmp	r5, #0
 800aa6a:	dd05      	ble.n	800aa78 <_dtoa_r+0x9b8>
 800aa6c:	4639      	mov	r1, r7
 800aa6e:	462a      	mov	r2, r5
 800aa70:	4620      	mov	r0, r4
 800aa72:	f001 f91d 	bl	800bcb0 <__lshift>
 800aa76:	4607      	mov	r7, r0
 800aa78:	9b06      	ldr	r3, [sp, #24]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d05c      	beq.n	800ab38 <_dtoa_r+0xa78>
 800aa7e:	6879      	ldr	r1, [r7, #4]
 800aa80:	4620      	mov	r0, r4
 800aa82:	f000 feb9 	bl	800b7f8 <_Balloc>
 800aa86:	4605      	mov	r5, r0
 800aa88:	b928      	cbnz	r0, 800aa96 <_dtoa_r+0x9d6>
 800aa8a:	4b80      	ldr	r3, [pc, #512]	; (800ac8c <_dtoa_r+0xbcc>)
 800aa8c:	4602      	mov	r2, r0
 800aa8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800aa92:	f7ff bb2e 	b.w	800a0f2 <_dtoa_r+0x32>
 800aa96:	693a      	ldr	r2, [r7, #16]
 800aa98:	3202      	adds	r2, #2
 800aa9a:	0092      	lsls	r2, r2, #2
 800aa9c:	f107 010c 	add.w	r1, r7, #12
 800aaa0:	300c      	adds	r0, #12
 800aaa2:	f7fd fa2f 	bl	8007f04 <memcpy>
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	4629      	mov	r1, r5
 800aaaa:	4620      	mov	r0, r4
 800aaac:	f001 f900 	bl	800bcb0 <__lshift>
 800aab0:	9b00      	ldr	r3, [sp, #0]
 800aab2:	3301      	adds	r3, #1
 800aab4:	9301      	str	r3, [sp, #4]
 800aab6:	9b00      	ldr	r3, [sp, #0]
 800aab8:	444b      	add	r3, r9
 800aaba:	9307      	str	r3, [sp, #28]
 800aabc:	9b02      	ldr	r3, [sp, #8]
 800aabe:	f003 0301 	and.w	r3, r3, #1
 800aac2:	46b8      	mov	r8, r7
 800aac4:	9306      	str	r3, [sp, #24]
 800aac6:	4607      	mov	r7, r0
 800aac8:	9b01      	ldr	r3, [sp, #4]
 800aaca:	4631      	mov	r1, r6
 800aacc:	3b01      	subs	r3, #1
 800aace:	4658      	mov	r0, fp
 800aad0:	9302      	str	r3, [sp, #8]
 800aad2:	f7ff fa67 	bl	8009fa4 <quorem>
 800aad6:	4603      	mov	r3, r0
 800aad8:	3330      	adds	r3, #48	; 0x30
 800aada:	9004      	str	r0, [sp, #16]
 800aadc:	4641      	mov	r1, r8
 800aade:	4658      	mov	r0, fp
 800aae0:	9308      	str	r3, [sp, #32]
 800aae2:	f001 f951 	bl	800bd88 <__mcmp>
 800aae6:	463a      	mov	r2, r7
 800aae8:	4681      	mov	r9, r0
 800aaea:	4631      	mov	r1, r6
 800aaec:	4620      	mov	r0, r4
 800aaee:	f001 f967 	bl	800bdc0 <__mdiff>
 800aaf2:	68c2      	ldr	r2, [r0, #12]
 800aaf4:	9b08      	ldr	r3, [sp, #32]
 800aaf6:	4605      	mov	r5, r0
 800aaf8:	bb02      	cbnz	r2, 800ab3c <_dtoa_r+0xa7c>
 800aafa:	4601      	mov	r1, r0
 800aafc:	4658      	mov	r0, fp
 800aafe:	f001 f943 	bl	800bd88 <__mcmp>
 800ab02:	9b08      	ldr	r3, [sp, #32]
 800ab04:	4602      	mov	r2, r0
 800ab06:	4629      	mov	r1, r5
 800ab08:	4620      	mov	r0, r4
 800ab0a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800ab0e:	f000 feb3 	bl	800b878 <_Bfree>
 800ab12:	9b05      	ldr	r3, [sp, #20]
 800ab14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab16:	9d01      	ldr	r5, [sp, #4]
 800ab18:	ea43 0102 	orr.w	r1, r3, r2
 800ab1c:	9b06      	ldr	r3, [sp, #24]
 800ab1e:	430b      	orrs	r3, r1
 800ab20:	9b08      	ldr	r3, [sp, #32]
 800ab22:	d10d      	bne.n	800ab40 <_dtoa_r+0xa80>
 800ab24:	2b39      	cmp	r3, #57	; 0x39
 800ab26:	d029      	beq.n	800ab7c <_dtoa_r+0xabc>
 800ab28:	f1b9 0f00 	cmp.w	r9, #0
 800ab2c:	dd01      	ble.n	800ab32 <_dtoa_r+0xa72>
 800ab2e:	9b04      	ldr	r3, [sp, #16]
 800ab30:	3331      	adds	r3, #49	; 0x31
 800ab32:	9a02      	ldr	r2, [sp, #8]
 800ab34:	7013      	strb	r3, [r2, #0]
 800ab36:	e774      	b.n	800aa22 <_dtoa_r+0x962>
 800ab38:	4638      	mov	r0, r7
 800ab3a:	e7b9      	b.n	800aab0 <_dtoa_r+0x9f0>
 800ab3c:	2201      	movs	r2, #1
 800ab3e:	e7e2      	b.n	800ab06 <_dtoa_r+0xa46>
 800ab40:	f1b9 0f00 	cmp.w	r9, #0
 800ab44:	db06      	blt.n	800ab54 <_dtoa_r+0xa94>
 800ab46:	9905      	ldr	r1, [sp, #20]
 800ab48:	ea41 0909 	orr.w	r9, r1, r9
 800ab4c:	9906      	ldr	r1, [sp, #24]
 800ab4e:	ea59 0101 	orrs.w	r1, r9, r1
 800ab52:	d120      	bne.n	800ab96 <_dtoa_r+0xad6>
 800ab54:	2a00      	cmp	r2, #0
 800ab56:	ddec      	ble.n	800ab32 <_dtoa_r+0xa72>
 800ab58:	4659      	mov	r1, fp
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	4620      	mov	r0, r4
 800ab5e:	9301      	str	r3, [sp, #4]
 800ab60:	f001 f8a6 	bl	800bcb0 <__lshift>
 800ab64:	4631      	mov	r1, r6
 800ab66:	4683      	mov	fp, r0
 800ab68:	f001 f90e 	bl	800bd88 <__mcmp>
 800ab6c:	2800      	cmp	r0, #0
 800ab6e:	9b01      	ldr	r3, [sp, #4]
 800ab70:	dc02      	bgt.n	800ab78 <_dtoa_r+0xab8>
 800ab72:	d1de      	bne.n	800ab32 <_dtoa_r+0xa72>
 800ab74:	07da      	lsls	r2, r3, #31
 800ab76:	d5dc      	bpl.n	800ab32 <_dtoa_r+0xa72>
 800ab78:	2b39      	cmp	r3, #57	; 0x39
 800ab7a:	d1d8      	bne.n	800ab2e <_dtoa_r+0xa6e>
 800ab7c:	9a02      	ldr	r2, [sp, #8]
 800ab7e:	2339      	movs	r3, #57	; 0x39
 800ab80:	7013      	strb	r3, [r2, #0]
 800ab82:	462b      	mov	r3, r5
 800ab84:	461d      	mov	r5, r3
 800ab86:	3b01      	subs	r3, #1
 800ab88:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ab8c:	2a39      	cmp	r2, #57	; 0x39
 800ab8e:	d050      	beq.n	800ac32 <_dtoa_r+0xb72>
 800ab90:	3201      	adds	r2, #1
 800ab92:	701a      	strb	r2, [r3, #0]
 800ab94:	e745      	b.n	800aa22 <_dtoa_r+0x962>
 800ab96:	2a00      	cmp	r2, #0
 800ab98:	dd03      	ble.n	800aba2 <_dtoa_r+0xae2>
 800ab9a:	2b39      	cmp	r3, #57	; 0x39
 800ab9c:	d0ee      	beq.n	800ab7c <_dtoa_r+0xabc>
 800ab9e:	3301      	adds	r3, #1
 800aba0:	e7c7      	b.n	800ab32 <_dtoa_r+0xa72>
 800aba2:	9a01      	ldr	r2, [sp, #4]
 800aba4:	9907      	ldr	r1, [sp, #28]
 800aba6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800abaa:	428a      	cmp	r2, r1
 800abac:	d02a      	beq.n	800ac04 <_dtoa_r+0xb44>
 800abae:	4659      	mov	r1, fp
 800abb0:	2300      	movs	r3, #0
 800abb2:	220a      	movs	r2, #10
 800abb4:	4620      	mov	r0, r4
 800abb6:	f000 fe81 	bl	800b8bc <__multadd>
 800abba:	45b8      	cmp	r8, r7
 800abbc:	4683      	mov	fp, r0
 800abbe:	f04f 0300 	mov.w	r3, #0
 800abc2:	f04f 020a 	mov.w	r2, #10
 800abc6:	4641      	mov	r1, r8
 800abc8:	4620      	mov	r0, r4
 800abca:	d107      	bne.n	800abdc <_dtoa_r+0xb1c>
 800abcc:	f000 fe76 	bl	800b8bc <__multadd>
 800abd0:	4680      	mov	r8, r0
 800abd2:	4607      	mov	r7, r0
 800abd4:	9b01      	ldr	r3, [sp, #4]
 800abd6:	3301      	adds	r3, #1
 800abd8:	9301      	str	r3, [sp, #4]
 800abda:	e775      	b.n	800aac8 <_dtoa_r+0xa08>
 800abdc:	f000 fe6e 	bl	800b8bc <__multadd>
 800abe0:	4639      	mov	r1, r7
 800abe2:	4680      	mov	r8, r0
 800abe4:	2300      	movs	r3, #0
 800abe6:	220a      	movs	r2, #10
 800abe8:	4620      	mov	r0, r4
 800abea:	f000 fe67 	bl	800b8bc <__multadd>
 800abee:	4607      	mov	r7, r0
 800abf0:	e7f0      	b.n	800abd4 <_dtoa_r+0xb14>
 800abf2:	f1b9 0f00 	cmp.w	r9, #0
 800abf6:	9a00      	ldr	r2, [sp, #0]
 800abf8:	bfcc      	ite	gt
 800abfa:	464d      	movgt	r5, r9
 800abfc:	2501      	movle	r5, #1
 800abfe:	4415      	add	r5, r2
 800ac00:	f04f 0800 	mov.w	r8, #0
 800ac04:	4659      	mov	r1, fp
 800ac06:	2201      	movs	r2, #1
 800ac08:	4620      	mov	r0, r4
 800ac0a:	9301      	str	r3, [sp, #4]
 800ac0c:	f001 f850 	bl	800bcb0 <__lshift>
 800ac10:	4631      	mov	r1, r6
 800ac12:	4683      	mov	fp, r0
 800ac14:	f001 f8b8 	bl	800bd88 <__mcmp>
 800ac18:	2800      	cmp	r0, #0
 800ac1a:	dcb2      	bgt.n	800ab82 <_dtoa_r+0xac2>
 800ac1c:	d102      	bne.n	800ac24 <_dtoa_r+0xb64>
 800ac1e:	9b01      	ldr	r3, [sp, #4]
 800ac20:	07db      	lsls	r3, r3, #31
 800ac22:	d4ae      	bmi.n	800ab82 <_dtoa_r+0xac2>
 800ac24:	462b      	mov	r3, r5
 800ac26:	461d      	mov	r5, r3
 800ac28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac2c:	2a30      	cmp	r2, #48	; 0x30
 800ac2e:	d0fa      	beq.n	800ac26 <_dtoa_r+0xb66>
 800ac30:	e6f7      	b.n	800aa22 <_dtoa_r+0x962>
 800ac32:	9a00      	ldr	r2, [sp, #0]
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d1a5      	bne.n	800ab84 <_dtoa_r+0xac4>
 800ac38:	f10a 0a01 	add.w	sl, sl, #1
 800ac3c:	2331      	movs	r3, #49	; 0x31
 800ac3e:	e779      	b.n	800ab34 <_dtoa_r+0xa74>
 800ac40:	4b13      	ldr	r3, [pc, #76]	; (800ac90 <_dtoa_r+0xbd0>)
 800ac42:	f7ff baaf 	b.w	800a1a4 <_dtoa_r+0xe4>
 800ac46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	f47f aa86 	bne.w	800a15a <_dtoa_r+0x9a>
 800ac4e:	4b11      	ldr	r3, [pc, #68]	; (800ac94 <_dtoa_r+0xbd4>)
 800ac50:	f7ff baa8 	b.w	800a1a4 <_dtoa_r+0xe4>
 800ac54:	f1b9 0f00 	cmp.w	r9, #0
 800ac58:	dc03      	bgt.n	800ac62 <_dtoa_r+0xba2>
 800ac5a:	9b05      	ldr	r3, [sp, #20]
 800ac5c:	2b02      	cmp	r3, #2
 800ac5e:	f73f aec9 	bgt.w	800a9f4 <_dtoa_r+0x934>
 800ac62:	9d00      	ldr	r5, [sp, #0]
 800ac64:	4631      	mov	r1, r6
 800ac66:	4658      	mov	r0, fp
 800ac68:	f7ff f99c 	bl	8009fa4 <quorem>
 800ac6c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ac70:	f805 3b01 	strb.w	r3, [r5], #1
 800ac74:	9a00      	ldr	r2, [sp, #0]
 800ac76:	1aaa      	subs	r2, r5, r2
 800ac78:	4591      	cmp	r9, r2
 800ac7a:	ddba      	ble.n	800abf2 <_dtoa_r+0xb32>
 800ac7c:	4659      	mov	r1, fp
 800ac7e:	2300      	movs	r3, #0
 800ac80:	220a      	movs	r2, #10
 800ac82:	4620      	mov	r0, r4
 800ac84:	f000 fe1a 	bl	800b8bc <__multadd>
 800ac88:	4683      	mov	fp, r0
 800ac8a:	e7eb      	b.n	800ac64 <_dtoa_r+0xba4>
 800ac8c:	0800f404 	.word	0x0800f404
 800ac90:	0800f200 	.word	0x0800f200
 800ac94:	0800f381 	.word	0x0800f381

0800ac98 <__sflush_r>:
 800ac98:	898a      	ldrh	r2, [r1, #12]
 800ac9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac9e:	4605      	mov	r5, r0
 800aca0:	0710      	lsls	r0, r2, #28
 800aca2:	460c      	mov	r4, r1
 800aca4:	d458      	bmi.n	800ad58 <__sflush_r+0xc0>
 800aca6:	684b      	ldr	r3, [r1, #4]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	dc05      	bgt.n	800acb8 <__sflush_r+0x20>
 800acac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800acae:	2b00      	cmp	r3, #0
 800acb0:	dc02      	bgt.n	800acb8 <__sflush_r+0x20>
 800acb2:	2000      	movs	r0, #0
 800acb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acba:	2e00      	cmp	r6, #0
 800acbc:	d0f9      	beq.n	800acb2 <__sflush_r+0x1a>
 800acbe:	2300      	movs	r3, #0
 800acc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800acc4:	682f      	ldr	r7, [r5, #0]
 800acc6:	602b      	str	r3, [r5, #0]
 800acc8:	d032      	beq.n	800ad30 <__sflush_r+0x98>
 800acca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800accc:	89a3      	ldrh	r3, [r4, #12]
 800acce:	075a      	lsls	r2, r3, #29
 800acd0:	d505      	bpl.n	800acde <__sflush_r+0x46>
 800acd2:	6863      	ldr	r3, [r4, #4]
 800acd4:	1ac0      	subs	r0, r0, r3
 800acd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800acd8:	b10b      	cbz	r3, 800acde <__sflush_r+0x46>
 800acda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800acdc:	1ac0      	subs	r0, r0, r3
 800acde:	2300      	movs	r3, #0
 800ace0:	4602      	mov	r2, r0
 800ace2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ace4:	6a21      	ldr	r1, [r4, #32]
 800ace6:	4628      	mov	r0, r5
 800ace8:	47b0      	blx	r6
 800acea:	1c43      	adds	r3, r0, #1
 800acec:	89a3      	ldrh	r3, [r4, #12]
 800acee:	d106      	bne.n	800acfe <__sflush_r+0x66>
 800acf0:	6829      	ldr	r1, [r5, #0]
 800acf2:	291d      	cmp	r1, #29
 800acf4:	d82c      	bhi.n	800ad50 <__sflush_r+0xb8>
 800acf6:	4a2a      	ldr	r2, [pc, #168]	; (800ada0 <__sflush_r+0x108>)
 800acf8:	40ca      	lsrs	r2, r1
 800acfa:	07d6      	lsls	r6, r2, #31
 800acfc:	d528      	bpl.n	800ad50 <__sflush_r+0xb8>
 800acfe:	2200      	movs	r2, #0
 800ad00:	6062      	str	r2, [r4, #4]
 800ad02:	04d9      	lsls	r1, r3, #19
 800ad04:	6922      	ldr	r2, [r4, #16]
 800ad06:	6022      	str	r2, [r4, #0]
 800ad08:	d504      	bpl.n	800ad14 <__sflush_r+0x7c>
 800ad0a:	1c42      	adds	r2, r0, #1
 800ad0c:	d101      	bne.n	800ad12 <__sflush_r+0x7a>
 800ad0e:	682b      	ldr	r3, [r5, #0]
 800ad10:	b903      	cbnz	r3, 800ad14 <__sflush_r+0x7c>
 800ad12:	6560      	str	r0, [r4, #84]	; 0x54
 800ad14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad16:	602f      	str	r7, [r5, #0]
 800ad18:	2900      	cmp	r1, #0
 800ad1a:	d0ca      	beq.n	800acb2 <__sflush_r+0x1a>
 800ad1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad20:	4299      	cmp	r1, r3
 800ad22:	d002      	beq.n	800ad2a <__sflush_r+0x92>
 800ad24:	4628      	mov	r0, r5
 800ad26:	f7fd f913 	bl	8007f50 <_free_r>
 800ad2a:	2000      	movs	r0, #0
 800ad2c:	6360      	str	r0, [r4, #52]	; 0x34
 800ad2e:	e7c1      	b.n	800acb4 <__sflush_r+0x1c>
 800ad30:	6a21      	ldr	r1, [r4, #32]
 800ad32:	2301      	movs	r3, #1
 800ad34:	4628      	mov	r0, r5
 800ad36:	47b0      	blx	r6
 800ad38:	1c41      	adds	r1, r0, #1
 800ad3a:	d1c7      	bne.n	800accc <__sflush_r+0x34>
 800ad3c:	682b      	ldr	r3, [r5, #0]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d0c4      	beq.n	800accc <__sflush_r+0x34>
 800ad42:	2b1d      	cmp	r3, #29
 800ad44:	d001      	beq.n	800ad4a <__sflush_r+0xb2>
 800ad46:	2b16      	cmp	r3, #22
 800ad48:	d101      	bne.n	800ad4e <__sflush_r+0xb6>
 800ad4a:	602f      	str	r7, [r5, #0]
 800ad4c:	e7b1      	b.n	800acb2 <__sflush_r+0x1a>
 800ad4e:	89a3      	ldrh	r3, [r4, #12]
 800ad50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad54:	81a3      	strh	r3, [r4, #12]
 800ad56:	e7ad      	b.n	800acb4 <__sflush_r+0x1c>
 800ad58:	690f      	ldr	r7, [r1, #16]
 800ad5a:	2f00      	cmp	r7, #0
 800ad5c:	d0a9      	beq.n	800acb2 <__sflush_r+0x1a>
 800ad5e:	0793      	lsls	r3, r2, #30
 800ad60:	680e      	ldr	r6, [r1, #0]
 800ad62:	bf08      	it	eq
 800ad64:	694b      	ldreq	r3, [r1, #20]
 800ad66:	600f      	str	r7, [r1, #0]
 800ad68:	bf18      	it	ne
 800ad6a:	2300      	movne	r3, #0
 800ad6c:	eba6 0807 	sub.w	r8, r6, r7
 800ad70:	608b      	str	r3, [r1, #8]
 800ad72:	f1b8 0f00 	cmp.w	r8, #0
 800ad76:	dd9c      	ble.n	800acb2 <__sflush_r+0x1a>
 800ad78:	6a21      	ldr	r1, [r4, #32]
 800ad7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ad7c:	4643      	mov	r3, r8
 800ad7e:	463a      	mov	r2, r7
 800ad80:	4628      	mov	r0, r5
 800ad82:	47b0      	blx	r6
 800ad84:	2800      	cmp	r0, #0
 800ad86:	dc06      	bgt.n	800ad96 <__sflush_r+0xfe>
 800ad88:	89a3      	ldrh	r3, [r4, #12]
 800ad8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad8e:	81a3      	strh	r3, [r4, #12]
 800ad90:	f04f 30ff 	mov.w	r0, #4294967295
 800ad94:	e78e      	b.n	800acb4 <__sflush_r+0x1c>
 800ad96:	4407      	add	r7, r0
 800ad98:	eba8 0800 	sub.w	r8, r8, r0
 800ad9c:	e7e9      	b.n	800ad72 <__sflush_r+0xda>
 800ad9e:	bf00      	nop
 800ada0:	20400001 	.word	0x20400001

0800ada4 <_fflush_r>:
 800ada4:	b538      	push	{r3, r4, r5, lr}
 800ada6:	690b      	ldr	r3, [r1, #16]
 800ada8:	4605      	mov	r5, r0
 800adaa:	460c      	mov	r4, r1
 800adac:	b913      	cbnz	r3, 800adb4 <_fflush_r+0x10>
 800adae:	2500      	movs	r5, #0
 800adb0:	4628      	mov	r0, r5
 800adb2:	bd38      	pop	{r3, r4, r5, pc}
 800adb4:	b118      	cbz	r0, 800adbe <_fflush_r+0x1a>
 800adb6:	6983      	ldr	r3, [r0, #24]
 800adb8:	b90b      	cbnz	r3, 800adbe <_fflush_r+0x1a>
 800adba:	f000 f887 	bl	800aecc <__sinit>
 800adbe:	4b14      	ldr	r3, [pc, #80]	; (800ae10 <_fflush_r+0x6c>)
 800adc0:	429c      	cmp	r4, r3
 800adc2:	d11b      	bne.n	800adfc <_fflush_r+0x58>
 800adc4:	686c      	ldr	r4, [r5, #4]
 800adc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d0ef      	beq.n	800adae <_fflush_r+0xa>
 800adce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800add0:	07d0      	lsls	r0, r2, #31
 800add2:	d404      	bmi.n	800adde <_fflush_r+0x3a>
 800add4:	0599      	lsls	r1, r3, #22
 800add6:	d402      	bmi.n	800adde <_fflush_r+0x3a>
 800add8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adda:	f000 fc88 	bl	800b6ee <__retarget_lock_acquire_recursive>
 800adde:	4628      	mov	r0, r5
 800ade0:	4621      	mov	r1, r4
 800ade2:	f7ff ff59 	bl	800ac98 <__sflush_r>
 800ade6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ade8:	07da      	lsls	r2, r3, #31
 800adea:	4605      	mov	r5, r0
 800adec:	d4e0      	bmi.n	800adb0 <_fflush_r+0xc>
 800adee:	89a3      	ldrh	r3, [r4, #12]
 800adf0:	059b      	lsls	r3, r3, #22
 800adf2:	d4dd      	bmi.n	800adb0 <_fflush_r+0xc>
 800adf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adf6:	f000 fc7b 	bl	800b6f0 <__retarget_lock_release_recursive>
 800adfa:	e7d9      	b.n	800adb0 <_fflush_r+0xc>
 800adfc:	4b05      	ldr	r3, [pc, #20]	; (800ae14 <_fflush_r+0x70>)
 800adfe:	429c      	cmp	r4, r3
 800ae00:	d101      	bne.n	800ae06 <_fflush_r+0x62>
 800ae02:	68ac      	ldr	r4, [r5, #8]
 800ae04:	e7df      	b.n	800adc6 <_fflush_r+0x22>
 800ae06:	4b04      	ldr	r3, [pc, #16]	; (800ae18 <_fflush_r+0x74>)
 800ae08:	429c      	cmp	r4, r3
 800ae0a:	bf08      	it	eq
 800ae0c:	68ec      	ldreq	r4, [r5, #12]
 800ae0e:	e7da      	b.n	800adc6 <_fflush_r+0x22>
 800ae10:	0800f438 	.word	0x0800f438
 800ae14:	0800f458 	.word	0x0800f458
 800ae18:	0800f418 	.word	0x0800f418

0800ae1c <std>:
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	b510      	push	{r4, lr}
 800ae20:	4604      	mov	r4, r0
 800ae22:	e9c0 3300 	strd	r3, r3, [r0]
 800ae26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae2a:	6083      	str	r3, [r0, #8]
 800ae2c:	8181      	strh	r1, [r0, #12]
 800ae2e:	6643      	str	r3, [r0, #100]	; 0x64
 800ae30:	81c2      	strh	r2, [r0, #14]
 800ae32:	6183      	str	r3, [r0, #24]
 800ae34:	4619      	mov	r1, r3
 800ae36:	2208      	movs	r2, #8
 800ae38:	305c      	adds	r0, #92	; 0x5c
 800ae3a:	f7fd f871 	bl	8007f20 <memset>
 800ae3e:	4b05      	ldr	r3, [pc, #20]	; (800ae54 <std+0x38>)
 800ae40:	6263      	str	r3, [r4, #36]	; 0x24
 800ae42:	4b05      	ldr	r3, [pc, #20]	; (800ae58 <std+0x3c>)
 800ae44:	62a3      	str	r3, [r4, #40]	; 0x28
 800ae46:	4b05      	ldr	r3, [pc, #20]	; (800ae5c <std+0x40>)
 800ae48:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ae4a:	4b05      	ldr	r3, [pc, #20]	; (800ae60 <std+0x44>)
 800ae4c:	6224      	str	r4, [r4, #32]
 800ae4e:	6323      	str	r3, [r4, #48]	; 0x30
 800ae50:	bd10      	pop	{r4, pc}
 800ae52:	bf00      	nop
 800ae54:	0800c6e9 	.word	0x0800c6e9
 800ae58:	0800c70b 	.word	0x0800c70b
 800ae5c:	0800c743 	.word	0x0800c743
 800ae60:	0800c767 	.word	0x0800c767

0800ae64 <_cleanup_r>:
 800ae64:	4901      	ldr	r1, [pc, #4]	; (800ae6c <_cleanup_r+0x8>)
 800ae66:	f000 b8af 	b.w	800afc8 <_fwalk_reent>
 800ae6a:	bf00      	nop
 800ae6c:	0800ada5 	.word	0x0800ada5

0800ae70 <__sfmoreglue>:
 800ae70:	b570      	push	{r4, r5, r6, lr}
 800ae72:	1e4a      	subs	r2, r1, #1
 800ae74:	2568      	movs	r5, #104	; 0x68
 800ae76:	4355      	muls	r5, r2
 800ae78:	460e      	mov	r6, r1
 800ae7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ae7e:	f7fd f8b7 	bl	8007ff0 <_malloc_r>
 800ae82:	4604      	mov	r4, r0
 800ae84:	b140      	cbz	r0, 800ae98 <__sfmoreglue+0x28>
 800ae86:	2100      	movs	r1, #0
 800ae88:	e9c0 1600 	strd	r1, r6, [r0]
 800ae8c:	300c      	adds	r0, #12
 800ae8e:	60a0      	str	r0, [r4, #8]
 800ae90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ae94:	f7fd f844 	bl	8007f20 <memset>
 800ae98:	4620      	mov	r0, r4
 800ae9a:	bd70      	pop	{r4, r5, r6, pc}

0800ae9c <__sfp_lock_acquire>:
 800ae9c:	4801      	ldr	r0, [pc, #4]	; (800aea4 <__sfp_lock_acquire+0x8>)
 800ae9e:	f000 bc26 	b.w	800b6ee <__retarget_lock_acquire_recursive>
 800aea2:	bf00      	nop
 800aea4:	200027c6 	.word	0x200027c6

0800aea8 <__sfp_lock_release>:
 800aea8:	4801      	ldr	r0, [pc, #4]	; (800aeb0 <__sfp_lock_release+0x8>)
 800aeaa:	f000 bc21 	b.w	800b6f0 <__retarget_lock_release_recursive>
 800aeae:	bf00      	nop
 800aeb0:	200027c6 	.word	0x200027c6

0800aeb4 <__sinit_lock_acquire>:
 800aeb4:	4801      	ldr	r0, [pc, #4]	; (800aebc <__sinit_lock_acquire+0x8>)
 800aeb6:	f000 bc1a 	b.w	800b6ee <__retarget_lock_acquire_recursive>
 800aeba:	bf00      	nop
 800aebc:	200027c1 	.word	0x200027c1

0800aec0 <__sinit_lock_release>:
 800aec0:	4801      	ldr	r0, [pc, #4]	; (800aec8 <__sinit_lock_release+0x8>)
 800aec2:	f000 bc15 	b.w	800b6f0 <__retarget_lock_release_recursive>
 800aec6:	bf00      	nop
 800aec8:	200027c1 	.word	0x200027c1

0800aecc <__sinit>:
 800aecc:	b510      	push	{r4, lr}
 800aece:	4604      	mov	r4, r0
 800aed0:	f7ff fff0 	bl	800aeb4 <__sinit_lock_acquire>
 800aed4:	69a3      	ldr	r3, [r4, #24]
 800aed6:	b11b      	cbz	r3, 800aee0 <__sinit+0x14>
 800aed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aedc:	f7ff bff0 	b.w	800aec0 <__sinit_lock_release>
 800aee0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aee4:	6523      	str	r3, [r4, #80]	; 0x50
 800aee6:	4b13      	ldr	r3, [pc, #76]	; (800af34 <__sinit+0x68>)
 800aee8:	4a13      	ldr	r2, [pc, #76]	; (800af38 <__sinit+0x6c>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	62a2      	str	r2, [r4, #40]	; 0x28
 800aeee:	42a3      	cmp	r3, r4
 800aef0:	bf04      	itt	eq
 800aef2:	2301      	moveq	r3, #1
 800aef4:	61a3      	streq	r3, [r4, #24]
 800aef6:	4620      	mov	r0, r4
 800aef8:	f000 f820 	bl	800af3c <__sfp>
 800aefc:	6060      	str	r0, [r4, #4]
 800aefe:	4620      	mov	r0, r4
 800af00:	f000 f81c 	bl	800af3c <__sfp>
 800af04:	60a0      	str	r0, [r4, #8]
 800af06:	4620      	mov	r0, r4
 800af08:	f000 f818 	bl	800af3c <__sfp>
 800af0c:	2200      	movs	r2, #0
 800af0e:	60e0      	str	r0, [r4, #12]
 800af10:	2104      	movs	r1, #4
 800af12:	6860      	ldr	r0, [r4, #4]
 800af14:	f7ff ff82 	bl	800ae1c <std>
 800af18:	68a0      	ldr	r0, [r4, #8]
 800af1a:	2201      	movs	r2, #1
 800af1c:	2109      	movs	r1, #9
 800af1e:	f7ff ff7d 	bl	800ae1c <std>
 800af22:	68e0      	ldr	r0, [r4, #12]
 800af24:	2202      	movs	r2, #2
 800af26:	2112      	movs	r1, #18
 800af28:	f7ff ff78 	bl	800ae1c <std>
 800af2c:	2301      	movs	r3, #1
 800af2e:	61a3      	str	r3, [r4, #24]
 800af30:	e7d2      	b.n	800aed8 <__sinit+0xc>
 800af32:	bf00      	nop
 800af34:	0800f1ec 	.word	0x0800f1ec
 800af38:	0800ae65 	.word	0x0800ae65

0800af3c <__sfp>:
 800af3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af3e:	4607      	mov	r7, r0
 800af40:	f7ff ffac 	bl	800ae9c <__sfp_lock_acquire>
 800af44:	4b1e      	ldr	r3, [pc, #120]	; (800afc0 <__sfp+0x84>)
 800af46:	681e      	ldr	r6, [r3, #0]
 800af48:	69b3      	ldr	r3, [r6, #24]
 800af4a:	b913      	cbnz	r3, 800af52 <__sfp+0x16>
 800af4c:	4630      	mov	r0, r6
 800af4e:	f7ff ffbd 	bl	800aecc <__sinit>
 800af52:	3648      	adds	r6, #72	; 0x48
 800af54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800af58:	3b01      	subs	r3, #1
 800af5a:	d503      	bpl.n	800af64 <__sfp+0x28>
 800af5c:	6833      	ldr	r3, [r6, #0]
 800af5e:	b30b      	cbz	r3, 800afa4 <__sfp+0x68>
 800af60:	6836      	ldr	r6, [r6, #0]
 800af62:	e7f7      	b.n	800af54 <__sfp+0x18>
 800af64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800af68:	b9d5      	cbnz	r5, 800afa0 <__sfp+0x64>
 800af6a:	4b16      	ldr	r3, [pc, #88]	; (800afc4 <__sfp+0x88>)
 800af6c:	60e3      	str	r3, [r4, #12]
 800af6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800af72:	6665      	str	r5, [r4, #100]	; 0x64
 800af74:	f000 fbba 	bl	800b6ec <__retarget_lock_init_recursive>
 800af78:	f7ff ff96 	bl	800aea8 <__sfp_lock_release>
 800af7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800af80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800af84:	6025      	str	r5, [r4, #0]
 800af86:	61a5      	str	r5, [r4, #24]
 800af88:	2208      	movs	r2, #8
 800af8a:	4629      	mov	r1, r5
 800af8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800af90:	f7fc ffc6 	bl	8007f20 <memset>
 800af94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800af98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800af9c:	4620      	mov	r0, r4
 800af9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afa0:	3468      	adds	r4, #104	; 0x68
 800afa2:	e7d9      	b.n	800af58 <__sfp+0x1c>
 800afa4:	2104      	movs	r1, #4
 800afa6:	4638      	mov	r0, r7
 800afa8:	f7ff ff62 	bl	800ae70 <__sfmoreglue>
 800afac:	4604      	mov	r4, r0
 800afae:	6030      	str	r0, [r6, #0]
 800afb0:	2800      	cmp	r0, #0
 800afb2:	d1d5      	bne.n	800af60 <__sfp+0x24>
 800afb4:	f7ff ff78 	bl	800aea8 <__sfp_lock_release>
 800afb8:	230c      	movs	r3, #12
 800afba:	603b      	str	r3, [r7, #0]
 800afbc:	e7ee      	b.n	800af9c <__sfp+0x60>
 800afbe:	bf00      	nop
 800afc0:	0800f1ec 	.word	0x0800f1ec
 800afc4:	ffff0001 	.word	0xffff0001

0800afc8 <_fwalk_reent>:
 800afc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afcc:	4606      	mov	r6, r0
 800afce:	4688      	mov	r8, r1
 800afd0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800afd4:	2700      	movs	r7, #0
 800afd6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800afda:	f1b9 0901 	subs.w	r9, r9, #1
 800afde:	d505      	bpl.n	800afec <_fwalk_reent+0x24>
 800afe0:	6824      	ldr	r4, [r4, #0]
 800afe2:	2c00      	cmp	r4, #0
 800afe4:	d1f7      	bne.n	800afd6 <_fwalk_reent+0xe>
 800afe6:	4638      	mov	r0, r7
 800afe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afec:	89ab      	ldrh	r3, [r5, #12]
 800afee:	2b01      	cmp	r3, #1
 800aff0:	d907      	bls.n	800b002 <_fwalk_reent+0x3a>
 800aff2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aff6:	3301      	adds	r3, #1
 800aff8:	d003      	beq.n	800b002 <_fwalk_reent+0x3a>
 800affa:	4629      	mov	r1, r5
 800affc:	4630      	mov	r0, r6
 800affe:	47c0      	blx	r8
 800b000:	4307      	orrs	r7, r0
 800b002:	3568      	adds	r5, #104	; 0x68
 800b004:	e7e9      	b.n	800afda <_fwalk_reent+0x12>

0800b006 <rshift>:
 800b006:	6903      	ldr	r3, [r0, #16]
 800b008:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b00c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b010:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b014:	f100 0414 	add.w	r4, r0, #20
 800b018:	dd45      	ble.n	800b0a6 <rshift+0xa0>
 800b01a:	f011 011f 	ands.w	r1, r1, #31
 800b01e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b022:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b026:	d10c      	bne.n	800b042 <rshift+0x3c>
 800b028:	f100 0710 	add.w	r7, r0, #16
 800b02c:	4629      	mov	r1, r5
 800b02e:	42b1      	cmp	r1, r6
 800b030:	d334      	bcc.n	800b09c <rshift+0x96>
 800b032:	1a9b      	subs	r3, r3, r2
 800b034:	009b      	lsls	r3, r3, #2
 800b036:	1eea      	subs	r2, r5, #3
 800b038:	4296      	cmp	r6, r2
 800b03a:	bf38      	it	cc
 800b03c:	2300      	movcc	r3, #0
 800b03e:	4423      	add	r3, r4
 800b040:	e015      	b.n	800b06e <rshift+0x68>
 800b042:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b046:	f1c1 0820 	rsb	r8, r1, #32
 800b04a:	40cf      	lsrs	r7, r1
 800b04c:	f105 0e04 	add.w	lr, r5, #4
 800b050:	46a1      	mov	r9, r4
 800b052:	4576      	cmp	r6, lr
 800b054:	46f4      	mov	ip, lr
 800b056:	d815      	bhi.n	800b084 <rshift+0x7e>
 800b058:	1a9b      	subs	r3, r3, r2
 800b05a:	009a      	lsls	r2, r3, #2
 800b05c:	3a04      	subs	r2, #4
 800b05e:	3501      	adds	r5, #1
 800b060:	42ae      	cmp	r6, r5
 800b062:	bf38      	it	cc
 800b064:	2200      	movcc	r2, #0
 800b066:	18a3      	adds	r3, r4, r2
 800b068:	50a7      	str	r7, [r4, r2]
 800b06a:	b107      	cbz	r7, 800b06e <rshift+0x68>
 800b06c:	3304      	adds	r3, #4
 800b06e:	1b1a      	subs	r2, r3, r4
 800b070:	42a3      	cmp	r3, r4
 800b072:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b076:	bf08      	it	eq
 800b078:	2300      	moveq	r3, #0
 800b07a:	6102      	str	r2, [r0, #16]
 800b07c:	bf08      	it	eq
 800b07e:	6143      	streq	r3, [r0, #20]
 800b080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b084:	f8dc c000 	ldr.w	ip, [ip]
 800b088:	fa0c fc08 	lsl.w	ip, ip, r8
 800b08c:	ea4c 0707 	orr.w	r7, ip, r7
 800b090:	f849 7b04 	str.w	r7, [r9], #4
 800b094:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b098:	40cf      	lsrs	r7, r1
 800b09a:	e7da      	b.n	800b052 <rshift+0x4c>
 800b09c:	f851 cb04 	ldr.w	ip, [r1], #4
 800b0a0:	f847 cf04 	str.w	ip, [r7, #4]!
 800b0a4:	e7c3      	b.n	800b02e <rshift+0x28>
 800b0a6:	4623      	mov	r3, r4
 800b0a8:	e7e1      	b.n	800b06e <rshift+0x68>

0800b0aa <__hexdig_fun>:
 800b0aa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b0ae:	2b09      	cmp	r3, #9
 800b0b0:	d802      	bhi.n	800b0b8 <__hexdig_fun+0xe>
 800b0b2:	3820      	subs	r0, #32
 800b0b4:	b2c0      	uxtb	r0, r0
 800b0b6:	4770      	bx	lr
 800b0b8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b0bc:	2b05      	cmp	r3, #5
 800b0be:	d801      	bhi.n	800b0c4 <__hexdig_fun+0x1a>
 800b0c0:	3847      	subs	r0, #71	; 0x47
 800b0c2:	e7f7      	b.n	800b0b4 <__hexdig_fun+0xa>
 800b0c4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b0c8:	2b05      	cmp	r3, #5
 800b0ca:	d801      	bhi.n	800b0d0 <__hexdig_fun+0x26>
 800b0cc:	3827      	subs	r0, #39	; 0x27
 800b0ce:	e7f1      	b.n	800b0b4 <__hexdig_fun+0xa>
 800b0d0:	2000      	movs	r0, #0
 800b0d2:	4770      	bx	lr

0800b0d4 <__gethex>:
 800b0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0d8:	ed2d 8b02 	vpush	{d8}
 800b0dc:	b089      	sub	sp, #36	; 0x24
 800b0de:	ee08 0a10 	vmov	s16, r0
 800b0e2:	9304      	str	r3, [sp, #16]
 800b0e4:	4bbc      	ldr	r3, [pc, #752]	; (800b3d8 <__gethex+0x304>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	9301      	str	r3, [sp, #4]
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	468b      	mov	fp, r1
 800b0ee:	4690      	mov	r8, r2
 800b0f0:	f7f5 f86e 	bl	80001d0 <strlen>
 800b0f4:	9b01      	ldr	r3, [sp, #4]
 800b0f6:	f8db 2000 	ldr.w	r2, [fp]
 800b0fa:	4403      	add	r3, r0
 800b0fc:	4682      	mov	sl, r0
 800b0fe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b102:	9305      	str	r3, [sp, #20]
 800b104:	1c93      	adds	r3, r2, #2
 800b106:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b10a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b10e:	32fe      	adds	r2, #254	; 0xfe
 800b110:	18d1      	adds	r1, r2, r3
 800b112:	461f      	mov	r7, r3
 800b114:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b118:	9100      	str	r1, [sp, #0]
 800b11a:	2830      	cmp	r0, #48	; 0x30
 800b11c:	d0f8      	beq.n	800b110 <__gethex+0x3c>
 800b11e:	f7ff ffc4 	bl	800b0aa <__hexdig_fun>
 800b122:	4604      	mov	r4, r0
 800b124:	2800      	cmp	r0, #0
 800b126:	d13a      	bne.n	800b19e <__gethex+0xca>
 800b128:	9901      	ldr	r1, [sp, #4]
 800b12a:	4652      	mov	r2, sl
 800b12c:	4638      	mov	r0, r7
 800b12e:	f001 fb1e 	bl	800c76e <strncmp>
 800b132:	4605      	mov	r5, r0
 800b134:	2800      	cmp	r0, #0
 800b136:	d168      	bne.n	800b20a <__gethex+0x136>
 800b138:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b13c:	eb07 060a 	add.w	r6, r7, sl
 800b140:	f7ff ffb3 	bl	800b0aa <__hexdig_fun>
 800b144:	2800      	cmp	r0, #0
 800b146:	d062      	beq.n	800b20e <__gethex+0x13a>
 800b148:	4633      	mov	r3, r6
 800b14a:	7818      	ldrb	r0, [r3, #0]
 800b14c:	2830      	cmp	r0, #48	; 0x30
 800b14e:	461f      	mov	r7, r3
 800b150:	f103 0301 	add.w	r3, r3, #1
 800b154:	d0f9      	beq.n	800b14a <__gethex+0x76>
 800b156:	f7ff ffa8 	bl	800b0aa <__hexdig_fun>
 800b15a:	2301      	movs	r3, #1
 800b15c:	fab0 f480 	clz	r4, r0
 800b160:	0964      	lsrs	r4, r4, #5
 800b162:	4635      	mov	r5, r6
 800b164:	9300      	str	r3, [sp, #0]
 800b166:	463a      	mov	r2, r7
 800b168:	4616      	mov	r6, r2
 800b16a:	3201      	adds	r2, #1
 800b16c:	7830      	ldrb	r0, [r6, #0]
 800b16e:	f7ff ff9c 	bl	800b0aa <__hexdig_fun>
 800b172:	2800      	cmp	r0, #0
 800b174:	d1f8      	bne.n	800b168 <__gethex+0x94>
 800b176:	9901      	ldr	r1, [sp, #4]
 800b178:	4652      	mov	r2, sl
 800b17a:	4630      	mov	r0, r6
 800b17c:	f001 faf7 	bl	800c76e <strncmp>
 800b180:	b980      	cbnz	r0, 800b1a4 <__gethex+0xd0>
 800b182:	b94d      	cbnz	r5, 800b198 <__gethex+0xc4>
 800b184:	eb06 050a 	add.w	r5, r6, sl
 800b188:	462a      	mov	r2, r5
 800b18a:	4616      	mov	r6, r2
 800b18c:	3201      	adds	r2, #1
 800b18e:	7830      	ldrb	r0, [r6, #0]
 800b190:	f7ff ff8b 	bl	800b0aa <__hexdig_fun>
 800b194:	2800      	cmp	r0, #0
 800b196:	d1f8      	bne.n	800b18a <__gethex+0xb6>
 800b198:	1bad      	subs	r5, r5, r6
 800b19a:	00ad      	lsls	r5, r5, #2
 800b19c:	e004      	b.n	800b1a8 <__gethex+0xd4>
 800b19e:	2400      	movs	r4, #0
 800b1a0:	4625      	mov	r5, r4
 800b1a2:	e7e0      	b.n	800b166 <__gethex+0x92>
 800b1a4:	2d00      	cmp	r5, #0
 800b1a6:	d1f7      	bne.n	800b198 <__gethex+0xc4>
 800b1a8:	7833      	ldrb	r3, [r6, #0]
 800b1aa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b1ae:	2b50      	cmp	r3, #80	; 0x50
 800b1b0:	d13b      	bne.n	800b22a <__gethex+0x156>
 800b1b2:	7873      	ldrb	r3, [r6, #1]
 800b1b4:	2b2b      	cmp	r3, #43	; 0x2b
 800b1b6:	d02c      	beq.n	800b212 <__gethex+0x13e>
 800b1b8:	2b2d      	cmp	r3, #45	; 0x2d
 800b1ba:	d02e      	beq.n	800b21a <__gethex+0x146>
 800b1bc:	1c71      	adds	r1, r6, #1
 800b1be:	f04f 0900 	mov.w	r9, #0
 800b1c2:	7808      	ldrb	r0, [r1, #0]
 800b1c4:	f7ff ff71 	bl	800b0aa <__hexdig_fun>
 800b1c8:	1e43      	subs	r3, r0, #1
 800b1ca:	b2db      	uxtb	r3, r3
 800b1cc:	2b18      	cmp	r3, #24
 800b1ce:	d82c      	bhi.n	800b22a <__gethex+0x156>
 800b1d0:	f1a0 0210 	sub.w	r2, r0, #16
 800b1d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b1d8:	f7ff ff67 	bl	800b0aa <__hexdig_fun>
 800b1dc:	1e43      	subs	r3, r0, #1
 800b1de:	b2db      	uxtb	r3, r3
 800b1e0:	2b18      	cmp	r3, #24
 800b1e2:	d91d      	bls.n	800b220 <__gethex+0x14c>
 800b1e4:	f1b9 0f00 	cmp.w	r9, #0
 800b1e8:	d000      	beq.n	800b1ec <__gethex+0x118>
 800b1ea:	4252      	negs	r2, r2
 800b1ec:	4415      	add	r5, r2
 800b1ee:	f8cb 1000 	str.w	r1, [fp]
 800b1f2:	b1e4      	cbz	r4, 800b22e <__gethex+0x15a>
 800b1f4:	9b00      	ldr	r3, [sp, #0]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	bf14      	ite	ne
 800b1fa:	2700      	movne	r7, #0
 800b1fc:	2706      	moveq	r7, #6
 800b1fe:	4638      	mov	r0, r7
 800b200:	b009      	add	sp, #36	; 0x24
 800b202:	ecbd 8b02 	vpop	{d8}
 800b206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b20a:	463e      	mov	r6, r7
 800b20c:	4625      	mov	r5, r4
 800b20e:	2401      	movs	r4, #1
 800b210:	e7ca      	b.n	800b1a8 <__gethex+0xd4>
 800b212:	f04f 0900 	mov.w	r9, #0
 800b216:	1cb1      	adds	r1, r6, #2
 800b218:	e7d3      	b.n	800b1c2 <__gethex+0xee>
 800b21a:	f04f 0901 	mov.w	r9, #1
 800b21e:	e7fa      	b.n	800b216 <__gethex+0x142>
 800b220:	230a      	movs	r3, #10
 800b222:	fb03 0202 	mla	r2, r3, r2, r0
 800b226:	3a10      	subs	r2, #16
 800b228:	e7d4      	b.n	800b1d4 <__gethex+0x100>
 800b22a:	4631      	mov	r1, r6
 800b22c:	e7df      	b.n	800b1ee <__gethex+0x11a>
 800b22e:	1bf3      	subs	r3, r6, r7
 800b230:	3b01      	subs	r3, #1
 800b232:	4621      	mov	r1, r4
 800b234:	2b07      	cmp	r3, #7
 800b236:	dc0b      	bgt.n	800b250 <__gethex+0x17c>
 800b238:	ee18 0a10 	vmov	r0, s16
 800b23c:	f000 fadc 	bl	800b7f8 <_Balloc>
 800b240:	4604      	mov	r4, r0
 800b242:	b940      	cbnz	r0, 800b256 <__gethex+0x182>
 800b244:	4b65      	ldr	r3, [pc, #404]	; (800b3dc <__gethex+0x308>)
 800b246:	4602      	mov	r2, r0
 800b248:	21de      	movs	r1, #222	; 0xde
 800b24a:	4865      	ldr	r0, [pc, #404]	; (800b3e0 <__gethex+0x30c>)
 800b24c:	f001 fac0 	bl	800c7d0 <__assert_func>
 800b250:	3101      	adds	r1, #1
 800b252:	105b      	asrs	r3, r3, #1
 800b254:	e7ee      	b.n	800b234 <__gethex+0x160>
 800b256:	f100 0914 	add.w	r9, r0, #20
 800b25a:	f04f 0b00 	mov.w	fp, #0
 800b25e:	f1ca 0301 	rsb	r3, sl, #1
 800b262:	f8cd 9008 	str.w	r9, [sp, #8]
 800b266:	f8cd b000 	str.w	fp, [sp]
 800b26a:	9306      	str	r3, [sp, #24]
 800b26c:	42b7      	cmp	r7, r6
 800b26e:	d340      	bcc.n	800b2f2 <__gethex+0x21e>
 800b270:	9802      	ldr	r0, [sp, #8]
 800b272:	9b00      	ldr	r3, [sp, #0]
 800b274:	f840 3b04 	str.w	r3, [r0], #4
 800b278:	eba0 0009 	sub.w	r0, r0, r9
 800b27c:	1080      	asrs	r0, r0, #2
 800b27e:	0146      	lsls	r6, r0, #5
 800b280:	6120      	str	r0, [r4, #16]
 800b282:	4618      	mov	r0, r3
 800b284:	f000 fbae 	bl	800b9e4 <__hi0bits>
 800b288:	1a30      	subs	r0, r6, r0
 800b28a:	f8d8 6000 	ldr.w	r6, [r8]
 800b28e:	42b0      	cmp	r0, r6
 800b290:	dd63      	ble.n	800b35a <__gethex+0x286>
 800b292:	1b87      	subs	r7, r0, r6
 800b294:	4639      	mov	r1, r7
 800b296:	4620      	mov	r0, r4
 800b298:	f000 ff48 	bl	800c12c <__any_on>
 800b29c:	4682      	mov	sl, r0
 800b29e:	b1a8      	cbz	r0, 800b2cc <__gethex+0x1f8>
 800b2a0:	1e7b      	subs	r3, r7, #1
 800b2a2:	1159      	asrs	r1, r3, #5
 800b2a4:	f003 021f 	and.w	r2, r3, #31
 800b2a8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b2ac:	f04f 0a01 	mov.w	sl, #1
 800b2b0:	fa0a f202 	lsl.w	r2, sl, r2
 800b2b4:	420a      	tst	r2, r1
 800b2b6:	d009      	beq.n	800b2cc <__gethex+0x1f8>
 800b2b8:	4553      	cmp	r3, sl
 800b2ba:	dd05      	ble.n	800b2c8 <__gethex+0x1f4>
 800b2bc:	1eb9      	subs	r1, r7, #2
 800b2be:	4620      	mov	r0, r4
 800b2c0:	f000 ff34 	bl	800c12c <__any_on>
 800b2c4:	2800      	cmp	r0, #0
 800b2c6:	d145      	bne.n	800b354 <__gethex+0x280>
 800b2c8:	f04f 0a02 	mov.w	sl, #2
 800b2cc:	4639      	mov	r1, r7
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	f7ff fe99 	bl	800b006 <rshift>
 800b2d4:	443d      	add	r5, r7
 800b2d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b2da:	42ab      	cmp	r3, r5
 800b2dc:	da4c      	bge.n	800b378 <__gethex+0x2a4>
 800b2de:	ee18 0a10 	vmov	r0, s16
 800b2e2:	4621      	mov	r1, r4
 800b2e4:	f000 fac8 	bl	800b878 <_Bfree>
 800b2e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	6013      	str	r3, [r2, #0]
 800b2ee:	27a3      	movs	r7, #163	; 0xa3
 800b2f0:	e785      	b.n	800b1fe <__gethex+0x12a>
 800b2f2:	1e73      	subs	r3, r6, #1
 800b2f4:	9a05      	ldr	r2, [sp, #20]
 800b2f6:	9303      	str	r3, [sp, #12]
 800b2f8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d019      	beq.n	800b334 <__gethex+0x260>
 800b300:	f1bb 0f20 	cmp.w	fp, #32
 800b304:	d107      	bne.n	800b316 <__gethex+0x242>
 800b306:	9b02      	ldr	r3, [sp, #8]
 800b308:	9a00      	ldr	r2, [sp, #0]
 800b30a:	f843 2b04 	str.w	r2, [r3], #4
 800b30e:	9302      	str	r3, [sp, #8]
 800b310:	2300      	movs	r3, #0
 800b312:	9300      	str	r3, [sp, #0]
 800b314:	469b      	mov	fp, r3
 800b316:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b31a:	f7ff fec6 	bl	800b0aa <__hexdig_fun>
 800b31e:	9b00      	ldr	r3, [sp, #0]
 800b320:	f000 000f 	and.w	r0, r0, #15
 800b324:	fa00 f00b 	lsl.w	r0, r0, fp
 800b328:	4303      	orrs	r3, r0
 800b32a:	9300      	str	r3, [sp, #0]
 800b32c:	f10b 0b04 	add.w	fp, fp, #4
 800b330:	9b03      	ldr	r3, [sp, #12]
 800b332:	e00d      	b.n	800b350 <__gethex+0x27c>
 800b334:	9b03      	ldr	r3, [sp, #12]
 800b336:	9a06      	ldr	r2, [sp, #24]
 800b338:	4413      	add	r3, r2
 800b33a:	42bb      	cmp	r3, r7
 800b33c:	d3e0      	bcc.n	800b300 <__gethex+0x22c>
 800b33e:	4618      	mov	r0, r3
 800b340:	9901      	ldr	r1, [sp, #4]
 800b342:	9307      	str	r3, [sp, #28]
 800b344:	4652      	mov	r2, sl
 800b346:	f001 fa12 	bl	800c76e <strncmp>
 800b34a:	9b07      	ldr	r3, [sp, #28]
 800b34c:	2800      	cmp	r0, #0
 800b34e:	d1d7      	bne.n	800b300 <__gethex+0x22c>
 800b350:	461e      	mov	r6, r3
 800b352:	e78b      	b.n	800b26c <__gethex+0x198>
 800b354:	f04f 0a03 	mov.w	sl, #3
 800b358:	e7b8      	b.n	800b2cc <__gethex+0x1f8>
 800b35a:	da0a      	bge.n	800b372 <__gethex+0x29e>
 800b35c:	1a37      	subs	r7, r6, r0
 800b35e:	4621      	mov	r1, r4
 800b360:	ee18 0a10 	vmov	r0, s16
 800b364:	463a      	mov	r2, r7
 800b366:	f000 fca3 	bl	800bcb0 <__lshift>
 800b36a:	1bed      	subs	r5, r5, r7
 800b36c:	4604      	mov	r4, r0
 800b36e:	f100 0914 	add.w	r9, r0, #20
 800b372:	f04f 0a00 	mov.w	sl, #0
 800b376:	e7ae      	b.n	800b2d6 <__gethex+0x202>
 800b378:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b37c:	42a8      	cmp	r0, r5
 800b37e:	dd72      	ble.n	800b466 <__gethex+0x392>
 800b380:	1b45      	subs	r5, r0, r5
 800b382:	42ae      	cmp	r6, r5
 800b384:	dc36      	bgt.n	800b3f4 <__gethex+0x320>
 800b386:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b38a:	2b02      	cmp	r3, #2
 800b38c:	d02a      	beq.n	800b3e4 <__gethex+0x310>
 800b38e:	2b03      	cmp	r3, #3
 800b390:	d02c      	beq.n	800b3ec <__gethex+0x318>
 800b392:	2b01      	cmp	r3, #1
 800b394:	d115      	bne.n	800b3c2 <__gethex+0x2ee>
 800b396:	42ae      	cmp	r6, r5
 800b398:	d113      	bne.n	800b3c2 <__gethex+0x2ee>
 800b39a:	2e01      	cmp	r6, #1
 800b39c:	d10b      	bne.n	800b3b6 <__gethex+0x2e2>
 800b39e:	9a04      	ldr	r2, [sp, #16]
 800b3a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b3a4:	6013      	str	r3, [r2, #0]
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	6123      	str	r3, [r4, #16]
 800b3aa:	f8c9 3000 	str.w	r3, [r9]
 800b3ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b3b0:	2762      	movs	r7, #98	; 0x62
 800b3b2:	601c      	str	r4, [r3, #0]
 800b3b4:	e723      	b.n	800b1fe <__gethex+0x12a>
 800b3b6:	1e71      	subs	r1, r6, #1
 800b3b8:	4620      	mov	r0, r4
 800b3ba:	f000 feb7 	bl	800c12c <__any_on>
 800b3be:	2800      	cmp	r0, #0
 800b3c0:	d1ed      	bne.n	800b39e <__gethex+0x2ca>
 800b3c2:	ee18 0a10 	vmov	r0, s16
 800b3c6:	4621      	mov	r1, r4
 800b3c8:	f000 fa56 	bl	800b878 <_Bfree>
 800b3cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	6013      	str	r3, [r2, #0]
 800b3d2:	2750      	movs	r7, #80	; 0x50
 800b3d4:	e713      	b.n	800b1fe <__gethex+0x12a>
 800b3d6:	bf00      	nop
 800b3d8:	0800f4e4 	.word	0x0800f4e4
 800b3dc:	0800f404 	.word	0x0800f404
 800b3e0:	0800f478 	.word	0x0800f478
 800b3e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d1eb      	bne.n	800b3c2 <__gethex+0x2ee>
 800b3ea:	e7d8      	b.n	800b39e <__gethex+0x2ca>
 800b3ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d1d5      	bne.n	800b39e <__gethex+0x2ca>
 800b3f2:	e7e6      	b.n	800b3c2 <__gethex+0x2ee>
 800b3f4:	1e6f      	subs	r7, r5, #1
 800b3f6:	f1ba 0f00 	cmp.w	sl, #0
 800b3fa:	d131      	bne.n	800b460 <__gethex+0x38c>
 800b3fc:	b127      	cbz	r7, 800b408 <__gethex+0x334>
 800b3fe:	4639      	mov	r1, r7
 800b400:	4620      	mov	r0, r4
 800b402:	f000 fe93 	bl	800c12c <__any_on>
 800b406:	4682      	mov	sl, r0
 800b408:	117b      	asrs	r3, r7, #5
 800b40a:	2101      	movs	r1, #1
 800b40c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b410:	f007 071f 	and.w	r7, r7, #31
 800b414:	fa01 f707 	lsl.w	r7, r1, r7
 800b418:	421f      	tst	r7, r3
 800b41a:	4629      	mov	r1, r5
 800b41c:	4620      	mov	r0, r4
 800b41e:	bf18      	it	ne
 800b420:	f04a 0a02 	orrne.w	sl, sl, #2
 800b424:	1b76      	subs	r6, r6, r5
 800b426:	f7ff fdee 	bl	800b006 <rshift>
 800b42a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b42e:	2702      	movs	r7, #2
 800b430:	f1ba 0f00 	cmp.w	sl, #0
 800b434:	d048      	beq.n	800b4c8 <__gethex+0x3f4>
 800b436:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b43a:	2b02      	cmp	r3, #2
 800b43c:	d015      	beq.n	800b46a <__gethex+0x396>
 800b43e:	2b03      	cmp	r3, #3
 800b440:	d017      	beq.n	800b472 <__gethex+0x39e>
 800b442:	2b01      	cmp	r3, #1
 800b444:	d109      	bne.n	800b45a <__gethex+0x386>
 800b446:	f01a 0f02 	tst.w	sl, #2
 800b44a:	d006      	beq.n	800b45a <__gethex+0x386>
 800b44c:	f8d9 0000 	ldr.w	r0, [r9]
 800b450:	ea4a 0a00 	orr.w	sl, sl, r0
 800b454:	f01a 0f01 	tst.w	sl, #1
 800b458:	d10e      	bne.n	800b478 <__gethex+0x3a4>
 800b45a:	f047 0710 	orr.w	r7, r7, #16
 800b45e:	e033      	b.n	800b4c8 <__gethex+0x3f4>
 800b460:	f04f 0a01 	mov.w	sl, #1
 800b464:	e7d0      	b.n	800b408 <__gethex+0x334>
 800b466:	2701      	movs	r7, #1
 800b468:	e7e2      	b.n	800b430 <__gethex+0x35c>
 800b46a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b46c:	f1c3 0301 	rsb	r3, r3, #1
 800b470:	9315      	str	r3, [sp, #84]	; 0x54
 800b472:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b474:	2b00      	cmp	r3, #0
 800b476:	d0f0      	beq.n	800b45a <__gethex+0x386>
 800b478:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b47c:	f104 0314 	add.w	r3, r4, #20
 800b480:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b484:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b488:	f04f 0c00 	mov.w	ip, #0
 800b48c:	4618      	mov	r0, r3
 800b48e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b492:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b496:	d01c      	beq.n	800b4d2 <__gethex+0x3fe>
 800b498:	3201      	adds	r2, #1
 800b49a:	6002      	str	r2, [r0, #0]
 800b49c:	2f02      	cmp	r7, #2
 800b49e:	f104 0314 	add.w	r3, r4, #20
 800b4a2:	d13f      	bne.n	800b524 <__gethex+0x450>
 800b4a4:	f8d8 2000 	ldr.w	r2, [r8]
 800b4a8:	3a01      	subs	r2, #1
 800b4aa:	42b2      	cmp	r2, r6
 800b4ac:	d10a      	bne.n	800b4c4 <__gethex+0x3f0>
 800b4ae:	1171      	asrs	r1, r6, #5
 800b4b0:	2201      	movs	r2, #1
 800b4b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b4b6:	f006 061f 	and.w	r6, r6, #31
 800b4ba:	fa02 f606 	lsl.w	r6, r2, r6
 800b4be:	421e      	tst	r6, r3
 800b4c0:	bf18      	it	ne
 800b4c2:	4617      	movne	r7, r2
 800b4c4:	f047 0720 	orr.w	r7, r7, #32
 800b4c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b4ca:	601c      	str	r4, [r3, #0]
 800b4cc:	9b04      	ldr	r3, [sp, #16]
 800b4ce:	601d      	str	r5, [r3, #0]
 800b4d0:	e695      	b.n	800b1fe <__gethex+0x12a>
 800b4d2:	4299      	cmp	r1, r3
 800b4d4:	f843 cc04 	str.w	ip, [r3, #-4]
 800b4d8:	d8d8      	bhi.n	800b48c <__gethex+0x3b8>
 800b4da:	68a3      	ldr	r3, [r4, #8]
 800b4dc:	459b      	cmp	fp, r3
 800b4de:	db19      	blt.n	800b514 <__gethex+0x440>
 800b4e0:	6861      	ldr	r1, [r4, #4]
 800b4e2:	ee18 0a10 	vmov	r0, s16
 800b4e6:	3101      	adds	r1, #1
 800b4e8:	f000 f986 	bl	800b7f8 <_Balloc>
 800b4ec:	4681      	mov	r9, r0
 800b4ee:	b918      	cbnz	r0, 800b4f8 <__gethex+0x424>
 800b4f0:	4b1a      	ldr	r3, [pc, #104]	; (800b55c <__gethex+0x488>)
 800b4f2:	4602      	mov	r2, r0
 800b4f4:	2184      	movs	r1, #132	; 0x84
 800b4f6:	e6a8      	b.n	800b24a <__gethex+0x176>
 800b4f8:	6922      	ldr	r2, [r4, #16]
 800b4fa:	3202      	adds	r2, #2
 800b4fc:	f104 010c 	add.w	r1, r4, #12
 800b500:	0092      	lsls	r2, r2, #2
 800b502:	300c      	adds	r0, #12
 800b504:	f7fc fcfe 	bl	8007f04 <memcpy>
 800b508:	4621      	mov	r1, r4
 800b50a:	ee18 0a10 	vmov	r0, s16
 800b50e:	f000 f9b3 	bl	800b878 <_Bfree>
 800b512:	464c      	mov	r4, r9
 800b514:	6923      	ldr	r3, [r4, #16]
 800b516:	1c5a      	adds	r2, r3, #1
 800b518:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b51c:	6122      	str	r2, [r4, #16]
 800b51e:	2201      	movs	r2, #1
 800b520:	615a      	str	r2, [r3, #20]
 800b522:	e7bb      	b.n	800b49c <__gethex+0x3c8>
 800b524:	6922      	ldr	r2, [r4, #16]
 800b526:	455a      	cmp	r2, fp
 800b528:	dd0b      	ble.n	800b542 <__gethex+0x46e>
 800b52a:	2101      	movs	r1, #1
 800b52c:	4620      	mov	r0, r4
 800b52e:	f7ff fd6a 	bl	800b006 <rshift>
 800b532:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b536:	3501      	adds	r5, #1
 800b538:	42ab      	cmp	r3, r5
 800b53a:	f6ff aed0 	blt.w	800b2de <__gethex+0x20a>
 800b53e:	2701      	movs	r7, #1
 800b540:	e7c0      	b.n	800b4c4 <__gethex+0x3f0>
 800b542:	f016 061f 	ands.w	r6, r6, #31
 800b546:	d0fa      	beq.n	800b53e <__gethex+0x46a>
 800b548:	449a      	add	sl, r3
 800b54a:	f1c6 0620 	rsb	r6, r6, #32
 800b54e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b552:	f000 fa47 	bl	800b9e4 <__hi0bits>
 800b556:	42b0      	cmp	r0, r6
 800b558:	dbe7      	blt.n	800b52a <__gethex+0x456>
 800b55a:	e7f0      	b.n	800b53e <__gethex+0x46a>
 800b55c:	0800f404 	.word	0x0800f404

0800b560 <L_shift>:
 800b560:	f1c2 0208 	rsb	r2, r2, #8
 800b564:	0092      	lsls	r2, r2, #2
 800b566:	b570      	push	{r4, r5, r6, lr}
 800b568:	f1c2 0620 	rsb	r6, r2, #32
 800b56c:	6843      	ldr	r3, [r0, #4]
 800b56e:	6804      	ldr	r4, [r0, #0]
 800b570:	fa03 f506 	lsl.w	r5, r3, r6
 800b574:	432c      	orrs	r4, r5
 800b576:	40d3      	lsrs	r3, r2
 800b578:	6004      	str	r4, [r0, #0]
 800b57a:	f840 3f04 	str.w	r3, [r0, #4]!
 800b57e:	4288      	cmp	r0, r1
 800b580:	d3f4      	bcc.n	800b56c <L_shift+0xc>
 800b582:	bd70      	pop	{r4, r5, r6, pc}

0800b584 <__match>:
 800b584:	b530      	push	{r4, r5, lr}
 800b586:	6803      	ldr	r3, [r0, #0]
 800b588:	3301      	adds	r3, #1
 800b58a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b58e:	b914      	cbnz	r4, 800b596 <__match+0x12>
 800b590:	6003      	str	r3, [r0, #0]
 800b592:	2001      	movs	r0, #1
 800b594:	bd30      	pop	{r4, r5, pc}
 800b596:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b59a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b59e:	2d19      	cmp	r5, #25
 800b5a0:	bf98      	it	ls
 800b5a2:	3220      	addls	r2, #32
 800b5a4:	42a2      	cmp	r2, r4
 800b5a6:	d0f0      	beq.n	800b58a <__match+0x6>
 800b5a8:	2000      	movs	r0, #0
 800b5aa:	e7f3      	b.n	800b594 <__match+0x10>

0800b5ac <__hexnan>:
 800b5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b0:	680b      	ldr	r3, [r1, #0]
 800b5b2:	6801      	ldr	r1, [r0, #0]
 800b5b4:	115e      	asrs	r6, r3, #5
 800b5b6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b5ba:	f013 031f 	ands.w	r3, r3, #31
 800b5be:	b087      	sub	sp, #28
 800b5c0:	bf18      	it	ne
 800b5c2:	3604      	addne	r6, #4
 800b5c4:	2500      	movs	r5, #0
 800b5c6:	1f37      	subs	r7, r6, #4
 800b5c8:	4682      	mov	sl, r0
 800b5ca:	4690      	mov	r8, r2
 800b5cc:	9301      	str	r3, [sp, #4]
 800b5ce:	f846 5c04 	str.w	r5, [r6, #-4]
 800b5d2:	46b9      	mov	r9, r7
 800b5d4:	463c      	mov	r4, r7
 800b5d6:	9502      	str	r5, [sp, #8]
 800b5d8:	46ab      	mov	fp, r5
 800b5da:	784a      	ldrb	r2, [r1, #1]
 800b5dc:	1c4b      	adds	r3, r1, #1
 800b5de:	9303      	str	r3, [sp, #12]
 800b5e0:	b342      	cbz	r2, 800b634 <__hexnan+0x88>
 800b5e2:	4610      	mov	r0, r2
 800b5e4:	9105      	str	r1, [sp, #20]
 800b5e6:	9204      	str	r2, [sp, #16]
 800b5e8:	f7ff fd5f 	bl	800b0aa <__hexdig_fun>
 800b5ec:	2800      	cmp	r0, #0
 800b5ee:	d14f      	bne.n	800b690 <__hexnan+0xe4>
 800b5f0:	9a04      	ldr	r2, [sp, #16]
 800b5f2:	9905      	ldr	r1, [sp, #20]
 800b5f4:	2a20      	cmp	r2, #32
 800b5f6:	d818      	bhi.n	800b62a <__hexnan+0x7e>
 800b5f8:	9b02      	ldr	r3, [sp, #8]
 800b5fa:	459b      	cmp	fp, r3
 800b5fc:	dd13      	ble.n	800b626 <__hexnan+0x7a>
 800b5fe:	454c      	cmp	r4, r9
 800b600:	d206      	bcs.n	800b610 <__hexnan+0x64>
 800b602:	2d07      	cmp	r5, #7
 800b604:	dc04      	bgt.n	800b610 <__hexnan+0x64>
 800b606:	462a      	mov	r2, r5
 800b608:	4649      	mov	r1, r9
 800b60a:	4620      	mov	r0, r4
 800b60c:	f7ff ffa8 	bl	800b560 <L_shift>
 800b610:	4544      	cmp	r4, r8
 800b612:	d950      	bls.n	800b6b6 <__hexnan+0x10a>
 800b614:	2300      	movs	r3, #0
 800b616:	f1a4 0904 	sub.w	r9, r4, #4
 800b61a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b61e:	f8cd b008 	str.w	fp, [sp, #8]
 800b622:	464c      	mov	r4, r9
 800b624:	461d      	mov	r5, r3
 800b626:	9903      	ldr	r1, [sp, #12]
 800b628:	e7d7      	b.n	800b5da <__hexnan+0x2e>
 800b62a:	2a29      	cmp	r2, #41	; 0x29
 800b62c:	d156      	bne.n	800b6dc <__hexnan+0x130>
 800b62e:	3102      	adds	r1, #2
 800b630:	f8ca 1000 	str.w	r1, [sl]
 800b634:	f1bb 0f00 	cmp.w	fp, #0
 800b638:	d050      	beq.n	800b6dc <__hexnan+0x130>
 800b63a:	454c      	cmp	r4, r9
 800b63c:	d206      	bcs.n	800b64c <__hexnan+0xa0>
 800b63e:	2d07      	cmp	r5, #7
 800b640:	dc04      	bgt.n	800b64c <__hexnan+0xa0>
 800b642:	462a      	mov	r2, r5
 800b644:	4649      	mov	r1, r9
 800b646:	4620      	mov	r0, r4
 800b648:	f7ff ff8a 	bl	800b560 <L_shift>
 800b64c:	4544      	cmp	r4, r8
 800b64e:	d934      	bls.n	800b6ba <__hexnan+0x10e>
 800b650:	f1a8 0204 	sub.w	r2, r8, #4
 800b654:	4623      	mov	r3, r4
 800b656:	f853 1b04 	ldr.w	r1, [r3], #4
 800b65a:	f842 1f04 	str.w	r1, [r2, #4]!
 800b65e:	429f      	cmp	r7, r3
 800b660:	d2f9      	bcs.n	800b656 <__hexnan+0xaa>
 800b662:	1b3b      	subs	r3, r7, r4
 800b664:	f023 0303 	bic.w	r3, r3, #3
 800b668:	3304      	adds	r3, #4
 800b66a:	3401      	adds	r4, #1
 800b66c:	3e03      	subs	r6, #3
 800b66e:	42b4      	cmp	r4, r6
 800b670:	bf88      	it	hi
 800b672:	2304      	movhi	r3, #4
 800b674:	4443      	add	r3, r8
 800b676:	2200      	movs	r2, #0
 800b678:	f843 2b04 	str.w	r2, [r3], #4
 800b67c:	429f      	cmp	r7, r3
 800b67e:	d2fb      	bcs.n	800b678 <__hexnan+0xcc>
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	b91b      	cbnz	r3, 800b68c <__hexnan+0xe0>
 800b684:	4547      	cmp	r7, r8
 800b686:	d127      	bne.n	800b6d8 <__hexnan+0x12c>
 800b688:	2301      	movs	r3, #1
 800b68a:	603b      	str	r3, [r7, #0]
 800b68c:	2005      	movs	r0, #5
 800b68e:	e026      	b.n	800b6de <__hexnan+0x132>
 800b690:	3501      	adds	r5, #1
 800b692:	2d08      	cmp	r5, #8
 800b694:	f10b 0b01 	add.w	fp, fp, #1
 800b698:	dd06      	ble.n	800b6a8 <__hexnan+0xfc>
 800b69a:	4544      	cmp	r4, r8
 800b69c:	d9c3      	bls.n	800b626 <__hexnan+0x7a>
 800b69e:	2300      	movs	r3, #0
 800b6a0:	f844 3c04 	str.w	r3, [r4, #-4]
 800b6a4:	2501      	movs	r5, #1
 800b6a6:	3c04      	subs	r4, #4
 800b6a8:	6822      	ldr	r2, [r4, #0]
 800b6aa:	f000 000f 	and.w	r0, r0, #15
 800b6ae:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b6b2:	6022      	str	r2, [r4, #0]
 800b6b4:	e7b7      	b.n	800b626 <__hexnan+0x7a>
 800b6b6:	2508      	movs	r5, #8
 800b6b8:	e7b5      	b.n	800b626 <__hexnan+0x7a>
 800b6ba:	9b01      	ldr	r3, [sp, #4]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d0df      	beq.n	800b680 <__hexnan+0xd4>
 800b6c0:	f04f 32ff 	mov.w	r2, #4294967295
 800b6c4:	f1c3 0320 	rsb	r3, r3, #32
 800b6c8:	fa22 f303 	lsr.w	r3, r2, r3
 800b6cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b6d0:	401a      	ands	r2, r3
 800b6d2:	f846 2c04 	str.w	r2, [r6, #-4]
 800b6d6:	e7d3      	b.n	800b680 <__hexnan+0xd4>
 800b6d8:	3f04      	subs	r7, #4
 800b6da:	e7d1      	b.n	800b680 <__hexnan+0xd4>
 800b6dc:	2004      	movs	r0, #4
 800b6de:	b007      	add	sp, #28
 800b6e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b6e4 <_localeconv_r>:
 800b6e4:	4800      	ldr	r0, [pc, #0]	; (800b6e8 <_localeconv_r+0x4>)
 800b6e6:	4770      	bx	lr
 800b6e8:	20000188 	.word	0x20000188

0800b6ec <__retarget_lock_init_recursive>:
 800b6ec:	4770      	bx	lr

0800b6ee <__retarget_lock_acquire_recursive>:
 800b6ee:	4770      	bx	lr

0800b6f0 <__retarget_lock_release_recursive>:
 800b6f0:	4770      	bx	lr

0800b6f2 <__swhatbuf_r>:
 800b6f2:	b570      	push	{r4, r5, r6, lr}
 800b6f4:	460e      	mov	r6, r1
 800b6f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6fa:	2900      	cmp	r1, #0
 800b6fc:	b096      	sub	sp, #88	; 0x58
 800b6fe:	4614      	mov	r4, r2
 800b700:	461d      	mov	r5, r3
 800b702:	da07      	bge.n	800b714 <__swhatbuf_r+0x22>
 800b704:	2300      	movs	r3, #0
 800b706:	602b      	str	r3, [r5, #0]
 800b708:	89b3      	ldrh	r3, [r6, #12]
 800b70a:	061a      	lsls	r2, r3, #24
 800b70c:	d410      	bmi.n	800b730 <__swhatbuf_r+0x3e>
 800b70e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b712:	e00e      	b.n	800b732 <__swhatbuf_r+0x40>
 800b714:	466a      	mov	r2, sp
 800b716:	f001 f89b 	bl	800c850 <_fstat_r>
 800b71a:	2800      	cmp	r0, #0
 800b71c:	dbf2      	blt.n	800b704 <__swhatbuf_r+0x12>
 800b71e:	9a01      	ldr	r2, [sp, #4]
 800b720:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b724:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b728:	425a      	negs	r2, r3
 800b72a:	415a      	adcs	r2, r3
 800b72c:	602a      	str	r2, [r5, #0]
 800b72e:	e7ee      	b.n	800b70e <__swhatbuf_r+0x1c>
 800b730:	2340      	movs	r3, #64	; 0x40
 800b732:	2000      	movs	r0, #0
 800b734:	6023      	str	r3, [r4, #0]
 800b736:	b016      	add	sp, #88	; 0x58
 800b738:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b73c <__smakebuf_r>:
 800b73c:	898b      	ldrh	r3, [r1, #12]
 800b73e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b740:	079d      	lsls	r5, r3, #30
 800b742:	4606      	mov	r6, r0
 800b744:	460c      	mov	r4, r1
 800b746:	d507      	bpl.n	800b758 <__smakebuf_r+0x1c>
 800b748:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b74c:	6023      	str	r3, [r4, #0]
 800b74e:	6123      	str	r3, [r4, #16]
 800b750:	2301      	movs	r3, #1
 800b752:	6163      	str	r3, [r4, #20]
 800b754:	b002      	add	sp, #8
 800b756:	bd70      	pop	{r4, r5, r6, pc}
 800b758:	ab01      	add	r3, sp, #4
 800b75a:	466a      	mov	r2, sp
 800b75c:	f7ff ffc9 	bl	800b6f2 <__swhatbuf_r>
 800b760:	9900      	ldr	r1, [sp, #0]
 800b762:	4605      	mov	r5, r0
 800b764:	4630      	mov	r0, r6
 800b766:	f7fc fc43 	bl	8007ff0 <_malloc_r>
 800b76a:	b948      	cbnz	r0, 800b780 <__smakebuf_r+0x44>
 800b76c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b770:	059a      	lsls	r2, r3, #22
 800b772:	d4ef      	bmi.n	800b754 <__smakebuf_r+0x18>
 800b774:	f023 0303 	bic.w	r3, r3, #3
 800b778:	f043 0302 	orr.w	r3, r3, #2
 800b77c:	81a3      	strh	r3, [r4, #12]
 800b77e:	e7e3      	b.n	800b748 <__smakebuf_r+0xc>
 800b780:	4b0d      	ldr	r3, [pc, #52]	; (800b7b8 <__smakebuf_r+0x7c>)
 800b782:	62b3      	str	r3, [r6, #40]	; 0x28
 800b784:	89a3      	ldrh	r3, [r4, #12]
 800b786:	6020      	str	r0, [r4, #0]
 800b788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b78c:	81a3      	strh	r3, [r4, #12]
 800b78e:	9b00      	ldr	r3, [sp, #0]
 800b790:	6163      	str	r3, [r4, #20]
 800b792:	9b01      	ldr	r3, [sp, #4]
 800b794:	6120      	str	r0, [r4, #16]
 800b796:	b15b      	cbz	r3, 800b7b0 <__smakebuf_r+0x74>
 800b798:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b79c:	4630      	mov	r0, r6
 800b79e:	f001 f869 	bl	800c874 <_isatty_r>
 800b7a2:	b128      	cbz	r0, 800b7b0 <__smakebuf_r+0x74>
 800b7a4:	89a3      	ldrh	r3, [r4, #12]
 800b7a6:	f023 0303 	bic.w	r3, r3, #3
 800b7aa:	f043 0301 	orr.w	r3, r3, #1
 800b7ae:	81a3      	strh	r3, [r4, #12]
 800b7b0:	89a0      	ldrh	r0, [r4, #12]
 800b7b2:	4305      	orrs	r5, r0
 800b7b4:	81a5      	strh	r5, [r4, #12]
 800b7b6:	e7cd      	b.n	800b754 <__smakebuf_r+0x18>
 800b7b8:	0800ae65 	.word	0x0800ae65

0800b7bc <__ascii_mbtowc>:
 800b7bc:	b082      	sub	sp, #8
 800b7be:	b901      	cbnz	r1, 800b7c2 <__ascii_mbtowc+0x6>
 800b7c0:	a901      	add	r1, sp, #4
 800b7c2:	b142      	cbz	r2, 800b7d6 <__ascii_mbtowc+0x1a>
 800b7c4:	b14b      	cbz	r3, 800b7da <__ascii_mbtowc+0x1e>
 800b7c6:	7813      	ldrb	r3, [r2, #0]
 800b7c8:	600b      	str	r3, [r1, #0]
 800b7ca:	7812      	ldrb	r2, [r2, #0]
 800b7cc:	1e10      	subs	r0, r2, #0
 800b7ce:	bf18      	it	ne
 800b7d0:	2001      	movne	r0, #1
 800b7d2:	b002      	add	sp, #8
 800b7d4:	4770      	bx	lr
 800b7d6:	4610      	mov	r0, r2
 800b7d8:	e7fb      	b.n	800b7d2 <__ascii_mbtowc+0x16>
 800b7da:	f06f 0001 	mvn.w	r0, #1
 800b7de:	e7f8      	b.n	800b7d2 <__ascii_mbtowc+0x16>

0800b7e0 <__malloc_lock>:
 800b7e0:	4801      	ldr	r0, [pc, #4]	; (800b7e8 <__malloc_lock+0x8>)
 800b7e2:	f7ff bf84 	b.w	800b6ee <__retarget_lock_acquire_recursive>
 800b7e6:	bf00      	nop
 800b7e8:	200027c2 	.word	0x200027c2

0800b7ec <__malloc_unlock>:
 800b7ec:	4801      	ldr	r0, [pc, #4]	; (800b7f4 <__malloc_unlock+0x8>)
 800b7ee:	f7ff bf7f 	b.w	800b6f0 <__retarget_lock_release_recursive>
 800b7f2:	bf00      	nop
 800b7f4:	200027c2 	.word	0x200027c2

0800b7f8 <_Balloc>:
 800b7f8:	b570      	push	{r4, r5, r6, lr}
 800b7fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b7fc:	4604      	mov	r4, r0
 800b7fe:	460d      	mov	r5, r1
 800b800:	b976      	cbnz	r6, 800b820 <_Balloc+0x28>
 800b802:	2010      	movs	r0, #16
 800b804:	f7fc fb68 	bl	8007ed8 <malloc>
 800b808:	4602      	mov	r2, r0
 800b80a:	6260      	str	r0, [r4, #36]	; 0x24
 800b80c:	b920      	cbnz	r0, 800b818 <_Balloc+0x20>
 800b80e:	4b18      	ldr	r3, [pc, #96]	; (800b870 <_Balloc+0x78>)
 800b810:	4818      	ldr	r0, [pc, #96]	; (800b874 <_Balloc+0x7c>)
 800b812:	2166      	movs	r1, #102	; 0x66
 800b814:	f000 ffdc 	bl	800c7d0 <__assert_func>
 800b818:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b81c:	6006      	str	r6, [r0, #0]
 800b81e:	60c6      	str	r6, [r0, #12]
 800b820:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b822:	68f3      	ldr	r3, [r6, #12]
 800b824:	b183      	cbz	r3, 800b848 <_Balloc+0x50>
 800b826:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b828:	68db      	ldr	r3, [r3, #12]
 800b82a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b82e:	b9b8      	cbnz	r0, 800b860 <_Balloc+0x68>
 800b830:	2101      	movs	r1, #1
 800b832:	fa01 f605 	lsl.w	r6, r1, r5
 800b836:	1d72      	adds	r2, r6, #5
 800b838:	0092      	lsls	r2, r2, #2
 800b83a:	4620      	mov	r0, r4
 800b83c:	f7fc fb78 	bl	8007f30 <_calloc_r>
 800b840:	b160      	cbz	r0, 800b85c <_Balloc+0x64>
 800b842:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b846:	e00e      	b.n	800b866 <_Balloc+0x6e>
 800b848:	2221      	movs	r2, #33	; 0x21
 800b84a:	2104      	movs	r1, #4
 800b84c:	4620      	mov	r0, r4
 800b84e:	f7fc fb6f 	bl	8007f30 <_calloc_r>
 800b852:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b854:	60f0      	str	r0, [r6, #12]
 800b856:	68db      	ldr	r3, [r3, #12]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d1e4      	bne.n	800b826 <_Balloc+0x2e>
 800b85c:	2000      	movs	r0, #0
 800b85e:	bd70      	pop	{r4, r5, r6, pc}
 800b860:	6802      	ldr	r2, [r0, #0]
 800b862:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b866:	2300      	movs	r3, #0
 800b868:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b86c:	e7f7      	b.n	800b85e <_Balloc+0x66>
 800b86e:	bf00      	nop
 800b870:	0800f38e 	.word	0x0800f38e
 800b874:	0800f4f8 	.word	0x0800f4f8

0800b878 <_Bfree>:
 800b878:	b570      	push	{r4, r5, r6, lr}
 800b87a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b87c:	4605      	mov	r5, r0
 800b87e:	460c      	mov	r4, r1
 800b880:	b976      	cbnz	r6, 800b8a0 <_Bfree+0x28>
 800b882:	2010      	movs	r0, #16
 800b884:	f7fc fb28 	bl	8007ed8 <malloc>
 800b888:	4602      	mov	r2, r0
 800b88a:	6268      	str	r0, [r5, #36]	; 0x24
 800b88c:	b920      	cbnz	r0, 800b898 <_Bfree+0x20>
 800b88e:	4b09      	ldr	r3, [pc, #36]	; (800b8b4 <_Bfree+0x3c>)
 800b890:	4809      	ldr	r0, [pc, #36]	; (800b8b8 <_Bfree+0x40>)
 800b892:	218a      	movs	r1, #138	; 0x8a
 800b894:	f000 ff9c 	bl	800c7d0 <__assert_func>
 800b898:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b89c:	6006      	str	r6, [r0, #0]
 800b89e:	60c6      	str	r6, [r0, #12]
 800b8a0:	b13c      	cbz	r4, 800b8b2 <_Bfree+0x3a>
 800b8a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b8a4:	6862      	ldr	r2, [r4, #4]
 800b8a6:	68db      	ldr	r3, [r3, #12]
 800b8a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b8ac:	6021      	str	r1, [r4, #0]
 800b8ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b8b2:	bd70      	pop	{r4, r5, r6, pc}
 800b8b4:	0800f38e 	.word	0x0800f38e
 800b8b8:	0800f4f8 	.word	0x0800f4f8

0800b8bc <__multadd>:
 800b8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8c0:	690e      	ldr	r6, [r1, #16]
 800b8c2:	4607      	mov	r7, r0
 800b8c4:	4698      	mov	r8, r3
 800b8c6:	460c      	mov	r4, r1
 800b8c8:	f101 0014 	add.w	r0, r1, #20
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	6805      	ldr	r5, [r0, #0]
 800b8d0:	b2a9      	uxth	r1, r5
 800b8d2:	fb02 8101 	mla	r1, r2, r1, r8
 800b8d6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b8da:	0c2d      	lsrs	r5, r5, #16
 800b8dc:	fb02 c505 	mla	r5, r2, r5, ip
 800b8e0:	b289      	uxth	r1, r1
 800b8e2:	3301      	adds	r3, #1
 800b8e4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b8e8:	429e      	cmp	r6, r3
 800b8ea:	f840 1b04 	str.w	r1, [r0], #4
 800b8ee:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b8f2:	dcec      	bgt.n	800b8ce <__multadd+0x12>
 800b8f4:	f1b8 0f00 	cmp.w	r8, #0
 800b8f8:	d022      	beq.n	800b940 <__multadd+0x84>
 800b8fa:	68a3      	ldr	r3, [r4, #8]
 800b8fc:	42b3      	cmp	r3, r6
 800b8fe:	dc19      	bgt.n	800b934 <__multadd+0x78>
 800b900:	6861      	ldr	r1, [r4, #4]
 800b902:	4638      	mov	r0, r7
 800b904:	3101      	adds	r1, #1
 800b906:	f7ff ff77 	bl	800b7f8 <_Balloc>
 800b90a:	4605      	mov	r5, r0
 800b90c:	b928      	cbnz	r0, 800b91a <__multadd+0x5e>
 800b90e:	4602      	mov	r2, r0
 800b910:	4b0d      	ldr	r3, [pc, #52]	; (800b948 <__multadd+0x8c>)
 800b912:	480e      	ldr	r0, [pc, #56]	; (800b94c <__multadd+0x90>)
 800b914:	21b5      	movs	r1, #181	; 0xb5
 800b916:	f000 ff5b 	bl	800c7d0 <__assert_func>
 800b91a:	6922      	ldr	r2, [r4, #16]
 800b91c:	3202      	adds	r2, #2
 800b91e:	f104 010c 	add.w	r1, r4, #12
 800b922:	0092      	lsls	r2, r2, #2
 800b924:	300c      	adds	r0, #12
 800b926:	f7fc faed 	bl	8007f04 <memcpy>
 800b92a:	4621      	mov	r1, r4
 800b92c:	4638      	mov	r0, r7
 800b92e:	f7ff ffa3 	bl	800b878 <_Bfree>
 800b932:	462c      	mov	r4, r5
 800b934:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b938:	3601      	adds	r6, #1
 800b93a:	f8c3 8014 	str.w	r8, [r3, #20]
 800b93e:	6126      	str	r6, [r4, #16]
 800b940:	4620      	mov	r0, r4
 800b942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b946:	bf00      	nop
 800b948:	0800f404 	.word	0x0800f404
 800b94c:	0800f4f8 	.word	0x0800f4f8

0800b950 <__s2b>:
 800b950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b954:	460c      	mov	r4, r1
 800b956:	4615      	mov	r5, r2
 800b958:	461f      	mov	r7, r3
 800b95a:	2209      	movs	r2, #9
 800b95c:	3308      	adds	r3, #8
 800b95e:	4606      	mov	r6, r0
 800b960:	fb93 f3f2 	sdiv	r3, r3, r2
 800b964:	2100      	movs	r1, #0
 800b966:	2201      	movs	r2, #1
 800b968:	429a      	cmp	r2, r3
 800b96a:	db09      	blt.n	800b980 <__s2b+0x30>
 800b96c:	4630      	mov	r0, r6
 800b96e:	f7ff ff43 	bl	800b7f8 <_Balloc>
 800b972:	b940      	cbnz	r0, 800b986 <__s2b+0x36>
 800b974:	4602      	mov	r2, r0
 800b976:	4b19      	ldr	r3, [pc, #100]	; (800b9dc <__s2b+0x8c>)
 800b978:	4819      	ldr	r0, [pc, #100]	; (800b9e0 <__s2b+0x90>)
 800b97a:	21ce      	movs	r1, #206	; 0xce
 800b97c:	f000 ff28 	bl	800c7d0 <__assert_func>
 800b980:	0052      	lsls	r2, r2, #1
 800b982:	3101      	adds	r1, #1
 800b984:	e7f0      	b.n	800b968 <__s2b+0x18>
 800b986:	9b08      	ldr	r3, [sp, #32]
 800b988:	6143      	str	r3, [r0, #20]
 800b98a:	2d09      	cmp	r5, #9
 800b98c:	f04f 0301 	mov.w	r3, #1
 800b990:	6103      	str	r3, [r0, #16]
 800b992:	dd16      	ble.n	800b9c2 <__s2b+0x72>
 800b994:	f104 0909 	add.w	r9, r4, #9
 800b998:	46c8      	mov	r8, r9
 800b99a:	442c      	add	r4, r5
 800b99c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b9a0:	4601      	mov	r1, r0
 800b9a2:	3b30      	subs	r3, #48	; 0x30
 800b9a4:	220a      	movs	r2, #10
 800b9a6:	4630      	mov	r0, r6
 800b9a8:	f7ff ff88 	bl	800b8bc <__multadd>
 800b9ac:	45a0      	cmp	r8, r4
 800b9ae:	d1f5      	bne.n	800b99c <__s2b+0x4c>
 800b9b0:	f1a5 0408 	sub.w	r4, r5, #8
 800b9b4:	444c      	add	r4, r9
 800b9b6:	1b2d      	subs	r5, r5, r4
 800b9b8:	1963      	adds	r3, r4, r5
 800b9ba:	42bb      	cmp	r3, r7
 800b9bc:	db04      	blt.n	800b9c8 <__s2b+0x78>
 800b9be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9c2:	340a      	adds	r4, #10
 800b9c4:	2509      	movs	r5, #9
 800b9c6:	e7f6      	b.n	800b9b6 <__s2b+0x66>
 800b9c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b9cc:	4601      	mov	r1, r0
 800b9ce:	3b30      	subs	r3, #48	; 0x30
 800b9d0:	220a      	movs	r2, #10
 800b9d2:	4630      	mov	r0, r6
 800b9d4:	f7ff ff72 	bl	800b8bc <__multadd>
 800b9d8:	e7ee      	b.n	800b9b8 <__s2b+0x68>
 800b9da:	bf00      	nop
 800b9dc:	0800f404 	.word	0x0800f404
 800b9e0:	0800f4f8 	.word	0x0800f4f8

0800b9e4 <__hi0bits>:
 800b9e4:	0c03      	lsrs	r3, r0, #16
 800b9e6:	041b      	lsls	r3, r3, #16
 800b9e8:	b9d3      	cbnz	r3, 800ba20 <__hi0bits+0x3c>
 800b9ea:	0400      	lsls	r0, r0, #16
 800b9ec:	2310      	movs	r3, #16
 800b9ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b9f2:	bf04      	itt	eq
 800b9f4:	0200      	lsleq	r0, r0, #8
 800b9f6:	3308      	addeq	r3, #8
 800b9f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b9fc:	bf04      	itt	eq
 800b9fe:	0100      	lsleq	r0, r0, #4
 800ba00:	3304      	addeq	r3, #4
 800ba02:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ba06:	bf04      	itt	eq
 800ba08:	0080      	lsleq	r0, r0, #2
 800ba0a:	3302      	addeq	r3, #2
 800ba0c:	2800      	cmp	r0, #0
 800ba0e:	db05      	blt.n	800ba1c <__hi0bits+0x38>
 800ba10:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ba14:	f103 0301 	add.w	r3, r3, #1
 800ba18:	bf08      	it	eq
 800ba1a:	2320      	moveq	r3, #32
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	4770      	bx	lr
 800ba20:	2300      	movs	r3, #0
 800ba22:	e7e4      	b.n	800b9ee <__hi0bits+0xa>

0800ba24 <__lo0bits>:
 800ba24:	6803      	ldr	r3, [r0, #0]
 800ba26:	f013 0207 	ands.w	r2, r3, #7
 800ba2a:	4601      	mov	r1, r0
 800ba2c:	d00b      	beq.n	800ba46 <__lo0bits+0x22>
 800ba2e:	07da      	lsls	r2, r3, #31
 800ba30:	d424      	bmi.n	800ba7c <__lo0bits+0x58>
 800ba32:	0798      	lsls	r0, r3, #30
 800ba34:	bf49      	itett	mi
 800ba36:	085b      	lsrmi	r3, r3, #1
 800ba38:	089b      	lsrpl	r3, r3, #2
 800ba3a:	2001      	movmi	r0, #1
 800ba3c:	600b      	strmi	r3, [r1, #0]
 800ba3e:	bf5c      	itt	pl
 800ba40:	600b      	strpl	r3, [r1, #0]
 800ba42:	2002      	movpl	r0, #2
 800ba44:	4770      	bx	lr
 800ba46:	b298      	uxth	r0, r3
 800ba48:	b9b0      	cbnz	r0, 800ba78 <__lo0bits+0x54>
 800ba4a:	0c1b      	lsrs	r3, r3, #16
 800ba4c:	2010      	movs	r0, #16
 800ba4e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ba52:	bf04      	itt	eq
 800ba54:	0a1b      	lsreq	r3, r3, #8
 800ba56:	3008      	addeq	r0, #8
 800ba58:	071a      	lsls	r2, r3, #28
 800ba5a:	bf04      	itt	eq
 800ba5c:	091b      	lsreq	r3, r3, #4
 800ba5e:	3004      	addeq	r0, #4
 800ba60:	079a      	lsls	r2, r3, #30
 800ba62:	bf04      	itt	eq
 800ba64:	089b      	lsreq	r3, r3, #2
 800ba66:	3002      	addeq	r0, #2
 800ba68:	07da      	lsls	r2, r3, #31
 800ba6a:	d403      	bmi.n	800ba74 <__lo0bits+0x50>
 800ba6c:	085b      	lsrs	r3, r3, #1
 800ba6e:	f100 0001 	add.w	r0, r0, #1
 800ba72:	d005      	beq.n	800ba80 <__lo0bits+0x5c>
 800ba74:	600b      	str	r3, [r1, #0]
 800ba76:	4770      	bx	lr
 800ba78:	4610      	mov	r0, r2
 800ba7a:	e7e8      	b.n	800ba4e <__lo0bits+0x2a>
 800ba7c:	2000      	movs	r0, #0
 800ba7e:	4770      	bx	lr
 800ba80:	2020      	movs	r0, #32
 800ba82:	4770      	bx	lr

0800ba84 <__i2b>:
 800ba84:	b510      	push	{r4, lr}
 800ba86:	460c      	mov	r4, r1
 800ba88:	2101      	movs	r1, #1
 800ba8a:	f7ff feb5 	bl	800b7f8 <_Balloc>
 800ba8e:	4602      	mov	r2, r0
 800ba90:	b928      	cbnz	r0, 800ba9e <__i2b+0x1a>
 800ba92:	4b05      	ldr	r3, [pc, #20]	; (800baa8 <__i2b+0x24>)
 800ba94:	4805      	ldr	r0, [pc, #20]	; (800baac <__i2b+0x28>)
 800ba96:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ba9a:	f000 fe99 	bl	800c7d0 <__assert_func>
 800ba9e:	2301      	movs	r3, #1
 800baa0:	6144      	str	r4, [r0, #20]
 800baa2:	6103      	str	r3, [r0, #16]
 800baa4:	bd10      	pop	{r4, pc}
 800baa6:	bf00      	nop
 800baa8:	0800f404 	.word	0x0800f404
 800baac:	0800f4f8 	.word	0x0800f4f8

0800bab0 <__multiply>:
 800bab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab4:	4614      	mov	r4, r2
 800bab6:	690a      	ldr	r2, [r1, #16]
 800bab8:	6923      	ldr	r3, [r4, #16]
 800baba:	429a      	cmp	r2, r3
 800babc:	bfb8      	it	lt
 800babe:	460b      	movlt	r3, r1
 800bac0:	460d      	mov	r5, r1
 800bac2:	bfbc      	itt	lt
 800bac4:	4625      	movlt	r5, r4
 800bac6:	461c      	movlt	r4, r3
 800bac8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800bacc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bad0:	68ab      	ldr	r3, [r5, #8]
 800bad2:	6869      	ldr	r1, [r5, #4]
 800bad4:	eb0a 0709 	add.w	r7, sl, r9
 800bad8:	42bb      	cmp	r3, r7
 800bada:	b085      	sub	sp, #20
 800badc:	bfb8      	it	lt
 800bade:	3101      	addlt	r1, #1
 800bae0:	f7ff fe8a 	bl	800b7f8 <_Balloc>
 800bae4:	b930      	cbnz	r0, 800baf4 <__multiply+0x44>
 800bae6:	4602      	mov	r2, r0
 800bae8:	4b42      	ldr	r3, [pc, #264]	; (800bbf4 <__multiply+0x144>)
 800baea:	4843      	ldr	r0, [pc, #268]	; (800bbf8 <__multiply+0x148>)
 800baec:	f240 115d 	movw	r1, #349	; 0x15d
 800baf0:	f000 fe6e 	bl	800c7d0 <__assert_func>
 800baf4:	f100 0614 	add.w	r6, r0, #20
 800baf8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800bafc:	4633      	mov	r3, r6
 800bafe:	2200      	movs	r2, #0
 800bb00:	4543      	cmp	r3, r8
 800bb02:	d31e      	bcc.n	800bb42 <__multiply+0x92>
 800bb04:	f105 0c14 	add.w	ip, r5, #20
 800bb08:	f104 0314 	add.w	r3, r4, #20
 800bb0c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800bb10:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800bb14:	9202      	str	r2, [sp, #8]
 800bb16:	ebac 0205 	sub.w	r2, ip, r5
 800bb1a:	3a15      	subs	r2, #21
 800bb1c:	f022 0203 	bic.w	r2, r2, #3
 800bb20:	3204      	adds	r2, #4
 800bb22:	f105 0115 	add.w	r1, r5, #21
 800bb26:	458c      	cmp	ip, r1
 800bb28:	bf38      	it	cc
 800bb2a:	2204      	movcc	r2, #4
 800bb2c:	9201      	str	r2, [sp, #4]
 800bb2e:	9a02      	ldr	r2, [sp, #8]
 800bb30:	9303      	str	r3, [sp, #12]
 800bb32:	429a      	cmp	r2, r3
 800bb34:	d808      	bhi.n	800bb48 <__multiply+0x98>
 800bb36:	2f00      	cmp	r7, #0
 800bb38:	dc55      	bgt.n	800bbe6 <__multiply+0x136>
 800bb3a:	6107      	str	r7, [r0, #16]
 800bb3c:	b005      	add	sp, #20
 800bb3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb42:	f843 2b04 	str.w	r2, [r3], #4
 800bb46:	e7db      	b.n	800bb00 <__multiply+0x50>
 800bb48:	f8b3 a000 	ldrh.w	sl, [r3]
 800bb4c:	f1ba 0f00 	cmp.w	sl, #0
 800bb50:	d020      	beq.n	800bb94 <__multiply+0xe4>
 800bb52:	f105 0e14 	add.w	lr, r5, #20
 800bb56:	46b1      	mov	r9, r6
 800bb58:	2200      	movs	r2, #0
 800bb5a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800bb5e:	f8d9 b000 	ldr.w	fp, [r9]
 800bb62:	b2a1      	uxth	r1, r4
 800bb64:	fa1f fb8b 	uxth.w	fp, fp
 800bb68:	fb0a b101 	mla	r1, sl, r1, fp
 800bb6c:	4411      	add	r1, r2
 800bb6e:	f8d9 2000 	ldr.w	r2, [r9]
 800bb72:	0c24      	lsrs	r4, r4, #16
 800bb74:	0c12      	lsrs	r2, r2, #16
 800bb76:	fb0a 2404 	mla	r4, sl, r4, r2
 800bb7a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800bb7e:	b289      	uxth	r1, r1
 800bb80:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bb84:	45f4      	cmp	ip, lr
 800bb86:	f849 1b04 	str.w	r1, [r9], #4
 800bb8a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800bb8e:	d8e4      	bhi.n	800bb5a <__multiply+0xaa>
 800bb90:	9901      	ldr	r1, [sp, #4]
 800bb92:	5072      	str	r2, [r6, r1]
 800bb94:	9a03      	ldr	r2, [sp, #12]
 800bb96:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bb9a:	3304      	adds	r3, #4
 800bb9c:	f1b9 0f00 	cmp.w	r9, #0
 800bba0:	d01f      	beq.n	800bbe2 <__multiply+0x132>
 800bba2:	6834      	ldr	r4, [r6, #0]
 800bba4:	f105 0114 	add.w	r1, r5, #20
 800bba8:	46b6      	mov	lr, r6
 800bbaa:	f04f 0a00 	mov.w	sl, #0
 800bbae:	880a      	ldrh	r2, [r1, #0]
 800bbb0:	f8be b002 	ldrh.w	fp, [lr, #2]
 800bbb4:	fb09 b202 	mla	r2, r9, r2, fp
 800bbb8:	4492      	add	sl, r2
 800bbba:	b2a4      	uxth	r4, r4
 800bbbc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800bbc0:	f84e 4b04 	str.w	r4, [lr], #4
 800bbc4:	f851 4b04 	ldr.w	r4, [r1], #4
 800bbc8:	f8be 2000 	ldrh.w	r2, [lr]
 800bbcc:	0c24      	lsrs	r4, r4, #16
 800bbce:	fb09 2404 	mla	r4, r9, r4, r2
 800bbd2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800bbd6:	458c      	cmp	ip, r1
 800bbd8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bbdc:	d8e7      	bhi.n	800bbae <__multiply+0xfe>
 800bbde:	9a01      	ldr	r2, [sp, #4]
 800bbe0:	50b4      	str	r4, [r6, r2]
 800bbe2:	3604      	adds	r6, #4
 800bbe4:	e7a3      	b.n	800bb2e <__multiply+0x7e>
 800bbe6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d1a5      	bne.n	800bb3a <__multiply+0x8a>
 800bbee:	3f01      	subs	r7, #1
 800bbf0:	e7a1      	b.n	800bb36 <__multiply+0x86>
 800bbf2:	bf00      	nop
 800bbf4:	0800f404 	.word	0x0800f404
 800bbf8:	0800f4f8 	.word	0x0800f4f8

0800bbfc <__pow5mult>:
 800bbfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc00:	4615      	mov	r5, r2
 800bc02:	f012 0203 	ands.w	r2, r2, #3
 800bc06:	4606      	mov	r6, r0
 800bc08:	460f      	mov	r7, r1
 800bc0a:	d007      	beq.n	800bc1c <__pow5mult+0x20>
 800bc0c:	4c25      	ldr	r4, [pc, #148]	; (800bca4 <__pow5mult+0xa8>)
 800bc0e:	3a01      	subs	r2, #1
 800bc10:	2300      	movs	r3, #0
 800bc12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bc16:	f7ff fe51 	bl	800b8bc <__multadd>
 800bc1a:	4607      	mov	r7, r0
 800bc1c:	10ad      	asrs	r5, r5, #2
 800bc1e:	d03d      	beq.n	800bc9c <__pow5mult+0xa0>
 800bc20:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bc22:	b97c      	cbnz	r4, 800bc44 <__pow5mult+0x48>
 800bc24:	2010      	movs	r0, #16
 800bc26:	f7fc f957 	bl	8007ed8 <malloc>
 800bc2a:	4602      	mov	r2, r0
 800bc2c:	6270      	str	r0, [r6, #36]	; 0x24
 800bc2e:	b928      	cbnz	r0, 800bc3c <__pow5mult+0x40>
 800bc30:	4b1d      	ldr	r3, [pc, #116]	; (800bca8 <__pow5mult+0xac>)
 800bc32:	481e      	ldr	r0, [pc, #120]	; (800bcac <__pow5mult+0xb0>)
 800bc34:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bc38:	f000 fdca 	bl	800c7d0 <__assert_func>
 800bc3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bc40:	6004      	str	r4, [r0, #0]
 800bc42:	60c4      	str	r4, [r0, #12]
 800bc44:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bc48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bc4c:	b94c      	cbnz	r4, 800bc62 <__pow5mult+0x66>
 800bc4e:	f240 2171 	movw	r1, #625	; 0x271
 800bc52:	4630      	mov	r0, r6
 800bc54:	f7ff ff16 	bl	800ba84 <__i2b>
 800bc58:	2300      	movs	r3, #0
 800bc5a:	f8c8 0008 	str.w	r0, [r8, #8]
 800bc5e:	4604      	mov	r4, r0
 800bc60:	6003      	str	r3, [r0, #0]
 800bc62:	f04f 0900 	mov.w	r9, #0
 800bc66:	07eb      	lsls	r3, r5, #31
 800bc68:	d50a      	bpl.n	800bc80 <__pow5mult+0x84>
 800bc6a:	4639      	mov	r1, r7
 800bc6c:	4622      	mov	r2, r4
 800bc6e:	4630      	mov	r0, r6
 800bc70:	f7ff ff1e 	bl	800bab0 <__multiply>
 800bc74:	4639      	mov	r1, r7
 800bc76:	4680      	mov	r8, r0
 800bc78:	4630      	mov	r0, r6
 800bc7a:	f7ff fdfd 	bl	800b878 <_Bfree>
 800bc7e:	4647      	mov	r7, r8
 800bc80:	106d      	asrs	r5, r5, #1
 800bc82:	d00b      	beq.n	800bc9c <__pow5mult+0xa0>
 800bc84:	6820      	ldr	r0, [r4, #0]
 800bc86:	b938      	cbnz	r0, 800bc98 <__pow5mult+0x9c>
 800bc88:	4622      	mov	r2, r4
 800bc8a:	4621      	mov	r1, r4
 800bc8c:	4630      	mov	r0, r6
 800bc8e:	f7ff ff0f 	bl	800bab0 <__multiply>
 800bc92:	6020      	str	r0, [r4, #0]
 800bc94:	f8c0 9000 	str.w	r9, [r0]
 800bc98:	4604      	mov	r4, r0
 800bc9a:	e7e4      	b.n	800bc66 <__pow5mult+0x6a>
 800bc9c:	4638      	mov	r0, r7
 800bc9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bca2:	bf00      	nop
 800bca4:	0800f648 	.word	0x0800f648
 800bca8:	0800f38e 	.word	0x0800f38e
 800bcac:	0800f4f8 	.word	0x0800f4f8

0800bcb0 <__lshift>:
 800bcb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcb4:	460c      	mov	r4, r1
 800bcb6:	6849      	ldr	r1, [r1, #4]
 800bcb8:	6923      	ldr	r3, [r4, #16]
 800bcba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bcbe:	68a3      	ldr	r3, [r4, #8]
 800bcc0:	4607      	mov	r7, r0
 800bcc2:	4691      	mov	r9, r2
 800bcc4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bcc8:	f108 0601 	add.w	r6, r8, #1
 800bccc:	42b3      	cmp	r3, r6
 800bcce:	db0b      	blt.n	800bce8 <__lshift+0x38>
 800bcd0:	4638      	mov	r0, r7
 800bcd2:	f7ff fd91 	bl	800b7f8 <_Balloc>
 800bcd6:	4605      	mov	r5, r0
 800bcd8:	b948      	cbnz	r0, 800bcee <__lshift+0x3e>
 800bcda:	4602      	mov	r2, r0
 800bcdc:	4b28      	ldr	r3, [pc, #160]	; (800bd80 <__lshift+0xd0>)
 800bcde:	4829      	ldr	r0, [pc, #164]	; (800bd84 <__lshift+0xd4>)
 800bce0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bce4:	f000 fd74 	bl	800c7d0 <__assert_func>
 800bce8:	3101      	adds	r1, #1
 800bcea:	005b      	lsls	r3, r3, #1
 800bcec:	e7ee      	b.n	800bccc <__lshift+0x1c>
 800bcee:	2300      	movs	r3, #0
 800bcf0:	f100 0114 	add.w	r1, r0, #20
 800bcf4:	f100 0210 	add.w	r2, r0, #16
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	4553      	cmp	r3, sl
 800bcfc:	db33      	blt.n	800bd66 <__lshift+0xb6>
 800bcfe:	6920      	ldr	r0, [r4, #16]
 800bd00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bd04:	f104 0314 	add.w	r3, r4, #20
 800bd08:	f019 091f 	ands.w	r9, r9, #31
 800bd0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bd10:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bd14:	d02b      	beq.n	800bd6e <__lshift+0xbe>
 800bd16:	f1c9 0e20 	rsb	lr, r9, #32
 800bd1a:	468a      	mov	sl, r1
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	6818      	ldr	r0, [r3, #0]
 800bd20:	fa00 f009 	lsl.w	r0, r0, r9
 800bd24:	4302      	orrs	r2, r0
 800bd26:	f84a 2b04 	str.w	r2, [sl], #4
 800bd2a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd2e:	459c      	cmp	ip, r3
 800bd30:	fa22 f20e 	lsr.w	r2, r2, lr
 800bd34:	d8f3      	bhi.n	800bd1e <__lshift+0x6e>
 800bd36:	ebac 0304 	sub.w	r3, ip, r4
 800bd3a:	3b15      	subs	r3, #21
 800bd3c:	f023 0303 	bic.w	r3, r3, #3
 800bd40:	3304      	adds	r3, #4
 800bd42:	f104 0015 	add.w	r0, r4, #21
 800bd46:	4584      	cmp	ip, r0
 800bd48:	bf38      	it	cc
 800bd4a:	2304      	movcc	r3, #4
 800bd4c:	50ca      	str	r2, [r1, r3]
 800bd4e:	b10a      	cbz	r2, 800bd54 <__lshift+0xa4>
 800bd50:	f108 0602 	add.w	r6, r8, #2
 800bd54:	3e01      	subs	r6, #1
 800bd56:	4638      	mov	r0, r7
 800bd58:	612e      	str	r6, [r5, #16]
 800bd5a:	4621      	mov	r1, r4
 800bd5c:	f7ff fd8c 	bl	800b878 <_Bfree>
 800bd60:	4628      	mov	r0, r5
 800bd62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd66:	f842 0f04 	str.w	r0, [r2, #4]!
 800bd6a:	3301      	adds	r3, #1
 800bd6c:	e7c5      	b.n	800bcfa <__lshift+0x4a>
 800bd6e:	3904      	subs	r1, #4
 800bd70:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd74:	f841 2f04 	str.w	r2, [r1, #4]!
 800bd78:	459c      	cmp	ip, r3
 800bd7a:	d8f9      	bhi.n	800bd70 <__lshift+0xc0>
 800bd7c:	e7ea      	b.n	800bd54 <__lshift+0xa4>
 800bd7e:	bf00      	nop
 800bd80:	0800f404 	.word	0x0800f404
 800bd84:	0800f4f8 	.word	0x0800f4f8

0800bd88 <__mcmp>:
 800bd88:	b530      	push	{r4, r5, lr}
 800bd8a:	6902      	ldr	r2, [r0, #16]
 800bd8c:	690c      	ldr	r4, [r1, #16]
 800bd8e:	1b12      	subs	r2, r2, r4
 800bd90:	d10e      	bne.n	800bdb0 <__mcmp+0x28>
 800bd92:	f100 0314 	add.w	r3, r0, #20
 800bd96:	3114      	adds	r1, #20
 800bd98:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bd9c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bda0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bda4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bda8:	42a5      	cmp	r5, r4
 800bdaa:	d003      	beq.n	800bdb4 <__mcmp+0x2c>
 800bdac:	d305      	bcc.n	800bdba <__mcmp+0x32>
 800bdae:	2201      	movs	r2, #1
 800bdb0:	4610      	mov	r0, r2
 800bdb2:	bd30      	pop	{r4, r5, pc}
 800bdb4:	4283      	cmp	r3, r0
 800bdb6:	d3f3      	bcc.n	800bda0 <__mcmp+0x18>
 800bdb8:	e7fa      	b.n	800bdb0 <__mcmp+0x28>
 800bdba:	f04f 32ff 	mov.w	r2, #4294967295
 800bdbe:	e7f7      	b.n	800bdb0 <__mcmp+0x28>

0800bdc0 <__mdiff>:
 800bdc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdc4:	460c      	mov	r4, r1
 800bdc6:	4606      	mov	r6, r0
 800bdc8:	4611      	mov	r1, r2
 800bdca:	4620      	mov	r0, r4
 800bdcc:	4617      	mov	r7, r2
 800bdce:	f7ff ffdb 	bl	800bd88 <__mcmp>
 800bdd2:	1e05      	subs	r5, r0, #0
 800bdd4:	d110      	bne.n	800bdf8 <__mdiff+0x38>
 800bdd6:	4629      	mov	r1, r5
 800bdd8:	4630      	mov	r0, r6
 800bdda:	f7ff fd0d 	bl	800b7f8 <_Balloc>
 800bdde:	b930      	cbnz	r0, 800bdee <__mdiff+0x2e>
 800bde0:	4b39      	ldr	r3, [pc, #228]	; (800bec8 <__mdiff+0x108>)
 800bde2:	4602      	mov	r2, r0
 800bde4:	f240 2132 	movw	r1, #562	; 0x232
 800bde8:	4838      	ldr	r0, [pc, #224]	; (800becc <__mdiff+0x10c>)
 800bdea:	f000 fcf1 	bl	800c7d0 <__assert_func>
 800bdee:	2301      	movs	r3, #1
 800bdf0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bdf4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdf8:	bfa4      	itt	ge
 800bdfa:	463b      	movge	r3, r7
 800bdfc:	4627      	movge	r7, r4
 800bdfe:	4630      	mov	r0, r6
 800be00:	6879      	ldr	r1, [r7, #4]
 800be02:	bfa6      	itte	ge
 800be04:	461c      	movge	r4, r3
 800be06:	2500      	movge	r5, #0
 800be08:	2501      	movlt	r5, #1
 800be0a:	f7ff fcf5 	bl	800b7f8 <_Balloc>
 800be0e:	b920      	cbnz	r0, 800be1a <__mdiff+0x5a>
 800be10:	4b2d      	ldr	r3, [pc, #180]	; (800bec8 <__mdiff+0x108>)
 800be12:	4602      	mov	r2, r0
 800be14:	f44f 7110 	mov.w	r1, #576	; 0x240
 800be18:	e7e6      	b.n	800bde8 <__mdiff+0x28>
 800be1a:	693e      	ldr	r6, [r7, #16]
 800be1c:	60c5      	str	r5, [r0, #12]
 800be1e:	6925      	ldr	r5, [r4, #16]
 800be20:	f107 0114 	add.w	r1, r7, #20
 800be24:	f104 0914 	add.w	r9, r4, #20
 800be28:	f100 0e14 	add.w	lr, r0, #20
 800be2c:	f107 0210 	add.w	r2, r7, #16
 800be30:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800be34:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800be38:	46f2      	mov	sl, lr
 800be3a:	2700      	movs	r7, #0
 800be3c:	f859 3b04 	ldr.w	r3, [r9], #4
 800be40:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800be44:	fa1f f883 	uxth.w	r8, r3
 800be48:	fa17 f78b 	uxtah	r7, r7, fp
 800be4c:	0c1b      	lsrs	r3, r3, #16
 800be4e:	eba7 0808 	sub.w	r8, r7, r8
 800be52:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800be56:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800be5a:	fa1f f888 	uxth.w	r8, r8
 800be5e:	141f      	asrs	r7, r3, #16
 800be60:	454d      	cmp	r5, r9
 800be62:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800be66:	f84a 3b04 	str.w	r3, [sl], #4
 800be6a:	d8e7      	bhi.n	800be3c <__mdiff+0x7c>
 800be6c:	1b2b      	subs	r3, r5, r4
 800be6e:	3b15      	subs	r3, #21
 800be70:	f023 0303 	bic.w	r3, r3, #3
 800be74:	3304      	adds	r3, #4
 800be76:	3415      	adds	r4, #21
 800be78:	42a5      	cmp	r5, r4
 800be7a:	bf38      	it	cc
 800be7c:	2304      	movcc	r3, #4
 800be7e:	4419      	add	r1, r3
 800be80:	4473      	add	r3, lr
 800be82:	469e      	mov	lr, r3
 800be84:	460d      	mov	r5, r1
 800be86:	4565      	cmp	r5, ip
 800be88:	d30e      	bcc.n	800bea8 <__mdiff+0xe8>
 800be8a:	f10c 0203 	add.w	r2, ip, #3
 800be8e:	1a52      	subs	r2, r2, r1
 800be90:	f022 0203 	bic.w	r2, r2, #3
 800be94:	3903      	subs	r1, #3
 800be96:	458c      	cmp	ip, r1
 800be98:	bf38      	it	cc
 800be9a:	2200      	movcc	r2, #0
 800be9c:	441a      	add	r2, r3
 800be9e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bea2:	b17b      	cbz	r3, 800bec4 <__mdiff+0x104>
 800bea4:	6106      	str	r6, [r0, #16]
 800bea6:	e7a5      	b.n	800bdf4 <__mdiff+0x34>
 800bea8:	f855 8b04 	ldr.w	r8, [r5], #4
 800beac:	fa17 f488 	uxtah	r4, r7, r8
 800beb0:	1422      	asrs	r2, r4, #16
 800beb2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800beb6:	b2a4      	uxth	r4, r4
 800beb8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800bebc:	f84e 4b04 	str.w	r4, [lr], #4
 800bec0:	1417      	asrs	r7, r2, #16
 800bec2:	e7e0      	b.n	800be86 <__mdiff+0xc6>
 800bec4:	3e01      	subs	r6, #1
 800bec6:	e7ea      	b.n	800be9e <__mdiff+0xde>
 800bec8:	0800f404 	.word	0x0800f404
 800becc:	0800f4f8 	.word	0x0800f4f8

0800bed0 <__ulp>:
 800bed0:	b082      	sub	sp, #8
 800bed2:	ed8d 0b00 	vstr	d0, [sp]
 800bed6:	9b01      	ldr	r3, [sp, #4]
 800bed8:	4912      	ldr	r1, [pc, #72]	; (800bf24 <__ulp+0x54>)
 800beda:	4019      	ands	r1, r3
 800bedc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bee0:	2900      	cmp	r1, #0
 800bee2:	dd05      	ble.n	800bef0 <__ulp+0x20>
 800bee4:	2200      	movs	r2, #0
 800bee6:	460b      	mov	r3, r1
 800bee8:	ec43 2b10 	vmov	d0, r2, r3
 800beec:	b002      	add	sp, #8
 800beee:	4770      	bx	lr
 800bef0:	4249      	negs	r1, r1
 800bef2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800bef6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800befa:	f04f 0200 	mov.w	r2, #0
 800befe:	f04f 0300 	mov.w	r3, #0
 800bf02:	da04      	bge.n	800bf0e <__ulp+0x3e>
 800bf04:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bf08:	fa41 f300 	asr.w	r3, r1, r0
 800bf0c:	e7ec      	b.n	800bee8 <__ulp+0x18>
 800bf0e:	f1a0 0114 	sub.w	r1, r0, #20
 800bf12:	291e      	cmp	r1, #30
 800bf14:	bfda      	itte	le
 800bf16:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800bf1a:	fa20 f101 	lsrle.w	r1, r0, r1
 800bf1e:	2101      	movgt	r1, #1
 800bf20:	460a      	mov	r2, r1
 800bf22:	e7e1      	b.n	800bee8 <__ulp+0x18>
 800bf24:	7ff00000 	.word	0x7ff00000

0800bf28 <__b2d>:
 800bf28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf2a:	6905      	ldr	r5, [r0, #16]
 800bf2c:	f100 0714 	add.w	r7, r0, #20
 800bf30:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800bf34:	1f2e      	subs	r6, r5, #4
 800bf36:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bf3a:	4620      	mov	r0, r4
 800bf3c:	f7ff fd52 	bl	800b9e4 <__hi0bits>
 800bf40:	f1c0 0320 	rsb	r3, r0, #32
 800bf44:	280a      	cmp	r0, #10
 800bf46:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800bfc4 <__b2d+0x9c>
 800bf4a:	600b      	str	r3, [r1, #0]
 800bf4c:	dc14      	bgt.n	800bf78 <__b2d+0x50>
 800bf4e:	f1c0 0e0b 	rsb	lr, r0, #11
 800bf52:	fa24 f10e 	lsr.w	r1, r4, lr
 800bf56:	42b7      	cmp	r7, r6
 800bf58:	ea41 030c 	orr.w	r3, r1, ip
 800bf5c:	bf34      	ite	cc
 800bf5e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bf62:	2100      	movcs	r1, #0
 800bf64:	3015      	adds	r0, #21
 800bf66:	fa04 f000 	lsl.w	r0, r4, r0
 800bf6a:	fa21 f10e 	lsr.w	r1, r1, lr
 800bf6e:	ea40 0201 	orr.w	r2, r0, r1
 800bf72:	ec43 2b10 	vmov	d0, r2, r3
 800bf76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf78:	42b7      	cmp	r7, r6
 800bf7a:	bf3a      	itte	cc
 800bf7c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bf80:	f1a5 0608 	subcc.w	r6, r5, #8
 800bf84:	2100      	movcs	r1, #0
 800bf86:	380b      	subs	r0, #11
 800bf88:	d017      	beq.n	800bfba <__b2d+0x92>
 800bf8a:	f1c0 0c20 	rsb	ip, r0, #32
 800bf8e:	fa04 f500 	lsl.w	r5, r4, r0
 800bf92:	42be      	cmp	r6, r7
 800bf94:	fa21 f40c 	lsr.w	r4, r1, ip
 800bf98:	ea45 0504 	orr.w	r5, r5, r4
 800bf9c:	bf8c      	ite	hi
 800bf9e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bfa2:	2400      	movls	r4, #0
 800bfa4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800bfa8:	fa01 f000 	lsl.w	r0, r1, r0
 800bfac:	fa24 f40c 	lsr.w	r4, r4, ip
 800bfb0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bfb4:	ea40 0204 	orr.w	r2, r0, r4
 800bfb8:	e7db      	b.n	800bf72 <__b2d+0x4a>
 800bfba:	ea44 030c 	orr.w	r3, r4, ip
 800bfbe:	460a      	mov	r2, r1
 800bfc0:	e7d7      	b.n	800bf72 <__b2d+0x4a>
 800bfc2:	bf00      	nop
 800bfc4:	3ff00000 	.word	0x3ff00000

0800bfc8 <__d2b>:
 800bfc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bfcc:	4689      	mov	r9, r1
 800bfce:	2101      	movs	r1, #1
 800bfd0:	ec57 6b10 	vmov	r6, r7, d0
 800bfd4:	4690      	mov	r8, r2
 800bfd6:	f7ff fc0f 	bl	800b7f8 <_Balloc>
 800bfda:	4604      	mov	r4, r0
 800bfdc:	b930      	cbnz	r0, 800bfec <__d2b+0x24>
 800bfde:	4602      	mov	r2, r0
 800bfe0:	4b25      	ldr	r3, [pc, #148]	; (800c078 <__d2b+0xb0>)
 800bfe2:	4826      	ldr	r0, [pc, #152]	; (800c07c <__d2b+0xb4>)
 800bfe4:	f240 310a 	movw	r1, #778	; 0x30a
 800bfe8:	f000 fbf2 	bl	800c7d0 <__assert_func>
 800bfec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bff0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bff4:	bb35      	cbnz	r5, 800c044 <__d2b+0x7c>
 800bff6:	2e00      	cmp	r6, #0
 800bff8:	9301      	str	r3, [sp, #4]
 800bffa:	d028      	beq.n	800c04e <__d2b+0x86>
 800bffc:	4668      	mov	r0, sp
 800bffe:	9600      	str	r6, [sp, #0]
 800c000:	f7ff fd10 	bl	800ba24 <__lo0bits>
 800c004:	9900      	ldr	r1, [sp, #0]
 800c006:	b300      	cbz	r0, 800c04a <__d2b+0x82>
 800c008:	9a01      	ldr	r2, [sp, #4]
 800c00a:	f1c0 0320 	rsb	r3, r0, #32
 800c00e:	fa02 f303 	lsl.w	r3, r2, r3
 800c012:	430b      	orrs	r3, r1
 800c014:	40c2      	lsrs	r2, r0
 800c016:	6163      	str	r3, [r4, #20]
 800c018:	9201      	str	r2, [sp, #4]
 800c01a:	9b01      	ldr	r3, [sp, #4]
 800c01c:	61a3      	str	r3, [r4, #24]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	bf14      	ite	ne
 800c022:	2202      	movne	r2, #2
 800c024:	2201      	moveq	r2, #1
 800c026:	6122      	str	r2, [r4, #16]
 800c028:	b1d5      	cbz	r5, 800c060 <__d2b+0x98>
 800c02a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c02e:	4405      	add	r5, r0
 800c030:	f8c9 5000 	str.w	r5, [r9]
 800c034:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c038:	f8c8 0000 	str.w	r0, [r8]
 800c03c:	4620      	mov	r0, r4
 800c03e:	b003      	add	sp, #12
 800c040:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c044:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c048:	e7d5      	b.n	800bff6 <__d2b+0x2e>
 800c04a:	6161      	str	r1, [r4, #20]
 800c04c:	e7e5      	b.n	800c01a <__d2b+0x52>
 800c04e:	a801      	add	r0, sp, #4
 800c050:	f7ff fce8 	bl	800ba24 <__lo0bits>
 800c054:	9b01      	ldr	r3, [sp, #4]
 800c056:	6163      	str	r3, [r4, #20]
 800c058:	2201      	movs	r2, #1
 800c05a:	6122      	str	r2, [r4, #16]
 800c05c:	3020      	adds	r0, #32
 800c05e:	e7e3      	b.n	800c028 <__d2b+0x60>
 800c060:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c064:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c068:	f8c9 0000 	str.w	r0, [r9]
 800c06c:	6918      	ldr	r0, [r3, #16]
 800c06e:	f7ff fcb9 	bl	800b9e4 <__hi0bits>
 800c072:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c076:	e7df      	b.n	800c038 <__d2b+0x70>
 800c078:	0800f404 	.word	0x0800f404
 800c07c:	0800f4f8 	.word	0x0800f4f8

0800c080 <__ratio>:
 800c080:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c084:	4688      	mov	r8, r1
 800c086:	4669      	mov	r1, sp
 800c088:	4681      	mov	r9, r0
 800c08a:	f7ff ff4d 	bl	800bf28 <__b2d>
 800c08e:	a901      	add	r1, sp, #4
 800c090:	4640      	mov	r0, r8
 800c092:	ec55 4b10 	vmov	r4, r5, d0
 800c096:	f7ff ff47 	bl	800bf28 <__b2d>
 800c09a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c09e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c0a2:	eba3 0c02 	sub.w	ip, r3, r2
 800c0a6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c0aa:	1a9b      	subs	r3, r3, r2
 800c0ac:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c0b0:	ec51 0b10 	vmov	r0, r1, d0
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	bfd6      	itet	le
 800c0b8:	460a      	movle	r2, r1
 800c0ba:	462a      	movgt	r2, r5
 800c0bc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c0c0:	468b      	mov	fp, r1
 800c0c2:	462f      	mov	r7, r5
 800c0c4:	bfd4      	ite	le
 800c0c6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c0ca:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c0ce:	4620      	mov	r0, r4
 800c0d0:	ee10 2a10 	vmov	r2, s0
 800c0d4:	465b      	mov	r3, fp
 800c0d6:	4639      	mov	r1, r7
 800c0d8:	f7f4 fbb8 	bl	800084c <__aeabi_ddiv>
 800c0dc:	ec41 0b10 	vmov	d0, r0, r1
 800c0e0:	b003      	add	sp, #12
 800c0e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c0e6 <__copybits>:
 800c0e6:	3901      	subs	r1, #1
 800c0e8:	b570      	push	{r4, r5, r6, lr}
 800c0ea:	1149      	asrs	r1, r1, #5
 800c0ec:	6914      	ldr	r4, [r2, #16]
 800c0ee:	3101      	adds	r1, #1
 800c0f0:	f102 0314 	add.w	r3, r2, #20
 800c0f4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c0f8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c0fc:	1f05      	subs	r5, r0, #4
 800c0fe:	42a3      	cmp	r3, r4
 800c100:	d30c      	bcc.n	800c11c <__copybits+0x36>
 800c102:	1aa3      	subs	r3, r4, r2
 800c104:	3b11      	subs	r3, #17
 800c106:	f023 0303 	bic.w	r3, r3, #3
 800c10a:	3211      	adds	r2, #17
 800c10c:	42a2      	cmp	r2, r4
 800c10e:	bf88      	it	hi
 800c110:	2300      	movhi	r3, #0
 800c112:	4418      	add	r0, r3
 800c114:	2300      	movs	r3, #0
 800c116:	4288      	cmp	r0, r1
 800c118:	d305      	bcc.n	800c126 <__copybits+0x40>
 800c11a:	bd70      	pop	{r4, r5, r6, pc}
 800c11c:	f853 6b04 	ldr.w	r6, [r3], #4
 800c120:	f845 6f04 	str.w	r6, [r5, #4]!
 800c124:	e7eb      	b.n	800c0fe <__copybits+0x18>
 800c126:	f840 3b04 	str.w	r3, [r0], #4
 800c12a:	e7f4      	b.n	800c116 <__copybits+0x30>

0800c12c <__any_on>:
 800c12c:	f100 0214 	add.w	r2, r0, #20
 800c130:	6900      	ldr	r0, [r0, #16]
 800c132:	114b      	asrs	r3, r1, #5
 800c134:	4298      	cmp	r0, r3
 800c136:	b510      	push	{r4, lr}
 800c138:	db11      	blt.n	800c15e <__any_on+0x32>
 800c13a:	dd0a      	ble.n	800c152 <__any_on+0x26>
 800c13c:	f011 011f 	ands.w	r1, r1, #31
 800c140:	d007      	beq.n	800c152 <__any_on+0x26>
 800c142:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c146:	fa24 f001 	lsr.w	r0, r4, r1
 800c14a:	fa00 f101 	lsl.w	r1, r0, r1
 800c14e:	428c      	cmp	r4, r1
 800c150:	d10b      	bne.n	800c16a <__any_on+0x3e>
 800c152:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c156:	4293      	cmp	r3, r2
 800c158:	d803      	bhi.n	800c162 <__any_on+0x36>
 800c15a:	2000      	movs	r0, #0
 800c15c:	bd10      	pop	{r4, pc}
 800c15e:	4603      	mov	r3, r0
 800c160:	e7f7      	b.n	800c152 <__any_on+0x26>
 800c162:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c166:	2900      	cmp	r1, #0
 800c168:	d0f5      	beq.n	800c156 <__any_on+0x2a>
 800c16a:	2001      	movs	r0, #1
 800c16c:	e7f6      	b.n	800c15c <__any_on+0x30>

0800c16e <__ssputs_r>:
 800c16e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c172:	688e      	ldr	r6, [r1, #8]
 800c174:	429e      	cmp	r6, r3
 800c176:	4682      	mov	sl, r0
 800c178:	460c      	mov	r4, r1
 800c17a:	4690      	mov	r8, r2
 800c17c:	461f      	mov	r7, r3
 800c17e:	d838      	bhi.n	800c1f2 <__ssputs_r+0x84>
 800c180:	898a      	ldrh	r2, [r1, #12]
 800c182:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c186:	d032      	beq.n	800c1ee <__ssputs_r+0x80>
 800c188:	6825      	ldr	r5, [r4, #0]
 800c18a:	6909      	ldr	r1, [r1, #16]
 800c18c:	eba5 0901 	sub.w	r9, r5, r1
 800c190:	6965      	ldr	r5, [r4, #20]
 800c192:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c196:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c19a:	3301      	adds	r3, #1
 800c19c:	444b      	add	r3, r9
 800c19e:	106d      	asrs	r5, r5, #1
 800c1a0:	429d      	cmp	r5, r3
 800c1a2:	bf38      	it	cc
 800c1a4:	461d      	movcc	r5, r3
 800c1a6:	0553      	lsls	r3, r2, #21
 800c1a8:	d531      	bpl.n	800c20e <__ssputs_r+0xa0>
 800c1aa:	4629      	mov	r1, r5
 800c1ac:	f7fb ff20 	bl	8007ff0 <_malloc_r>
 800c1b0:	4606      	mov	r6, r0
 800c1b2:	b950      	cbnz	r0, 800c1ca <__ssputs_r+0x5c>
 800c1b4:	230c      	movs	r3, #12
 800c1b6:	f8ca 3000 	str.w	r3, [sl]
 800c1ba:	89a3      	ldrh	r3, [r4, #12]
 800c1bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1c0:	81a3      	strh	r3, [r4, #12]
 800c1c2:	f04f 30ff 	mov.w	r0, #4294967295
 800c1c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1ca:	6921      	ldr	r1, [r4, #16]
 800c1cc:	464a      	mov	r2, r9
 800c1ce:	f7fb fe99 	bl	8007f04 <memcpy>
 800c1d2:	89a3      	ldrh	r3, [r4, #12]
 800c1d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c1d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1dc:	81a3      	strh	r3, [r4, #12]
 800c1de:	6126      	str	r6, [r4, #16]
 800c1e0:	6165      	str	r5, [r4, #20]
 800c1e2:	444e      	add	r6, r9
 800c1e4:	eba5 0509 	sub.w	r5, r5, r9
 800c1e8:	6026      	str	r6, [r4, #0]
 800c1ea:	60a5      	str	r5, [r4, #8]
 800c1ec:	463e      	mov	r6, r7
 800c1ee:	42be      	cmp	r6, r7
 800c1f0:	d900      	bls.n	800c1f4 <__ssputs_r+0x86>
 800c1f2:	463e      	mov	r6, r7
 800c1f4:	4632      	mov	r2, r6
 800c1f6:	6820      	ldr	r0, [r4, #0]
 800c1f8:	4641      	mov	r1, r8
 800c1fa:	f000 fb5d 	bl	800c8b8 <memmove>
 800c1fe:	68a3      	ldr	r3, [r4, #8]
 800c200:	6822      	ldr	r2, [r4, #0]
 800c202:	1b9b      	subs	r3, r3, r6
 800c204:	4432      	add	r2, r6
 800c206:	60a3      	str	r3, [r4, #8]
 800c208:	6022      	str	r2, [r4, #0]
 800c20a:	2000      	movs	r0, #0
 800c20c:	e7db      	b.n	800c1c6 <__ssputs_r+0x58>
 800c20e:	462a      	mov	r2, r5
 800c210:	f000 fb6c 	bl	800c8ec <_realloc_r>
 800c214:	4606      	mov	r6, r0
 800c216:	2800      	cmp	r0, #0
 800c218:	d1e1      	bne.n	800c1de <__ssputs_r+0x70>
 800c21a:	6921      	ldr	r1, [r4, #16]
 800c21c:	4650      	mov	r0, sl
 800c21e:	f7fb fe97 	bl	8007f50 <_free_r>
 800c222:	e7c7      	b.n	800c1b4 <__ssputs_r+0x46>

0800c224 <_svfiprintf_r>:
 800c224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c228:	4698      	mov	r8, r3
 800c22a:	898b      	ldrh	r3, [r1, #12]
 800c22c:	061b      	lsls	r3, r3, #24
 800c22e:	b09d      	sub	sp, #116	; 0x74
 800c230:	4607      	mov	r7, r0
 800c232:	460d      	mov	r5, r1
 800c234:	4614      	mov	r4, r2
 800c236:	d50e      	bpl.n	800c256 <_svfiprintf_r+0x32>
 800c238:	690b      	ldr	r3, [r1, #16]
 800c23a:	b963      	cbnz	r3, 800c256 <_svfiprintf_r+0x32>
 800c23c:	2140      	movs	r1, #64	; 0x40
 800c23e:	f7fb fed7 	bl	8007ff0 <_malloc_r>
 800c242:	6028      	str	r0, [r5, #0]
 800c244:	6128      	str	r0, [r5, #16]
 800c246:	b920      	cbnz	r0, 800c252 <_svfiprintf_r+0x2e>
 800c248:	230c      	movs	r3, #12
 800c24a:	603b      	str	r3, [r7, #0]
 800c24c:	f04f 30ff 	mov.w	r0, #4294967295
 800c250:	e0d1      	b.n	800c3f6 <_svfiprintf_r+0x1d2>
 800c252:	2340      	movs	r3, #64	; 0x40
 800c254:	616b      	str	r3, [r5, #20]
 800c256:	2300      	movs	r3, #0
 800c258:	9309      	str	r3, [sp, #36]	; 0x24
 800c25a:	2320      	movs	r3, #32
 800c25c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c260:	f8cd 800c 	str.w	r8, [sp, #12]
 800c264:	2330      	movs	r3, #48	; 0x30
 800c266:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c410 <_svfiprintf_r+0x1ec>
 800c26a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c26e:	f04f 0901 	mov.w	r9, #1
 800c272:	4623      	mov	r3, r4
 800c274:	469a      	mov	sl, r3
 800c276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c27a:	b10a      	cbz	r2, 800c280 <_svfiprintf_r+0x5c>
 800c27c:	2a25      	cmp	r2, #37	; 0x25
 800c27e:	d1f9      	bne.n	800c274 <_svfiprintf_r+0x50>
 800c280:	ebba 0b04 	subs.w	fp, sl, r4
 800c284:	d00b      	beq.n	800c29e <_svfiprintf_r+0x7a>
 800c286:	465b      	mov	r3, fp
 800c288:	4622      	mov	r2, r4
 800c28a:	4629      	mov	r1, r5
 800c28c:	4638      	mov	r0, r7
 800c28e:	f7ff ff6e 	bl	800c16e <__ssputs_r>
 800c292:	3001      	adds	r0, #1
 800c294:	f000 80aa 	beq.w	800c3ec <_svfiprintf_r+0x1c8>
 800c298:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c29a:	445a      	add	r2, fp
 800c29c:	9209      	str	r2, [sp, #36]	; 0x24
 800c29e:	f89a 3000 	ldrb.w	r3, [sl]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	f000 80a2 	beq.w	800c3ec <_svfiprintf_r+0x1c8>
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	f04f 32ff 	mov.w	r2, #4294967295
 800c2ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2b2:	f10a 0a01 	add.w	sl, sl, #1
 800c2b6:	9304      	str	r3, [sp, #16]
 800c2b8:	9307      	str	r3, [sp, #28]
 800c2ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c2be:	931a      	str	r3, [sp, #104]	; 0x68
 800c2c0:	4654      	mov	r4, sl
 800c2c2:	2205      	movs	r2, #5
 800c2c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2c8:	4851      	ldr	r0, [pc, #324]	; (800c410 <_svfiprintf_r+0x1ec>)
 800c2ca:	f7f3 ff89 	bl	80001e0 <memchr>
 800c2ce:	9a04      	ldr	r2, [sp, #16]
 800c2d0:	b9d8      	cbnz	r0, 800c30a <_svfiprintf_r+0xe6>
 800c2d2:	06d0      	lsls	r0, r2, #27
 800c2d4:	bf44      	itt	mi
 800c2d6:	2320      	movmi	r3, #32
 800c2d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2dc:	0711      	lsls	r1, r2, #28
 800c2de:	bf44      	itt	mi
 800c2e0:	232b      	movmi	r3, #43	; 0x2b
 800c2e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2e6:	f89a 3000 	ldrb.w	r3, [sl]
 800c2ea:	2b2a      	cmp	r3, #42	; 0x2a
 800c2ec:	d015      	beq.n	800c31a <_svfiprintf_r+0xf6>
 800c2ee:	9a07      	ldr	r2, [sp, #28]
 800c2f0:	4654      	mov	r4, sl
 800c2f2:	2000      	movs	r0, #0
 800c2f4:	f04f 0c0a 	mov.w	ip, #10
 800c2f8:	4621      	mov	r1, r4
 800c2fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2fe:	3b30      	subs	r3, #48	; 0x30
 800c300:	2b09      	cmp	r3, #9
 800c302:	d94e      	bls.n	800c3a2 <_svfiprintf_r+0x17e>
 800c304:	b1b0      	cbz	r0, 800c334 <_svfiprintf_r+0x110>
 800c306:	9207      	str	r2, [sp, #28]
 800c308:	e014      	b.n	800c334 <_svfiprintf_r+0x110>
 800c30a:	eba0 0308 	sub.w	r3, r0, r8
 800c30e:	fa09 f303 	lsl.w	r3, r9, r3
 800c312:	4313      	orrs	r3, r2
 800c314:	9304      	str	r3, [sp, #16]
 800c316:	46a2      	mov	sl, r4
 800c318:	e7d2      	b.n	800c2c0 <_svfiprintf_r+0x9c>
 800c31a:	9b03      	ldr	r3, [sp, #12]
 800c31c:	1d19      	adds	r1, r3, #4
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	9103      	str	r1, [sp, #12]
 800c322:	2b00      	cmp	r3, #0
 800c324:	bfbb      	ittet	lt
 800c326:	425b      	neglt	r3, r3
 800c328:	f042 0202 	orrlt.w	r2, r2, #2
 800c32c:	9307      	strge	r3, [sp, #28]
 800c32e:	9307      	strlt	r3, [sp, #28]
 800c330:	bfb8      	it	lt
 800c332:	9204      	strlt	r2, [sp, #16]
 800c334:	7823      	ldrb	r3, [r4, #0]
 800c336:	2b2e      	cmp	r3, #46	; 0x2e
 800c338:	d10c      	bne.n	800c354 <_svfiprintf_r+0x130>
 800c33a:	7863      	ldrb	r3, [r4, #1]
 800c33c:	2b2a      	cmp	r3, #42	; 0x2a
 800c33e:	d135      	bne.n	800c3ac <_svfiprintf_r+0x188>
 800c340:	9b03      	ldr	r3, [sp, #12]
 800c342:	1d1a      	adds	r2, r3, #4
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	9203      	str	r2, [sp, #12]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	bfb8      	it	lt
 800c34c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c350:	3402      	adds	r4, #2
 800c352:	9305      	str	r3, [sp, #20]
 800c354:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c420 <_svfiprintf_r+0x1fc>
 800c358:	7821      	ldrb	r1, [r4, #0]
 800c35a:	2203      	movs	r2, #3
 800c35c:	4650      	mov	r0, sl
 800c35e:	f7f3 ff3f 	bl	80001e0 <memchr>
 800c362:	b140      	cbz	r0, 800c376 <_svfiprintf_r+0x152>
 800c364:	2340      	movs	r3, #64	; 0x40
 800c366:	eba0 000a 	sub.w	r0, r0, sl
 800c36a:	fa03 f000 	lsl.w	r0, r3, r0
 800c36e:	9b04      	ldr	r3, [sp, #16]
 800c370:	4303      	orrs	r3, r0
 800c372:	3401      	adds	r4, #1
 800c374:	9304      	str	r3, [sp, #16]
 800c376:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c37a:	4826      	ldr	r0, [pc, #152]	; (800c414 <_svfiprintf_r+0x1f0>)
 800c37c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c380:	2206      	movs	r2, #6
 800c382:	f7f3 ff2d 	bl	80001e0 <memchr>
 800c386:	2800      	cmp	r0, #0
 800c388:	d038      	beq.n	800c3fc <_svfiprintf_r+0x1d8>
 800c38a:	4b23      	ldr	r3, [pc, #140]	; (800c418 <_svfiprintf_r+0x1f4>)
 800c38c:	bb1b      	cbnz	r3, 800c3d6 <_svfiprintf_r+0x1b2>
 800c38e:	9b03      	ldr	r3, [sp, #12]
 800c390:	3307      	adds	r3, #7
 800c392:	f023 0307 	bic.w	r3, r3, #7
 800c396:	3308      	adds	r3, #8
 800c398:	9303      	str	r3, [sp, #12]
 800c39a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c39c:	4433      	add	r3, r6
 800c39e:	9309      	str	r3, [sp, #36]	; 0x24
 800c3a0:	e767      	b.n	800c272 <_svfiprintf_r+0x4e>
 800c3a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3a6:	460c      	mov	r4, r1
 800c3a8:	2001      	movs	r0, #1
 800c3aa:	e7a5      	b.n	800c2f8 <_svfiprintf_r+0xd4>
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	3401      	adds	r4, #1
 800c3b0:	9305      	str	r3, [sp, #20]
 800c3b2:	4619      	mov	r1, r3
 800c3b4:	f04f 0c0a 	mov.w	ip, #10
 800c3b8:	4620      	mov	r0, r4
 800c3ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3be:	3a30      	subs	r2, #48	; 0x30
 800c3c0:	2a09      	cmp	r2, #9
 800c3c2:	d903      	bls.n	800c3cc <_svfiprintf_r+0x1a8>
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d0c5      	beq.n	800c354 <_svfiprintf_r+0x130>
 800c3c8:	9105      	str	r1, [sp, #20]
 800c3ca:	e7c3      	b.n	800c354 <_svfiprintf_r+0x130>
 800c3cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3d0:	4604      	mov	r4, r0
 800c3d2:	2301      	movs	r3, #1
 800c3d4:	e7f0      	b.n	800c3b8 <_svfiprintf_r+0x194>
 800c3d6:	ab03      	add	r3, sp, #12
 800c3d8:	9300      	str	r3, [sp, #0]
 800c3da:	462a      	mov	r2, r5
 800c3dc:	4b0f      	ldr	r3, [pc, #60]	; (800c41c <_svfiprintf_r+0x1f8>)
 800c3de:	a904      	add	r1, sp, #16
 800c3e0:	4638      	mov	r0, r7
 800c3e2:	f7fb feff 	bl	80081e4 <_printf_float>
 800c3e6:	1c42      	adds	r2, r0, #1
 800c3e8:	4606      	mov	r6, r0
 800c3ea:	d1d6      	bne.n	800c39a <_svfiprintf_r+0x176>
 800c3ec:	89ab      	ldrh	r3, [r5, #12]
 800c3ee:	065b      	lsls	r3, r3, #25
 800c3f0:	f53f af2c 	bmi.w	800c24c <_svfiprintf_r+0x28>
 800c3f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c3f6:	b01d      	add	sp, #116	; 0x74
 800c3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3fc:	ab03      	add	r3, sp, #12
 800c3fe:	9300      	str	r3, [sp, #0]
 800c400:	462a      	mov	r2, r5
 800c402:	4b06      	ldr	r3, [pc, #24]	; (800c41c <_svfiprintf_r+0x1f8>)
 800c404:	a904      	add	r1, sp, #16
 800c406:	4638      	mov	r0, r7
 800c408:	f7fc f990 	bl	800872c <_printf_i>
 800c40c:	e7eb      	b.n	800c3e6 <_svfiprintf_r+0x1c2>
 800c40e:	bf00      	nop
 800c410:	0800f654 	.word	0x0800f654
 800c414:	0800f65e 	.word	0x0800f65e
 800c418:	080081e5 	.word	0x080081e5
 800c41c:	0800c16f 	.word	0x0800c16f
 800c420:	0800f65a 	.word	0x0800f65a

0800c424 <__sfputc_r>:
 800c424:	6893      	ldr	r3, [r2, #8]
 800c426:	3b01      	subs	r3, #1
 800c428:	2b00      	cmp	r3, #0
 800c42a:	b410      	push	{r4}
 800c42c:	6093      	str	r3, [r2, #8]
 800c42e:	da08      	bge.n	800c442 <__sfputc_r+0x1e>
 800c430:	6994      	ldr	r4, [r2, #24]
 800c432:	42a3      	cmp	r3, r4
 800c434:	db01      	blt.n	800c43a <__sfputc_r+0x16>
 800c436:	290a      	cmp	r1, #10
 800c438:	d103      	bne.n	800c442 <__sfputc_r+0x1e>
 800c43a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c43e:	f7fd bcf1 	b.w	8009e24 <__swbuf_r>
 800c442:	6813      	ldr	r3, [r2, #0]
 800c444:	1c58      	adds	r0, r3, #1
 800c446:	6010      	str	r0, [r2, #0]
 800c448:	7019      	strb	r1, [r3, #0]
 800c44a:	4608      	mov	r0, r1
 800c44c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c450:	4770      	bx	lr

0800c452 <__sfputs_r>:
 800c452:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c454:	4606      	mov	r6, r0
 800c456:	460f      	mov	r7, r1
 800c458:	4614      	mov	r4, r2
 800c45a:	18d5      	adds	r5, r2, r3
 800c45c:	42ac      	cmp	r4, r5
 800c45e:	d101      	bne.n	800c464 <__sfputs_r+0x12>
 800c460:	2000      	movs	r0, #0
 800c462:	e007      	b.n	800c474 <__sfputs_r+0x22>
 800c464:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c468:	463a      	mov	r2, r7
 800c46a:	4630      	mov	r0, r6
 800c46c:	f7ff ffda 	bl	800c424 <__sfputc_r>
 800c470:	1c43      	adds	r3, r0, #1
 800c472:	d1f3      	bne.n	800c45c <__sfputs_r+0xa>
 800c474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c478 <_vfiprintf_r>:
 800c478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c47c:	460d      	mov	r5, r1
 800c47e:	b09d      	sub	sp, #116	; 0x74
 800c480:	4614      	mov	r4, r2
 800c482:	4698      	mov	r8, r3
 800c484:	4606      	mov	r6, r0
 800c486:	b118      	cbz	r0, 800c490 <_vfiprintf_r+0x18>
 800c488:	6983      	ldr	r3, [r0, #24]
 800c48a:	b90b      	cbnz	r3, 800c490 <_vfiprintf_r+0x18>
 800c48c:	f7fe fd1e 	bl	800aecc <__sinit>
 800c490:	4b89      	ldr	r3, [pc, #548]	; (800c6b8 <_vfiprintf_r+0x240>)
 800c492:	429d      	cmp	r5, r3
 800c494:	d11b      	bne.n	800c4ce <_vfiprintf_r+0x56>
 800c496:	6875      	ldr	r5, [r6, #4]
 800c498:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c49a:	07d9      	lsls	r1, r3, #31
 800c49c:	d405      	bmi.n	800c4aa <_vfiprintf_r+0x32>
 800c49e:	89ab      	ldrh	r3, [r5, #12]
 800c4a0:	059a      	lsls	r2, r3, #22
 800c4a2:	d402      	bmi.n	800c4aa <_vfiprintf_r+0x32>
 800c4a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c4a6:	f7ff f922 	bl	800b6ee <__retarget_lock_acquire_recursive>
 800c4aa:	89ab      	ldrh	r3, [r5, #12]
 800c4ac:	071b      	lsls	r3, r3, #28
 800c4ae:	d501      	bpl.n	800c4b4 <_vfiprintf_r+0x3c>
 800c4b0:	692b      	ldr	r3, [r5, #16]
 800c4b2:	b9eb      	cbnz	r3, 800c4f0 <_vfiprintf_r+0x78>
 800c4b4:	4629      	mov	r1, r5
 800c4b6:	4630      	mov	r0, r6
 800c4b8:	f7fd fd06 	bl	8009ec8 <__swsetup_r>
 800c4bc:	b1c0      	cbz	r0, 800c4f0 <_vfiprintf_r+0x78>
 800c4be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4c0:	07dc      	lsls	r4, r3, #31
 800c4c2:	d50e      	bpl.n	800c4e2 <_vfiprintf_r+0x6a>
 800c4c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c4c8:	b01d      	add	sp, #116	; 0x74
 800c4ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4ce:	4b7b      	ldr	r3, [pc, #492]	; (800c6bc <_vfiprintf_r+0x244>)
 800c4d0:	429d      	cmp	r5, r3
 800c4d2:	d101      	bne.n	800c4d8 <_vfiprintf_r+0x60>
 800c4d4:	68b5      	ldr	r5, [r6, #8]
 800c4d6:	e7df      	b.n	800c498 <_vfiprintf_r+0x20>
 800c4d8:	4b79      	ldr	r3, [pc, #484]	; (800c6c0 <_vfiprintf_r+0x248>)
 800c4da:	429d      	cmp	r5, r3
 800c4dc:	bf08      	it	eq
 800c4de:	68f5      	ldreq	r5, [r6, #12]
 800c4e0:	e7da      	b.n	800c498 <_vfiprintf_r+0x20>
 800c4e2:	89ab      	ldrh	r3, [r5, #12]
 800c4e4:	0598      	lsls	r0, r3, #22
 800c4e6:	d4ed      	bmi.n	800c4c4 <_vfiprintf_r+0x4c>
 800c4e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c4ea:	f7ff f901 	bl	800b6f0 <__retarget_lock_release_recursive>
 800c4ee:	e7e9      	b.n	800c4c4 <_vfiprintf_r+0x4c>
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	9309      	str	r3, [sp, #36]	; 0x24
 800c4f4:	2320      	movs	r3, #32
 800c4f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c4fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4fe:	2330      	movs	r3, #48	; 0x30
 800c500:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c6c4 <_vfiprintf_r+0x24c>
 800c504:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c508:	f04f 0901 	mov.w	r9, #1
 800c50c:	4623      	mov	r3, r4
 800c50e:	469a      	mov	sl, r3
 800c510:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c514:	b10a      	cbz	r2, 800c51a <_vfiprintf_r+0xa2>
 800c516:	2a25      	cmp	r2, #37	; 0x25
 800c518:	d1f9      	bne.n	800c50e <_vfiprintf_r+0x96>
 800c51a:	ebba 0b04 	subs.w	fp, sl, r4
 800c51e:	d00b      	beq.n	800c538 <_vfiprintf_r+0xc0>
 800c520:	465b      	mov	r3, fp
 800c522:	4622      	mov	r2, r4
 800c524:	4629      	mov	r1, r5
 800c526:	4630      	mov	r0, r6
 800c528:	f7ff ff93 	bl	800c452 <__sfputs_r>
 800c52c:	3001      	adds	r0, #1
 800c52e:	f000 80aa 	beq.w	800c686 <_vfiprintf_r+0x20e>
 800c532:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c534:	445a      	add	r2, fp
 800c536:	9209      	str	r2, [sp, #36]	; 0x24
 800c538:	f89a 3000 	ldrb.w	r3, [sl]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	f000 80a2 	beq.w	800c686 <_vfiprintf_r+0x20e>
 800c542:	2300      	movs	r3, #0
 800c544:	f04f 32ff 	mov.w	r2, #4294967295
 800c548:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c54c:	f10a 0a01 	add.w	sl, sl, #1
 800c550:	9304      	str	r3, [sp, #16]
 800c552:	9307      	str	r3, [sp, #28]
 800c554:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c558:	931a      	str	r3, [sp, #104]	; 0x68
 800c55a:	4654      	mov	r4, sl
 800c55c:	2205      	movs	r2, #5
 800c55e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c562:	4858      	ldr	r0, [pc, #352]	; (800c6c4 <_vfiprintf_r+0x24c>)
 800c564:	f7f3 fe3c 	bl	80001e0 <memchr>
 800c568:	9a04      	ldr	r2, [sp, #16]
 800c56a:	b9d8      	cbnz	r0, 800c5a4 <_vfiprintf_r+0x12c>
 800c56c:	06d1      	lsls	r1, r2, #27
 800c56e:	bf44      	itt	mi
 800c570:	2320      	movmi	r3, #32
 800c572:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c576:	0713      	lsls	r3, r2, #28
 800c578:	bf44      	itt	mi
 800c57a:	232b      	movmi	r3, #43	; 0x2b
 800c57c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c580:	f89a 3000 	ldrb.w	r3, [sl]
 800c584:	2b2a      	cmp	r3, #42	; 0x2a
 800c586:	d015      	beq.n	800c5b4 <_vfiprintf_r+0x13c>
 800c588:	9a07      	ldr	r2, [sp, #28]
 800c58a:	4654      	mov	r4, sl
 800c58c:	2000      	movs	r0, #0
 800c58e:	f04f 0c0a 	mov.w	ip, #10
 800c592:	4621      	mov	r1, r4
 800c594:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c598:	3b30      	subs	r3, #48	; 0x30
 800c59a:	2b09      	cmp	r3, #9
 800c59c:	d94e      	bls.n	800c63c <_vfiprintf_r+0x1c4>
 800c59e:	b1b0      	cbz	r0, 800c5ce <_vfiprintf_r+0x156>
 800c5a0:	9207      	str	r2, [sp, #28]
 800c5a2:	e014      	b.n	800c5ce <_vfiprintf_r+0x156>
 800c5a4:	eba0 0308 	sub.w	r3, r0, r8
 800c5a8:	fa09 f303 	lsl.w	r3, r9, r3
 800c5ac:	4313      	orrs	r3, r2
 800c5ae:	9304      	str	r3, [sp, #16]
 800c5b0:	46a2      	mov	sl, r4
 800c5b2:	e7d2      	b.n	800c55a <_vfiprintf_r+0xe2>
 800c5b4:	9b03      	ldr	r3, [sp, #12]
 800c5b6:	1d19      	adds	r1, r3, #4
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	9103      	str	r1, [sp, #12]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	bfbb      	ittet	lt
 800c5c0:	425b      	neglt	r3, r3
 800c5c2:	f042 0202 	orrlt.w	r2, r2, #2
 800c5c6:	9307      	strge	r3, [sp, #28]
 800c5c8:	9307      	strlt	r3, [sp, #28]
 800c5ca:	bfb8      	it	lt
 800c5cc:	9204      	strlt	r2, [sp, #16]
 800c5ce:	7823      	ldrb	r3, [r4, #0]
 800c5d0:	2b2e      	cmp	r3, #46	; 0x2e
 800c5d2:	d10c      	bne.n	800c5ee <_vfiprintf_r+0x176>
 800c5d4:	7863      	ldrb	r3, [r4, #1]
 800c5d6:	2b2a      	cmp	r3, #42	; 0x2a
 800c5d8:	d135      	bne.n	800c646 <_vfiprintf_r+0x1ce>
 800c5da:	9b03      	ldr	r3, [sp, #12]
 800c5dc:	1d1a      	adds	r2, r3, #4
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	9203      	str	r2, [sp, #12]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	bfb8      	it	lt
 800c5e6:	f04f 33ff 	movlt.w	r3, #4294967295
 800c5ea:	3402      	adds	r4, #2
 800c5ec:	9305      	str	r3, [sp, #20]
 800c5ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c6d4 <_vfiprintf_r+0x25c>
 800c5f2:	7821      	ldrb	r1, [r4, #0]
 800c5f4:	2203      	movs	r2, #3
 800c5f6:	4650      	mov	r0, sl
 800c5f8:	f7f3 fdf2 	bl	80001e0 <memchr>
 800c5fc:	b140      	cbz	r0, 800c610 <_vfiprintf_r+0x198>
 800c5fe:	2340      	movs	r3, #64	; 0x40
 800c600:	eba0 000a 	sub.w	r0, r0, sl
 800c604:	fa03 f000 	lsl.w	r0, r3, r0
 800c608:	9b04      	ldr	r3, [sp, #16]
 800c60a:	4303      	orrs	r3, r0
 800c60c:	3401      	adds	r4, #1
 800c60e:	9304      	str	r3, [sp, #16]
 800c610:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c614:	482c      	ldr	r0, [pc, #176]	; (800c6c8 <_vfiprintf_r+0x250>)
 800c616:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c61a:	2206      	movs	r2, #6
 800c61c:	f7f3 fde0 	bl	80001e0 <memchr>
 800c620:	2800      	cmp	r0, #0
 800c622:	d03f      	beq.n	800c6a4 <_vfiprintf_r+0x22c>
 800c624:	4b29      	ldr	r3, [pc, #164]	; (800c6cc <_vfiprintf_r+0x254>)
 800c626:	bb1b      	cbnz	r3, 800c670 <_vfiprintf_r+0x1f8>
 800c628:	9b03      	ldr	r3, [sp, #12]
 800c62a:	3307      	adds	r3, #7
 800c62c:	f023 0307 	bic.w	r3, r3, #7
 800c630:	3308      	adds	r3, #8
 800c632:	9303      	str	r3, [sp, #12]
 800c634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c636:	443b      	add	r3, r7
 800c638:	9309      	str	r3, [sp, #36]	; 0x24
 800c63a:	e767      	b.n	800c50c <_vfiprintf_r+0x94>
 800c63c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c640:	460c      	mov	r4, r1
 800c642:	2001      	movs	r0, #1
 800c644:	e7a5      	b.n	800c592 <_vfiprintf_r+0x11a>
 800c646:	2300      	movs	r3, #0
 800c648:	3401      	adds	r4, #1
 800c64a:	9305      	str	r3, [sp, #20]
 800c64c:	4619      	mov	r1, r3
 800c64e:	f04f 0c0a 	mov.w	ip, #10
 800c652:	4620      	mov	r0, r4
 800c654:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c658:	3a30      	subs	r2, #48	; 0x30
 800c65a:	2a09      	cmp	r2, #9
 800c65c:	d903      	bls.n	800c666 <_vfiprintf_r+0x1ee>
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d0c5      	beq.n	800c5ee <_vfiprintf_r+0x176>
 800c662:	9105      	str	r1, [sp, #20]
 800c664:	e7c3      	b.n	800c5ee <_vfiprintf_r+0x176>
 800c666:	fb0c 2101 	mla	r1, ip, r1, r2
 800c66a:	4604      	mov	r4, r0
 800c66c:	2301      	movs	r3, #1
 800c66e:	e7f0      	b.n	800c652 <_vfiprintf_r+0x1da>
 800c670:	ab03      	add	r3, sp, #12
 800c672:	9300      	str	r3, [sp, #0]
 800c674:	462a      	mov	r2, r5
 800c676:	4b16      	ldr	r3, [pc, #88]	; (800c6d0 <_vfiprintf_r+0x258>)
 800c678:	a904      	add	r1, sp, #16
 800c67a:	4630      	mov	r0, r6
 800c67c:	f7fb fdb2 	bl	80081e4 <_printf_float>
 800c680:	4607      	mov	r7, r0
 800c682:	1c78      	adds	r0, r7, #1
 800c684:	d1d6      	bne.n	800c634 <_vfiprintf_r+0x1bc>
 800c686:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c688:	07d9      	lsls	r1, r3, #31
 800c68a:	d405      	bmi.n	800c698 <_vfiprintf_r+0x220>
 800c68c:	89ab      	ldrh	r3, [r5, #12]
 800c68e:	059a      	lsls	r2, r3, #22
 800c690:	d402      	bmi.n	800c698 <_vfiprintf_r+0x220>
 800c692:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c694:	f7ff f82c 	bl	800b6f0 <__retarget_lock_release_recursive>
 800c698:	89ab      	ldrh	r3, [r5, #12]
 800c69a:	065b      	lsls	r3, r3, #25
 800c69c:	f53f af12 	bmi.w	800c4c4 <_vfiprintf_r+0x4c>
 800c6a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c6a2:	e711      	b.n	800c4c8 <_vfiprintf_r+0x50>
 800c6a4:	ab03      	add	r3, sp, #12
 800c6a6:	9300      	str	r3, [sp, #0]
 800c6a8:	462a      	mov	r2, r5
 800c6aa:	4b09      	ldr	r3, [pc, #36]	; (800c6d0 <_vfiprintf_r+0x258>)
 800c6ac:	a904      	add	r1, sp, #16
 800c6ae:	4630      	mov	r0, r6
 800c6b0:	f7fc f83c 	bl	800872c <_printf_i>
 800c6b4:	e7e4      	b.n	800c680 <_vfiprintf_r+0x208>
 800c6b6:	bf00      	nop
 800c6b8:	0800f438 	.word	0x0800f438
 800c6bc:	0800f458 	.word	0x0800f458
 800c6c0:	0800f418 	.word	0x0800f418
 800c6c4:	0800f654 	.word	0x0800f654
 800c6c8:	0800f65e 	.word	0x0800f65e
 800c6cc:	080081e5 	.word	0x080081e5
 800c6d0:	0800c453 	.word	0x0800c453
 800c6d4:	0800f65a 	.word	0x0800f65a

0800c6d8 <nan>:
 800c6d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c6e0 <nan+0x8>
 800c6dc:	4770      	bx	lr
 800c6de:	bf00      	nop
 800c6e0:	00000000 	.word	0x00000000
 800c6e4:	7ff80000 	.word	0x7ff80000

0800c6e8 <__sread>:
 800c6e8:	b510      	push	{r4, lr}
 800c6ea:	460c      	mov	r4, r1
 800c6ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6f0:	f000 f922 	bl	800c938 <_read_r>
 800c6f4:	2800      	cmp	r0, #0
 800c6f6:	bfab      	itete	ge
 800c6f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c6fa:	89a3      	ldrhlt	r3, [r4, #12]
 800c6fc:	181b      	addge	r3, r3, r0
 800c6fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c702:	bfac      	ite	ge
 800c704:	6563      	strge	r3, [r4, #84]	; 0x54
 800c706:	81a3      	strhlt	r3, [r4, #12]
 800c708:	bd10      	pop	{r4, pc}

0800c70a <__swrite>:
 800c70a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c70e:	461f      	mov	r7, r3
 800c710:	898b      	ldrh	r3, [r1, #12]
 800c712:	05db      	lsls	r3, r3, #23
 800c714:	4605      	mov	r5, r0
 800c716:	460c      	mov	r4, r1
 800c718:	4616      	mov	r6, r2
 800c71a:	d505      	bpl.n	800c728 <__swrite+0x1e>
 800c71c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c720:	2302      	movs	r3, #2
 800c722:	2200      	movs	r2, #0
 800c724:	f000 f8b6 	bl	800c894 <_lseek_r>
 800c728:	89a3      	ldrh	r3, [r4, #12]
 800c72a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c72e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c732:	81a3      	strh	r3, [r4, #12]
 800c734:	4632      	mov	r2, r6
 800c736:	463b      	mov	r3, r7
 800c738:	4628      	mov	r0, r5
 800c73a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c73e:	f000 b835 	b.w	800c7ac <_write_r>

0800c742 <__sseek>:
 800c742:	b510      	push	{r4, lr}
 800c744:	460c      	mov	r4, r1
 800c746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c74a:	f000 f8a3 	bl	800c894 <_lseek_r>
 800c74e:	1c43      	adds	r3, r0, #1
 800c750:	89a3      	ldrh	r3, [r4, #12]
 800c752:	bf15      	itete	ne
 800c754:	6560      	strne	r0, [r4, #84]	; 0x54
 800c756:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c75a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c75e:	81a3      	strheq	r3, [r4, #12]
 800c760:	bf18      	it	ne
 800c762:	81a3      	strhne	r3, [r4, #12]
 800c764:	bd10      	pop	{r4, pc}

0800c766 <__sclose>:
 800c766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c76a:	f000 b84f 	b.w	800c80c <_close_r>

0800c76e <strncmp>:
 800c76e:	b510      	push	{r4, lr}
 800c770:	b16a      	cbz	r2, 800c78e <strncmp+0x20>
 800c772:	3901      	subs	r1, #1
 800c774:	1884      	adds	r4, r0, r2
 800c776:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c77a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c77e:	4293      	cmp	r3, r2
 800c780:	d103      	bne.n	800c78a <strncmp+0x1c>
 800c782:	42a0      	cmp	r0, r4
 800c784:	d001      	beq.n	800c78a <strncmp+0x1c>
 800c786:	2b00      	cmp	r3, #0
 800c788:	d1f5      	bne.n	800c776 <strncmp+0x8>
 800c78a:	1a98      	subs	r0, r3, r2
 800c78c:	bd10      	pop	{r4, pc}
 800c78e:	4610      	mov	r0, r2
 800c790:	e7fc      	b.n	800c78c <strncmp+0x1e>

0800c792 <__ascii_wctomb>:
 800c792:	b149      	cbz	r1, 800c7a8 <__ascii_wctomb+0x16>
 800c794:	2aff      	cmp	r2, #255	; 0xff
 800c796:	bf85      	ittet	hi
 800c798:	238a      	movhi	r3, #138	; 0x8a
 800c79a:	6003      	strhi	r3, [r0, #0]
 800c79c:	700a      	strbls	r2, [r1, #0]
 800c79e:	f04f 30ff 	movhi.w	r0, #4294967295
 800c7a2:	bf98      	it	ls
 800c7a4:	2001      	movls	r0, #1
 800c7a6:	4770      	bx	lr
 800c7a8:	4608      	mov	r0, r1
 800c7aa:	4770      	bx	lr

0800c7ac <_write_r>:
 800c7ac:	b538      	push	{r3, r4, r5, lr}
 800c7ae:	4d07      	ldr	r5, [pc, #28]	; (800c7cc <_write_r+0x20>)
 800c7b0:	4604      	mov	r4, r0
 800c7b2:	4608      	mov	r0, r1
 800c7b4:	4611      	mov	r1, r2
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	602a      	str	r2, [r5, #0]
 800c7ba:	461a      	mov	r2, r3
 800c7bc:	f7f4 fc16 	bl	8000fec <_write>
 800c7c0:	1c43      	adds	r3, r0, #1
 800c7c2:	d102      	bne.n	800c7ca <_write_r+0x1e>
 800c7c4:	682b      	ldr	r3, [r5, #0]
 800c7c6:	b103      	cbz	r3, 800c7ca <_write_r+0x1e>
 800c7c8:	6023      	str	r3, [r4, #0]
 800c7ca:	bd38      	pop	{r3, r4, r5, pc}
 800c7cc:	200027c8 	.word	0x200027c8

0800c7d0 <__assert_func>:
 800c7d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c7d2:	4614      	mov	r4, r2
 800c7d4:	461a      	mov	r2, r3
 800c7d6:	4b09      	ldr	r3, [pc, #36]	; (800c7fc <__assert_func+0x2c>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	4605      	mov	r5, r0
 800c7dc:	68d8      	ldr	r0, [r3, #12]
 800c7de:	b14c      	cbz	r4, 800c7f4 <__assert_func+0x24>
 800c7e0:	4b07      	ldr	r3, [pc, #28]	; (800c800 <__assert_func+0x30>)
 800c7e2:	9100      	str	r1, [sp, #0]
 800c7e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c7e8:	4906      	ldr	r1, [pc, #24]	; (800c804 <__assert_func+0x34>)
 800c7ea:	462b      	mov	r3, r5
 800c7ec:	f000 f81e 	bl	800c82c <fiprintf>
 800c7f0:	f000 f8b4 	bl	800c95c <abort>
 800c7f4:	4b04      	ldr	r3, [pc, #16]	; (800c808 <__assert_func+0x38>)
 800c7f6:	461c      	mov	r4, r3
 800c7f8:	e7f3      	b.n	800c7e2 <__assert_func+0x12>
 800c7fa:	bf00      	nop
 800c7fc:	20000030 	.word	0x20000030
 800c800:	0800f665 	.word	0x0800f665
 800c804:	0800f672 	.word	0x0800f672
 800c808:	0800f6a0 	.word	0x0800f6a0

0800c80c <_close_r>:
 800c80c:	b538      	push	{r3, r4, r5, lr}
 800c80e:	4d06      	ldr	r5, [pc, #24]	; (800c828 <_close_r+0x1c>)
 800c810:	2300      	movs	r3, #0
 800c812:	4604      	mov	r4, r0
 800c814:	4608      	mov	r0, r1
 800c816:	602b      	str	r3, [r5, #0]
 800c818:	f7f5 f8a9 	bl	800196e <_close>
 800c81c:	1c43      	adds	r3, r0, #1
 800c81e:	d102      	bne.n	800c826 <_close_r+0x1a>
 800c820:	682b      	ldr	r3, [r5, #0]
 800c822:	b103      	cbz	r3, 800c826 <_close_r+0x1a>
 800c824:	6023      	str	r3, [r4, #0]
 800c826:	bd38      	pop	{r3, r4, r5, pc}
 800c828:	200027c8 	.word	0x200027c8

0800c82c <fiprintf>:
 800c82c:	b40e      	push	{r1, r2, r3}
 800c82e:	b503      	push	{r0, r1, lr}
 800c830:	4601      	mov	r1, r0
 800c832:	ab03      	add	r3, sp, #12
 800c834:	4805      	ldr	r0, [pc, #20]	; (800c84c <fiprintf+0x20>)
 800c836:	f853 2b04 	ldr.w	r2, [r3], #4
 800c83a:	6800      	ldr	r0, [r0, #0]
 800c83c:	9301      	str	r3, [sp, #4]
 800c83e:	f7ff fe1b 	bl	800c478 <_vfiprintf_r>
 800c842:	b002      	add	sp, #8
 800c844:	f85d eb04 	ldr.w	lr, [sp], #4
 800c848:	b003      	add	sp, #12
 800c84a:	4770      	bx	lr
 800c84c:	20000030 	.word	0x20000030

0800c850 <_fstat_r>:
 800c850:	b538      	push	{r3, r4, r5, lr}
 800c852:	4d07      	ldr	r5, [pc, #28]	; (800c870 <_fstat_r+0x20>)
 800c854:	2300      	movs	r3, #0
 800c856:	4604      	mov	r4, r0
 800c858:	4608      	mov	r0, r1
 800c85a:	4611      	mov	r1, r2
 800c85c:	602b      	str	r3, [r5, #0]
 800c85e:	f7f5 f892 	bl	8001986 <_fstat>
 800c862:	1c43      	adds	r3, r0, #1
 800c864:	d102      	bne.n	800c86c <_fstat_r+0x1c>
 800c866:	682b      	ldr	r3, [r5, #0]
 800c868:	b103      	cbz	r3, 800c86c <_fstat_r+0x1c>
 800c86a:	6023      	str	r3, [r4, #0]
 800c86c:	bd38      	pop	{r3, r4, r5, pc}
 800c86e:	bf00      	nop
 800c870:	200027c8 	.word	0x200027c8

0800c874 <_isatty_r>:
 800c874:	b538      	push	{r3, r4, r5, lr}
 800c876:	4d06      	ldr	r5, [pc, #24]	; (800c890 <_isatty_r+0x1c>)
 800c878:	2300      	movs	r3, #0
 800c87a:	4604      	mov	r4, r0
 800c87c:	4608      	mov	r0, r1
 800c87e:	602b      	str	r3, [r5, #0]
 800c880:	f7f5 f891 	bl	80019a6 <_isatty>
 800c884:	1c43      	adds	r3, r0, #1
 800c886:	d102      	bne.n	800c88e <_isatty_r+0x1a>
 800c888:	682b      	ldr	r3, [r5, #0]
 800c88a:	b103      	cbz	r3, 800c88e <_isatty_r+0x1a>
 800c88c:	6023      	str	r3, [r4, #0]
 800c88e:	bd38      	pop	{r3, r4, r5, pc}
 800c890:	200027c8 	.word	0x200027c8

0800c894 <_lseek_r>:
 800c894:	b538      	push	{r3, r4, r5, lr}
 800c896:	4d07      	ldr	r5, [pc, #28]	; (800c8b4 <_lseek_r+0x20>)
 800c898:	4604      	mov	r4, r0
 800c89a:	4608      	mov	r0, r1
 800c89c:	4611      	mov	r1, r2
 800c89e:	2200      	movs	r2, #0
 800c8a0:	602a      	str	r2, [r5, #0]
 800c8a2:	461a      	mov	r2, r3
 800c8a4:	f7f5 f88a 	bl	80019bc <_lseek>
 800c8a8:	1c43      	adds	r3, r0, #1
 800c8aa:	d102      	bne.n	800c8b2 <_lseek_r+0x1e>
 800c8ac:	682b      	ldr	r3, [r5, #0]
 800c8ae:	b103      	cbz	r3, 800c8b2 <_lseek_r+0x1e>
 800c8b0:	6023      	str	r3, [r4, #0]
 800c8b2:	bd38      	pop	{r3, r4, r5, pc}
 800c8b4:	200027c8 	.word	0x200027c8

0800c8b8 <memmove>:
 800c8b8:	4288      	cmp	r0, r1
 800c8ba:	b510      	push	{r4, lr}
 800c8bc:	eb01 0402 	add.w	r4, r1, r2
 800c8c0:	d902      	bls.n	800c8c8 <memmove+0x10>
 800c8c2:	4284      	cmp	r4, r0
 800c8c4:	4623      	mov	r3, r4
 800c8c6:	d807      	bhi.n	800c8d8 <memmove+0x20>
 800c8c8:	1e43      	subs	r3, r0, #1
 800c8ca:	42a1      	cmp	r1, r4
 800c8cc:	d008      	beq.n	800c8e0 <memmove+0x28>
 800c8ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c8d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c8d6:	e7f8      	b.n	800c8ca <memmove+0x12>
 800c8d8:	4402      	add	r2, r0
 800c8da:	4601      	mov	r1, r0
 800c8dc:	428a      	cmp	r2, r1
 800c8de:	d100      	bne.n	800c8e2 <memmove+0x2a>
 800c8e0:	bd10      	pop	{r4, pc}
 800c8e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c8e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c8ea:	e7f7      	b.n	800c8dc <memmove+0x24>

0800c8ec <_realloc_r>:
 800c8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ee:	4607      	mov	r7, r0
 800c8f0:	4614      	mov	r4, r2
 800c8f2:	460e      	mov	r6, r1
 800c8f4:	b921      	cbnz	r1, 800c900 <_realloc_r+0x14>
 800c8f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c8fa:	4611      	mov	r1, r2
 800c8fc:	f7fb bb78 	b.w	8007ff0 <_malloc_r>
 800c900:	b922      	cbnz	r2, 800c90c <_realloc_r+0x20>
 800c902:	f7fb fb25 	bl	8007f50 <_free_r>
 800c906:	4625      	mov	r5, r4
 800c908:	4628      	mov	r0, r5
 800c90a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c90c:	f000 f82d 	bl	800c96a <_malloc_usable_size_r>
 800c910:	42a0      	cmp	r0, r4
 800c912:	d20f      	bcs.n	800c934 <_realloc_r+0x48>
 800c914:	4621      	mov	r1, r4
 800c916:	4638      	mov	r0, r7
 800c918:	f7fb fb6a 	bl	8007ff0 <_malloc_r>
 800c91c:	4605      	mov	r5, r0
 800c91e:	2800      	cmp	r0, #0
 800c920:	d0f2      	beq.n	800c908 <_realloc_r+0x1c>
 800c922:	4631      	mov	r1, r6
 800c924:	4622      	mov	r2, r4
 800c926:	f7fb faed 	bl	8007f04 <memcpy>
 800c92a:	4631      	mov	r1, r6
 800c92c:	4638      	mov	r0, r7
 800c92e:	f7fb fb0f 	bl	8007f50 <_free_r>
 800c932:	e7e9      	b.n	800c908 <_realloc_r+0x1c>
 800c934:	4635      	mov	r5, r6
 800c936:	e7e7      	b.n	800c908 <_realloc_r+0x1c>

0800c938 <_read_r>:
 800c938:	b538      	push	{r3, r4, r5, lr}
 800c93a:	4d07      	ldr	r5, [pc, #28]	; (800c958 <_read_r+0x20>)
 800c93c:	4604      	mov	r4, r0
 800c93e:	4608      	mov	r0, r1
 800c940:	4611      	mov	r1, r2
 800c942:	2200      	movs	r2, #0
 800c944:	602a      	str	r2, [r5, #0]
 800c946:	461a      	mov	r2, r3
 800c948:	f7f4 fff4 	bl	8001934 <_read>
 800c94c:	1c43      	adds	r3, r0, #1
 800c94e:	d102      	bne.n	800c956 <_read_r+0x1e>
 800c950:	682b      	ldr	r3, [r5, #0]
 800c952:	b103      	cbz	r3, 800c956 <_read_r+0x1e>
 800c954:	6023      	str	r3, [r4, #0]
 800c956:	bd38      	pop	{r3, r4, r5, pc}
 800c958:	200027c8 	.word	0x200027c8

0800c95c <abort>:
 800c95c:	b508      	push	{r3, lr}
 800c95e:	2006      	movs	r0, #6
 800c960:	f000 f834 	bl	800c9cc <raise>
 800c964:	2001      	movs	r0, #1
 800c966:	f7f4 ffdb 	bl	8001920 <_exit>

0800c96a <_malloc_usable_size_r>:
 800c96a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c96e:	1f18      	subs	r0, r3, #4
 800c970:	2b00      	cmp	r3, #0
 800c972:	bfbc      	itt	lt
 800c974:	580b      	ldrlt	r3, [r1, r0]
 800c976:	18c0      	addlt	r0, r0, r3
 800c978:	4770      	bx	lr

0800c97a <_raise_r>:
 800c97a:	291f      	cmp	r1, #31
 800c97c:	b538      	push	{r3, r4, r5, lr}
 800c97e:	4604      	mov	r4, r0
 800c980:	460d      	mov	r5, r1
 800c982:	d904      	bls.n	800c98e <_raise_r+0x14>
 800c984:	2316      	movs	r3, #22
 800c986:	6003      	str	r3, [r0, #0]
 800c988:	f04f 30ff 	mov.w	r0, #4294967295
 800c98c:	bd38      	pop	{r3, r4, r5, pc}
 800c98e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c990:	b112      	cbz	r2, 800c998 <_raise_r+0x1e>
 800c992:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c996:	b94b      	cbnz	r3, 800c9ac <_raise_r+0x32>
 800c998:	4620      	mov	r0, r4
 800c99a:	f000 f831 	bl	800ca00 <_getpid_r>
 800c99e:	462a      	mov	r2, r5
 800c9a0:	4601      	mov	r1, r0
 800c9a2:	4620      	mov	r0, r4
 800c9a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c9a8:	f000 b818 	b.w	800c9dc <_kill_r>
 800c9ac:	2b01      	cmp	r3, #1
 800c9ae:	d00a      	beq.n	800c9c6 <_raise_r+0x4c>
 800c9b0:	1c59      	adds	r1, r3, #1
 800c9b2:	d103      	bne.n	800c9bc <_raise_r+0x42>
 800c9b4:	2316      	movs	r3, #22
 800c9b6:	6003      	str	r3, [r0, #0]
 800c9b8:	2001      	movs	r0, #1
 800c9ba:	e7e7      	b.n	800c98c <_raise_r+0x12>
 800c9bc:	2400      	movs	r4, #0
 800c9be:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c9c2:	4628      	mov	r0, r5
 800c9c4:	4798      	blx	r3
 800c9c6:	2000      	movs	r0, #0
 800c9c8:	e7e0      	b.n	800c98c <_raise_r+0x12>
	...

0800c9cc <raise>:
 800c9cc:	4b02      	ldr	r3, [pc, #8]	; (800c9d8 <raise+0xc>)
 800c9ce:	4601      	mov	r1, r0
 800c9d0:	6818      	ldr	r0, [r3, #0]
 800c9d2:	f7ff bfd2 	b.w	800c97a <_raise_r>
 800c9d6:	bf00      	nop
 800c9d8:	20000030 	.word	0x20000030

0800c9dc <_kill_r>:
 800c9dc:	b538      	push	{r3, r4, r5, lr}
 800c9de:	4d07      	ldr	r5, [pc, #28]	; (800c9fc <_kill_r+0x20>)
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	4604      	mov	r4, r0
 800c9e4:	4608      	mov	r0, r1
 800c9e6:	4611      	mov	r1, r2
 800c9e8:	602b      	str	r3, [r5, #0]
 800c9ea:	f7f4 ff89 	bl	8001900 <_kill>
 800c9ee:	1c43      	adds	r3, r0, #1
 800c9f0:	d102      	bne.n	800c9f8 <_kill_r+0x1c>
 800c9f2:	682b      	ldr	r3, [r5, #0]
 800c9f4:	b103      	cbz	r3, 800c9f8 <_kill_r+0x1c>
 800c9f6:	6023      	str	r3, [r4, #0]
 800c9f8:	bd38      	pop	{r3, r4, r5, pc}
 800c9fa:	bf00      	nop
 800c9fc:	200027c8 	.word	0x200027c8

0800ca00 <_getpid_r>:
 800ca00:	f7f4 bf76 	b.w	80018f0 <_getpid>

0800ca04 <pow>:
 800ca04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca08:	ec59 8b10 	vmov	r8, r9, d0
 800ca0c:	ec57 6b11 	vmov	r6, r7, d1
 800ca10:	f000 f8a6 	bl	800cb60 <__ieee754_pow>
 800ca14:	4b4e      	ldr	r3, [pc, #312]	; (800cb50 <pow+0x14c>)
 800ca16:	f993 3000 	ldrsb.w	r3, [r3]
 800ca1a:	3301      	adds	r3, #1
 800ca1c:	ec55 4b10 	vmov	r4, r5, d0
 800ca20:	d015      	beq.n	800ca4e <pow+0x4a>
 800ca22:	4632      	mov	r2, r6
 800ca24:	463b      	mov	r3, r7
 800ca26:	4630      	mov	r0, r6
 800ca28:	4639      	mov	r1, r7
 800ca2a:	f7f4 f87f 	bl	8000b2c <__aeabi_dcmpun>
 800ca2e:	b970      	cbnz	r0, 800ca4e <pow+0x4a>
 800ca30:	4642      	mov	r2, r8
 800ca32:	464b      	mov	r3, r9
 800ca34:	4640      	mov	r0, r8
 800ca36:	4649      	mov	r1, r9
 800ca38:	f7f4 f878 	bl	8000b2c <__aeabi_dcmpun>
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	2300      	movs	r3, #0
 800ca40:	b148      	cbz	r0, 800ca56 <pow+0x52>
 800ca42:	4630      	mov	r0, r6
 800ca44:	4639      	mov	r1, r7
 800ca46:	f7f4 f83f 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca4a:	2800      	cmp	r0, #0
 800ca4c:	d17d      	bne.n	800cb4a <pow+0x146>
 800ca4e:	ec45 4b10 	vmov	d0, r4, r5
 800ca52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca56:	4640      	mov	r0, r8
 800ca58:	4649      	mov	r1, r9
 800ca5a:	f7f4 f835 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca5e:	b1e0      	cbz	r0, 800ca9a <pow+0x96>
 800ca60:	2200      	movs	r2, #0
 800ca62:	2300      	movs	r3, #0
 800ca64:	4630      	mov	r0, r6
 800ca66:	4639      	mov	r1, r7
 800ca68:	f7f4 f82e 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca6c:	2800      	cmp	r0, #0
 800ca6e:	d16c      	bne.n	800cb4a <pow+0x146>
 800ca70:	ec47 6b10 	vmov	d0, r6, r7
 800ca74:	f000 fe53 	bl	800d71e <finite>
 800ca78:	2800      	cmp	r0, #0
 800ca7a:	d0e8      	beq.n	800ca4e <pow+0x4a>
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	2300      	movs	r3, #0
 800ca80:	4630      	mov	r0, r6
 800ca82:	4639      	mov	r1, r7
 800ca84:	f7f4 f82a 	bl	8000adc <__aeabi_dcmplt>
 800ca88:	2800      	cmp	r0, #0
 800ca8a:	d0e0      	beq.n	800ca4e <pow+0x4a>
 800ca8c:	f7fb f9fa 	bl	8007e84 <__errno>
 800ca90:	2321      	movs	r3, #33	; 0x21
 800ca92:	6003      	str	r3, [r0, #0]
 800ca94:	2400      	movs	r4, #0
 800ca96:	4d2f      	ldr	r5, [pc, #188]	; (800cb54 <pow+0x150>)
 800ca98:	e7d9      	b.n	800ca4e <pow+0x4a>
 800ca9a:	ec45 4b10 	vmov	d0, r4, r5
 800ca9e:	f000 fe3e 	bl	800d71e <finite>
 800caa2:	bbb8      	cbnz	r0, 800cb14 <pow+0x110>
 800caa4:	ec49 8b10 	vmov	d0, r8, r9
 800caa8:	f000 fe39 	bl	800d71e <finite>
 800caac:	b390      	cbz	r0, 800cb14 <pow+0x110>
 800caae:	ec47 6b10 	vmov	d0, r6, r7
 800cab2:	f000 fe34 	bl	800d71e <finite>
 800cab6:	b368      	cbz	r0, 800cb14 <pow+0x110>
 800cab8:	4622      	mov	r2, r4
 800caba:	462b      	mov	r3, r5
 800cabc:	4620      	mov	r0, r4
 800cabe:	4629      	mov	r1, r5
 800cac0:	f7f4 f834 	bl	8000b2c <__aeabi_dcmpun>
 800cac4:	b160      	cbz	r0, 800cae0 <pow+0xdc>
 800cac6:	f7fb f9dd 	bl	8007e84 <__errno>
 800caca:	2321      	movs	r3, #33	; 0x21
 800cacc:	6003      	str	r3, [r0, #0]
 800cace:	2200      	movs	r2, #0
 800cad0:	2300      	movs	r3, #0
 800cad2:	4610      	mov	r0, r2
 800cad4:	4619      	mov	r1, r3
 800cad6:	f7f3 feb9 	bl	800084c <__aeabi_ddiv>
 800cada:	4604      	mov	r4, r0
 800cadc:	460d      	mov	r5, r1
 800cade:	e7b6      	b.n	800ca4e <pow+0x4a>
 800cae0:	f7fb f9d0 	bl	8007e84 <__errno>
 800cae4:	2322      	movs	r3, #34	; 0x22
 800cae6:	6003      	str	r3, [r0, #0]
 800cae8:	2200      	movs	r2, #0
 800caea:	2300      	movs	r3, #0
 800caec:	4640      	mov	r0, r8
 800caee:	4649      	mov	r1, r9
 800caf0:	f7f3 fff4 	bl	8000adc <__aeabi_dcmplt>
 800caf4:	2400      	movs	r4, #0
 800caf6:	b158      	cbz	r0, 800cb10 <pow+0x10c>
 800caf8:	ec47 6b10 	vmov	d0, r6, r7
 800cafc:	f000 fe1a 	bl	800d734 <rint>
 800cb00:	4632      	mov	r2, r6
 800cb02:	ec51 0b10 	vmov	r0, r1, d0
 800cb06:	463b      	mov	r3, r7
 800cb08:	f7f3 ffde 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb0c:	2800      	cmp	r0, #0
 800cb0e:	d0c2      	beq.n	800ca96 <pow+0x92>
 800cb10:	4d11      	ldr	r5, [pc, #68]	; (800cb58 <pow+0x154>)
 800cb12:	e79c      	b.n	800ca4e <pow+0x4a>
 800cb14:	2200      	movs	r2, #0
 800cb16:	2300      	movs	r3, #0
 800cb18:	4620      	mov	r0, r4
 800cb1a:	4629      	mov	r1, r5
 800cb1c:	f7f3 ffd4 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb20:	2800      	cmp	r0, #0
 800cb22:	d094      	beq.n	800ca4e <pow+0x4a>
 800cb24:	ec49 8b10 	vmov	d0, r8, r9
 800cb28:	f000 fdf9 	bl	800d71e <finite>
 800cb2c:	2800      	cmp	r0, #0
 800cb2e:	d08e      	beq.n	800ca4e <pow+0x4a>
 800cb30:	ec47 6b10 	vmov	d0, r6, r7
 800cb34:	f000 fdf3 	bl	800d71e <finite>
 800cb38:	2800      	cmp	r0, #0
 800cb3a:	d088      	beq.n	800ca4e <pow+0x4a>
 800cb3c:	f7fb f9a2 	bl	8007e84 <__errno>
 800cb40:	2322      	movs	r3, #34	; 0x22
 800cb42:	6003      	str	r3, [r0, #0]
 800cb44:	2400      	movs	r4, #0
 800cb46:	2500      	movs	r5, #0
 800cb48:	e781      	b.n	800ca4e <pow+0x4a>
 800cb4a:	4d04      	ldr	r5, [pc, #16]	; (800cb5c <pow+0x158>)
 800cb4c:	2400      	movs	r4, #0
 800cb4e:	e77e      	b.n	800ca4e <pow+0x4a>
 800cb50:	20000204 	.word	0x20000204
 800cb54:	fff00000 	.word	0xfff00000
 800cb58:	7ff00000 	.word	0x7ff00000
 800cb5c:	3ff00000 	.word	0x3ff00000

0800cb60 <__ieee754_pow>:
 800cb60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb64:	ed2d 8b06 	vpush	{d8-d10}
 800cb68:	b08d      	sub	sp, #52	; 0x34
 800cb6a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800cb6e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800cb72:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800cb76:	ea56 0100 	orrs.w	r1, r6, r0
 800cb7a:	ec53 2b10 	vmov	r2, r3, d0
 800cb7e:	f000 84d1 	beq.w	800d524 <__ieee754_pow+0x9c4>
 800cb82:	497f      	ldr	r1, [pc, #508]	; (800cd80 <__ieee754_pow+0x220>)
 800cb84:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800cb88:	428c      	cmp	r4, r1
 800cb8a:	ee10 8a10 	vmov	r8, s0
 800cb8e:	4699      	mov	r9, r3
 800cb90:	dc09      	bgt.n	800cba6 <__ieee754_pow+0x46>
 800cb92:	d103      	bne.n	800cb9c <__ieee754_pow+0x3c>
 800cb94:	b97a      	cbnz	r2, 800cbb6 <__ieee754_pow+0x56>
 800cb96:	42a6      	cmp	r6, r4
 800cb98:	dd02      	ble.n	800cba0 <__ieee754_pow+0x40>
 800cb9a:	e00c      	b.n	800cbb6 <__ieee754_pow+0x56>
 800cb9c:	428e      	cmp	r6, r1
 800cb9e:	dc02      	bgt.n	800cba6 <__ieee754_pow+0x46>
 800cba0:	428e      	cmp	r6, r1
 800cba2:	d110      	bne.n	800cbc6 <__ieee754_pow+0x66>
 800cba4:	b178      	cbz	r0, 800cbc6 <__ieee754_pow+0x66>
 800cba6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800cbaa:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800cbae:	ea54 0308 	orrs.w	r3, r4, r8
 800cbb2:	f000 84b7 	beq.w	800d524 <__ieee754_pow+0x9c4>
 800cbb6:	4873      	ldr	r0, [pc, #460]	; (800cd84 <__ieee754_pow+0x224>)
 800cbb8:	b00d      	add	sp, #52	; 0x34
 800cbba:	ecbd 8b06 	vpop	{d8-d10}
 800cbbe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbc2:	f7ff bd89 	b.w	800c6d8 <nan>
 800cbc6:	f1b9 0f00 	cmp.w	r9, #0
 800cbca:	da36      	bge.n	800cc3a <__ieee754_pow+0xda>
 800cbcc:	496e      	ldr	r1, [pc, #440]	; (800cd88 <__ieee754_pow+0x228>)
 800cbce:	428e      	cmp	r6, r1
 800cbd0:	dc51      	bgt.n	800cc76 <__ieee754_pow+0x116>
 800cbd2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800cbd6:	428e      	cmp	r6, r1
 800cbd8:	f340 84af 	ble.w	800d53a <__ieee754_pow+0x9da>
 800cbdc:	1531      	asrs	r1, r6, #20
 800cbde:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800cbe2:	2914      	cmp	r1, #20
 800cbe4:	dd0f      	ble.n	800cc06 <__ieee754_pow+0xa6>
 800cbe6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800cbea:	fa20 fc01 	lsr.w	ip, r0, r1
 800cbee:	fa0c f101 	lsl.w	r1, ip, r1
 800cbf2:	4281      	cmp	r1, r0
 800cbf4:	f040 84a1 	bne.w	800d53a <__ieee754_pow+0x9da>
 800cbf8:	f00c 0c01 	and.w	ip, ip, #1
 800cbfc:	f1cc 0102 	rsb	r1, ip, #2
 800cc00:	9100      	str	r1, [sp, #0]
 800cc02:	b180      	cbz	r0, 800cc26 <__ieee754_pow+0xc6>
 800cc04:	e059      	b.n	800ccba <__ieee754_pow+0x15a>
 800cc06:	2800      	cmp	r0, #0
 800cc08:	d155      	bne.n	800ccb6 <__ieee754_pow+0x156>
 800cc0a:	f1c1 0114 	rsb	r1, r1, #20
 800cc0e:	fa46 fc01 	asr.w	ip, r6, r1
 800cc12:	fa0c f101 	lsl.w	r1, ip, r1
 800cc16:	42b1      	cmp	r1, r6
 800cc18:	f040 848c 	bne.w	800d534 <__ieee754_pow+0x9d4>
 800cc1c:	f00c 0c01 	and.w	ip, ip, #1
 800cc20:	f1cc 0102 	rsb	r1, ip, #2
 800cc24:	9100      	str	r1, [sp, #0]
 800cc26:	4959      	ldr	r1, [pc, #356]	; (800cd8c <__ieee754_pow+0x22c>)
 800cc28:	428e      	cmp	r6, r1
 800cc2a:	d12d      	bne.n	800cc88 <__ieee754_pow+0x128>
 800cc2c:	2f00      	cmp	r7, #0
 800cc2e:	da79      	bge.n	800cd24 <__ieee754_pow+0x1c4>
 800cc30:	4956      	ldr	r1, [pc, #344]	; (800cd8c <__ieee754_pow+0x22c>)
 800cc32:	2000      	movs	r0, #0
 800cc34:	f7f3 fe0a 	bl	800084c <__aeabi_ddiv>
 800cc38:	e016      	b.n	800cc68 <__ieee754_pow+0x108>
 800cc3a:	2100      	movs	r1, #0
 800cc3c:	9100      	str	r1, [sp, #0]
 800cc3e:	2800      	cmp	r0, #0
 800cc40:	d13b      	bne.n	800ccba <__ieee754_pow+0x15a>
 800cc42:	494f      	ldr	r1, [pc, #316]	; (800cd80 <__ieee754_pow+0x220>)
 800cc44:	428e      	cmp	r6, r1
 800cc46:	d1ee      	bne.n	800cc26 <__ieee754_pow+0xc6>
 800cc48:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800cc4c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800cc50:	ea53 0308 	orrs.w	r3, r3, r8
 800cc54:	f000 8466 	beq.w	800d524 <__ieee754_pow+0x9c4>
 800cc58:	4b4d      	ldr	r3, [pc, #308]	; (800cd90 <__ieee754_pow+0x230>)
 800cc5a:	429c      	cmp	r4, r3
 800cc5c:	dd0d      	ble.n	800cc7a <__ieee754_pow+0x11a>
 800cc5e:	2f00      	cmp	r7, #0
 800cc60:	f280 8464 	bge.w	800d52c <__ieee754_pow+0x9cc>
 800cc64:	2000      	movs	r0, #0
 800cc66:	2100      	movs	r1, #0
 800cc68:	ec41 0b10 	vmov	d0, r0, r1
 800cc6c:	b00d      	add	sp, #52	; 0x34
 800cc6e:	ecbd 8b06 	vpop	{d8-d10}
 800cc72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc76:	2102      	movs	r1, #2
 800cc78:	e7e0      	b.n	800cc3c <__ieee754_pow+0xdc>
 800cc7a:	2f00      	cmp	r7, #0
 800cc7c:	daf2      	bge.n	800cc64 <__ieee754_pow+0x104>
 800cc7e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800cc82:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800cc86:	e7ef      	b.n	800cc68 <__ieee754_pow+0x108>
 800cc88:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800cc8c:	d104      	bne.n	800cc98 <__ieee754_pow+0x138>
 800cc8e:	4610      	mov	r0, r2
 800cc90:	4619      	mov	r1, r3
 800cc92:	f7f3 fcb1 	bl	80005f8 <__aeabi_dmul>
 800cc96:	e7e7      	b.n	800cc68 <__ieee754_pow+0x108>
 800cc98:	493e      	ldr	r1, [pc, #248]	; (800cd94 <__ieee754_pow+0x234>)
 800cc9a:	428f      	cmp	r7, r1
 800cc9c:	d10d      	bne.n	800ccba <__ieee754_pow+0x15a>
 800cc9e:	f1b9 0f00 	cmp.w	r9, #0
 800cca2:	db0a      	blt.n	800ccba <__ieee754_pow+0x15a>
 800cca4:	ec43 2b10 	vmov	d0, r2, r3
 800cca8:	b00d      	add	sp, #52	; 0x34
 800ccaa:	ecbd 8b06 	vpop	{d8-d10}
 800ccae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccb2:	f000 bc77 	b.w	800d5a4 <__ieee754_sqrt>
 800ccb6:	2100      	movs	r1, #0
 800ccb8:	9100      	str	r1, [sp, #0]
 800ccba:	ec43 2b10 	vmov	d0, r2, r3
 800ccbe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ccc2:	f000 fd23 	bl	800d70c <fabs>
 800ccc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ccca:	ec51 0b10 	vmov	r0, r1, d0
 800ccce:	f1b8 0f00 	cmp.w	r8, #0
 800ccd2:	d12a      	bne.n	800cd2a <__ieee754_pow+0x1ca>
 800ccd4:	b12c      	cbz	r4, 800cce2 <__ieee754_pow+0x182>
 800ccd6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800cd8c <__ieee754_pow+0x22c>
 800ccda:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800ccde:	45e6      	cmp	lr, ip
 800cce0:	d123      	bne.n	800cd2a <__ieee754_pow+0x1ca>
 800cce2:	2f00      	cmp	r7, #0
 800cce4:	da05      	bge.n	800ccf2 <__ieee754_pow+0x192>
 800cce6:	4602      	mov	r2, r0
 800cce8:	460b      	mov	r3, r1
 800ccea:	2000      	movs	r0, #0
 800ccec:	4927      	ldr	r1, [pc, #156]	; (800cd8c <__ieee754_pow+0x22c>)
 800ccee:	f7f3 fdad 	bl	800084c <__aeabi_ddiv>
 800ccf2:	f1b9 0f00 	cmp.w	r9, #0
 800ccf6:	dab7      	bge.n	800cc68 <__ieee754_pow+0x108>
 800ccf8:	9b00      	ldr	r3, [sp, #0]
 800ccfa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ccfe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800cd02:	4323      	orrs	r3, r4
 800cd04:	d108      	bne.n	800cd18 <__ieee754_pow+0x1b8>
 800cd06:	4602      	mov	r2, r0
 800cd08:	460b      	mov	r3, r1
 800cd0a:	4610      	mov	r0, r2
 800cd0c:	4619      	mov	r1, r3
 800cd0e:	f7f3 fabb 	bl	8000288 <__aeabi_dsub>
 800cd12:	4602      	mov	r2, r0
 800cd14:	460b      	mov	r3, r1
 800cd16:	e78d      	b.n	800cc34 <__ieee754_pow+0xd4>
 800cd18:	9b00      	ldr	r3, [sp, #0]
 800cd1a:	2b01      	cmp	r3, #1
 800cd1c:	d1a4      	bne.n	800cc68 <__ieee754_pow+0x108>
 800cd1e:	4602      	mov	r2, r0
 800cd20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cd24:	4610      	mov	r0, r2
 800cd26:	4619      	mov	r1, r3
 800cd28:	e79e      	b.n	800cc68 <__ieee754_pow+0x108>
 800cd2a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800cd2e:	f10c 35ff 	add.w	r5, ip, #4294967295
 800cd32:	950a      	str	r5, [sp, #40]	; 0x28
 800cd34:	9d00      	ldr	r5, [sp, #0]
 800cd36:	46ac      	mov	ip, r5
 800cd38:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800cd3a:	ea5c 0505 	orrs.w	r5, ip, r5
 800cd3e:	d0e4      	beq.n	800cd0a <__ieee754_pow+0x1aa>
 800cd40:	4b15      	ldr	r3, [pc, #84]	; (800cd98 <__ieee754_pow+0x238>)
 800cd42:	429e      	cmp	r6, r3
 800cd44:	f340 80fc 	ble.w	800cf40 <__ieee754_pow+0x3e0>
 800cd48:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800cd4c:	429e      	cmp	r6, r3
 800cd4e:	4b10      	ldr	r3, [pc, #64]	; (800cd90 <__ieee754_pow+0x230>)
 800cd50:	dd07      	ble.n	800cd62 <__ieee754_pow+0x202>
 800cd52:	429c      	cmp	r4, r3
 800cd54:	dc0a      	bgt.n	800cd6c <__ieee754_pow+0x20c>
 800cd56:	2f00      	cmp	r7, #0
 800cd58:	da84      	bge.n	800cc64 <__ieee754_pow+0x104>
 800cd5a:	a307      	add	r3, pc, #28	; (adr r3, 800cd78 <__ieee754_pow+0x218>)
 800cd5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd60:	e795      	b.n	800cc8e <__ieee754_pow+0x12e>
 800cd62:	429c      	cmp	r4, r3
 800cd64:	dbf7      	blt.n	800cd56 <__ieee754_pow+0x1f6>
 800cd66:	4b09      	ldr	r3, [pc, #36]	; (800cd8c <__ieee754_pow+0x22c>)
 800cd68:	429c      	cmp	r4, r3
 800cd6a:	dd17      	ble.n	800cd9c <__ieee754_pow+0x23c>
 800cd6c:	2f00      	cmp	r7, #0
 800cd6e:	dcf4      	bgt.n	800cd5a <__ieee754_pow+0x1fa>
 800cd70:	e778      	b.n	800cc64 <__ieee754_pow+0x104>
 800cd72:	bf00      	nop
 800cd74:	f3af 8000 	nop.w
 800cd78:	8800759c 	.word	0x8800759c
 800cd7c:	7e37e43c 	.word	0x7e37e43c
 800cd80:	7ff00000 	.word	0x7ff00000
 800cd84:	0800f6a0 	.word	0x0800f6a0
 800cd88:	433fffff 	.word	0x433fffff
 800cd8c:	3ff00000 	.word	0x3ff00000
 800cd90:	3fefffff 	.word	0x3fefffff
 800cd94:	3fe00000 	.word	0x3fe00000
 800cd98:	41e00000 	.word	0x41e00000
 800cd9c:	4b64      	ldr	r3, [pc, #400]	; (800cf30 <__ieee754_pow+0x3d0>)
 800cd9e:	2200      	movs	r2, #0
 800cda0:	f7f3 fa72 	bl	8000288 <__aeabi_dsub>
 800cda4:	a356      	add	r3, pc, #344	; (adr r3, 800cf00 <__ieee754_pow+0x3a0>)
 800cda6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdaa:	4604      	mov	r4, r0
 800cdac:	460d      	mov	r5, r1
 800cdae:	f7f3 fc23 	bl	80005f8 <__aeabi_dmul>
 800cdb2:	a355      	add	r3, pc, #340	; (adr r3, 800cf08 <__ieee754_pow+0x3a8>)
 800cdb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb8:	4606      	mov	r6, r0
 800cdba:	460f      	mov	r7, r1
 800cdbc:	4620      	mov	r0, r4
 800cdbe:	4629      	mov	r1, r5
 800cdc0:	f7f3 fc1a 	bl	80005f8 <__aeabi_dmul>
 800cdc4:	4b5b      	ldr	r3, [pc, #364]	; (800cf34 <__ieee754_pow+0x3d4>)
 800cdc6:	4682      	mov	sl, r0
 800cdc8:	468b      	mov	fp, r1
 800cdca:	2200      	movs	r2, #0
 800cdcc:	4620      	mov	r0, r4
 800cdce:	4629      	mov	r1, r5
 800cdd0:	f7f3 fc12 	bl	80005f8 <__aeabi_dmul>
 800cdd4:	4602      	mov	r2, r0
 800cdd6:	460b      	mov	r3, r1
 800cdd8:	a14d      	add	r1, pc, #308	; (adr r1, 800cf10 <__ieee754_pow+0x3b0>)
 800cdda:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cdde:	f7f3 fa53 	bl	8000288 <__aeabi_dsub>
 800cde2:	4622      	mov	r2, r4
 800cde4:	462b      	mov	r3, r5
 800cde6:	f7f3 fc07 	bl	80005f8 <__aeabi_dmul>
 800cdea:	4602      	mov	r2, r0
 800cdec:	460b      	mov	r3, r1
 800cdee:	2000      	movs	r0, #0
 800cdf0:	4951      	ldr	r1, [pc, #324]	; (800cf38 <__ieee754_pow+0x3d8>)
 800cdf2:	f7f3 fa49 	bl	8000288 <__aeabi_dsub>
 800cdf6:	4622      	mov	r2, r4
 800cdf8:	4680      	mov	r8, r0
 800cdfa:	4689      	mov	r9, r1
 800cdfc:	462b      	mov	r3, r5
 800cdfe:	4620      	mov	r0, r4
 800ce00:	4629      	mov	r1, r5
 800ce02:	f7f3 fbf9 	bl	80005f8 <__aeabi_dmul>
 800ce06:	4602      	mov	r2, r0
 800ce08:	460b      	mov	r3, r1
 800ce0a:	4640      	mov	r0, r8
 800ce0c:	4649      	mov	r1, r9
 800ce0e:	f7f3 fbf3 	bl	80005f8 <__aeabi_dmul>
 800ce12:	a341      	add	r3, pc, #260	; (adr r3, 800cf18 <__ieee754_pow+0x3b8>)
 800ce14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce18:	f7f3 fbee 	bl	80005f8 <__aeabi_dmul>
 800ce1c:	4602      	mov	r2, r0
 800ce1e:	460b      	mov	r3, r1
 800ce20:	4650      	mov	r0, sl
 800ce22:	4659      	mov	r1, fp
 800ce24:	f7f3 fa30 	bl	8000288 <__aeabi_dsub>
 800ce28:	4602      	mov	r2, r0
 800ce2a:	460b      	mov	r3, r1
 800ce2c:	4680      	mov	r8, r0
 800ce2e:	4689      	mov	r9, r1
 800ce30:	4630      	mov	r0, r6
 800ce32:	4639      	mov	r1, r7
 800ce34:	f7f3 fa2a 	bl	800028c <__adddf3>
 800ce38:	2400      	movs	r4, #0
 800ce3a:	4632      	mov	r2, r6
 800ce3c:	463b      	mov	r3, r7
 800ce3e:	4620      	mov	r0, r4
 800ce40:	460d      	mov	r5, r1
 800ce42:	f7f3 fa21 	bl	8000288 <__aeabi_dsub>
 800ce46:	4602      	mov	r2, r0
 800ce48:	460b      	mov	r3, r1
 800ce4a:	4640      	mov	r0, r8
 800ce4c:	4649      	mov	r1, r9
 800ce4e:	f7f3 fa1b 	bl	8000288 <__aeabi_dsub>
 800ce52:	9b00      	ldr	r3, [sp, #0]
 800ce54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce56:	3b01      	subs	r3, #1
 800ce58:	4313      	orrs	r3, r2
 800ce5a:	4682      	mov	sl, r0
 800ce5c:	468b      	mov	fp, r1
 800ce5e:	f040 81f1 	bne.w	800d244 <__ieee754_pow+0x6e4>
 800ce62:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800cf20 <__ieee754_pow+0x3c0>
 800ce66:	eeb0 8a47 	vmov.f32	s16, s14
 800ce6a:	eef0 8a67 	vmov.f32	s17, s15
 800ce6e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ce72:	2600      	movs	r6, #0
 800ce74:	4632      	mov	r2, r6
 800ce76:	463b      	mov	r3, r7
 800ce78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce7c:	f7f3 fa04 	bl	8000288 <__aeabi_dsub>
 800ce80:	4622      	mov	r2, r4
 800ce82:	462b      	mov	r3, r5
 800ce84:	f7f3 fbb8 	bl	80005f8 <__aeabi_dmul>
 800ce88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ce8c:	4680      	mov	r8, r0
 800ce8e:	4689      	mov	r9, r1
 800ce90:	4650      	mov	r0, sl
 800ce92:	4659      	mov	r1, fp
 800ce94:	f7f3 fbb0 	bl	80005f8 <__aeabi_dmul>
 800ce98:	4602      	mov	r2, r0
 800ce9a:	460b      	mov	r3, r1
 800ce9c:	4640      	mov	r0, r8
 800ce9e:	4649      	mov	r1, r9
 800cea0:	f7f3 f9f4 	bl	800028c <__adddf3>
 800cea4:	4632      	mov	r2, r6
 800cea6:	463b      	mov	r3, r7
 800cea8:	4680      	mov	r8, r0
 800ceaa:	4689      	mov	r9, r1
 800ceac:	4620      	mov	r0, r4
 800ceae:	4629      	mov	r1, r5
 800ceb0:	f7f3 fba2 	bl	80005f8 <__aeabi_dmul>
 800ceb4:	460b      	mov	r3, r1
 800ceb6:	4604      	mov	r4, r0
 800ceb8:	460d      	mov	r5, r1
 800ceba:	4602      	mov	r2, r0
 800cebc:	4649      	mov	r1, r9
 800cebe:	4640      	mov	r0, r8
 800cec0:	f7f3 f9e4 	bl	800028c <__adddf3>
 800cec4:	4b1d      	ldr	r3, [pc, #116]	; (800cf3c <__ieee754_pow+0x3dc>)
 800cec6:	4299      	cmp	r1, r3
 800cec8:	ec45 4b19 	vmov	d9, r4, r5
 800cecc:	4606      	mov	r6, r0
 800cece:	460f      	mov	r7, r1
 800ced0:	468b      	mov	fp, r1
 800ced2:	f340 82fe 	ble.w	800d4d2 <__ieee754_pow+0x972>
 800ced6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ceda:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800cede:	4303      	orrs	r3, r0
 800cee0:	f000 81f0 	beq.w	800d2c4 <__ieee754_pow+0x764>
 800cee4:	a310      	add	r3, pc, #64	; (adr r3, 800cf28 <__ieee754_pow+0x3c8>)
 800cee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceea:	ec51 0b18 	vmov	r0, r1, d8
 800ceee:	f7f3 fb83 	bl	80005f8 <__aeabi_dmul>
 800cef2:	a30d      	add	r3, pc, #52	; (adr r3, 800cf28 <__ieee754_pow+0x3c8>)
 800cef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cef8:	e6cb      	b.n	800cc92 <__ieee754_pow+0x132>
 800cefa:	bf00      	nop
 800cefc:	f3af 8000 	nop.w
 800cf00:	60000000 	.word	0x60000000
 800cf04:	3ff71547 	.word	0x3ff71547
 800cf08:	f85ddf44 	.word	0xf85ddf44
 800cf0c:	3e54ae0b 	.word	0x3e54ae0b
 800cf10:	55555555 	.word	0x55555555
 800cf14:	3fd55555 	.word	0x3fd55555
 800cf18:	652b82fe 	.word	0x652b82fe
 800cf1c:	3ff71547 	.word	0x3ff71547
 800cf20:	00000000 	.word	0x00000000
 800cf24:	bff00000 	.word	0xbff00000
 800cf28:	8800759c 	.word	0x8800759c
 800cf2c:	7e37e43c 	.word	0x7e37e43c
 800cf30:	3ff00000 	.word	0x3ff00000
 800cf34:	3fd00000 	.word	0x3fd00000
 800cf38:	3fe00000 	.word	0x3fe00000
 800cf3c:	408fffff 	.word	0x408fffff
 800cf40:	4bd7      	ldr	r3, [pc, #860]	; (800d2a0 <__ieee754_pow+0x740>)
 800cf42:	ea03 0309 	and.w	r3, r3, r9
 800cf46:	2200      	movs	r2, #0
 800cf48:	b92b      	cbnz	r3, 800cf56 <__ieee754_pow+0x3f6>
 800cf4a:	4bd6      	ldr	r3, [pc, #856]	; (800d2a4 <__ieee754_pow+0x744>)
 800cf4c:	f7f3 fb54 	bl	80005f8 <__aeabi_dmul>
 800cf50:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800cf54:	460c      	mov	r4, r1
 800cf56:	1523      	asrs	r3, r4, #20
 800cf58:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cf5c:	4413      	add	r3, r2
 800cf5e:	9309      	str	r3, [sp, #36]	; 0x24
 800cf60:	4bd1      	ldr	r3, [pc, #836]	; (800d2a8 <__ieee754_pow+0x748>)
 800cf62:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800cf66:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800cf6a:	429c      	cmp	r4, r3
 800cf6c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800cf70:	dd08      	ble.n	800cf84 <__ieee754_pow+0x424>
 800cf72:	4bce      	ldr	r3, [pc, #824]	; (800d2ac <__ieee754_pow+0x74c>)
 800cf74:	429c      	cmp	r4, r3
 800cf76:	f340 8163 	ble.w	800d240 <__ieee754_pow+0x6e0>
 800cf7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf7c:	3301      	adds	r3, #1
 800cf7e:	9309      	str	r3, [sp, #36]	; 0x24
 800cf80:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800cf84:	2400      	movs	r4, #0
 800cf86:	00e3      	lsls	r3, r4, #3
 800cf88:	930b      	str	r3, [sp, #44]	; 0x2c
 800cf8a:	4bc9      	ldr	r3, [pc, #804]	; (800d2b0 <__ieee754_pow+0x750>)
 800cf8c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cf90:	ed93 7b00 	vldr	d7, [r3]
 800cf94:	4629      	mov	r1, r5
 800cf96:	ec53 2b17 	vmov	r2, r3, d7
 800cf9a:	eeb0 8a47 	vmov.f32	s16, s14
 800cf9e:	eef0 8a67 	vmov.f32	s17, s15
 800cfa2:	4682      	mov	sl, r0
 800cfa4:	f7f3 f970 	bl	8000288 <__aeabi_dsub>
 800cfa8:	4652      	mov	r2, sl
 800cfaa:	4606      	mov	r6, r0
 800cfac:	460f      	mov	r7, r1
 800cfae:	462b      	mov	r3, r5
 800cfb0:	ec51 0b18 	vmov	r0, r1, d8
 800cfb4:	f7f3 f96a 	bl	800028c <__adddf3>
 800cfb8:	4602      	mov	r2, r0
 800cfba:	460b      	mov	r3, r1
 800cfbc:	2000      	movs	r0, #0
 800cfbe:	49bd      	ldr	r1, [pc, #756]	; (800d2b4 <__ieee754_pow+0x754>)
 800cfc0:	f7f3 fc44 	bl	800084c <__aeabi_ddiv>
 800cfc4:	ec41 0b19 	vmov	d9, r0, r1
 800cfc8:	4602      	mov	r2, r0
 800cfca:	460b      	mov	r3, r1
 800cfcc:	4630      	mov	r0, r6
 800cfce:	4639      	mov	r1, r7
 800cfd0:	f7f3 fb12 	bl	80005f8 <__aeabi_dmul>
 800cfd4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cfd8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cfdc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	9304      	str	r3, [sp, #16]
 800cfe4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800cfe8:	46ab      	mov	fp, r5
 800cfea:	106d      	asrs	r5, r5, #1
 800cfec:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800cff0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800cff4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800cff8:	2200      	movs	r2, #0
 800cffa:	4640      	mov	r0, r8
 800cffc:	4649      	mov	r1, r9
 800cffe:	4614      	mov	r4, r2
 800d000:	461d      	mov	r5, r3
 800d002:	f7f3 faf9 	bl	80005f8 <__aeabi_dmul>
 800d006:	4602      	mov	r2, r0
 800d008:	460b      	mov	r3, r1
 800d00a:	4630      	mov	r0, r6
 800d00c:	4639      	mov	r1, r7
 800d00e:	f7f3 f93b 	bl	8000288 <__aeabi_dsub>
 800d012:	ec53 2b18 	vmov	r2, r3, d8
 800d016:	4606      	mov	r6, r0
 800d018:	460f      	mov	r7, r1
 800d01a:	4620      	mov	r0, r4
 800d01c:	4629      	mov	r1, r5
 800d01e:	f7f3 f933 	bl	8000288 <__aeabi_dsub>
 800d022:	4602      	mov	r2, r0
 800d024:	460b      	mov	r3, r1
 800d026:	4650      	mov	r0, sl
 800d028:	4659      	mov	r1, fp
 800d02a:	f7f3 f92d 	bl	8000288 <__aeabi_dsub>
 800d02e:	4642      	mov	r2, r8
 800d030:	464b      	mov	r3, r9
 800d032:	f7f3 fae1 	bl	80005f8 <__aeabi_dmul>
 800d036:	4602      	mov	r2, r0
 800d038:	460b      	mov	r3, r1
 800d03a:	4630      	mov	r0, r6
 800d03c:	4639      	mov	r1, r7
 800d03e:	f7f3 f923 	bl	8000288 <__aeabi_dsub>
 800d042:	ec53 2b19 	vmov	r2, r3, d9
 800d046:	f7f3 fad7 	bl	80005f8 <__aeabi_dmul>
 800d04a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d04e:	ec41 0b18 	vmov	d8, r0, r1
 800d052:	4610      	mov	r0, r2
 800d054:	4619      	mov	r1, r3
 800d056:	f7f3 facf 	bl	80005f8 <__aeabi_dmul>
 800d05a:	a37d      	add	r3, pc, #500	; (adr r3, 800d250 <__ieee754_pow+0x6f0>)
 800d05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d060:	4604      	mov	r4, r0
 800d062:	460d      	mov	r5, r1
 800d064:	f7f3 fac8 	bl	80005f8 <__aeabi_dmul>
 800d068:	a37b      	add	r3, pc, #492	; (adr r3, 800d258 <__ieee754_pow+0x6f8>)
 800d06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d06e:	f7f3 f90d 	bl	800028c <__adddf3>
 800d072:	4622      	mov	r2, r4
 800d074:	462b      	mov	r3, r5
 800d076:	f7f3 fabf 	bl	80005f8 <__aeabi_dmul>
 800d07a:	a379      	add	r3, pc, #484	; (adr r3, 800d260 <__ieee754_pow+0x700>)
 800d07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d080:	f7f3 f904 	bl	800028c <__adddf3>
 800d084:	4622      	mov	r2, r4
 800d086:	462b      	mov	r3, r5
 800d088:	f7f3 fab6 	bl	80005f8 <__aeabi_dmul>
 800d08c:	a376      	add	r3, pc, #472	; (adr r3, 800d268 <__ieee754_pow+0x708>)
 800d08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d092:	f7f3 f8fb 	bl	800028c <__adddf3>
 800d096:	4622      	mov	r2, r4
 800d098:	462b      	mov	r3, r5
 800d09a:	f7f3 faad 	bl	80005f8 <__aeabi_dmul>
 800d09e:	a374      	add	r3, pc, #464	; (adr r3, 800d270 <__ieee754_pow+0x710>)
 800d0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0a4:	f7f3 f8f2 	bl	800028c <__adddf3>
 800d0a8:	4622      	mov	r2, r4
 800d0aa:	462b      	mov	r3, r5
 800d0ac:	f7f3 faa4 	bl	80005f8 <__aeabi_dmul>
 800d0b0:	a371      	add	r3, pc, #452	; (adr r3, 800d278 <__ieee754_pow+0x718>)
 800d0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0b6:	f7f3 f8e9 	bl	800028c <__adddf3>
 800d0ba:	4622      	mov	r2, r4
 800d0bc:	4606      	mov	r6, r0
 800d0be:	460f      	mov	r7, r1
 800d0c0:	462b      	mov	r3, r5
 800d0c2:	4620      	mov	r0, r4
 800d0c4:	4629      	mov	r1, r5
 800d0c6:	f7f3 fa97 	bl	80005f8 <__aeabi_dmul>
 800d0ca:	4602      	mov	r2, r0
 800d0cc:	460b      	mov	r3, r1
 800d0ce:	4630      	mov	r0, r6
 800d0d0:	4639      	mov	r1, r7
 800d0d2:	f7f3 fa91 	bl	80005f8 <__aeabi_dmul>
 800d0d6:	4642      	mov	r2, r8
 800d0d8:	4604      	mov	r4, r0
 800d0da:	460d      	mov	r5, r1
 800d0dc:	464b      	mov	r3, r9
 800d0de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d0e2:	f7f3 f8d3 	bl	800028c <__adddf3>
 800d0e6:	ec53 2b18 	vmov	r2, r3, d8
 800d0ea:	f7f3 fa85 	bl	80005f8 <__aeabi_dmul>
 800d0ee:	4622      	mov	r2, r4
 800d0f0:	462b      	mov	r3, r5
 800d0f2:	f7f3 f8cb 	bl	800028c <__adddf3>
 800d0f6:	4642      	mov	r2, r8
 800d0f8:	4682      	mov	sl, r0
 800d0fa:	468b      	mov	fp, r1
 800d0fc:	464b      	mov	r3, r9
 800d0fe:	4640      	mov	r0, r8
 800d100:	4649      	mov	r1, r9
 800d102:	f7f3 fa79 	bl	80005f8 <__aeabi_dmul>
 800d106:	4b6c      	ldr	r3, [pc, #432]	; (800d2b8 <__ieee754_pow+0x758>)
 800d108:	2200      	movs	r2, #0
 800d10a:	4606      	mov	r6, r0
 800d10c:	460f      	mov	r7, r1
 800d10e:	f7f3 f8bd 	bl	800028c <__adddf3>
 800d112:	4652      	mov	r2, sl
 800d114:	465b      	mov	r3, fp
 800d116:	f7f3 f8b9 	bl	800028c <__adddf3>
 800d11a:	9c04      	ldr	r4, [sp, #16]
 800d11c:	460d      	mov	r5, r1
 800d11e:	4622      	mov	r2, r4
 800d120:	460b      	mov	r3, r1
 800d122:	4640      	mov	r0, r8
 800d124:	4649      	mov	r1, r9
 800d126:	f7f3 fa67 	bl	80005f8 <__aeabi_dmul>
 800d12a:	4b63      	ldr	r3, [pc, #396]	; (800d2b8 <__ieee754_pow+0x758>)
 800d12c:	4680      	mov	r8, r0
 800d12e:	4689      	mov	r9, r1
 800d130:	2200      	movs	r2, #0
 800d132:	4620      	mov	r0, r4
 800d134:	4629      	mov	r1, r5
 800d136:	f7f3 f8a7 	bl	8000288 <__aeabi_dsub>
 800d13a:	4632      	mov	r2, r6
 800d13c:	463b      	mov	r3, r7
 800d13e:	f7f3 f8a3 	bl	8000288 <__aeabi_dsub>
 800d142:	4602      	mov	r2, r0
 800d144:	460b      	mov	r3, r1
 800d146:	4650      	mov	r0, sl
 800d148:	4659      	mov	r1, fp
 800d14a:	f7f3 f89d 	bl	8000288 <__aeabi_dsub>
 800d14e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d152:	f7f3 fa51 	bl	80005f8 <__aeabi_dmul>
 800d156:	4622      	mov	r2, r4
 800d158:	4606      	mov	r6, r0
 800d15a:	460f      	mov	r7, r1
 800d15c:	462b      	mov	r3, r5
 800d15e:	ec51 0b18 	vmov	r0, r1, d8
 800d162:	f7f3 fa49 	bl	80005f8 <__aeabi_dmul>
 800d166:	4602      	mov	r2, r0
 800d168:	460b      	mov	r3, r1
 800d16a:	4630      	mov	r0, r6
 800d16c:	4639      	mov	r1, r7
 800d16e:	f7f3 f88d 	bl	800028c <__adddf3>
 800d172:	4606      	mov	r6, r0
 800d174:	460f      	mov	r7, r1
 800d176:	4602      	mov	r2, r0
 800d178:	460b      	mov	r3, r1
 800d17a:	4640      	mov	r0, r8
 800d17c:	4649      	mov	r1, r9
 800d17e:	f7f3 f885 	bl	800028c <__adddf3>
 800d182:	9c04      	ldr	r4, [sp, #16]
 800d184:	a33e      	add	r3, pc, #248	; (adr r3, 800d280 <__ieee754_pow+0x720>)
 800d186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d18a:	4620      	mov	r0, r4
 800d18c:	460d      	mov	r5, r1
 800d18e:	f7f3 fa33 	bl	80005f8 <__aeabi_dmul>
 800d192:	4642      	mov	r2, r8
 800d194:	ec41 0b18 	vmov	d8, r0, r1
 800d198:	464b      	mov	r3, r9
 800d19a:	4620      	mov	r0, r4
 800d19c:	4629      	mov	r1, r5
 800d19e:	f7f3 f873 	bl	8000288 <__aeabi_dsub>
 800d1a2:	4602      	mov	r2, r0
 800d1a4:	460b      	mov	r3, r1
 800d1a6:	4630      	mov	r0, r6
 800d1a8:	4639      	mov	r1, r7
 800d1aa:	f7f3 f86d 	bl	8000288 <__aeabi_dsub>
 800d1ae:	a336      	add	r3, pc, #216	; (adr r3, 800d288 <__ieee754_pow+0x728>)
 800d1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b4:	f7f3 fa20 	bl	80005f8 <__aeabi_dmul>
 800d1b8:	a335      	add	r3, pc, #212	; (adr r3, 800d290 <__ieee754_pow+0x730>)
 800d1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1be:	4606      	mov	r6, r0
 800d1c0:	460f      	mov	r7, r1
 800d1c2:	4620      	mov	r0, r4
 800d1c4:	4629      	mov	r1, r5
 800d1c6:	f7f3 fa17 	bl	80005f8 <__aeabi_dmul>
 800d1ca:	4602      	mov	r2, r0
 800d1cc:	460b      	mov	r3, r1
 800d1ce:	4630      	mov	r0, r6
 800d1d0:	4639      	mov	r1, r7
 800d1d2:	f7f3 f85b 	bl	800028c <__adddf3>
 800d1d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d1d8:	4b38      	ldr	r3, [pc, #224]	; (800d2bc <__ieee754_pow+0x75c>)
 800d1da:	4413      	add	r3, r2
 800d1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1e0:	f7f3 f854 	bl	800028c <__adddf3>
 800d1e4:	4682      	mov	sl, r0
 800d1e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1e8:	468b      	mov	fp, r1
 800d1ea:	f7f3 f99b 	bl	8000524 <__aeabi_i2d>
 800d1ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d1f0:	4b33      	ldr	r3, [pc, #204]	; (800d2c0 <__ieee754_pow+0x760>)
 800d1f2:	4413      	add	r3, r2
 800d1f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d1f8:	4606      	mov	r6, r0
 800d1fa:	460f      	mov	r7, r1
 800d1fc:	4652      	mov	r2, sl
 800d1fe:	465b      	mov	r3, fp
 800d200:	ec51 0b18 	vmov	r0, r1, d8
 800d204:	f7f3 f842 	bl	800028c <__adddf3>
 800d208:	4642      	mov	r2, r8
 800d20a:	464b      	mov	r3, r9
 800d20c:	f7f3 f83e 	bl	800028c <__adddf3>
 800d210:	4632      	mov	r2, r6
 800d212:	463b      	mov	r3, r7
 800d214:	f7f3 f83a 	bl	800028c <__adddf3>
 800d218:	9c04      	ldr	r4, [sp, #16]
 800d21a:	4632      	mov	r2, r6
 800d21c:	463b      	mov	r3, r7
 800d21e:	4620      	mov	r0, r4
 800d220:	460d      	mov	r5, r1
 800d222:	f7f3 f831 	bl	8000288 <__aeabi_dsub>
 800d226:	4642      	mov	r2, r8
 800d228:	464b      	mov	r3, r9
 800d22a:	f7f3 f82d 	bl	8000288 <__aeabi_dsub>
 800d22e:	ec53 2b18 	vmov	r2, r3, d8
 800d232:	f7f3 f829 	bl	8000288 <__aeabi_dsub>
 800d236:	4602      	mov	r2, r0
 800d238:	460b      	mov	r3, r1
 800d23a:	4650      	mov	r0, sl
 800d23c:	4659      	mov	r1, fp
 800d23e:	e606      	b.n	800ce4e <__ieee754_pow+0x2ee>
 800d240:	2401      	movs	r4, #1
 800d242:	e6a0      	b.n	800cf86 <__ieee754_pow+0x426>
 800d244:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800d298 <__ieee754_pow+0x738>
 800d248:	e60d      	b.n	800ce66 <__ieee754_pow+0x306>
 800d24a:	bf00      	nop
 800d24c:	f3af 8000 	nop.w
 800d250:	4a454eef 	.word	0x4a454eef
 800d254:	3fca7e28 	.word	0x3fca7e28
 800d258:	93c9db65 	.word	0x93c9db65
 800d25c:	3fcd864a 	.word	0x3fcd864a
 800d260:	a91d4101 	.word	0xa91d4101
 800d264:	3fd17460 	.word	0x3fd17460
 800d268:	518f264d 	.word	0x518f264d
 800d26c:	3fd55555 	.word	0x3fd55555
 800d270:	db6fabff 	.word	0xdb6fabff
 800d274:	3fdb6db6 	.word	0x3fdb6db6
 800d278:	33333303 	.word	0x33333303
 800d27c:	3fe33333 	.word	0x3fe33333
 800d280:	e0000000 	.word	0xe0000000
 800d284:	3feec709 	.word	0x3feec709
 800d288:	dc3a03fd 	.word	0xdc3a03fd
 800d28c:	3feec709 	.word	0x3feec709
 800d290:	145b01f5 	.word	0x145b01f5
 800d294:	be3e2fe0 	.word	0xbe3e2fe0
 800d298:	00000000 	.word	0x00000000
 800d29c:	3ff00000 	.word	0x3ff00000
 800d2a0:	7ff00000 	.word	0x7ff00000
 800d2a4:	43400000 	.word	0x43400000
 800d2a8:	0003988e 	.word	0x0003988e
 800d2ac:	000bb679 	.word	0x000bb679
 800d2b0:	0800f6a8 	.word	0x0800f6a8
 800d2b4:	3ff00000 	.word	0x3ff00000
 800d2b8:	40080000 	.word	0x40080000
 800d2bc:	0800f6c8 	.word	0x0800f6c8
 800d2c0:	0800f6b8 	.word	0x0800f6b8
 800d2c4:	a3b5      	add	r3, pc, #724	; (adr r3, 800d59c <__ieee754_pow+0xa3c>)
 800d2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ca:	4640      	mov	r0, r8
 800d2cc:	4649      	mov	r1, r9
 800d2ce:	f7f2 ffdd 	bl	800028c <__adddf3>
 800d2d2:	4622      	mov	r2, r4
 800d2d4:	ec41 0b1a 	vmov	d10, r0, r1
 800d2d8:	462b      	mov	r3, r5
 800d2da:	4630      	mov	r0, r6
 800d2dc:	4639      	mov	r1, r7
 800d2de:	f7f2 ffd3 	bl	8000288 <__aeabi_dsub>
 800d2e2:	4602      	mov	r2, r0
 800d2e4:	460b      	mov	r3, r1
 800d2e6:	ec51 0b1a 	vmov	r0, r1, d10
 800d2ea:	f7f3 fc15 	bl	8000b18 <__aeabi_dcmpgt>
 800d2ee:	2800      	cmp	r0, #0
 800d2f0:	f47f adf8 	bne.w	800cee4 <__ieee754_pow+0x384>
 800d2f4:	4aa4      	ldr	r2, [pc, #656]	; (800d588 <__ieee754_pow+0xa28>)
 800d2f6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d2fa:	4293      	cmp	r3, r2
 800d2fc:	f340 810b 	ble.w	800d516 <__ieee754_pow+0x9b6>
 800d300:	151b      	asrs	r3, r3, #20
 800d302:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800d306:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800d30a:	fa4a f303 	asr.w	r3, sl, r3
 800d30e:	445b      	add	r3, fp
 800d310:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800d314:	4e9d      	ldr	r6, [pc, #628]	; (800d58c <__ieee754_pow+0xa2c>)
 800d316:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d31a:	4116      	asrs	r6, r2
 800d31c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800d320:	2000      	movs	r0, #0
 800d322:	ea23 0106 	bic.w	r1, r3, r6
 800d326:	f1c2 0214 	rsb	r2, r2, #20
 800d32a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800d32e:	fa4a fa02 	asr.w	sl, sl, r2
 800d332:	f1bb 0f00 	cmp.w	fp, #0
 800d336:	4602      	mov	r2, r0
 800d338:	460b      	mov	r3, r1
 800d33a:	4620      	mov	r0, r4
 800d33c:	4629      	mov	r1, r5
 800d33e:	bfb8      	it	lt
 800d340:	f1ca 0a00 	rsblt	sl, sl, #0
 800d344:	f7f2 ffa0 	bl	8000288 <__aeabi_dsub>
 800d348:	ec41 0b19 	vmov	d9, r0, r1
 800d34c:	4642      	mov	r2, r8
 800d34e:	464b      	mov	r3, r9
 800d350:	ec51 0b19 	vmov	r0, r1, d9
 800d354:	f7f2 ff9a 	bl	800028c <__adddf3>
 800d358:	2400      	movs	r4, #0
 800d35a:	a379      	add	r3, pc, #484	; (adr r3, 800d540 <__ieee754_pow+0x9e0>)
 800d35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d360:	4620      	mov	r0, r4
 800d362:	460d      	mov	r5, r1
 800d364:	f7f3 f948 	bl	80005f8 <__aeabi_dmul>
 800d368:	ec53 2b19 	vmov	r2, r3, d9
 800d36c:	4606      	mov	r6, r0
 800d36e:	460f      	mov	r7, r1
 800d370:	4620      	mov	r0, r4
 800d372:	4629      	mov	r1, r5
 800d374:	f7f2 ff88 	bl	8000288 <__aeabi_dsub>
 800d378:	4602      	mov	r2, r0
 800d37a:	460b      	mov	r3, r1
 800d37c:	4640      	mov	r0, r8
 800d37e:	4649      	mov	r1, r9
 800d380:	f7f2 ff82 	bl	8000288 <__aeabi_dsub>
 800d384:	a370      	add	r3, pc, #448	; (adr r3, 800d548 <__ieee754_pow+0x9e8>)
 800d386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d38a:	f7f3 f935 	bl	80005f8 <__aeabi_dmul>
 800d38e:	a370      	add	r3, pc, #448	; (adr r3, 800d550 <__ieee754_pow+0x9f0>)
 800d390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d394:	4680      	mov	r8, r0
 800d396:	4689      	mov	r9, r1
 800d398:	4620      	mov	r0, r4
 800d39a:	4629      	mov	r1, r5
 800d39c:	f7f3 f92c 	bl	80005f8 <__aeabi_dmul>
 800d3a0:	4602      	mov	r2, r0
 800d3a2:	460b      	mov	r3, r1
 800d3a4:	4640      	mov	r0, r8
 800d3a6:	4649      	mov	r1, r9
 800d3a8:	f7f2 ff70 	bl	800028c <__adddf3>
 800d3ac:	4604      	mov	r4, r0
 800d3ae:	460d      	mov	r5, r1
 800d3b0:	4602      	mov	r2, r0
 800d3b2:	460b      	mov	r3, r1
 800d3b4:	4630      	mov	r0, r6
 800d3b6:	4639      	mov	r1, r7
 800d3b8:	f7f2 ff68 	bl	800028c <__adddf3>
 800d3bc:	4632      	mov	r2, r6
 800d3be:	463b      	mov	r3, r7
 800d3c0:	4680      	mov	r8, r0
 800d3c2:	4689      	mov	r9, r1
 800d3c4:	f7f2 ff60 	bl	8000288 <__aeabi_dsub>
 800d3c8:	4602      	mov	r2, r0
 800d3ca:	460b      	mov	r3, r1
 800d3cc:	4620      	mov	r0, r4
 800d3ce:	4629      	mov	r1, r5
 800d3d0:	f7f2 ff5a 	bl	8000288 <__aeabi_dsub>
 800d3d4:	4642      	mov	r2, r8
 800d3d6:	4606      	mov	r6, r0
 800d3d8:	460f      	mov	r7, r1
 800d3da:	464b      	mov	r3, r9
 800d3dc:	4640      	mov	r0, r8
 800d3de:	4649      	mov	r1, r9
 800d3e0:	f7f3 f90a 	bl	80005f8 <__aeabi_dmul>
 800d3e4:	a35c      	add	r3, pc, #368	; (adr r3, 800d558 <__ieee754_pow+0x9f8>)
 800d3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ea:	4604      	mov	r4, r0
 800d3ec:	460d      	mov	r5, r1
 800d3ee:	f7f3 f903 	bl	80005f8 <__aeabi_dmul>
 800d3f2:	a35b      	add	r3, pc, #364	; (adr r3, 800d560 <__ieee754_pow+0xa00>)
 800d3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3f8:	f7f2 ff46 	bl	8000288 <__aeabi_dsub>
 800d3fc:	4622      	mov	r2, r4
 800d3fe:	462b      	mov	r3, r5
 800d400:	f7f3 f8fa 	bl	80005f8 <__aeabi_dmul>
 800d404:	a358      	add	r3, pc, #352	; (adr r3, 800d568 <__ieee754_pow+0xa08>)
 800d406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d40a:	f7f2 ff3f 	bl	800028c <__adddf3>
 800d40e:	4622      	mov	r2, r4
 800d410:	462b      	mov	r3, r5
 800d412:	f7f3 f8f1 	bl	80005f8 <__aeabi_dmul>
 800d416:	a356      	add	r3, pc, #344	; (adr r3, 800d570 <__ieee754_pow+0xa10>)
 800d418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d41c:	f7f2 ff34 	bl	8000288 <__aeabi_dsub>
 800d420:	4622      	mov	r2, r4
 800d422:	462b      	mov	r3, r5
 800d424:	f7f3 f8e8 	bl	80005f8 <__aeabi_dmul>
 800d428:	a353      	add	r3, pc, #332	; (adr r3, 800d578 <__ieee754_pow+0xa18>)
 800d42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d42e:	f7f2 ff2d 	bl	800028c <__adddf3>
 800d432:	4622      	mov	r2, r4
 800d434:	462b      	mov	r3, r5
 800d436:	f7f3 f8df 	bl	80005f8 <__aeabi_dmul>
 800d43a:	4602      	mov	r2, r0
 800d43c:	460b      	mov	r3, r1
 800d43e:	4640      	mov	r0, r8
 800d440:	4649      	mov	r1, r9
 800d442:	f7f2 ff21 	bl	8000288 <__aeabi_dsub>
 800d446:	4604      	mov	r4, r0
 800d448:	460d      	mov	r5, r1
 800d44a:	4602      	mov	r2, r0
 800d44c:	460b      	mov	r3, r1
 800d44e:	4640      	mov	r0, r8
 800d450:	4649      	mov	r1, r9
 800d452:	f7f3 f8d1 	bl	80005f8 <__aeabi_dmul>
 800d456:	2200      	movs	r2, #0
 800d458:	ec41 0b19 	vmov	d9, r0, r1
 800d45c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d460:	4620      	mov	r0, r4
 800d462:	4629      	mov	r1, r5
 800d464:	f7f2 ff10 	bl	8000288 <__aeabi_dsub>
 800d468:	4602      	mov	r2, r0
 800d46a:	460b      	mov	r3, r1
 800d46c:	ec51 0b19 	vmov	r0, r1, d9
 800d470:	f7f3 f9ec 	bl	800084c <__aeabi_ddiv>
 800d474:	4632      	mov	r2, r6
 800d476:	4604      	mov	r4, r0
 800d478:	460d      	mov	r5, r1
 800d47a:	463b      	mov	r3, r7
 800d47c:	4640      	mov	r0, r8
 800d47e:	4649      	mov	r1, r9
 800d480:	f7f3 f8ba 	bl	80005f8 <__aeabi_dmul>
 800d484:	4632      	mov	r2, r6
 800d486:	463b      	mov	r3, r7
 800d488:	f7f2 ff00 	bl	800028c <__adddf3>
 800d48c:	4602      	mov	r2, r0
 800d48e:	460b      	mov	r3, r1
 800d490:	4620      	mov	r0, r4
 800d492:	4629      	mov	r1, r5
 800d494:	f7f2 fef8 	bl	8000288 <__aeabi_dsub>
 800d498:	4642      	mov	r2, r8
 800d49a:	464b      	mov	r3, r9
 800d49c:	f7f2 fef4 	bl	8000288 <__aeabi_dsub>
 800d4a0:	460b      	mov	r3, r1
 800d4a2:	4602      	mov	r2, r0
 800d4a4:	493a      	ldr	r1, [pc, #232]	; (800d590 <__ieee754_pow+0xa30>)
 800d4a6:	2000      	movs	r0, #0
 800d4a8:	f7f2 feee 	bl	8000288 <__aeabi_dsub>
 800d4ac:	e9cd 0100 	strd	r0, r1, [sp]
 800d4b0:	9b01      	ldr	r3, [sp, #4]
 800d4b2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800d4b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d4ba:	da2f      	bge.n	800d51c <__ieee754_pow+0x9bc>
 800d4bc:	4650      	mov	r0, sl
 800d4be:	ed9d 0b00 	vldr	d0, [sp]
 800d4c2:	f000 f9c1 	bl	800d848 <scalbn>
 800d4c6:	ec51 0b10 	vmov	r0, r1, d0
 800d4ca:	ec53 2b18 	vmov	r2, r3, d8
 800d4ce:	f7ff bbe0 	b.w	800cc92 <__ieee754_pow+0x132>
 800d4d2:	4b30      	ldr	r3, [pc, #192]	; (800d594 <__ieee754_pow+0xa34>)
 800d4d4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d4d8:	429e      	cmp	r6, r3
 800d4da:	f77f af0b 	ble.w	800d2f4 <__ieee754_pow+0x794>
 800d4de:	4b2e      	ldr	r3, [pc, #184]	; (800d598 <__ieee754_pow+0xa38>)
 800d4e0:	440b      	add	r3, r1
 800d4e2:	4303      	orrs	r3, r0
 800d4e4:	d00b      	beq.n	800d4fe <__ieee754_pow+0x99e>
 800d4e6:	a326      	add	r3, pc, #152	; (adr r3, 800d580 <__ieee754_pow+0xa20>)
 800d4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ec:	ec51 0b18 	vmov	r0, r1, d8
 800d4f0:	f7f3 f882 	bl	80005f8 <__aeabi_dmul>
 800d4f4:	a322      	add	r3, pc, #136	; (adr r3, 800d580 <__ieee754_pow+0xa20>)
 800d4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4fa:	f7ff bbca 	b.w	800cc92 <__ieee754_pow+0x132>
 800d4fe:	4622      	mov	r2, r4
 800d500:	462b      	mov	r3, r5
 800d502:	f7f2 fec1 	bl	8000288 <__aeabi_dsub>
 800d506:	4642      	mov	r2, r8
 800d508:	464b      	mov	r3, r9
 800d50a:	f7f3 fafb 	bl	8000b04 <__aeabi_dcmpge>
 800d50e:	2800      	cmp	r0, #0
 800d510:	f43f aef0 	beq.w	800d2f4 <__ieee754_pow+0x794>
 800d514:	e7e7      	b.n	800d4e6 <__ieee754_pow+0x986>
 800d516:	f04f 0a00 	mov.w	sl, #0
 800d51a:	e717      	b.n	800d34c <__ieee754_pow+0x7ec>
 800d51c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d520:	4619      	mov	r1, r3
 800d522:	e7d2      	b.n	800d4ca <__ieee754_pow+0x96a>
 800d524:	491a      	ldr	r1, [pc, #104]	; (800d590 <__ieee754_pow+0xa30>)
 800d526:	2000      	movs	r0, #0
 800d528:	f7ff bb9e 	b.w	800cc68 <__ieee754_pow+0x108>
 800d52c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d530:	f7ff bb9a 	b.w	800cc68 <__ieee754_pow+0x108>
 800d534:	9000      	str	r0, [sp, #0]
 800d536:	f7ff bb76 	b.w	800cc26 <__ieee754_pow+0xc6>
 800d53a:	2100      	movs	r1, #0
 800d53c:	f7ff bb60 	b.w	800cc00 <__ieee754_pow+0xa0>
 800d540:	00000000 	.word	0x00000000
 800d544:	3fe62e43 	.word	0x3fe62e43
 800d548:	fefa39ef 	.word	0xfefa39ef
 800d54c:	3fe62e42 	.word	0x3fe62e42
 800d550:	0ca86c39 	.word	0x0ca86c39
 800d554:	be205c61 	.word	0xbe205c61
 800d558:	72bea4d0 	.word	0x72bea4d0
 800d55c:	3e663769 	.word	0x3e663769
 800d560:	c5d26bf1 	.word	0xc5d26bf1
 800d564:	3ebbbd41 	.word	0x3ebbbd41
 800d568:	af25de2c 	.word	0xaf25de2c
 800d56c:	3f11566a 	.word	0x3f11566a
 800d570:	16bebd93 	.word	0x16bebd93
 800d574:	3f66c16c 	.word	0x3f66c16c
 800d578:	5555553e 	.word	0x5555553e
 800d57c:	3fc55555 	.word	0x3fc55555
 800d580:	c2f8f359 	.word	0xc2f8f359
 800d584:	01a56e1f 	.word	0x01a56e1f
 800d588:	3fe00000 	.word	0x3fe00000
 800d58c:	000fffff 	.word	0x000fffff
 800d590:	3ff00000 	.word	0x3ff00000
 800d594:	4090cbff 	.word	0x4090cbff
 800d598:	3f6f3400 	.word	0x3f6f3400
 800d59c:	652b82fe 	.word	0x652b82fe
 800d5a0:	3c971547 	.word	0x3c971547

0800d5a4 <__ieee754_sqrt>:
 800d5a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5a8:	ec55 4b10 	vmov	r4, r5, d0
 800d5ac:	4e56      	ldr	r6, [pc, #344]	; (800d708 <__ieee754_sqrt+0x164>)
 800d5ae:	43ae      	bics	r6, r5
 800d5b0:	ee10 0a10 	vmov	r0, s0
 800d5b4:	ee10 3a10 	vmov	r3, s0
 800d5b8:	4629      	mov	r1, r5
 800d5ba:	462a      	mov	r2, r5
 800d5bc:	d110      	bne.n	800d5e0 <__ieee754_sqrt+0x3c>
 800d5be:	ee10 2a10 	vmov	r2, s0
 800d5c2:	462b      	mov	r3, r5
 800d5c4:	f7f3 f818 	bl	80005f8 <__aeabi_dmul>
 800d5c8:	4602      	mov	r2, r0
 800d5ca:	460b      	mov	r3, r1
 800d5cc:	4620      	mov	r0, r4
 800d5ce:	4629      	mov	r1, r5
 800d5d0:	f7f2 fe5c 	bl	800028c <__adddf3>
 800d5d4:	4604      	mov	r4, r0
 800d5d6:	460d      	mov	r5, r1
 800d5d8:	ec45 4b10 	vmov	d0, r4, r5
 800d5dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5e0:	2d00      	cmp	r5, #0
 800d5e2:	dc10      	bgt.n	800d606 <__ieee754_sqrt+0x62>
 800d5e4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d5e8:	4330      	orrs	r0, r6
 800d5ea:	d0f5      	beq.n	800d5d8 <__ieee754_sqrt+0x34>
 800d5ec:	b15d      	cbz	r5, 800d606 <__ieee754_sqrt+0x62>
 800d5ee:	ee10 2a10 	vmov	r2, s0
 800d5f2:	462b      	mov	r3, r5
 800d5f4:	ee10 0a10 	vmov	r0, s0
 800d5f8:	f7f2 fe46 	bl	8000288 <__aeabi_dsub>
 800d5fc:	4602      	mov	r2, r0
 800d5fe:	460b      	mov	r3, r1
 800d600:	f7f3 f924 	bl	800084c <__aeabi_ddiv>
 800d604:	e7e6      	b.n	800d5d4 <__ieee754_sqrt+0x30>
 800d606:	1509      	asrs	r1, r1, #20
 800d608:	d076      	beq.n	800d6f8 <__ieee754_sqrt+0x154>
 800d60a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800d60e:	07ce      	lsls	r6, r1, #31
 800d610:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800d614:	bf5e      	ittt	pl
 800d616:	0fda      	lsrpl	r2, r3, #31
 800d618:	005b      	lslpl	r3, r3, #1
 800d61a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800d61e:	0fda      	lsrs	r2, r3, #31
 800d620:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800d624:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800d628:	2000      	movs	r0, #0
 800d62a:	106d      	asrs	r5, r5, #1
 800d62c:	005b      	lsls	r3, r3, #1
 800d62e:	f04f 0e16 	mov.w	lr, #22
 800d632:	4684      	mov	ip, r0
 800d634:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d638:	eb0c 0401 	add.w	r4, ip, r1
 800d63c:	4294      	cmp	r4, r2
 800d63e:	bfde      	ittt	le
 800d640:	1b12      	suble	r2, r2, r4
 800d642:	eb04 0c01 	addle.w	ip, r4, r1
 800d646:	1840      	addle	r0, r0, r1
 800d648:	0052      	lsls	r2, r2, #1
 800d64a:	f1be 0e01 	subs.w	lr, lr, #1
 800d64e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800d652:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d656:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d65a:	d1ed      	bne.n	800d638 <__ieee754_sqrt+0x94>
 800d65c:	4671      	mov	r1, lr
 800d65e:	2720      	movs	r7, #32
 800d660:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800d664:	4562      	cmp	r2, ip
 800d666:	eb04 060e 	add.w	r6, r4, lr
 800d66a:	dc02      	bgt.n	800d672 <__ieee754_sqrt+0xce>
 800d66c:	d113      	bne.n	800d696 <__ieee754_sqrt+0xf2>
 800d66e:	429e      	cmp	r6, r3
 800d670:	d811      	bhi.n	800d696 <__ieee754_sqrt+0xf2>
 800d672:	2e00      	cmp	r6, #0
 800d674:	eb06 0e04 	add.w	lr, r6, r4
 800d678:	da43      	bge.n	800d702 <__ieee754_sqrt+0x15e>
 800d67a:	f1be 0f00 	cmp.w	lr, #0
 800d67e:	db40      	blt.n	800d702 <__ieee754_sqrt+0x15e>
 800d680:	f10c 0801 	add.w	r8, ip, #1
 800d684:	eba2 020c 	sub.w	r2, r2, ip
 800d688:	429e      	cmp	r6, r3
 800d68a:	bf88      	it	hi
 800d68c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800d690:	1b9b      	subs	r3, r3, r6
 800d692:	4421      	add	r1, r4
 800d694:	46c4      	mov	ip, r8
 800d696:	0052      	lsls	r2, r2, #1
 800d698:	3f01      	subs	r7, #1
 800d69a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800d69e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d6a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d6a6:	d1dd      	bne.n	800d664 <__ieee754_sqrt+0xc0>
 800d6a8:	4313      	orrs	r3, r2
 800d6aa:	d006      	beq.n	800d6ba <__ieee754_sqrt+0x116>
 800d6ac:	1c4c      	adds	r4, r1, #1
 800d6ae:	bf13      	iteet	ne
 800d6b0:	3101      	addne	r1, #1
 800d6b2:	3001      	addeq	r0, #1
 800d6b4:	4639      	moveq	r1, r7
 800d6b6:	f021 0101 	bicne.w	r1, r1, #1
 800d6ba:	1043      	asrs	r3, r0, #1
 800d6bc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d6c0:	0849      	lsrs	r1, r1, #1
 800d6c2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d6c6:	07c2      	lsls	r2, r0, #31
 800d6c8:	bf48      	it	mi
 800d6ca:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800d6ce:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800d6d2:	460c      	mov	r4, r1
 800d6d4:	463d      	mov	r5, r7
 800d6d6:	e77f      	b.n	800d5d8 <__ieee754_sqrt+0x34>
 800d6d8:	0ada      	lsrs	r2, r3, #11
 800d6da:	3815      	subs	r0, #21
 800d6dc:	055b      	lsls	r3, r3, #21
 800d6de:	2a00      	cmp	r2, #0
 800d6e0:	d0fa      	beq.n	800d6d8 <__ieee754_sqrt+0x134>
 800d6e2:	02d7      	lsls	r7, r2, #11
 800d6e4:	d50a      	bpl.n	800d6fc <__ieee754_sqrt+0x158>
 800d6e6:	f1c1 0420 	rsb	r4, r1, #32
 800d6ea:	fa23 f404 	lsr.w	r4, r3, r4
 800d6ee:	1e4d      	subs	r5, r1, #1
 800d6f0:	408b      	lsls	r3, r1
 800d6f2:	4322      	orrs	r2, r4
 800d6f4:	1b41      	subs	r1, r0, r5
 800d6f6:	e788      	b.n	800d60a <__ieee754_sqrt+0x66>
 800d6f8:	4608      	mov	r0, r1
 800d6fa:	e7f0      	b.n	800d6de <__ieee754_sqrt+0x13a>
 800d6fc:	0052      	lsls	r2, r2, #1
 800d6fe:	3101      	adds	r1, #1
 800d700:	e7ef      	b.n	800d6e2 <__ieee754_sqrt+0x13e>
 800d702:	46e0      	mov	r8, ip
 800d704:	e7be      	b.n	800d684 <__ieee754_sqrt+0xe0>
 800d706:	bf00      	nop
 800d708:	7ff00000 	.word	0x7ff00000

0800d70c <fabs>:
 800d70c:	ec51 0b10 	vmov	r0, r1, d0
 800d710:	ee10 2a10 	vmov	r2, s0
 800d714:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d718:	ec43 2b10 	vmov	d0, r2, r3
 800d71c:	4770      	bx	lr

0800d71e <finite>:
 800d71e:	b082      	sub	sp, #8
 800d720:	ed8d 0b00 	vstr	d0, [sp]
 800d724:	9801      	ldr	r0, [sp, #4]
 800d726:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800d72a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d72e:	0fc0      	lsrs	r0, r0, #31
 800d730:	b002      	add	sp, #8
 800d732:	4770      	bx	lr

0800d734 <rint>:
 800d734:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d736:	ec51 0b10 	vmov	r0, r1, d0
 800d73a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d73e:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800d742:	2e13      	cmp	r6, #19
 800d744:	ee10 4a10 	vmov	r4, s0
 800d748:	460b      	mov	r3, r1
 800d74a:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800d74e:	dc58      	bgt.n	800d802 <rint+0xce>
 800d750:	2e00      	cmp	r6, #0
 800d752:	da2b      	bge.n	800d7ac <rint+0x78>
 800d754:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800d758:	4302      	orrs	r2, r0
 800d75a:	d023      	beq.n	800d7a4 <rint+0x70>
 800d75c:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800d760:	4302      	orrs	r2, r0
 800d762:	4254      	negs	r4, r2
 800d764:	4314      	orrs	r4, r2
 800d766:	0c4b      	lsrs	r3, r1, #17
 800d768:	0b24      	lsrs	r4, r4, #12
 800d76a:	045b      	lsls	r3, r3, #17
 800d76c:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800d770:	ea44 0103 	orr.w	r1, r4, r3
 800d774:	4b32      	ldr	r3, [pc, #200]	; (800d840 <rint+0x10c>)
 800d776:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d77a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d77e:	4602      	mov	r2, r0
 800d780:	460b      	mov	r3, r1
 800d782:	4630      	mov	r0, r6
 800d784:	4639      	mov	r1, r7
 800d786:	f7f2 fd81 	bl	800028c <__adddf3>
 800d78a:	e9cd 0100 	strd	r0, r1, [sp]
 800d78e:	463b      	mov	r3, r7
 800d790:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d794:	4632      	mov	r2, r6
 800d796:	f7f2 fd77 	bl	8000288 <__aeabi_dsub>
 800d79a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d79e:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800d7a2:	4639      	mov	r1, r7
 800d7a4:	ec41 0b10 	vmov	d0, r0, r1
 800d7a8:	b003      	add	sp, #12
 800d7aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7ac:	4a25      	ldr	r2, [pc, #148]	; (800d844 <rint+0x110>)
 800d7ae:	4132      	asrs	r2, r6
 800d7b0:	ea01 0702 	and.w	r7, r1, r2
 800d7b4:	4307      	orrs	r7, r0
 800d7b6:	d0f5      	beq.n	800d7a4 <rint+0x70>
 800d7b8:	0851      	lsrs	r1, r2, #1
 800d7ba:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800d7be:	4314      	orrs	r4, r2
 800d7c0:	d00c      	beq.n	800d7dc <rint+0xa8>
 800d7c2:	ea23 0201 	bic.w	r2, r3, r1
 800d7c6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d7ca:	2e13      	cmp	r6, #19
 800d7cc:	fa43 f606 	asr.w	r6, r3, r6
 800d7d0:	bf0c      	ite	eq
 800d7d2:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800d7d6:	2400      	movne	r4, #0
 800d7d8:	ea42 0306 	orr.w	r3, r2, r6
 800d7dc:	4918      	ldr	r1, [pc, #96]	; (800d840 <rint+0x10c>)
 800d7de:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800d7e2:	4622      	mov	r2, r4
 800d7e4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d7e8:	4620      	mov	r0, r4
 800d7ea:	4629      	mov	r1, r5
 800d7ec:	f7f2 fd4e 	bl	800028c <__adddf3>
 800d7f0:	e9cd 0100 	strd	r0, r1, [sp]
 800d7f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d7f8:	4622      	mov	r2, r4
 800d7fa:	462b      	mov	r3, r5
 800d7fc:	f7f2 fd44 	bl	8000288 <__aeabi_dsub>
 800d800:	e7d0      	b.n	800d7a4 <rint+0x70>
 800d802:	2e33      	cmp	r6, #51	; 0x33
 800d804:	dd07      	ble.n	800d816 <rint+0xe2>
 800d806:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d80a:	d1cb      	bne.n	800d7a4 <rint+0x70>
 800d80c:	ee10 2a10 	vmov	r2, s0
 800d810:	f7f2 fd3c 	bl	800028c <__adddf3>
 800d814:	e7c6      	b.n	800d7a4 <rint+0x70>
 800d816:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800d81a:	f04f 36ff 	mov.w	r6, #4294967295
 800d81e:	40d6      	lsrs	r6, r2
 800d820:	4230      	tst	r0, r6
 800d822:	d0bf      	beq.n	800d7a4 <rint+0x70>
 800d824:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800d828:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800d82c:	bf1f      	itttt	ne
 800d82e:	ea24 0101 	bicne.w	r1, r4, r1
 800d832:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800d836:	fa44 f202 	asrne.w	r2, r4, r2
 800d83a:	ea41 0402 	orrne.w	r4, r1, r2
 800d83e:	e7cd      	b.n	800d7dc <rint+0xa8>
 800d840:	0800f6d8 	.word	0x0800f6d8
 800d844:	000fffff 	.word	0x000fffff

0800d848 <scalbn>:
 800d848:	b570      	push	{r4, r5, r6, lr}
 800d84a:	ec55 4b10 	vmov	r4, r5, d0
 800d84e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800d852:	4606      	mov	r6, r0
 800d854:	462b      	mov	r3, r5
 800d856:	b99a      	cbnz	r2, 800d880 <scalbn+0x38>
 800d858:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d85c:	4323      	orrs	r3, r4
 800d85e:	d036      	beq.n	800d8ce <scalbn+0x86>
 800d860:	4b39      	ldr	r3, [pc, #228]	; (800d948 <scalbn+0x100>)
 800d862:	4629      	mov	r1, r5
 800d864:	ee10 0a10 	vmov	r0, s0
 800d868:	2200      	movs	r2, #0
 800d86a:	f7f2 fec5 	bl	80005f8 <__aeabi_dmul>
 800d86e:	4b37      	ldr	r3, [pc, #220]	; (800d94c <scalbn+0x104>)
 800d870:	429e      	cmp	r6, r3
 800d872:	4604      	mov	r4, r0
 800d874:	460d      	mov	r5, r1
 800d876:	da10      	bge.n	800d89a <scalbn+0x52>
 800d878:	a32b      	add	r3, pc, #172	; (adr r3, 800d928 <scalbn+0xe0>)
 800d87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d87e:	e03a      	b.n	800d8f6 <scalbn+0xae>
 800d880:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d884:	428a      	cmp	r2, r1
 800d886:	d10c      	bne.n	800d8a2 <scalbn+0x5a>
 800d888:	ee10 2a10 	vmov	r2, s0
 800d88c:	4620      	mov	r0, r4
 800d88e:	4629      	mov	r1, r5
 800d890:	f7f2 fcfc 	bl	800028c <__adddf3>
 800d894:	4604      	mov	r4, r0
 800d896:	460d      	mov	r5, r1
 800d898:	e019      	b.n	800d8ce <scalbn+0x86>
 800d89a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d89e:	460b      	mov	r3, r1
 800d8a0:	3a36      	subs	r2, #54	; 0x36
 800d8a2:	4432      	add	r2, r6
 800d8a4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d8a8:	428a      	cmp	r2, r1
 800d8aa:	dd08      	ble.n	800d8be <scalbn+0x76>
 800d8ac:	2d00      	cmp	r5, #0
 800d8ae:	a120      	add	r1, pc, #128	; (adr r1, 800d930 <scalbn+0xe8>)
 800d8b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8b4:	da1c      	bge.n	800d8f0 <scalbn+0xa8>
 800d8b6:	a120      	add	r1, pc, #128	; (adr r1, 800d938 <scalbn+0xf0>)
 800d8b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8bc:	e018      	b.n	800d8f0 <scalbn+0xa8>
 800d8be:	2a00      	cmp	r2, #0
 800d8c0:	dd08      	ble.n	800d8d4 <scalbn+0x8c>
 800d8c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d8c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d8ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d8ce:	ec45 4b10 	vmov	d0, r4, r5
 800d8d2:	bd70      	pop	{r4, r5, r6, pc}
 800d8d4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d8d8:	da19      	bge.n	800d90e <scalbn+0xc6>
 800d8da:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d8de:	429e      	cmp	r6, r3
 800d8e0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800d8e4:	dd0a      	ble.n	800d8fc <scalbn+0xb4>
 800d8e6:	a112      	add	r1, pc, #72	; (adr r1, 800d930 <scalbn+0xe8>)
 800d8e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d1e2      	bne.n	800d8b6 <scalbn+0x6e>
 800d8f0:	a30f      	add	r3, pc, #60	; (adr r3, 800d930 <scalbn+0xe8>)
 800d8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f6:	f7f2 fe7f 	bl	80005f8 <__aeabi_dmul>
 800d8fa:	e7cb      	b.n	800d894 <scalbn+0x4c>
 800d8fc:	a10a      	add	r1, pc, #40	; (adr r1, 800d928 <scalbn+0xe0>)
 800d8fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d0b8      	beq.n	800d878 <scalbn+0x30>
 800d906:	a10e      	add	r1, pc, #56	; (adr r1, 800d940 <scalbn+0xf8>)
 800d908:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d90c:	e7b4      	b.n	800d878 <scalbn+0x30>
 800d90e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d912:	3236      	adds	r2, #54	; 0x36
 800d914:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d918:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d91c:	4620      	mov	r0, r4
 800d91e:	4b0c      	ldr	r3, [pc, #48]	; (800d950 <scalbn+0x108>)
 800d920:	2200      	movs	r2, #0
 800d922:	e7e8      	b.n	800d8f6 <scalbn+0xae>
 800d924:	f3af 8000 	nop.w
 800d928:	c2f8f359 	.word	0xc2f8f359
 800d92c:	01a56e1f 	.word	0x01a56e1f
 800d930:	8800759c 	.word	0x8800759c
 800d934:	7e37e43c 	.word	0x7e37e43c
 800d938:	8800759c 	.word	0x8800759c
 800d93c:	fe37e43c 	.word	0xfe37e43c
 800d940:	c2f8f359 	.word	0xc2f8f359
 800d944:	81a56e1f 	.word	0x81a56e1f
 800d948:	43500000 	.word	0x43500000
 800d94c:	ffff3cb0 	.word	0xffff3cb0
 800d950:	3c900000 	.word	0x3c900000

0800d954 <_init>:
 800d954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d956:	bf00      	nop
 800d958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d95a:	bc08      	pop	{r3}
 800d95c:	469e      	mov	lr, r3
 800d95e:	4770      	bx	lr

0800d960 <_fini>:
 800d960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d962:	bf00      	nop
 800d964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d966:	bc08      	pop	{r3}
 800d968:	469e      	mov	lr, r3
 800d96a:	4770      	bx	lr
