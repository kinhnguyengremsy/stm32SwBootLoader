
stm32SwBootLoader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000078c  08009958  08009958  00019958  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0e4  0800a0e4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0e4  0800a0e4  0001a0e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0ec  0800a0ec  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0ec  0800a0ec  0001a0ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0f0  0800a0f0  0001a0f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a0f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00001b4c  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001d2c  20001d2c  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001489f  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c86  00000000  00000000  00034aaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ab0  00000000  00000000  00037738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a00  00000000  00000000  000381e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021659  00000000  00000000  00038be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f2dc  00000000  00000000  0005a241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6758  00000000  00000000  0006951d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012fc75  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004028  00000000  00000000  0012fcc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800993c 	.word	0x0800993c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800993c 	.word	0x0800993c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, 10);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	230a      	movs	r3, #10
 8000ffe:	68b9      	ldr	r1, [r7, #8]
 8001000:	4803      	ldr	r0, [pc, #12]	; (8001010 <_write+0x24>)
 8001002:	f002 f980 	bl	8003306 <HAL_UART_Transmit>
  return len;
 8001006:	687b      	ldr	r3, [r7, #4]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000610 	.word	0x20000610

08001014 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 8001018:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <main+0x40>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f004 fef3 	bl	8005e0c <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001026:	f000 fd4d 	bl	8001ac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800102a:	f000 f815 	bl	8001058 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102e:	f000 f951 	bl	80012d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001032:	f000 f8f9 	bl	8001228 <MX_DMA_Init>
  MX_UART4_Init();
 8001036:	f000 f879 	bl	800112c <MX_UART4_Init>
  MX_USART2_UART_Init();
 800103a:	f000 f8cb 	bl	80011d4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800103e:	f000 f89f 	bl	8001180 <MX_USART1_UART_Init>
//	swBootLoaderConfiguration();

//	sotfEmulations_configuration();

#if (USE_HOST_BOOTLOADER == 1)
  hostUartBootLoaderConfiguration();
 8001042:	f003 fa27 	bl	8004494 <hostUartBootLoaderConfiguration>
#endif
#if (USE_DEVICE_BOOTLOADER == 1)
  uartBootLoaderConfiguration();
 8001046:	f003 fd13 	bl	8004a70 <uartBootLoaderConfiguration>
  {

//	  swBootLoader_process();

#if (USE_HOST_BOOTLOADER == 1)
	  hostUartBootLoaderProcess();
 800104a:	f003 fb59 	bl	8004700 <hostUartBootLoaderProcess>
#endif
#if (USE_DEVICE_BOOTLOADER == 1)
	  uartBootLoaderProcess();
 800104e:	f003 fe35 	bl	8004cbc <uartBootLoaderProcess>
	  hostUartBootLoaderProcess();
 8001052:	e7fa      	b.n	800104a <main+0x36>
 8001054:	2000000c 	.word	0x2000000c

08001058 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b094      	sub	sp, #80	; 0x50
 800105c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105e:	f107 0320 	add.w	r3, r7, #32
 8001062:	2230      	movs	r2, #48	; 0x30
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f003 fef6 	bl	8004e58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800106c:	f107 030c 	add.w	r3, r7, #12
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800107c:	2300      	movs	r3, #0
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	4b28      	ldr	r3, [pc, #160]	; (8001124 <SystemClock_Config+0xcc>)
 8001082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001084:	4a27      	ldr	r2, [pc, #156]	; (8001124 <SystemClock_Config+0xcc>)
 8001086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108a:	6413      	str	r3, [r2, #64]	; 0x40
 800108c:	4b25      	ldr	r3, [pc, #148]	; (8001124 <SystemClock_Config+0xcc>)
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001098:	2300      	movs	r3, #0
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	4b22      	ldr	r3, [pc, #136]	; (8001128 <SystemClock_Config+0xd0>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a21      	ldr	r2, [pc, #132]	; (8001128 <SystemClock_Config+0xd0>)
 80010a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a6:	6013      	str	r3, [r2, #0]
 80010a8:	4b1f      	ldr	r3, [pc, #124]	; (8001128 <SystemClock_Config+0xd0>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010b4:	2301      	movs	r3, #1
 80010b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010be:	2302      	movs	r3, #2
 80010c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010c8:	2304      	movs	r3, #4
 80010ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010cc:	23a8      	movs	r3, #168	; 0xa8
 80010ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010d0:	2302      	movs	r3, #2
 80010d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010d4:	2304      	movs	r3, #4
 80010d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d8:	f107 0320 	add.w	r3, r7, #32
 80010dc:	4618      	mov	r0, r3
 80010de:	f001 fc51 	bl	8002984 <HAL_RCC_OscConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010e8:	f000 f946 	bl	8001378 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ec:	230f      	movs	r3, #15
 80010ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f0:	2302      	movs	r3, #2
 80010f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001102:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	2105      	movs	r1, #5
 800110a:	4618      	mov	r0, r3
 800110c:	f001 feb2 	bl	8002e74 <HAL_RCC_ClockConfig>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001116:	f000 f92f 	bl	8001378 <Error_Handler>
  }
}
 800111a:	bf00      	nop
 800111c:	3750      	adds	r7, #80	; 0x50
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40023800 	.word	0x40023800
 8001128:	40007000 	.word	0x40007000

0800112c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <MX_UART4_Init+0x4c>)
 8001132:	4a12      	ldr	r2, [pc, #72]	; (800117c <MX_UART4_Init+0x50>)
 8001134:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <MX_UART4_Init+0x4c>)
 8001138:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800113c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <MX_UART4_Init+0x4c>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001144:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <MX_UART4_Init+0x4c>)
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800114a:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <MX_UART4_Init+0x4c>)
 800114c:	2200      	movs	r2, #0
 800114e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001150:	4b09      	ldr	r3, [pc, #36]	; (8001178 <MX_UART4_Init+0x4c>)
 8001152:	220c      	movs	r2, #12
 8001154:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001156:	4b08      	ldr	r3, [pc, #32]	; (8001178 <MX_UART4_Init+0x4c>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <MX_UART4_Init+0x4c>)
 800115e:	2200      	movs	r2, #0
 8001160:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001162:	4805      	ldr	r0, [pc, #20]	; (8001178 <MX_UART4_Init+0x4c>)
 8001164:	f002 f882 	bl	800326c <HAL_UART_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800116e:	f000 f903 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000654 	.word	0x20000654
 800117c:	40004c00 	.word	0x40004c00

08001180 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <MX_USART1_UART_Init+0x4c>)
 8001186:	4a12      	ldr	r2, [pc, #72]	; (80011d0 <MX_USART1_UART_Init+0x50>)
 8001188:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800118a:	4b10      	ldr	r3, [pc, #64]	; (80011cc <MX_USART1_UART_Init+0x4c>)
 800118c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001190:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <MX_USART1_UART_Init+0x4c>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <MX_USART1_UART_Init+0x4c>)
 800119a:	2200      	movs	r2, #0
 800119c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800119e:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <MX_USART1_UART_Init+0x4c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011a4:	4b09      	ldr	r3, [pc, #36]	; (80011cc <MX_USART1_UART_Init+0x4c>)
 80011a6:	220c      	movs	r2, #12
 80011a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011aa:	4b08      	ldr	r3, [pc, #32]	; (80011cc <MX_USART1_UART_Init+0x4c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <MX_USART1_UART_Init+0x4c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011b6:	4805      	ldr	r0, [pc, #20]	; (80011cc <MX_USART1_UART_Init+0x4c>)
 80011b8:	f002 f858 	bl	800326c <HAL_UART_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011c2:	f000 f8d9 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000610 	.word	0x20000610
 80011d0:	40011000 	.word	0x40011000

080011d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011d8:	4b11      	ldr	r3, [pc, #68]	; (8001220 <MX_USART2_UART_Init+0x4c>)
 80011da:	4a12      	ldr	r2, [pc, #72]	; (8001224 <MX_USART2_UART_Init+0x50>)
 80011dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011de:	4b10      	ldr	r3, [pc, #64]	; (8001220 <MX_USART2_UART_Init+0x4c>)
 80011e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <MX_USART2_UART_Init+0x4c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011ec:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <MX_USART2_UART_Init+0x4c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <MX_USART2_UART_Init+0x4c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011f8:	4b09      	ldr	r3, [pc, #36]	; (8001220 <MX_USART2_UART_Init+0x4c>)
 80011fa:	220c      	movs	r2, #12
 80011fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <MX_USART2_UART_Init+0x4c>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <MX_USART2_UART_Init+0x4c>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800120a:	4805      	ldr	r0, [pc, #20]	; (8001220 <MX_USART2_UART_Init+0x4c>)
 800120c:	f002 f82e 	bl	800326c <HAL_UART_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001216:	f000 f8af 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000698 	.word	0x20000698
 8001224:	40004400 	.word	0x40004400

08001228 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	4b27      	ldr	r3, [pc, #156]	; (80012d0 <MX_DMA_Init+0xa8>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a26      	ldr	r2, [pc, #152]	; (80012d0 <MX_DMA_Init+0xa8>)
 8001238:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b24      	ldr	r3, [pc, #144]	; (80012d0 <MX_DMA_Init+0xa8>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	603b      	str	r3, [r7, #0]
 800124e:	4b20      	ldr	r3, [pc, #128]	; (80012d0 <MX_DMA_Init+0xa8>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a1f      	ldr	r2, [pc, #124]	; (80012d0 <MX_DMA_Init+0xa8>)
 8001254:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <MX_DMA_Init+0xa8>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001262:	603b      	str	r3, [r7, #0]
 8001264:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001266:	2200      	movs	r2, #0
 8001268:	2100      	movs	r1, #0
 800126a:	200d      	movs	r0, #13
 800126c:	f000 fd9b 	bl	8001da6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001270:	200d      	movs	r0, #13
 8001272:	f000 fdb4 	bl	8001dde <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	2100      	movs	r1, #0
 800127a:	200f      	movs	r0, #15
 800127c:	f000 fd93 	bl	8001da6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001280:	200f      	movs	r0, #15
 8001282:	f000 fdac 	bl	8001dde <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	2100      	movs	r1, #0
 800128a:	2010      	movs	r0, #16
 800128c:	f000 fd8b 	bl	8001da6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001290:	2010      	movs	r0, #16
 8001292:	f000 fda4 	bl	8001dde <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001296:	2200      	movs	r2, #0
 8001298:	2100      	movs	r1, #0
 800129a:	2011      	movs	r0, #17
 800129c:	f000 fd83 	bl	8001da6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80012a0:	2011      	movs	r0, #17
 80012a2:	f000 fd9c 	bl	8001dde <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2100      	movs	r1, #0
 80012aa:	203a      	movs	r0, #58	; 0x3a
 80012ac:	f000 fd7b 	bl	8001da6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80012b0:	203a      	movs	r0, #58	; 0x3a
 80012b2:	f000 fd94 	bl	8001dde <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2100      	movs	r1, #0
 80012ba:	2046      	movs	r0, #70	; 0x46
 80012bc:	f000 fd73 	bl	8001da6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80012c0:	2046      	movs	r0, #70	; 0x46
 80012c2:	f000 fd8c 	bl	8001dde <HAL_NVIC_EnableIRQ>

}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40023800 	.word	0x40023800

080012d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012da:	f107 030c 	add.w	r3, r7, #12
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
 80012e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	4b20      	ldr	r3, [pc, #128]	; (8001370 <MX_GPIO_Init+0x9c>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a1f      	ldr	r2, [pc, #124]	; (8001370 <MX_GPIO_Init+0x9c>)
 80012f4:	f043 0304 	orr.w	r3, r3, #4
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <MX_GPIO_Init+0x9c>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0304 	and.w	r3, r3, #4
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	4b19      	ldr	r3, [pc, #100]	; (8001370 <MX_GPIO_Init+0x9c>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a18      	ldr	r2, [pc, #96]	; (8001370 <MX_GPIO_Init+0x9c>)
 8001310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b16      	ldr	r3, [pc, #88]	; (8001370 <MX_GPIO_Init+0x9c>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	603b      	str	r3, [r7, #0]
 8001326:	4b12      	ldr	r3, [pc, #72]	; (8001370 <MX_GPIO_Init+0x9c>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4a11      	ldr	r2, [pc, #68]	; (8001370 <MX_GPIO_Init+0x9c>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <MX_GPIO_Init+0x9c>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 800133e:	2201      	movs	r2, #1
 8001340:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001344:	480b      	ldr	r0, [pc, #44]	; (8001374 <MX_GPIO_Init+0xa0>)
 8001346:	f001 fb03 	bl	8002950 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800134a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800134e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001350:	2301      	movs	r3, #1
 8001352:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001358:	2300      	movs	r3, #0
 800135a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135c:	f107 030c 	add.w	r3, r7, #12
 8001360:	4619      	mov	r1, r3
 8001362:	4804      	ldr	r0, [pc, #16]	; (8001374 <MX_GPIO_Init+0xa0>)
 8001364:	f001 f958 	bl	8002618 <HAL_GPIO_Init>

}
 8001368:	bf00      	nop
 800136a:	3720      	adds	r7, #32
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40023800 	.word	0x40023800
 8001374:	40020800 	.word	0x40020800

08001378 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800137c:	b672      	cpsid	i
}
 800137e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("\n[Error_Handler] ......\n");
 8001380:	4803      	ldr	r0, [pc, #12]	; (8001390 <Error_Handler+0x18>)
 8001382:	f004 fd2b 	bl	8005ddc <puts>
	  HAL_Delay(1000);
 8001386:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800138a:	f000 fc0d 	bl	8001ba8 <HAL_Delay>
	  printf("\n[Error_Handler] ......\n");
 800138e:	e7f7      	b.n	8001380 <Error_Handler+0x8>
 8001390:	08009958 	.word	0x08009958

08001394 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <HAL_MspInit+0x4c>)
 80013a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a2:	4a0f      	ldr	r2, [pc, #60]	; (80013e0 <HAL_MspInit+0x4c>)
 80013a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a8:	6453      	str	r3, [r2, #68]	; 0x44
 80013aa:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <HAL_MspInit+0x4c>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	603b      	str	r3, [r7, #0]
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <HAL_MspInit+0x4c>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	4a08      	ldr	r2, [pc, #32]	; (80013e0 <HAL_MspInit+0x4c>)
 80013c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c4:	6413      	str	r3, [r2, #64]	; 0x40
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <HAL_MspInit+0x4c>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ce:	603b      	str	r3, [r7, #0]
 80013d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	40023800 	.word	0x40023800

080013e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08e      	sub	sp, #56	; 0x38
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a98      	ldr	r2, [pc, #608]	; (8001664 <HAL_UART_MspInit+0x280>)
 8001402:	4293      	cmp	r3, r2
 8001404:	f040 8095 	bne.w	8001532 <HAL_UART_MspInit+0x14e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001408:	2300      	movs	r3, #0
 800140a:	623b      	str	r3, [r7, #32]
 800140c:	4b96      	ldr	r3, [pc, #600]	; (8001668 <HAL_UART_MspInit+0x284>)
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	4a95      	ldr	r2, [pc, #596]	; (8001668 <HAL_UART_MspInit+0x284>)
 8001412:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001416:	6413      	str	r3, [r2, #64]	; 0x40
 8001418:	4b93      	ldr	r3, [pc, #588]	; (8001668 <HAL_UART_MspInit+0x284>)
 800141a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001420:	623b      	str	r3, [r7, #32]
 8001422:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001424:	2300      	movs	r3, #0
 8001426:	61fb      	str	r3, [r7, #28]
 8001428:	4b8f      	ldr	r3, [pc, #572]	; (8001668 <HAL_UART_MspInit+0x284>)
 800142a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142c:	4a8e      	ldr	r2, [pc, #568]	; (8001668 <HAL_UART_MspInit+0x284>)
 800142e:	f043 0304 	orr.w	r3, r3, #4
 8001432:	6313      	str	r3, [r2, #48]	; 0x30
 8001434:	4b8c      	ldr	r3, [pc, #560]	; (8001668 <HAL_UART_MspInit+0x284>)
 8001436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001438:	f003 0304 	and.w	r3, r3, #4
 800143c:	61fb      	str	r3, [r7, #28]
 800143e:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001440:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001446:	2302      	movs	r3, #2
 8001448:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144e:	2303      	movs	r3, #3
 8001450:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001452:	2308      	movs	r3, #8
 8001454:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145a:	4619      	mov	r1, r3
 800145c:	4883      	ldr	r0, [pc, #524]	; (800166c <HAL_UART_MspInit+0x288>)
 800145e:	f001 f8db 	bl	8002618 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8001462:	4b83      	ldr	r3, [pc, #524]	; (8001670 <HAL_UART_MspInit+0x28c>)
 8001464:	4a83      	ldr	r2, [pc, #524]	; (8001674 <HAL_UART_MspInit+0x290>)
 8001466:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8001468:	4b81      	ldr	r3, [pc, #516]	; (8001670 <HAL_UART_MspInit+0x28c>)
 800146a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800146e:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001470:	4b7f      	ldr	r3, [pc, #508]	; (8001670 <HAL_UART_MspInit+0x28c>)
 8001472:	2240      	movs	r2, #64	; 0x40
 8001474:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001476:	4b7e      	ldr	r3, [pc, #504]	; (8001670 <HAL_UART_MspInit+0x28c>)
 8001478:	2200      	movs	r2, #0
 800147a:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800147c:	4b7c      	ldr	r3, [pc, #496]	; (8001670 <HAL_UART_MspInit+0x28c>)
 800147e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001482:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001484:	4b7a      	ldr	r3, [pc, #488]	; (8001670 <HAL_UART_MspInit+0x28c>)
 8001486:	2200      	movs	r2, #0
 8001488:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800148a:	4b79      	ldr	r3, [pc, #484]	; (8001670 <HAL_UART_MspInit+0x28c>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001490:	4b77      	ldr	r3, [pc, #476]	; (8001670 <HAL_UART_MspInit+0x28c>)
 8001492:	2200      	movs	r2, #0
 8001494:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001496:	4b76      	ldr	r3, [pc, #472]	; (8001670 <HAL_UART_MspInit+0x28c>)
 8001498:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800149c:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800149e:	4b74      	ldr	r3, [pc, #464]	; (8001670 <HAL_UART_MspInit+0x28c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80014a4:	4872      	ldr	r0, [pc, #456]	; (8001670 <HAL_UART_MspInit+0x28c>)
 80014a6:	f000 fcb5 	bl	8001e14 <HAL_DMA_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80014b0:	f7ff ff62 	bl	8001378 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4a6e      	ldr	r2, [pc, #440]	; (8001670 <HAL_UART_MspInit+0x28c>)
 80014b8:	635a      	str	r2, [r3, #52]	; 0x34
 80014ba:	4a6d      	ldr	r2, [pc, #436]	; (8001670 <HAL_UART_MspInit+0x28c>)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80014c0:	4b6d      	ldr	r3, [pc, #436]	; (8001678 <HAL_UART_MspInit+0x294>)
 80014c2:	4a6e      	ldr	r2, [pc, #440]	; (800167c <HAL_UART_MspInit+0x298>)
 80014c4:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80014c6:	4b6c      	ldr	r3, [pc, #432]	; (8001678 <HAL_UART_MspInit+0x294>)
 80014c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014cc:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014ce:	4b6a      	ldr	r3, [pc, #424]	; (8001678 <HAL_UART_MspInit+0x294>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014d4:	4b68      	ldr	r3, [pc, #416]	; (8001678 <HAL_UART_MspInit+0x294>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014da:	4b67      	ldr	r3, [pc, #412]	; (8001678 <HAL_UART_MspInit+0x294>)
 80014dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014e0:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014e2:	4b65      	ldr	r3, [pc, #404]	; (8001678 <HAL_UART_MspInit+0x294>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014e8:	4b63      	ldr	r3, [pc, #396]	; (8001678 <HAL_UART_MspInit+0x294>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80014ee:	4b62      	ldr	r3, [pc, #392]	; (8001678 <HAL_UART_MspInit+0x294>)
 80014f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014f4:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80014f6:	4b60      	ldr	r3, [pc, #384]	; (8001678 <HAL_UART_MspInit+0x294>)
 80014f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014fc:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014fe:	4b5e      	ldr	r3, [pc, #376]	; (8001678 <HAL_UART_MspInit+0x294>)
 8001500:	2200      	movs	r2, #0
 8001502:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001504:	485c      	ldr	r0, [pc, #368]	; (8001678 <HAL_UART_MspInit+0x294>)
 8001506:	f000 fc85 	bl	8001e14 <HAL_DMA_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 8001510:	f7ff ff32 	bl	8001378 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4a58      	ldr	r2, [pc, #352]	; (8001678 <HAL_UART_MspInit+0x294>)
 8001518:	639a      	str	r2, [r3, #56]	; 0x38
 800151a:	4a57      	ldr	r2, [pc, #348]	; (8001678 <HAL_UART_MspInit+0x294>)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001520:	2200      	movs	r2, #0
 8001522:	2100      	movs	r1, #0
 8001524:	2034      	movs	r0, #52	; 0x34
 8001526:	f000 fc3e 	bl	8001da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800152a:	2034      	movs	r0, #52	; 0x34
 800152c:	f000 fc57 	bl	8001dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001530:	e14b      	b.n	80017ca <HAL_UART_MspInit+0x3e6>
  else if(huart->Instance==USART1)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a52      	ldr	r2, [pc, #328]	; (8001680 <HAL_UART_MspInit+0x29c>)
 8001538:	4293      	cmp	r3, r2
 800153a:	f040 80ad 	bne.w	8001698 <HAL_UART_MspInit+0x2b4>
    __HAL_RCC_USART1_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	61bb      	str	r3, [r7, #24]
 8001542:	4b49      	ldr	r3, [pc, #292]	; (8001668 <HAL_UART_MspInit+0x284>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	4a48      	ldr	r2, [pc, #288]	; (8001668 <HAL_UART_MspInit+0x284>)
 8001548:	f043 0310 	orr.w	r3, r3, #16
 800154c:	6453      	str	r3, [r2, #68]	; 0x44
 800154e:	4b46      	ldr	r3, [pc, #280]	; (8001668 <HAL_UART_MspInit+0x284>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001552:	f003 0310 	and.w	r3, r3, #16
 8001556:	61bb      	str	r3, [r7, #24]
 8001558:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	4b42      	ldr	r3, [pc, #264]	; (8001668 <HAL_UART_MspInit+0x284>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a41      	ldr	r2, [pc, #260]	; (8001668 <HAL_UART_MspInit+0x284>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b3f      	ldr	r3, [pc, #252]	; (8001668 <HAL_UART_MspInit+0x284>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001576:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001584:	2303      	movs	r3, #3
 8001586:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001588:	2307      	movs	r3, #7
 800158a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001590:	4619      	mov	r1, r3
 8001592:	483c      	ldr	r0, [pc, #240]	; (8001684 <HAL_UART_MspInit+0x2a0>)
 8001594:	f001 f840 	bl	8002618 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001598:	4b3b      	ldr	r3, [pc, #236]	; (8001688 <HAL_UART_MspInit+0x2a4>)
 800159a:	4a3c      	ldr	r2, [pc, #240]	; (800168c <HAL_UART_MspInit+0x2a8>)
 800159c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800159e:	4b3a      	ldr	r3, [pc, #232]	; (8001688 <HAL_UART_MspInit+0x2a4>)
 80015a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015a4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015a6:	4b38      	ldr	r3, [pc, #224]	; (8001688 <HAL_UART_MspInit+0x2a4>)
 80015a8:	2240      	movs	r2, #64	; 0x40
 80015aa:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015ac:	4b36      	ldr	r3, [pc, #216]	; (8001688 <HAL_UART_MspInit+0x2a4>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015b2:	4b35      	ldr	r3, [pc, #212]	; (8001688 <HAL_UART_MspInit+0x2a4>)
 80015b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015b8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015ba:	4b33      	ldr	r3, [pc, #204]	; (8001688 <HAL_UART_MspInit+0x2a4>)
 80015bc:	2200      	movs	r2, #0
 80015be:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015c0:	4b31      	ldr	r3, [pc, #196]	; (8001688 <HAL_UART_MspInit+0x2a4>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80015c6:	4b30      	ldr	r3, [pc, #192]	; (8001688 <HAL_UART_MspInit+0x2a4>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015cc:	4b2e      	ldr	r3, [pc, #184]	; (8001688 <HAL_UART_MspInit+0x2a4>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015d2:	4b2d      	ldr	r3, [pc, #180]	; (8001688 <HAL_UART_MspInit+0x2a4>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80015d8:	482b      	ldr	r0, [pc, #172]	; (8001688 <HAL_UART_MspInit+0x2a4>)
 80015da:	f000 fc1b 	bl	8001e14 <HAL_DMA_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <HAL_UART_MspInit+0x204>
      Error_Handler();
 80015e4:	f7ff fec8 	bl	8001378 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a27      	ldr	r2, [pc, #156]	; (8001688 <HAL_UART_MspInit+0x2a4>)
 80015ec:	635a      	str	r2, [r3, #52]	; 0x34
 80015ee:	4a26      	ldr	r2, [pc, #152]	; (8001688 <HAL_UART_MspInit+0x2a4>)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80015f4:	4b26      	ldr	r3, [pc, #152]	; (8001690 <HAL_UART_MspInit+0x2ac>)
 80015f6:	4a27      	ldr	r2, [pc, #156]	; (8001694 <HAL_UART_MspInit+0x2b0>)
 80015f8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80015fa:	4b25      	ldr	r3, [pc, #148]	; (8001690 <HAL_UART_MspInit+0x2ac>)
 80015fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001600:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001602:	4b23      	ldr	r3, [pc, #140]	; (8001690 <HAL_UART_MspInit+0x2ac>)
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001608:	4b21      	ldr	r3, [pc, #132]	; (8001690 <HAL_UART_MspInit+0x2ac>)
 800160a:	2200      	movs	r2, #0
 800160c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800160e:	4b20      	ldr	r3, [pc, #128]	; (8001690 <HAL_UART_MspInit+0x2ac>)
 8001610:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001614:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001616:	4b1e      	ldr	r3, [pc, #120]	; (8001690 <HAL_UART_MspInit+0x2ac>)
 8001618:	2200      	movs	r2, #0
 800161a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800161c:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <HAL_UART_MspInit+0x2ac>)
 800161e:	2200      	movs	r2, #0
 8001620:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001622:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <HAL_UART_MspInit+0x2ac>)
 8001624:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001628:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800162a:	4b19      	ldr	r3, [pc, #100]	; (8001690 <HAL_UART_MspInit+0x2ac>)
 800162c:	2200      	movs	r2, #0
 800162e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001630:	4b17      	ldr	r3, [pc, #92]	; (8001690 <HAL_UART_MspInit+0x2ac>)
 8001632:	2200      	movs	r2, #0
 8001634:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001636:	4816      	ldr	r0, [pc, #88]	; (8001690 <HAL_UART_MspInit+0x2ac>)
 8001638:	f000 fbec 	bl	8001e14 <HAL_DMA_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <HAL_UART_MspInit+0x262>
      Error_Handler();
 8001642:	f7ff fe99 	bl	8001378 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a11      	ldr	r2, [pc, #68]	; (8001690 <HAL_UART_MspInit+0x2ac>)
 800164a:	639a      	str	r2, [r3, #56]	; 0x38
 800164c:	4a10      	ldr	r2, [pc, #64]	; (8001690 <HAL_UART_MspInit+0x2ac>)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2100      	movs	r1, #0
 8001656:	2025      	movs	r0, #37	; 0x25
 8001658:	f000 fba5 	bl	8001da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800165c:	2025      	movs	r0, #37	; 0x25
 800165e:	f000 fbbe 	bl	8001dde <HAL_NVIC_EnableIRQ>
}
 8001662:	e0b2      	b.n	80017ca <HAL_UART_MspInit+0x3e6>
 8001664:	40004c00 	.word	0x40004c00
 8001668:	40023800 	.word	0x40023800
 800166c:	40020800 	.word	0x40020800
 8001670:	200006dc 	.word	0x200006dc
 8001674:	40026070 	.word	0x40026070
 8001678:	20000430 	.word	0x20000430
 800167c:	40026040 	.word	0x40026040
 8001680:	40011000 	.word	0x40011000
 8001684:	40020000 	.word	0x40020000
 8001688:	200004f0 	.word	0x200004f0
 800168c:	400264b8 	.word	0x400264b8
 8001690:	20000550 	.word	0x20000550
 8001694:	40026440 	.word	0x40026440
  else if(huart->Instance==USART2)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a4d      	ldr	r2, [pc, #308]	; (80017d4 <HAL_UART_MspInit+0x3f0>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	f040 8093 	bne.w	80017ca <HAL_UART_MspInit+0x3e6>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016a4:	2300      	movs	r3, #0
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	4b4b      	ldr	r3, [pc, #300]	; (80017d8 <HAL_UART_MspInit+0x3f4>)
 80016aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ac:	4a4a      	ldr	r2, [pc, #296]	; (80017d8 <HAL_UART_MspInit+0x3f4>)
 80016ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b2:	6413      	str	r3, [r2, #64]	; 0x40
 80016b4:	4b48      	ldr	r3, [pc, #288]	; (80017d8 <HAL_UART_MspInit+0x3f4>)
 80016b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016bc:	613b      	str	r3, [r7, #16]
 80016be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c0:	2300      	movs	r3, #0
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	4b44      	ldr	r3, [pc, #272]	; (80017d8 <HAL_UART_MspInit+0x3f4>)
 80016c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c8:	4a43      	ldr	r2, [pc, #268]	; (80017d8 <HAL_UART_MspInit+0x3f4>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	6313      	str	r3, [r2, #48]	; 0x30
 80016d0:	4b41      	ldr	r3, [pc, #260]	; (80017d8 <HAL_UART_MspInit+0x3f4>)
 80016d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016dc:	230c      	movs	r3, #12
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e0:	2302      	movs	r3, #2
 80016e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e8:	2303      	movs	r3, #3
 80016ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016ec:	2307      	movs	r3, #7
 80016ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f4:	4619      	mov	r1, r3
 80016f6:	4839      	ldr	r0, [pc, #228]	; (80017dc <HAL_UART_MspInit+0x3f8>)
 80016f8:	f000 ff8e 	bl	8002618 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80016fc:	4b38      	ldr	r3, [pc, #224]	; (80017e0 <HAL_UART_MspInit+0x3fc>)
 80016fe:	4a39      	ldr	r2, [pc, #228]	; (80017e4 <HAL_UART_MspInit+0x400>)
 8001700:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001702:	4b37      	ldr	r3, [pc, #220]	; (80017e0 <HAL_UART_MspInit+0x3fc>)
 8001704:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001708:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800170a:	4b35      	ldr	r3, [pc, #212]	; (80017e0 <HAL_UART_MspInit+0x3fc>)
 800170c:	2240      	movs	r2, #64	; 0x40
 800170e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001710:	4b33      	ldr	r3, [pc, #204]	; (80017e0 <HAL_UART_MspInit+0x3fc>)
 8001712:	2200      	movs	r2, #0
 8001714:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001716:	4b32      	ldr	r3, [pc, #200]	; (80017e0 <HAL_UART_MspInit+0x3fc>)
 8001718:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800171c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800171e:	4b30      	ldr	r3, [pc, #192]	; (80017e0 <HAL_UART_MspInit+0x3fc>)
 8001720:	2200      	movs	r2, #0
 8001722:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001724:	4b2e      	ldr	r3, [pc, #184]	; (80017e0 <HAL_UART_MspInit+0x3fc>)
 8001726:	2200      	movs	r2, #0
 8001728:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800172a:	4b2d      	ldr	r3, [pc, #180]	; (80017e0 <HAL_UART_MspInit+0x3fc>)
 800172c:	2200      	movs	r2, #0
 800172e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001730:	4b2b      	ldr	r3, [pc, #172]	; (80017e0 <HAL_UART_MspInit+0x3fc>)
 8001732:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001736:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001738:	4b29      	ldr	r3, [pc, #164]	; (80017e0 <HAL_UART_MspInit+0x3fc>)
 800173a:	2200      	movs	r2, #0
 800173c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800173e:	4828      	ldr	r0, [pc, #160]	; (80017e0 <HAL_UART_MspInit+0x3fc>)
 8001740:	f000 fb68 	bl	8001e14 <HAL_DMA_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <HAL_UART_MspInit+0x36a>
      Error_Handler();
 800174a:	f7ff fe15 	bl	8001378 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a23      	ldr	r2, [pc, #140]	; (80017e0 <HAL_UART_MspInit+0x3fc>)
 8001752:	635a      	str	r2, [r3, #52]	; 0x34
 8001754:	4a22      	ldr	r2, [pc, #136]	; (80017e0 <HAL_UART_MspInit+0x3fc>)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800175a:	4b23      	ldr	r3, [pc, #140]	; (80017e8 <HAL_UART_MspInit+0x404>)
 800175c:	4a23      	ldr	r2, [pc, #140]	; (80017ec <HAL_UART_MspInit+0x408>)
 800175e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001760:	4b21      	ldr	r3, [pc, #132]	; (80017e8 <HAL_UART_MspInit+0x404>)
 8001762:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001766:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001768:	4b1f      	ldr	r3, [pc, #124]	; (80017e8 <HAL_UART_MspInit+0x404>)
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800176e:	4b1e      	ldr	r3, [pc, #120]	; (80017e8 <HAL_UART_MspInit+0x404>)
 8001770:	2200      	movs	r2, #0
 8001772:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001774:	4b1c      	ldr	r3, [pc, #112]	; (80017e8 <HAL_UART_MspInit+0x404>)
 8001776:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800177a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800177c:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <HAL_UART_MspInit+0x404>)
 800177e:	2200      	movs	r2, #0
 8001780:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001782:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <HAL_UART_MspInit+0x404>)
 8001784:	2200      	movs	r2, #0
 8001786:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001788:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <HAL_UART_MspInit+0x404>)
 800178a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800178e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001790:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <HAL_UART_MspInit+0x404>)
 8001792:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001796:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001798:	4b13      	ldr	r3, [pc, #76]	; (80017e8 <HAL_UART_MspInit+0x404>)
 800179a:	2200      	movs	r2, #0
 800179c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800179e:	4812      	ldr	r0, [pc, #72]	; (80017e8 <HAL_UART_MspInit+0x404>)
 80017a0:	f000 fb38 	bl	8001e14 <HAL_DMA_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <HAL_UART_MspInit+0x3ca>
      Error_Handler();
 80017aa:	f7ff fde5 	bl	8001378 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a0d      	ldr	r2, [pc, #52]	; (80017e8 <HAL_UART_MspInit+0x404>)
 80017b2:	639a      	str	r2, [r3, #56]	; 0x38
 80017b4:	4a0c      	ldr	r2, [pc, #48]	; (80017e8 <HAL_UART_MspInit+0x404>)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017ba:	2200      	movs	r2, #0
 80017bc:	2100      	movs	r1, #0
 80017be:	2026      	movs	r0, #38	; 0x26
 80017c0:	f000 faf1 	bl	8001da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017c4:	2026      	movs	r0, #38	; 0x26
 80017c6:	f000 fb0a 	bl	8001dde <HAL_NVIC_EnableIRQ>
}
 80017ca:	bf00      	nop
 80017cc:	3738      	adds	r7, #56	; 0x38
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40004400 	.word	0x40004400
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40020000 	.word	0x40020000
 80017e0:	200005b0 	.word	0x200005b0
 80017e4:	400260a0 	.word	0x400260a0
 80017e8:	20000490 	.word	0x20000490
 80017ec:	40026088 	.word	0x40026088

080017f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <NMI_Handler+0x4>

080017f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017fa:	e7fe      	b.n	80017fa <HardFault_Handler+0x4>

080017fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001800:	e7fe      	b.n	8001800 <MemManage_Handler+0x4>

08001802 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001806:	e7fe      	b.n	8001806 <BusFault_Handler+0x4>

08001808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800180c:	e7fe      	b.n	800180c <UsageFault_Handler+0x4>

0800180e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800183c:	f000 f994 	bl	8001b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}

08001844 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001848:	4802      	ldr	r0, [pc, #8]	; (8001854 <DMA1_Stream2_IRQHandler+0x10>)
 800184a:	f000 fc7b 	bl	8002144 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000430 	.word	0x20000430

08001858 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800185c:	4802      	ldr	r0, [pc, #8]	; (8001868 <DMA1_Stream4_IRQHandler+0x10>)
 800185e:	f000 fc71 	bl	8002144 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	200006dc 	.word	0x200006dc

0800186c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001870:	4802      	ldr	r0, [pc, #8]	; (800187c <DMA1_Stream5_IRQHandler+0x10>)
 8001872:	f000 fc67 	bl	8002144 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000490 	.word	0x20000490

08001880 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001884:	4802      	ldr	r0, [pc, #8]	; (8001890 <DMA1_Stream6_IRQHandler+0x10>)
 8001886:	f000 fc5d 	bl	8002144 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200005b0 	.word	0x200005b0

08001894 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001898:	4802      	ldr	r0, [pc, #8]	; (80018a4 <USART1_IRQHandler+0x10>)
 800189a:	f001 fe75 	bl	8003588 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000610 	.word	0x20000610

080018a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018ac:	4802      	ldr	r0, [pc, #8]	; (80018b8 <USART2_IRQHandler+0x10>)
 80018ae:	f001 fe6b 	bl	8003588 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000698 	.word	0x20000698

080018bc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80018c0:	4802      	ldr	r0, [pc, #8]	; (80018cc <UART4_IRQHandler+0x10>)
 80018c2:	f001 fe61 	bl	8003588 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000654 	.word	0x20000654

080018d0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80018d4:	4802      	ldr	r0, [pc, #8]	; (80018e0 <DMA2_Stream2_IRQHandler+0x10>)
 80018d6:	f000 fc35 	bl	8002144 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000550 	.word	0x20000550

080018e4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80018e8:	4802      	ldr	r0, [pc, #8]	; (80018f4 <DMA2_Stream7_IRQHandler+0x10>)
 80018ea:	f000 fc2b 	bl	8002144 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	200004f0 	.word	0x200004f0

080018f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
	return 1;
 80018fc:	2301      	movs	r3, #1
}
 80018fe:	4618      	mov	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <_kill>:

int _kill(int pid, int sig)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001912:	f003 fa61 	bl	8004dd8 <__errno>
 8001916:	4603      	mov	r3, r0
 8001918:	2216      	movs	r2, #22
 800191a:	601a      	str	r2, [r3, #0]
	return -1;
 800191c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001920:	4618      	mov	r0, r3
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <_exit>:

void _exit (int status)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001930:	f04f 31ff 	mov.w	r1, #4294967295
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff ffe7 	bl	8001908 <_kill>
	while (1) {}		/* Make sure we hang here */
 800193a:	e7fe      	b.n	800193a <_exit+0x12>

0800193c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	e00a      	b.n	8001964 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800194e:	f3af 8000 	nop.w
 8001952:	4601      	mov	r1, r0
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	1c5a      	adds	r2, r3, #1
 8001958:	60ba      	str	r2, [r7, #8]
 800195a:	b2ca      	uxtb	r2, r1
 800195c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	3301      	adds	r3, #1
 8001962:	617b      	str	r3, [r7, #20]
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	429a      	cmp	r2, r3
 800196a:	dbf0      	blt.n	800194e <_read+0x12>
	}

return len;
 800196c:	687b      	ldr	r3, [r7, #4]
}
 800196e:	4618      	mov	r0, r3
 8001970:	3718      	adds	r7, #24
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
	return -1;
 800197e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001982:	4618      	mov	r0, r3
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
 8001996:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800199e:	605a      	str	r2, [r3, #4]
	return 0;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <_isatty>:

int _isatty(int file)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
	return 1;
 80019b6:	2301      	movs	r3, #1
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
	return 0;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3714      	adds	r7, #20
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
	...

080019e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019e8:	4a14      	ldr	r2, [pc, #80]	; (8001a3c <_sbrk+0x5c>)
 80019ea:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <_sbrk+0x60>)
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019f4:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <_sbrk+0x64>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d102      	bne.n	8001a02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019fc:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <_sbrk+0x64>)
 80019fe:	4a12      	ldr	r2, [pc, #72]	; (8001a48 <_sbrk+0x68>)
 8001a00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a02:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <_sbrk+0x64>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4413      	add	r3, r2
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d207      	bcs.n	8001a20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a10:	f003 f9e2 	bl	8004dd8 <__errno>
 8001a14:	4603      	mov	r3, r0
 8001a16:	220c      	movs	r2, #12
 8001a18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a1e:	e009      	b.n	8001a34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a20:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <_sbrk+0x64>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a26:	4b07      	ldr	r3, [pc, #28]	; (8001a44 <_sbrk+0x64>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	4a05      	ldr	r2, [pc, #20]	; (8001a44 <_sbrk+0x64>)
 8001a30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a32:	68fb      	ldr	r3, [r7, #12]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20020000 	.word	0x20020000
 8001a40:	00000400 	.word	0x00000400
 8001a44:	200001fc 	.word	0x200001fc
 8001a48:	20001d30 	.word	0x20001d30

08001a4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a50:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <SystemInit+0x20>)
 8001a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a56:	4a05      	ldr	r2, [pc, #20]	; (8001a6c <SystemInit+0x20>)
 8001a58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001aa8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a74:	480d      	ldr	r0, [pc, #52]	; (8001aac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a76:	490e      	ldr	r1, [pc, #56]	; (8001ab0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a78:	4a0e      	ldr	r2, [pc, #56]	; (8001ab4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a7c:	e002      	b.n	8001a84 <LoopCopyDataInit>

08001a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a82:	3304      	adds	r3, #4

08001a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a88:	d3f9      	bcc.n	8001a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a8a:	4a0b      	ldr	r2, [pc, #44]	; (8001ab8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a8c:	4c0b      	ldr	r4, [pc, #44]	; (8001abc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a90:	e001      	b.n	8001a96 <LoopFillZerobss>

08001a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a94:	3204      	adds	r2, #4

08001a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a98:	d3fb      	bcc.n	8001a92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a9a:	f7ff ffd7 	bl	8001a4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a9e:	f003 f9a1 	bl	8004de4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aa2:	f7ff fab7 	bl	8001014 <main>
  bx  lr    
 8001aa6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001aa8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ab0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001ab4:	0800a0f4 	.word	0x0800a0f4
  ldr r2, =_sbss
 8001ab8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001abc:	20001d2c 	.word	0x20001d2c

08001ac0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ac0:	e7fe      	b.n	8001ac0 <ADC_IRQHandler>
	...

08001ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ac8:	4b0e      	ldr	r3, [pc, #56]	; (8001b04 <HAL_Init+0x40>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a0d      	ldr	r2, [pc, #52]	; (8001b04 <HAL_Init+0x40>)
 8001ace:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ad2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ad4:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <HAL_Init+0x40>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a0a      	ldr	r2, [pc, #40]	; (8001b04 <HAL_Init+0x40>)
 8001ada:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ade:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ae0:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <HAL_Init+0x40>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a07      	ldr	r2, [pc, #28]	; (8001b04 <HAL_Init+0x40>)
 8001ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aec:	2003      	movs	r0, #3
 8001aee:	f000 f94f 	bl	8001d90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001af2:	200f      	movs	r0, #15
 8001af4:	f000 f808 	bl	8001b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001af8:	f7ff fc4c 	bl	8001394 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40023c00 	.word	0x40023c00

08001b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b10:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <HAL_InitTick+0x54>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_InitTick+0x58>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 f967 	bl	8001dfa <HAL_SYSTICK_Config>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e00e      	b.n	8001b54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b0f      	cmp	r3, #15
 8001b3a:	d80a      	bhi.n	8001b52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	f04f 30ff 	mov.w	r0, #4294967295
 8001b44:	f000 f92f 	bl	8001da6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b48:	4a06      	ldr	r2, [pc, #24]	; (8001b64 <HAL_InitTick+0x5c>)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	e000      	b.n	8001b54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20000000 	.word	0x20000000
 8001b60:	20000008 	.word	0x20000008
 8001b64:	20000004 	.word	0x20000004

08001b68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <HAL_IncTick+0x20>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	461a      	mov	r2, r3
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <HAL_IncTick+0x24>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4413      	add	r3, r2
 8001b78:	4a04      	ldr	r2, [pc, #16]	; (8001b8c <HAL_IncTick+0x24>)
 8001b7a:	6013      	str	r3, [r2, #0]
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	20000008 	.word	0x20000008
 8001b8c:	2000073c 	.word	0x2000073c

08001b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return uwTick;
 8001b94:	4b03      	ldr	r3, [pc, #12]	; (8001ba4 <HAL_GetTick+0x14>)
 8001b96:	681b      	ldr	r3, [r3, #0]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	2000073c 	.word	0x2000073c

08001ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bb0:	f7ff ffee 	bl	8001b90 <HAL_GetTick>
 8001bb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc0:	d005      	beq.n	8001bce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bc2:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <HAL_Delay+0x44>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4413      	add	r3, r2
 8001bcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bce:	bf00      	nop
 8001bd0:	f7ff ffde 	bl	8001b90 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d8f7      	bhi.n	8001bd0 <HAL_Delay+0x28>
  {
  }
}
 8001be0:	bf00      	nop
 8001be2:	bf00      	nop
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000008 	.word	0x20000008

08001bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c00:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <__NVIC_SetPriorityGrouping+0x44>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c06:	68ba      	ldr	r2, [r7, #8]
 8001c08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c22:	4a04      	ldr	r2, [pc, #16]	; (8001c34 <__NVIC_SetPriorityGrouping+0x44>)
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	60d3      	str	r3, [r2, #12]
}
 8001c28:	bf00      	nop
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c3c:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <__NVIC_GetPriorityGrouping+0x18>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	0a1b      	lsrs	r3, r3, #8
 8001c42:	f003 0307 	and.w	r3, r3, #7
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	db0b      	blt.n	8001c7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	f003 021f 	and.w	r2, r3, #31
 8001c6c:	4907      	ldr	r1, [pc, #28]	; (8001c8c <__NVIC_EnableIRQ+0x38>)
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	095b      	lsrs	r3, r3, #5
 8001c74:	2001      	movs	r0, #1
 8001c76:	fa00 f202 	lsl.w	r2, r0, r2
 8001c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	e000e100 	.word	0xe000e100

08001c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	6039      	str	r1, [r7, #0]
 8001c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	db0a      	blt.n	8001cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	490c      	ldr	r1, [pc, #48]	; (8001cdc <__NVIC_SetPriority+0x4c>)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	0112      	lsls	r2, r2, #4
 8001cb0:	b2d2      	uxtb	r2, r2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb8:	e00a      	b.n	8001cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	4908      	ldr	r1, [pc, #32]	; (8001ce0 <__NVIC_SetPriority+0x50>)
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	3b04      	subs	r3, #4
 8001cc8:	0112      	lsls	r2, r2, #4
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	440b      	add	r3, r1
 8001cce:	761a      	strb	r2, [r3, #24]
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	e000e100 	.word	0xe000e100
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b089      	sub	sp, #36	; 0x24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f1c3 0307 	rsb	r3, r3, #7
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	bf28      	it	cs
 8001d02:	2304      	movcs	r3, #4
 8001d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3304      	adds	r3, #4
 8001d0a:	2b06      	cmp	r3, #6
 8001d0c:	d902      	bls.n	8001d14 <NVIC_EncodePriority+0x30>
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3b03      	subs	r3, #3
 8001d12:	e000      	b.n	8001d16 <NVIC_EncodePriority+0x32>
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d18:	f04f 32ff 	mov.w	r2, #4294967295
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43da      	mvns	r2, r3
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	401a      	ands	r2, r3
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	fa01 f303 	lsl.w	r3, r1, r3
 8001d36:	43d9      	mvns	r1, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d3c:	4313      	orrs	r3, r2
         );
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3724      	adds	r7, #36	; 0x24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
	...

08001d4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3b01      	subs	r3, #1
 8001d58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d5c:	d301      	bcc.n	8001d62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e00f      	b.n	8001d82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d62:	4a0a      	ldr	r2, [pc, #40]	; (8001d8c <SysTick_Config+0x40>)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d6a:	210f      	movs	r1, #15
 8001d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d70:	f7ff ff8e 	bl	8001c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d74:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <SysTick_Config+0x40>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d7a:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <SysTick_Config+0x40>)
 8001d7c:	2207      	movs	r2, #7
 8001d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	e000e010 	.word	0xe000e010

08001d90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff ff29 	bl	8001bf0 <__NVIC_SetPriorityGrouping>
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b086      	sub	sp, #24
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	4603      	mov	r3, r0
 8001dae:	60b9      	str	r1, [r7, #8]
 8001db0:	607a      	str	r2, [r7, #4]
 8001db2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001db8:	f7ff ff3e 	bl	8001c38 <__NVIC_GetPriorityGrouping>
 8001dbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	68b9      	ldr	r1, [r7, #8]
 8001dc2:	6978      	ldr	r0, [r7, #20]
 8001dc4:	f7ff ff8e 	bl	8001ce4 <NVIC_EncodePriority>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dce:	4611      	mov	r1, r2
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff ff5d 	bl	8001c90 <__NVIC_SetPriority>
}
 8001dd6:	bf00      	nop
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	4603      	mov	r3, r0
 8001de6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff ff31 	bl	8001c54 <__NVIC_EnableIRQ>
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7ff ffa2 	bl	8001d4c <SysTick_Config>
 8001e08:	4603      	mov	r3, r0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
	...

08001e14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e20:	f7ff feb6 	bl	8001b90 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e099      	b.n	8001f64 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2202      	movs	r2, #2
 8001e34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 0201 	bic.w	r2, r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e50:	e00f      	b.n	8001e72 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e52:	f7ff fe9d 	bl	8001b90 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b05      	cmp	r3, #5
 8001e5e:	d908      	bls.n	8001e72 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2220      	movs	r2, #32
 8001e64:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2203      	movs	r2, #3
 8001e6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e078      	b.n	8001f64 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1e8      	bne.n	8001e52 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	4b38      	ldr	r3, [pc, #224]	; (8001f6c <HAL_DMA_Init+0x158>)
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eaa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec8:	2b04      	cmp	r3, #4
 8001eca:	d107      	bne.n	8001edc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	f023 0307 	bic.w	r3, r3, #7
 8001ef2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	d117      	bne.n	8001f36 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d00e      	beq.n	8001f36 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 fb01 	bl	8002520 <DMA_CheckFifoParam>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d008      	beq.n	8001f36 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2240      	movs	r2, #64	; 0x40
 8001f28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f32:	2301      	movs	r3, #1
 8001f34:	e016      	b.n	8001f64 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	697a      	ldr	r2, [r7, #20]
 8001f3c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 fab8 	bl	80024b4 <DMA_CalcBaseAndBitshift>
 8001f44:	4603      	mov	r3, r0
 8001f46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4c:	223f      	movs	r2, #63	; 0x3f
 8001f4e:	409a      	lsls	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	f010803f 	.word	0xf010803f

08001f70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
 8001f7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f86:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d101      	bne.n	8001f96 <HAL_DMA_Start_IT+0x26>
 8001f92:	2302      	movs	r3, #2
 8001f94:	e040      	b.n	8002018 <HAL_DMA_Start_IT+0xa8>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d12f      	bne.n	800200a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2202      	movs	r2, #2
 8001fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	68b9      	ldr	r1, [r7, #8]
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f000 fa4a 	bl	8002458 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc8:	223f      	movs	r2, #63	; 0x3f
 8001fca:	409a      	lsls	r2, r3
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f042 0216 	orr.w	r2, r2, #22
 8001fde:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d007      	beq.n	8001ff8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f042 0208 	orr.w	r2, r2, #8
 8001ff6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f042 0201 	orr.w	r2, r2, #1
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	e005      	b.n	8002016 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002012:	2302      	movs	r3, #2
 8002014:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002016:	7dfb      	ldrb	r3, [r7, #23]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800202e:	f7ff fdaf 	bl	8001b90 <HAL_GetTick>
 8002032:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800203a:	b2db      	uxtb	r3, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d008      	beq.n	8002052 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2280      	movs	r2, #128	; 0x80
 8002044:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e052      	b.n	80020f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 0216 	bic.w	r2, r2, #22
 8002060:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	695a      	ldr	r2, [r3, #20]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002070:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	2b00      	cmp	r3, #0
 8002078:	d103      	bne.n	8002082 <HAL_DMA_Abort+0x62>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800207e:	2b00      	cmp	r3, #0
 8002080:	d007      	beq.n	8002092 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0208 	bic.w	r2, r2, #8
 8002090:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 0201 	bic.w	r2, r2, #1
 80020a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020a2:	e013      	b.n	80020cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020a4:	f7ff fd74 	bl	8001b90 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b05      	cmp	r3, #5
 80020b0:	d90c      	bls.n	80020cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2220      	movs	r2, #32
 80020b6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2203      	movs	r2, #3
 80020bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e015      	b.n	80020f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1e4      	bne.n	80020a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020de:	223f      	movs	r2, #63	; 0x3f
 80020e0:	409a      	lsls	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d004      	beq.n	800211e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2280      	movs	r2, #128	; 0x80
 8002118:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e00c      	b.n	8002138 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2205      	movs	r2, #5
 8002122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 0201 	bic.w	r2, r2, #1
 8002134:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800214c:	2300      	movs	r3, #0
 800214e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002150:	4b92      	ldr	r3, [pc, #584]	; (800239c <HAL_DMA_IRQHandler+0x258>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a92      	ldr	r2, [pc, #584]	; (80023a0 <HAL_DMA_IRQHandler+0x25c>)
 8002156:	fba2 2303 	umull	r2, r3, r2, r3
 800215a:	0a9b      	lsrs	r3, r3, #10
 800215c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002162:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216e:	2208      	movs	r2, #8
 8002170:	409a      	lsls	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	4013      	ands	r3, r2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d01a      	beq.n	80021b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	d013      	beq.n	80021b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0204 	bic.w	r2, r2, #4
 8002196:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800219c:	2208      	movs	r2, #8
 800219e:	409a      	lsls	r2, r3
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a8:	f043 0201 	orr.w	r2, r3, #1
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b4:	2201      	movs	r2, #1
 80021b6:	409a      	lsls	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	4013      	ands	r3, r2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d012      	beq.n	80021e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00b      	beq.n	80021e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d2:	2201      	movs	r2, #1
 80021d4:	409a      	lsls	r2, r3
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021de:	f043 0202 	orr.w	r2, r3, #2
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ea:	2204      	movs	r2, #4
 80021ec:	409a      	lsls	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	4013      	ands	r3, r2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d012      	beq.n	800221c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00b      	beq.n	800221c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002208:	2204      	movs	r2, #4
 800220a:	409a      	lsls	r2, r3
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002214:	f043 0204 	orr.w	r2, r3, #4
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002220:	2210      	movs	r2, #16
 8002222:	409a      	lsls	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4013      	ands	r3, r2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d043      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	2b00      	cmp	r3, #0
 8002238:	d03c      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800223e:	2210      	movs	r2, #16
 8002240:	409a      	lsls	r2, r3
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d018      	beq.n	8002286 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d108      	bne.n	8002274 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	2b00      	cmp	r3, #0
 8002268:	d024      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	4798      	blx	r3
 8002272:	e01f      	b.n	80022b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002278:	2b00      	cmp	r3, #0
 800227a:	d01b      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	4798      	blx	r3
 8002284:	e016      	b.n	80022b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002290:	2b00      	cmp	r3, #0
 8002292:	d107      	bne.n	80022a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 0208 	bic.w	r2, r2, #8
 80022a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b8:	2220      	movs	r2, #32
 80022ba:	409a      	lsls	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	4013      	ands	r3, r2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 808e 	beq.w	80023e2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0310 	and.w	r3, r3, #16
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 8086 	beq.w	80023e2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022da:	2220      	movs	r2, #32
 80022dc:	409a      	lsls	r2, r3
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b05      	cmp	r3, #5
 80022ec:	d136      	bne.n	800235c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 0216 	bic.w	r2, r2, #22
 80022fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	695a      	ldr	r2, [r3, #20]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800230c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	2b00      	cmp	r3, #0
 8002314:	d103      	bne.n	800231e <HAL_DMA_IRQHandler+0x1da>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800231a:	2b00      	cmp	r3, #0
 800231c:	d007      	beq.n	800232e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 0208 	bic.w	r2, r2, #8
 800232c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002332:	223f      	movs	r2, #63	; 0x3f
 8002334:	409a      	lsls	r2, r3
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800234e:	2b00      	cmp	r3, #0
 8002350:	d07d      	beq.n	800244e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	4798      	blx	r3
        }
        return;
 800235a:	e078      	b.n	800244e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d01c      	beq.n	80023a4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d108      	bne.n	800238a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237c:	2b00      	cmp	r3, #0
 800237e:	d030      	beq.n	80023e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	4798      	blx	r3
 8002388:	e02b      	b.n	80023e2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800238e:	2b00      	cmp	r3, #0
 8002390:	d027      	beq.n	80023e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	4798      	blx	r3
 800239a:	e022      	b.n	80023e2 <HAL_DMA_IRQHandler+0x29e>
 800239c:	20000000 	.word	0x20000000
 80023a0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10f      	bne.n	80023d2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 0210 	bic.w	r2, r2, #16
 80023c0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d032      	beq.n	8002450 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d022      	beq.n	800243c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2205      	movs	r2, #5
 80023fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 0201 	bic.w	r2, r2, #1
 800240c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	3301      	adds	r3, #1
 8002412:	60bb      	str	r3, [r7, #8]
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	429a      	cmp	r2, r3
 8002418:	d307      	bcc.n	800242a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1f2      	bne.n	800240e <HAL_DMA_IRQHandler+0x2ca>
 8002428:	e000      	b.n	800242c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800242a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002440:	2b00      	cmp	r3, #0
 8002442:	d005      	beq.n	8002450 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	4798      	blx	r3
 800244c:	e000      	b.n	8002450 <HAL_DMA_IRQHandler+0x30c>
        return;
 800244e:	bf00      	nop
    }
  }
}
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop

08002458 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
 8002464:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002474:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	2b40      	cmp	r3, #64	; 0x40
 8002484:	d108      	bne.n	8002498 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68ba      	ldr	r2, [r7, #8]
 8002494:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002496:	e007      	b.n	80024a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	60da      	str	r2, [r3, #12]
}
 80024a8:	bf00      	nop
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	3b10      	subs	r3, #16
 80024c4:	4a14      	ldr	r2, [pc, #80]	; (8002518 <DMA_CalcBaseAndBitshift+0x64>)
 80024c6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ca:	091b      	lsrs	r3, r3, #4
 80024cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024ce:	4a13      	ldr	r2, [pc, #76]	; (800251c <DMA_CalcBaseAndBitshift+0x68>)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4413      	add	r3, r2
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	461a      	mov	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2b03      	cmp	r3, #3
 80024e0:	d909      	bls.n	80024f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024ea:	f023 0303 	bic.w	r3, r3, #3
 80024ee:	1d1a      	adds	r2, r3, #4
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	659a      	str	r2, [r3, #88]	; 0x58
 80024f4:	e007      	b.n	8002506 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024fe:	f023 0303 	bic.w	r3, r3, #3
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800250a:	4618      	mov	r0, r3
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	aaaaaaab 	.word	0xaaaaaaab
 800251c:	08009c28 	.word	0x08009c28

08002520 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002528:	2300      	movs	r3, #0
 800252a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002530:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d11f      	bne.n	800257a <DMA_CheckFifoParam+0x5a>
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	2b03      	cmp	r3, #3
 800253e:	d856      	bhi.n	80025ee <DMA_CheckFifoParam+0xce>
 8002540:	a201      	add	r2, pc, #4	; (adr r2, 8002548 <DMA_CheckFifoParam+0x28>)
 8002542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002546:	bf00      	nop
 8002548:	08002559 	.word	0x08002559
 800254c:	0800256b 	.word	0x0800256b
 8002550:	08002559 	.word	0x08002559
 8002554:	080025ef 	.word	0x080025ef
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d046      	beq.n	80025f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002568:	e043      	b.n	80025f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002572:	d140      	bne.n	80025f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002578:	e03d      	b.n	80025f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002582:	d121      	bne.n	80025c8 <DMA_CheckFifoParam+0xa8>
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	2b03      	cmp	r3, #3
 8002588:	d837      	bhi.n	80025fa <DMA_CheckFifoParam+0xda>
 800258a:	a201      	add	r2, pc, #4	; (adr r2, 8002590 <DMA_CheckFifoParam+0x70>)
 800258c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002590:	080025a1 	.word	0x080025a1
 8002594:	080025a7 	.word	0x080025a7
 8002598:	080025a1 	.word	0x080025a1
 800259c:	080025b9 	.word	0x080025b9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	73fb      	strb	r3, [r7, #15]
      break;
 80025a4:	e030      	b.n	8002608 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d025      	beq.n	80025fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025b6:	e022      	b.n	80025fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025c0:	d11f      	bne.n	8002602 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025c6:	e01c      	b.n	8002602 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d903      	bls.n	80025d6 <DMA_CheckFifoParam+0xb6>
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	2b03      	cmp	r3, #3
 80025d2:	d003      	beq.n	80025dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025d4:	e018      	b.n	8002608 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	73fb      	strb	r3, [r7, #15]
      break;
 80025da:	e015      	b.n	8002608 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00e      	beq.n	8002606 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	73fb      	strb	r3, [r7, #15]
      break;
 80025ec:	e00b      	b.n	8002606 <DMA_CheckFifoParam+0xe6>
      break;
 80025ee:	bf00      	nop
 80025f0:	e00a      	b.n	8002608 <DMA_CheckFifoParam+0xe8>
      break;
 80025f2:	bf00      	nop
 80025f4:	e008      	b.n	8002608 <DMA_CheckFifoParam+0xe8>
      break;
 80025f6:	bf00      	nop
 80025f8:	e006      	b.n	8002608 <DMA_CheckFifoParam+0xe8>
      break;
 80025fa:	bf00      	nop
 80025fc:	e004      	b.n	8002608 <DMA_CheckFifoParam+0xe8>
      break;
 80025fe:	bf00      	nop
 8002600:	e002      	b.n	8002608 <DMA_CheckFifoParam+0xe8>
      break;   
 8002602:	bf00      	nop
 8002604:	e000      	b.n	8002608 <DMA_CheckFifoParam+0xe8>
      break;
 8002606:	bf00      	nop
    }
  } 
  
  return status; 
 8002608:	7bfb      	ldrb	r3, [r7, #15]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop

08002618 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002618:	b480      	push	{r7}
 800261a:	b089      	sub	sp, #36	; 0x24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002622:	2300      	movs	r3, #0
 8002624:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002626:	2300      	movs	r3, #0
 8002628:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800262a:	2300      	movs	r3, #0
 800262c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800262e:	2300      	movs	r3, #0
 8002630:	61fb      	str	r3, [r7, #28]
 8002632:	e16b      	b.n	800290c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002634:	2201      	movs	r2, #1
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	4013      	ands	r3, r2
 8002646:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	429a      	cmp	r2, r3
 800264e:	f040 815a 	bne.w	8002906 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	2b01      	cmp	r3, #1
 800265c:	d005      	beq.n	800266a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002666:	2b02      	cmp	r3, #2
 8002668:	d130      	bne.n	80026cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	2203      	movs	r2, #3
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	43db      	mvns	r3, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4013      	ands	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	68da      	ldr	r2, [r3, #12]
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4313      	orrs	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026a0:	2201      	movs	r2, #1
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	091b      	lsrs	r3, r3, #4
 80026b6:	f003 0201 	and.w	r2, r3, #1
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f003 0303 	and.w	r3, r3, #3
 80026d4:	2b03      	cmp	r3, #3
 80026d6:	d017      	beq.n	8002708 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	2203      	movs	r2, #3
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f003 0303 	and.w	r3, r3, #3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d123      	bne.n	800275c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	08da      	lsrs	r2, r3, #3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3208      	adds	r2, #8
 800271c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002720:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	220f      	movs	r2, #15
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4013      	ands	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	691a      	ldr	r2, [r3, #16]
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4313      	orrs	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	08da      	lsrs	r2, r3, #3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	3208      	adds	r2, #8
 8002756:	69b9      	ldr	r1, [r7, #24]
 8002758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	2203      	movs	r2, #3
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43db      	mvns	r3, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4013      	ands	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 0203 	and.w	r2, r3, #3
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 80b4 	beq.w	8002906 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	4b60      	ldr	r3, [pc, #384]	; (8002924 <HAL_GPIO_Init+0x30c>)
 80027a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a6:	4a5f      	ldr	r2, [pc, #380]	; (8002924 <HAL_GPIO_Init+0x30c>)
 80027a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027ac:	6453      	str	r3, [r2, #68]	; 0x44
 80027ae:	4b5d      	ldr	r3, [pc, #372]	; (8002924 <HAL_GPIO_Init+0x30c>)
 80027b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027ba:	4a5b      	ldr	r2, [pc, #364]	; (8002928 <HAL_GPIO_Init+0x310>)
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	089b      	lsrs	r3, r3, #2
 80027c0:	3302      	adds	r3, #2
 80027c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f003 0303 	and.w	r3, r3, #3
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	220f      	movs	r2, #15
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43db      	mvns	r3, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4013      	ands	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a52      	ldr	r2, [pc, #328]	; (800292c <HAL_GPIO_Init+0x314>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d02b      	beq.n	800283e <HAL_GPIO_Init+0x226>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a51      	ldr	r2, [pc, #324]	; (8002930 <HAL_GPIO_Init+0x318>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d025      	beq.n	800283a <HAL_GPIO_Init+0x222>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a50      	ldr	r2, [pc, #320]	; (8002934 <HAL_GPIO_Init+0x31c>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d01f      	beq.n	8002836 <HAL_GPIO_Init+0x21e>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a4f      	ldr	r2, [pc, #316]	; (8002938 <HAL_GPIO_Init+0x320>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d019      	beq.n	8002832 <HAL_GPIO_Init+0x21a>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a4e      	ldr	r2, [pc, #312]	; (800293c <HAL_GPIO_Init+0x324>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d013      	beq.n	800282e <HAL_GPIO_Init+0x216>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a4d      	ldr	r2, [pc, #308]	; (8002940 <HAL_GPIO_Init+0x328>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d00d      	beq.n	800282a <HAL_GPIO_Init+0x212>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a4c      	ldr	r2, [pc, #304]	; (8002944 <HAL_GPIO_Init+0x32c>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d007      	beq.n	8002826 <HAL_GPIO_Init+0x20e>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a4b      	ldr	r2, [pc, #300]	; (8002948 <HAL_GPIO_Init+0x330>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d101      	bne.n	8002822 <HAL_GPIO_Init+0x20a>
 800281e:	2307      	movs	r3, #7
 8002820:	e00e      	b.n	8002840 <HAL_GPIO_Init+0x228>
 8002822:	2308      	movs	r3, #8
 8002824:	e00c      	b.n	8002840 <HAL_GPIO_Init+0x228>
 8002826:	2306      	movs	r3, #6
 8002828:	e00a      	b.n	8002840 <HAL_GPIO_Init+0x228>
 800282a:	2305      	movs	r3, #5
 800282c:	e008      	b.n	8002840 <HAL_GPIO_Init+0x228>
 800282e:	2304      	movs	r3, #4
 8002830:	e006      	b.n	8002840 <HAL_GPIO_Init+0x228>
 8002832:	2303      	movs	r3, #3
 8002834:	e004      	b.n	8002840 <HAL_GPIO_Init+0x228>
 8002836:	2302      	movs	r3, #2
 8002838:	e002      	b.n	8002840 <HAL_GPIO_Init+0x228>
 800283a:	2301      	movs	r3, #1
 800283c:	e000      	b.n	8002840 <HAL_GPIO_Init+0x228>
 800283e:	2300      	movs	r3, #0
 8002840:	69fa      	ldr	r2, [r7, #28]
 8002842:	f002 0203 	and.w	r2, r2, #3
 8002846:	0092      	lsls	r2, r2, #2
 8002848:	4093      	lsls	r3, r2
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4313      	orrs	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002850:	4935      	ldr	r1, [pc, #212]	; (8002928 <HAL_GPIO_Init+0x310>)
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	089b      	lsrs	r3, r3, #2
 8002856:	3302      	adds	r3, #2
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800285e:	4b3b      	ldr	r3, [pc, #236]	; (800294c <HAL_GPIO_Init+0x334>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	43db      	mvns	r3, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4013      	ands	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	4313      	orrs	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002882:	4a32      	ldr	r2, [pc, #200]	; (800294c <HAL_GPIO_Init+0x334>)
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002888:	4b30      	ldr	r3, [pc, #192]	; (800294c <HAL_GPIO_Init+0x334>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	43db      	mvns	r3, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4013      	ands	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028ac:	4a27      	ldr	r2, [pc, #156]	; (800294c <HAL_GPIO_Init+0x334>)
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028b2:	4b26      	ldr	r3, [pc, #152]	; (800294c <HAL_GPIO_Init+0x334>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	43db      	mvns	r3, r3
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4013      	ands	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028d6:	4a1d      	ldr	r2, [pc, #116]	; (800294c <HAL_GPIO_Init+0x334>)
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028dc:	4b1b      	ldr	r3, [pc, #108]	; (800294c <HAL_GPIO_Init+0x334>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	43db      	mvns	r3, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d003      	beq.n	8002900 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002900:	4a12      	ldr	r2, [pc, #72]	; (800294c <HAL_GPIO_Init+0x334>)
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	3301      	adds	r3, #1
 800290a:	61fb      	str	r3, [r7, #28]
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	2b0f      	cmp	r3, #15
 8002910:	f67f ae90 	bls.w	8002634 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002914:	bf00      	nop
 8002916:	bf00      	nop
 8002918:	3724      	adds	r7, #36	; 0x24
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	40023800 	.word	0x40023800
 8002928:	40013800 	.word	0x40013800
 800292c:	40020000 	.word	0x40020000
 8002930:	40020400 	.word	0x40020400
 8002934:	40020800 	.word	0x40020800
 8002938:	40020c00 	.word	0x40020c00
 800293c:	40021000 	.word	0x40021000
 8002940:	40021400 	.word	0x40021400
 8002944:	40021800 	.word	0x40021800
 8002948:	40021c00 	.word	0x40021c00
 800294c:	40013c00 	.word	0x40013c00

08002950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	460b      	mov	r3, r1
 800295a:	807b      	strh	r3, [r7, #2]
 800295c:	4613      	mov	r3, r2
 800295e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002960:	787b      	ldrb	r3, [r7, #1]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002966:	887a      	ldrh	r2, [r7, #2]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800296c:	e003      	b.n	8002976 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800296e:	887b      	ldrh	r3, [r7, #2]
 8002970:	041a      	lsls	r2, r3, #16
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	619a      	str	r2, [r3, #24]
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
	...

08002984 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e264      	b.n	8002e60 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d075      	beq.n	8002a8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029a2:	4ba3      	ldr	r3, [pc, #652]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 030c 	and.w	r3, r3, #12
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d00c      	beq.n	80029c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ae:	4ba0      	ldr	r3, [pc, #640]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029b6:	2b08      	cmp	r3, #8
 80029b8:	d112      	bne.n	80029e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ba:	4b9d      	ldr	r3, [pc, #628]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029c6:	d10b      	bne.n	80029e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c8:	4b99      	ldr	r3, [pc, #612]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d05b      	beq.n	8002a8c <HAL_RCC_OscConfig+0x108>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d157      	bne.n	8002a8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e23f      	b.n	8002e60 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e8:	d106      	bne.n	80029f8 <HAL_RCC_OscConfig+0x74>
 80029ea:	4b91      	ldr	r3, [pc, #580]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a90      	ldr	r2, [pc, #576]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 80029f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f4:	6013      	str	r3, [r2, #0]
 80029f6:	e01d      	b.n	8002a34 <HAL_RCC_OscConfig+0xb0>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a00:	d10c      	bne.n	8002a1c <HAL_RCC_OscConfig+0x98>
 8002a02:	4b8b      	ldr	r3, [pc, #556]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a8a      	ldr	r2, [pc, #552]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002a08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a0c:	6013      	str	r3, [r2, #0]
 8002a0e:	4b88      	ldr	r3, [pc, #544]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a87      	ldr	r2, [pc, #540]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	e00b      	b.n	8002a34 <HAL_RCC_OscConfig+0xb0>
 8002a1c:	4b84      	ldr	r3, [pc, #528]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a83      	ldr	r2, [pc, #524]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a26:	6013      	str	r3, [r2, #0]
 8002a28:	4b81      	ldr	r3, [pc, #516]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a80      	ldr	r2, [pc, #512]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002a2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d013      	beq.n	8002a64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3c:	f7ff f8a8 	bl	8001b90 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a44:	f7ff f8a4 	bl	8001b90 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b64      	cmp	r3, #100	; 0x64
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e204      	b.n	8002e60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a56:	4b76      	ldr	r3, [pc, #472]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0f0      	beq.n	8002a44 <HAL_RCC_OscConfig+0xc0>
 8002a62:	e014      	b.n	8002a8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a64:	f7ff f894 	bl	8001b90 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a6c:	f7ff f890 	bl	8001b90 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b64      	cmp	r3, #100	; 0x64
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e1f0      	b.n	8002e60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a7e:	4b6c      	ldr	r3, [pc, #432]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f0      	bne.n	8002a6c <HAL_RCC_OscConfig+0xe8>
 8002a8a:	e000      	b.n	8002a8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d063      	beq.n	8002b62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a9a:	4b65      	ldr	r3, [pc, #404]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 030c 	and.w	r3, r3, #12
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00b      	beq.n	8002abe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aa6:	4b62      	ldr	r3, [pc, #392]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002aae:	2b08      	cmp	r3, #8
 8002ab0:	d11c      	bne.n	8002aec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ab2:	4b5f      	ldr	r3, [pc, #380]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d116      	bne.n	8002aec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002abe:	4b5c      	ldr	r3, [pc, #368]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d005      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x152>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d001      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e1c4      	b.n	8002e60 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad6:	4b56      	ldr	r3, [pc, #344]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	4952      	ldr	r1, [pc, #328]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aea:	e03a      	b.n	8002b62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d020      	beq.n	8002b36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002af4:	4b4f      	ldr	r3, [pc, #316]	; (8002c34 <HAL_RCC_OscConfig+0x2b0>)
 8002af6:	2201      	movs	r2, #1
 8002af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afa:	f7ff f849 	bl	8001b90 <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b00:	e008      	b.n	8002b14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b02:	f7ff f845 	bl	8001b90 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e1a5      	b.n	8002e60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b14:	4b46      	ldr	r3, [pc, #280]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0f0      	beq.n	8002b02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b20:	4b43      	ldr	r3, [pc, #268]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	4940      	ldr	r1, [pc, #256]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	600b      	str	r3, [r1, #0]
 8002b34:	e015      	b.n	8002b62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b36:	4b3f      	ldr	r3, [pc, #252]	; (8002c34 <HAL_RCC_OscConfig+0x2b0>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b3c:	f7ff f828 	bl	8001b90 <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b44:	f7ff f824 	bl	8001b90 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e184      	b.n	8002e60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b56:	4b36      	ldr	r3, [pc, #216]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1f0      	bne.n	8002b44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d030      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d016      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b76:	4b30      	ldr	r3, [pc, #192]	; (8002c38 <HAL_RCC_OscConfig+0x2b4>)
 8002b78:	2201      	movs	r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b7c:	f7ff f808 	bl	8001b90 <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b84:	f7ff f804 	bl	8001b90 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e164      	b.n	8002e60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b96:	4b26      	ldr	r3, [pc, #152]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d0f0      	beq.n	8002b84 <HAL_RCC_OscConfig+0x200>
 8002ba2:	e015      	b.n	8002bd0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ba4:	4b24      	ldr	r3, [pc, #144]	; (8002c38 <HAL_RCC_OscConfig+0x2b4>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002baa:	f7fe fff1 	bl	8001b90 <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bb2:	f7fe ffed 	bl	8001b90 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e14d      	b.n	8002e60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc4:	4b1a      	ldr	r3, [pc, #104]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002bc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1f0      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 80a0 	beq.w	8002d1e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bde:	2300      	movs	r3, #0
 8002be0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002be2:	4b13      	ldr	r3, [pc, #76]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10f      	bne.n	8002c0e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60bb      	str	r3, [r7, #8]
 8002bf2:	4b0f      	ldr	r3, [pc, #60]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	4a0e      	ldr	r2, [pc, #56]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bfe:	4b0c      	ldr	r3, [pc, #48]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c06:	60bb      	str	r3, [r7, #8]
 8002c08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c0e:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <HAL_RCC_OscConfig+0x2b8>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d121      	bne.n	8002c5e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c1a:	4b08      	ldr	r3, [pc, #32]	; (8002c3c <HAL_RCC_OscConfig+0x2b8>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a07      	ldr	r2, [pc, #28]	; (8002c3c <HAL_RCC_OscConfig+0x2b8>)
 8002c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c26:	f7fe ffb3 	bl	8001b90 <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c2c:	e011      	b.n	8002c52 <HAL_RCC_OscConfig+0x2ce>
 8002c2e:	bf00      	nop
 8002c30:	40023800 	.word	0x40023800
 8002c34:	42470000 	.word	0x42470000
 8002c38:	42470e80 	.word	0x42470e80
 8002c3c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c40:	f7fe ffa6 	bl	8001b90 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e106      	b.n	8002e60 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c52:	4b85      	ldr	r3, [pc, #532]	; (8002e68 <HAL_RCC_OscConfig+0x4e4>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0f0      	beq.n	8002c40 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d106      	bne.n	8002c74 <HAL_RCC_OscConfig+0x2f0>
 8002c66:	4b81      	ldr	r3, [pc, #516]	; (8002e6c <HAL_RCC_OscConfig+0x4e8>)
 8002c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6a:	4a80      	ldr	r2, [pc, #512]	; (8002e6c <HAL_RCC_OscConfig+0x4e8>)
 8002c6c:	f043 0301 	orr.w	r3, r3, #1
 8002c70:	6713      	str	r3, [r2, #112]	; 0x70
 8002c72:	e01c      	b.n	8002cae <HAL_RCC_OscConfig+0x32a>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	2b05      	cmp	r3, #5
 8002c7a:	d10c      	bne.n	8002c96 <HAL_RCC_OscConfig+0x312>
 8002c7c:	4b7b      	ldr	r3, [pc, #492]	; (8002e6c <HAL_RCC_OscConfig+0x4e8>)
 8002c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c80:	4a7a      	ldr	r2, [pc, #488]	; (8002e6c <HAL_RCC_OscConfig+0x4e8>)
 8002c82:	f043 0304 	orr.w	r3, r3, #4
 8002c86:	6713      	str	r3, [r2, #112]	; 0x70
 8002c88:	4b78      	ldr	r3, [pc, #480]	; (8002e6c <HAL_RCC_OscConfig+0x4e8>)
 8002c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8c:	4a77      	ldr	r2, [pc, #476]	; (8002e6c <HAL_RCC_OscConfig+0x4e8>)
 8002c8e:	f043 0301 	orr.w	r3, r3, #1
 8002c92:	6713      	str	r3, [r2, #112]	; 0x70
 8002c94:	e00b      	b.n	8002cae <HAL_RCC_OscConfig+0x32a>
 8002c96:	4b75      	ldr	r3, [pc, #468]	; (8002e6c <HAL_RCC_OscConfig+0x4e8>)
 8002c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9a:	4a74      	ldr	r2, [pc, #464]	; (8002e6c <HAL_RCC_OscConfig+0x4e8>)
 8002c9c:	f023 0301 	bic.w	r3, r3, #1
 8002ca0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca2:	4b72      	ldr	r3, [pc, #456]	; (8002e6c <HAL_RCC_OscConfig+0x4e8>)
 8002ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca6:	4a71      	ldr	r2, [pc, #452]	; (8002e6c <HAL_RCC_OscConfig+0x4e8>)
 8002ca8:	f023 0304 	bic.w	r3, r3, #4
 8002cac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d015      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb6:	f7fe ff6b 	bl	8001b90 <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cbc:	e00a      	b.n	8002cd4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cbe:	f7fe ff67 	bl	8001b90 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e0c5      	b.n	8002e60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd4:	4b65      	ldr	r3, [pc, #404]	; (8002e6c <HAL_RCC_OscConfig+0x4e8>)
 8002cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0ee      	beq.n	8002cbe <HAL_RCC_OscConfig+0x33a>
 8002ce0:	e014      	b.n	8002d0c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce2:	f7fe ff55 	bl	8001b90 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce8:	e00a      	b.n	8002d00 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cea:	f7fe ff51 	bl	8001b90 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e0af      	b.n	8002e60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d00:	4b5a      	ldr	r3, [pc, #360]	; (8002e6c <HAL_RCC_OscConfig+0x4e8>)
 8002d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1ee      	bne.n	8002cea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d0c:	7dfb      	ldrb	r3, [r7, #23]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d105      	bne.n	8002d1e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d12:	4b56      	ldr	r3, [pc, #344]	; (8002e6c <HAL_RCC_OscConfig+0x4e8>)
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	4a55      	ldr	r2, [pc, #340]	; (8002e6c <HAL_RCC_OscConfig+0x4e8>)
 8002d18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d1c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f000 809b 	beq.w	8002e5e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d28:	4b50      	ldr	r3, [pc, #320]	; (8002e6c <HAL_RCC_OscConfig+0x4e8>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f003 030c 	and.w	r3, r3, #12
 8002d30:	2b08      	cmp	r3, #8
 8002d32:	d05c      	beq.n	8002dee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d141      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d3c:	4b4c      	ldr	r3, [pc, #304]	; (8002e70 <HAL_RCC_OscConfig+0x4ec>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d42:	f7fe ff25 	bl	8001b90 <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d4a:	f7fe ff21 	bl	8001b90 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e081      	b.n	8002e60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d5c:	4b43      	ldr	r3, [pc, #268]	; (8002e6c <HAL_RCC_OscConfig+0x4e8>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1f0      	bne.n	8002d4a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	69da      	ldr	r2, [r3, #28]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	431a      	orrs	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	019b      	lsls	r3, r3, #6
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7e:	085b      	lsrs	r3, r3, #1
 8002d80:	3b01      	subs	r3, #1
 8002d82:	041b      	lsls	r3, r3, #16
 8002d84:	431a      	orrs	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8a:	061b      	lsls	r3, r3, #24
 8002d8c:	4937      	ldr	r1, [pc, #220]	; (8002e6c <HAL_RCC_OscConfig+0x4e8>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d92:	4b37      	ldr	r3, [pc, #220]	; (8002e70 <HAL_RCC_OscConfig+0x4ec>)
 8002d94:	2201      	movs	r2, #1
 8002d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d98:	f7fe fefa 	bl	8001b90 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002da0:	f7fe fef6 	bl	8001b90 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e056      	b.n	8002e60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002db2:	4b2e      	ldr	r3, [pc, #184]	; (8002e6c <HAL_RCC_OscConfig+0x4e8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0f0      	beq.n	8002da0 <HAL_RCC_OscConfig+0x41c>
 8002dbe:	e04e      	b.n	8002e5e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc0:	4b2b      	ldr	r3, [pc, #172]	; (8002e70 <HAL_RCC_OscConfig+0x4ec>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc6:	f7fe fee3 	bl	8001b90 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dce:	f7fe fedf 	bl	8001b90 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e03f      	b.n	8002e60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002de0:	4b22      	ldr	r3, [pc, #136]	; (8002e6c <HAL_RCC_OscConfig+0x4e8>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1f0      	bne.n	8002dce <HAL_RCC_OscConfig+0x44a>
 8002dec:	e037      	b.n	8002e5e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d101      	bne.n	8002dfa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e032      	b.n	8002e60 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002dfa:	4b1c      	ldr	r3, [pc, #112]	; (8002e6c <HAL_RCC_OscConfig+0x4e8>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d028      	beq.n	8002e5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d121      	bne.n	8002e5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d11a      	bne.n	8002e5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e30:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d111      	bne.n	8002e5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e40:	085b      	lsrs	r3, r3, #1
 8002e42:	3b01      	subs	r3, #1
 8002e44:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d107      	bne.n	8002e5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e54:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d001      	beq.n	8002e5e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e000      	b.n	8002e60 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3718      	adds	r7, #24
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40007000 	.word	0x40007000
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	42470060 	.word	0x42470060

08002e74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e0cc      	b.n	8003022 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e88:	4b68      	ldr	r3, [pc, #416]	; (800302c <HAL_RCC_ClockConfig+0x1b8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d90c      	bls.n	8002eb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e96:	4b65      	ldr	r3, [pc, #404]	; (800302c <HAL_RCC_ClockConfig+0x1b8>)
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9e:	4b63      	ldr	r3, [pc, #396]	; (800302c <HAL_RCC_ClockConfig+0x1b8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d001      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e0b8      	b.n	8003022 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d020      	beq.n	8002efe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d005      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ec8:	4b59      	ldr	r3, [pc, #356]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	4a58      	ldr	r2, [pc, #352]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002ece:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ed2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0308 	and.w	r3, r3, #8
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d005      	beq.n	8002eec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ee0:	4b53      	ldr	r3, [pc, #332]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	4a52      	ldr	r2, [pc, #328]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002eea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eec:	4b50      	ldr	r3, [pc, #320]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	494d      	ldr	r1, [pc, #308]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d044      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d107      	bne.n	8002f22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f12:	4b47      	ldr	r3, [pc, #284]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d119      	bne.n	8002f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e07f      	b.n	8003022 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d003      	beq.n	8002f32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f2e:	2b03      	cmp	r3, #3
 8002f30:	d107      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f32:	4b3f      	ldr	r3, [pc, #252]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d109      	bne.n	8002f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e06f      	b.n	8003022 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f42:	4b3b      	ldr	r3, [pc, #236]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e067      	b.n	8003022 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f52:	4b37      	ldr	r3, [pc, #220]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f023 0203 	bic.w	r2, r3, #3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	4934      	ldr	r1, [pc, #208]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f64:	f7fe fe14 	bl	8001b90 <HAL_GetTick>
 8002f68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f6a:	e00a      	b.n	8002f82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f6c:	f7fe fe10 	bl	8001b90 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e04f      	b.n	8003022 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f82:	4b2b      	ldr	r3, [pc, #172]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 020c 	and.w	r2, r3, #12
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d1eb      	bne.n	8002f6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f94:	4b25      	ldr	r3, [pc, #148]	; (800302c <HAL_RCC_ClockConfig+0x1b8>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d20c      	bcs.n	8002fbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa2:	4b22      	ldr	r3, [pc, #136]	; (800302c <HAL_RCC_ClockConfig+0x1b8>)
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002faa:	4b20      	ldr	r3, [pc, #128]	; (800302c <HAL_RCC_ClockConfig+0x1b8>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0307 	and.w	r3, r3, #7
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d001      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e032      	b.n	8003022 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d008      	beq.n	8002fda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fc8:	4b19      	ldr	r3, [pc, #100]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	4916      	ldr	r1, [pc, #88]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0308 	and.w	r3, r3, #8
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d009      	beq.n	8002ffa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fe6:	4b12      	ldr	r3, [pc, #72]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	490e      	ldr	r1, [pc, #56]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ffa:	f000 f821 	bl	8003040 <HAL_RCC_GetSysClockFreq>
 8002ffe:	4602      	mov	r2, r0
 8003000:	4b0b      	ldr	r3, [pc, #44]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	091b      	lsrs	r3, r3, #4
 8003006:	f003 030f 	and.w	r3, r3, #15
 800300a:	490a      	ldr	r1, [pc, #40]	; (8003034 <HAL_RCC_ClockConfig+0x1c0>)
 800300c:	5ccb      	ldrb	r3, [r1, r3]
 800300e:	fa22 f303 	lsr.w	r3, r2, r3
 8003012:	4a09      	ldr	r2, [pc, #36]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8003014:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003016:	4b09      	ldr	r3, [pc, #36]	; (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f7fe fd74 	bl	8001b08 <HAL_InitTick>

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40023c00 	.word	0x40023c00
 8003030:	40023800 	.word	0x40023800
 8003034:	08009c10 	.word	0x08009c10
 8003038:	20000000 	.word	0x20000000
 800303c:	20000004 	.word	0x20000004

08003040 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003040:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003044:	b084      	sub	sp, #16
 8003046:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003048:	2300      	movs	r3, #0
 800304a:	607b      	str	r3, [r7, #4]
 800304c:	2300      	movs	r3, #0
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	2300      	movs	r3, #0
 8003052:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003054:	2300      	movs	r3, #0
 8003056:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003058:	4b67      	ldr	r3, [pc, #412]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f003 030c 	and.w	r3, r3, #12
 8003060:	2b08      	cmp	r3, #8
 8003062:	d00d      	beq.n	8003080 <HAL_RCC_GetSysClockFreq+0x40>
 8003064:	2b08      	cmp	r3, #8
 8003066:	f200 80bd 	bhi.w	80031e4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800306a:	2b00      	cmp	r3, #0
 800306c:	d002      	beq.n	8003074 <HAL_RCC_GetSysClockFreq+0x34>
 800306e:	2b04      	cmp	r3, #4
 8003070:	d003      	beq.n	800307a <HAL_RCC_GetSysClockFreq+0x3a>
 8003072:	e0b7      	b.n	80031e4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003074:	4b61      	ldr	r3, [pc, #388]	; (80031fc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003076:	60bb      	str	r3, [r7, #8]
       break;
 8003078:	e0b7      	b.n	80031ea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800307a:	4b61      	ldr	r3, [pc, #388]	; (8003200 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800307c:	60bb      	str	r3, [r7, #8]
      break;
 800307e:	e0b4      	b.n	80031ea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003080:	4b5d      	ldr	r3, [pc, #372]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003088:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800308a:	4b5b      	ldr	r3, [pc, #364]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d04d      	beq.n	8003132 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003096:	4b58      	ldr	r3, [pc, #352]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	099b      	lsrs	r3, r3, #6
 800309c:	461a      	mov	r2, r3
 800309e:	f04f 0300 	mov.w	r3, #0
 80030a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80030a6:	f04f 0100 	mov.w	r1, #0
 80030aa:	ea02 0800 	and.w	r8, r2, r0
 80030ae:	ea03 0901 	and.w	r9, r3, r1
 80030b2:	4640      	mov	r0, r8
 80030b4:	4649      	mov	r1, r9
 80030b6:	f04f 0200 	mov.w	r2, #0
 80030ba:	f04f 0300 	mov.w	r3, #0
 80030be:	014b      	lsls	r3, r1, #5
 80030c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80030c4:	0142      	lsls	r2, r0, #5
 80030c6:	4610      	mov	r0, r2
 80030c8:	4619      	mov	r1, r3
 80030ca:	ebb0 0008 	subs.w	r0, r0, r8
 80030ce:	eb61 0109 	sbc.w	r1, r1, r9
 80030d2:	f04f 0200 	mov.w	r2, #0
 80030d6:	f04f 0300 	mov.w	r3, #0
 80030da:	018b      	lsls	r3, r1, #6
 80030dc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80030e0:	0182      	lsls	r2, r0, #6
 80030e2:	1a12      	subs	r2, r2, r0
 80030e4:	eb63 0301 	sbc.w	r3, r3, r1
 80030e8:	f04f 0000 	mov.w	r0, #0
 80030ec:	f04f 0100 	mov.w	r1, #0
 80030f0:	00d9      	lsls	r1, r3, #3
 80030f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030f6:	00d0      	lsls	r0, r2, #3
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	eb12 0208 	adds.w	r2, r2, r8
 8003100:	eb43 0309 	adc.w	r3, r3, r9
 8003104:	f04f 0000 	mov.w	r0, #0
 8003108:	f04f 0100 	mov.w	r1, #0
 800310c:	0259      	lsls	r1, r3, #9
 800310e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003112:	0250      	lsls	r0, r2, #9
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4610      	mov	r0, r2
 800311a:	4619      	mov	r1, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	461a      	mov	r2, r3
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	f7fd fdb0 	bl	8000c88 <__aeabi_uldivmod>
 8003128:	4602      	mov	r2, r0
 800312a:	460b      	mov	r3, r1
 800312c:	4613      	mov	r3, r2
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	e04a      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003132:	4b31      	ldr	r3, [pc, #196]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	099b      	lsrs	r3, r3, #6
 8003138:	461a      	mov	r2, r3
 800313a:	f04f 0300 	mov.w	r3, #0
 800313e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003142:	f04f 0100 	mov.w	r1, #0
 8003146:	ea02 0400 	and.w	r4, r2, r0
 800314a:	ea03 0501 	and.w	r5, r3, r1
 800314e:	4620      	mov	r0, r4
 8003150:	4629      	mov	r1, r5
 8003152:	f04f 0200 	mov.w	r2, #0
 8003156:	f04f 0300 	mov.w	r3, #0
 800315a:	014b      	lsls	r3, r1, #5
 800315c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003160:	0142      	lsls	r2, r0, #5
 8003162:	4610      	mov	r0, r2
 8003164:	4619      	mov	r1, r3
 8003166:	1b00      	subs	r0, r0, r4
 8003168:	eb61 0105 	sbc.w	r1, r1, r5
 800316c:	f04f 0200 	mov.w	r2, #0
 8003170:	f04f 0300 	mov.w	r3, #0
 8003174:	018b      	lsls	r3, r1, #6
 8003176:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800317a:	0182      	lsls	r2, r0, #6
 800317c:	1a12      	subs	r2, r2, r0
 800317e:	eb63 0301 	sbc.w	r3, r3, r1
 8003182:	f04f 0000 	mov.w	r0, #0
 8003186:	f04f 0100 	mov.w	r1, #0
 800318a:	00d9      	lsls	r1, r3, #3
 800318c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003190:	00d0      	lsls	r0, r2, #3
 8003192:	4602      	mov	r2, r0
 8003194:	460b      	mov	r3, r1
 8003196:	1912      	adds	r2, r2, r4
 8003198:	eb45 0303 	adc.w	r3, r5, r3
 800319c:	f04f 0000 	mov.w	r0, #0
 80031a0:	f04f 0100 	mov.w	r1, #0
 80031a4:	0299      	lsls	r1, r3, #10
 80031a6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80031aa:	0290      	lsls	r0, r2, #10
 80031ac:	4602      	mov	r2, r0
 80031ae:	460b      	mov	r3, r1
 80031b0:	4610      	mov	r0, r2
 80031b2:	4619      	mov	r1, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	461a      	mov	r2, r3
 80031b8:	f04f 0300 	mov.w	r3, #0
 80031bc:	f7fd fd64 	bl	8000c88 <__aeabi_uldivmod>
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	4613      	mov	r3, r2
 80031c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031c8:	4b0b      	ldr	r3, [pc, #44]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	0c1b      	lsrs	r3, r3, #16
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	3301      	adds	r3, #1
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e0:	60bb      	str	r3, [r7, #8]
      break;
 80031e2:	e002      	b.n	80031ea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031e4:	4b05      	ldr	r3, [pc, #20]	; (80031fc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80031e6:	60bb      	str	r3, [r7, #8]
      break;
 80031e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031ea:	68bb      	ldr	r3, [r7, #8]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80031f6:	bf00      	nop
 80031f8:	40023800 	.word	0x40023800
 80031fc:	00f42400 	.word	0x00f42400
 8003200:	007a1200 	.word	0x007a1200

08003204 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003208:	4b03      	ldr	r3, [pc, #12]	; (8003218 <HAL_RCC_GetHCLKFreq+0x14>)
 800320a:	681b      	ldr	r3, [r3, #0]
}
 800320c:	4618      	mov	r0, r3
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	20000000 	.word	0x20000000

0800321c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003220:	f7ff fff0 	bl	8003204 <HAL_RCC_GetHCLKFreq>
 8003224:	4602      	mov	r2, r0
 8003226:	4b05      	ldr	r3, [pc, #20]	; (800323c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	0a9b      	lsrs	r3, r3, #10
 800322c:	f003 0307 	and.w	r3, r3, #7
 8003230:	4903      	ldr	r1, [pc, #12]	; (8003240 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003232:	5ccb      	ldrb	r3, [r1, r3]
 8003234:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003238:	4618      	mov	r0, r3
 800323a:	bd80      	pop	{r7, pc}
 800323c:	40023800 	.word	0x40023800
 8003240:	08009c20 	.word	0x08009c20

08003244 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003248:	f7ff ffdc 	bl	8003204 <HAL_RCC_GetHCLKFreq>
 800324c:	4602      	mov	r2, r0
 800324e:	4b05      	ldr	r3, [pc, #20]	; (8003264 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	0b5b      	lsrs	r3, r3, #13
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	4903      	ldr	r1, [pc, #12]	; (8003268 <HAL_RCC_GetPCLK2Freq+0x24>)
 800325a:	5ccb      	ldrb	r3, [r1, r3]
 800325c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003260:	4618      	mov	r0, r3
 8003262:	bd80      	pop	{r7, pc}
 8003264:	40023800 	.word	0x40023800
 8003268:	08009c20 	.word	0x08009c20

0800326c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e03f      	b.n	80032fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d106      	bne.n	8003298 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f7fe f8a6 	bl	80013e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2224      	movs	r2, #36	; 0x24
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68da      	ldr	r2, [r3, #12]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 ff27 	bl	8004104 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	691a      	ldr	r2, [r3, #16]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	695a      	ldr	r2, [r3, #20]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68da      	ldr	r2, [r3, #12]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2220      	movs	r2, #32
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2220      	movs	r2, #32
 80032f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b08a      	sub	sp, #40	; 0x28
 800330a:	af02      	add	r7, sp, #8
 800330c:	60f8      	str	r0, [r7, #12]
 800330e:	60b9      	str	r1, [r7, #8]
 8003310:	603b      	str	r3, [r7, #0]
 8003312:	4613      	mov	r3, r2
 8003314:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003316:	2300      	movs	r3, #0
 8003318:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b20      	cmp	r3, #32
 8003324:	d17c      	bne.n	8003420 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d002      	beq.n	8003332 <HAL_UART_Transmit+0x2c>
 800332c:	88fb      	ldrh	r3, [r7, #6]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e075      	b.n	8003422 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800333c:	2b01      	cmp	r3, #1
 800333e:	d101      	bne.n	8003344 <HAL_UART_Transmit+0x3e>
 8003340:	2302      	movs	r3, #2
 8003342:	e06e      	b.n	8003422 <HAL_UART_Transmit+0x11c>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2221      	movs	r2, #33	; 0x21
 8003356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800335a:	f7fe fc19 	bl	8001b90 <HAL_GetTick>
 800335e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	88fa      	ldrh	r2, [r7, #6]
 8003364:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	88fa      	ldrh	r2, [r7, #6]
 800336a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003374:	d108      	bne.n	8003388 <HAL_UART_Transmit+0x82>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d104      	bne.n	8003388 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800337e:	2300      	movs	r3, #0
 8003380:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	61bb      	str	r3, [r7, #24]
 8003386:	e003      	b.n	8003390 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800338c:	2300      	movs	r3, #0
 800338e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003398:	e02a      	b.n	80033f0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	9300      	str	r3, [sp, #0]
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	2200      	movs	r2, #0
 80033a2:	2180      	movs	r1, #128	; 0x80
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f000 fc42 	bl	8003c2e <UART_WaitOnFlagUntilTimeout>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e036      	b.n	8003422 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10b      	bne.n	80033d2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	881b      	ldrh	r3, [r3, #0]
 80033be:	461a      	mov	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	3302      	adds	r3, #2
 80033ce:	61bb      	str	r3, [r7, #24]
 80033d0:	e007      	b.n	80033e2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	781a      	ldrb	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	3301      	adds	r3, #1
 80033e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	3b01      	subs	r3, #1
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1cf      	bne.n	800339a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	2200      	movs	r2, #0
 8003402:	2140      	movs	r1, #64	; 0x40
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f000 fc12 	bl	8003c2e <UART_WaitOnFlagUntilTimeout>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e006      	b.n	8003422 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2220      	movs	r2, #32
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800341c:	2300      	movs	r3, #0
 800341e:	e000      	b.n	8003422 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003420:	2302      	movs	r3, #2
  }
}
 8003422:	4618      	mov	r0, r3
 8003424:	3720      	adds	r7, #32
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b084      	sub	sp, #16
 800342e:	af00      	add	r7, sp, #0
 8003430:	60f8      	str	r0, [r7, #12]
 8003432:	60b9      	str	r1, [r7, #8]
 8003434:	4613      	mov	r3, r2
 8003436:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b20      	cmp	r3, #32
 8003442:	d11d      	bne.n	8003480 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d002      	beq.n	8003450 <HAL_UART_Receive_IT+0x26>
 800344a:	88fb      	ldrh	r3, [r7, #6]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e016      	b.n	8003482 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800345a:	2b01      	cmp	r3, #1
 800345c:	d101      	bne.n	8003462 <HAL_UART_Receive_IT+0x38>
 800345e:	2302      	movs	r3, #2
 8003460:	e00f      	b.n	8003482 <HAL_UART_Receive_IT+0x58>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003470:	88fb      	ldrh	r3, [r7, #6]
 8003472:	461a      	mov	r2, r3
 8003474:	68b9      	ldr	r1, [r7, #8]
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 fc47 	bl	8003d0a <UART_Start_Receive_IT>
 800347c:	4603      	mov	r3, r0
 800347e:	e000      	b.n	8003482 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003480:	2302      	movs	r3, #2
  }
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
	...

0800348c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b08c      	sub	sp, #48	; 0x30
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	4613      	mov	r3, r2
 8003498:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b20      	cmp	r3, #32
 80034a4:	d165      	bne.n	8003572 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d002      	beq.n	80034b2 <HAL_UART_Transmit_DMA+0x26>
 80034ac:	88fb      	ldrh	r3, [r7, #6]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e05e      	b.n	8003574 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d101      	bne.n	80034c4 <HAL_UART_Transmit_DMA+0x38>
 80034c0:	2302      	movs	r3, #2
 80034c2:	e057      	b.n	8003574 <HAL_UART_Transmit_DMA+0xe8>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80034cc:	68ba      	ldr	r2, [r7, #8]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	88fa      	ldrh	r2, [r7, #6]
 80034d6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	88fa      	ldrh	r2, [r7, #6]
 80034dc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2221      	movs	r2, #33	; 0x21
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f0:	4a22      	ldr	r2, [pc, #136]	; (800357c <HAL_UART_Transmit_DMA+0xf0>)
 80034f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f8:	4a21      	ldr	r2, [pc, #132]	; (8003580 <HAL_UART_Transmit_DMA+0xf4>)
 80034fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003500:	4a20      	ldr	r2, [pc, #128]	; (8003584 <HAL_UART_Transmit_DMA+0xf8>)
 8003502:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003508:	2200      	movs	r2, #0
 800350a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800350c:	f107 0308 	add.w	r3, r7, #8
 8003510:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003518:	6819      	ldr	r1, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	3304      	adds	r3, #4
 8003520:	461a      	mov	r2, r3
 8003522:	88fb      	ldrh	r3, [r7, #6]
 8003524:	f7fe fd24 	bl	8001f70 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003530:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	3314      	adds	r3, #20
 8003540:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	e853 3f00 	ldrex	r3, [r3]
 8003548:	617b      	str	r3, [r7, #20]
   return(result);
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003550:	62bb      	str	r3, [r7, #40]	; 0x28
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	3314      	adds	r3, #20
 8003558:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800355a:	627a      	str	r2, [r7, #36]	; 0x24
 800355c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355e:	6a39      	ldr	r1, [r7, #32]
 8003560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003562:	e841 2300 	strex	r3, r2, [r1]
 8003566:	61fb      	str	r3, [r7, #28]
   return(result);
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1e5      	bne.n	800353a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800356e:	2300      	movs	r3, #0
 8003570:	e000      	b.n	8003574 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8003572:	2302      	movs	r3, #2
  }
}
 8003574:	4618      	mov	r0, r3
 8003576:	3730      	adds	r7, #48	; 0x30
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	08003ae5 	.word	0x08003ae5
 8003580:	08003b7f 	.word	0x08003b7f
 8003584:	08003b9b 	.word	0x08003b9b

08003588 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b0ba      	sub	sp, #232	; 0xe8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80035ae:	2300      	movs	r3, #0
 80035b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80035b4:	2300      	movs	r3, #0
 80035b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80035ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80035c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10f      	bne.n	80035ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035d2:	f003 0320 	and.w	r3, r3, #32
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d009      	beq.n	80035ee <HAL_UART_IRQHandler+0x66>
 80035da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035de:	f003 0320 	and.w	r3, r3, #32
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 fcd0 	bl	8003f8c <UART_Receive_IT>
      return;
 80035ec:	e256      	b.n	8003a9c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80035ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 80de 	beq.w	80037b4 <HAL_UART_IRQHandler+0x22c>
 80035f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b00      	cmp	r3, #0
 8003602:	d106      	bne.n	8003612 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003608:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 80d1 	beq.w	80037b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00b      	beq.n	8003636 <HAL_UART_IRQHandler+0xae>
 800361e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003626:	2b00      	cmp	r3, #0
 8003628:	d005      	beq.n	8003636 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	f043 0201 	orr.w	r2, r3, #1
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800363a:	f003 0304 	and.w	r3, r3, #4
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00b      	beq.n	800365a <HAL_UART_IRQHandler+0xd2>
 8003642:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d005      	beq.n	800365a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	f043 0202 	orr.w	r2, r3, #2
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800365a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00b      	beq.n	800367e <HAL_UART_IRQHandler+0xf6>
 8003666:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	d005      	beq.n	800367e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	f043 0204 	orr.w	r2, r3, #4
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800367e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003682:	f003 0308 	and.w	r3, r3, #8
 8003686:	2b00      	cmp	r3, #0
 8003688:	d011      	beq.n	80036ae <HAL_UART_IRQHandler+0x126>
 800368a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800368e:	f003 0320 	and.w	r3, r3, #32
 8003692:	2b00      	cmp	r3, #0
 8003694:	d105      	bne.n	80036a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003696:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d005      	beq.n	80036ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	f043 0208 	orr.w	r2, r3, #8
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 81ed 	beq.w	8003a92 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036bc:	f003 0320 	and.w	r3, r3, #32
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d008      	beq.n	80036d6 <HAL_UART_IRQHandler+0x14e>
 80036c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036c8:	f003 0320 	and.w	r3, r3, #32
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d002      	beq.n	80036d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 fc5b 	bl	8003f8c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e0:	2b40      	cmp	r3, #64	; 0x40
 80036e2:	bf0c      	ite	eq
 80036e4:	2301      	moveq	r3, #1
 80036e6:	2300      	movne	r3, #0
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d103      	bne.n	8003702 <HAL_UART_IRQHandler+0x17a>
 80036fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d04f      	beq.n	80037a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 fb63 	bl	8003dce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003712:	2b40      	cmp	r3, #64	; 0x40
 8003714:	d141      	bne.n	800379a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	3314      	adds	r3, #20
 800371c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003720:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003724:	e853 3f00 	ldrex	r3, [r3]
 8003728:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800372c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003734:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	3314      	adds	r3, #20
 800373e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003742:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003746:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800374e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003752:	e841 2300 	strex	r3, r2, [r1]
 8003756:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800375a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1d9      	bne.n	8003716 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003766:	2b00      	cmp	r3, #0
 8003768:	d013      	beq.n	8003792 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376e:	4a7d      	ldr	r2, [pc, #500]	; (8003964 <HAL_UART_IRQHandler+0x3dc>)
 8003770:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003776:	4618      	mov	r0, r3
 8003778:	f7fe fcc2 	bl	8002100 <HAL_DMA_Abort_IT>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d016      	beq.n	80037b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800378c:	4610      	mov	r0, r2
 800378e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003790:	e00e      	b.n	80037b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f990 	bl	8003ab8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003798:	e00a      	b.n	80037b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f98c 	bl	8003ab8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a0:	e006      	b.n	80037b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f988 	bl	8003ab8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80037ae:	e170      	b.n	8003a92 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037b0:	bf00      	nop
    return;
 80037b2:	e16e      	b.n	8003a92 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	f040 814a 	bne.w	8003a52 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80037be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037c2:	f003 0310 	and.w	r3, r3, #16
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 8143 	beq.w	8003a52 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80037cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037d0:	f003 0310 	and.w	r3, r3, #16
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f000 813c 	beq.w	8003a52 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037da:	2300      	movs	r3, #0
 80037dc:	60bb      	str	r3, [r7, #8]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	60bb      	str	r3, [r7, #8]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	60bb      	str	r3, [r7, #8]
 80037ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fa:	2b40      	cmp	r3, #64	; 0x40
 80037fc:	f040 80b4 	bne.w	8003968 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800380c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003810:	2b00      	cmp	r3, #0
 8003812:	f000 8140 	beq.w	8003a96 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800381a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800381e:	429a      	cmp	r2, r3
 8003820:	f080 8139 	bcs.w	8003a96 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800382a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003836:	f000 8088 	beq.w	800394a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	330c      	adds	r3, #12
 8003840:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003844:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003848:	e853 3f00 	ldrex	r3, [r3]
 800384c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003850:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003858:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	330c      	adds	r3, #12
 8003862:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003866:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800386a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800386e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003872:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003876:	e841 2300 	strex	r3, r2, [r1]
 800387a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800387e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1d9      	bne.n	800383a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	3314      	adds	r3, #20
 800388c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003890:	e853 3f00 	ldrex	r3, [r3]
 8003894:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003896:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003898:	f023 0301 	bic.w	r3, r3, #1
 800389c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	3314      	adds	r3, #20
 80038a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80038aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80038ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80038b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80038b6:	e841 2300 	strex	r3, r2, [r1]
 80038ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80038bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1e1      	bne.n	8003886 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	3314      	adds	r3, #20
 80038c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038cc:	e853 3f00 	ldrex	r3, [r3]
 80038d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80038d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	3314      	adds	r3, #20
 80038e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80038e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80038e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80038ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80038ee:	e841 2300 	strex	r3, r2, [r1]
 80038f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80038f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1e3      	bne.n	80038c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2220      	movs	r2, #32
 80038fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	330c      	adds	r3, #12
 800390e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003912:	e853 3f00 	ldrex	r3, [r3]
 8003916:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800391a:	f023 0310 	bic.w	r3, r3, #16
 800391e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	330c      	adds	r3, #12
 8003928:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800392c:	65ba      	str	r2, [r7, #88]	; 0x58
 800392e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003930:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003932:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003934:	e841 2300 	strex	r3, r2, [r1]
 8003938:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800393a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1e3      	bne.n	8003908 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003944:	4618      	mov	r0, r3
 8003946:	f7fe fb6b 	bl	8002020 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003952:	b29b      	uxth	r3, r3
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	b29b      	uxth	r3, r3
 8003958:	4619      	mov	r1, r3
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f8b6 	bl	8003acc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003960:	e099      	b.n	8003a96 <HAL_UART_IRQHandler+0x50e>
 8003962:	bf00      	nop
 8003964:	08003e95 	.word	0x08003e95
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003970:	b29b      	uxth	r3, r3
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800397c:	b29b      	uxth	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 808b 	beq.w	8003a9a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003984:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 8086 	beq.w	8003a9a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	330c      	adds	r3, #12
 8003994:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003998:	e853 3f00 	ldrex	r3, [r3]
 800399c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800399e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	330c      	adds	r3, #12
 80039ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80039b2:	647a      	str	r2, [r7, #68]	; 0x44
 80039b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039ba:	e841 2300 	strex	r3, r2, [r1]
 80039be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1e3      	bne.n	800398e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	3314      	adds	r3, #20
 80039cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d0:	e853 3f00 	ldrex	r3, [r3]
 80039d4:	623b      	str	r3, [r7, #32]
   return(result);
 80039d6:	6a3b      	ldr	r3, [r7, #32]
 80039d8:	f023 0301 	bic.w	r3, r3, #1
 80039dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	3314      	adds	r3, #20
 80039e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80039ea:	633a      	str	r2, [r7, #48]	; 0x30
 80039ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039f2:	e841 2300 	strex	r3, r2, [r1]
 80039f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1e3      	bne.n	80039c6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2220      	movs	r2, #32
 8003a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	330c      	adds	r3, #12
 8003a12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	e853 3f00 	ldrex	r3, [r3]
 8003a1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f023 0310 	bic.w	r3, r3, #16
 8003a22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	330c      	adds	r3, #12
 8003a2c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003a30:	61fa      	str	r2, [r7, #28]
 8003a32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a34:	69b9      	ldr	r1, [r7, #24]
 8003a36:	69fa      	ldr	r2, [r7, #28]
 8003a38:	e841 2300 	strex	r3, r2, [r1]
 8003a3c:	617b      	str	r3, [r7, #20]
   return(result);
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1e3      	bne.n	8003a0c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a48:	4619      	mov	r1, r3
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f83e 	bl	8003acc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a50:	e023      	b.n	8003a9a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d009      	beq.n	8003a72 <HAL_UART_IRQHandler+0x4ea>
 8003a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 fa26 	bl	8003ebc <UART_Transmit_IT>
    return;
 8003a70:	e014      	b.n	8003a9c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00e      	beq.n	8003a9c <HAL_UART_IRQHandler+0x514>
 8003a7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d008      	beq.n	8003a9c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 fa66 	bl	8003f5c <UART_EndTransmit_IT>
    return;
 8003a90:	e004      	b.n	8003a9c <HAL_UART_IRQHandler+0x514>
    return;
 8003a92:	bf00      	nop
 8003a94:	e002      	b.n	8003a9c <HAL_UART_IRQHandler+0x514>
      return;
 8003a96:	bf00      	nop
 8003a98:	e000      	b.n	8003a9c <HAL_UART_IRQHandler+0x514>
      return;
 8003a9a:	bf00      	nop
  }
}
 8003a9c:	37e8      	adds	r7, #232	; 0xe8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop

08003aa4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b090      	sub	sp, #64	; 0x40
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d137      	bne.n	8003b70 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b02:	2200      	movs	r2, #0
 8003b04:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	3314      	adds	r3, #20
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	e853 3f00 	ldrex	r3, [r3]
 8003b14:	623b      	str	r3, [r7, #32]
   return(result);
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	3314      	adds	r3, #20
 8003b24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b26:	633a      	str	r2, [r7, #48]	; 0x30
 8003b28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b2e:	e841 2300 	strex	r3, r2, [r1]
 8003b32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1e5      	bne.n	8003b06 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	330c      	adds	r3, #12
 8003b40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	e853 3f00 	ldrex	r3, [r3]
 8003b48:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b50:	637b      	str	r3, [r7, #52]	; 0x34
 8003b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	330c      	adds	r3, #12
 8003b58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b5a:	61fa      	str	r2, [r7, #28]
 8003b5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5e:	69b9      	ldr	r1, [r7, #24]
 8003b60:	69fa      	ldr	r2, [r7, #28]
 8003b62:	e841 2300 	strex	r3, r2, [r1]
 8003b66:	617b      	str	r3, [r7, #20]
   return(result);
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1e5      	bne.n	8003b3a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003b6e:	e002      	b.n	8003b76 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003b70:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003b72:	f001 f8e7 	bl	8004d44 <HAL_UART_TxCpltCallback>
}
 8003b76:	bf00      	nop
 8003b78:	3740      	adds	r7, #64	; 0x40
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b084      	sub	sp, #16
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f7ff ff89 	bl	8003aa4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b92:	bf00      	nop
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b084      	sub	sp, #16
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003baa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb6:	2b80      	cmp	r3, #128	; 0x80
 8003bb8:	bf0c      	ite	eq
 8003bba:	2301      	moveq	r3, #1
 8003bbc:	2300      	movne	r3, #0
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b21      	cmp	r3, #33	; 0x21
 8003bcc:	d108      	bne.n	8003be0 <UART_DMAError+0x46>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d005      	beq.n	8003be0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003bda:	68b8      	ldr	r0, [r7, #8]
 8003bdc:	f000 f8cf 	bl	8003d7e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bea:	2b40      	cmp	r3, #64	; 0x40
 8003bec:	bf0c      	ite	eq
 8003bee:	2301      	moveq	r3, #1
 8003bf0:	2300      	movne	r3, #0
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b22      	cmp	r3, #34	; 0x22
 8003c00:	d108      	bne.n	8003c14 <UART_DMAError+0x7a>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d005      	beq.n	8003c14 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003c0e:	68b8      	ldr	r0, [r7, #8]
 8003c10:	f000 f8dd 	bl	8003dce <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c18:	f043 0210 	orr.w	r2, r3, #16
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c20:	68b8      	ldr	r0, [r7, #8]
 8003c22:	f7ff ff49 	bl	8003ab8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c26:	bf00      	nop
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b090      	sub	sp, #64	; 0x40
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	60f8      	str	r0, [r7, #12]
 8003c36:	60b9      	str	r1, [r7, #8]
 8003c38:	603b      	str	r3, [r7, #0]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c3e:	e050      	b.n	8003ce2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c46:	d04c      	beq.n	8003ce2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d007      	beq.n	8003c5e <UART_WaitOnFlagUntilTimeout+0x30>
 8003c4e:	f7fd ff9f 	bl	8001b90 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d241      	bcs.n	8003ce2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	330c      	adds	r3, #12
 8003c64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c68:	e853 3f00 	ldrex	r3, [r3]
 8003c6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	330c      	adds	r3, #12
 8003c7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c7e:	637a      	str	r2, [r7, #52]	; 0x34
 8003c80:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c86:	e841 2300 	strex	r3, r2, [r1]
 8003c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1e5      	bne.n	8003c5e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	3314      	adds	r3, #20
 8003c98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	e853 3f00 	ldrex	r3, [r3]
 8003ca0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	f023 0301 	bic.w	r3, r3, #1
 8003ca8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	3314      	adds	r3, #20
 8003cb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cb2:	623a      	str	r2, [r7, #32]
 8003cb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb6:	69f9      	ldr	r1, [r7, #28]
 8003cb8:	6a3a      	ldr	r2, [r7, #32]
 8003cba:	e841 2300 	strex	r3, r2, [r1]
 8003cbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1e5      	bne.n	8003c92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2220      	movs	r2, #32
 8003cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e00f      	b.n	8003d02 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	4013      	ands	r3, r2
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	bf0c      	ite	eq
 8003cf2:	2301      	moveq	r3, #1
 8003cf4:	2300      	movne	r3, #0
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	79fb      	ldrb	r3, [r7, #7]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d09f      	beq.n	8003c40 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3740      	adds	r7, #64	; 0x40
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b085      	sub	sp, #20
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	60f8      	str	r0, [r7, #12]
 8003d12:	60b9      	str	r1, [r7, #8]
 8003d14:	4613      	mov	r3, r2
 8003d16:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	68ba      	ldr	r2, [r7, #8]
 8003d1c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	88fa      	ldrh	r2, [r7, #6]
 8003d22:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	88fa      	ldrh	r2, [r7, #6]
 8003d28:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2222      	movs	r2, #34	; 0x22
 8003d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68da      	ldr	r2, [r3, #12]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d4e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	695a      	ldr	r2, [r3, #20]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0201 	orr.w	r2, r2, #1
 8003d5e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68da      	ldr	r2, [r3, #12]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f042 0220 	orr.w	r2, r2, #32
 8003d6e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr

08003d7e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003d7e:	b480      	push	{r7}
 8003d80:	b089      	sub	sp, #36	; 0x24
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	330c      	adds	r3, #12
 8003d8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	e853 3f00 	ldrex	r3, [r3]
 8003d94:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003d9c:	61fb      	str	r3, [r7, #28]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	330c      	adds	r3, #12
 8003da4:	69fa      	ldr	r2, [r7, #28]
 8003da6:	61ba      	str	r2, [r7, #24]
 8003da8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003daa:	6979      	ldr	r1, [r7, #20]
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	e841 2300 	strex	r3, r2, [r1]
 8003db2:	613b      	str	r3, [r7, #16]
   return(result);
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1e5      	bne.n	8003d86 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003dc2:	bf00      	nop
 8003dc4:	3724      	adds	r7, #36	; 0x24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b095      	sub	sp, #84	; 0x54
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	330c      	adds	r3, #12
 8003ddc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003de0:	e853 3f00 	ldrex	r3, [r3]
 8003de4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003dec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	330c      	adds	r3, #12
 8003df4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003df6:	643a      	str	r2, [r7, #64]	; 0x40
 8003df8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003dfc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003dfe:	e841 2300 	strex	r3, r2, [r1]
 8003e02:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1e5      	bne.n	8003dd6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	3314      	adds	r3, #20
 8003e10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e12:	6a3b      	ldr	r3, [r7, #32]
 8003e14:	e853 3f00 	ldrex	r3, [r3]
 8003e18:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	f023 0301 	bic.w	r3, r3, #1
 8003e20:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	3314      	adds	r3, #20
 8003e28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e32:	e841 2300 	strex	r3, r2, [r1]
 8003e36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1e5      	bne.n	8003e0a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d119      	bne.n	8003e7a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	330c      	adds	r3, #12
 8003e4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	e853 3f00 	ldrex	r3, [r3]
 8003e54:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	f023 0310 	bic.w	r3, r3, #16
 8003e5c:	647b      	str	r3, [r7, #68]	; 0x44
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	330c      	adds	r3, #12
 8003e64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e66:	61ba      	str	r2, [r7, #24]
 8003e68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6a:	6979      	ldr	r1, [r7, #20]
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	e841 2300 	strex	r3, r2, [r1]
 8003e72:	613b      	str	r3, [r7, #16]
   return(result);
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1e5      	bne.n	8003e46 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003e88:	bf00      	nop
 8003e8a:	3754      	adds	r7, #84	; 0x54
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f7ff fe02 	bl	8003ab8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003eb4:	bf00      	nop
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b21      	cmp	r3, #33	; 0x21
 8003ece:	d13e      	bne.n	8003f4e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ed8:	d114      	bne.n	8003f04 <UART_Transmit_IT+0x48>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d110      	bne.n	8003f04 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	881b      	ldrh	r3, [r3, #0]
 8003eec:	461a      	mov	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ef6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	1c9a      	adds	r2, r3, #2
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	621a      	str	r2, [r3, #32]
 8003f02:	e008      	b.n	8003f16 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	1c59      	adds	r1, r3, #1
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	6211      	str	r1, [r2, #32]
 8003f0e:	781a      	ldrb	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	4619      	mov	r1, r3
 8003f24:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10f      	bne.n	8003f4a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68da      	ldr	r2, [r3, #12]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f38:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68da      	ldr	r2, [r3, #12]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f48:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	e000      	b.n	8003f50 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003f4e:	2302      	movs	r3, #2
  }
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3714      	adds	r7, #20
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68da      	ldr	r2, [r3, #12]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f72:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 fee1 	bl	8004d44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3708      	adds	r7, #8
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b08c      	sub	sp, #48	; 0x30
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b22      	cmp	r3, #34	; 0x22
 8003f9e:	f040 80ab 	bne.w	80040f8 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003faa:	d117      	bne.n	8003fdc <UART_Receive_IT+0x50>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d113      	bne.n	8003fdc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbc:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd4:	1c9a      	adds	r2, r3, #2
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	629a      	str	r2, [r3, #40]	; 0x28
 8003fda:	e026      	b.n	800402a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fee:	d007      	beq.n	8004000 <UART_Receive_IT+0x74>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10a      	bne.n	800400e <UART_Receive_IT+0x82>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d106      	bne.n	800400e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	b2da      	uxtb	r2, r3
 8004008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800400a:	701a      	strb	r2, [r3, #0]
 800400c:	e008      	b.n	8004020 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	b2db      	uxtb	r3, r3
 8004016:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800401a:	b2da      	uxtb	r2, r3
 800401c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800401e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004024:	1c5a      	adds	r2, r3, #1
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800402e:	b29b      	uxth	r3, r3
 8004030:	3b01      	subs	r3, #1
 8004032:	b29b      	uxth	r3, r3
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	4619      	mov	r1, r3
 8004038:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800403a:	2b00      	cmp	r3, #0
 800403c:	d15a      	bne.n	80040f4 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68da      	ldr	r2, [r3, #12]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 0220 	bic.w	r2, r2, #32
 800404c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68da      	ldr	r2, [r3, #12]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800405c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	695a      	ldr	r2, [r3, #20]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 0201 	bic.w	r2, r2, #1
 800406c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2220      	movs	r2, #32
 8004072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407a:	2b01      	cmp	r3, #1
 800407c:	d135      	bne.n	80040ea <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	330c      	adds	r3, #12
 800408a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	e853 3f00 	ldrex	r3, [r3]
 8004092:	613b      	str	r3, [r7, #16]
   return(result);
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	f023 0310 	bic.w	r3, r3, #16
 800409a:	627b      	str	r3, [r7, #36]	; 0x24
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	330c      	adds	r3, #12
 80040a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040a4:	623a      	str	r2, [r7, #32]
 80040a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a8:	69f9      	ldr	r1, [r7, #28]
 80040aa:	6a3a      	ldr	r2, [r7, #32]
 80040ac:	e841 2300 	strex	r3, r2, [r1]
 80040b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1e5      	bne.n	8004084 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0310 	and.w	r3, r3, #16
 80040c2:	2b10      	cmp	r3, #16
 80040c4:	d10a      	bne.n	80040dc <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040c6:	2300      	movs	r3, #0
 80040c8:	60fb      	str	r3, [r7, #12]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	60fb      	str	r3, [r7, #12]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	60fb      	str	r3, [r7, #12]
 80040da:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040e0:	4619      	mov	r1, r3
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7ff fcf2 	bl	8003acc <HAL_UARTEx_RxEventCallback>
 80040e8:	e002      	b.n	80040f0 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 fe4c 	bl	8004d88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80040f0:	2300      	movs	r3, #0
 80040f2:	e002      	b.n	80040fa <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80040f4:	2300      	movs	r3, #0
 80040f6:	e000      	b.n	80040fa <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80040f8:	2302      	movs	r3, #2
  }
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3730      	adds	r7, #48	; 0x30
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
	...

08004104 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004108:	b09f      	sub	sp, #124	; 0x7c
 800410a:	af00      	add	r7, sp, #0
 800410c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800410e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800411a:	68d9      	ldr	r1, [r3, #12]
 800411c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	ea40 0301 	orr.w	r3, r0, r1
 8004124:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004128:	689a      	ldr	r2, [r3, #8]
 800412a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	431a      	orrs	r2, r3
 8004130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	431a      	orrs	r2, r3
 8004136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	4313      	orrs	r3, r2
 800413c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800413e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004148:	f021 010c 	bic.w	r1, r1, #12
 800414c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004152:	430b      	orrs	r3, r1
 8004154:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004162:	6999      	ldr	r1, [r3, #24]
 8004164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	ea40 0301 	orr.w	r3, r0, r1
 800416c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800416e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	4bc5      	ldr	r3, [pc, #788]	; (8004488 <UART_SetConfig+0x384>)
 8004174:	429a      	cmp	r2, r3
 8004176:	d004      	beq.n	8004182 <UART_SetConfig+0x7e>
 8004178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	4bc3      	ldr	r3, [pc, #780]	; (800448c <UART_SetConfig+0x388>)
 800417e:	429a      	cmp	r2, r3
 8004180:	d103      	bne.n	800418a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004182:	f7ff f85f 	bl	8003244 <HAL_RCC_GetPCLK2Freq>
 8004186:	6778      	str	r0, [r7, #116]	; 0x74
 8004188:	e002      	b.n	8004190 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800418a:	f7ff f847 	bl	800321c <HAL_RCC_GetPCLK1Freq>
 800418e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004192:	69db      	ldr	r3, [r3, #28]
 8004194:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004198:	f040 80b6 	bne.w	8004308 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800419c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800419e:	461c      	mov	r4, r3
 80041a0:	f04f 0500 	mov.w	r5, #0
 80041a4:	4622      	mov	r2, r4
 80041a6:	462b      	mov	r3, r5
 80041a8:	1891      	adds	r1, r2, r2
 80041aa:	6439      	str	r1, [r7, #64]	; 0x40
 80041ac:	415b      	adcs	r3, r3
 80041ae:	647b      	str	r3, [r7, #68]	; 0x44
 80041b0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80041b4:	1912      	adds	r2, r2, r4
 80041b6:	eb45 0303 	adc.w	r3, r5, r3
 80041ba:	f04f 0000 	mov.w	r0, #0
 80041be:	f04f 0100 	mov.w	r1, #0
 80041c2:	00d9      	lsls	r1, r3, #3
 80041c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041c8:	00d0      	lsls	r0, r2, #3
 80041ca:	4602      	mov	r2, r0
 80041cc:	460b      	mov	r3, r1
 80041ce:	1911      	adds	r1, r2, r4
 80041d0:	6639      	str	r1, [r7, #96]	; 0x60
 80041d2:	416b      	adcs	r3, r5
 80041d4:	667b      	str	r3, [r7, #100]	; 0x64
 80041d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	461a      	mov	r2, r3
 80041dc:	f04f 0300 	mov.w	r3, #0
 80041e0:	1891      	adds	r1, r2, r2
 80041e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80041e4:	415b      	adcs	r3, r3
 80041e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80041ec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80041f0:	f7fc fd4a 	bl	8000c88 <__aeabi_uldivmod>
 80041f4:	4602      	mov	r2, r0
 80041f6:	460b      	mov	r3, r1
 80041f8:	4ba5      	ldr	r3, [pc, #660]	; (8004490 <UART_SetConfig+0x38c>)
 80041fa:	fba3 2302 	umull	r2, r3, r3, r2
 80041fe:	095b      	lsrs	r3, r3, #5
 8004200:	011e      	lsls	r6, r3, #4
 8004202:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004204:	461c      	mov	r4, r3
 8004206:	f04f 0500 	mov.w	r5, #0
 800420a:	4622      	mov	r2, r4
 800420c:	462b      	mov	r3, r5
 800420e:	1891      	adds	r1, r2, r2
 8004210:	6339      	str	r1, [r7, #48]	; 0x30
 8004212:	415b      	adcs	r3, r3
 8004214:	637b      	str	r3, [r7, #52]	; 0x34
 8004216:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800421a:	1912      	adds	r2, r2, r4
 800421c:	eb45 0303 	adc.w	r3, r5, r3
 8004220:	f04f 0000 	mov.w	r0, #0
 8004224:	f04f 0100 	mov.w	r1, #0
 8004228:	00d9      	lsls	r1, r3, #3
 800422a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800422e:	00d0      	lsls	r0, r2, #3
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	1911      	adds	r1, r2, r4
 8004236:	65b9      	str	r1, [r7, #88]	; 0x58
 8004238:	416b      	adcs	r3, r5
 800423a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800423c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	461a      	mov	r2, r3
 8004242:	f04f 0300 	mov.w	r3, #0
 8004246:	1891      	adds	r1, r2, r2
 8004248:	62b9      	str	r1, [r7, #40]	; 0x28
 800424a:	415b      	adcs	r3, r3
 800424c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800424e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004252:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004256:	f7fc fd17 	bl	8000c88 <__aeabi_uldivmod>
 800425a:	4602      	mov	r2, r0
 800425c:	460b      	mov	r3, r1
 800425e:	4b8c      	ldr	r3, [pc, #560]	; (8004490 <UART_SetConfig+0x38c>)
 8004260:	fba3 1302 	umull	r1, r3, r3, r2
 8004264:	095b      	lsrs	r3, r3, #5
 8004266:	2164      	movs	r1, #100	; 0x64
 8004268:	fb01 f303 	mul.w	r3, r1, r3
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	3332      	adds	r3, #50	; 0x32
 8004272:	4a87      	ldr	r2, [pc, #540]	; (8004490 <UART_SetConfig+0x38c>)
 8004274:	fba2 2303 	umull	r2, r3, r2, r3
 8004278:	095b      	lsrs	r3, r3, #5
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004280:	441e      	add	r6, r3
 8004282:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004284:	4618      	mov	r0, r3
 8004286:	f04f 0100 	mov.w	r1, #0
 800428a:	4602      	mov	r2, r0
 800428c:	460b      	mov	r3, r1
 800428e:	1894      	adds	r4, r2, r2
 8004290:	623c      	str	r4, [r7, #32]
 8004292:	415b      	adcs	r3, r3
 8004294:	627b      	str	r3, [r7, #36]	; 0x24
 8004296:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800429a:	1812      	adds	r2, r2, r0
 800429c:	eb41 0303 	adc.w	r3, r1, r3
 80042a0:	f04f 0400 	mov.w	r4, #0
 80042a4:	f04f 0500 	mov.w	r5, #0
 80042a8:	00dd      	lsls	r5, r3, #3
 80042aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80042ae:	00d4      	lsls	r4, r2, #3
 80042b0:	4622      	mov	r2, r4
 80042b2:	462b      	mov	r3, r5
 80042b4:	1814      	adds	r4, r2, r0
 80042b6:	653c      	str	r4, [r7, #80]	; 0x50
 80042b8:	414b      	adcs	r3, r1
 80042ba:	657b      	str	r3, [r7, #84]	; 0x54
 80042bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	461a      	mov	r2, r3
 80042c2:	f04f 0300 	mov.w	r3, #0
 80042c6:	1891      	adds	r1, r2, r2
 80042c8:	61b9      	str	r1, [r7, #24]
 80042ca:	415b      	adcs	r3, r3
 80042cc:	61fb      	str	r3, [r7, #28]
 80042ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042d2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80042d6:	f7fc fcd7 	bl	8000c88 <__aeabi_uldivmod>
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	4b6c      	ldr	r3, [pc, #432]	; (8004490 <UART_SetConfig+0x38c>)
 80042e0:	fba3 1302 	umull	r1, r3, r3, r2
 80042e4:	095b      	lsrs	r3, r3, #5
 80042e6:	2164      	movs	r1, #100	; 0x64
 80042e8:	fb01 f303 	mul.w	r3, r1, r3
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	3332      	adds	r3, #50	; 0x32
 80042f2:	4a67      	ldr	r2, [pc, #412]	; (8004490 <UART_SetConfig+0x38c>)
 80042f4:	fba2 2303 	umull	r2, r3, r2, r3
 80042f8:	095b      	lsrs	r3, r3, #5
 80042fa:	f003 0207 	and.w	r2, r3, #7
 80042fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4432      	add	r2, r6
 8004304:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004306:	e0b9      	b.n	800447c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004308:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800430a:	461c      	mov	r4, r3
 800430c:	f04f 0500 	mov.w	r5, #0
 8004310:	4622      	mov	r2, r4
 8004312:	462b      	mov	r3, r5
 8004314:	1891      	adds	r1, r2, r2
 8004316:	6139      	str	r1, [r7, #16]
 8004318:	415b      	adcs	r3, r3
 800431a:	617b      	str	r3, [r7, #20]
 800431c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004320:	1912      	adds	r2, r2, r4
 8004322:	eb45 0303 	adc.w	r3, r5, r3
 8004326:	f04f 0000 	mov.w	r0, #0
 800432a:	f04f 0100 	mov.w	r1, #0
 800432e:	00d9      	lsls	r1, r3, #3
 8004330:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004334:	00d0      	lsls	r0, r2, #3
 8004336:	4602      	mov	r2, r0
 8004338:	460b      	mov	r3, r1
 800433a:	eb12 0804 	adds.w	r8, r2, r4
 800433e:	eb43 0905 	adc.w	r9, r3, r5
 8004342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	4618      	mov	r0, r3
 8004348:	f04f 0100 	mov.w	r1, #0
 800434c:	f04f 0200 	mov.w	r2, #0
 8004350:	f04f 0300 	mov.w	r3, #0
 8004354:	008b      	lsls	r3, r1, #2
 8004356:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800435a:	0082      	lsls	r2, r0, #2
 800435c:	4640      	mov	r0, r8
 800435e:	4649      	mov	r1, r9
 8004360:	f7fc fc92 	bl	8000c88 <__aeabi_uldivmod>
 8004364:	4602      	mov	r2, r0
 8004366:	460b      	mov	r3, r1
 8004368:	4b49      	ldr	r3, [pc, #292]	; (8004490 <UART_SetConfig+0x38c>)
 800436a:	fba3 2302 	umull	r2, r3, r3, r2
 800436e:	095b      	lsrs	r3, r3, #5
 8004370:	011e      	lsls	r6, r3, #4
 8004372:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004374:	4618      	mov	r0, r3
 8004376:	f04f 0100 	mov.w	r1, #0
 800437a:	4602      	mov	r2, r0
 800437c:	460b      	mov	r3, r1
 800437e:	1894      	adds	r4, r2, r2
 8004380:	60bc      	str	r4, [r7, #8]
 8004382:	415b      	adcs	r3, r3
 8004384:	60fb      	str	r3, [r7, #12]
 8004386:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800438a:	1812      	adds	r2, r2, r0
 800438c:	eb41 0303 	adc.w	r3, r1, r3
 8004390:	f04f 0400 	mov.w	r4, #0
 8004394:	f04f 0500 	mov.w	r5, #0
 8004398:	00dd      	lsls	r5, r3, #3
 800439a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800439e:	00d4      	lsls	r4, r2, #3
 80043a0:	4622      	mov	r2, r4
 80043a2:	462b      	mov	r3, r5
 80043a4:	1814      	adds	r4, r2, r0
 80043a6:	64bc      	str	r4, [r7, #72]	; 0x48
 80043a8:	414b      	adcs	r3, r1
 80043aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f04f 0100 	mov.w	r1, #0
 80043b6:	f04f 0200 	mov.w	r2, #0
 80043ba:	f04f 0300 	mov.w	r3, #0
 80043be:	008b      	lsls	r3, r1, #2
 80043c0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80043c4:	0082      	lsls	r2, r0, #2
 80043c6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80043ca:	f7fc fc5d 	bl	8000c88 <__aeabi_uldivmod>
 80043ce:	4602      	mov	r2, r0
 80043d0:	460b      	mov	r3, r1
 80043d2:	4b2f      	ldr	r3, [pc, #188]	; (8004490 <UART_SetConfig+0x38c>)
 80043d4:	fba3 1302 	umull	r1, r3, r3, r2
 80043d8:	095b      	lsrs	r3, r3, #5
 80043da:	2164      	movs	r1, #100	; 0x64
 80043dc:	fb01 f303 	mul.w	r3, r1, r3
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	011b      	lsls	r3, r3, #4
 80043e4:	3332      	adds	r3, #50	; 0x32
 80043e6:	4a2a      	ldr	r2, [pc, #168]	; (8004490 <UART_SetConfig+0x38c>)
 80043e8:	fba2 2303 	umull	r2, r3, r2, r3
 80043ec:	095b      	lsrs	r3, r3, #5
 80043ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043f2:	441e      	add	r6, r3
 80043f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043f6:	4618      	mov	r0, r3
 80043f8:	f04f 0100 	mov.w	r1, #0
 80043fc:	4602      	mov	r2, r0
 80043fe:	460b      	mov	r3, r1
 8004400:	1894      	adds	r4, r2, r2
 8004402:	603c      	str	r4, [r7, #0]
 8004404:	415b      	adcs	r3, r3
 8004406:	607b      	str	r3, [r7, #4]
 8004408:	e9d7 2300 	ldrd	r2, r3, [r7]
 800440c:	1812      	adds	r2, r2, r0
 800440e:	eb41 0303 	adc.w	r3, r1, r3
 8004412:	f04f 0400 	mov.w	r4, #0
 8004416:	f04f 0500 	mov.w	r5, #0
 800441a:	00dd      	lsls	r5, r3, #3
 800441c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004420:	00d4      	lsls	r4, r2, #3
 8004422:	4622      	mov	r2, r4
 8004424:	462b      	mov	r3, r5
 8004426:	eb12 0a00 	adds.w	sl, r2, r0
 800442a:	eb43 0b01 	adc.w	fp, r3, r1
 800442e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	4618      	mov	r0, r3
 8004434:	f04f 0100 	mov.w	r1, #0
 8004438:	f04f 0200 	mov.w	r2, #0
 800443c:	f04f 0300 	mov.w	r3, #0
 8004440:	008b      	lsls	r3, r1, #2
 8004442:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004446:	0082      	lsls	r2, r0, #2
 8004448:	4650      	mov	r0, sl
 800444a:	4659      	mov	r1, fp
 800444c:	f7fc fc1c 	bl	8000c88 <__aeabi_uldivmod>
 8004450:	4602      	mov	r2, r0
 8004452:	460b      	mov	r3, r1
 8004454:	4b0e      	ldr	r3, [pc, #56]	; (8004490 <UART_SetConfig+0x38c>)
 8004456:	fba3 1302 	umull	r1, r3, r3, r2
 800445a:	095b      	lsrs	r3, r3, #5
 800445c:	2164      	movs	r1, #100	; 0x64
 800445e:	fb01 f303 	mul.w	r3, r1, r3
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	011b      	lsls	r3, r3, #4
 8004466:	3332      	adds	r3, #50	; 0x32
 8004468:	4a09      	ldr	r2, [pc, #36]	; (8004490 <UART_SetConfig+0x38c>)
 800446a:	fba2 2303 	umull	r2, r3, r2, r3
 800446e:	095b      	lsrs	r3, r3, #5
 8004470:	f003 020f 	and.w	r2, r3, #15
 8004474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4432      	add	r2, r6
 800447a:	609a      	str	r2, [r3, #8]
}
 800447c:	bf00      	nop
 800447e:	377c      	adds	r7, #124	; 0x7c
 8004480:	46bd      	mov	sp, r7
 8004482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004486:	bf00      	nop
 8004488:	40011000 	.word	0x40011000
 800448c:	40011400 	.word	0x40011400
 8004490:	51eb851f 	.word	0x51eb851f

08004494 <hostUartBootLoaderConfiguration>:
#define __HOST_UART_BOOTLOADER_CONFIGURATION
/** @brief  hostUartBootLoaderConfiguration
    @return none
*/
void hostUartBootLoaderConfiguration(void)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	af00      	add	r7, sp, #0
    /// init serialPort library
    serial_port4.zPrivate.uartHandle.hdmarx = &hdma_uart4_rx;
 8004498:	4b0d      	ldr	r3, [pc, #52]	; (80044d0 <hostUartBootLoaderConfiguration+0x3c>)
 800449a:	4a0e      	ldr	r2, [pc, #56]	; (80044d4 <hostUartBootLoaderConfiguration+0x40>)
 800449c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    serial_port4.zPrivate.uartHandle.Instance = UART4;
 80044a0:	4b0b      	ldr	r3, [pc, #44]	; (80044d0 <hostUartBootLoaderConfiguration+0x3c>)
 80044a2:	4a0d      	ldr	r2, [pc, #52]	; (80044d8 <hostUartBootLoaderConfiguration+0x44>)
 80044a4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    serial_port4.isWriteFinish = true;
 80044a8:	4b09      	ldr	r3, [pc, #36]	; (80044d0 <hostUartBootLoaderConfiguration+0x3c>)
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

	ringBufferInit(&rBufferRx);
 80044b0:	480a      	ldr	r0, [pc, #40]	; (80044dc <hostUartBootLoaderConfiguration+0x48>)
 80044b2:	f000 f96d 	bl	8004790 <ringBufferInit>

	if(HAL_UART_Receive_IT(&huart4, &hBootLoader.boot.rxData, 1) != HAL_OK)
 80044b6:	2201      	movs	r2, #1
 80044b8:	4909      	ldr	r1, [pc, #36]	; (80044e0 <hostUartBootLoaderConfiguration+0x4c>)
 80044ba:	480a      	ldr	r0, [pc, #40]	; (80044e4 <hostUartBootLoaderConfiguration+0x50>)
 80044bc:	f7fe ffb5 	bl	800342a <HAL_UART_Receive_IT>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <hostUartBootLoaderConfiguration+0x36>
	{
		Error_Handler();
 80044c6:	f7fc ff57 	bl	8001378 <Error_Handler>
	}
}
 80044ca:	bf00      	nop
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	2000074c 	.word	0x2000074c
 80044d4:	20000430 	.word	0x20000430
 80044d8:	40004c00 	.word	0x40004c00
 80044dc:	20000200 	.word	0x20000200
 80044e0:	20000741 	.word	0x20000741
 80044e4:	20000654 	.word	0x20000654

080044e8 <hostBootLoader_readData>:

/** @brief  hostBootLoader_readData
    @return
*/
static void hostBootLoader_readData(uartCallback_t *cb, uartBootLoader_t *boot)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
	if(cb->rxComplete == true)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d013      	beq.n	8004522 <hostBootLoader_readData+0x3a>
	{
		cb->rxComplete = false;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	701a      	strb	r2, [r3, #0]

		ringBufferWrite(&rBufferRx, boot->rxData);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	4619      	mov	r1, r3
 8004506:	4809      	ldr	r0, [pc, #36]	; (800452c <hostBootLoader_readData+0x44>)
 8004508:	f000 f955 	bl	80047b6 <ringBufferWrite>

		if(HAL_UART_Receive_IT(&huart4, &boot->rxData, 1) != HAL_OK)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	2201      	movs	r2, #1
 8004510:	4619      	mov	r1, r3
 8004512:	4807      	ldr	r0, [pc, #28]	; (8004530 <hostBootLoader_readData+0x48>)
 8004514:	f7fe ff89 	bl	800342a <HAL_UART_Receive_IT>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <hostBootLoader_readData+0x3a>
		{
			Error_Handler();
 800451e:	f7fc ff2b 	bl	8001378 <Error_Handler>
		}
	}
}
 8004522:	bf00      	nop
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	20000200 	.word	0x20000200
 8004530:	20000654 	.word	0x20000654

08004534 <hostBootLoader_sendCmdConnect>:

/** @brief  hostBootLoader_sendCmdConnect
    @return bool
*/
static void hostBootLoader_sendCmdConnect(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
	uint8_t buffer[2] = {UART_BOOTLOADER_CMD_CONNECT, 0};
 800453a:	237f      	movs	r3, #127	; 0x7f
 800453c:	80bb      	strh	r3, [r7, #4]

	serialPort_write_list(&serial_port4, buffer);
 800453e:	1d3b      	adds	r3, r7, #4
 8004540:	4619      	mov	r1, r3
 8004542:	4803      	ldr	r0, [pc, #12]	; (8004550 <hostBootLoader_sendCmdConnect+0x1c>)
 8004544:	f000 fa30 	bl	80049a8 <serialPort_write_list>
}
 8004548:	bf00      	nop
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	2000074c 	.word	0x2000074c

08004554 <hostBootLoaderCmdConnect>:

/** @brief  hostBootLoaderCmdConnect
    @return bool
*/
static bool hostBootLoaderCmdConnect(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
	uint8_t rData = 0;
 800455a:	2300      	movs	r3, #0
 800455c:	71fb      	strb	r3, [r7, #7]
	static uint32_t timePrintDebug = 0;
	static uint32_t timeSendCmd	= 0;

	if(ringBufferRead(&rBufferRx, &rData) == RING_BUFFER_OK)
 800455e:	1dfb      	adds	r3, r7, #7
 8004560:	4619      	mov	r1, r3
 8004562:	4822      	ldr	r0, [pc, #136]	; (80045ec <hostBootLoaderCmdConnect+0x98>)
 8004564:	f000 f952 	bl	800480c <ringBufferRead>
 8004568:	4603      	mov	r3, r0
 800456a:	2b01      	cmp	r3, #1
 800456c:	d115      	bne.n	800459a <hostBootLoaderCmdConnect+0x46>
	{
		if(rBufferRx.head == 1)
 800456e:	4b1f      	ldr	r3, [pc, #124]	; (80045ec <hostBootLoaderCmdConnect+0x98>)
 8004570:	881b      	ldrh	r3, [r3, #0]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d124      	bne.n	80045c0 <hostBootLoaderCmdConnect+0x6c>
		{
			if(rData == UART_BOOTLOADER_ACK)
 8004576:	79fb      	ldrb	r3, [r7, #7]
 8004578:	2b79      	cmp	r3, #121	; 0x79
 800457a:	d10a      	bne.n	8004592 <hostBootLoaderCmdConnect+0x3e>
			{
				timePrintDebug = 0;
 800457c:	4b1c      	ldr	r3, [pc, #112]	; (80045f0 <hostBootLoaderCmdConnect+0x9c>)
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]
				timeSendCmd	= 0;
 8004582:	4b1c      	ldr	r3, [pc, #112]	; (80045f4 <hostBootLoaderCmdConnect+0xa0>)
 8004584:	2200      	movs	r2, #0
 8004586:	601a      	str	r2, [r3, #0]
				printf("\n[hostBootLoaderCmdConnect] boot connected !@!\n");
 8004588:	481b      	ldr	r0, [pc, #108]	; (80045f8 <hostBootLoaderCmdConnect+0xa4>)
 800458a:	f001 fc27 	bl	8005ddc <puts>
				return true;
 800458e:	2301      	movs	r3, #1
 8004590:	e028      	b.n	80045e4 <hostBootLoaderCmdConnect+0x90>
			}
			else
			{
				printf("\n[hostBootLoaderCmdConnect] reciever nack byte !@!\n");
 8004592:	481a      	ldr	r0, [pc, #104]	; (80045fc <hostBootLoaderCmdConnect+0xa8>)
 8004594:	f001 fc22 	bl	8005ddc <puts>
 8004598:	e012      	b.n	80045c0 <hostBootLoaderCmdConnect+0x6c>
			}
		}
	}
	else
	{
		if(HAL_GetTick() - timeSendCmd > 1000)
 800459a:	f7fd faf9 	bl	8001b90 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	4b14      	ldr	r3, [pc, #80]	; (80045f4 <hostBootLoaderCmdConnect+0xa0>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045aa:	d909      	bls.n	80045c0 <hostBootLoaderCmdConnect+0x6c>
		{
			timeSendCmd = HAL_GetTick();
 80045ac:	f7fd faf0 	bl	8001b90 <HAL_GetTick>
 80045b0:	4603      	mov	r3, r0
 80045b2:	4a10      	ldr	r2, [pc, #64]	; (80045f4 <hostBootLoaderCmdConnect+0xa0>)
 80045b4:	6013      	str	r3, [r2, #0]

			hostBootLoader_sendCmdConnect();
 80045b6:	f7ff ffbd 	bl	8004534 <hostBootLoader_sendCmdConnect>
			printf("\n[hostBootLoaderCmdConnect] send cmd connect ...\n");
 80045ba:	4811      	ldr	r0, [pc, #68]	; (8004600 <hostBootLoaderCmdConnect+0xac>)
 80045bc:	f001 fc0e 	bl	8005ddc <puts>
		}
	}

	if(HAL_GetTick() - timePrintDebug > 1000)
 80045c0:	f7fd fae6 	bl	8001b90 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	4b0a      	ldr	r3, [pc, #40]	; (80045f0 <hostBootLoaderCmdConnect+0x9c>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045d0:	d907      	bls.n	80045e2 <hostBootLoaderCmdConnect+0x8e>
	{
		timePrintDebug = HAL_GetTick();
 80045d2:	f7fd fadd 	bl	8001b90 <HAL_GetTick>
 80045d6:	4603      	mov	r3, r0
 80045d8:	4a05      	ldr	r2, [pc, #20]	; (80045f0 <hostBootLoaderCmdConnect+0x9c>)
 80045da:	6013      	str	r3, [r2, #0]
		printf("\n[hostBootLoaderCmdConnect] waitting ack cmd ...\n");
 80045dc:	4809      	ldr	r0, [pc, #36]	; (8004604 <hostBootLoaderCmdConnect+0xb0>)
 80045de:	f001 fbfd 	bl	8005ddc <puts>
	}

	return false;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3708      	adds	r7, #8
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	20000200 	.word	0x20000200
 80045f0:	20000308 	.word	0x20000308
 80045f4:	2000030c 	.word	0x2000030c
 80045f8:	08009970 	.word	0x08009970
 80045fc:	080099a0 	.word	0x080099a0
 8004600:	080099d4 	.word	0x080099d4
 8004604:	08009a08 	.word	0x08009a08

08004608 <hostBootLoader_sendCmdGet>:

/** @brief  hostBootLoader_sendCmdGet
    @return bool
*/
static bool hostBootLoader_sendCmdGet(bootLoaderGetCmd_t *cmd)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
	uint8_t rData = 0;
 8004610:	2300      	movs	r3, #0
 8004612:	73bb      	strb	r3, [r7, #14]
	uint8_t cmdGetBuff[2] = {0x00, 0xFF};
 8004614:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8004618:	81bb      	strh	r3, [r7, #12]
	uint8_t cmdGetRBuff[3] = {0, 0, 0};
 800461a:	4a32      	ldr	r2, [pc, #200]	; (80046e4 <hostBootLoader_sendCmdGet+0xdc>)
 800461c:	f107 0308 	add.w	r3, r7, #8
 8004620:	6812      	ldr	r2, [r2, #0]
 8004622:	4611      	mov	r1, r2
 8004624:	8019      	strh	r1, [r3, #0]
 8004626:	3302      	adds	r3, #2
 8004628:	0c12      	lsrs	r2, r2, #16
 800462a:	701a      	strb	r2, [r3, #0]
	static uint32_t timeSendCmdGet = 0;

	if(ringBufferRead(&rBufferRx, &rData))
 800462c:	f107 030e 	add.w	r3, r7, #14
 8004630:	4619      	mov	r1, r3
 8004632:	482d      	ldr	r0, [pc, #180]	; (80046e8 <hostBootLoader_sendCmdGet+0xe0>)
 8004634:	f000 f8ea 	bl	800480c <ringBufferRead>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d032      	beq.n	80046a4 <hostBootLoader_sendCmdGet+0x9c>
	{
		if(rBufferRx.head == 1)
 800463e:	4b2a      	ldr	r3, [pc, #168]	; (80046e8 <hostBootLoader_sendCmdGet+0xe0>)
 8004640:	881b      	ldrh	r3, [r3, #0]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d149      	bne.n	80046da <hostBootLoader_sendCmdGet+0xd2>
		{
			if(rData == UART_BOOTLOADER_ACK)
 8004646:	7bbb      	ldrb	r3, [r7, #14]
 8004648:	2b79      	cmp	r3, #121	; 0x79
 800464a:	d146      	bne.n	80046da <hostBootLoader_sendCmdGet+0xd2>
			{
				printf("\n[hostBootLoader_sendCmdGet] reciever cmd ack\n");
 800464c:	4827      	ldr	r0, [pc, #156]	; (80046ec <hostBootLoader_sendCmdGet+0xe4>)
 800464e:	f001 fbc5 	bl	8005ddc <puts>
				for(uint8_t i = 0; i < 3; i++)
 8004652:	2300      	movs	r3, #0
 8004654:	73fb      	strb	r3, [r7, #15]
 8004656:	e017      	b.n	8004688 <hostBootLoader_sendCmdGet+0x80>
				{
					if(ringBufferRead(&rBufferRx, &rData))
 8004658:	f107 030e 	add.w	r3, r7, #14
 800465c:	4619      	mov	r1, r3
 800465e:	4822      	ldr	r0, [pc, #136]	; (80046e8 <hostBootLoader_sendCmdGet+0xe0>)
 8004660:	f000 f8d4 	bl	800480c <ringBufferRead>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00b      	beq.n	8004682 <hostBootLoader_sendCmdGet+0x7a>
					{
						cmdGetRBuff[i] = rData;
 800466a:	7bfb      	ldrb	r3, [r7, #15]
 800466c:	7bba      	ldrb	r2, [r7, #14]
 800466e:	f107 0110 	add.w	r1, r7, #16
 8004672:	440b      	add	r3, r1
 8004674:	f803 2c08 	strb.w	r2, [r3, #-8]
						printf("\n[hostBootLoader_sendCmdGet] reciever data cmd get value = %d\n", rData);
 8004678:	7bbb      	ldrb	r3, [r7, #14]
 800467a:	4619      	mov	r1, r3
 800467c:	481c      	ldr	r0, [pc, #112]	; (80046f0 <hostBootLoader_sendCmdGet+0xe8>)
 800467e:	f001 fb27 	bl	8005cd0 <iprintf>
				for(uint8_t i = 0; i < 3; i++)
 8004682:	7bfb      	ldrb	r3, [r7, #15]
 8004684:	3301      	adds	r3, #1
 8004686:	73fb      	strb	r3, [r7, #15]
 8004688:	7bfb      	ldrb	r3, [r7, #15]
 800468a:	2b02      	cmp	r3, #2
 800468c:	d9e4      	bls.n	8004658 <hostBootLoader_sendCmdGet+0x50>
					}
				}

				cmd->numberOfbyte 	= cmdGetRBuff[0];
 800468e:	7a3a      	ldrb	r2, [r7, #8]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	701a      	strb	r2, [r3, #0]
				cmd->version 		= cmdGetRBuff[1];
 8004694:	7a7a      	ldrb	r2, [r7, #9]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	705a      	strb	r2, [r3, #1]
				cmd->support 		= cmdGetRBuff[2];
 800469a:	7aba      	ldrb	r2, [r7, #10]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	709a      	strb	r2, [r3, #2]

				return true;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e01b      	b.n	80046dc <hostBootLoader_sendCmdGet+0xd4>
			}
		}
	}
	else
	{
		if(HAL_GetTick() - timeSendCmdGet > 1000 || timeSendCmdGet == 0)
 80046a4:	f7fd fa74 	bl	8001b90 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	4b12      	ldr	r3, [pc, #72]	; (80046f4 <hostBootLoader_sendCmdGet+0xec>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046b4:	d803      	bhi.n	80046be <hostBootLoader_sendCmdGet+0xb6>
 80046b6:	4b0f      	ldr	r3, [pc, #60]	; (80046f4 <hostBootLoader_sendCmdGet+0xec>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10d      	bne.n	80046da <hostBootLoader_sendCmdGet+0xd2>
		{
			timeSendCmdGet = HAL_GetTick();
 80046be:	f7fd fa67 	bl	8001b90 <HAL_GetTick>
 80046c2:	4603      	mov	r3, r0
 80046c4:	4a0b      	ldr	r2, [pc, #44]	; (80046f4 <hostBootLoader_sendCmdGet+0xec>)
 80046c6:	6013      	str	r3, [r2, #0]

			printf("\n[hostBootLoader_sendCmdGet] send cmd get\n");
 80046c8:	480b      	ldr	r0, [pc, #44]	; (80046f8 <hostBootLoader_sendCmdGet+0xf0>)
 80046ca:	f001 fb87 	bl	8005ddc <puts>

			serialPort_write_list(&serial_port4, cmdGetBuff);
 80046ce:	f107 030c 	add.w	r3, r7, #12
 80046d2:	4619      	mov	r1, r3
 80046d4:	4809      	ldr	r0, [pc, #36]	; (80046fc <hostBootLoader_sendCmdGet+0xf4>)
 80046d6:	f000 f967 	bl	80049a8 <serialPort_write_list>
		}
	}

	return false;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	08009ad8 	.word	0x08009ad8
 80046e8:	20000200 	.word	0x20000200
 80046ec:	08009a3c 	.word	0x08009a3c
 80046f0:	08009a6c 	.word	0x08009a6c
 80046f4:	20000310 	.word	0x20000310
 80046f8:	08009aac 	.word	0x08009aac
 80046fc:	2000074c 	.word	0x2000074c

08004700 <hostUartBootLoaderProcess>:
#define __HOST_UART_BOOTLOADER_PROCESS
/** @brief  hostUartBootLoaderProcess
    @return none
*/
void hostUartBootLoaderProcess(void)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	af00      	add	r7, sp, #0
	hostBootLoader_readData(&callback4, &hBootLoader.boot);
 8004704:	491d      	ldr	r1, [pc, #116]	; (800477c <hostUartBootLoaderProcess+0x7c>)
 8004706:	481e      	ldr	r0, [pc, #120]	; (8004780 <hostUartBootLoaderProcess+0x80>)
 8004708:	f7ff feee 	bl	80044e8 <hostBootLoader_readData>

	switch(hBootLoader.state)
 800470c:	4b1d      	ldr	r3, [pc, #116]	; (8004784 <hostUartBootLoaderProcess+0x84>)
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	2b05      	cmp	r3, #5
 8004712:	d830      	bhi.n	8004776 <hostUartBootLoaderProcess+0x76>
 8004714:	a201      	add	r2, pc, #4	; (adr r2, 800471c <hostUartBootLoaderProcess+0x1c>)
 8004716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800471a:	bf00      	nop
 800471c:	08004735 	.word	0x08004735
 8004720:	08004747 	.word	0x08004747
 8004724:	08004771 	.word	0x08004771
 8004728:	08004771 	.word	0x08004771
 800472c:	08004771 	.word	0x08004771
 8004730:	08004771 	.word	0x08004771
	{
		case BOOTLOADER_STATE_IDLE:
		{
			if(hostBootLoaderCmdConnect() == true)
 8004734:	f7ff ff0e 	bl	8004554 <hostBootLoaderCmdConnect>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d01a      	beq.n	8004774 <hostUartBootLoaderProcess+0x74>
			{
				hBootLoader.state = BOOTLOADER_STATE_CONNECTED;
 800473e:	4b11      	ldr	r3, [pc, #68]	; (8004784 <hostUartBootLoaderProcess+0x84>)
 8004740:	2201      	movs	r2, #1
 8004742:	701a      	strb	r2, [r3, #0]
			}
		}break;
 8004744:	e016      	b.n	8004774 <hostUartBootLoaderProcess+0x74>
		case BOOTLOADER_STATE_CONNECTED:
		{
			static uint8_t state = 0;
			switch(state)
 8004746:	4b10      	ldr	r3, [pc, #64]	; (8004788 <hostUartBootLoaderProcess+0x88>)
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d002      	beq.n	8004754 <hostUartBootLoaderProcess+0x54>
 800474e:	2b01      	cmp	r3, #1
 8004750:	d00a      	beq.n	8004768 <hostUartBootLoaderProcess+0x68>
				case 1:
				{

				}break;
			}
		}break;
 8004752:	e010      	b.n	8004776 <hostUartBootLoaderProcess+0x76>
					if(hostBootLoader_sendCmdGet(&hBootLoader.boot.getCmd) == true)
 8004754:	480d      	ldr	r0, [pc, #52]	; (800478c <hostUartBootLoaderProcess+0x8c>)
 8004756:	f7ff ff57 	bl	8004608 <hostBootLoader_sendCmdGet>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d005      	beq.n	800476c <hostUartBootLoaderProcess+0x6c>
						state = 1;
 8004760:	4b09      	ldr	r3, [pc, #36]	; (8004788 <hostUartBootLoaderProcess+0x88>)
 8004762:	2201      	movs	r2, #1
 8004764:	701a      	strb	r2, [r3, #0]
				}break;
 8004766:	e001      	b.n	800476c <hostUartBootLoaderProcess+0x6c>
				}break;
 8004768:	bf00      	nop
 800476a:	e004      	b.n	8004776 <hostUartBootLoaderProcess+0x76>
				}break;
 800476c:	bf00      	nop
		}break;
 800476e:	e002      	b.n	8004776 <hostUartBootLoaderProcess+0x76>
		case BOOTLOADER_STATE_ERASE:
		{

		}break;
 8004770:	bf00      	nop
 8004772:	e000      	b.n	8004776 <hostUartBootLoaderProcess+0x76>
		}break;
 8004774:	bf00      	nop
		case BOOTLOADER_STATE_ERROR:
		{

		}break;
	}
}
 8004776:	bf00      	nop
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	20000741 	.word	0x20000741
 8004780:	20001d18 	.word	0x20001d18
 8004784:	20000740 	.word	0x20000740
 8004788:	20000314 	.word	0x20000314
 800478c:	20000743 	.word	0x20000743

08004790 <ringBufferInit>:
#define __RING_BUFFER_CONFIGURATION
/** @brief  ringBufferInit
    @return none
*/
void ringBufferInit(ringBuffer_t *rBuff)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
	rBuff->head = 0;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	801a      	strh	r2, [r3, #0]
	rBuff->tail = 0;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	805a      	strh	r2, [r3, #2]
	rBuff->len = 0;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	809a      	strh	r2, [r3, #4]
}
 80047aa:	bf00      	nop
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr

080047b6 <ringBufferWrite>:
#define __RING_BUFFER_FUNCTION
/** @brief  ringBufferWrite
    @return ringBufferState_t
*/
ringBufferState_t ringBufferWrite(ringBuffer_t *rBuff, uint8_t wData)
{
 80047b6:	b480      	push	{r7}
 80047b8:	b083      	sub	sp, #12
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
 80047be:	460b      	mov	r3, r1
 80047c0:	70fb      	strb	r3, [r7, #3]
	if(rBuff->len >= RING_BUFFER_LEN)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	889b      	ldrh	r3, [r3, #4]
 80047c6:	2bff      	cmp	r3, #255	; 0xff
 80047c8:	d901      	bls.n	80047ce <ringBufferWrite+0x18>
	{
		return RING_BUFFER_ERROR;
 80047ca:	2300      	movs	r3, #0
 80047cc:	e018      	b.n	8004800 <ringBufferWrite+0x4a>
	}

	rBuff->buffer[rBuff->tail] = wData;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	885b      	ldrh	r3, [r3, #2]
 80047d2:	461a      	mov	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4413      	add	r3, r2
 80047d8:	78fa      	ldrb	r2, [r7, #3]
 80047da:	719a      	strb	r2, [r3, #6]
	rBuff->tail = (rBuff->tail + 1) % RING_BUFFER_LEN;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	885b      	ldrh	r3, [r3, #2]
 80047e0:	3301      	adds	r3, #1
 80047e2:	425a      	negs	r2, r3
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	b2d2      	uxtb	r2, r2
 80047e8:	bf58      	it	pl
 80047ea:	4253      	negpl	r3, r2
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	805a      	strh	r2, [r3, #2]
	rBuff->len++;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	889b      	ldrh	r3, [r3, #4]
 80047f6:	3301      	adds	r3, #1
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	809a      	strh	r2, [r3, #4]

	return RING_BUFFER_OK;
 80047fe:	2301      	movs	r3, #1
}
 8004800:	4618      	mov	r0, r3
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <ringBufferRead>:

/** @brief  ringBufferRead
    @return ringBufferState_t
*/
ringBufferState_t ringBufferRead(ringBuffer_t *rBuff, uint8_t *rData)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
	if(rBuff->len == 0)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	889b      	ldrh	r3, [r3, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <ringBufferRead+0x16>
	{
		return RING_BUFFER_ERROR;
 800481e:	2300      	movs	r3, #0
 8004820:	e019      	b.n	8004856 <ringBufferRead+0x4a>
	}

	*rData = rBuff->buffer[rBuff->head];
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	461a      	mov	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4413      	add	r3, r2
 800482c:	799a      	ldrb	r2, [r3, #6]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	701a      	strb	r2, [r3, #0]
	rBuff->head = (rBuff->head + 1) % RING_BUFFER_LEN;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	881b      	ldrh	r3, [r3, #0]
 8004836:	3301      	adds	r3, #1
 8004838:	425a      	negs	r2, r3
 800483a:	b2db      	uxtb	r3, r3
 800483c:	b2d2      	uxtb	r2, r2
 800483e:	bf58      	it	pl
 8004840:	4253      	negpl	r3, r2
 8004842:	b29a      	uxth	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	801a      	strh	r2, [r3, #0]
	rBuff->len--;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	889b      	ldrh	r3, [r3, #4]
 800484c:	3b01      	subs	r3, #1
 800484e:	b29a      	uxth	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	809a      	strh	r2, [r3, #4]

	return RING_BUFFER_OK;
 8004854:	2301      	movs	r3, #1
}
 8004856:	4618      	mov	r0, r3
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
	...

08004864 <serialPort_send>:
/** @brief    serialPort_send
	@param[1] serial
	@return   none
*/
void serialPort_send(serialPort_t* serial)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
    if(serial->zPrivate.uartHandle.Instance == USART2)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004872:	4a12      	ldr	r2, [pc, #72]	; (80048bc <serialPort_send+0x58>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d10b      	bne.n	8004890 <serialPort_send+0x2c>
    {
        HAL_UART_Transmit_DMA(&huart2, serial->zPrivate.writeBuffer, serial->zPrivate.writeBufferPtr);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f203 310e 	addw	r1, r3, #782	; 0x30e
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 3ade 	ldrb.w	r3, [r3, #2782]	; 0xade
 8004884:	b29b      	uxth	r3, r3
 8004886:	461a      	mov	r2, r3
 8004888:	480d      	ldr	r0, [pc, #52]	; (80048c0 <serialPort_send+0x5c>)
 800488a:	f7fe fdff 	bl	800348c <HAL_UART_Transmit_DMA>
    }
    else if(serial->zPrivate.uartHandle.Instance == UART4)
    {
        HAL_UART_Transmit_DMA(&huart4, serial->zPrivate.writeBuffer, serial->zPrivate.writeBufferPtr);
    }
}
 800488e:	e010      	b.n	80048b2 <serialPort_send+0x4e>
    else if(serial->zPrivate.uartHandle.Instance == UART4)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004896:	4a0b      	ldr	r2, [pc, #44]	; (80048c4 <serialPort_send+0x60>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d10a      	bne.n	80048b2 <serialPort_send+0x4e>
        HAL_UART_Transmit_DMA(&huart4, serial->zPrivate.writeBuffer, serial->zPrivate.writeBufferPtr);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f203 310e 	addw	r1, r3, #782	; 0x30e
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 3ade 	ldrb.w	r3, [r3, #2782]	; 0xade
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	461a      	mov	r2, r3
 80048ac:	4806      	ldr	r0, [pc, #24]	; (80048c8 <serialPort_send+0x64>)
 80048ae:	f7fe fded 	bl	800348c <HAL_UART_Transmit_DMA>
}
 80048b2:	bf00      	nop
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	40004400 	.word	0x40004400
 80048c0:	20000698 	.word	0x20000698
 80048c4:	40004c00 	.word	0x40004c00
 80048c8:	20000654 	.word	0x20000654

080048cc <serialPort_write>:
	@param[2] buff
	@param[3] len
	@return   none
*/
void serialPort_write(serialPort_t* serial, uint8_t* buff, uint8_t len)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	4613      	mov	r3, r2
 80048d8:	71fb      	strb	r3, [r7, #7]
    uint16_t i = 0;
 80048da:	2300      	movs	r3, #0
 80048dc:	82fb      	strh	r3, [r7, #22]

    if(serial->isWriteFinish == true)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d03f      	beq.n	8004968 <serialPort_write+0x9c>
     {
        for( i = 0; i < serial->zPrivate.writeBufferPtr; i++)
 80048e8:	2300      	movs	r3, #0
 80048ea:	82fb      	strh	r3, [r7, #22]
 80048ec:	e00d      	b.n	800490a <serialPort_write+0x3e>
        {
            serial->zPrivate.writeBuffer[i] = serial->zPrivate.writeBufferTemp[i];
 80048ee:	8afa      	ldrh	r2, [r7, #22]
 80048f0:	8afb      	ldrh	r3, [r7, #22]
 80048f2:	68f9      	ldr	r1, [r7, #12]
 80048f4:	440a      	add	r2, r1
 80048f6:	f892 16f6 	ldrb.w	r1, [r2, #1782]	; 0x6f6
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	4413      	add	r3, r2
 80048fe:	460a      	mov	r2, r1
 8004900:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e
        for( i = 0; i < serial->zPrivate.writeBufferPtr; i++)
 8004904:	8afb      	ldrh	r3, [r7, #22]
 8004906:	3301      	adds	r3, #1
 8004908:	82fb      	strh	r3, [r7, #22]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f893 3ade 	ldrb.w	r3, [r3, #2782]	; 0xade
 8004910:	b29b      	uxth	r3, r3
 8004912:	8afa      	ldrh	r2, [r7, #22]
 8004914:	429a      	cmp	r2, r3
 8004916:	d3ea      	bcc.n	80048ee <serialPort_write+0x22>
        }

        for( i = 0; i < len; i++)
 8004918:	2300      	movs	r3, #0
 800491a:	82fb      	strh	r3, [r7, #22]
 800491c:	e013      	b.n	8004946 <serialPort_write+0x7a>
        {
            serial->zPrivate.writeBuffer[serial->zPrivate.writeBufferPtr++] = buff[i];
 800491e:	8afb      	ldrh	r3, [r7, #22]
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	441a      	add	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f893 3ade 	ldrb.w	r3, [r3, #2782]	; 0xade
 800492a:	1c59      	adds	r1, r3, #1
 800492c:	b2c8      	uxtb	r0, r1
 800492e:	68f9      	ldr	r1, [r7, #12]
 8004930:	f881 0ade 	strb.w	r0, [r1, #2782]	; 0xade
 8004934:	4619      	mov	r1, r3
 8004936:	7812      	ldrb	r2, [r2, #0]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	440b      	add	r3, r1
 800493c:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e
        for( i = 0; i < len; i++)
 8004940:	8afb      	ldrh	r3, [r7, #22]
 8004942:	3301      	adds	r3, #1
 8004944:	82fb      	strh	r3, [r7, #22]
 8004946:	79fb      	ldrb	r3, [r7, #7]
 8004948:	b29b      	uxth	r3, r3
 800494a:	8afa      	ldrh	r2, [r7, #22]
 800494c:	429a      	cmp	r2, r3
 800494e:	d3e6      	bcc.n	800491e <serialPort_write+0x52>
        }

        serialPort_send(serial);
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f7ff ff87 	bl	8004864 <serialPort_send>

        serial->zPrivate.writeBufferPtr = 0;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2ade 	strb.w	r2, [r3, #2782]	; 0xade
        serial->isWriteFinish = false;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
        for( i = 0; i < len; i++)
        {
            serial->zPrivate.writeBufferTemp[serial->zPrivate.writeBufferPtr++] = buff[i];
        }
    }
}
 8004966:	e01b      	b.n	80049a0 <serialPort_write+0xd4>
        for( i = 0; i < len; i++)
 8004968:	2300      	movs	r3, #0
 800496a:	82fb      	strh	r3, [r7, #22]
 800496c:	e013      	b.n	8004996 <serialPort_write+0xca>
            serial->zPrivate.writeBufferTemp[serial->zPrivate.writeBufferPtr++] = buff[i];
 800496e:	8afb      	ldrh	r3, [r7, #22]
 8004970:	68ba      	ldr	r2, [r7, #8]
 8004972:	441a      	add	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f893 3ade 	ldrb.w	r3, [r3, #2782]	; 0xade
 800497a:	1c59      	adds	r1, r3, #1
 800497c:	b2c8      	uxtb	r0, r1
 800497e:	68f9      	ldr	r1, [r7, #12]
 8004980:	f881 0ade 	strb.w	r0, [r1, #2782]	; 0xade
 8004984:	4619      	mov	r1, r3
 8004986:	7812      	ldrb	r2, [r2, #0]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	440b      	add	r3, r1
 800498c:	f883 26f6 	strb.w	r2, [r3, #1782]	; 0x6f6
        for( i = 0; i < len; i++)
 8004990:	8afb      	ldrh	r3, [r7, #22]
 8004992:	3301      	adds	r3, #1
 8004994:	82fb      	strh	r3, [r7, #22]
 8004996:	79fb      	ldrb	r3, [r7, #7]
 8004998:	b29b      	uxth	r3, r3
 800499a:	8afa      	ldrh	r2, [r7, #22]
 800499c:	429a      	cmp	r2, r3
 800499e:	d3e6      	bcc.n	800496e <serialPort_write+0xa2>
}
 80049a0:	bf00      	nop
 80049a2:	3718      	adds	r7, #24
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <serialPort_write_list>:
	@param[2] buff
	@param[3] ...
	@return   none
*/
void serialPort_write_list(serialPort_t* serial, void* buff,...)
{
 80049a8:	b40e      	push	{r1, r2, r3}
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b087      	sub	sp, #28
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
    int len = 0;
 80049b2:	2300      	movs	r3, #0
 80049b4:	617b      	str	r3, [r7, #20]
    uint8_t* ptr = buff;
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	613b      	str	r3, [r7, #16]

    va_list list;
    va_start(list, buff);
 80049ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049be:	60fb      	str	r3, [r7, #12]
    len = va_arg(list, int);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	1d1a      	adds	r2, r3, #4
 80049c4:	60fa      	str	r2, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	617b      	str	r3, [r7, #20]

    if(len < 256 && len > 0)    serialPort_write(serial, ptr, len);
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	2bff      	cmp	r3, #255	; 0xff
 80049ce:	dc0a      	bgt.n	80049e6 <serialPort_write_list+0x3e>
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	dd07      	ble.n	80049e6 <serialPort_write_list+0x3e>
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	461a      	mov	r2, r3
 80049dc:	6939      	ldr	r1, [r7, #16]
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7ff ff74 	bl	80048cc <serialPort_write>
 80049e4:	e00a      	b.n	80049fc <serialPort_write_list+0x54>
    else                        serialPort_write(serial, ptr, strlen((char*)ptr));
 80049e6:	6938      	ldr	r0, [r7, #16]
 80049e8:	f7fb fbf2 	bl	80001d0 <strlen>
 80049ec:	4603      	mov	r3, r0
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	461a      	mov	r2, r3
 80049f2:	6939      	ldr	r1, [r7, #16]
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f7ff ff69 	bl	80048cc <serialPort_write>
}
 80049fa:	bf00      	nop
 80049fc:	bf00      	nop
 80049fe:	371c      	adds	r7, #28
 8004a00:	46bd      	mov	sp, r7
 8004a02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a06:	b003      	add	sp, #12
 8004a08:	4770      	bx	lr

08004a0a <serialPort_tx_finish>:
/** @brief    serialPort_tx_finish
	@param[1] serial
	@return   none
*/
void serialPort_tx_finish(serialPort_t* serial)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b084      	sub	sp, #16
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
    if(serial->zPrivate.writeBufferPtr != 0)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 3ade 	ldrb.w	r3, [r3, #2782]	; 0xade
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d020      	beq.n	8004a5e <serialPort_tx_finish+0x54>
    {
        uint8_t i = 0;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	73fb      	strb	r3, [r7, #15]

        for( i = 0; i < serial->zPrivate.writeBufferPtr; i++)
 8004a20:	2300      	movs	r3, #0
 8004a22:	73fb      	strb	r3, [r7, #15]
 8004a24:	e00d      	b.n	8004a42 <serialPort_tx_finish+0x38>
        {
            serial->zPrivate.writeBuffer[i] = serial->zPrivate.writeBufferTemp[i];
 8004a26:	7bfa      	ldrb	r2, [r7, #15]
 8004a28:	7bfb      	ldrb	r3, [r7, #15]
 8004a2a:	6879      	ldr	r1, [r7, #4]
 8004a2c:	440a      	add	r2, r1
 8004a2e:	f892 16f6 	ldrb.w	r1, [r2, #1782]	; 0x6f6
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	4413      	add	r3, r2
 8004a36:	460a      	mov	r2, r1
 8004a38:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e
        for( i = 0; i < serial->zPrivate.writeBufferPtr; i++)
 8004a3c:	7bfb      	ldrb	r3, [r7, #15]
 8004a3e:	3301      	adds	r3, #1
 8004a40:	73fb      	strb	r3, [r7, #15]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 3ade 	ldrb.w	r3, [r3, #2782]	; 0xade
 8004a48:	7bfa      	ldrb	r2, [r7, #15]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d3eb      	bcc.n	8004a26 <serialPort_tx_finish+0x1c>
        }

        serialPort_send(serial);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7ff ff08 	bl	8004864 <serialPort_send>
        serial->zPrivate.writeBufferPtr = 0;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 2ade 	strb.w	r2, [r3, #2782]	; 0xade
    }
    else
    {
        serial->isWriteFinish = true;
    }
}
 8004a5c:	e003      	b.n	8004a66 <serialPort_tx_finish+0x5c>
        serial->isWriteFinish = true;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
}
 8004a66:	bf00      	nop
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
	...

08004a70 <uartBootLoaderConfiguration>:
#define __UART_BOOTLOADER_CONFIGURATION
/** @brief  uartBootLoaderConfiguration
    @return none
*/
void uartBootLoaderConfiguration(void)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	af00      	add	r7, sp, #0
    /// init serialPort library
    serial_port2.zPrivate.uartHandle.hdmarx = &hdma_usart2_rx;
 8004a74:	4b0d      	ldr	r3, [pc, #52]	; (8004aac <uartBootLoaderConfiguration+0x3c>)
 8004a76:	4a0e      	ldr	r2, [pc, #56]	; (8004ab0 <uartBootLoaderConfiguration+0x40>)
 8004a78:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    serial_port2.zPrivate.uartHandle.Instance = USART2;
 8004a7c:	4b0b      	ldr	r3, [pc, #44]	; (8004aac <uartBootLoaderConfiguration+0x3c>)
 8004a7e:	4a0d      	ldr	r2, [pc, #52]	; (8004ab4 <uartBootLoaderConfiguration+0x44>)
 8004a80:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    serial_port2.isWriteFinish = true;
 8004a84:	4b09      	ldr	r3, [pc, #36]	; (8004aac <uartBootLoaderConfiguration+0x3c>)
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

	ringBufferInit(&rBufferRx);
 8004a8c:	480a      	ldr	r0, [pc, #40]	; (8004ab8 <uartBootLoaderConfiguration+0x48>)
 8004a8e:	f7ff fe7f 	bl	8004790 <ringBufferInit>

	if(HAL_UART_Receive_IT(&huart2, &boot.rxData, 1) != HAL_OK)
 8004a92:	2201      	movs	r2, #1
 8004a94:	4909      	ldr	r1, [pc, #36]	; (8004abc <uartBootLoaderConfiguration+0x4c>)
 8004a96:	480a      	ldr	r0, [pc, #40]	; (8004ac0 <uartBootLoaderConfiguration+0x50>)
 8004a98:	f7fe fcc7 	bl	800342a <HAL_UART_Receive_IT>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <uartBootLoaderConfiguration+0x36>
	{
		Error_Handler();
 8004aa2:	f7fc fc69 	bl	8001378 <Error_Handler>
	}
}
 8004aa6:	bf00      	nop
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	2000122c 	.word	0x2000122c
 8004ab0:	20000490 	.word	0x20000490
 8004ab4:	40004400 	.word	0x40004400
 8004ab8:	20000318 	.word	0x20000318
 8004abc:	20001d0c 	.word	0x20001d0c
 8004ac0:	20000698 	.word	0x20000698

08004ac4 <uartBootLoaderSendAck>:
#define __UART_BOOTLOADER_SEND_FUNCTION
/** @brief	uartBootLoaderSendAck
    @return	none
*/
static void uartBootLoaderSendAck(void)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
	uint8_t buffer[2] = {UART_BOOTLOADER_ACK, 0};
 8004aca:	2379      	movs	r3, #121	; 0x79
 8004acc:	80bb      	strh	r3, [r7, #4]

	serialPort_write_list(&serial_port2, buffer);
 8004ace:	1d3b      	adds	r3, r7, #4
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	4803      	ldr	r0, [pc, #12]	; (8004ae0 <uartBootLoaderSendAck+0x1c>)
 8004ad4:	f7ff ff68 	bl	80049a8 <serialPort_write_list>
}
 8004ad8:	bf00      	nop
 8004ada:	3708      	adds	r7, #8
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	2000122c 	.word	0x2000122c

08004ae4 <uartBootLoaderSendNack>:

/** @brief	uartBootLoaderSendAck
    @return	none
*/
static void uartBootLoaderSendNack(void)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
	uint8_t buffer[2] = {UART_BOOTLOADER_NACK, 0};
 8004aea:	231f      	movs	r3, #31
 8004aec:	80bb      	strh	r3, [r7, #4]

	serialPort_write_list(&serial_port2, buffer);
 8004aee:	1d3b      	adds	r3, r7, #4
 8004af0:	4619      	mov	r1, r3
 8004af2:	4803      	ldr	r0, [pc, #12]	; (8004b00 <uartBootLoaderSendNack+0x1c>)
 8004af4:	f7ff ff58 	bl	80049a8 <serialPort_write_list>
}
 8004af8:	bf00      	nop
 8004afa:	3708      	adds	r7, #8
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	2000122c 	.word	0x2000122c

08004b04 <uartBootLoaderSendMoreByte>:

/** @brief	uartBootLoaderSendMoreByte
    @return	none
*/
static void uartBootLoaderSendMoreByte(uint8_t *buffer)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
	serialPort_write_list(&serial_port2, buffer);
 8004b0c:	6879      	ldr	r1, [r7, #4]
 8004b0e:	4803      	ldr	r0, [pc, #12]	; (8004b1c <uartBootLoaderSendMoreByte+0x18>)
 8004b10:	f7ff ff4a 	bl	80049a8 <serialPort_write_list>
}
 8004b14:	bf00      	nop
 8004b16:	3708      	adds	r7, #8
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	2000122c 	.word	0x2000122c

08004b20 <uartBootLoader_readData>:

/** @brief  uartBootLoader_readData
    @return
*/
static void uartBootLoader_readData(uartCallback_t *cb, uartBootLoader_t *boot)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
	if(cb->rxComplete == true)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d013      	beq.n	8004b5a <uartBootLoader_readData+0x3a>
	{
		cb->rxComplete = false;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	701a      	strb	r2, [r3, #0]

		ringBufferWrite(&rBufferRx, boot->rxData);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4809      	ldr	r0, [pc, #36]	; (8004b64 <uartBootLoader_readData+0x44>)
 8004b40:	f7ff fe39 	bl	80047b6 <ringBufferWrite>

		if(HAL_UART_Receive_IT(&huart2, &boot->rxData, 1) != HAL_OK)
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	2201      	movs	r2, #1
 8004b48:	4619      	mov	r1, r3
 8004b4a:	4807      	ldr	r0, [pc, #28]	; (8004b68 <uartBootLoader_readData+0x48>)
 8004b4c:	f7fe fc6d 	bl	800342a <HAL_UART_Receive_IT>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d001      	beq.n	8004b5a <uartBootLoader_readData+0x3a>
		{
			Error_Handler();
 8004b56:	f7fc fc0f 	bl	8001378 <Error_Handler>
		}
	}
}
 8004b5a:	bf00      	nop
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	20000318 	.word	0x20000318
 8004b68:	20000698 	.word	0x20000698

08004b6c <uartBootLoaderRecieverCmdConnect>:

/** @brief  uartBootLoaderRecieverCmdConnect
    @return 
*/
static bool uartBootLoaderRecieverCmdConnect(uartBootLoader_t *boot)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
	uint8_t rData = 0;
 8004b74:	2300      	movs	r3, #0
 8004b76:	73fb      	strb	r3, [r7, #15]
	static uint32_t timePrintDebug = 0;

	if(ringBufferRead(&rBufferRx, &rData) == RING_BUFFER_OK)
 8004b78:	f107 030f 	add.w	r3, r7, #15
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	4819      	ldr	r0, [pc, #100]	; (8004be4 <uartBootLoaderRecieverCmdConnect+0x78>)
 8004b80:	f7ff fe44 	bl	800480c <ringBufferRead>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d115      	bne.n	8004bb6 <uartBootLoaderRecieverCmdConnect+0x4a>
	{
		if(rBufferRx.head == 1)
 8004b8a:	4b16      	ldr	r3, [pc, #88]	; (8004be4 <uartBootLoaderRecieverCmdConnect+0x78>)
 8004b8c:	881b      	ldrh	r3, [r3, #0]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d111      	bne.n	8004bb6 <uartBootLoaderRecieverCmdConnect+0x4a>
		{
			if(rData == UART_BOOTLOADER_CMD_CONNECT)
 8004b92:	7bfb      	ldrb	r3, [r7, #15]
 8004b94:	2b7f      	cmp	r3, #127	; 0x7f
 8004b96:	d109      	bne.n	8004bac <uartBootLoaderRecieverCmdConnect+0x40>
			{
				uartBootLoaderSendAck();
 8004b98:	f7ff ff94 	bl	8004ac4 <uartBootLoaderSendAck>
				timePrintDebug = 0;
 8004b9c:	4b12      	ldr	r3, [pc, #72]	; (8004be8 <uartBootLoaderRecieverCmdConnect+0x7c>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	601a      	str	r2, [r3, #0]
				printf("\n[uartBootLoaderRecieverCmdConnect] boot connected !@!\n");
 8004ba2:	4812      	ldr	r0, [pc, #72]	; (8004bec <uartBootLoaderRecieverCmdConnect+0x80>)
 8004ba4:	f001 f91a 	bl	8005ddc <puts>

				return true;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e016      	b.n	8004bda <uartBootLoaderRecieverCmdConnect+0x6e>
			}
			else
			{
				uartBootLoaderSendNack();
 8004bac:	f7ff ff9a 	bl	8004ae4 <uartBootLoaderSendNack>
				printf("\n[uartBootLoaderRecieverCmdConnect] non valid byte !@!\n");
 8004bb0:	480f      	ldr	r0, [pc, #60]	; (8004bf0 <uartBootLoaderRecieverCmdConnect+0x84>)
 8004bb2:	f001 f913 	bl	8005ddc <puts>
			}
		}
	}

	if(HAL_GetTick() - timePrintDebug > 1000)
 8004bb6:	f7fc ffeb 	bl	8001b90 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	4b0a      	ldr	r3, [pc, #40]	; (8004be8 <uartBootLoaderRecieverCmdConnect+0x7c>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bc6:	d907      	bls.n	8004bd8 <uartBootLoaderRecieverCmdConnect+0x6c>
	{
		timePrintDebug = HAL_GetTick();
 8004bc8:	f7fc ffe2 	bl	8001b90 <HAL_GetTick>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	4a06      	ldr	r2, [pc, #24]	; (8004be8 <uartBootLoaderRecieverCmdConnect+0x7c>)
 8004bd0:	6013      	str	r3, [r2, #0]
		printf("\n[uartBootLoaderRecieverCmdConnect] waitting cmd connect ...\n");
 8004bd2:	4808      	ldr	r0, [pc, #32]	; (8004bf4 <uartBootLoaderRecieverCmdConnect+0x88>)
 8004bd4:	f001 f902 	bl	8005ddc <puts>
	}

	return false;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	20000318 	.word	0x20000318
 8004be8:	20000420 	.word	0x20000420
 8004bec:	08009adc 	.word	0x08009adc
 8004bf0:	08009b14 	.word	0x08009b14
 8004bf4:	08009b4c 	.word	0x08009b4c

08004bf8 <uartBootLoaderRecieverCmdGet>:

/** @brief  uartBootLoaderRecieverCmdGet
    @return bootLoaderGetCmd_t
*/
static bool uartBootLoaderRecieverCmdGet(uartBootLoader_t *boot)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
	uint8_t rData = 0;
 8004c00:	2300      	movs	r3, #0
 8004c02:	73fb      	strb	r3, [r7, #15]
	uint8_t getCmdData[2] = {0x00, 0xFF};
 8004c04:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8004c08:	81bb      	strh	r3, [r7, #12]
	bootLoaderGetCmd_t *cmd;
	static uint8_t trueDataCount = 0;

	for(uint8_t i = 0; i < 2; i++)
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	75fb      	strb	r3, [r7, #23]
 8004c0e:	e01f      	b.n	8004c50 <uartBootLoaderRecieverCmdGet+0x58>
	{
		if(ringBufferRead(&rBufferRx, &rData))
 8004c10:	f107 030f 	add.w	r3, r7, #15
 8004c14:	4619      	mov	r1, r3
 8004c16:	4825      	ldr	r0, [pc, #148]	; (8004cac <uartBootLoaderRecieverCmdGet+0xb4>)
 8004c18:	f7ff fdf8 	bl	800480c <ringBufferRead>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d013      	beq.n	8004c4a <uartBootLoaderRecieverCmdGet+0x52>
		{
			if(rData == getCmdData[i])
 8004c22:	7dfb      	ldrb	r3, [r7, #23]
 8004c24:	f107 0218 	add.w	r2, r7, #24
 8004c28:	4413      	add	r3, r2
 8004c2a:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8004c2e:	7bfb      	ldrb	r3, [r7, #15]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d10a      	bne.n	8004c4a <uartBootLoaderRecieverCmdGet+0x52>
			{
				trueDataCount++;
 8004c34:	4b1e      	ldr	r3, [pc, #120]	; (8004cb0 <uartBootLoaderRecieverCmdGet+0xb8>)
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	b2da      	uxtb	r2, r3
 8004c3c:	4b1c      	ldr	r3, [pc, #112]	; (8004cb0 <uartBootLoaderRecieverCmdGet+0xb8>)
 8004c3e:	701a      	strb	r2, [r3, #0]
				printf("\n[uartBootLoaderRecieverCmdGet] reciever cmd get value = %d\n", rData);
 8004c40:	7bfb      	ldrb	r3, [r7, #15]
 8004c42:	4619      	mov	r1, r3
 8004c44:	481b      	ldr	r0, [pc, #108]	; (8004cb4 <uartBootLoaderRecieverCmdGet+0xbc>)
 8004c46:	f001 f843 	bl	8005cd0 <iprintf>
	for(uint8_t i = 0; i < 2; i++)
 8004c4a:	7dfb      	ldrb	r3, [r7, #23]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	75fb      	strb	r3, [r7, #23]
 8004c50:	7dfb      	ldrb	r3, [r7, #23]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d9dc      	bls.n	8004c10 <uartBootLoaderRecieverCmdGet+0x18>
			}
		}
	}

	if(trueDataCount == 2)
 8004c56:	4b16      	ldr	r3, [pc, #88]	; (8004cb0 <uartBootLoaderRecieverCmdGet+0xb8>)
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d120      	bne.n	8004ca0 <uartBootLoaderRecieverCmdGet+0xa8>
	{
		cmd->numberOfbyte = 2;
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	2202      	movs	r2, #2
 8004c62:	701a      	strb	r2, [r3, #0]
		cmd->version = 1;
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	2201      	movs	r2, #1
 8004c68:	705a      	strb	r2, [r3, #1]
		cmd->support = 1;
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	709a      	strb	r2, [r3, #2]

		uint8_t buffer[4] = {UART_BOOTLOADER_ACK, cmd->numberOfbyte, cmd->version, cmd->support};
 8004c70:	2379      	movs	r3, #121	; 0x79
 8004c72:	723b      	strb	r3, [r7, #8]
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	727b      	strb	r3, [r7, #9]
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	785b      	ldrb	r3, [r3, #1]
 8004c7e:	72bb      	strb	r3, [r7, #10]
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	789b      	ldrb	r3, [r3, #2]
 8004c84:	72fb      	strb	r3, [r7, #11]
		uartBootLoaderSendMoreByte(buffer);
 8004c86:	f107 0308 	add.w	r3, r7, #8
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7ff ff3a 	bl	8004b04 <uartBootLoaderSendMoreByte>

		printf("\n[uartBootLoaderRecieverCmdGet] send Ack byte and data of cmd ...\n");
 8004c90:	4809      	ldr	r0, [pc, #36]	; (8004cb8 <uartBootLoaderRecieverCmdGet+0xc0>)
 8004c92:	f001 f8a3 	bl	8005ddc <puts>

		trueDataCount = 0;
 8004c96:	4b06      	ldr	r3, [pc, #24]	; (8004cb0 <uartBootLoaderRecieverCmdGet+0xb8>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	701a      	strb	r2, [r3, #0]

		return true;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e000      	b.n	8004ca2 <uartBootLoaderRecieverCmdGet+0xaa>
	}


	return false;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3718      	adds	r7, #24
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	20000318 	.word	0x20000318
 8004cb0:	20000424 	.word	0x20000424
 8004cb4:	08009b8c 	.word	0x08009b8c
 8004cb8:	08009bcc 	.word	0x08009bcc

08004cbc <uartBootLoaderProcess>:
#define __UART_BOOTLOADER_PROCESS
/** @brief  uartBootLoaderProcess
    @return none
*/
void uartBootLoaderProcess(void)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	af00      	add	r7, sp, #0
	uartBootLoader_readData(&callback, &boot);
 8004cc0:	491d      	ldr	r1, [pc, #116]	; (8004d38 <uartBootLoaderProcess+0x7c>)
 8004cc2:	481e      	ldr	r0, [pc, #120]	; (8004d3c <uartBootLoaderProcess+0x80>)
 8004cc4:	f7ff ff2c 	bl	8004b20 <uartBootLoader_readData>

	switch(boot.state)
 8004cc8:	4b1b      	ldr	r3, [pc, #108]	; (8004d38 <uartBootLoaderProcess+0x7c>)
 8004cca:	785b      	ldrb	r3, [r3, #1]
 8004ccc:	2b05      	cmp	r3, #5
 8004cce:	d831      	bhi.n	8004d34 <uartBootLoaderProcess+0x78>
 8004cd0:	a201      	add	r2, pc, #4	; (adr r2, 8004cd8 <uartBootLoaderProcess+0x1c>)
 8004cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd6:	bf00      	nop
 8004cd8:	08004cf1 	.word	0x08004cf1
 8004cdc:	08004d05 	.word	0x08004d05
 8004ce0:	08004d2f 	.word	0x08004d2f
 8004ce4:	08004d2f 	.word	0x08004d2f
 8004ce8:	08004d2f 	.word	0x08004d2f
 8004cec:	08004d2f 	.word	0x08004d2f
	{
		case BOOTLOADER_STATE_IDLE:
		{
			if(uartBootLoaderRecieverCmdConnect(&boot) == true)
 8004cf0:	4811      	ldr	r0, [pc, #68]	; (8004d38 <uartBootLoaderProcess+0x7c>)
 8004cf2:	f7ff ff3b 	bl	8004b6c <uartBootLoaderRecieverCmdConnect>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d01a      	beq.n	8004d32 <uartBootLoaderProcess+0x76>
			{
				boot.state = BOOTLOADER_STATE_CONNECTED;
 8004cfc:	4b0e      	ldr	r3, [pc, #56]	; (8004d38 <uartBootLoaderProcess+0x7c>)
 8004cfe:	2201      	movs	r2, #1
 8004d00:	705a      	strb	r2, [r3, #1]
			}
		}break;
 8004d02:	e016      	b.n	8004d32 <uartBootLoaderProcess+0x76>
		case BOOTLOADER_STATE_CONNECTED:
		{
			static uint8_t state = 0;
			switch(state)
 8004d04:	4b0e      	ldr	r3, [pc, #56]	; (8004d40 <uartBootLoaderProcess+0x84>)
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d002      	beq.n	8004d12 <uartBootLoaderProcess+0x56>
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d00a      	beq.n	8004d26 <uartBootLoaderProcess+0x6a>
				case 1:
				{

				}break;
			}
		}break;
 8004d10:	e010      	b.n	8004d34 <uartBootLoaderProcess+0x78>
					if(uartBootLoaderRecieverCmdGet(&boot) == true)
 8004d12:	4809      	ldr	r0, [pc, #36]	; (8004d38 <uartBootLoaderProcess+0x7c>)
 8004d14:	f7ff ff70 	bl	8004bf8 <uartBootLoaderRecieverCmdGet>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d005      	beq.n	8004d2a <uartBootLoaderProcess+0x6e>
						state = 1;
 8004d1e:	4b08      	ldr	r3, [pc, #32]	; (8004d40 <uartBootLoaderProcess+0x84>)
 8004d20:	2201      	movs	r2, #1
 8004d22:	701a      	strb	r2, [r3, #0]
				}break;
 8004d24:	e001      	b.n	8004d2a <uartBootLoaderProcess+0x6e>
				}break;
 8004d26:	bf00      	nop
 8004d28:	e004      	b.n	8004d34 <uartBootLoaderProcess+0x78>
				}break;
 8004d2a:	bf00      	nop
		}break;
 8004d2c:	e002      	b.n	8004d34 <uartBootLoaderProcess+0x78>
		case BOOTLOADER_STATE_ERASE:
		{

		}break;
 8004d2e:	bf00      	nop
 8004d30:	e000      	b.n	8004d34 <uartBootLoaderProcess+0x78>
		}break;
 8004d32:	bf00      	nop
		case BOOTLOADER_STATE_ERROR:
		{

		}break;
	}
}
 8004d34:	bf00      	nop
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	20001d0c 	.word	0x20001d0c
 8004d3c:	20001d1c 	.word	0x20001d1c
 8004d40:	20000425 	.word	0x20000425

08004d44 <HAL_UART_TxCpltCallback>:
#define __UART_TX_CALLBACK
/** @brief
    @return
*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
    if(serial_port2.zPrivate.uartHandle.Instance == USART2)
 8004d4c:	4b0a      	ldr	r3, [pc, #40]	; (8004d78 <HAL_UART_TxCpltCallback+0x34>)
 8004d4e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004d52:	4a0a      	ldr	r2, [pc, #40]	; (8004d7c <HAL_UART_TxCpltCallback+0x38>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d102      	bne.n	8004d5e <HAL_UART_TxCpltCallback+0x1a>
    {
        serialPort_tx_finish(&serial_port2);
 8004d58:	4807      	ldr	r0, [pc, #28]	; (8004d78 <HAL_UART_TxCpltCallback+0x34>)
 8004d5a:	f7ff fe56 	bl	8004a0a <serialPort_tx_finish>
    }

    if(serial_port4.zPrivate.uartHandle.Instance == UART4)
 8004d5e:	4b08      	ldr	r3, [pc, #32]	; (8004d80 <HAL_UART_TxCpltCallback+0x3c>)
 8004d60:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004d64:	4a07      	ldr	r2, [pc, #28]	; (8004d84 <HAL_UART_TxCpltCallback+0x40>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d102      	bne.n	8004d70 <HAL_UART_TxCpltCallback+0x2c>
    {
        serialPort_tx_finish(&serial_port4);
 8004d6a:	4805      	ldr	r0, [pc, #20]	; (8004d80 <HAL_UART_TxCpltCallback+0x3c>)
 8004d6c:	f7ff fe4d 	bl	8004a0a <serialPort_tx_finish>
    }
}
 8004d70:	bf00      	nop
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	2000122c 	.word	0x2000122c
 8004d7c:	40004400 	.word	0x40004400
 8004d80:	2000074c 	.word	0x2000074c
 8004d84:	40004c00 	.word	0x40004c00

08004d88 <HAL_UART_RxCpltCallback>:
#define __UART_RX_CALLBACK
/** @brief
    @return
*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
	if(serial_port2.zPrivate.uartHandle.Instance == USART2)
 8004d90:	4b0b      	ldr	r3, [pc, #44]	; (8004dc0 <HAL_UART_RxCpltCallback+0x38>)
 8004d92:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004d96:	4a0b      	ldr	r2, [pc, #44]	; (8004dc4 <HAL_UART_RxCpltCallback+0x3c>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d102      	bne.n	8004da2 <HAL_UART_RxCpltCallback+0x1a>
	{
		callback.rxComplete = true;
 8004d9c:	4b0a      	ldr	r3, [pc, #40]	; (8004dc8 <HAL_UART_RxCpltCallback+0x40>)
 8004d9e:	2201      	movs	r2, #1
 8004da0:	701a      	strb	r2, [r3, #0]
	}

	if(serial_port4.zPrivate.uartHandle.Instance == UART4)
 8004da2:	4b0a      	ldr	r3, [pc, #40]	; (8004dcc <HAL_UART_RxCpltCallback+0x44>)
 8004da4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004da8:	4a09      	ldr	r2, [pc, #36]	; (8004dd0 <HAL_UART_RxCpltCallback+0x48>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d102      	bne.n	8004db4 <HAL_UART_RxCpltCallback+0x2c>
	{
		callback4.rxComplete = true;
 8004dae:	4b09      	ldr	r3, [pc, #36]	; (8004dd4 <HAL_UART_RxCpltCallback+0x4c>)
 8004db0:	2201      	movs	r2, #1
 8004db2:	701a      	strb	r2, [r3, #0]
	}
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr
 8004dc0:	2000122c 	.word	0x2000122c
 8004dc4:	40004400 	.word	0x40004400
 8004dc8:	20001d1c 	.word	0x20001d1c
 8004dcc:	2000074c 	.word	0x2000074c
 8004dd0:	40004c00 	.word	0x40004c00
 8004dd4:	20001d18 	.word	0x20001d18

08004dd8 <__errno>:
 8004dd8:	4b01      	ldr	r3, [pc, #4]	; (8004de0 <__errno+0x8>)
 8004dda:	6818      	ldr	r0, [r3, #0]
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	2000000c 	.word	0x2000000c

08004de4 <__libc_init_array>:
 8004de4:	b570      	push	{r4, r5, r6, lr}
 8004de6:	4d0d      	ldr	r5, [pc, #52]	; (8004e1c <__libc_init_array+0x38>)
 8004de8:	4c0d      	ldr	r4, [pc, #52]	; (8004e20 <__libc_init_array+0x3c>)
 8004dea:	1b64      	subs	r4, r4, r5
 8004dec:	10a4      	asrs	r4, r4, #2
 8004dee:	2600      	movs	r6, #0
 8004df0:	42a6      	cmp	r6, r4
 8004df2:	d109      	bne.n	8004e08 <__libc_init_array+0x24>
 8004df4:	4d0b      	ldr	r5, [pc, #44]	; (8004e24 <__libc_init_array+0x40>)
 8004df6:	4c0c      	ldr	r4, [pc, #48]	; (8004e28 <__libc_init_array+0x44>)
 8004df8:	f004 fda0 	bl	800993c <_init>
 8004dfc:	1b64      	subs	r4, r4, r5
 8004dfe:	10a4      	asrs	r4, r4, #2
 8004e00:	2600      	movs	r6, #0
 8004e02:	42a6      	cmp	r6, r4
 8004e04:	d105      	bne.n	8004e12 <__libc_init_array+0x2e>
 8004e06:	bd70      	pop	{r4, r5, r6, pc}
 8004e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e0c:	4798      	blx	r3
 8004e0e:	3601      	adds	r6, #1
 8004e10:	e7ee      	b.n	8004df0 <__libc_init_array+0xc>
 8004e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e16:	4798      	blx	r3
 8004e18:	3601      	adds	r6, #1
 8004e1a:	e7f2      	b.n	8004e02 <__libc_init_array+0x1e>
 8004e1c:	0800a0ec 	.word	0x0800a0ec
 8004e20:	0800a0ec 	.word	0x0800a0ec
 8004e24:	0800a0ec 	.word	0x0800a0ec
 8004e28:	0800a0f0 	.word	0x0800a0f0

08004e2c <malloc>:
 8004e2c:	4b02      	ldr	r3, [pc, #8]	; (8004e38 <malloc+0xc>)
 8004e2e:	4601      	mov	r1, r0
 8004e30:	6818      	ldr	r0, [r3, #0]
 8004e32:	f000 b879 	b.w	8004f28 <_malloc_r>
 8004e36:	bf00      	nop
 8004e38:	2000000c 	.word	0x2000000c

08004e3c <memcpy>:
 8004e3c:	440a      	add	r2, r1
 8004e3e:	4291      	cmp	r1, r2
 8004e40:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e44:	d100      	bne.n	8004e48 <memcpy+0xc>
 8004e46:	4770      	bx	lr
 8004e48:	b510      	push	{r4, lr}
 8004e4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e52:	4291      	cmp	r1, r2
 8004e54:	d1f9      	bne.n	8004e4a <memcpy+0xe>
 8004e56:	bd10      	pop	{r4, pc}

08004e58 <memset>:
 8004e58:	4402      	add	r2, r0
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d100      	bne.n	8004e62 <memset+0xa>
 8004e60:	4770      	bx	lr
 8004e62:	f803 1b01 	strb.w	r1, [r3], #1
 8004e66:	e7f9      	b.n	8004e5c <memset+0x4>

08004e68 <_calloc_r>:
 8004e68:	b513      	push	{r0, r1, r4, lr}
 8004e6a:	434a      	muls	r2, r1
 8004e6c:	4611      	mov	r1, r2
 8004e6e:	9201      	str	r2, [sp, #4]
 8004e70:	f000 f85a 	bl	8004f28 <_malloc_r>
 8004e74:	4604      	mov	r4, r0
 8004e76:	b118      	cbz	r0, 8004e80 <_calloc_r+0x18>
 8004e78:	9a01      	ldr	r2, [sp, #4]
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	f7ff ffec 	bl	8004e58 <memset>
 8004e80:	4620      	mov	r0, r4
 8004e82:	b002      	add	sp, #8
 8004e84:	bd10      	pop	{r4, pc}
	...

08004e88 <_free_r>:
 8004e88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e8a:	2900      	cmp	r1, #0
 8004e8c:	d048      	beq.n	8004f20 <_free_r+0x98>
 8004e8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e92:	9001      	str	r0, [sp, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f1a1 0404 	sub.w	r4, r1, #4
 8004e9a:	bfb8      	it	lt
 8004e9c:	18e4      	addlt	r4, r4, r3
 8004e9e:	f003 fc3b 	bl	8008718 <__malloc_lock>
 8004ea2:	4a20      	ldr	r2, [pc, #128]	; (8004f24 <_free_r+0x9c>)
 8004ea4:	9801      	ldr	r0, [sp, #4]
 8004ea6:	6813      	ldr	r3, [r2, #0]
 8004ea8:	4615      	mov	r5, r2
 8004eaa:	b933      	cbnz	r3, 8004eba <_free_r+0x32>
 8004eac:	6063      	str	r3, [r4, #4]
 8004eae:	6014      	str	r4, [r2, #0]
 8004eb0:	b003      	add	sp, #12
 8004eb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004eb6:	f003 bc35 	b.w	8008724 <__malloc_unlock>
 8004eba:	42a3      	cmp	r3, r4
 8004ebc:	d90b      	bls.n	8004ed6 <_free_r+0x4e>
 8004ebe:	6821      	ldr	r1, [r4, #0]
 8004ec0:	1862      	adds	r2, r4, r1
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	bf04      	itt	eq
 8004ec6:	681a      	ldreq	r2, [r3, #0]
 8004ec8:	685b      	ldreq	r3, [r3, #4]
 8004eca:	6063      	str	r3, [r4, #4]
 8004ecc:	bf04      	itt	eq
 8004ece:	1852      	addeq	r2, r2, r1
 8004ed0:	6022      	streq	r2, [r4, #0]
 8004ed2:	602c      	str	r4, [r5, #0]
 8004ed4:	e7ec      	b.n	8004eb0 <_free_r+0x28>
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	b10b      	cbz	r3, 8004ee0 <_free_r+0x58>
 8004edc:	42a3      	cmp	r3, r4
 8004ede:	d9fa      	bls.n	8004ed6 <_free_r+0x4e>
 8004ee0:	6811      	ldr	r1, [r2, #0]
 8004ee2:	1855      	adds	r5, r2, r1
 8004ee4:	42a5      	cmp	r5, r4
 8004ee6:	d10b      	bne.n	8004f00 <_free_r+0x78>
 8004ee8:	6824      	ldr	r4, [r4, #0]
 8004eea:	4421      	add	r1, r4
 8004eec:	1854      	adds	r4, r2, r1
 8004eee:	42a3      	cmp	r3, r4
 8004ef0:	6011      	str	r1, [r2, #0]
 8004ef2:	d1dd      	bne.n	8004eb0 <_free_r+0x28>
 8004ef4:	681c      	ldr	r4, [r3, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	6053      	str	r3, [r2, #4]
 8004efa:	4421      	add	r1, r4
 8004efc:	6011      	str	r1, [r2, #0]
 8004efe:	e7d7      	b.n	8004eb0 <_free_r+0x28>
 8004f00:	d902      	bls.n	8004f08 <_free_r+0x80>
 8004f02:	230c      	movs	r3, #12
 8004f04:	6003      	str	r3, [r0, #0]
 8004f06:	e7d3      	b.n	8004eb0 <_free_r+0x28>
 8004f08:	6825      	ldr	r5, [r4, #0]
 8004f0a:	1961      	adds	r1, r4, r5
 8004f0c:	428b      	cmp	r3, r1
 8004f0e:	bf04      	itt	eq
 8004f10:	6819      	ldreq	r1, [r3, #0]
 8004f12:	685b      	ldreq	r3, [r3, #4]
 8004f14:	6063      	str	r3, [r4, #4]
 8004f16:	bf04      	itt	eq
 8004f18:	1949      	addeq	r1, r1, r5
 8004f1a:	6021      	streq	r1, [r4, #0]
 8004f1c:	6054      	str	r4, [r2, #4]
 8004f1e:	e7c7      	b.n	8004eb0 <_free_r+0x28>
 8004f20:	b003      	add	sp, #12
 8004f22:	bd30      	pop	{r4, r5, pc}
 8004f24:	20000428 	.word	0x20000428

08004f28 <_malloc_r>:
 8004f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f2a:	1ccd      	adds	r5, r1, #3
 8004f2c:	f025 0503 	bic.w	r5, r5, #3
 8004f30:	3508      	adds	r5, #8
 8004f32:	2d0c      	cmp	r5, #12
 8004f34:	bf38      	it	cc
 8004f36:	250c      	movcc	r5, #12
 8004f38:	2d00      	cmp	r5, #0
 8004f3a:	4606      	mov	r6, r0
 8004f3c:	db01      	blt.n	8004f42 <_malloc_r+0x1a>
 8004f3e:	42a9      	cmp	r1, r5
 8004f40:	d903      	bls.n	8004f4a <_malloc_r+0x22>
 8004f42:	230c      	movs	r3, #12
 8004f44:	6033      	str	r3, [r6, #0]
 8004f46:	2000      	movs	r0, #0
 8004f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f4a:	f003 fbe5 	bl	8008718 <__malloc_lock>
 8004f4e:	4921      	ldr	r1, [pc, #132]	; (8004fd4 <_malloc_r+0xac>)
 8004f50:	680a      	ldr	r2, [r1, #0]
 8004f52:	4614      	mov	r4, r2
 8004f54:	b99c      	cbnz	r4, 8004f7e <_malloc_r+0x56>
 8004f56:	4f20      	ldr	r7, [pc, #128]	; (8004fd8 <_malloc_r+0xb0>)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	b923      	cbnz	r3, 8004f66 <_malloc_r+0x3e>
 8004f5c:	4621      	mov	r1, r4
 8004f5e:	4630      	mov	r0, r6
 8004f60:	f000 ff44 	bl	8005dec <_sbrk_r>
 8004f64:	6038      	str	r0, [r7, #0]
 8004f66:	4629      	mov	r1, r5
 8004f68:	4630      	mov	r0, r6
 8004f6a:	f000 ff3f 	bl	8005dec <_sbrk_r>
 8004f6e:	1c43      	adds	r3, r0, #1
 8004f70:	d123      	bne.n	8004fba <_malloc_r+0x92>
 8004f72:	230c      	movs	r3, #12
 8004f74:	6033      	str	r3, [r6, #0]
 8004f76:	4630      	mov	r0, r6
 8004f78:	f003 fbd4 	bl	8008724 <__malloc_unlock>
 8004f7c:	e7e3      	b.n	8004f46 <_malloc_r+0x1e>
 8004f7e:	6823      	ldr	r3, [r4, #0]
 8004f80:	1b5b      	subs	r3, r3, r5
 8004f82:	d417      	bmi.n	8004fb4 <_malloc_r+0x8c>
 8004f84:	2b0b      	cmp	r3, #11
 8004f86:	d903      	bls.n	8004f90 <_malloc_r+0x68>
 8004f88:	6023      	str	r3, [r4, #0]
 8004f8a:	441c      	add	r4, r3
 8004f8c:	6025      	str	r5, [r4, #0]
 8004f8e:	e004      	b.n	8004f9a <_malloc_r+0x72>
 8004f90:	6863      	ldr	r3, [r4, #4]
 8004f92:	42a2      	cmp	r2, r4
 8004f94:	bf0c      	ite	eq
 8004f96:	600b      	streq	r3, [r1, #0]
 8004f98:	6053      	strne	r3, [r2, #4]
 8004f9a:	4630      	mov	r0, r6
 8004f9c:	f003 fbc2 	bl	8008724 <__malloc_unlock>
 8004fa0:	f104 000b 	add.w	r0, r4, #11
 8004fa4:	1d23      	adds	r3, r4, #4
 8004fa6:	f020 0007 	bic.w	r0, r0, #7
 8004faa:	1ac2      	subs	r2, r0, r3
 8004fac:	d0cc      	beq.n	8004f48 <_malloc_r+0x20>
 8004fae:	1a1b      	subs	r3, r3, r0
 8004fb0:	50a3      	str	r3, [r4, r2]
 8004fb2:	e7c9      	b.n	8004f48 <_malloc_r+0x20>
 8004fb4:	4622      	mov	r2, r4
 8004fb6:	6864      	ldr	r4, [r4, #4]
 8004fb8:	e7cc      	b.n	8004f54 <_malloc_r+0x2c>
 8004fba:	1cc4      	adds	r4, r0, #3
 8004fbc:	f024 0403 	bic.w	r4, r4, #3
 8004fc0:	42a0      	cmp	r0, r4
 8004fc2:	d0e3      	beq.n	8004f8c <_malloc_r+0x64>
 8004fc4:	1a21      	subs	r1, r4, r0
 8004fc6:	4630      	mov	r0, r6
 8004fc8:	f000 ff10 	bl	8005dec <_sbrk_r>
 8004fcc:	3001      	adds	r0, #1
 8004fce:	d1dd      	bne.n	8004f8c <_malloc_r+0x64>
 8004fd0:	e7cf      	b.n	8004f72 <_malloc_r+0x4a>
 8004fd2:	bf00      	nop
 8004fd4:	20000428 	.word	0x20000428
 8004fd8:	2000042c 	.word	0x2000042c

08004fdc <__cvt>:
 8004fdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fe0:	ec55 4b10 	vmov	r4, r5, d0
 8004fe4:	2d00      	cmp	r5, #0
 8004fe6:	460e      	mov	r6, r1
 8004fe8:	4619      	mov	r1, r3
 8004fea:	462b      	mov	r3, r5
 8004fec:	bfbb      	ittet	lt
 8004fee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004ff2:	461d      	movlt	r5, r3
 8004ff4:	2300      	movge	r3, #0
 8004ff6:	232d      	movlt	r3, #45	; 0x2d
 8004ff8:	700b      	strb	r3, [r1, #0]
 8004ffa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ffc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005000:	4691      	mov	r9, r2
 8005002:	f023 0820 	bic.w	r8, r3, #32
 8005006:	bfbc      	itt	lt
 8005008:	4622      	movlt	r2, r4
 800500a:	4614      	movlt	r4, r2
 800500c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005010:	d005      	beq.n	800501e <__cvt+0x42>
 8005012:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005016:	d100      	bne.n	800501a <__cvt+0x3e>
 8005018:	3601      	adds	r6, #1
 800501a:	2102      	movs	r1, #2
 800501c:	e000      	b.n	8005020 <__cvt+0x44>
 800501e:	2103      	movs	r1, #3
 8005020:	ab03      	add	r3, sp, #12
 8005022:	9301      	str	r3, [sp, #4]
 8005024:	ab02      	add	r3, sp, #8
 8005026:	9300      	str	r3, [sp, #0]
 8005028:	ec45 4b10 	vmov	d0, r4, r5
 800502c:	4653      	mov	r3, sl
 800502e:	4632      	mov	r2, r6
 8005030:	f001 ffe2 	bl	8006ff8 <_dtoa_r>
 8005034:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005038:	4607      	mov	r7, r0
 800503a:	d102      	bne.n	8005042 <__cvt+0x66>
 800503c:	f019 0f01 	tst.w	r9, #1
 8005040:	d022      	beq.n	8005088 <__cvt+0xac>
 8005042:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005046:	eb07 0906 	add.w	r9, r7, r6
 800504a:	d110      	bne.n	800506e <__cvt+0x92>
 800504c:	783b      	ldrb	r3, [r7, #0]
 800504e:	2b30      	cmp	r3, #48	; 0x30
 8005050:	d10a      	bne.n	8005068 <__cvt+0x8c>
 8005052:	2200      	movs	r2, #0
 8005054:	2300      	movs	r3, #0
 8005056:	4620      	mov	r0, r4
 8005058:	4629      	mov	r1, r5
 800505a:	f7fb fd35 	bl	8000ac8 <__aeabi_dcmpeq>
 800505e:	b918      	cbnz	r0, 8005068 <__cvt+0x8c>
 8005060:	f1c6 0601 	rsb	r6, r6, #1
 8005064:	f8ca 6000 	str.w	r6, [sl]
 8005068:	f8da 3000 	ldr.w	r3, [sl]
 800506c:	4499      	add	r9, r3
 800506e:	2200      	movs	r2, #0
 8005070:	2300      	movs	r3, #0
 8005072:	4620      	mov	r0, r4
 8005074:	4629      	mov	r1, r5
 8005076:	f7fb fd27 	bl	8000ac8 <__aeabi_dcmpeq>
 800507a:	b108      	cbz	r0, 8005080 <__cvt+0xa4>
 800507c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005080:	2230      	movs	r2, #48	; 0x30
 8005082:	9b03      	ldr	r3, [sp, #12]
 8005084:	454b      	cmp	r3, r9
 8005086:	d307      	bcc.n	8005098 <__cvt+0xbc>
 8005088:	9b03      	ldr	r3, [sp, #12]
 800508a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800508c:	1bdb      	subs	r3, r3, r7
 800508e:	4638      	mov	r0, r7
 8005090:	6013      	str	r3, [r2, #0]
 8005092:	b004      	add	sp, #16
 8005094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005098:	1c59      	adds	r1, r3, #1
 800509a:	9103      	str	r1, [sp, #12]
 800509c:	701a      	strb	r2, [r3, #0]
 800509e:	e7f0      	b.n	8005082 <__cvt+0xa6>

080050a0 <__exponent>:
 80050a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050a2:	4603      	mov	r3, r0
 80050a4:	2900      	cmp	r1, #0
 80050a6:	bfb8      	it	lt
 80050a8:	4249      	neglt	r1, r1
 80050aa:	f803 2b02 	strb.w	r2, [r3], #2
 80050ae:	bfb4      	ite	lt
 80050b0:	222d      	movlt	r2, #45	; 0x2d
 80050b2:	222b      	movge	r2, #43	; 0x2b
 80050b4:	2909      	cmp	r1, #9
 80050b6:	7042      	strb	r2, [r0, #1]
 80050b8:	dd2a      	ble.n	8005110 <__exponent+0x70>
 80050ba:	f10d 0407 	add.w	r4, sp, #7
 80050be:	46a4      	mov	ip, r4
 80050c0:	270a      	movs	r7, #10
 80050c2:	46a6      	mov	lr, r4
 80050c4:	460a      	mov	r2, r1
 80050c6:	fb91 f6f7 	sdiv	r6, r1, r7
 80050ca:	fb07 1516 	mls	r5, r7, r6, r1
 80050ce:	3530      	adds	r5, #48	; 0x30
 80050d0:	2a63      	cmp	r2, #99	; 0x63
 80050d2:	f104 34ff 	add.w	r4, r4, #4294967295
 80050d6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80050da:	4631      	mov	r1, r6
 80050dc:	dcf1      	bgt.n	80050c2 <__exponent+0x22>
 80050de:	3130      	adds	r1, #48	; 0x30
 80050e0:	f1ae 0502 	sub.w	r5, lr, #2
 80050e4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80050e8:	1c44      	adds	r4, r0, #1
 80050ea:	4629      	mov	r1, r5
 80050ec:	4561      	cmp	r1, ip
 80050ee:	d30a      	bcc.n	8005106 <__exponent+0x66>
 80050f0:	f10d 0209 	add.w	r2, sp, #9
 80050f4:	eba2 020e 	sub.w	r2, r2, lr
 80050f8:	4565      	cmp	r5, ip
 80050fa:	bf88      	it	hi
 80050fc:	2200      	movhi	r2, #0
 80050fe:	4413      	add	r3, r2
 8005100:	1a18      	subs	r0, r3, r0
 8005102:	b003      	add	sp, #12
 8005104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005106:	f811 2b01 	ldrb.w	r2, [r1], #1
 800510a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800510e:	e7ed      	b.n	80050ec <__exponent+0x4c>
 8005110:	2330      	movs	r3, #48	; 0x30
 8005112:	3130      	adds	r1, #48	; 0x30
 8005114:	7083      	strb	r3, [r0, #2]
 8005116:	70c1      	strb	r1, [r0, #3]
 8005118:	1d03      	adds	r3, r0, #4
 800511a:	e7f1      	b.n	8005100 <__exponent+0x60>

0800511c <_printf_float>:
 800511c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005120:	ed2d 8b02 	vpush	{d8}
 8005124:	b08d      	sub	sp, #52	; 0x34
 8005126:	460c      	mov	r4, r1
 8005128:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800512c:	4616      	mov	r6, r2
 800512e:	461f      	mov	r7, r3
 8005130:	4605      	mov	r5, r0
 8005132:	f003 fa73 	bl	800861c <_localeconv_r>
 8005136:	f8d0 a000 	ldr.w	sl, [r0]
 800513a:	4650      	mov	r0, sl
 800513c:	f7fb f848 	bl	80001d0 <strlen>
 8005140:	2300      	movs	r3, #0
 8005142:	930a      	str	r3, [sp, #40]	; 0x28
 8005144:	6823      	ldr	r3, [r4, #0]
 8005146:	9305      	str	r3, [sp, #20]
 8005148:	f8d8 3000 	ldr.w	r3, [r8]
 800514c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005150:	3307      	adds	r3, #7
 8005152:	f023 0307 	bic.w	r3, r3, #7
 8005156:	f103 0208 	add.w	r2, r3, #8
 800515a:	f8c8 2000 	str.w	r2, [r8]
 800515e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005162:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005166:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800516a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800516e:	9307      	str	r3, [sp, #28]
 8005170:	f8cd 8018 	str.w	r8, [sp, #24]
 8005174:	ee08 0a10 	vmov	s16, r0
 8005178:	4b9f      	ldr	r3, [pc, #636]	; (80053f8 <_printf_float+0x2dc>)
 800517a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800517e:	f04f 32ff 	mov.w	r2, #4294967295
 8005182:	f7fb fcd3 	bl	8000b2c <__aeabi_dcmpun>
 8005186:	bb88      	cbnz	r0, 80051ec <_printf_float+0xd0>
 8005188:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800518c:	4b9a      	ldr	r3, [pc, #616]	; (80053f8 <_printf_float+0x2dc>)
 800518e:	f04f 32ff 	mov.w	r2, #4294967295
 8005192:	f7fb fcad 	bl	8000af0 <__aeabi_dcmple>
 8005196:	bb48      	cbnz	r0, 80051ec <_printf_float+0xd0>
 8005198:	2200      	movs	r2, #0
 800519a:	2300      	movs	r3, #0
 800519c:	4640      	mov	r0, r8
 800519e:	4649      	mov	r1, r9
 80051a0:	f7fb fc9c 	bl	8000adc <__aeabi_dcmplt>
 80051a4:	b110      	cbz	r0, 80051ac <_printf_float+0x90>
 80051a6:	232d      	movs	r3, #45	; 0x2d
 80051a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051ac:	4b93      	ldr	r3, [pc, #588]	; (80053fc <_printf_float+0x2e0>)
 80051ae:	4894      	ldr	r0, [pc, #592]	; (8005400 <_printf_float+0x2e4>)
 80051b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80051b4:	bf94      	ite	ls
 80051b6:	4698      	movls	r8, r3
 80051b8:	4680      	movhi	r8, r0
 80051ba:	2303      	movs	r3, #3
 80051bc:	6123      	str	r3, [r4, #16]
 80051be:	9b05      	ldr	r3, [sp, #20]
 80051c0:	f023 0204 	bic.w	r2, r3, #4
 80051c4:	6022      	str	r2, [r4, #0]
 80051c6:	f04f 0900 	mov.w	r9, #0
 80051ca:	9700      	str	r7, [sp, #0]
 80051cc:	4633      	mov	r3, r6
 80051ce:	aa0b      	add	r2, sp, #44	; 0x2c
 80051d0:	4621      	mov	r1, r4
 80051d2:	4628      	mov	r0, r5
 80051d4:	f000 f9d8 	bl	8005588 <_printf_common>
 80051d8:	3001      	adds	r0, #1
 80051da:	f040 8090 	bne.w	80052fe <_printf_float+0x1e2>
 80051de:	f04f 30ff 	mov.w	r0, #4294967295
 80051e2:	b00d      	add	sp, #52	; 0x34
 80051e4:	ecbd 8b02 	vpop	{d8}
 80051e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051ec:	4642      	mov	r2, r8
 80051ee:	464b      	mov	r3, r9
 80051f0:	4640      	mov	r0, r8
 80051f2:	4649      	mov	r1, r9
 80051f4:	f7fb fc9a 	bl	8000b2c <__aeabi_dcmpun>
 80051f8:	b140      	cbz	r0, 800520c <_printf_float+0xf0>
 80051fa:	464b      	mov	r3, r9
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	bfbc      	itt	lt
 8005200:	232d      	movlt	r3, #45	; 0x2d
 8005202:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005206:	487f      	ldr	r0, [pc, #508]	; (8005404 <_printf_float+0x2e8>)
 8005208:	4b7f      	ldr	r3, [pc, #508]	; (8005408 <_printf_float+0x2ec>)
 800520a:	e7d1      	b.n	80051b0 <_printf_float+0x94>
 800520c:	6863      	ldr	r3, [r4, #4]
 800520e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005212:	9206      	str	r2, [sp, #24]
 8005214:	1c5a      	adds	r2, r3, #1
 8005216:	d13f      	bne.n	8005298 <_printf_float+0x17c>
 8005218:	2306      	movs	r3, #6
 800521a:	6063      	str	r3, [r4, #4]
 800521c:	9b05      	ldr	r3, [sp, #20]
 800521e:	6861      	ldr	r1, [r4, #4]
 8005220:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005224:	2300      	movs	r3, #0
 8005226:	9303      	str	r3, [sp, #12]
 8005228:	ab0a      	add	r3, sp, #40	; 0x28
 800522a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800522e:	ab09      	add	r3, sp, #36	; 0x24
 8005230:	ec49 8b10 	vmov	d0, r8, r9
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	6022      	str	r2, [r4, #0]
 8005238:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800523c:	4628      	mov	r0, r5
 800523e:	f7ff fecd 	bl	8004fdc <__cvt>
 8005242:	9b06      	ldr	r3, [sp, #24]
 8005244:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005246:	2b47      	cmp	r3, #71	; 0x47
 8005248:	4680      	mov	r8, r0
 800524a:	d108      	bne.n	800525e <_printf_float+0x142>
 800524c:	1cc8      	adds	r0, r1, #3
 800524e:	db02      	blt.n	8005256 <_printf_float+0x13a>
 8005250:	6863      	ldr	r3, [r4, #4]
 8005252:	4299      	cmp	r1, r3
 8005254:	dd41      	ble.n	80052da <_printf_float+0x1be>
 8005256:	f1ab 0b02 	sub.w	fp, fp, #2
 800525a:	fa5f fb8b 	uxtb.w	fp, fp
 800525e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005262:	d820      	bhi.n	80052a6 <_printf_float+0x18a>
 8005264:	3901      	subs	r1, #1
 8005266:	465a      	mov	r2, fp
 8005268:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800526c:	9109      	str	r1, [sp, #36]	; 0x24
 800526e:	f7ff ff17 	bl	80050a0 <__exponent>
 8005272:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005274:	1813      	adds	r3, r2, r0
 8005276:	2a01      	cmp	r2, #1
 8005278:	4681      	mov	r9, r0
 800527a:	6123      	str	r3, [r4, #16]
 800527c:	dc02      	bgt.n	8005284 <_printf_float+0x168>
 800527e:	6822      	ldr	r2, [r4, #0]
 8005280:	07d2      	lsls	r2, r2, #31
 8005282:	d501      	bpl.n	8005288 <_printf_float+0x16c>
 8005284:	3301      	adds	r3, #1
 8005286:	6123      	str	r3, [r4, #16]
 8005288:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800528c:	2b00      	cmp	r3, #0
 800528e:	d09c      	beq.n	80051ca <_printf_float+0xae>
 8005290:	232d      	movs	r3, #45	; 0x2d
 8005292:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005296:	e798      	b.n	80051ca <_printf_float+0xae>
 8005298:	9a06      	ldr	r2, [sp, #24]
 800529a:	2a47      	cmp	r2, #71	; 0x47
 800529c:	d1be      	bne.n	800521c <_printf_float+0x100>
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1bc      	bne.n	800521c <_printf_float+0x100>
 80052a2:	2301      	movs	r3, #1
 80052a4:	e7b9      	b.n	800521a <_printf_float+0xfe>
 80052a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80052aa:	d118      	bne.n	80052de <_printf_float+0x1c2>
 80052ac:	2900      	cmp	r1, #0
 80052ae:	6863      	ldr	r3, [r4, #4]
 80052b0:	dd0b      	ble.n	80052ca <_printf_float+0x1ae>
 80052b2:	6121      	str	r1, [r4, #16]
 80052b4:	b913      	cbnz	r3, 80052bc <_printf_float+0x1a0>
 80052b6:	6822      	ldr	r2, [r4, #0]
 80052b8:	07d0      	lsls	r0, r2, #31
 80052ba:	d502      	bpl.n	80052c2 <_printf_float+0x1a6>
 80052bc:	3301      	adds	r3, #1
 80052be:	440b      	add	r3, r1
 80052c0:	6123      	str	r3, [r4, #16]
 80052c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80052c4:	f04f 0900 	mov.w	r9, #0
 80052c8:	e7de      	b.n	8005288 <_printf_float+0x16c>
 80052ca:	b913      	cbnz	r3, 80052d2 <_printf_float+0x1b6>
 80052cc:	6822      	ldr	r2, [r4, #0]
 80052ce:	07d2      	lsls	r2, r2, #31
 80052d0:	d501      	bpl.n	80052d6 <_printf_float+0x1ba>
 80052d2:	3302      	adds	r3, #2
 80052d4:	e7f4      	b.n	80052c0 <_printf_float+0x1a4>
 80052d6:	2301      	movs	r3, #1
 80052d8:	e7f2      	b.n	80052c0 <_printf_float+0x1a4>
 80052da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80052de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052e0:	4299      	cmp	r1, r3
 80052e2:	db05      	blt.n	80052f0 <_printf_float+0x1d4>
 80052e4:	6823      	ldr	r3, [r4, #0]
 80052e6:	6121      	str	r1, [r4, #16]
 80052e8:	07d8      	lsls	r0, r3, #31
 80052ea:	d5ea      	bpl.n	80052c2 <_printf_float+0x1a6>
 80052ec:	1c4b      	adds	r3, r1, #1
 80052ee:	e7e7      	b.n	80052c0 <_printf_float+0x1a4>
 80052f0:	2900      	cmp	r1, #0
 80052f2:	bfd4      	ite	le
 80052f4:	f1c1 0202 	rsble	r2, r1, #2
 80052f8:	2201      	movgt	r2, #1
 80052fa:	4413      	add	r3, r2
 80052fc:	e7e0      	b.n	80052c0 <_printf_float+0x1a4>
 80052fe:	6823      	ldr	r3, [r4, #0]
 8005300:	055a      	lsls	r2, r3, #21
 8005302:	d407      	bmi.n	8005314 <_printf_float+0x1f8>
 8005304:	6923      	ldr	r3, [r4, #16]
 8005306:	4642      	mov	r2, r8
 8005308:	4631      	mov	r1, r6
 800530a:	4628      	mov	r0, r5
 800530c:	47b8      	blx	r7
 800530e:	3001      	adds	r0, #1
 8005310:	d12c      	bne.n	800536c <_printf_float+0x250>
 8005312:	e764      	b.n	80051de <_printf_float+0xc2>
 8005314:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005318:	f240 80e0 	bls.w	80054dc <_printf_float+0x3c0>
 800531c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005320:	2200      	movs	r2, #0
 8005322:	2300      	movs	r3, #0
 8005324:	f7fb fbd0 	bl	8000ac8 <__aeabi_dcmpeq>
 8005328:	2800      	cmp	r0, #0
 800532a:	d034      	beq.n	8005396 <_printf_float+0x27a>
 800532c:	4a37      	ldr	r2, [pc, #220]	; (800540c <_printf_float+0x2f0>)
 800532e:	2301      	movs	r3, #1
 8005330:	4631      	mov	r1, r6
 8005332:	4628      	mov	r0, r5
 8005334:	47b8      	blx	r7
 8005336:	3001      	adds	r0, #1
 8005338:	f43f af51 	beq.w	80051de <_printf_float+0xc2>
 800533c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005340:	429a      	cmp	r2, r3
 8005342:	db02      	blt.n	800534a <_printf_float+0x22e>
 8005344:	6823      	ldr	r3, [r4, #0]
 8005346:	07d8      	lsls	r0, r3, #31
 8005348:	d510      	bpl.n	800536c <_printf_float+0x250>
 800534a:	ee18 3a10 	vmov	r3, s16
 800534e:	4652      	mov	r2, sl
 8005350:	4631      	mov	r1, r6
 8005352:	4628      	mov	r0, r5
 8005354:	47b8      	blx	r7
 8005356:	3001      	adds	r0, #1
 8005358:	f43f af41 	beq.w	80051de <_printf_float+0xc2>
 800535c:	f04f 0800 	mov.w	r8, #0
 8005360:	f104 091a 	add.w	r9, r4, #26
 8005364:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005366:	3b01      	subs	r3, #1
 8005368:	4543      	cmp	r3, r8
 800536a:	dc09      	bgt.n	8005380 <_printf_float+0x264>
 800536c:	6823      	ldr	r3, [r4, #0]
 800536e:	079b      	lsls	r3, r3, #30
 8005370:	f100 8105 	bmi.w	800557e <_printf_float+0x462>
 8005374:	68e0      	ldr	r0, [r4, #12]
 8005376:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005378:	4298      	cmp	r0, r3
 800537a:	bfb8      	it	lt
 800537c:	4618      	movlt	r0, r3
 800537e:	e730      	b.n	80051e2 <_printf_float+0xc6>
 8005380:	2301      	movs	r3, #1
 8005382:	464a      	mov	r2, r9
 8005384:	4631      	mov	r1, r6
 8005386:	4628      	mov	r0, r5
 8005388:	47b8      	blx	r7
 800538a:	3001      	adds	r0, #1
 800538c:	f43f af27 	beq.w	80051de <_printf_float+0xc2>
 8005390:	f108 0801 	add.w	r8, r8, #1
 8005394:	e7e6      	b.n	8005364 <_printf_float+0x248>
 8005396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005398:	2b00      	cmp	r3, #0
 800539a:	dc39      	bgt.n	8005410 <_printf_float+0x2f4>
 800539c:	4a1b      	ldr	r2, [pc, #108]	; (800540c <_printf_float+0x2f0>)
 800539e:	2301      	movs	r3, #1
 80053a0:	4631      	mov	r1, r6
 80053a2:	4628      	mov	r0, r5
 80053a4:	47b8      	blx	r7
 80053a6:	3001      	adds	r0, #1
 80053a8:	f43f af19 	beq.w	80051de <_printf_float+0xc2>
 80053ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053b0:	4313      	orrs	r3, r2
 80053b2:	d102      	bne.n	80053ba <_printf_float+0x29e>
 80053b4:	6823      	ldr	r3, [r4, #0]
 80053b6:	07d9      	lsls	r1, r3, #31
 80053b8:	d5d8      	bpl.n	800536c <_printf_float+0x250>
 80053ba:	ee18 3a10 	vmov	r3, s16
 80053be:	4652      	mov	r2, sl
 80053c0:	4631      	mov	r1, r6
 80053c2:	4628      	mov	r0, r5
 80053c4:	47b8      	blx	r7
 80053c6:	3001      	adds	r0, #1
 80053c8:	f43f af09 	beq.w	80051de <_printf_float+0xc2>
 80053cc:	f04f 0900 	mov.w	r9, #0
 80053d0:	f104 0a1a 	add.w	sl, r4, #26
 80053d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053d6:	425b      	negs	r3, r3
 80053d8:	454b      	cmp	r3, r9
 80053da:	dc01      	bgt.n	80053e0 <_printf_float+0x2c4>
 80053dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053de:	e792      	b.n	8005306 <_printf_float+0x1ea>
 80053e0:	2301      	movs	r3, #1
 80053e2:	4652      	mov	r2, sl
 80053e4:	4631      	mov	r1, r6
 80053e6:	4628      	mov	r0, r5
 80053e8:	47b8      	blx	r7
 80053ea:	3001      	adds	r0, #1
 80053ec:	f43f aef7 	beq.w	80051de <_printf_float+0xc2>
 80053f0:	f109 0901 	add.w	r9, r9, #1
 80053f4:	e7ee      	b.n	80053d4 <_printf_float+0x2b8>
 80053f6:	bf00      	nop
 80053f8:	7fefffff 	.word	0x7fefffff
 80053fc:	08009c34 	.word	0x08009c34
 8005400:	08009c38 	.word	0x08009c38
 8005404:	08009c40 	.word	0x08009c40
 8005408:	08009c3c 	.word	0x08009c3c
 800540c:	08009c44 	.word	0x08009c44
 8005410:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005412:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005414:	429a      	cmp	r2, r3
 8005416:	bfa8      	it	ge
 8005418:	461a      	movge	r2, r3
 800541a:	2a00      	cmp	r2, #0
 800541c:	4691      	mov	r9, r2
 800541e:	dc37      	bgt.n	8005490 <_printf_float+0x374>
 8005420:	f04f 0b00 	mov.w	fp, #0
 8005424:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005428:	f104 021a 	add.w	r2, r4, #26
 800542c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800542e:	9305      	str	r3, [sp, #20]
 8005430:	eba3 0309 	sub.w	r3, r3, r9
 8005434:	455b      	cmp	r3, fp
 8005436:	dc33      	bgt.n	80054a0 <_printf_float+0x384>
 8005438:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800543c:	429a      	cmp	r2, r3
 800543e:	db3b      	blt.n	80054b8 <_printf_float+0x39c>
 8005440:	6823      	ldr	r3, [r4, #0]
 8005442:	07da      	lsls	r2, r3, #31
 8005444:	d438      	bmi.n	80054b8 <_printf_float+0x39c>
 8005446:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005448:	9b05      	ldr	r3, [sp, #20]
 800544a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	eba2 0901 	sub.w	r9, r2, r1
 8005452:	4599      	cmp	r9, r3
 8005454:	bfa8      	it	ge
 8005456:	4699      	movge	r9, r3
 8005458:	f1b9 0f00 	cmp.w	r9, #0
 800545c:	dc35      	bgt.n	80054ca <_printf_float+0x3ae>
 800545e:	f04f 0800 	mov.w	r8, #0
 8005462:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005466:	f104 0a1a 	add.w	sl, r4, #26
 800546a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800546e:	1a9b      	subs	r3, r3, r2
 8005470:	eba3 0309 	sub.w	r3, r3, r9
 8005474:	4543      	cmp	r3, r8
 8005476:	f77f af79 	ble.w	800536c <_printf_float+0x250>
 800547a:	2301      	movs	r3, #1
 800547c:	4652      	mov	r2, sl
 800547e:	4631      	mov	r1, r6
 8005480:	4628      	mov	r0, r5
 8005482:	47b8      	blx	r7
 8005484:	3001      	adds	r0, #1
 8005486:	f43f aeaa 	beq.w	80051de <_printf_float+0xc2>
 800548a:	f108 0801 	add.w	r8, r8, #1
 800548e:	e7ec      	b.n	800546a <_printf_float+0x34e>
 8005490:	4613      	mov	r3, r2
 8005492:	4631      	mov	r1, r6
 8005494:	4642      	mov	r2, r8
 8005496:	4628      	mov	r0, r5
 8005498:	47b8      	blx	r7
 800549a:	3001      	adds	r0, #1
 800549c:	d1c0      	bne.n	8005420 <_printf_float+0x304>
 800549e:	e69e      	b.n	80051de <_printf_float+0xc2>
 80054a0:	2301      	movs	r3, #1
 80054a2:	4631      	mov	r1, r6
 80054a4:	4628      	mov	r0, r5
 80054a6:	9205      	str	r2, [sp, #20]
 80054a8:	47b8      	blx	r7
 80054aa:	3001      	adds	r0, #1
 80054ac:	f43f ae97 	beq.w	80051de <_printf_float+0xc2>
 80054b0:	9a05      	ldr	r2, [sp, #20]
 80054b2:	f10b 0b01 	add.w	fp, fp, #1
 80054b6:	e7b9      	b.n	800542c <_printf_float+0x310>
 80054b8:	ee18 3a10 	vmov	r3, s16
 80054bc:	4652      	mov	r2, sl
 80054be:	4631      	mov	r1, r6
 80054c0:	4628      	mov	r0, r5
 80054c2:	47b8      	blx	r7
 80054c4:	3001      	adds	r0, #1
 80054c6:	d1be      	bne.n	8005446 <_printf_float+0x32a>
 80054c8:	e689      	b.n	80051de <_printf_float+0xc2>
 80054ca:	9a05      	ldr	r2, [sp, #20]
 80054cc:	464b      	mov	r3, r9
 80054ce:	4442      	add	r2, r8
 80054d0:	4631      	mov	r1, r6
 80054d2:	4628      	mov	r0, r5
 80054d4:	47b8      	blx	r7
 80054d6:	3001      	adds	r0, #1
 80054d8:	d1c1      	bne.n	800545e <_printf_float+0x342>
 80054da:	e680      	b.n	80051de <_printf_float+0xc2>
 80054dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054de:	2a01      	cmp	r2, #1
 80054e0:	dc01      	bgt.n	80054e6 <_printf_float+0x3ca>
 80054e2:	07db      	lsls	r3, r3, #31
 80054e4:	d538      	bpl.n	8005558 <_printf_float+0x43c>
 80054e6:	2301      	movs	r3, #1
 80054e8:	4642      	mov	r2, r8
 80054ea:	4631      	mov	r1, r6
 80054ec:	4628      	mov	r0, r5
 80054ee:	47b8      	blx	r7
 80054f0:	3001      	adds	r0, #1
 80054f2:	f43f ae74 	beq.w	80051de <_printf_float+0xc2>
 80054f6:	ee18 3a10 	vmov	r3, s16
 80054fa:	4652      	mov	r2, sl
 80054fc:	4631      	mov	r1, r6
 80054fe:	4628      	mov	r0, r5
 8005500:	47b8      	blx	r7
 8005502:	3001      	adds	r0, #1
 8005504:	f43f ae6b 	beq.w	80051de <_printf_float+0xc2>
 8005508:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800550c:	2200      	movs	r2, #0
 800550e:	2300      	movs	r3, #0
 8005510:	f7fb fada 	bl	8000ac8 <__aeabi_dcmpeq>
 8005514:	b9d8      	cbnz	r0, 800554e <_printf_float+0x432>
 8005516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005518:	f108 0201 	add.w	r2, r8, #1
 800551c:	3b01      	subs	r3, #1
 800551e:	4631      	mov	r1, r6
 8005520:	4628      	mov	r0, r5
 8005522:	47b8      	blx	r7
 8005524:	3001      	adds	r0, #1
 8005526:	d10e      	bne.n	8005546 <_printf_float+0x42a>
 8005528:	e659      	b.n	80051de <_printf_float+0xc2>
 800552a:	2301      	movs	r3, #1
 800552c:	4652      	mov	r2, sl
 800552e:	4631      	mov	r1, r6
 8005530:	4628      	mov	r0, r5
 8005532:	47b8      	blx	r7
 8005534:	3001      	adds	r0, #1
 8005536:	f43f ae52 	beq.w	80051de <_printf_float+0xc2>
 800553a:	f108 0801 	add.w	r8, r8, #1
 800553e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005540:	3b01      	subs	r3, #1
 8005542:	4543      	cmp	r3, r8
 8005544:	dcf1      	bgt.n	800552a <_printf_float+0x40e>
 8005546:	464b      	mov	r3, r9
 8005548:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800554c:	e6dc      	b.n	8005308 <_printf_float+0x1ec>
 800554e:	f04f 0800 	mov.w	r8, #0
 8005552:	f104 0a1a 	add.w	sl, r4, #26
 8005556:	e7f2      	b.n	800553e <_printf_float+0x422>
 8005558:	2301      	movs	r3, #1
 800555a:	4642      	mov	r2, r8
 800555c:	e7df      	b.n	800551e <_printf_float+0x402>
 800555e:	2301      	movs	r3, #1
 8005560:	464a      	mov	r2, r9
 8005562:	4631      	mov	r1, r6
 8005564:	4628      	mov	r0, r5
 8005566:	47b8      	blx	r7
 8005568:	3001      	adds	r0, #1
 800556a:	f43f ae38 	beq.w	80051de <_printf_float+0xc2>
 800556e:	f108 0801 	add.w	r8, r8, #1
 8005572:	68e3      	ldr	r3, [r4, #12]
 8005574:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005576:	1a5b      	subs	r3, r3, r1
 8005578:	4543      	cmp	r3, r8
 800557a:	dcf0      	bgt.n	800555e <_printf_float+0x442>
 800557c:	e6fa      	b.n	8005374 <_printf_float+0x258>
 800557e:	f04f 0800 	mov.w	r8, #0
 8005582:	f104 0919 	add.w	r9, r4, #25
 8005586:	e7f4      	b.n	8005572 <_printf_float+0x456>

08005588 <_printf_common>:
 8005588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800558c:	4616      	mov	r6, r2
 800558e:	4699      	mov	r9, r3
 8005590:	688a      	ldr	r2, [r1, #8]
 8005592:	690b      	ldr	r3, [r1, #16]
 8005594:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005598:	4293      	cmp	r3, r2
 800559a:	bfb8      	it	lt
 800559c:	4613      	movlt	r3, r2
 800559e:	6033      	str	r3, [r6, #0]
 80055a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055a4:	4607      	mov	r7, r0
 80055a6:	460c      	mov	r4, r1
 80055a8:	b10a      	cbz	r2, 80055ae <_printf_common+0x26>
 80055aa:	3301      	adds	r3, #1
 80055ac:	6033      	str	r3, [r6, #0]
 80055ae:	6823      	ldr	r3, [r4, #0]
 80055b0:	0699      	lsls	r1, r3, #26
 80055b2:	bf42      	ittt	mi
 80055b4:	6833      	ldrmi	r3, [r6, #0]
 80055b6:	3302      	addmi	r3, #2
 80055b8:	6033      	strmi	r3, [r6, #0]
 80055ba:	6825      	ldr	r5, [r4, #0]
 80055bc:	f015 0506 	ands.w	r5, r5, #6
 80055c0:	d106      	bne.n	80055d0 <_printf_common+0x48>
 80055c2:	f104 0a19 	add.w	sl, r4, #25
 80055c6:	68e3      	ldr	r3, [r4, #12]
 80055c8:	6832      	ldr	r2, [r6, #0]
 80055ca:	1a9b      	subs	r3, r3, r2
 80055cc:	42ab      	cmp	r3, r5
 80055ce:	dc26      	bgt.n	800561e <_printf_common+0x96>
 80055d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80055d4:	1e13      	subs	r3, r2, #0
 80055d6:	6822      	ldr	r2, [r4, #0]
 80055d8:	bf18      	it	ne
 80055da:	2301      	movne	r3, #1
 80055dc:	0692      	lsls	r2, r2, #26
 80055de:	d42b      	bmi.n	8005638 <_printf_common+0xb0>
 80055e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055e4:	4649      	mov	r1, r9
 80055e6:	4638      	mov	r0, r7
 80055e8:	47c0      	blx	r8
 80055ea:	3001      	adds	r0, #1
 80055ec:	d01e      	beq.n	800562c <_printf_common+0xa4>
 80055ee:	6823      	ldr	r3, [r4, #0]
 80055f0:	68e5      	ldr	r5, [r4, #12]
 80055f2:	6832      	ldr	r2, [r6, #0]
 80055f4:	f003 0306 	and.w	r3, r3, #6
 80055f8:	2b04      	cmp	r3, #4
 80055fa:	bf08      	it	eq
 80055fc:	1aad      	subeq	r5, r5, r2
 80055fe:	68a3      	ldr	r3, [r4, #8]
 8005600:	6922      	ldr	r2, [r4, #16]
 8005602:	bf0c      	ite	eq
 8005604:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005608:	2500      	movne	r5, #0
 800560a:	4293      	cmp	r3, r2
 800560c:	bfc4      	itt	gt
 800560e:	1a9b      	subgt	r3, r3, r2
 8005610:	18ed      	addgt	r5, r5, r3
 8005612:	2600      	movs	r6, #0
 8005614:	341a      	adds	r4, #26
 8005616:	42b5      	cmp	r5, r6
 8005618:	d11a      	bne.n	8005650 <_printf_common+0xc8>
 800561a:	2000      	movs	r0, #0
 800561c:	e008      	b.n	8005630 <_printf_common+0xa8>
 800561e:	2301      	movs	r3, #1
 8005620:	4652      	mov	r2, sl
 8005622:	4649      	mov	r1, r9
 8005624:	4638      	mov	r0, r7
 8005626:	47c0      	blx	r8
 8005628:	3001      	adds	r0, #1
 800562a:	d103      	bne.n	8005634 <_printf_common+0xac>
 800562c:	f04f 30ff 	mov.w	r0, #4294967295
 8005630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005634:	3501      	adds	r5, #1
 8005636:	e7c6      	b.n	80055c6 <_printf_common+0x3e>
 8005638:	18e1      	adds	r1, r4, r3
 800563a:	1c5a      	adds	r2, r3, #1
 800563c:	2030      	movs	r0, #48	; 0x30
 800563e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005642:	4422      	add	r2, r4
 8005644:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005648:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800564c:	3302      	adds	r3, #2
 800564e:	e7c7      	b.n	80055e0 <_printf_common+0x58>
 8005650:	2301      	movs	r3, #1
 8005652:	4622      	mov	r2, r4
 8005654:	4649      	mov	r1, r9
 8005656:	4638      	mov	r0, r7
 8005658:	47c0      	blx	r8
 800565a:	3001      	adds	r0, #1
 800565c:	d0e6      	beq.n	800562c <_printf_common+0xa4>
 800565e:	3601      	adds	r6, #1
 8005660:	e7d9      	b.n	8005616 <_printf_common+0x8e>
	...

08005664 <_printf_i>:
 8005664:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005668:	460c      	mov	r4, r1
 800566a:	4691      	mov	r9, r2
 800566c:	7e27      	ldrb	r7, [r4, #24]
 800566e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005670:	2f78      	cmp	r7, #120	; 0x78
 8005672:	4680      	mov	r8, r0
 8005674:	469a      	mov	sl, r3
 8005676:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800567a:	d807      	bhi.n	800568c <_printf_i+0x28>
 800567c:	2f62      	cmp	r7, #98	; 0x62
 800567e:	d80a      	bhi.n	8005696 <_printf_i+0x32>
 8005680:	2f00      	cmp	r7, #0
 8005682:	f000 80d8 	beq.w	8005836 <_printf_i+0x1d2>
 8005686:	2f58      	cmp	r7, #88	; 0x58
 8005688:	f000 80a3 	beq.w	80057d2 <_printf_i+0x16e>
 800568c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005690:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005694:	e03a      	b.n	800570c <_printf_i+0xa8>
 8005696:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800569a:	2b15      	cmp	r3, #21
 800569c:	d8f6      	bhi.n	800568c <_printf_i+0x28>
 800569e:	a001      	add	r0, pc, #4	; (adr r0, 80056a4 <_printf_i+0x40>)
 80056a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80056a4:	080056fd 	.word	0x080056fd
 80056a8:	08005711 	.word	0x08005711
 80056ac:	0800568d 	.word	0x0800568d
 80056b0:	0800568d 	.word	0x0800568d
 80056b4:	0800568d 	.word	0x0800568d
 80056b8:	0800568d 	.word	0x0800568d
 80056bc:	08005711 	.word	0x08005711
 80056c0:	0800568d 	.word	0x0800568d
 80056c4:	0800568d 	.word	0x0800568d
 80056c8:	0800568d 	.word	0x0800568d
 80056cc:	0800568d 	.word	0x0800568d
 80056d0:	0800581d 	.word	0x0800581d
 80056d4:	08005741 	.word	0x08005741
 80056d8:	080057ff 	.word	0x080057ff
 80056dc:	0800568d 	.word	0x0800568d
 80056e0:	0800568d 	.word	0x0800568d
 80056e4:	0800583f 	.word	0x0800583f
 80056e8:	0800568d 	.word	0x0800568d
 80056ec:	08005741 	.word	0x08005741
 80056f0:	0800568d 	.word	0x0800568d
 80056f4:	0800568d 	.word	0x0800568d
 80056f8:	08005807 	.word	0x08005807
 80056fc:	680b      	ldr	r3, [r1, #0]
 80056fe:	1d1a      	adds	r2, r3, #4
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	600a      	str	r2, [r1, #0]
 8005704:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005708:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800570c:	2301      	movs	r3, #1
 800570e:	e0a3      	b.n	8005858 <_printf_i+0x1f4>
 8005710:	6825      	ldr	r5, [r4, #0]
 8005712:	6808      	ldr	r0, [r1, #0]
 8005714:	062e      	lsls	r6, r5, #24
 8005716:	f100 0304 	add.w	r3, r0, #4
 800571a:	d50a      	bpl.n	8005732 <_printf_i+0xce>
 800571c:	6805      	ldr	r5, [r0, #0]
 800571e:	600b      	str	r3, [r1, #0]
 8005720:	2d00      	cmp	r5, #0
 8005722:	da03      	bge.n	800572c <_printf_i+0xc8>
 8005724:	232d      	movs	r3, #45	; 0x2d
 8005726:	426d      	negs	r5, r5
 8005728:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800572c:	485e      	ldr	r0, [pc, #376]	; (80058a8 <_printf_i+0x244>)
 800572e:	230a      	movs	r3, #10
 8005730:	e019      	b.n	8005766 <_printf_i+0x102>
 8005732:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005736:	6805      	ldr	r5, [r0, #0]
 8005738:	600b      	str	r3, [r1, #0]
 800573a:	bf18      	it	ne
 800573c:	b22d      	sxthne	r5, r5
 800573e:	e7ef      	b.n	8005720 <_printf_i+0xbc>
 8005740:	680b      	ldr	r3, [r1, #0]
 8005742:	6825      	ldr	r5, [r4, #0]
 8005744:	1d18      	adds	r0, r3, #4
 8005746:	6008      	str	r0, [r1, #0]
 8005748:	0628      	lsls	r0, r5, #24
 800574a:	d501      	bpl.n	8005750 <_printf_i+0xec>
 800574c:	681d      	ldr	r5, [r3, #0]
 800574e:	e002      	b.n	8005756 <_printf_i+0xf2>
 8005750:	0669      	lsls	r1, r5, #25
 8005752:	d5fb      	bpl.n	800574c <_printf_i+0xe8>
 8005754:	881d      	ldrh	r5, [r3, #0]
 8005756:	4854      	ldr	r0, [pc, #336]	; (80058a8 <_printf_i+0x244>)
 8005758:	2f6f      	cmp	r7, #111	; 0x6f
 800575a:	bf0c      	ite	eq
 800575c:	2308      	moveq	r3, #8
 800575e:	230a      	movne	r3, #10
 8005760:	2100      	movs	r1, #0
 8005762:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005766:	6866      	ldr	r6, [r4, #4]
 8005768:	60a6      	str	r6, [r4, #8]
 800576a:	2e00      	cmp	r6, #0
 800576c:	bfa2      	ittt	ge
 800576e:	6821      	ldrge	r1, [r4, #0]
 8005770:	f021 0104 	bicge.w	r1, r1, #4
 8005774:	6021      	strge	r1, [r4, #0]
 8005776:	b90d      	cbnz	r5, 800577c <_printf_i+0x118>
 8005778:	2e00      	cmp	r6, #0
 800577a:	d04d      	beq.n	8005818 <_printf_i+0x1b4>
 800577c:	4616      	mov	r6, r2
 800577e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005782:	fb03 5711 	mls	r7, r3, r1, r5
 8005786:	5dc7      	ldrb	r7, [r0, r7]
 8005788:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800578c:	462f      	mov	r7, r5
 800578e:	42bb      	cmp	r3, r7
 8005790:	460d      	mov	r5, r1
 8005792:	d9f4      	bls.n	800577e <_printf_i+0x11a>
 8005794:	2b08      	cmp	r3, #8
 8005796:	d10b      	bne.n	80057b0 <_printf_i+0x14c>
 8005798:	6823      	ldr	r3, [r4, #0]
 800579a:	07df      	lsls	r7, r3, #31
 800579c:	d508      	bpl.n	80057b0 <_printf_i+0x14c>
 800579e:	6923      	ldr	r3, [r4, #16]
 80057a0:	6861      	ldr	r1, [r4, #4]
 80057a2:	4299      	cmp	r1, r3
 80057a4:	bfde      	ittt	le
 80057a6:	2330      	movle	r3, #48	; 0x30
 80057a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80057ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80057b0:	1b92      	subs	r2, r2, r6
 80057b2:	6122      	str	r2, [r4, #16]
 80057b4:	f8cd a000 	str.w	sl, [sp]
 80057b8:	464b      	mov	r3, r9
 80057ba:	aa03      	add	r2, sp, #12
 80057bc:	4621      	mov	r1, r4
 80057be:	4640      	mov	r0, r8
 80057c0:	f7ff fee2 	bl	8005588 <_printf_common>
 80057c4:	3001      	adds	r0, #1
 80057c6:	d14c      	bne.n	8005862 <_printf_i+0x1fe>
 80057c8:	f04f 30ff 	mov.w	r0, #4294967295
 80057cc:	b004      	add	sp, #16
 80057ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057d2:	4835      	ldr	r0, [pc, #212]	; (80058a8 <_printf_i+0x244>)
 80057d4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80057d8:	6823      	ldr	r3, [r4, #0]
 80057da:	680e      	ldr	r6, [r1, #0]
 80057dc:	061f      	lsls	r7, r3, #24
 80057de:	f856 5b04 	ldr.w	r5, [r6], #4
 80057e2:	600e      	str	r6, [r1, #0]
 80057e4:	d514      	bpl.n	8005810 <_printf_i+0x1ac>
 80057e6:	07d9      	lsls	r1, r3, #31
 80057e8:	bf44      	itt	mi
 80057ea:	f043 0320 	orrmi.w	r3, r3, #32
 80057ee:	6023      	strmi	r3, [r4, #0]
 80057f0:	b91d      	cbnz	r5, 80057fa <_printf_i+0x196>
 80057f2:	6823      	ldr	r3, [r4, #0]
 80057f4:	f023 0320 	bic.w	r3, r3, #32
 80057f8:	6023      	str	r3, [r4, #0]
 80057fa:	2310      	movs	r3, #16
 80057fc:	e7b0      	b.n	8005760 <_printf_i+0xfc>
 80057fe:	6823      	ldr	r3, [r4, #0]
 8005800:	f043 0320 	orr.w	r3, r3, #32
 8005804:	6023      	str	r3, [r4, #0]
 8005806:	2378      	movs	r3, #120	; 0x78
 8005808:	4828      	ldr	r0, [pc, #160]	; (80058ac <_printf_i+0x248>)
 800580a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800580e:	e7e3      	b.n	80057d8 <_printf_i+0x174>
 8005810:	065e      	lsls	r6, r3, #25
 8005812:	bf48      	it	mi
 8005814:	b2ad      	uxthmi	r5, r5
 8005816:	e7e6      	b.n	80057e6 <_printf_i+0x182>
 8005818:	4616      	mov	r6, r2
 800581a:	e7bb      	b.n	8005794 <_printf_i+0x130>
 800581c:	680b      	ldr	r3, [r1, #0]
 800581e:	6826      	ldr	r6, [r4, #0]
 8005820:	6960      	ldr	r0, [r4, #20]
 8005822:	1d1d      	adds	r5, r3, #4
 8005824:	600d      	str	r5, [r1, #0]
 8005826:	0635      	lsls	r5, r6, #24
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	d501      	bpl.n	8005830 <_printf_i+0x1cc>
 800582c:	6018      	str	r0, [r3, #0]
 800582e:	e002      	b.n	8005836 <_printf_i+0x1d2>
 8005830:	0671      	lsls	r1, r6, #25
 8005832:	d5fb      	bpl.n	800582c <_printf_i+0x1c8>
 8005834:	8018      	strh	r0, [r3, #0]
 8005836:	2300      	movs	r3, #0
 8005838:	6123      	str	r3, [r4, #16]
 800583a:	4616      	mov	r6, r2
 800583c:	e7ba      	b.n	80057b4 <_printf_i+0x150>
 800583e:	680b      	ldr	r3, [r1, #0]
 8005840:	1d1a      	adds	r2, r3, #4
 8005842:	600a      	str	r2, [r1, #0]
 8005844:	681e      	ldr	r6, [r3, #0]
 8005846:	6862      	ldr	r2, [r4, #4]
 8005848:	2100      	movs	r1, #0
 800584a:	4630      	mov	r0, r6
 800584c:	f7fa fcc8 	bl	80001e0 <memchr>
 8005850:	b108      	cbz	r0, 8005856 <_printf_i+0x1f2>
 8005852:	1b80      	subs	r0, r0, r6
 8005854:	6060      	str	r0, [r4, #4]
 8005856:	6863      	ldr	r3, [r4, #4]
 8005858:	6123      	str	r3, [r4, #16]
 800585a:	2300      	movs	r3, #0
 800585c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005860:	e7a8      	b.n	80057b4 <_printf_i+0x150>
 8005862:	6923      	ldr	r3, [r4, #16]
 8005864:	4632      	mov	r2, r6
 8005866:	4649      	mov	r1, r9
 8005868:	4640      	mov	r0, r8
 800586a:	47d0      	blx	sl
 800586c:	3001      	adds	r0, #1
 800586e:	d0ab      	beq.n	80057c8 <_printf_i+0x164>
 8005870:	6823      	ldr	r3, [r4, #0]
 8005872:	079b      	lsls	r3, r3, #30
 8005874:	d413      	bmi.n	800589e <_printf_i+0x23a>
 8005876:	68e0      	ldr	r0, [r4, #12]
 8005878:	9b03      	ldr	r3, [sp, #12]
 800587a:	4298      	cmp	r0, r3
 800587c:	bfb8      	it	lt
 800587e:	4618      	movlt	r0, r3
 8005880:	e7a4      	b.n	80057cc <_printf_i+0x168>
 8005882:	2301      	movs	r3, #1
 8005884:	4632      	mov	r2, r6
 8005886:	4649      	mov	r1, r9
 8005888:	4640      	mov	r0, r8
 800588a:	47d0      	blx	sl
 800588c:	3001      	adds	r0, #1
 800588e:	d09b      	beq.n	80057c8 <_printf_i+0x164>
 8005890:	3501      	adds	r5, #1
 8005892:	68e3      	ldr	r3, [r4, #12]
 8005894:	9903      	ldr	r1, [sp, #12]
 8005896:	1a5b      	subs	r3, r3, r1
 8005898:	42ab      	cmp	r3, r5
 800589a:	dcf2      	bgt.n	8005882 <_printf_i+0x21e>
 800589c:	e7eb      	b.n	8005876 <_printf_i+0x212>
 800589e:	2500      	movs	r5, #0
 80058a0:	f104 0619 	add.w	r6, r4, #25
 80058a4:	e7f5      	b.n	8005892 <_printf_i+0x22e>
 80058a6:	bf00      	nop
 80058a8:	08009c46 	.word	0x08009c46
 80058ac:	08009c57 	.word	0x08009c57

080058b0 <_scanf_float>:
 80058b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058b4:	b087      	sub	sp, #28
 80058b6:	4617      	mov	r7, r2
 80058b8:	9303      	str	r3, [sp, #12]
 80058ba:	688b      	ldr	r3, [r1, #8]
 80058bc:	1e5a      	subs	r2, r3, #1
 80058be:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80058c2:	bf83      	ittte	hi
 80058c4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80058c8:	195b      	addhi	r3, r3, r5
 80058ca:	9302      	strhi	r3, [sp, #8]
 80058cc:	2300      	movls	r3, #0
 80058ce:	bf86      	itte	hi
 80058d0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80058d4:	608b      	strhi	r3, [r1, #8]
 80058d6:	9302      	strls	r3, [sp, #8]
 80058d8:	680b      	ldr	r3, [r1, #0]
 80058da:	468b      	mov	fp, r1
 80058dc:	2500      	movs	r5, #0
 80058de:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80058e2:	f84b 3b1c 	str.w	r3, [fp], #28
 80058e6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80058ea:	4680      	mov	r8, r0
 80058ec:	460c      	mov	r4, r1
 80058ee:	465e      	mov	r6, fp
 80058f0:	46aa      	mov	sl, r5
 80058f2:	46a9      	mov	r9, r5
 80058f4:	9501      	str	r5, [sp, #4]
 80058f6:	68a2      	ldr	r2, [r4, #8]
 80058f8:	b152      	cbz	r2, 8005910 <_scanf_float+0x60>
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	2b4e      	cmp	r3, #78	; 0x4e
 8005900:	d864      	bhi.n	80059cc <_scanf_float+0x11c>
 8005902:	2b40      	cmp	r3, #64	; 0x40
 8005904:	d83c      	bhi.n	8005980 <_scanf_float+0xd0>
 8005906:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800590a:	b2c8      	uxtb	r0, r1
 800590c:	280e      	cmp	r0, #14
 800590e:	d93a      	bls.n	8005986 <_scanf_float+0xd6>
 8005910:	f1b9 0f00 	cmp.w	r9, #0
 8005914:	d003      	beq.n	800591e <_scanf_float+0x6e>
 8005916:	6823      	ldr	r3, [r4, #0]
 8005918:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800591c:	6023      	str	r3, [r4, #0]
 800591e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005922:	f1ba 0f01 	cmp.w	sl, #1
 8005926:	f200 8113 	bhi.w	8005b50 <_scanf_float+0x2a0>
 800592a:	455e      	cmp	r6, fp
 800592c:	f200 8105 	bhi.w	8005b3a <_scanf_float+0x28a>
 8005930:	2501      	movs	r5, #1
 8005932:	4628      	mov	r0, r5
 8005934:	b007      	add	sp, #28
 8005936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800593a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800593e:	2a0d      	cmp	r2, #13
 8005940:	d8e6      	bhi.n	8005910 <_scanf_float+0x60>
 8005942:	a101      	add	r1, pc, #4	; (adr r1, 8005948 <_scanf_float+0x98>)
 8005944:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005948:	08005a87 	.word	0x08005a87
 800594c:	08005911 	.word	0x08005911
 8005950:	08005911 	.word	0x08005911
 8005954:	08005911 	.word	0x08005911
 8005958:	08005ae7 	.word	0x08005ae7
 800595c:	08005abf 	.word	0x08005abf
 8005960:	08005911 	.word	0x08005911
 8005964:	08005911 	.word	0x08005911
 8005968:	08005a95 	.word	0x08005a95
 800596c:	08005911 	.word	0x08005911
 8005970:	08005911 	.word	0x08005911
 8005974:	08005911 	.word	0x08005911
 8005978:	08005911 	.word	0x08005911
 800597c:	08005a4d 	.word	0x08005a4d
 8005980:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005984:	e7db      	b.n	800593e <_scanf_float+0x8e>
 8005986:	290e      	cmp	r1, #14
 8005988:	d8c2      	bhi.n	8005910 <_scanf_float+0x60>
 800598a:	a001      	add	r0, pc, #4	; (adr r0, 8005990 <_scanf_float+0xe0>)
 800598c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005990:	08005a3f 	.word	0x08005a3f
 8005994:	08005911 	.word	0x08005911
 8005998:	08005a3f 	.word	0x08005a3f
 800599c:	08005ad3 	.word	0x08005ad3
 80059a0:	08005911 	.word	0x08005911
 80059a4:	080059ed 	.word	0x080059ed
 80059a8:	08005a29 	.word	0x08005a29
 80059ac:	08005a29 	.word	0x08005a29
 80059b0:	08005a29 	.word	0x08005a29
 80059b4:	08005a29 	.word	0x08005a29
 80059b8:	08005a29 	.word	0x08005a29
 80059bc:	08005a29 	.word	0x08005a29
 80059c0:	08005a29 	.word	0x08005a29
 80059c4:	08005a29 	.word	0x08005a29
 80059c8:	08005a29 	.word	0x08005a29
 80059cc:	2b6e      	cmp	r3, #110	; 0x6e
 80059ce:	d809      	bhi.n	80059e4 <_scanf_float+0x134>
 80059d0:	2b60      	cmp	r3, #96	; 0x60
 80059d2:	d8b2      	bhi.n	800593a <_scanf_float+0x8a>
 80059d4:	2b54      	cmp	r3, #84	; 0x54
 80059d6:	d077      	beq.n	8005ac8 <_scanf_float+0x218>
 80059d8:	2b59      	cmp	r3, #89	; 0x59
 80059da:	d199      	bne.n	8005910 <_scanf_float+0x60>
 80059dc:	2d07      	cmp	r5, #7
 80059de:	d197      	bne.n	8005910 <_scanf_float+0x60>
 80059e0:	2508      	movs	r5, #8
 80059e2:	e029      	b.n	8005a38 <_scanf_float+0x188>
 80059e4:	2b74      	cmp	r3, #116	; 0x74
 80059e6:	d06f      	beq.n	8005ac8 <_scanf_float+0x218>
 80059e8:	2b79      	cmp	r3, #121	; 0x79
 80059ea:	e7f6      	b.n	80059da <_scanf_float+0x12a>
 80059ec:	6821      	ldr	r1, [r4, #0]
 80059ee:	05c8      	lsls	r0, r1, #23
 80059f0:	d51a      	bpl.n	8005a28 <_scanf_float+0x178>
 80059f2:	9b02      	ldr	r3, [sp, #8]
 80059f4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80059f8:	6021      	str	r1, [r4, #0]
 80059fa:	f109 0901 	add.w	r9, r9, #1
 80059fe:	b11b      	cbz	r3, 8005a08 <_scanf_float+0x158>
 8005a00:	3b01      	subs	r3, #1
 8005a02:	3201      	adds	r2, #1
 8005a04:	9302      	str	r3, [sp, #8]
 8005a06:	60a2      	str	r2, [r4, #8]
 8005a08:	68a3      	ldr	r3, [r4, #8]
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	60a3      	str	r3, [r4, #8]
 8005a0e:	6923      	ldr	r3, [r4, #16]
 8005a10:	3301      	adds	r3, #1
 8005a12:	6123      	str	r3, [r4, #16]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	3b01      	subs	r3, #1
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	607b      	str	r3, [r7, #4]
 8005a1c:	f340 8084 	ble.w	8005b28 <_scanf_float+0x278>
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	3301      	adds	r3, #1
 8005a24:	603b      	str	r3, [r7, #0]
 8005a26:	e766      	b.n	80058f6 <_scanf_float+0x46>
 8005a28:	eb1a 0f05 	cmn.w	sl, r5
 8005a2c:	f47f af70 	bne.w	8005910 <_scanf_float+0x60>
 8005a30:	6822      	ldr	r2, [r4, #0]
 8005a32:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005a36:	6022      	str	r2, [r4, #0]
 8005a38:	f806 3b01 	strb.w	r3, [r6], #1
 8005a3c:	e7e4      	b.n	8005a08 <_scanf_float+0x158>
 8005a3e:	6822      	ldr	r2, [r4, #0]
 8005a40:	0610      	lsls	r0, r2, #24
 8005a42:	f57f af65 	bpl.w	8005910 <_scanf_float+0x60>
 8005a46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a4a:	e7f4      	b.n	8005a36 <_scanf_float+0x186>
 8005a4c:	f1ba 0f00 	cmp.w	sl, #0
 8005a50:	d10e      	bne.n	8005a70 <_scanf_float+0x1c0>
 8005a52:	f1b9 0f00 	cmp.w	r9, #0
 8005a56:	d10e      	bne.n	8005a76 <_scanf_float+0x1c6>
 8005a58:	6822      	ldr	r2, [r4, #0]
 8005a5a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005a5e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005a62:	d108      	bne.n	8005a76 <_scanf_float+0x1c6>
 8005a64:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005a68:	6022      	str	r2, [r4, #0]
 8005a6a:	f04f 0a01 	mov.w	sl, #1
 8005a6e:	e7e3      	b.n	8005a38 <_scanf_float+0x188>
 8005a70:	f1ba 0f02 	cmp.w	sl, #2
 8005a74:	d055      	beq.n	8005b22 <_scanf_float+0x272>
 8005a76:	2d01      	cmp	r5, #1
 8005a78:	d002      	beq.n	8005a80 <_scanf_float+0x1d0>
 8005a7a:	2d04      	cmp	r5, #4
 8005a7c:	f47f af48 	bne.w	8005910 <_scanf_float+0x60>
 8005a80:	3501      	adds	r5, #1
 8005a82:	b2ed      	uxtb	r5, r5
 8005a84:	e7d8      	b.n	8005a38 <_scanf_float+0x188>
 8005a86:	f1ba 0f01 	cmp.w	sl, #1
 8005a8a:	f47f af41 	bne.w	8005910 <_scanf_float+0x60>
 8005a8e:	f04f 0a02 	mov.w	sl, #2
 8005a92:	e7d1      	b.n	8005a38 <_scanf_float+0x188>
 8005a94:	b97d      	cbnz	r5, 8005ab6 <_scanf_float+0x206>
 8005a96:	f1b9 0f00 	cmp.w	r9, #0
 8005a9a:	f47f af3c 	bne.w	8005916 <_scanf_float+0x66>
 8005a9e:	6822      	ldr	r2, [r4, #0]
 8005aa0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005aa4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005aa8:	f47f af39 	bne.w	800591e <_scanf_float+0x6e>
 8005aac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005ab0:	6022      	str	r2, [r4, #0]
 8005ab2:	2501      	movs	r5, #1
 8005ab4:	e7c0      	b.n	8005a38 <_scanf_float+0x188>
 8005ab6:	2d03      	cmp	r5, #3
 8005ab8:	d0e2      	beq.n	8005a80 <_scanf_float+0x1d0>
 8005aba:	2d05      	cmp	r5, #5
 8005abc:	e7de      	b.n	8005a7c <_scanf_float+0x1cc>
 8005abe:	2d02      	cmp	r5, #2
 8005ac0:	f47f af26 	bne.w	8005910 <_scanf_float+0x60>
 8005ac4:	2503      	movs	r5, #3
 8005ac6:	e7b7      	b.n	8005a38 <_scanf_float+0x188>
 8005ac8:	2d06      	cmp	r5, #6
 8005aca:	f47f af21 	bne.w	8005910 <_scanf_float+0x60>
 8005ace:	2507      	movs	r5, #7
 8005ad0:	e7b2      	b.n	8005a38 <_scanf_float+0x188>
 8005ad2:	6822      	ldr	r2, [r4, #0]
 8005ad4:	0591      	lsls	r1, r2, #22
 8005ad6:	f57f af1b 	bpl.w	8005910 <_scanf_float+0x60>
 8005ada:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005ade:	6022      	str	r2, [r4, #0]
 8005ae0:	f8cd 9004 	str.w	r9, [sp, #4]
 8005ae4:	e7a8      	b.n	8005a38 <_scanf_float+0x188>
 8005ae6:	6822      	ldr	r2, [r4, #0]
 8005ae8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005aec:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005af0:	d006      	beq.n	8005b00 <_scanf_float+0x250>
 8005af2:	0550      	lsls	r0, r2, #21
 8005af4:	f57f af0c 	bpl.w	8005910 <_scanf_float+0x60>
 8005af8:	f1b9 0f00 	cmp.w	r9, #0
 8005afc:	f43f af0f 	beq.w	800591e <_scanf_float+0x6e>
 8005b00:	0591      	lsls	r1, r2, #22
 8005b02:	bf58      	it	pl
 8005b04:	9901      	ldrpl	r1, [sp, #4]
 8005b06:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005b0a:	bf58      	it	pl
 8005b0c:	eba9 0101 	subpl.w	r1, r9, r1
 8005b10:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005b14:	bf58      	it	pl
 8005b16:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005b1a:	6022      	str	r2, [r4, #0]
 8005b1c:	f04f 0900 	mov.w	r9, #0
 8005b20:	e78a      	b.n	8005a38 <_scanf_float+0x188>
 8005b22:	f04f 0a03 	mov.w	sl, #3
 8005b26:	e787      	b.n	8005a38 <_scanf_float+0x188>
 8005b28:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005b2c:	4639      	mov	r1, r7
 8005b2e:	4640      	mov	r0, r8
 8005b30:	4798      	blx	r3
 8005b32:	2800      	cmp	r0, #0
 8005b34:	f43f aedf 	beq.w	80058f6 <_scanf_float+0x46>
 8005b38:	e6ea      	b.n	8005910 <_scanf_float+0x60>
 8005b3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005b3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005b42:	463a      	mov	r2, r7
 8005b44:	4640      	mov	r0, r8
 8005b46:	4798      	blx	r3
 8005b48:	6923      	ldr	r3, [r4, #16]
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	6123      	str	r3, [r4, #16]
 8005b4e:	e6ec      	b.n	800592a <_scanf_float+0x7a>
 8005b50:	1e6b      	subs	r3, r5, #1
 8005b52:	2b06      	cmp	r3, #6
 8005b54:	d825      	bhi.n	8005ba2 <_scanf_float+0x2f2>
 8005b56:	2d02      	cmp	r5, #2
 8005b58:	d836      	bhi.n	8005bc8 <_scanf_float+0x318>
 8005b5a:	455e      	cmp	r6, fp
 8005b5c:	f67f aee8 	bls.w	8005930 <_scanf_float+0x80>
 8005b60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005b64:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005b68:	463a      	mov	r2, r7
 8005b6a:	4640      	mov	r0, r8
 8005b6c:	4798      	blx	r3
 8005b6e:	6923      	ldr	r3, [r4, #16]
 8005b70:	3b01      	subs	r3, #1
 8005b72:	6123      	str	r3, [r4, #16]
 8005b74:	e7f1      	b.n	8005b5a <_scanf_float+0x2aa>
 8005b76:	9802      	ldr	r0, [sp, #8]
 8005b78:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005b7c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005b80:	9002      	str	r0, [sp, #8]
 8005b82:	463a      	mov	r2, r7
 8005b84:	4640      	mov	r0, r8
 8005b86:	4798      	blx	r3
 8005b88:	6923      	ldr	r3, [r4, #16]
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	6123      	str	r3, [r4, #16]
 8005b8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b92:	fa5f fa8a 	uxtb.w	sl, sl
 8005b96:	f1ba 0f02 	cmp.w	sl, #2
 8005b9a:	d1ec      	bne.n	8005b76 <_scanf_float+0x2c6>
 8005b9c:	3d03      	subs	r5, #3
 8005b9e:	b2ed      	uxtb	r5, r5
 8005ba0:	1b76      	subs	r6, r6, r5
 8005ba2:	6823      	ldr	r3, [r4, #0]
 8005ba4:	05da      	lsls	r2, r3, #23
 8005ba6:	d52f      	bpl.n	8005c08 <_scanf_float+0x358>
 8005ba8:	055b      	lsls	r3, r3, #21
 8005baa:	d510      	bpl.n	8005bce <_scanf_float+0x31e>
 8005bac:	455e      	cmp	r6, fp
 8005bae:	f67f aebf 	bls.w	8005930 <_scanf_float+0x80>
 8005bb2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005bb6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005bba:	463a      	mov	r2, r7
 8005bbc:	4640      	mov	r0, r8
 8005bbe:	4798      	blx	r3
 8005bc0:	6923      	ldr	r3, [r4, #16]
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	6123      	str	r3, [r4, #16]
 8005bc6:	e7f1      	b.n	8005bac <_scanf_float+0x2fc>
 8005bc8:	46aa      	mov	sl, r5
 8005bca:	9602      	str	r6, [sp, #8]
 8005bcc:	e7df      	b.n	8005b8e <_scanf_float+0x2de>
 8005bce:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005bd2:	6923      	ldr	r3, [r4, #16]
 8005bd4:	2965      	cmp	r1, #101	; 0x65
 8005bd6:	f103 33ff 	add.w	r3, r3, #4294967295
 8005bda:	f106 35ff 	add.w	r5, r6, #4294967295
 8005bde:	6123      	str	r3, [r4, #16]
 8005be0:	d00c      	beq.n	8005bfc <_scanf_float+0x34c>
 8005be2:	2945      	cmp	r1, #69	; 0x45
 8005be4:	d00a      	beq.n	8005bfc <_scanf_float+0x34c>
 8005be6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005bea:	463a      	mov	r2, r7
 8005bec:	4640      	mov	r0, r8
 8005bee:	4798      	blx	r3
 8005bf0:	6923      	ldr	r3, [r4, #16]
 8005bf2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	1eb5      	subs	r5, r6, #2
 8005bfa:	6123      	str	r3, [r4, #16]
 8005bfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c00:	463a      	mov	r2, r7
 8005c02:	4640      	mov	r0, r8
 8005c04:	4798      	blx	r3
 8005c06:	462e      	mov	r6, r5
 8005c08:	6825      	ldr	r5, [r4, #0]
 8005c0a:	f015 0510 	ands.w	r5, r5, #16
 8005c0e:	d158      	bne.n	8005cc2 <_scanf_float+0x412>
 8005c10:	7035      	strb	r5, [r6, #0]
 8005c12:	6823      	ldr	r3, [r4, #0]
 8005c14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005c18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c1c:	d11c      	bne.n	8005c58 <_scanf_float+0x3a8>
 8005c1e:	9b01      	ldr	r3, [sp, #4]
 8005c20:	454b      	cmp	r3, r9
 8005c22:	eba3 0209 	sub.w	r2, r3, r9
 8005c26:	d124      	bne.n	8005c72 <_scanf_float+0x3c2>
 8005c28:	2200      	movs	r2, #0
 8005c2a:	4659      	mov	r1, fp
 8005c2c:	4640      	mov	r0, r8
 8005c2e:	f001 f809 	bl	8006c44 <_strtod_r>
 8005c32:	9b03      	ldr	r3, [sp, #12]
 8005c34:	6821      	ldr	r1, [r4, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f011 0f02 	tst.w	r1, #2
 8005c3c:	ec57 6b10 	vmov	r6, r7, d0
 8005c40:	f103 0204 	add.w	r2, r3, #4
 8005c44:	d020      	beq.n	8005c88 <_scanf_float+0x3d8>
 8005c46:	9903      	ldr	r1, [sp, #12]
 8005c48:	600a      	str	r2, [r1, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	e9c3 6700 	strd	r6, r7, [r3]
 8005c50:	68e3      	ldr	r3, [r4, #12]
 8005c52:	3301      	adds	r3, #1
 8005c54:	60e3      	str	r3, [r4, #12]
 8005c56:	e66c      	b.n	8005932 <_scanf_float+0x82>
 8005c58:	9b04      	ldr	r3, [sp, #16]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d0e4      	beq.n	8005c28 <_scanf_float+0x378>
 8005c5e:	9905      	ldr	r1, [sp, #20]
 8005c60:	230a      	movs	r3, #10
 8005c62:	462a      	mov	r2, r5
 8005c64:	3101      	adds	r1, #1
 8005c66:	4640      	mov	r0, r8
 8005c68:	f001 f876 	bl	8006d58 <_strtol_r>
 8005c6c:	9b04      	ldr	r3, [sp, #16]
 8005c6e:	9e05      	ldr	r6, [sp, #20]
 8005c70:	1ac2      	subs	r2, r0, r3
 8005c72:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005c76:	429e      	cmp	r6, r3
 8005c78:	bf28      	it	cs
 8005c7a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005c7e:	4912      	ldr	r1, [pc, #72]	; (8005cc8 <_scanf_float+0x418>)
 8005c80:	4630      	mov	r0, r6
 8005c82:	f000 f997 	bl	8005fb4 <siprintf>
 8005c86:	e7cf      	b.n	8005c28 <_scanf_float+0x378>
 8005c88:	f011 0f04 	tst.w	r1, #4
 8005c8c:	9903      	ldr	r1, [sp, #12]
 8005c8e:	600a      	str	r2, [r1, #0]
 8005c90:	d1db      	bne.n	8005c4a <_scanf_float+0x39a>
 8005c92:	f8d3 8000 	ldr.w	r8, [r3]
 8005c96:	ee10 2a10 	vmov	r2, s0
 8005c9a:	ee10 0a10 	vmov	r0, s0
 8005c9e:	463b      	mov	r3, r7
 8005ca0:	4639      	mov	r1, r7
 8005ca2:	f7fa ff43 	bl	8000b2c <__aeabi_dcmpun>
 8005ca6:	b128      	cbz	r0, 8005cb4 <_scanf_float+0x404>
 8005ca8:	4808      	ldr	r0, [pc, #32]	; (8005ccc <_scanf_float+0x41c>)
 8005caa:	f000 f97d 	bl	8005fa8 <nanf>
 8005cae:	ed88 0a00 	vstr	s0, [r8]
 8005cb2:	e7cd      	b.n	8005c50 <_scanf_float+0x3a0>
 8005cb4:	4630      	mov	r0, r6
 8005cb6:	4639      	mov	r1, r7
 8005cb8:	f7fa ff96 	bl	8000be8 <__aeabi_d2f>
 8005cbc:	f8c8 0000 	str.w	r0, [r8]
 8005cc0:	e7c6      	b.n	8005c50 <_scanf_float+0x3a0>
 8005cc2:	2500      	movs	r5, #0
 8005cc4:	e635      	b.n	8005932 <_scanf_float+0x82>
 8005cc6:	bf00      	nop
 8005cc8:	08009c68 	.word	0x08009c68
 8005ccc:	0800a0e0 	.word	0x0800a0e0

08005cd0 <iprintf>:
 8005cd0:	b40f      	push	{r0, r1, r2, r3}
 8005cd2:	4b0a      	ldr	r3, [pc, #40]	; (8005cfc <iprintf+0x2c>)
 8005cd4:	b513      	push	{r0, r1, r4, lr}
 8005cd6:	681c      	ldr	r4, [r3, #0]
 8005cd8:	b124      	cbz	r4, 8005ce4 <iprintf+0x14>
 8005cda:	69a3      	ldr	r3, [r4, #24]
 8005cdc:	b913      	cbnz	r3, 8005ce4 <iprintf+0x14>
 8005cde:	4620      	mov	r0, r4
 8005ce0:	f002 f890 	bl	8007e04 <__sinit>
 8005ce4:	ab05      	add	r3, sp, #20
 8005ce6:	9a04      	ldr	r2, [sp, #16]
 8005ce8:	68a1      	ldr	r1, [r4, #8]
 8005cea:	9301      	str	r3, [sp, #4]
 8005cec:	4620      	mov	r0, r4
 8005cee:	f003 fb5f 	bl	80093b0 <_vfiprintf_r>
 8005cf2:	b002      	add	sp, #8
 8005cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cf8:	b004      	add	sp, #16
 8005cfa:	4770      	bx	lr
 8005cfc:	2000000c 	.word	0x2000000c

08005d00 <_puts_r>:
 8005d00:	b570      	push	{r4, r5, r6, lr}
 8005d02:	460e      	mov	r6, r1
 8005d04:	4605      	mov	r5, r0
 8005d06:	b118      	cbz	r0, 8005d10 <_puts_r+0x10>
 8005d08:	6983      	ldr	r3, [r0, #24]
 8005d0a:	b90b      	cbnz	r3, 8005d10 <_puts_r+0x10>
 8005d0c:	f002 f87a 	bl	8007e04 <__sinit>
 8005d10:	69ab      	ldr	r3, [r5, #24]
 8005d12:	68ac      	ldr	r4, [r5, #8]
 8005d14:	b913      	cbnz	r3, 8005d1c <_puts_r+0x1c>
 8005d16:	4628      	mov	r0, r5
 8005d18:	f002 f874 	bl	8007e04 <__sinit>
 8005d1c:	4b2c      	ldr	r3, [pc, #176]	; (8005dd0 <_puts_r+0xd0>)
 8005d1e:	429c      	cmp	r4, r3
 8005d20:	d120      	bne.n	8005d64 <_puts_r+0x64>
 8005d22:	686c      	ldr	r4, [r5, #4]
 8005d24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d26:	07db      	lsls	r3, r3, #31
 8005d28:	d405      	bmi.n	8005d36 <_puts_r+0x36>
 8005d2a:	89a3      	ldrh	r3, [r4, #12]
 8005d2c:	0598      	lsls	r0, r3, #22
 8005d2e:	d402      	bmi.n	8005d36 <_puts_r+0x36>
 8005d30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d32:	f002 fc78 	bl	8008626 <__retarget_lock_acquire_recursive>
 8005d36:	89a3      	ldrh	r3, [r4, #12]
 8005d38:	0719      	lsls	r1, r3, #28
 8005d3a:	d51d      	bpl.n	8005d78 <_puts_r+0x78>
 8005d3c:	6923      	ldr	r3, [r4, #16]
 8005d3e:	b1db      	cbz	r3, 8005d78 <_puts_r+0x78>
 8005d40:	3e01      	subs	r6, #1
 8005d42:	68a3      	ldr	r3, [r4, #8]
 8005d44:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	60a3      	str	r3, [r4, #8]
 8005d4c:	bb39      	cbnz	r1, 8005d9e <_puts_r+0x9e>
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	da38      	bge.n	8005dc4 <_puts_r+0xc4>
 8005d52:	4622      	mov	r2, r4
 8005d54:	210a      	movs	r1, #10
 8005d56:	4628      	mov	r0, r5
 8005d58:	f001 f800 	bl	8006d5c <__swbuf_r>
 8005d5c:	3001      	adds	r0, #1
 8005d5e:	d011      	beq.n	8005d84 <_puts_r+0x84>
 8005d60:	250a      	movs	r5, #10
 8005d62:	e011      	b.n	8005d88 <_puts_r+0x88>
 8005d64:	4b1b      	ldr	r3, [pc, #108]	; (8005dd4 <_puts_r+0xd4>)
 8005d66:	429c      	cmp	r4, r3
 8005d68:	d101      	bne.n	8005d6e <_puts_r+0x6e>
 8005d6a:	68ac      	ldr	r4, [r5, #8]
 8005d6c:	e7da      	b.n	8005d24 <_puts_r+0x24>
 8005d6e:	4b1a      	ldr	r3, [pc, #104]	; (8005dd8 <_puts_r+0xd8>)
 8005d70:	429c      	cmp	r4, r3
 8005d72:	bf08      	it	eq
 8005d74:	68ec      	ldreq	r4, [r5, #12]
 8005d76:	e7d5      	b.n	8005d24 <_puts_r+0x24>
 8005d78:	4621      	mov	r1, r4
 8005d7a:	4628      	mov	r0, r5
 8005d7c:	f001 f840 	bl	8006e00 <__swsetup_r>
 8005d80:	2800      	cmp	r0, #0
 8005d82:	d0dd      	beq.n	8005d40 <_puts_r+0x40>
 8005d84:	f04f 35ff 	mov.w	r5, #4294967295
 8005d88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d8a:	07da      	lsls	r2, r3, #31
 8005d8c:	d405      	bmi.n	8005d9a <_puts_r+0x9a>
 8005d8e:	89a3      	ldrh	r3, [r4, #12]
 8005d90:	059b      	lsls	r3, r3, #22
 8005d92:	d402      	bmi.n	8005d9a <_puts_r+0x9a>
 8005d94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d96:	f002 fc47 	bl	8008628 <__retarget_lock_release_recursive>
 8005d9a:	4628      	mov	r0, r5
 8005d9c:	bd70      	pop	{r4, r5, r6, pc}
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	da04      	bge.n	8005dac <_puts_r+0xac>
 8005da2:	69a2      	ldr	r2, [r4, #24]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	dc06      	bgt.n	8005db6 <_puts_r+0xb6>
 8005da8:	290a      	cmp	r1, #10
 8005daa:	d004      	beq.n	8005db6 <_puts_r+0xb6>
 8005dac:	6823      	ldr	r3, [r4, #0]
 8005dae:	1c5a      	adds	r2, r3, #1
 8005db0:	6022      	str	r2, [r4, #0]
 8005db2:	7019      	strb	r1, [r3, #0]
 8005db4:	e7c5      	b.n	8005d42 <_puts_r+0x42>
 8005db6:	4622      	mov	r2, r4
 8005db8:	4628      	mov	r0, r5
 8005dba:	f000 ffcf 	bl	8006d5c <__swbuf_r>
 8005dbe:	3001      	adds	r0, #1
 8005dc0:	d1bf      	bne.n	8005d42 <_puts_r+0x42>
 8005dc2:	e7df      	b.n	8005d84 <_puts_r+0x84>
 8005dc4:	6823      	ldr	r3, [r4, #0]
 8005dc6:	250a      	movs	r5, #10
 8005dc8:	1c5a      	adds	r2, r3, #1
 8005dca:	6022      	str	r2, [r4, #0]
 8005dcc:	701d      	strb	r5, [r3, #0]
 8005dce:	e7db      	b.n	8005d88 <_puts_r+0x88>
 8005dd0:	08009e78 	.word	0x08009e78
 8005dd4:	08009e98 	.word	0x08009e98
 8005dd8:	08009e58 	.word	0x08009e58

08005ddc <puts>:
 8005ddc:	4b02      	ldr	r3, [pc, #8]	; (8005de8 <puts+0xc>)
 8005dde:	4601      	mov	r1, r0
 8005de0:	6818      	ldr	r0, [r3, #0]
 8005de2:	f7ff bf8d 	b.w	8005d00 <_puts_r>
 8005de6:	bf00      	nop
 8005de8:	2000000c 	.word	0x2000000c

08005dec <_sbrk_r>:
 8005dec:	b538      	push	{r3, r4, r5, lr}
 8005dee:	4d06      	ldr	r5, [pc, #24]	; (8005e08 <_sbrk_r+0x1c>)
 8005df0:	2300      	movs	r3, #0
 8005df2:	4604      	mov	r4, r0
 8005df4:	4608      	mov	r0, r1
 8005df6:	602b      	str	r3, [r5, #0]
 8005df8:	f7fb fdf2 	bl	80019e0 <_sbrk>
 8005dfc:	1c43      	adds	r3, r0, #1
 8005dfe:	d102      	bne.n	8005e06 <_sbrk_r+0x1a>
 8005e00:	682b      	ldr	r3, [r5, #0]
 8005e02:	b103      	cbz	r3, 8005e06 <_sbrk_r+0x1a>
 8005e04:	6023      	str	r3, [r4, #0]
 8005e06:	bd38      	pop	{r3, r4, r5, pc}
 8005e08:	20001d28 	.word	0x20001d28

08005e0c <setbuf>:
 8005e0c:	2900      	cmp	r1, #0
 8005e0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e12:	bf0c      	ite	eq
 8005e14:	2202      	moveq	r2, #2
 8005e16:	2200      	movne	r2, #0
 8005e18:	f000 b800 	b.w	8005e1c <setvbuf>

08005e1c <setvbuf>:
 8005e1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005e20:	461d      	mov	r5, r3
 8005e22:	4b5d      	ldr	r3, [pc, #372]	; (8005f98 <setvbuf+0x17c>)
 8005e24:	681f      	ldr	r7, [r3, #0]
 8005e26:	4604      	mov	r4, r0
 8005e28:	460e      	mov	r6, r1
 8005e2a:	4690      	mov	r8, r2
 8005e2c:	b127      	cbz	r7, 8005e38 <setvbuf+0x1c>
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	b913      	cbnz	r3, 8005e38 <setvbuf+0x1c>
 8005e32:	4638      	mov	r0, r7
 8005e34:	f001 ffe6 	bl	8007e04 <__sinit>
 8005e38:	4b58      	ldr	r3, [pc, #352]	; (8005f9c <setvbuf+0x180>)
 8005e3a:	429c      	cmp	r4, r3
 8005e3c:	d167      	bne.n	8005f0e <setvbuf+0xf2>
 8005e3e:	687c      	ldr	r4, [r7, #4]
 8005e40:	f1b8 0f02 	cmp.w	r8, #2
 8005e44:	d006      	beq.n	8005e54 <setvbuf+0x38>
 8005e46:	f1b8 0f01 	cmp.w	r8, #1
 8005e4a:	f200 809f 	bhi.w	8005f8c <setvbuf+0x170>
 8005e4e:	2d00      	cmp	r5, #0
 8005e50:	f2c0 809c 	blt.w	8005f8c <setvbuf+0x170>
 8005e54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e56:	07db      	lsls	r3, r3, #31
 8005e58:	d405      	bmi.n	8005e66 <setvbuf+0x4a>
 8005e5a:	89a3      	ldrh	r3, [r4, #12]
 8005e5c:	0598      	lsls	r0, r3, #22
 8005e5e:	d402      	bmi.n	8005e66 <setvbuf+0x4a>
 8005e60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e62:	f002 fbe0 	bl	8008626 <__retarget_lock_acquire_recursive>
 8005e66:	4621      	mov	r1, r4
 8005e68:	4638      	mov	r0, r7
 8005e6a:	f001 ff37 	bl	8007cdc <_fflush_r>
 8005e6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e70:	b141      	cbz	r1, 8005e84 <setvbuf+0x68>
 8005e72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e76:	4299      	cmp	r1, r3
 8005e78:	d002      	beq.n	8005e80 <setvbuf+0x64>
 8005e7a:	4638      	mov	r0, r7
 8005e7c:	f7ff f804 	bl	8004e88 <_free_r>
 8005e80:	2300      	movs	r3, #0
 8005e82:	6363      	str	r3, [r4, #52]	; 0x34
 8005e84:	2300      	movs	r3, #0
 8005e86:	61a3      	str	r3, [r4, #24]
 8005e88:	6063      	str	r3, [r4, #4]
 8005e8a:	89a3      	ldrh	r3, [r4, #12]
 8005e8c:	0619      	lsls	r1, r3, #24
 8005e8e:	d503      	bpl.n	8005e98 <setvbuf+0x7c>
 8005e90:	6921      	ldr	r1, [r4, #16]
 8005e92:	4638      	mov	r0, r7
 8005e94:	f7fe fff8 	bl	8004e88 <_free_r>
 8005e98:	89a3      	ldrh	r3, [r4, #12]
 8005e9a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005e9e:	f023 0303 	bic.w	r3, r3, #3
 8005ea2:	f1b8 0f02 	cmp.w	r8, #2
 8005ea6:	81a3      	strh	r3, [r4, #12]
 8005ea8:	d06c      	beq.n	8005f84 <setvbuf+0x168>
 8005eaa:	ab01      	add	r3, sp, #4
 8005eac:	466a      	mov	r2, sp
 8005eae:	4621      	mov	r1, r4
 8005eb0:	4638      	mov	r0, r7
 8005eb2:	f002 fbba 	bl	800862a <__swhatbuf_r>
 8005eb6:	89a3      	ldrh	r3, [r4, #12]
 8005eb8:	4318      	orrs	r0, r3
 8005eba:	81a0      	strh	r0, [r4, #12]
 8005ebc:	2d00      	cmp	r5, #0
 8005ebe:	d130      	bne.n	8005f22 <setvbuf+0x106>
 8005ec0:	9d00      	ldr	r5, [sp, #0]
 8005ec2:	4628      	mov	r0, r5
 8005ec4:	f7fe ffb2 	bl	8004e2c <malloc>
 8005ec8:	4606      	mov	r6, r0
 8005eca:	2800      	cmp	r0, #0
 8005ecc:	d155      	bne.n	8005f7a <setvbuf+0x15e>
 8005ece:	f8dd 9000 	ldr.w	r9, [sp]
 8005ed2:	45a9      	cmp	r9, r5
 8005ed4:	d14a      	bne.n	8005f6c <setvbuf+0x150>
 8005ed6:	f04f 35ff 	mov.w	r5, #4294967295
 8005eda:	2200      	movs	r2, #0
 8005edc:	60a2      	str	r2, [r4, #8]
 8005ede:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8005ee2:	6022      	str	r2, [r4, #0]
 8005ee4:	6122      	str	r2, [r4, #16]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005eec:	6162      	str	r2, [r4, #20]
 8005eee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005ef0:	f043 0302 	orr.w	r3, r3, #2
 8005ef4:	07d2      	lsls	r2, r2, #31
 8005ef6:	81a3      	strh	r3, [r4, #12]
 8005ef8:	d405      	bmi.n	8005f06 <setvbuf+0xea>
 8005efa:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005efe:	d102      	bne.n	8005f06 <setvbuf+0xea>
 8005f00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f02:	f002 fb91 	bl	8008628 <__retarget_lock_release_recursive>
 8005f06:	4628      	mov	r0, r5
 8005f08:	b003      	add	sp, #12
 8005f0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f0e:	4b24      	ldr	r3, [pc, #144]	; (8005fa0 <setvbuf+0x184>)
 8005f10:	429c      	cmp	r4, r3
 8005f12:	d101      	bne.n	8005f18 <setvbuf+0xfc>
 8005f14:	68bc      	ldr	r4, [r7, #8]
 8005f16:	e793      	b.n	8005e40 <setvbuf+0x24>
 8005f18:	4b22      	ldr	r3, [pc, #136]	; (8005fa4 <setvbuf+0x188>)
 8005f1a:	429c      	cmp	r4, r3
 8005f1c:	bf08      	it	eq
 8005f1e:	68fc      	ldreq	r4, [r7, #12]
 8005f20:	e78e      	b.n	8005e40 <setvbuf+0x24>
 8005f22:	2e00      	cmp	r6, #0
 8005f24:	d0cd      	beq.n	8005ec2 <setvbuf+0xa6>
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	b913      	cbnz	r3, 8005f30 <setvbuf+0x114>
 8005f2a:	4638      	mov	r0, r7
 8005f2c:	f001 ff6a 	bl	8007e04 <__sinit>
 8005f30:	f1b8 0f01 	cmp.w	r8, #1
 8005f34:	bf08      	it	eq
 8005f36:	89a3      	ldrheq	r3, [r4, #12]
 8005f38:	6026      	str	r6, [r4, #0]
 8005f3a:	bf04      	itt	eq
 8005f3c:	f043 0301 	orreq.w	r3, r3, #1
 8005f40:	81a3      	strheq	r3, [r4, #12]
 8005f42:	89a2      	ldrh	r2, [r4, #12]
 8005f44:	f012 0308 	ands.w	r3, r2, #8
 8005f48:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005f4c:	d01c      	beq.n	8005f88 <setvbuf+0x16c>
 8005f4e:	07d3      	lsls	r3, r2, #31
 8005f50:	bf41      	itttt	mi
 8005f52:	2300      	movmi	r3, #0
 8005f54:	426d      	negmi	r5, r5
 8005f56:	60a3      	strmi	r3, [r4, #8]
 8005f58:	61a5      	strmi	r5, [r4, #24]
 8005f5a:	bf58      	it	pl
 8005f5c:	60a5      	strpl	r5, [r4, #8]
 8005f5e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8005f60:	f015 0501 	ands.w	r5, r5, #1
 8005f64:	d115      	bne.n	8005f92 <setvbuf+0x176>
 8005f66:	f412 7f00 	tst.w	r2, #512	; 0x200
 8005f6a:	e7c8      	b.n	8005efe <setvbuf+0xe2>
 8005f6c:	4648      	mov	r0, r9
 8005f6e:	f7fe ff5d 	bl	8004e2c <malloc>
 8005f72:	4606      	mov	r6, r0
 8005f74:	2800      	cmp	r0, #0
 8005f76:	d0ae      	beq.n	8005ed6 <setvbuf+0xba>
 8005f78:	464d      	mov	r5, r9
 8005f7a:	89a3      	ldrh	r3, [r4, #12]
 8005f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f80:	81a3      	strh	r3, [r4, #12]
 8005f82:	e7d0      	b.n	8005f26 <setvbuf+0x10a>
 8005f84:	2500      	movs	r5, #0
 8005f86:	e7a8      	b.n	8005eda <setvbuf+0xbe>
 8005f88:	60a3      	str	r3, [r4, #8]
 8005f8a:	e7e8      	b.n	8005f5e <setvbuf+0x142>
 8005f8c:	f04f 35ff 	mov.w	r5, #4294967295
 8005f90:	e7b9      	b.n	8005f06 <setvbuf+0xea>
 8005f92:	2500      	movs	r5, #0
 8005f94:	e7b7      	b.n	8005f06 <setvbuf+0xea>
 8005f96:	bf00      	nop
 8005f98:	2000000c 	.word	0x2000000c
 8005f9c:	08009e78 	.word	0x08009e78
 8005fa0:	08009e98 	.word	0x08009e98
 8005fa4:	08009e58 	.word	0x08009e58

08005fa8 <nanf>:
 8005fa8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005fb0 <nanf+0x8>
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	7fc00000 	.word	0x7fc00000

08005fb4 <siprintf>:
 8005fb4:	b40e      	push	{r1, r2, r3}
 8005fb6:	b500      	push	{lr}
 8005fb8:	b09c      	sub	sp, #112	; 0x70
 8005fba:	ab1d      	add	r3, sp, #116	; 0x74
 8005fbc:	9002      	str	r0, [sp, #8]
 8005fbe:	9006      	str	r0, [sp, #24]
 8005fc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005fc4:	4809      	ldr	r0, [pc, #36]	; (8005fec <siprintf+0x38>)
 8005fc6:	9107      	str	r1, [sp, #28]
 8005fc8:	9104      	str	r1, [sp, #16]
 8005fca:	4909      	ldr	r1, [pc, #36]	; (8005ff0 <siprintf+0x3c>)
 8005fcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fd0:	9105      	str	r1, [sp, #20]
 8005fd2:	6800      	ldr	r0, [r0, #0]
 8005fd4:	9301      	str	r3, [sp, #4]
 8005fd6:	a902      	add	r1, sp, #8
 8005fd8:	f003 f8c0 	bl	800915c <_svfiprintf_r>
 8005fdc:	9b02      	ldr	r3, [sp, #8]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	701a      	strb	r2, [r3, #0]
 8005fe2:	b01c      	add	sp, #112	; 0x70
 8005fe4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005fe8:	b003      	add	sp, #12
 8005fea:	4770      	bx	lr
 8005fec:	2000000c 	.word	0x2000000c
 8005ff0:	ffff0208 	.word	0xffff0208

08005ff4 <sulp>:
 8005ff4:	b570      	push	{r4, r5, r6, lr}
 8005ff6:	4604      	mov	r4, r0
 8005ff8:	460d      	mov	r5, r1
 8005ffa:	ec45 4b10 	vmov	d0, r4, r5
 8005ffe:	4616      	mov	r6, r2
 8006000:	f002 ff02 	bl	8008e08 <__ulp>
 8006004:	ec51 0b10 	vmov	r0, r1, d0
 8006008:	b17e      	cbz	r6, 800602a <sulp+0x36>
 800600a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800600e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006012:	2b00      	cmp	r3, #0
 8006014:	dd09      	ble.n	800602a <sulp+0x36>
 8006016:	051b      	lsls	r3, r3, #20
 8006018:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800601c:	2400      	movs	r4, #0
 800601e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006022:	4622      	mov	r2, r4
 8006024:	462b      	mov	r3, r5
 8006026:	f7fa fae7 	bl	80005f8 <__aeabi_dmul>
 800602a:	bd70      	pop	{r4, r5, r6, pc}
 800602c:	0000      	movs	r0, r0
	...

08006030 <_strtod_l>:
 8006030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006034:	b0a3      	sub	sp, #140	; 0x8c
 8006036:	461f      	mov	r7, r3
 8006038:	2300      	movs	r3, #0
 800603a:	931e      	str	r3, [sp, #120]	; 0x78
 800603c:	4ba4      	ldr	r3, [pc, #656]	; (80062d0 <_strtod_l+0x2a0>)
 800603e:	9219      	str	r2, [sp, #100]	; 0x64
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	9307      	str	r3, [sp, #28]
 8006044:	4604      	mov	r4, r0
 8006046:	4618      	mov	r0, r3
 8006048:	4688      	mov	r8, r1
 800604a:	f7fa f8c1 	bl	80001d0 <strlen>
 800604e:	f04f 0a00 	mov.w	sl, #0
 8006052:	4605      	mov	r5, r0
 8006054:	f04f 0b00 	mov.w	fp, #0
 8006058:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800605c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800605e:	781a      	ldrb	r2, [r3, #0]
 8006060:	2a2b      	cmp	r2, #43	; 0x2b
 8006062:	d04c      	beq.n	80060fe <_strtod_l+0xce>
 8006064:	d839      	bhi.n	80060da <_strtod_l+0xaa>
 8006066:	2a0d      	cmp	r2, #13
 8006068:	d832      	bhi.n	80060d0 <_strtod_l+0xa0>
 800606a:	2a08      	cmp	r2, #8
 800606c:	d832      	bhi.n	80060d4 <_strtod_l+0xa4>
 800606e:	2a00      	cmp	r2, #0
 8006070:	d03c      	beq.n	80060ec <_strtod_l+0xbc>
 8006072:	2300      	movs	r3, #0
 8006074:	930e      	str	r3, [sp, #56]	; 0x38
 8006076:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8006078:	7833      	ldrb	r3, [r6, #0]
 800607a:	2b30      	cmp	r3, #48	; 0x30
 800607c:	f040 80b4 	bne.w	80061e8 <_strtod_l+0x1b8>
 8006080:	7873      	ldrb	r3, [r6, #1]
 8006082:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006086:	2b58      	cmp	r3, #88	; 0x58
 8006088:	d16c      	bne.n	8006164 <_strtod_l+0x134>
 800608a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800608c:	9301      	str	r3, [sp, #4]
 800608e:	ab1e      	add	r3, sp, #120	; 0x78
 8006090:	9702      	str	r7, [sp, #8]
 8006092:	9300      	str	r3, [sp, #0]
 8006094:	4a8f      	ldr	r2, [pc, #572]	; (80062d4 <_strtod_l+0x2a4>)
 8006096:	ab1f      	add	r3, sp, #124	; 0x7c
 8006098:	a91d      	add	r1, sp, #116	; 0x74
 800609a:	4620      	mov	r0, r4
 800609c:	f001 ffb6 	bl	800800c <__gethex>
 80060a0:	f010 0707 	ands.w	r7, r0, #7
 80060a4:	4605      	mov	r5, r0
 80060a6:	d005      	beq.n	80060b4 <_strtod_l+0x84>
 80060a8:	2f06      	cmp	r7, #6
 80060aa:	d12a      	bne.n	8006102 <_strtod_l+0xd2>
 80060ac:	3601      	adds	r6, #1
 80060ae:	2300      	movs	r3, #0
 80060b0:	961d      	str	r6, [sp, #116]	; 0x74
 80060b2:	930e      	str	r3, [sp, #56]	; 0x38
 80060b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	f040 8596 	bne.w	8006be8 <_strtod_l+0xbb8>
 80060bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060be:	b1db      	cbz	r3, 80060f8 <_strtod_l+0xc8>
 80060c0:	4652      	mov	r2, sl
 80060c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80060c6:	ec43 2b10 	vmov	d0, r2, r3
 80060ca:	b023      	add	sp, #140	; 0x8c
 80060cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060d0:	2a20      	cmp	r2, #32
 80060d2:	d1ce      	bne.n	8006072 <_strtod_l+0x42>
 80060d4:	3301      	adds	r3, #1
 80060d6:	931d      	str	r3, [sp, #116]	; 0x74
 80060d8:	e7c0      	b.n	800605c <_strtod_l+0x2c>
 80060da:	2a2d      	cmp	r2, #45	; 0x2d
 80060dc:	d1c9      	bne.n	8006072 <_strtod_l+0x42>
 80060de:	2201      	movs	r2, #1
 80060e0:	920e      	str	r2, [sp, #56]	; 0x38
 80060e2:	1c5a      	adds	r2, r3, #1
 80060e4:	921d      	str	r2, [sp, #116]	; 0x74
 80060e6:	785b      	ldrb	r3, [r3, #1]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d1c4      	bne.n	8006076 <_strtod_l+0x46>
 80060ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80060ee:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	f040 8576 	bne.w	8006be4 <_strtod_l+0xbb4>
 80060f8:	4652      	mov	r2, sl
 80060fa:	465b      	mov	r3, fp
 80060fc:	e7e3      	b.n	80060c6 <_strtod_l+0x96>
 80060fe:	2200      	movs	r2, #0
 8006100:	e7ee      	b.n	80060e0 <_strtod_l+0xb0>
 8006102:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006104:	b13a      	cbz	r2, 8006116 <_strtod_l+0xe6>
 8006106:	2135      	movs	r1, #53	; 0x35
 8006108:	a820      	add	r0, sp, #128	; 0x80
 800610a:	f002 ff88 	bl	800901e <__copybits>
 800610e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006110:	4620      	mov	r0, r4
 8006112:	f002 fb4d 	bl	80087b0 <_Bfree>
 8006116:	3f01      	subs	r7, #1
 8006118:	2f05      	cmp	r7, #5
 800611a:	d807      	bhi.n	800612c <_strtod_l+0xfc>
 800611c:	e8df f007 	tbb	[pc, r7]
 8006120:	1d180b0e 	.word	0x1d180b0e
 8006124:	030e      	.short	0x030e
 8006126:	f04f 0b00 	mov.w	fp, #0
 800612a:	46da      	mov	sl, fp
 800612c:	0728      	lsls	r0, r5, #28
 800612e:	d5c1      	bpl.n	80060b4 <_strtod_l+0x84>
 8006130:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006134:	e7be      	b.n	80060b4 <_strtod_l+0x84>
 8006136:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800613a:	e7f7      	b.n	800612c <_strtod_l+0xfc>
 800613c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8006140:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006142:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006146:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800614a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800614e:	e7ed      	b.n	800612c <_strtod_l+0xfc>
 8006150:	f8df b184 	ldr.w	fp, [pc, #388]	; 80062d8 <_strtod_l+0x2a8>
 8006154:	f04f 0a00 	mov.w	sl, #0
 8006158:	e7e8      	b.n	800612c <_strtod_l+0xfc>
 800615a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800615e:	f04f 3aff 	mov.w	sl, #4294967295
 8006162:	e7e3      	b.n	800612c <_strtod_l+0xfc>
 8006164:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006166:	1c5a      	adds	r2, r3, #1
 8006168:	921d      	str	r2, [sp, #116]	; 0x74
 800616a:	785b      	ldrb	r3, [r3, #1]
 800616c:	2b30      	cmp	r3, #48	; 0x30
 800616e:	d0f9      	beq.n	8006164 <_strtod_l+0x134>
 8006170:	2b00      	cmp	r3, #0
 8006172:	d09f      	beq.n	80060b4 <_strtod_l+0x84>
 8006174:	2301      	movs	r3, #1
 8006176:	f04f 0900 	mov.w	r9, #0
 800617a:	9304      	str	r3, [sp, #16]
 800617c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800617e:	930a      	str	r3, [sp, #40]	; 0x28
 8006180:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006184:	464f      	mov	r7, r9
 8006186:	220a      	movs	r2, #10
 8006188:	981d      	ldr	r0, [sp, #116]	; 0x74
 800618a:	7806      	ldrb	r6, [r0, #0]
 800618c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006190:	b2d9      	uxtb	r1, r3
 8006192:	2909      	cmp	r1, #9
 8006194:	d92a      	bls.n	80061ec <_strtod_l+0x1bc>
 8006196:	9907      	ldr	r1, [sp, #28]
 8006198:	462a      	mov	r2, r5
 800619a:	f003 fa84 	bl	80096a6 <strncmp>
 800619e:	b398      	cbz	r0, 8006208 <_strtod_l+0x1d8>
 80061a0:	2000      	movs	r0, #0
 80061a2:	4633      	mov	r3, r6
 80061a4:	463d      	mov	r5, r7
 80061a6:	9007      	str	r0, [sp, #28]
 80061a8:	4602      	mov	r2, r0
 80061aa:	2b65      	cmp	r3, #101	; 0x65
 80061ac:	d001      	beq.n	80061b2 <_strtod_l+0x182>
 80061ae:	2b45      	cmp	r3, #69	; 0x45
 80061b0:	d118      	bne.n	80061e4 <_strtod_l+0x1b4>
 80061b2:	b91d      	cbnz	r5, 80061bc <_strtod_l+0x18c>
 80061b4:	9b04      	ldr	r3, [sp, #16]
 80061b6:	4303      	orrs	r3, r0
 80061b8:	d098      	beq.n	80060ec <_strtod_l+0xbc>
 80061ba:	2500      	movs	r5, #0
 80061bc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80061c0:	f108 0301 	add.w	r3, r8, #1
 80061c4:	931d      	str	r3, [sp, #116]	; 0x74
 80061c6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80061ca:	2b2b      	cmp	r3, #43	; 0x2b
 80061cc:	d075      	beq.n	80062ba <_strtod_l+0x28a>
 80061ce:	2b2d      	cmp	r3, #45	; 0x2d
 80061d0:	d07b      	beq.n	80062ca <_strtod_l+0x29a>
 80061d2:	f04f 0c00 	mov.w	ip, #0
 80061d6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80061da:	2909      	cmp	r1, #9
 80061dc:	f240 8082 	bls.w	80062e4 <_strtod_l+0x2b4>
 80061e0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80061e4:	2600      	movs	r6, #0
 80061e6:	e09d      	b.n	8006324 <_strtod_l+0x2f4>
 80061e8:	2300      	movs	r3, #0
 80061ea:	e7c4      	b.n	8006176 <_strtod_l+0x146>
 80061ec:	2f08      	cmp	r7, #8
 80061ee:	bfd8      	it	le
 80061f0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80061f2:	f100 0001 	add.w	r0, r0, #1
 80061f6:	bfda      	itte	le
 80061f8:	fb02 3301 	mlale	r3, r2, r1, r3
 80061fc:	9309      	strle	r3, [sp, #36]	; 0x24
 80061fe:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006202:	3701      	adds	r7, #1
 8006204:	901d      	str	r0, [sp, #116]	; 0x74
 8006206:	e7bf      	b.n	8006188 <_strtod_l+0x158>
 8006208:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800620a:	195a      	adds	r2, r3, r5
 800620c:	921d      	str	r2, [sp, #116]	; 0x74
 800620e:	5d5b      	ldrb	r3, [r3, r5]
 8006210:	2f00      	cmp	r7, #0
 8006212:	d037      	beq.n	8006284 <_strtod_l+0x254>
 8006214:	9007      	str	r0, [sp, #28]
 8006216:	463d      	mov	r5, r7
 8006218:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800621c:	2a09      	cmp	r2, #9
 800621e:	d912      	bls.n	8006246 <_strtod_l+0x216>
 8006220:	2201      	movs	r2, #1
 8006222:	e7c2      	b.n	80061aa <_strtod_l+0x17a>
 8006224:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006226:	1c5a      	adds	r2, r3, #1
 8006228:	921d      	str	r2, [sp, #116]	; 0x74
 800622a:	785b      	ldrb	r3, [r3, #1]
 800622c:	3001      	adds	r0, #1
 800622e:	2b30      	cmp	r3, #48	; 0x30
 8006230:	d0f8      	beq.n	8006224 <_strtod_l+0x1f4>
 8006232:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006236:	2a08      	cmp	r2, #8
 8006238:	f200 84db 	bhi.w	8006bf2 <_strtod_l+0xbc2>
 800623c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800623e:	9007      	str	r0, [sp, #28]
 8006240:	2000      	movs	r0, #0
 8006242:	920a      	str	r2, [sp, #40]	; 0x28
 8006244:	4605      	mov	r5, r0
 8006246:	3b30      	subs	r3, #48	; 0x30
 8006248:	f100 0201 	add.w	r2, r0, #1
 800624c:	d014      	beq.n	8006278 <_strtod_l+0x248>
 800624e:	9907      	ldr	r1, [sp, #28]
 8006250:	4411      	add	r1, r2
 8006252:	9107      	str	r1, [sp, #28]
 8006254:	462a      	mov	r2, r5
 8006256:	eb00 0e05 	add.w	lr, r0, r5
 800625a:	210a      	movs	r1, #10
 800625c:	4572      	cmp	r2, lr
 800625e:	d113      	bne.n	8006288 <_strtod_l+0x258>
 8006260:	182a      	adds	r2, r5, r0
 8006262:	2a08      	cmp	r2, #8
 8006264:	f105 0501 	add.w	r5, r5, #1
 8006268:	4405      	add	r5, r0
 800626a:	dc1c      	bgt.n	80062a6 <_strtod_l+0x276>
 800626c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800626e:	220a      	movs	r2, #10
 8006270:	fb02 3301 	mla	r3, r2, r1, r3
 8006274:	9309      	str	r3, [sp, #36]	; 0x24
 8006276:	2200      	movs	r2, #0
 8006278:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800627a:	1c59      	adds	r1, r3, #1
 800627c:	911d      	str	r1, [sp, #116]	; 0x74
 800627e:	785b      	ldrb	r3, [r3, #1]
 8006280:	4610      	mov	r0, r2
 8006282:	e7c9      	b.n	8006218 <_strtod_l+0x1e8>
 8006284:	4638      	mov	r0, r7
 8006286:	e7d2      	b.n	800622e <_strtod_l+0x1fe>
 8006288:	2a08      	cmp	r2, #8
 800628a:	dc04      	bgt.n	8006296 <_strtod_l+0x266>
 800628c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800628e:	434e      	muls	r6, r1
 8006290:	9609      	str	r6, [sp, #36]	; 0x24
 8006292:	3201      	adds	r2, #1
 8006294:	e7e2      	b.n	800625c <_strtod_l+0x22c>
 8006296:	f102 0c01 	add.w	ip, r2, #1
 800629a:	f1bc 0f10 	cmp.w	ip, #16
 800629e:	bfd8      	it	le
 80062a0:	fb01 f909 	mulle.w	r9, r1, r9
 80062a4:	e7f5      	b.n	8006292 <_strtod_l+0x262>
 80062a6:	2d10      	cmp	r5, #16
 80062a8:	bfdc      	itt	le
 80062aa:	220a      	movle	r2, #10
 80062ac:	fb02 3909 	mlale	r9, r2, r9, r3
 80062b0:	e7e1      	b.n	8006276 <_strtod_l+0x246>
 80062b2:	2300      	movs	r3, #0
 80062b4:	9307      	str	r3, [sp, #28]
 80062b6:	2201      	movs	r2, #1
 80062b8:	e77c      	b.n	80061b4 <_strtod_l+0x184>
 80062ba:	f04f 0c00 	mov.w	ip, #0
 80062be:	f108 0302 	add.w	r3, r8, #2
 80062c2:	931d      	str	r3, [sp, #116]	; 0x74
 80062c4:	f898 3002 	ldrb.w	r3, [r8, #2]
 80062c8:	e785      	b.n	80061d6 <_strtod_l+0x1a6>
 80062ca:	f04f 0c01 	mov.w	ip, #1
 80062ce:	e7f6      	b.n	80062be <_strtod_l+0x28e>
 80062d0:	08009f24 	.word	0x08009f24
 80062d4:	08009c70 	.word	0x08009c70
 80062d8:	7ff00000 	.word	0x7ff00000
 80062dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80062de:	1c59      	adds	r1, r3, #1
 80062e0:	911d      	str	r1, [sp, #116]	; 0x74
 80062e2:	785b      	ldrb	r3, [r3, #1]
 80062e4:	2b30      	cmp	r3, #48	; 0x30
 80062e6:	d0f9      	beq.n	80062dc <_strtod_l+0x2ac>
 80062e8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80062ec:	2908      	cmp	r1, #8
 80062ee:	f63f af79 	bhi.w	80061e4 <_strtod_l+0x1b4>
 80062f2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80062f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80062f8:	9308      	str	r3, [sp, #32]
 80062fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80062fc:	1c59      	adds	r1, r3, #1
 80062fe:	911d      	str	r1, [sp, #116]	; 0x74
 8006300:	785b      	ldrb	r3, [r3, #1]
 8006302:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8006306:	2e09      	cmp	r6, #9
 8006308:	d937      	bls.n	800637a <_strtod_l+0x34a>
 800630a:	9e08      	ldr	r6, [sp, #32]
 800630c:	1b89      	subs	r1, r1, r6
 800630e:	2908      	cmp	r1, #8
 8006310:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006314:	dc02      	bgt.n	800631c <_strtod_l+0x2ec>
 8006316:	4576      	cmp	r6, lr
 8006318:	bfa8      	it	ge
 800631a:	4676      	movge	r6, lr
 800631c:	f1bc 0f00 	cmp.w	ip, #0
 8006320:	d000      	beq.n	8006324 <_strtod_l+0x2f4>
 8006322:	4276      	negs	r6, r6
 8006324:	2d00      	cmp	r5, #0
 8006326:	d14f      	bne.n	80063c8 <_strtod_l+0x398>
 8006328:	9904      	ldr	r1, [sp, #16]
 800632a:	4301      	orrs	r1, r0
 800632c:	f47f aec2 	bne.w	80060b4 <_strtod_l+0x84>
 8006330:	2a00      	cmp	r2, #0
 8006332:	f47f aedb 	bne.w	80060ec <_strtod_l+0xbc>
 8006336:	2b69      	cmp	r3, #105	; 0x69
 8006338:	d027      	beq.n	800638a <_strtod_l+0x35a>
 800633a:	dc24      	bgt.n	8006386 <_strtod_l+0x356>
 800633c:	2b49      	cmp	r3, #73	; 0x49
 800633e:	d024      	beq.n	800638a <_strtod_l+0x35a>
 8006340:	2b4e      	cmp	r3, #78	; 0x4e
 8006342:	f47f aed3 	bne.w	80060ec <_strtod_l+0xbc>
 8006346:	499e      	ldr	r1, [pc, #632]	; (80065c0 <_strtod_l+0x590>)
 8006348:	a81d      	add	r0, sp, #116	; 0x74
 800634a:	f002 f8b7 	bl	80084bc <__match>
 800634e:	2800      	cmp	r0, #0
 8006350:	f43f aecc 	beq.w	80060ec <_strtod_l+0xbc>
 8006354:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	2b28      	cmp	r3, #40	; 0x28
 800635a:	d12d      	bne.n	80063b8 <_strtod_l+0x388>
 800635c:	4999      	ldr	r1, [pc, #612]	; (80065c4 <_strtod_l+0x594>)
 800635e:	aa20      	add	r2, sp, #128	; 0x80
 8006360:	a81d      	add	r0, sp, #116	; 0x74
 8006362:	f002 f8bf 	bl	80084e4 <__hexnan>
 8006366:	2805      	cmp	r0, #5
 8006368:	d126      	bne.n	80063b8 <_strtod_l+0x388>
 800636a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800636c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8006370:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006374:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006378:	e69c      	b.n	80060b4 <_strtod_l+0x84>
 800637a:	210a      	movs	r1, #10
 800637c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8006380:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006384:	e7b9      	b.n	80062fa <_strtod_l+0x2ca>
 8006386:	2b6e      	cmp	r3, #110	; 0x6e
 8006388:	e7db      	b.n	8006342 <_strtod_l+0x312>
 800638a:	498f      	ldr	r1, [pc, #572]	; (80065c8 <_strtod_l+0x598>)
 800638c:	a81d      	add	r0, sp, #116	; 0x74
 800638e:	f002 f895 	bl	80084bc <__match>
 8006392:	2800      	cmp	r0, #0
 8006394:	f43f aeaa 	beq.w	80060ec <_strtod_l+0xbc>
 8006398:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800639a:	498c      	ldr	r1, [pc, #560]	; (80065cc <_strtod_l+0x59c>)
 800639c:	3b01      	subs	r3, #1
 800639e:	a81d      	add	r0, sp, #116	; 0x74
 80063a0:	931d      	str	r3, [sp, #116]	; 0x74
 80063a2:	f002 f88b 	bl	80084bc <__match>
 80063a6:	b910      	cbnz	r0, 80063ae <_strtod_l+0x37e>
 80063a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80063aa:	3301      	adds	r3, #1
 80063ac:	931d      	str	r3, [sp, #116]	; 0x74
 80063ae:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80065dc <_strtod_l+0x5ac>
 80063b2:	f04f 0a00 	mov.w	sl, #0
 80063b6:	e67d      	b.n	80060b4 <_strtod_l+0x84>
 80063b8:	4885      	ldr	r0, [pc, #532]	; (80065d0 <_strtod_l+0x5a0>)
 80063ba:	f003 f929 	bl	8009610 <nan>
 80063be:	ed8d 0b04 	vstr	d0, [sp, #16]
 80063c2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80063c6:	e675      	b.n	80060b4 <_strtod_l+0x84>
 80063c8:	9b07      	ldr	r3, [sp, #28]
 80063ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063cc:	1af3      	subs	r3, r6, r3
 80063ce:	2f00      	cmp	r7, #0
 80063d0:	bf08      	it	eq
 80063d2:	462f      	moveq	r7, r5
 80063d4:	2d10      	cmp	r5, #16
 80063d6:	9308      	str	r3, [sp, #32]
 80063d8:	46a8      	mov	r8, r5
 80063da:	bfa8      	it	ge
 80063dc:	f04f 0810 	movge.w	r8, #16
 80063e0:	f7fa f890 	bl	8000504 <__aeabi_ui2d>
 80063e4:	2d09      	cmp	r5, #9
 80063e6:	4682      	mov	sl, r0
 80063e8:	468b      	mov	fp, r1
 80063ea:	dd13      	ble.n	8006414 <_strtod_l+0x3e4>
 80063ec:	4b79      	ldr	r3, [pc, #484]	; (80065d4 <_strtod_l+0x5a4>)
 80063ee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80063f2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80063f6:	f7fa f8ff 	bl	80005f8 <__aeabi_dmul>
 80063fa:	4682      	mov	sl, r0
 80063fc:	4648      	mov	r0, r9
 80063fe:	468b      	mov	fp, r1
 8006400:	f7fa f880 	bl	8000504 <__aeabi_ui2d>
 8006404:	4602      	mov	r2, r0
 8006406:	460b      	mov	r3, r1
 8006408:	4650      	mov	r0, sl
 800640a:	4659      	mov	r1, fp
 800640c:	f7f9 ff3e 	bl	800028c <__adddf3>
 8006410:	4682      	mov	sl, r0
 8006412:	468b      	mov	fp, r1
 8006414:	2d0f      	cmp	r5, #15
 8006416:	dc38      	bgt.n	800648a <_strtod_l+0x45a>
 8006418:	9b08      	ldr	r3, [sp, #32]
 800641a:	2b00      	cmp	r3, #0
 800641c:	f43f ae4a 	beq.w	80060b4 <_strtod_l+0x84>
 8006420:	dd24      	ble.n	800646c <_strtod_l+0x43c>
 8006422:	2b16      	cmp	r3, #22
 8006424:	dc0b      	bgt.n	800643e <_strtod_l+0x40e>
 8006426:	4d6b      	ldr	r5, [pc, #428]	; (80065d4 <_strtod_l+0x5a4>)
 8006428:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800642c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006430:	4652      	mov	r2, sl
 8006432:	465b      	mov	r3, fp
 8006434:	f7fa f8e0 	bl	80005f8 <__aeabi_dmul>
 8006438:	4682      	mov	sl, r0
 800643a:	468b      	mov	fp, r1
 800643c:	e63a      	b.n	80060b4 <_strtod_l+0x84>
 800643e:	9a08      	ldr	r2, [sp, #32]
 8006440:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006444:	4293      	cmp	r3, r2
 8006446:	db20      	blt.n	800648a <_strtod_l+0x45a>
 8006448:	4c62      	ldr	r4, [pc, #392]	; (80065d4 <_strtod_l+0x5a4>)
 800644a:	f1c5 050f 	rsb	r5, r5, #15
 800644e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006452:	4652      	mov	r2, sl
 8006454:	465b      	mov	r3, fp
 8006456:	e9d1 0100 	ldrd	r0, r1, [r1]
 800645a:	f7fa f8cd 	bl	80005f8 <__aeabi_dmul>
 800645e:	9b08      	ldr	r3, [sp, #32]
 8006460:	1b5d      	subs	r5, r3, r5
 8006462:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006466:	e9d4 2300 	ldrd	r2, r3, [r4]
 800646a:	e7e3      	b.n	8006434 <_strtod_l+0x404>
 800646c:	9b08      	ldr	r3, [sp, #32]
 800646e:	3316      	adds	r3, #22
 8006470:	db0b      	blt.n	800648a <_strtod_l+0x45a>
 8006472:	9b07      	ldr	r3, [sp, #28]
 8006474:	4a57      	ldr	r2, [pc, #348]	; (80065d4 <_strtod_l+0x5a4>)
 8006476:	1b9e      	subs	r6, r3, r6
 8006478:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800647c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006480:	4650      	mov	r0, sl
 8006482:	4659      	mov	r1, fp
 8006484:	f7fa f9e2 	bl	800084c <__aeabi_ddiv>
 8006488:	e7d6      	b.n	8006438 <_strtod_l+0x408>
 800648a:	9b08      	ldr	r3, [sp, #32]
 800648c:	eba5 0808 	sub.w	r8, r5, r8
 8006490:	4498      	add	r8, r3
 8006492:	f1b8 0f00 	cmp.w	r8, #0
 8006496:	dd71      	ble.n	800657c <_strtod_l+0x54c>
 8006498:	f018 030f 	ands.w	r3, r8, #15
 800649c:	d00a      	beq.n	80064b4 <_strtod_l+0x484>
 800649e:	494d      	ldr	r1, [pc, #308]	; (80065d4 <_strtod_l+0x5a4>)
 80064a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80064a4:	4652      	mov	r2, sl
 80064a6:	465b      	mov	r3, fp
 80064a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064ac:	f7fa f8a4 	bl	80005f8 <__aeabi_dmul>
 80064b0:	4682      	mov	sl, r0
 80064b2:	468b      	mov	fp, r1
 80064b4:	f038 080f 	bics.w	r8, r8, #15
 80064b8:	d04d      	beq.n	8006556 <_strtod_l+0x526>
 80064ba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80064be:	dd22      	ble.n	8006506 <_strtod_l+0x4d6>
 80064c0:	2500      	movs	r5, #0
 80064c2:	462e      	mov	r6, r5
 80064c4:	9509      	str	r5, [sp, #36]	; 0x24
 80064c6:	9507      	str	r5, [sp, #28]
 80064c8:	2322      	movs	r3, #34	; 0x22
 80064ca:	f8df b110 	ldr.w	fp, [pc, #272]	; 80065dc <_strtod_l+0x5ac>
 80064ce:	6023      	str	r3, [r4, #0]
 80064d0:	f04f 0a00 	mov.w	sl, #0
 80064d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	f43f adec 	beq.w	80060b4 <_strtod_l+0x84>
 80064dc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80064de:	4620      	mov	r0, r4
 80064e0:	f002 f966 	bl	80087b0 <_Bfree>
 80064e4:	9907      	ldr	r1, [sp, #28]
 80064e6:	4620      	mov	r0, r4
 80064e8:	f002 f962 	bl	80087b0 <_Bfree>
 80064ec:	4631      	mov	r1, r6
 80064ee:	4620      	mov	r0, r4
 80064f0:	f002 f95e 	bl	80087b0 <_Bfree>
 80064f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80064f6:	4620      	mov	r0, r4
 80064f8:	f002 f95a 	bl	80087b0 <_Bfree>
 80064fc:	4629      	mov	r1, r5
 80064fe:	4620      	mov	r0, r4
 8006500:	f002 f956 	bl	80087b0 <_Bfree>
 8006504:	e5d6      	b.n	80060b4 <_strtod_l+0x84>
 8006506:	2300      	movs	r3, #0
 8006508:	ea4f 1828 	mov.w	r8, r8, asr #4
 800650c:	4650      	mov	r0, sl
 800650e:	4659      	mov	r1, fp
 8006510:	4699      	mov	r9, r3
 8006512:	f1b8 0f01 	cmp.w	r8, #1
 8006516:	dc21      	bgt.n	800655c <_strtod_l+0x52c>
 8006518:	b10b      	cbz	r3, 800651e <_strtod_l+0x4ee>
 800651a:	4682      	mov	sl, r0
 800651c:	468b      	mov	fp, r1
 800651e:	4b2e      	ldr	r3, [pc, #184]	; (80065d8 <_strtod_l+0x5a8>)
 8006520:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006524:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006528:	4652      	mov	r2, sl
 800652a:	465b      	mov	r3, fp
 800652c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006530:	f7fa f862 	bl	80005f8 <__aeabi_dmul>
 8006534:	4b29      	ldr	r3, [pc, #164]	; (80065dc <_strtod_l+0x5ac>)
 8006536:	460a      	mov	r2, r1
 8006538:	400b      	ands	r3, r1
 800653a:	4929      	ldr	r1, [pc, #164]	; (80065e0 <_strtod_l+0x5b0>)
 800653c:	428b      	cmp	r3, r1
 800653e:	4682      	mov	sl, r0
 8006540:	d8be      	bhi.n	80064c0 <_strtod_l+0x490>
 8006542:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006546:	428b      	cmp	r3, r1
 8006548:	bf86      	itte	hi
 800654a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80065e4 <_strtod_l+0x5b4>
 800654e:	f04f 3aff 	movhi.w	sl, #4294967295
 8006552:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006556:	2300      	movs	r3, #0
 8006558:	9304      	str	r3, [sp, #16]
 800655a:	e081      	b.n	8006660 <_strtod_l+0x630>
 800655c:	f018 0f01 	tst.w	r8, #1
 8006560:	d007      	beq.n	8006572 <_strtod_l+0x542>
 8006562:	4b1d      	ldr	r3, [pc, #116]	; (80065d8 <_strtod_l+0x5a8>)
 8006564:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656c:	f7fa f844 	bl	80005f8 <__aeabi_dmul>
 8006570:	2301      	movs	r3, #1
 8006572:	f109 0901 	add.w	r9, r9, #1
 8006576:	ea4f 0868 	mov.w	r8, r8, asr #1
 800657a:	e7ca      	b.n	8006512 <_strtod_l+0x4e2>
 800657c:	d0eb      	beq.n	8006556 <_strtod_l+0x526>
 800657e:	f1c8 0800 	rsb	r8, r8, #0
 8006582:	f018 020f 	ands.w	r2, r8, #15
 8006586:	d00a      	beq.n	800659e <_strtod_l+0x56e>
 8006588:	4b12      	ldr	r3, [pc, #72]	; (80065d4 <_strtod_l+0x5a4>)
 800658a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800658e:	4650      	mov	r0, sl
 8006590:	4659      	mov	r1, fp
 8006592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006596:	f7fa f959 	bl	800084c <__aeabi_ddiv>
 800659a:	4682      	mov	sl, r0
 800659c:	468b      	mov	fp, r1
 800659e:	ea5f 1828 	movs.w	r8, r8, asr #4
 80065a2:	d0d8      	beq.n	8006556 <_strtod_l+0x526>
 80065a4:	f1b8 0f1f 	cmp.w	r8, #31
 80065a8:	dd1e      	ble.n	80065e8 <_strtod_l+0x5b8>
 80065aa:	2500      	movs	r5, #0
 80065ac:	462e      	mov	r6, r5
 80065ae:	9509      	str	r5, [sp, #36]	; 0x24
 80065b0:	9507      	str	r5, [sp, #28]
 80065b2:	2322      	movs	r3, #34	; 0x22
 80065b4:	f04f 0a00 	mov.w	sl, #0
 80065b8:	f04f 0b00 	mov.w	fp, #0
 80065bc:	6023      	str	r3, [r4, #0]
 80065be:	e789      	b.n	80064d4 <_strtod_l+0x4a4>
 80065c0:	08009c41 	.word	0x08009c41
 80065c4:	08009c84 	.word	0x08009c84
 80065c8:	08009c39 	.word	0x08009c39
 80065cc:	08009dc4 	.word	0x08009dc4
 80065d0:	0800a0e0 	.word	0x0800a0e0
 80065d4:	08009fc0 	.word	0x08009fc0
 80065d8:	08009f98 	.word	0x08009f98
 80065dc:	7ff00000 	.word	0x7ff00000
 80065e0:	7ca00000 	.word	0x7ca00000
 80065e4:	7fefffff 	.word	0x7fefffff
 80065e8:	f018 0310 	ands.w	r3, r8, #16
 80065ec:	bf18      	it	ne
 80065ee:	236a      	movne	r3, #106	; 0x6a
 80065f0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80069a8 <_strtod_l+0x978>
 80065f4:	9304      	str	r3, [sp, #16]
 80065f6:	4650      	mov	r0, sl
 80065f8:	4659      	mov	r1, fp
 80065fa:	2300      	movs	r3, #0
 80065fc:	f018 0f01 	tst.w	r8, #1
 8006600:	d004      	beq.n	800660c <_strtod_l+0x5dc>
 8006602:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006606:	f7f9 fff7 	bl	80005f8 <__aeabi_dmul>
 800660a:	2301      	movs	r3, #1
 800660c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006610:	f109 0908 	add.w	r9, r9, #8
 8006614:	d1f2      	bne.n	80065fc <_strtod_l+0x5cc>
 8006616:	b10b      	cbz	r3, 800661c <_strtod_l+0x5ec>
 8006618:	4682      	mov	sl, r0
 800661a:	468b      	mov	fp, r1
 800661c:	9b04      	ldr	r3, [sp, #16]
 800661e:	b1bb      	cbz	r3, 8006650 <_strtod_l+0x620>
 8006620:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8006624:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006628:	2b00      	cmp	r3, #0
 800662a:	4659      	mov	r1, fp
 800662c:	dd10      	ble.n	8006650 <_strtod_l+0x620>
 800662e:	2b1f      	cmp	r3, #31
 8006630:	f340 8128 	ble.w	8006884 <_strtod_l+0x854>
 8006634:	2b34      	cmp	r3, #52	; 0x34
 8006636:	bfde      	ittt	le
 8006638:	3b20      	suble	r3, #32
 800663a:	f04f 32ff 	movle.w	r2, #4294967295
 800663e:	fa02 f303 	lslle.w	r3, r2, r3
 8006642:	f04f 0a00 	mov.w	sl, #0
 8006646:	bfcc      	ite	gt
 8006648:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800664c:	ea03 0b01 	andle.w	fp, r3, r1
 8006650:	2200      	movs	r2, #0
 8006652:	2300      	movs	r3, #0
 8006654:	4650      	mov	r0, sl
 8006656:	4659      	mov	r1, fp
 8006658:	f7fa fa36 	bl	8000ac8 <__aeabi_dcmpeq>
 800665c:	2800      	cmp	r0, #0
 800665e:	d1a4      	bne.n	80065aa <_strtod_l+0x57a>
 8006660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006662:	9300      	str	r3, [sp, #0]
 8006664:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006666:	462b      	mov	r3, r5
 8006668:	463a      	mov	r2, r7
 800666a:	4620      	mov	r0, r4
 800666c:	f002 f90c 	bl	8008888 <__s2b>
 8006670:	9009      	str	r0, [sp, #36]	; 0x24
 8006672:	2800      	cmp	r0, #0
 8006674:	f43f af24 	beq.w	80064c0 <_strtod_l+0x490>
 8006678:	9b07      	ldr	r3, [sp, #28]
 800667a:	1b9e      	subs	r6, r3, r6
 800667c:	9b08      	ldr	r3, [sp, #32]
 800667e:	2b00      	cmp	r3, #0
 8006680:	bfb4      	ite	lt
 8006682:	4633      	movlt	r3, r6
 8006684:	2300      	movge	r3, #0
 8006686:	9310      	str	r3, [sp, #64]	; 0x40
 8006688:	9b08      	ldr	r3, [sp, #32]
 800668a:	2500      	movs	r5, #0
 800668c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006690:	9318      	str	r3, [sp, #96]	; 0x60
 8006692:	462e      	mov	r6, r5
 8006694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006696:	4620      	mov	r0, r4
 8006698:	6859      	ldr	r1, [r3, #4]
 800669a:	f002 f849 	bl	8008730 <_Balloc>
 800669e:	9007      	str	r0, [sp, #28]
 80066a0:	2800      	cmp	r0, #0
 80066a2:	f43f af11 	beq.w	80064c8 <_strtod_l+0x498>
 80066a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066a8:	691a      	ldr	r2, [r3, #16]
 80066aa:	3202      	adds	r2, #2
 80066ac:	f103 010c 	add.w	r1, r3, #12
 80066b0:	0092      	lsls	r2, r2, #2
 80066b2:	300c      	adds	r0, #12
 80066b4:	f7fe fbc2 	bl	8004e3c <memcpy>
 80066b8:	ec4b ab10 	vmov	d0, sl, fp
 80066bc:	aa20      	add	r2, sp, #128	; 0x80
 80066be:	a91f      	add	r1, sp, #124	; 0x7c
 80066c0:	4620      	mov	r0, r4
 80066c2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80066c6:	f002 fc1b 	bl	8008f00 <__d2b>
 80066ca:	901e      	str	r0, [sp, #120]	; 0x78
 80066cc:	2800      	cmp	r0, #0
 80066ce:	f43f aefb 	beq.w	80064c8 <_strtod_l+0x498>
 80066d2:	2101      	movs	r1, #1
 80066d4:	4620      	mov	r0, r4
 80066d6:	f002 f971 	bl	80089bc <__i2b>
 80066da:	4606      	mov	r6, r0
 80066dc:	2800      	cmp	r0, #0
 80066de:	f43f aef3 	beq.w	80064c8 <_strtod_l+0x498>
 80066e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80066e4:	9904      	ldr	r1, [sp, #16]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	bfab      	itete	ge
 80066ea:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80066ec:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80066ee:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80066f0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80066f4:	bfac      	ite	ge
 80066f6:	eb03 0902 	addge.w	r9, r3, r2
 80066fa:	1ad7      	sublt	r7, r2, r3
 80066fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80066fe:	eba3 0801 	sub.w	r8, r3, r1
 8006702:	4490      	add	r8, r2
 8006704:	4ba3      	ldr	r3, [pc, #652]	; (8006994 <_strtod_l+0x964>)
 8006706:	f108 38ff 	add.w	r8, r8, #4294967295
 800670a:	4598      	cmp	r8, r3
 800670c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006710:	f280 80cc 	bge.w	80068ac <_strtod_l+0x87c>
 8006714:	eba3 0308 	sub.w	r3, r3, r8
 8006718:	2b1f      	cmp	r3, #31
 800671a:	eba2 0203 	sub.w	r2, r2, r3
 800671e:	f04f 0101 	mov.w	r1, #1
 8006722:	f300 80b6 	bgt.w	8006892 <_strtod_l+0x862>
 8006726:	fa01 f303 	lsl.w	r3, r1, r3
 800672a:	9311      	str	r3, [sp, #68]	; 0x44
 800672c:	2300      	movs	r3, #0
 800672e:	930c      	str	r3, [sp, #48]	; 0x30
 8006730:	eb09 0802 	add.w	r8, r9, r2
 8006734:	9b04      	ldr	r3, [sp, #16]
 8006736:	45c1      	cmp	r9, r8
 8006738:	4417      	add	r7, r2
 800673a:	441f      	add	r7, r3
 800673c:	464b      	mov	r3, r9
 800673e:	bfa8      	it	ge
 8006740:	4643      	movge	r3, r8
 8006742:	42bb      	cmp	r3, r7
 8006744:	bfa8      	it	ge
 8006746:	463b      	movge	r3, r7
 8006748:	2b00      	cmp	r3, #0
 800674a:	bfc2      	ittt	gt
 800674c:	eba8 0803 	subgt.w	r8, r8, r3
 8006750:	1aff      	subgt	r7, r7, r3
 8006752:	eba9 0903 	subgt.w	r9, r9, r3
 8006756:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006758:	2b00      	cmp	r3, #0
 800675a:	dd17      	ble.n	800678c <_strtod_l+0x75c>
 800675c:	4631      	mov	r1, r6
 800675e:	461a      	mov	r2, r3
 8006760:	4620      	mov	r0, r4
 8006762:	f002 f9e7 	bl	8008b34 <__pow5mult>
 8006766:	4606      	mov	r6, r0
 8006768:	2800      	cmp	r0, #0
 800676a:	f43f aead 	beq.w	80064c8 <_strtod_l+0x498>
 800676e:	4601      	mov	r1, r0
 8006770:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006772:	4620      	mov	r0, r4
 8006774:	f002 f938 	bl	80089e8 <__multiply>
 8006778:	900f      	str	r0, [sp, #60]	; 0x3c
 800677a:	2800      	cmp	r0, #0
 800677c:	f43f aea4 	beq.w	80064c8 <_strtod_l+0x498>
 8006780:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006782:	4620      	mov	r0, r4
 8006784:	f002 f814 	bl	80087b0 <_Bfree>
 8006788:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800678a:	931e      	str	r3, [sp, #120]	; 0x78
 800678c:	f1b8 0f00 	cmp.w	r8, #0
 8006790:	f300 8091 	bgt.w	80068b6 <_strtod_l+0x886>
 8006794:	9b08      	ldr	r3, [sp, #32]
 8006796:	2b00      	cmp	r3, #0
 8006798:	dd08      	ble.n	80067ac <_strtod_l+0x77c>
 800679a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800679c:	9907      	ldr	r1, [sp, #28]
 800679e:	4620      	mov	r0, r4
 80067a0:	f002 f9c8 	bl	8008b34 <__pow5mult>
 80067a4:	9007      	str	r0, [sp, #28]
 80067a6:	2800      	cmp	r0, #0
 80067a8:	f43f ae8e 	beq.w	80064c8 <_strtod_l+0x498>
 80067ac:	2f00      	cmp	r7, #0
 80067ae:	dd08      	ble.n	80067c2 <_strtod_l+0x792>
 80067b0:	9907      	ldr	r1, [sp, #28]
 80067b2:	463a      	mov	r2, r7
 80067b4:	4620      	mov	r0, r4
 80067b6:	f002 fa17 	bl	8008be8 <__lshift>
 80067ba:	9007      	str	r0, [sp, #28]
 80067bc:	2800      	cmp	r0, #0
 80067be:	f43f ae83 	beq.w	80064c8 <_strtod_l+0x498>
 80067c2:	f1b9 0f00 	cmp.w	r9, #0
 80067c6:	dd08      	ble.n	80067da <_strtod_l+0x7aa>
 80067c8:	4631      	mov	r1, r6
 80067ca:	464a      	mov	r2, r9
 80067cc:	4620      	mov	r0, r4
 80067ce:	f002 fa0b 	bl	8008be8 <__lshift>
 80067d2:	4606      	mov	r6, r0
 80067d4:	2800      	cmp	r0, #0
 80067d6:	f43f ae77 	beq.w	80064c8 <_strtod_l+0x498>
 80067da:	9a07      	ldr	r2, [sp, #28]
 80067dc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80067de:	4620      	mov	r0, r4
 80067e0:	f002 fa8a 	bl	8008cf8 <__mdiff>
 80067e4:	4605      	mov	r5, r0
 80067e6:	2800      	cmp	r0, #0
 80067e8:	f43f ae6e 	beq.w	80064c8 <_strtod_l+0x498>
 80067ec:	68c3      	ldr	r3, [r0, #12]
 80067ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80067f0:	2300      	movs	r3, #0
 80067f2:	60c3      	str	r3, [r0, #12]
 80067f4:	4631      	mov	r1, r6
 80067f6:	f002 fa63 	bl	8008cc0 <__mcmp>
 80067fa:	2800      	cmp	r0, #0
 80067fc:	da65      	bge.n	80068ca <_strtod_l+0x89a>
 80067fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006800:	ea53 030a 	orrs.w	r3, r3, sl
 8006804:	f040 8087 	bne.w	8006916 <_strtod_l+0x8e6>
 8006808:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800680c:	2b00      	cmp	r3, #0
 800680e:	f040 8082 	bne.w	8006916 <_strtod_l+0x8e6>
 8006812:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006816:	0d1b      	lsrs	r3, r3, #20
 8006818:	051b      	lsls	r3, r3, #20
 800681a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800681e:	d97a      	bls.n	8006916 <_strtod_l+0x8e6>
 8006820:	696b      	ldr	r3, [r5, #20]
 8006822:	b913      	cbnz	r3, 800682a <_strtod_l+0x7fa>
 8006824:	692b      	ldr	r3, [r5, #16]
 8006826:	2b01      	cmp	r3, #1
 8006828:	dd75      	ble.n	8006916 <_strtod_l+0x8e6>
 800682a:	4629      	mov	r1, r5
 800682c:	2201      	movs	r2, #1
 800682e:	4620      	mov	r0, r4
 8006830:	f002 f9da 	bl	8008be8 <__lshift>
 8006834:	4631      	mov	r1, r6
 8006836:	4605      	mov	r5, r0
 8006838:	f002 fa42 	bl	8008cc0 <__mcmp>
 800683c:	2800      	cmp	r0, #0
 800683e:	dd6a      	ble.n	8006916 <_strtod_l+0x8e6>
 8006840:	9904      	ldr	r1, [sp, #16]
 8006842:	4a55      	ldr	r2, [pc, #340]	; (8006998 <_strtod_l+0x968>)
 8006844:	465b      	mov	r3, fp
 8006846:	2900      	cmp	r1, #0
 8006848:	f000 8085 	beq.w	8006956 <_strtod_l+0x926>
 800684c:	ea02 010b 	and.w	r1, r2, fp
 8006850:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006854:	dc7f      	bgt.n	8006956 <_strtod_l+0x926>
 8006856:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800685a:	f77f aeaa 	ble.w	80065b2 <_strtod_l+0x582>
 800685e:	4a4f      	ldr	r2, [pc, #316]	; (800699c <_strtod_l+0x96c>)
 8006860:	2300      	movs	r3, #0
 8006862:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8006866:	4650      	mov	r0, sl
 8006868:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800686c:	4659      	mov	r1, fp
 800686e:	f7f9 fec3 	bl	80005f8 <__aeabi_dmul>
 8006872:	460b      	mov	r3, r1
 8006874:	4303      	orrs	r3, r0
 8006876:	bf08      	it	eq
 8006878:	2322      	moveq	r3, #34	; 0x22
 800687a:	4682      	mov	sl, r0
 800687c:	468b      	mov	fp, r1
 800687e:	bf08      	it	eq
 8006880:	6023      	streq	r3, [r4, #0]
 8006882:	e62b      	b.n	80064dc <_strtod_l+0x4ac>
 8006884:	f04f 32ff 	mov.w	r2, #4294967295
 8006888:	fa02 f303 	lsl.w	r3, r2, r3
 800688c:	ea03 0a0a 	and.w	sl, r3, sl
 8006890:	e6de      	b.n	8006650 <_strtod_l+0x620>
 8006892:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006896:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800689a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800689e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80068a2:	fa01 f308 	lsl.w	r3, r1, r8
 80068a6:	930c      	str	r3, [sp, #48]	; 0x30
 80068a8:	9111      	str	r1, [sp, #68]	; 0x44
 80068aa:	e741      	b.n	8006730 <_strtod_l+0x700>
 80068ac:	2300      	movs	r3, #0
 80068ae:	930c      	str	r3, [sp, #48]	; 0x30
 80068b0:	2301      	movs	r3, #1
 80068b2:	9311      	str	r3, [sp, #68]	; 0x44
 80068b4:	e73c      	b.n	8006730 <_strtod_l+0x700>
 80068b6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80068b8:	4642      	mov	r2, r8
 80068ba:	4620      	mov	r0, r4
 80068bc:	f002 f994 	bl	8008be8 <__lshift>
 80068c0:	901e      	str	r0, [sp, #120]	; 0x78
 80068c2:	2800      	cmp	r0, #0
 80068c4:	f47f af66 	bne.w	8006794 <_strtod_l+0x764>
 80068c8:	e5fe      	b.n	80064c8 <_strtod_l+0x498>
 80068ca:	465f      	mov	r7, fp
 80068cc:	d16e      	bne.n	80069ac <_strtod_l+0x97c>
 80068ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80068d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80068d4:	b342      	cbz	r2, 8006928 <_strtod_l+0x8f8>
 80068d6:	4a32      	ldr	r2, [pc, #200]	; (80069a0 <_strtod_l+0x970>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d128      	bne.n	800692e <_strtod_l+0x8fe>
 80068dc:	9b04      	ldr	r3, [sp, #16]
 80068de:	4650      	mov	r0, sl
 80068e0:	b1eb      	cbz	r3, 800691e <_strtod_l+0x8ee>
 80068e2:	4a2d      	ldr	r2, [pc, #180]	; (8006998 <_strtod_l+0x968>)
 80068e4:	403a      	ands	r2, r7
 80068e6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80068ea:	f04f 31ff 	mov.w	r1, #4294967295
 80068ee:	d819      	bhi.n	8006924 <_strtod_l+0x8f4>
 80068f0:	0d12      	lsrs	r2, r2, #20
 80068f2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80068f6:	fa01 f303 	lsl.w	r3, r1, r3
 80068fa:	4298      	cmp	r0, r3
 80068fc:	d117      	bne.n	800692e <_strtod_l+0x8fe>
 80068fe:	4b29      	ldr	r3, [pc, #164]	; (80069a4 <_strtod_l+0x974>)
 8006900:	429f      	cmp	r7, r3
 8006902:	d102      	bne.n	800690a <_strtod_l+0x8da>
 8006904:	3001      	adds	r0, #1
 8006906:	f43f addf 	beq.w	80064c8 <_strtod_l+0x498>
 800690a:	4b23      	ldr	r3, [pc, #140]	; (8006998 <_strtod_l+0x968>)
 800690c:	403b      	ands	r3, r7
 800690e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006912:	f04f 0a00 	mov.w	sl, #0
 8006916:	9b04      	ldr	r3, [sp, #16]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d1a0      	bne.n	800685e <_strtod_l+0x82e>
 800691c:	e5de      	b.n	80064dc <_strtod_l+0x4ac>
 800691e:	f04f 33ff 	mov.w	r3, #4294967295
 8006922:	e7ea      	b.n	80068fa <_strtod_l+0x8ca>
 8006924:	460b      	mov	r3, r1
 8006926:	e7e8      	b.n	80068fa <_strtod_l+0x8ca>
 8006928:	ea53 030a 	orrs.w	r3, r3, sl
 800692c:	d088      	beq.n	8006840 <_strtod_l+0x810>
 800692e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006930:	b1db      	cbz	r3, 800696a <_strtod_l+0x93a>
 8006932:	423b      	tst	r3, r7
 8006934:	d0ef      	beq.n	8006916 <_strtod_l+0x8e6>
 8006936:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006938:	9a04      	ldr	r2, [sp, #16]
 800693a:	4650      	mov	r0, sl
 800693c:	4659      	mov	r1, fp
 800693e:	b1c3      	cbz	r3, 8006972 <_strtod_l+0x942>
 8006940:	f7ff fb58 	bl	8005ff4 <sulp>
 8006944:	4602      	mov	r2, r0
 8006946:	460b      	mov	r3, r1
 8006948:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800694c:	f7f9 fc9e 	bl	800028c <__adddf3>
 8006950:	4682      	mov	sl, r0
 8006952:	468b      	mov	fp, r1
 8006954:	e7df      	b.n	8006916 <_strtod_l+0x8e6>
 8006956:	4013      	ands	r3, r2
 8006958:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800695c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006960:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006964:	f04f 3aff 	mov.w	sl, #4294967295
 8006968:	e7d5      	b.n	8006916 <_strtod_l+0x8e6>
 800696a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800696c:	ea13 0f0a 	tst.w	r3, sl
 8006970:	e7e0      	b.n	8006934 <_strtod_l+0x904>
 8006972:	f7ff fb3f 	bl	8005ff4 <sulp>
 8006976:	4602      	mov	r2, r0
 8006978:	460b      	mov	r3, r1
 800697a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800697e:	f7f9 fc83 	bl	8000288 <__aeabi_dsub>
 8006982:	2200      	movs	r2, #0
 8006984:	2300      	movs	r3, #0
 8006986:	4682      	mov	sl, r0
 8006988:	468b      	mov	fp, r1
 800698a:	f7fa f89d 	bl	8000ac8 <__aeabi_dcmpeq>
 800698e:	2800      	cmp	r0, #0
 8006990:	d0c1      	beq.n	8006916 <_strtod_l+0x8e6>
 8006992:	e60e      	b.n	80065b2 <_strtod_l+0x582>
 8006994:	fffffc02 	.word	0xfffffc02
 8006998:	7ff00000 	.word	0x7ff00000
 800699c:	39500000 	.word	0x39500000
 80069a0:	000fffff 	.word	0x000fffff
 80069a4:	7fefffff 	.word	0x7fefffff
 80069a8:	08009c98 	.word	0x08009c98
 80069ac:	4631      	mov	r1, r6
 80069ae:	4628      	mov	r0, r5
 80069b0:	f002 fb02 	bl	8008fb8 <__ratio>
 80069b4:	ec59 8b10 	vmov	r8, r9, d0
 80069b8:	ee10 0a10 	vmov	r0, s0
 80069bc:	2200      	movs	r2, #0
 80069be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80069c2:	4649      	mov	r1, r9
 80069c4:	f7fa f894 	bl	8000af0 <__aeabi_dcmple>
 80069c8:	2800      	cmp	r0, #0
 80069ca:	d07c      	beq.n	8006ac6 <_strtod_l+0xa96>
 80069cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d04c      	beq.n	8006a6c <_strtod_l+0xa3c>
 80069d2:	4b95      	ldr	r3, [pc, #596]	; (8006c28 <_strtod_l+0xbf8>)
 80069d4:	2200      	movs	r2, #0
 80069d6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80069da:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006c28 <_strtod_l+0xbf8>
 80069de:	f04f 0800 	mov.w	r8, #0
 80069e2:	4b92      	ldr	r3, [pc, #584]	; (8006c2c <_strtod_l+0xbfc>)
 80069e4:	403b      	ands	r3, r7
 80069e6:	9311      	str	r3, [sp, #68]	; 0x44
 80069e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80069ea:	4b91      	ldr	r3, [pc, #580]	; (8006c30 <_strtod_l+0xc00>)
 80069ec:	429a      	cmp	r2, r3
 80069ee:	f040 80b2 	bne.w	8006b56 <_strtod_l+0xb26>
 80069f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80069f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80069fa:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80069fe:	ec4b ab10 	vmov	d0, sl, fp
 8006a02:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8006a06:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006a0a:	f002 f9fd 	bl	8008e08 <__ulp>
 8006a0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006a12:	ec53 2b10 	vmov	r2, r3, d0
 8006a16:	f7f9 fdef 	bl	80005f8 <__aeabi_dmul>
 8006a1a:	4652      	mov	r2, sl
 8006a1c:	465b      	mov	r3, fp
 8006a1e:	f7f9 fc35 	bl	800028c <__adddf3>
 8006a22:	460b      	mov	r3, r1
 8006a24:	4981      	ldr	r1, [pc, #516]	; (8006c2c <_strtod_l+0xbfc>)
 8006a26:	4a83      	ldr	r2, [pc, #524]	; (8006c34 <_strtod_l+0xc04>)
 8006a28:	4019      	ands	r1, r3
 8006a2a:	4291      	cmp	r1, r2
 8006a2c:	4682      	mov	sl, r0
 8006a2e:	d95e      	bls.n	8006aee <_strtod_l+0xabe>
 8006a30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a32:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d103      	bne.n	8006a42 <_strtod_l+0xa12>
 8006a3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	f43f ad43 	beq.w	80064c8 <_strtod_l+0x498>
 8006a42:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8006c40 <_strtod_l+0xc10>
 8006a46:	f04f 3aff 	mov.w	sl, #4294967295
 8006a4a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	f001 feaf 	bl	80087b0 <_Bfree>
 8006a52:	9907      	ldr	r1, [sp, #28]
 8006a54:	4620      	mov	r0, r4
 8006a56:	f001 feab 	bl	80087b0 <_Bfree>
 8006a5a:	4631      	mov	r1, r6
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	f001 fea7 	bl	80087b0 <_Bfree>
 8006a62:	4629      	mov	r1, r5
 8006a64:	4620      	mov	r0, r4
 8006a66:	f001 fea3 	bl	80087b0 <_Bfree>
 8006a6a:	e613      	b.n	8006694 <_strtod_l+0x664>
 8006a6c:	f1ba 0f00 	cmp.w	sl, #0
 8006a70:	d11b      	bne.n	8006aaa <_strtod_l+0xa7a>
 8006a72:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006a76:	b9f3      	cbnz	r3, 8006ab6 <_strtod_l+0xa86>
 8006a78:	4b6b      	ldr	r3, [pc, #428]	; (8006c28 <_strtod_l+0xbf8>)
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	4640      	mov	r0, r8
 8006a7e:	4649      	mov	r1, r9
 8006a80:	f7fa f82c 	bl	8000adc <__aeabi_dcmplt>
 8006a84:	b9d0      	cbnz	r0, 8006abc <_strtod_l+0xa8c>
 8006a86:	4640      	mov	r0, r8
 8006a88:	4649      	mov	r1, r9
 8006a8a:	4b6b      	ldr	r3, [pc, #428]	; (8006c38 <_strtod_l+0xc08>)
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f7f9 fdb3 	bl	80005f8 <__aeabi_dmul>
 8006a92:	4680      	mov	r8, r0
 8006a94:	4689      	mov	r9, r1
 8006a96:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006a9a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8006a9e:	931b      	str	r3, [sp, #108]	; 0x6c
 8006aa0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8006aa4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006aa8:	e79b      	b.n	80069e2 <_strtod_l+0x9b2>
 8006aaa:	f1ba 0f01 	cmp.w	sl, #1
 8006aae:	d102      	bne.n	8006ab6 <_strtod_l+0xa86>
 8006ab0:	2f00      	cmp	r7, #0
 8006ab2:	f43f ad7e 	beq.w	80065b2 <_strtod_l+0x582>
 8006ab6:	4b61      	ldr	r3, [pc, #388]	; (8006c3c <_strtod_l+0xc0c>)
 8006ab8:	2200      	movs	r2, #0
 8006aba:	e78c      	b.n	80069d6 <_strtod_l+0x9a6>
 8006abc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006c38 <_strtod_l+0xc08>
 8006ac0:	f04f 0800 	mov.w	r8, #0
 8006ac4:	e7e7      	b.n	8006a96 <_strtod_l+0xa66>
 8006ac6:	4b5c      	ldr	r3, [pc, #368]	; (8006c38 <_strtod_l+0xc08>)
 8006ac8:	4640      	mov	r0, r8
 8006aca:	4649      	mov	r1, r9
 8006acc:	2200      	movs	r2, #0
 8006ace:	f7f9 fd93 	bl	80005f8 <__aeabi_dmul>
 8006ad2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ad4:	4680      	mov	r8, r0
 8006ad6:	4689      	mov	r9, r1
 8006ad8:	b933      	cbnz	r3, 8006ae8 <_strtod_l+0xab8>
 8006ada:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ade:	9012      	str	r0, [sp, #72]	; 0x48
 8006ae0:	9313      	str	r3, [sp, #76]	; 0x4c
 8006ae2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8006ae6:	e7dd      	b.n	8006aa4 <_strtod_l+0xa74>
 8006ae8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8006aec:	e7f9      	b.n	8006ae2 <_strtod_l+0xab2>
 8006aee:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006af2:	9b04      	ldr	r3, [sp, #16]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1a8      	bne.n	8006a4a <_strtod_l+0xa1a>
 8006af8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006afc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006afe:	0d1b      	lsrs	r3, r3, #20
 8006b00:	051b      	lsls	r3, r3, #20
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d1a1      	bne.n	8006a4a <_strtod_l+0xa1a>
 8006b06:	4640      	mov	r0, r8
 8006b08:	4649      	mov	r1, r9
 8006b0a:	f7fa f8d5 	bl	8000cb8 <__aeabi_d2lz>
 8006b0e:	f7f9 fd45 	bl	800059c <__aeabi_l2d>
 8006b12:	4602      	mov	r2, r0
 8006b14:	460b      	mov	r3, r1
 8006b16:	4640      	mov	r0, r8
 8006b18:	4649      	mov	r1, r9
 8006b1a:	f7f9 fbb5 	bl	8000288 <__aeabi_dsub>
 8006b1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006b20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006b24:	ea43 030a 	orr.w	r3, r3, sl
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	4680      	mov	r8, r0
 8006b2c:	4689      	mov	r9, r1
 8006b2e:	d053      	beq.n	8006bd8 <_strtod_l+0xba8>
 8006b30:	a335      	add	r3, pc, #212	; (adr r3, 8006c08 <_strtod_l+0xbd8>)
 8006b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b36:	f7f9 ffd1 	bl	8000adc <__aeabi_dcmplt>
 8006b3a:	2800      	cmp	r0, #0
 8006b3c:	f47f acce 	bne.w	80064dc <_strtod_l+0x4ac>
 8006b40:	a333      	add	r3, pc, #204	; (adr r3, 8006c10 <_strtod_l+0xbe0>)
 8006b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b46:	4640      	mov	r0, r8
 8006b48:	4649      	mov	r1, r9
 8006b4a:	f7f9 ffe5 	bl	8000b18 <__aeabi_dcmpgt>
 8006b4e:	2800      	cmp	r0, #0
 8006b50:	f43f af7b 	beq.w	8006a4a <_strtod_l+0xa1a>
 8006b54:	e4c2      	b.n	80064dc <_strtod_l+0x4ac>
 8006b56:	9b04      	ldr	r3, [sp, #16]
 8006b58:	b333      	cbz	r3, 8006ba8 <_strtod_l+0xb78>
 8006b5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b5c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006b60:	d822      	bhi.n	8006ba8 <_strtod_l+0xb78>
 8006b62:	a32d      	add	r3, pc, #180	; (adr r3, 8006c18 <_strtod_l+0xbe8>)
 8006b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b68:	4640      	mov	r0, r8
 8006b6a:	4649      	mov	r1, r9
 8006b6c:	f7f9 ffc0 	bl	8000af0 <__aeabi_dcmple>
 8006b70:	b1a0      	cbz	r0, 8006b9c <_strtod_l+0xb6c>
 8006b72:	4649      	mov	r1, r9
 8006b74:	4640      	mov	r0, r8
 8006b76:	f7fa f817 	bl	8000ba8 <__aeabi_d2uiz>
 8006b7a:	2801      	cmp	r0, #1
 8006b7c:	bf38      	it	cc
 8006b7e:	2001      	movcc	r0, #1
 8006b80:	f7f9 fcc0 	bl	8000504 <__aeabi_ui2d>
 8006b84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b86:	4680      	mov	r8, r0
 8006b88:	4689      	mov	r9, r1
 8006b8a:	bb13      	cbnz	r3, 8006bd2 <_strtod_l+0xba2>
 8006b8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b90:	9014      	str	r0, [sp, #80]	; 0x50
 8006b92:	9315      	str	r3, [sp, #84]	; 0x54
 8006b94:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006b98:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006b9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006ba0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006ba4:	1a9b      	subs	r3, r3, r2
 8006ba6:	930d      	str	r3, [sp, #52]	; 0x34
 8006ba8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006bac:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006bb0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006bb4:	f002 f928 	bl	8008e08 <__ulp>
 8006bb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006bbc:	ec53 2b10 	vmov	r2, r3, d0
 8006bc0:	f7f9 fd1a 	bl	80005f8 <__aeabi_dmul>
 8006bc4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006bc8:	f7f9 fb60 	bl	800028c <__adddf3>
 8006bcc:	4682      	mov	sl, r0
 8006bce:	468b      	mov	fp, r1
 8006bd0:	e78f      	b.n	8006af2 <_strtod_l+0xac2>
 8006bd2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8006bd6:	e7dd      	b.n	8006b94 <_strtod_l+0xb64>
 8006bd8:	a311      	add	r3, pc, #68	; (adr r3, 8006c20 <_strtod_l+0xbf0>)
 8006bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bde:	f7f9 ff7d 	bl	8000adc <__aeabi_dcmplt>
 8006be2:	e7b4      	b.n	8006b4e <_strtod_l+0xb1e>
 8006be4:	2300      	movs	r3, #0
 8006be6:	930e      	str	r3, [sp, #56]	; 0x38
 8006be8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006bea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006bec:	6013      	str	r3, [r2, #0]
 8006bee:	f7ff ba65 	b.w	80060bc <_strtod_l+0x8c>
 8006bf2:	2b65      	cmp	r3, #101	; 0x65
 8006bf4:	f43f ab5d 	beq.w	80062b2 <_strtod_l+0x282>
 8006bf8:	2b45      	cmp	r3, #69	; 0x45
 8006bfa:	f43f ab5a 	beq.w	80062b2 <_strtod_l+0x282>
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f7ff bb92 	b.w	8006328 <_strtod_l+0x2f8>
 8006c04:	f3af 8000 	nop.w
 8006c08:	94a03595 	.word	0x94a03595
 8006c0c:	3fdfffff 	.word	0x3fdfffff
 8006c10:	35afe535 	.word	0x35afe535
 8006c14:	3fe00000 	.word	0x3fe00000
 8006c18:	ffc00000 	.word	0xffc00000
 8006c1c:	41dfffff 	.word	0x41dfffff
 8006c20:	94a03595 	.word	0x94a03595
 8006c24:	3fcfffff 	.word	0x3fcfffff
 8006c28:	3ff00000 	.word	0x3ff00000
 8006c2c:	7ff00000 	.word	0x7ff00000
 8006c30:	7fe00000 	.word	0x7fe00000
 8006c34:	7c9fffff 	.word	0x7c9fffff
 8006c38:	3fe00000 	.word	0x3fe00000
 8006c3c:	bff00000 	.word	0xbff00000
 8006c40:	7fefffff 	.word	0x7fefffff

08006c44 <_strtod_r>:
 8006c44:	4b01      	ldr	r3, [pc, #4]	; (8006c4c <_strtod_r+0x8>)
 8006c46:	f7ff b9f3 	b.w	8006030 <_strtod_l>
 8006c4a:	bf00      	nop
 8006c4c:	20000074 	.word	0x20000074

08006c50 <_strtol_l.isra.0>:
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c56:	d001      	beq.n	8006c5c <_strtol_l.isra.0+0xc>
 8006c58:	2b24      	cmp	r3, #36	; 0x24
 8006c5a:	d906      	bls.n	8006c6a <_strtol_l.isra.0+0x1a>
 8006c5c:	f7fe f8bc 	bl	8004dd8 <__errno>
 8006c60:	2316      	movs	r3, #22
 8006c62:	6003      	str	r3, [r0, #0]
 8006c64:	2000      	movs	r0, #0
 8006c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c6a:	4f3a      	ldr	r7, [pc, #232]	; (8006d54 <_strtol_l.isra.0+0x104>)
 8006c6c:	468e      	mov	lr, r1
 8006c6e:	4676      	mov	r6, lr
 8006c70:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006c74:	5de5      	ldrb	r5, [r4, r7]
 8006c76:	f015 0508 	ands.w	r5, r5, #8
 8006c7a:	d1f8      	bne.n	8006c6e <_strtol_l.isra.0+0x1e>
 8006c7c:	2c2d      	cmp	r4, #45	; 0x2d
 8006c7e:	d134      	bne.n	8006cea <_strtol_l.isra.0+0x9a>
 8006c80:	f89e 4000 	ldrb.w	r4, [lr]
 8006c84:	f04f 0801 	mov.w	r8, #1
 8006c88:	f106 0e02 	add.w	lr, r6, #2
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d05c      	beq.n	8006d4a <_strtol_l.isra.0+0xfa>
 8006c90:	2b10      	cmp	r3, #16
 8006c92:	d10c      	bne.n	8006cae <_strtol_l.isra.0+0x5e>
 8006c94:	2c30      	cmp	r4, #48	; 0x30
 8006c96:	d10a      	bne.n	8006cae <_strtol_l.isra.0+0x5e>
 8006c98:	f89e 4000 	ldrb.w	r4, [lr]
 8006c9c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006ca0:	2c58      	cmp	r4, #88	; 0x58
 8006ca2:	d14d      	bne.n	8006d40 <_strtol_l.isra.0+0xf0>
 8006ca4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8006ca8:	2310      	movs	r3, #16
 8006caa:	f10e 0e02 	add.w	lr, lr, #2
 8006cae:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8006cb2:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006cb6:	2600      	movs	r6, #0
 8006cb8:	fbbc f9f3 	udiv	r9, ip, r3
 8006cbc:	4635      	mov	r5, r6
 8006cbe:	fb03 ca19 	mls	sl, r3, r9, ip
 8006cc2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006cc6:	2f09      	cmp	r7, #9
 8006cc8:	d818      	bhi.n	8006cfc <_strtol_l.isra.0+0xac>
 8006cca:	463c      	mov	r4, r7
 8006ccc:	42a3      	cmp	r3, r4
 8006cce:	dd24      	ble.n	8006d1a <_strtol_l.isra.0+0xca>
 8006cd0:	2e00      	cmp	r6, #0
 8006cd2:	db1f      	blt.n	8006d14 <_strtol_l.isra.0+0xc4>
 8006cd4:	45a9      	cmp	r9, r5
 8006cd6:	d31d      	bcc.n	8006d14 <_strtol_l.isra.0+0xc4>
 8006cd8:	d101      	bne.n	8006cde <_strtol_l.isra.0+0x8e>
 8006cda:	45a2      	cmp	sl, r4
 8006cdc:	db1a      	blt.n	8006d14 <_strtol_l.isra.0+0xc4>
 8006cde:	fb05 4503 	mla	r5, r5, r3, r4
 8006ce2:	2601      	movs	r6, #1
 8006ce4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006ce8:	e7eb      	b.n	8006cc2 <_strtol_l.isra.0+0x72>
 8006cea:	2c2b      	cmp	r4, #43	; 0x2b
 8006cec:	bf08      	it	eq
 8006cee:	f89e 4000 	ldrbeq.w	r4, [lr]
 8006cf2:	46a8      	mov	r8, r5
 8006cf4:	bf08      	it	eq
 8006cf6:	f106 0e02 	addeq.w	lr, r6, #2
 8006cfa:	e7c7      	b.n	8006c8c <_strtol_l.isra.0+0x3c>
 8006cfc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006d00:	2f19      	cmp	r7, #25
 8006d02:	d801      	bhi.n	8006d08 <_strtol_l.isra.0+0xb8>
 8006d04:	3c37      	subs	r4, #55	; 0x37
 8006d06:	e7e1      	b.n	8006ccc <_strtol_l.isra.0+0x7c>
 8006d08:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006d0c:	2f19      	cmp	r7, #25
 8006d0e:	d804      	bhi.n	8006d1a <_strtol_l.isra.0+0xca>
 8006d10:	3c57      	subs	r4, #87	; 0x57
 8006d12:	e7db      	b.n	8006ccc <_strtol_l.isra.0+0x7c>
 8006d14:	f04f 36ff 	mov.w	r6, #4294967295
 8006d18:	e7e4      	b.n	8006ce4 <_strtol_l.isra.0+0x94>
 8006d1a:	2e00      	cmp	r6, #0
 8006d1c:	da05      	bge.n	8006d2a <_strtol_l.isra.0+0xda>
 8006d1e:	2322      	movs	r3, #34	; 0x22
 8006d20:	6003      	str	r3, [r0, #0]
 8006d22:	4665      	mov	r5, ip
 8006d24:	b942      	cbnz	r2, 8006d38 <_strtol_l.isra.0+0xe8>
 8006d26:	4628      	mov	r0, r5
 8006d28:	e79d      	b.n	8006c66 <_strtol_l.isra.0+0x16>
 8006d2a:	f1b8 0f00 	cmp.w	r8, #0
 8006d2e:	d000      	beq.n	8006d32 <_strtol_l.isra.0+0xe2>
 8006d30:	426d      	negs	r5, r5
 8006d32:	2a00      	cmp	r2, #0
 8006d34:	d0f7      	beq.n	8006d26 <_strtol_l.isra.0+0xd6>
 8006d36:	b10e      	cbz	r6, 8006d3c <_strtol_l.isra.0+0xec>
 8006d38:	f10e 31ff 	add.w	r1, lr, #4294967295
 8006d3c:	6011      	str	r1, [r2, #0]
 8006d3e:	e7f2      	b.n	8006d26 <_strtol_l.isra.0+0xd6>
 8006d40:	2430      	movs	r4, #48	; 0x30
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d1b3      	bne.n	8006cae <_strtol_l.isra.0+0x5e>
 8006d46:	2308      	movs	r3, #8
 8006d48:	e7b1      	b.n	8006cae <_strtol_l.isra.0+0x5e>
 8006d4a:	2c30      	cmp	r4, #48	; 0x30
 8006d4c:	d0a4      	beq.n	8006c98 <_strtol_l.isra.0+0x48>
 8006d4e:	230a      	movs	r3, #10
 8006d50:	e7ad      	b.n	8006cae <_strtol_l.isra.0+0x5e>
 8006d52:	bf00      	nop
 8006d54:	08009cc1 	.word	0x08009cc1

08006d58 <_strtol_r>:
 8006d58:	f7ff bf7a 	b.w	8006c50 <_strtol_l.isra.0>

08006d5c <__swbuf_r>:
 8006d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d5e:	460e      	mov	r6, r1
 8006d60:	4614      	mov	r4, r2
 8006d62:	4605      	mov	r5, r0
 8006d64:	b118      	cbz	r0, 8006d6e <__swbuf_r+0x12>
 8006d66:	6983      	ldr	r3, [r0, #24]
 8006d68:	b90b      	cbnz	r3, 8006d6e <__swbuf_r+0x12>
 8006d6a:	f001 f84b 	bl	8007e04 <__sinit>
 8006d6e:	4b21      	ldr	r3, [pc, #132]	; (8006df4 <__swbuf_r+0x98>)
 8006d70:	429c      	cmp	r4, r3
 8006d72:	d12b      	bne.n	8006dcc <__swbuf_r+0x70>
 8006d74:	686c      	ldr	r4, [r5, #4]
 8006d76:	69a3      	ldr	r3, [r4, #24]
 8006d78:	60a3      	str	r3, [r4, #8]
 8006d7a:	89a3      	ldrh	r3, [r4, #12]
 8006d7c:	071a      	lsls	r2, r3, #28
 8006d7e:	d52f      	bpl.n	8006de0 <__swbuf_r+0x84>
 8006d80:	6923      	ldr	r3, [r4, #16]
 8006d82:	b36b      	cbz	r3, 8006de0 <__swbuf_r+0x84>
 8006d84:	6923      	ldr	r3, [r4, #16]
 8006d86:	6820      	ldr	r0, [r4, #0]
 8006d88:	1ac0      	subs	r0, r0, r3
 8006d8a:	6963      	ldr	r3, [r4, #20]
 8006d8c:	b2f6      	uxtb	r6, r6
 8006d8e:	4283      	cmp	r3, r0
 8006d90:	4637      	mov	r7, r6
 8006d92:	dc04      	bgt.n	8006d9e <__swbuf_r+0x42>
 8006d94:	4621      	mov	r1, r4
 8006d96:	4628      	mov	r0, r5
 8006d98:	f000 ffa0 	bl	8007cdc <_fflush_r>
 8006d9c:	bb30      	cbnz	r0, 8006dec <__swbuf_r+0x90>
 8006d9e:	68a3      	ldr	r3, [r4, #8]
 8006da0:	3b01      	subs	r3, #1
 8006da2:	60a3      	str	r3, [r4, #8]
 8006da4:	6823      	ldr	r3, [r4, #0]
 8006da6:	1c5a      	adds	r2, r3, #1
 8006da8:	6022      	str	r2, [r4, #0]
 8006daa:	701e      	strb	r6, [r3, #0]
 8006dac:	6963      	ldr	r3, [r4, #20]
 8006dae:	3001      	adds	r0, #1
 8006db0:	4283      	cmp	r3, r0
 8006db2:	d004      	beq.n	8006dbe <__swbuf_r+0x62>
 8006db4:	89a3      	ldrh	r3, [r4, #12]
 8006db6:	07db      	lsls	r3, r3, #31
 8006db8:	d506      	bpl.n	8006dc8 <__swbuf_r+0x6c>
 8006dba:	2e0a      	cmp	r6, #10
 8006dbc:	d104      	bne.n	8006dc8 <__swbuf_r+0x6c>
 8006dbe:	4621      	mov	r1, r4
 8006dc0:	4628      	mov	r0, r5
 8006dc2:	f000 ff8b 	bl	8007cdc <_fflush_r>
 8006dc6:	b988      	cbnz	r0, 8006dec <__swbuf_r+0x90>
 8006dc8:	4638      	mov	r0, r7
 8006dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dcc:	4b0a      	ldr	r3, [pc, #40]	; (8006df8 <__swbuf_r+0x9c>)
 8006dce:	429c      	cmp	r4, r3
 8006dd0:	d101      	bne.n	8006dd6 <__swbuf_r+0x7a>
 8006dd2:	68ac      	ldr	r4, [r5, #8]
 8006dd4:	e7cf      	b.n	8006d76 <__swbuf_r+0x1a>
 8006dd6:	4b09      	ldr	r3, [pc, #36]	; (8006dfc <__swbuf_r+0xa0>)
 8006dd8:	429c      	cmp	r4, r3
 8006dda:	bf08      	it	eq
 8006ddc:	68ec      	ldreq	r4, [r5, #12]
 8006dde:	e7ca      	b.n	8006d76 <__swbuf_r+0x1a>
 8006de0:	4621      	mov	r1, r4
 8006de2:	4628      	mov	r0, r5
 8006de4:	f000 f80c 	bl	8006e00 <__swsetup_r>
 8006de8:	2800      	cmp	r0, #0
 8006dea:	d0cb      	beq.n	8006d84 <__swbuf_r+0x28>
 8006dec:	f04f 37ff 	mov.w	r7, #4294967295
 8006df0:	e7ea      	b.n	8006dc8 <__swbuf_r+0x6c>
 8006df2:	bf00      	nop
 8006df4:	08009e78 	.word	0x08009e78
 8006df8:	08009e98 	.word	0x08009e98
 8006dfc:	08009e58 	.word	0x08009e58

08006e00 <__swsetup_r>:
 8006e00:	4b32      	ldr	r3, [pc, #200]	; (8006ecc <__swsetup_r+0xcc>)
 8006e02:	b570      	push	{r4, r5, r6, lr}
 8006e04:	681d      	ldr	r5, [r3, #0]
 8006e06:	4606      	mov	r6, r0
 8006e08:	460c      	mov	r4, r1
 8006e0a:	b125      	cbz	r5, 8006e16 <__swsetup_r+0x16>
 8006e0c:	69ab      	ldr	r3, [r5, #24]
 8006e0e:	b913      	cbnz	r3, 8006e16 <__swsetup_r+0x16>
 8006e10:	4628      	mov	r0, r5
 8006e12:	f000 fff7 	bl	8007e04 <__sinit>
 8006e16:	4b2e      	ldr	r3, [pc, #184]	; (8006ed0 <__swsetup_r+0xd0>)
 8006e18:	429c      	cmp	r4, r3
 8006e1a:	d10f      	bne.n	8006e3c <__swsetup_r+0x3c>
 8006e1c:	686c      	ldr	r4, [r5, #4]
 8006e1e:	89a3      	ldrh	r3, [r4, #12]
 8006e20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e24:	0719      	lsls	r1, r3, #28
 8006e26:	d42c      	bmi.n	8006e82 <__swsetup_r+0x82>
 8006e28:	06dd      	lsls	r5, r3, #27
 8006e2a:	d411      	bmi.n	8006e50 <__swsetup_r+0x50>
 8006e2c:	2309      	movs	r3, #9
 8006e2e:	6033      	str	r3, [r6, #0]
 8006e30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006e34:	81a3      	strh	r3, [r4, #12]
 8006e36:	f04f 30ff 	mov.w	r0, #4294967295
 8006e3a:	e03e      	b.n	8006eba <__swsetup_r+0xba>
 8006e3c:	4b25      	ldr	r3, [pc, #148]	; (8006ed4 <__swsetup_r+0xd4>)
 8006e3e:	429c      	cmp	r4, r3
 8006e40:	d101      	bne.n	8006e46 <__swsetup_r+0x46>
 8006e42:	68ac      	ldr	r4, [r5, #8]
 8006e44:	e7eb      	b.n	8006e1e <__swsetup_r+0x1e>
 8006e46:	4b24      	ldr	r3, [pc, #144]	; (8006ed8 <__swsetup_r+0xd8>)
 8006e48:	429c      	cmp	r4, r3
 8006e4a:	bf08      	it	eq
 8006e4c:	68ec      	ldreq	r4, [r5, #12]
 8006e4e:	e7e6      	b.n	8006e1e <__swsetup_r+0x1e>
 8006e50:	0758      	lsls	r0, r3, #29
 8006e52:	d512      	bpl.n	8006e7a <__swsetup_r+0x7a>
 8006e54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e56:	b141      	cbz	r1, 8006e6a <__swsetup_r+0x6a>
 8006e58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e5c:	4299      	cmp	r1, r3
 8006e5e:	d002      	beq.n	8006e66 <__swsetup_r+0x66>
 8006e60:	4630      	mov	r0, r6
 8006e62:	f7fe f811 	bl	8004e88 <_free_r>
 8006e66:	2300      	movs	r3, #0
 8006e68:	6363      	str	r3, [r4, #52]	; 0x34
 8006e6a:	89a3      	ldrh	r3, [r4, #12]
 8006e6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e70:	81a3      	strh	r3, [r4, #12]
 8006e72:	2300      	movs	r3, #0
 8006e74:	6063      	str	r3, [r4, #4]
 8006e76:	6923      	ldr	r3, [r4, #16]
 8006e78:	6023      	str	r3, [r4, #0]
 8006e7a:	89a3      	ldrh	r3, [r4, #12]
 8006e7c:	f043 0308 	orr.w	r3, r3, #8
 8006e80:	81a3      	strh	r3, [r4, #12]
 8006e82:	6923      	ldr	r3, [r4, #16]
 8006e84:	b94b      	cbnz	r3, 8006e9a <__swsetup_r+0x9a>
 8006e86:	89a3      	ldrh	r3, [r4, #12]
 8006e88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e90:	d003      	beq.n	8006e9a <__swsetup_r+0x9a>
 8006e92:	4621      	mov	r1, r4
 8006e94:	4630      	mov	r0, r6
 8006e96:	f001 fbed 	bl	8008674 <__smakebuf_r>
 8006e9a:	89a0      	ldrh	r0, [r4, #12]
 8006e9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ea0:	f010 0301 	ands.w	r3, r0, #1
 8006ea4:	d00a      	beq.n	8006ebc <__swsetup_r+0xbc>
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	60a3      	str	r3, [r4, #8]
 8006eaa:	6963      	ldr	r3, [r4, #20]
 8006eac:	425b      	negs	r3, r3
 8006eae:	61a3      	str	r3, [r4, #24]
 8006eb0:	6923      	ldr	r3, [r4, #16]
 8006eb2:	b943      	cbnz	r3, 8006ec6 <__swsetup_r+0xc6>
 8006eb4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006eb8:	d1ba      	bne.n	8006e30 <__swsetup_r+0x30>
 8006eba:	bd70      	pop	{r4, r5, r6, pc}
 8006ebc:	0781      	lsls	r1, r0, #30
 8006ebe:	bf58      	it	pl
 8006ec0:	6963      	ldrpl	r3, [r4, #20]
 8006ec2:	60a3      	str	r3, [r4, #8]
 8006ec4:	e7f4      	b.n	8006eb0 <__swsetup_r+0xb0>
 8006ec6:	2000      	movs	r0, #0
 8006ec8:	e7f7      	b.n	8006eba <__swsetup_r+0xba>
 8006eca:	bf00      	nop
 8006ecc:	2000000c 	.word	0x2000000c
 8006ed0:	08009e78 	.word	0x08009e78
 8006ed4:	08009e98 	.word	0x08009e98
 8006ed8:	08009e58 	.word	0x08009e58

08006edc <quorem>:
 8006edc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ee0:	6903      	ldr	r3, [r0, #16]
 8006ee2:	690c      	ldr	r4, [r1, #16]
 8006ee4:	42a3      	cmp	r3, r4
 8006ee6:	4607      	mov	r7, r0
 8006ee8:	f2c0 8081 	blt.w	8006fee <quorem+0x112>
 8006eec:	3c01      	subs	r4, #1
 8006eee:	f101 0814 	add.w	r8, r1, #20
 8006ef2:	f100 0514 	add.w	r5, r0, #20
 8006ef6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006efa:	9301      	str	r3, [sp, #4]
 8006efc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f04:	3301      	adds	r3, #1
 8006f06:	429a      	cmp	r2, r3
 8006f08:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006f0c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f10:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f14:	d331      	bcc.n	8006f7a <quorem+0x9e>
 8006f16:	f04f 0e00 	mov.w	lr, #0
 8006f1a:	4640      	mov	r0, r8
 8006f1c:	46ac      	mov	ip, r5
 8006f1e:	46f2      	mov	sl, lr
 8006f20:	f850 2b04 	ldr.w	r2, [r0], #4
 8006f24:	b293      	uxth	r3, r2
 8006f26:	fb06 e303 	mla	r3, r6, r3, lr
 8006f2a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	ebaa 0303 	sub.w	r3, sl, r3
 8006f34:	0c12      	lsrs	r2, r2, #16
 8006f36:	f8dc a000 	ldr.w	sl, [ip]
 8006f3a:	fb06 e202 	mla	r2, r6, r2, lr
 8006f3e:	fa13 f38a 	uxtah	r3, r3, sl
 8006f42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006f46:	fa1f fa82 	uxth.w	sl, r2
 8006f4a:	f8dc 2000 	ldr.w	r2, [ip]
 8006f4e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006f52:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f5c:	4581      	cmp	r9, r0
 8006f5e:	f84c 3b04 	str.w	r3, [ip], #4
 8006f62:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006f66:	d2db      	bcs.n	8006f20 <quorem+0x44>
 8006f68:	f855 300b 	ldr.w	r3, [r5, fp]
 8006f6c:	b92b      	cbnz	r3, 8006f7a <quorem+0x9e>
 8006f6e:	9b01      	ldr	r3, [sp, #4]
 8006f70:	3b04      	subs	r3, #4
 8006f72:	429d      	cmp	r5, r3
 8006f74:	461a      	mov	r2, r3
 8006f76:	d32e      	bcc.n	8006fd6 <quorem+0xfa>
 8006f78:	613c      	str	r4, [r7, #16]
 8006f7a:	4638      	mov	r0, r7
 8006f7c:	f001 fea0 	bl	8008cc0 <__mcmp>
 8006f80:	2800      	cmp	r0, #0
 8006f82:	db24      	blt.n	8006fce <quorem+0xf2>
 8006f84:	3601      	adds	r6, #1
 8006f86:	4628      	mov	r0, r5
 8006f88:	f04f 0c00 	mov.w	ip, #0
 8006f8c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f90:	f8d0 e000 	ldr.w	lr, [r0]
 8006f94:	b293      	uxth	r3, r2
 8006f96:	ebac 0303 	sub.w	r3, ip, r3
 8006f9a:	0c12      	lsrs	r2, r2, #16
 8006f9c:	fa13 f38e 	uxtah	r3, r3, lr
 8006fa0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006fa4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fae:	45c1      	cmp	r9, r8
 8006fb0:	f840 3b04 	str.w	r3, [r0], #4
 8006fb4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006fb8:	d2e8      	bcs.n	8006f8c <quorem+0xb0>
 8006fba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fbe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fc2:	b922      	cbnz	r2, 8006fce <quorem+0xf2>
 8006fc4:	3b04      	subs	r3, #4
 8006fc6:	429d      	cmp	r5, r3
 8006fc8:	461a      	mov	r2, r3
 8006fca:	d30a      	bcc.n	8006fe2 <quorem+0x106>
 8006fcc:	613c      	str	r4, [r7, #16]
 8006fce:	4630      	mov	r0, r6
 8006fd0:	b003      	add	sp, #12
 8006fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fd6:	6812      	ldr	r2, [r2, #0]
 8006fd8:	3b04      	subs	r3, #4
 8006fda:	2a00      	cmp	r2, #0
 8006fdc:	d1cc      	bne.n	8006f78 <quorem+0x9c>
 8006fde:	3c01      	subs	r4, #1
 8006fe0:	e7c7      	b.n	8006f72 <quorem+0x96>
 8006fe2:	6812      	ldr	r2, [r2, #0]
 8006fe4:	3b04      	subs	r3, #4
 8006fe6:	2a00      	cmp	r2, #0
 8006fe8:	d1f0      	bne.n	8006fcc <quorem+0xf0>
 8006fea:	3c01      	subs	r4, #1
 8006fec:	e7eb      	b.n	8006fc6 <quorem+0xea>
 8006fee:	2000      	movs	r0, #0
 8006ff0:	e7ee      	b.n	8006fd0 <quorem+0xf4>
 8006ff2:	0000      	movs	r0, r0
 8006ff4:	0000      	movs	r0, r0
	...

08006ff8 <_dtoa_r>:
 8006ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ffc:	ed2d 8b02 	vpush	{d8}
 8007000:	ec57 6b10 	vmov	r6, r7, d0
 8007004:	b095      	sub	sp, #84	; 0x54
 8007006:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007008:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800700c:	9105      	str	r1, [sp, #20]
 800700e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007012:	4604      	mov	r4, r0
 8007014:	9209      	str	r2, [sp, #36]	; 0x24
 8007016:	930f      	str	r3, [sp, #60]	; 0x3c
 8007018:	b975      	cbnz	r5, 8007038 <_dtoa_r+0x40>
 800701a:	2010      	movs	r0, #16
 800701c:	f7fd ff06 	bl	8004e2c <malloc>
 8007020:	4602      	mov	r2, r0
 8007022:	6260      	str	r0, [r4, #36]	; 0x24
 8007024:	b920      	cbnz	r0, 8007030 <_dtoa_r+0x38>
 8007026:	4bb2      	ldr	r3, [pc, #712]	; (80072f0 <_dtoa_r+0x2f8>)
 8007028:	21ea      	movs	r1, #234	; 0xea
 800702a:	48b2      	ldr	r0, [pc, #712]	; (80072f4 <_dtoa_r+0x2fc>)
 800702c:	f002 fb6c 	bl	8009708 <__assert_func>
 8007030:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007034:	6005      	str	r5, [r0, #0]
 8007036:	60c5      	str	r5, [r0, #12]
 8007038:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800703a:	6819      	ldr	r1, [r3, #0]
 800703c:	b151      	cbz	r1, 8007054 <_dtoa_r+0x5c>
 800703e:	685a      	ldr	r2, [r3, #4]
 8007040:	604a      	str	r2, [r1, #4]
 8007042:	2301      	movs	r3, #1
 8007044:	4093      	lsls	r3, r2
 8007046:	608b      	str	r3, [r1, #8]
 8007048:	4620      	mov	r0, r4
 800704a:	f001 fbb1 	bl	80087b0 <_Bfree>
 800704e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007050:	2200      	movs	r2, #0
 8007052:	601a      	str	r2, [r3, #0]
 8007054:	1e3b      	subs	r3, r7, #0
 8007056:	bfb9      	ittee	lt
 8007058:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800705c:	9303      	strlt	r3, [sp, #12]
 800705e:	2300      	movge	r3, #0
 8007060:	f8c8 3000 	strge.w	r3, [r8]
 8007064:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007068:	4ba3      	ldr	r3, [pc, #652]	; (80072f8 <_dtoa_r+0x300>)
 800706a:	bfbc      	itt	lt
 800706c:	2201      	movlt	r2, #1
 800706e:	f8c8 2000 	strlt.w	r2, [r8]
 8007072:	ea33 0309 	bics.w	r3, r3, r9
 8007076:	d11b      	bne.n	80070b0 <_dtoa_r+0xb8>
 8007078:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800707a:	f242 730f 	movw	r3, #9999	; 0x270f
 800707e:	6013      	str	r3, [r2, #0]
 8007080:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007084:	4333      	orrs	r3, r6
 8007086:	f000 857a 	beq.w	8007b7e <_dtoa_r+0xb86>
 800708a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800708c:	b963      	cbnz	r3, 80070a8 <_dtoa_r+0xb0>
 800708e:	4b9b      	ldr	r3, [pc, #620]	; (80072fc <_dtoa_r+0x304>)
 8007090:	e024      	b.n	80070dc <_dtoa_r+0xe4>
 8007092:	4b9b      	ldr	r3, [pc, #620]	; (8007300 <_dtoa_r+0x308>)
 8007094:	9300      	str	r3, [sp, #0]
 8007096:	3308      	adds	r3, #8
 8007098:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800709a:	6013      	str	r3, [r2, #0]
 800709c:	9800      	ldr	r0, [sp, #0]
 800709e:	b015      	add	sp, #84	; 0x54
 80070a0:	ecbd 8b02 	vpop	{d8}
 80070a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070a8:	4b94      	ldr	r3, [pc, #592]	; (80072fc <_dtoa_r+0x304>)
 80070aa:	9300      	str	r3, [sp, #0]
 80070ac:	3303      	adds	r3, #3
 80070ae:	e7f3      	b.n	8007098 <_dtoa_r+0xa0>
 80070b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80070b4:	2200      	movs	r2, #0
 80070b6:	ec51 0b17 	vmov	r0, r1, d7
 80070ba:	2300      	movs	r3, #0
 80070bc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80070c0:	f7f9 fd02 	bl	8000ac8 <__aeabi_dcmpeq>
 80070c4:	4680      	mov	r8, r0
 80070c6:	b158      	cbz	r0, 80070e0 <_dtoa_r+0xe8>
 80070c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80070ca:	2301      	movs	r3, #1
 80070cc:	6013      	str	r3, [r2, #0]
 80070ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 8551 	beq.w	8007b78 <_dtoa_r+0xb80>
 80070d6:	488b      	ldr	r0, [pc, #556]	; (8007304 <_dtoa_r+0x30c>)
 80070d8:	6018      	str	r0, [r3, #0]
 80070da:	1e43      	subs	r3, r0, #1
 80070dc:	9300      	str	r3, [sp, #0]
 80070de:	e7dd      	b.n	800709c <_dtoa_r+0xa4>
 80070e0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80070e4:	aa12      	add	r2, sp, #72	; 0x48
 80070e6:	a913      	add	r1, sp, #76	; 0x4c
 80070e8:	4620      	mov	r0, r4
 80070ea:	f001 ff09 	bl	8008f00 <__d2b>
 80070ee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80070f2:	4683      	mov	fp, r0
 80070f4:	2d00      	cmp	r5, #0
 80070f6:	d07c      	beq.n	80071f2 <_dtoa_r+0x1fa>
 80070f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070fa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80070fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007102:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007106:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800710a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800710e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007112:	4b7d      	ldr	r3, [pc, #500]	; (8007308 <_dtoa_r+0x310>)
 8007114:	2200      	movs	r2, #0
 8007116:	4630      	mov	r0, r6
 8007118:	4639      	mov	r1, r7
 800711a:	f7f9 f8b5 	bl	8000288 <__aeabi_dsub>
 800711e:	a36e      	add	r3, pc, #440	; (adr r3, 80072d8 <_dtoa_r+0x2e0>)
 8007120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007124:	f7f9 fa68 	bl	80005f8 <__aeabi_dmul>
 8007128:	a36d      	add	r3, pc, #436	; (adr r3, 80072e0 <_dtoa_r+0x2e8>)
 800712a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712e:	f7f9 f8ad 	bl	800028c <__adddf3>
 8007132:	4606      	mov	r6, r0
 8007134:	4628      	mov	r0, r5
 8007136:	460f      	mov	r7, r1
 8007138:	f7f9 f9f4 	bl	8000524 <__aeabi_i2d>
 800713c:	a36a      	add	r3, pc, #424	; (adr r3, 80072e8 <_dtoa_r+0x2f0>)
 800713e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007142:	f7f9 fa59 	bl	80005f8 <__aeabi_dmul>
 8007146:	4602      	mov	r2, r0
 8007148:	460b      	mov	r3, r1
 800714a:	4630      	mov	r0, r6
 800714c:	4639      	mov	r1, r7
 800714e:	f7f9 f89d 	bl	800028c <__adddf3>
 8007152:	4606      	mov	r6, r0
 8007154:	460f      	mov	r7, r1
 8007156:	f7f9 fcff 	bl	8000b58 <__aeabi_d2iz>
 800715a:	2200      	movs	r2, #0
 800715c:	4682      	mov	sl, r0
 800715e:	2300      	movs	r3, #0
 8007160:	4630      	mov	r0, r6
 8007162:	4639      	mov	r1, r7
 8007164:	f7f9 fcba 	bl	8000adc <__aeabi_dcmplt>
 8007168:	b148      	cbz	r0, 800717e <_dtoa_r+0x186>
 800716a:	4650      	mov	r0, sl
 800716c:	f7f9 f9da 	bl	8000524 <__aeabi_i2d>
 8007170:	4632      	mov	r2, r6
 8007172:	463b      	mov	r3, r7
 8007174:	f7f9 fca8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007178:	b908      	cbnz	r0, 800717e <_dtoa_r+0x186>
 800717a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800717e:	f1ba 0f16 	cmp.w	sl, #22
 8007182:	d854      	bhi.n	800722e <_dtoa_r+0x236>
 8007184:	4b61      	ldr	r3, [pc, #388]	; (800730c <_dtoa_r+0x314>)
 8007186:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800718a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007192:	f7f9 fca3 	bl	8000adc <__aeabi_dcmplt>
 8007196:	2800      	cmp	r0, #0
 8007198:	d04b      	beq.n	8007232 <_dtoa_r+0x23a>
 800719a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800719e:	2300      	movs	r3, #0
 80071a0:	930e      	str	r3, [sp, #56]	; 0x38
 80071a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80071a4:	1b5d      	subs	r5, r3, r5
 80071a6:	1e6b      	subs	r3, r5, #1
 80071a8:	9304      	str	r3, [sp, #16]
 80071aa:	bf43      	ittte	mi
 80071ac:	2300      	movmi	r3, #0
 80071ae:	f1c5 0801 	rsbmi	r8, r5, #1
 80071b2:	9304      	strmi	r3, [sp, #16]
 80071b4:	f04f 0800 	movpl.w	r8, #0
 80071b8:	f1ba 0f00 	cmp.w	sl, #0
 80071bc:	db3b      	blt.n	8007236 <_dtoa_r+0x23e>
 80071be:	9b04      	ldr	r3, [sp, #16]
 80071c0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80071c4:	4453      	add	r3, sl
 80071c6:	9304      	str	r3, [sp, #16]
 80071c8:	2300      	movs	r3, #0
 80071ca:	9306      	str	r3, [sp, #24]
 80071cc:	9b05      	ldr	r3, [sp, #20]
 80071ce:	2b09      	cmp	r3, #9
 80071d0:	d869      	bhi.n	80072a6 <_dtoa_r+0x2ae>
 80071d2:	2b05      	cmp	r3, #5
 80071d4:	bfc4      	itt	gt
 80071d6:	3b04      	subgt	r3, #4
 80071d8:	9305      	strgt	r3, [sp, #20]
 80071da:	9b05      	ldr	r3, [sp, #20]
 80071dc:	f1a3 0302 	sub.w	r3, r3, #2
 80071e0:	bfcc      	ite	gt
 80071e2:	2500      	movgt	r5, #0
 80071e4:	2501      	movle	r5, #1
 80071e6:	2b03      	cmp	r3, #3
 80071e8:	d869      	bhi.n	80072be <_dtoa_r+0x2c6>
 80071ea:	e8df f003 	tbb	[pc, r3]
 80071ee:	4e2c      	.short	0x4e2c
 80071f0:	5a4c      	.short	0x5a4c
 80071f2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80071f6:	441d      	add	r5, r3
 80071f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80071fc:	2b20      	cmp	r3, #32
 80071fe:	bfc1      	itttt	gt
 8007200:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007204:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007208:	fa09 f303 	lslgt.w	r3, r9, r3
 800720c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007210:	bfda      	itte	le
 8007212:	f1c3 0320 	rsble	r3, r3, #32
 8007216:	fa06 f003 	lslle.w	r0, r6, r3
 800721a:	4318      	orrgt	r0, r3
 800721c:	f7f9 f972 	bl	8000504 <__aeabi_ui2d>
 8007220:	2301      	movs	r3, #1
 8007222:	4606      	mov	r6, r0
 8007224:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007228:	3d01      	subs	r5, #1
 800722a:	9310      	str	r3, [sp, #64]	; 0x40
 800722c:	e771      	b.n	8007112 <_dtoa_r+0x11a>
 800722e:	2301      	movs	r3, #1
 8007230:	e7b6      	b.n	80071a0 <_dtoa_r+0x1a8>
 8007232:	900e      	str	r0, [sp, #56]	; 0x38
 8007234:	e7b5      	b.n	80071a2 <_dtoa_r+0x1aa>
 8007236:	f1ca 0300 	rsb	r3, sl, #0
 800723a:	9306      	str	r3, [sp, #24]
 800723c:	2300      	movs	r3, #0
 800723e:	eba8 080a 	sub.w	r8, r8, sl
 8007242:	930d      	str	r3, [sp, #52]	; 0x34
 8007244:	e7c2      	b.n	80071cc <_dtoa_r+0x1d4>
 8007246:	2300      	movs	r3, #0
 8007248:	9308      	str	r3, [sp, #32]
 800724a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800724c:	2b00      	cmp	r3, #0
 800724e:	dc39      	bgt.n	80072c4 <_dtoa_r+0x2cc>
 8007250:	f04f 0901 	mov.w	r9, #1
 8007254:	f8cd 9004 	str.w	r9, [sp, #4]
 8007258:	464b      	mov	r3, r9
 800725a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800725e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007260:	2200      	movs	r2, #0
 8007262:	6042      	str	r2, [r0, #4]
 8007264:	2204      	movs	r2, #4
 8007266:	f102 0614 	add.w	r6, r2, #20
 800726a:	429e      	cmp	r6, r3
 800726c:	6841      	ldr	r1, [r0, #4]
 800726e:	d92f      	bls.n	80072d0 <_dtoa_r+0x2d8>
 8007270:	4620      	mov	r0, r4
 8007272:	f001 fa5d 	bl	8008730 <_Balloc>
 8007276:	9000      	str	r0, [sp, #0]
 8007278:	2800      	cmp	r0, #0
 800727a:	d14b      	bne.n	8007314 <_dtoa_r+0x31c>
 800727c:	4b24      	ldr	r3, [pc, #144]	; (8007310 <_dtoa_r+0x318>)
 800727e:	4602      	mov	r2, r0
 8007280:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007284:	e6d1      	b.n	800702a <_dtoa_r+0x32>
 8007286:	2301      	movs	r3, #1
 8007288:	e7de      	b.n	8007248 <_dtoa_r+0x250>
 800728a:	2300      	movs	r3, #0
 800728c:	9308      	str	r3, [sp, #32]
 800728e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007290:	eb0a 0903 	add.w	r9, sl, r3
 8007294:	f109 0301 	add.w	r3, r9, #1
 8007298:	2b01      	cmp	r3, #1
 800729a:	9301      	str	r3, [sp, #4]
 800729c:	bfb8      	it	lt
 800729e:	2301      	movlt	r3, #1
 80072a0:	e7dd      	b.n	800725e <_dtoa_r+0x266>
 80072a2:	2301      	movs	r3, #1
 80072a4:	e7f2      	b.n	800728c <_dtoa_r+0x294>
 80072a6:	2501      	movs	r5, #1
 80072a8:	2300      	movs	r3, #0
 80072aa:	9305      	str	r3, [sp, #20]
 80072ac:	9508      	str	r5, [sp, #32]
 80072ae:	f04f 39ff 	mov.w	r9, #4294967295
 80072b2:	2200      	movs	r2, #0
 80072b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80072b8:	2312      	movs	r3, #18
 80072ba:	9209      	str	r2, [sp, #36]	; 0x24
 80072bc:	e7cf      	b.n	800725e <_dtoa_r+0x266>
 80072be:	2301      	movs	r3, #1
 80072c0:	9308      	str	r3, [sp, #32]
 80072c2:	e7f4      	b.n	80072ae <_dtoa_r+0x2b6>
 80072c4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80072c8:	f8cd 9004 	str.w	r9, [sp, #4]
 80072cc:	464b      	mov	r3, r9
 80072ce:	e7c6      	b.n	800725e <_dtoa_r+0x266>
 80072d0:	3101      	adds	r1, #1
 80072d2:	6041      	str	r1, [r0, #4]
 80072d4:	0052      	lsls	r2, r2, #1
 80072d6:	e7c6      	b.n	8007266 <_dtoa_r+0x26e>
 80072d8:	636f4361 	.word	0x636f4361
 80072dc:	3fd287a7 	.word	0x3fd287a7
 80072e0:	8b60c8b3 	.word	0x8b60c8b3
 80072e4:	3fc68a28 	.word	0x3fc68a28
 80072e8:	509f79fb 	.word	0x509f79fb
 80072ec:	3fd34413 	.word	0x3fd34413
 80072f0:	08009dce 	.word	0x08009dce
 80072f4:	08009de5 	.word	0x08009de5
 80072f8:	7ff00000 	.word	0x7ff00000
 80072fc:	08009dca 	.word	0x08009dca
 8007300:	08009dc1 	.word	0x08009dc1
 8007304:	08009c45 	.word	0x08009c45
 8007308:	3ff80000 	.word	0x3ff80000
 800730c:	08009fc0 	.word	0x08009fc0
 8007310:	08009e44 	.word	0x08009e44
 8007314:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007316:	9a00      	ldr	r2, [sp, #0]
 8007318:	601a      	str	r2, [r3, #0]
 800731a:	9b01      	ldr	r3, [sp, #4]
 800731c:	2b0e      	cmp	r3, #14
 800731e:	f200 80ad 	bhi.w	800747c <_dtoa_r+0x484>
 8007322:	2d00      	cmp	r5, #0
 8007324:	f000 80aa 	beq.w	800747c <_dtoa_r+0x484>
 8007328:	f1ba 0f00 	cmp.w	sl, #0
 800732c:	dd36      	ble.n	800739c <_dtoa_r+0x3a4>
 800732e:	4ac3      	ldr	r2, [pc, #780]	; (800763c <_dtoa_r+0x644>)
 8007330:	f00a 030f 	and.w	r3, sl, #15
 8007334:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007338:	ed93 7b00 	vldr	d7, [r3]
 800733c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007340:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007344:	eeb0 8a47 	vmov.f32	s16, s14
 8007348:	eef0 8a67 	vmov.f32	s17, s15
 800734c:	d016      	beq.n	800737c <_dtoa_r+0x384>
 800734e:	4bbc      	ldr	r3, [pc, #752]	; (8007640 <_dtoa_r+0x648>)
 8007350:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007354:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007358:	f7f9 fa78 	bl	800084c <__aeabi_ddiv>
 800735c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007360:	f007 070f 	and.w	r7, r7, #15
 8007364:	2503      	movs	r5, #3
 8007366:	4eb6      	ldr	r6, [pc, #728]	; (8007640 <_dtoa_r+0x648>)
 8007368:	b957      	cbnz	r7, 8007380 <_dtoa_r+0x388>
 800736a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800736e:	ec53 2b18 	vmov	r2, r3, d8
 8007372:	f7f9 fa6b 	bl	800084c <__aeabi_ddiv>
 8007376:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800737a:	e029      	b.n	80073d0 <_dtoa_r+0x3d8>
 800737c:	2502      	movs	r5, #2
 800737e:	e7f2      	b.n	8007366 <_dtoa_r+0x36e>
 8007380:	07f9      	lsls	r1, r7, #31
 8007382:	d508      	bpl.n	8007396 <_dtoa_r+0x39e>
 8007384:	ec51 0b18 	vmov	r0, r1, d8
 8007388:	e9d6 2300 	ldrd	r2, r3, [r6]
 800738c:	f7f9 f934 	bl	80005f8 <__aeabi_dmul>
 8007390:	ec41 0b18 	vmov	d8, r0, r1
 8007394:	3501      	adds	r5, #1
 8007396:	107f      	asrs	r7, r7, #1
 8007398:	3608      	adds	r6, #8
 800739a:	e7e5      	b.n	8007368 <_dtoa_r+0x370>
 800739c:	f000 80a6 	beq.w	80074ec <_dtoa_r+0x4f4>
 80073a0:	f1ca 0600 	rsb	r6, sl, #0
 80073a4:	4ba5      	ldr	r3, [pc, #660]	; (800763c <_dtoa_r+0x644>)
 80073a6:	4fa6      	ldr	r7, [pc, #664]	; (8007640 <_dtoa_r+0x648>)
 80073a8:	f006 020f 	and.w	r2, r6, #15
 80073ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80073b8:	f7f9 f91e 	bl	80005f8 <__aeabi_dmul>
 80073bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073c0:	1136      	asrs	r6, r6, #4
 80073c2:	2300      	movs	r3, #0
 80073c4:	2502      	movs	r5, #2
 80073c6:	2e00      	cmp	r6, #0
 80073c8:	f040 8085 	bne.w	80074d6 <_dtoa_r+0x4de>
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d1d2      	bne.n	8007376 <_dtoa_r+0x37e>
 80073d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	f000 808c 	beq.w	80074f0 <_dtoa_r+0x4f8>
 80073d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80073dc:	4b99      	ldr	r3, [pc, #612]	; (8007644 <_dtoa_r+0x64c>)
 80073de:	2200      	movs	r2, #0
 80073e0:	4630      	mov	r0, r6
 80073e2:	4639      	mov	r1, r7
 80073e4:	f7f9 fb7a 	bl	8000adc <__aeabi_dcmplt>
 80073e8:	2800      	cmp	r0, #0
 80073ea:	f000 8081 	beq.w	80074f0 <_dtoa_r+0x4f8>
 80073ee:	9b01      	ldr	r3, [sp, #4]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d07d      	beq.n	80074f0 <_dtoa_r+0x4f8>
 80073f4:	f1b9 0f00 	cmp.w	r9, #0
 80073f8:	dd3c      	ble.n	8007474 <_dtoa_r+0x47c>
 80073fa:	f10a 33ff 	add.w	r3, sl, #4294967295
 80073fe:	9307      	str	r3, [sp, #28]
 8007400:	2200      	movs	r2, #0
 8007402:	4b91      	ldr	r3, [pc, #580]	; (8007648 <_dtoa_r+0x650>)
 8007404:	4630      	mov	r0, r6
 8007406:	4639      	mov	r1, r7
 8007408:	f7f9 f8f6 	bl	80005f8 <__aeabi_dmul>
 800740c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007410:	3501      	adds	r5, #1
 8007412:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007416:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800741a:	4628      	mov	r0, r5
 800741c:	f7f9 f882 	bl	8000524 <__aeabi_i2d>
 8007420:	4632      	mov	r2, r6
 8007422:	463b      	mov	r3, r7
 8007424:	f7f9 f8e8 	bl	80005f8 <__aeabi_dmul>
 8007428:	4b88      	ldr	r3, [pc, #544]	; (800764c <_dtoa_r+0x654>)
 800742a:	2200      	movs	r2, #0
 800742c:	f7f8 ff2e 	bl	800028c <__adddf3>
 8007430:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007434:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007438:	9303      	str	r3, [sp, #12]
 800743a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800743c:	2b00      	cmp	r3, #0
 800743e:	d15c      	bne.n	80074fa <_dtoa_r+0x502>
 8007440:	4b83      	ldr	r3, [pc, #524]	; (8007650 <_dtoa_r+0x658>)
 8007442:	2200      	movs	r2, #0
 8007444:	4630      	mov	r0, r6
 8007446:	4639      	mov	r1, r7
 8007448:	f7f8 ff1e 	bl	8000288 <__aeabi_dsub>
 800744c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007450:	4606      	mov	r6, r0
 8007452:	460f      	mov	r7, r1
 8007454:	f7f9 fb60 	bl	8000b18 <__aeabi_dcmpgt>
 8007458:	2800      	cmp	r0, #0
 800745a:	f040 8296 	bne.w	800798a <_dtoa_r+0x992>
 800745e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007462:	4630      	mov	r0, r6
 8007464:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007468:	4639      	mov	r1, r7
 800746a:	f7f9 fb37 	bl	8000adc <__aeabi_dcmplt>
 800746e:	2800      	cmp	r0, #0
 8007470:	f040 8288 	bne.w	8007984 <_dtoa_r+0x98c>
 8007474:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007478:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800747c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800747e:	2b00      	cmp	r3, #0
 8007480:	f2c0 8158 	blt.w	8007734 <_dtoa_r+0x73c>
 8007484:	f1ba 0f0e 	cmp.w	sl, #14
 8007488:	f300 8154 	bgt.w	8007734 <_dtoa_r+0x73c>
 800748c:	4b6b      	ldr	r3, [pc, #428]	; (800763c <_dtoa_r+0x644>)
 800748e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007492:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007498:	2b00      	cmp	r3, #0
 800749a:	f280 80e3 	bge.w	8007664 <_dtoa_r+0x66c>
 800749e:	9b01      	ldr	r3, [sp, #4]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f300 80df 	bgt.w	8007664 <_dtoa_r+0x66c>
 80074a6:	f040 826d 	bne.w	8007984 <_dtoa_r+0x98c>
 80074aa:	4b69      	ldr	r3, [pc, #420]	; (8007650 <_dtoa_r+0x658>)
 80074ac:	2200      	movs	r2, #0
 80074ae:	4640      	mov	r0, r8
 80074b0:	4649      	mov	r1, r9
 80074b2:	f7f9 f8a1 	bl	80005f8 <__aeabi_dmul>
 80074b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074ba:	f7f9 fb23 	bl	8000b04 <__aeabi_dcmpge>
 80074be:	9e01      	ldr	r6, [sp, #4]
 80074c0:	4637      	mov	r7, r6
 80074c2:	2800      	cmp	r0, #0
 80074c4:	f040 8243 	bne.w	800794e <_dtoa_r+0x956>
 80074c8:	9d00      	ldr	r5, [sp, #0]
 80074ca:	2331      	movs	r3, #49	; 0x31
 80074cc:	f805 3b01 	strb.w	r3, [r5], #1
 80074d0:	f10a 0a01 	add.w	sl, sl, #1
 80074d4:	e23f      	b.n	8007956 <_dtoa_r+0x95e>
 80074d6:	07f2      	lsls	r2, r6, #31
 80074d8:	d505      	bpl.n	80074e6 <_dtoa_r+0x4ee>
 80074da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074de:	f7f9 f88b 	bl	80005f8 <__aeabi_dmul>
 80074e2:	3501      	adds	r5, #1
 80074e4:	2301      	movs	r3, #1
 80074e6:	1076      	asrs	r6, r6, #1
 80074e8:	3708      	adds	r7, #8
 80074ea:	e76c      	b.n	80073c6 <_dtoa_r+0x3ce>
 80074ec:	2502      	movs	r5, #2
 80074ee:	e76f      	b.n	80073d0 <_dtoa_r+0x3d8>
 80074f0:	9b01      	ldr	r3, [sp, #4]
 80074f2:	f8cd a01c 	str.w	sl, [sp, #28]
 80074f6:	930c      	str	r3, [sp, #48]	; 0x30
 80074f8:	e78d      	b.n	8007416 <_dtoa_r+0x41e>
 80074fa:	9900      	ldr	r1, [sp, #0]
 80074fc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80074fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007500:	4b4e      	ldr	r3, [pc, #312]	; (800763c <_dtoa_r+0x644>)
 8007502:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007506:	4401      	add	r1, r0
 8007508:	9102      	str	r1, [sp, #8]
 800750a:	9908      	ldr	r1, [sp, #32]
 800750c:	eeb0 8a47 	vmov.f32	s16, s14
 8007510:	eef0 8a67 	vmov.f32	s17, s15
 8007514:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007518:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800751c:	2900      	cmp	r1, #0
 800751e:	d045      	beq.n	80075ac <_dtoa_r+0x5b4>
 8007520:	494c      	ldr	r1, [pc, #304]	; (8007654 <_dtoa_r+0x65c>)
 8007522:	2000      	movs	r0, #0
 8007524:	f7f9 f992 	bl	800084c <__aeabi_ddiv>
 8007528:	ec53 2b18 	vmov	r2, r3, d8
 800752c:	f7f8 feac 	bl	8000288 <__aeabi_dsub>
 8007530:	9d00      	ldr	r5, [sp, #0]
 8007532:	ec41 0b18 	vmov	d8, r0, r1
 8007536:	4639      	mov	r1, r7
 8007538:	4630      	mov	r0, r6
 800753a:	f7f9 fb0d 	bl	8000b58 <__aeabi_d2iz>
 800753e:	900c      	str	r0, [sp, #48]	; 0x30
 8007540:	f7f8 fff0 	bl	8000524 <__aeabi_i2d>
 8007544:	4602      	mov	r2, r0
 8007546:	460b      	mov	r3, r1
 8007548:	4630      	mov	r0, r6
 800754a:	4639      	mov	r1, r7
 800754c:	f7f8 fe9c 	bl	8000288 <__aeabi_dsub>
 8007550:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007552:	3330      	adds	r3, #48	; 0x30
 8007554:	f805 3b01 	strb.w	r3, [r5], #1
 8007558:	ec53 2b18 	vmov	r2, r3, d8
 800755c:	4606      	mov	r6, r0
 800755e:	460f      	mov	r7, r1
 8007560:	f7f9 fabc 	bl	8000adc <__aeabi_dcmplt>
 8007564:	2800      	cmp	r0, #0
 8007566:	d165      	bne.n	8007634 <_dtoa_r+0x63c>
 8007568:	4632      	mov	r2, r6
 800756a:	463b      	mov	r3, r7
 800756c:	4935      	ldr	r1, [pc, #212]	; (8007644 <_dtoa_r+0x64c>)
 800756e:	2000      	movs	r0, #0
 8007570:	f7f8 fe8a 	bl	8000288 <__aeabi_dsub>
 8007574:	ec53 2b18 	vmov	r2, r3, d8
 8007578:	f7f9 fab0 	bl	8000adc <__aeabi_dcmplt>
 800757c:	2800      	cmp	r0, #0
 800757e:	f040 80b9 	bne.w	80076f4 <_dtoa_r+0x6fc>
 8007582:	9b02      	ldr	r3, [sp, #8]
 8007584:	429d      	cmp	r5, r3
 8007586:	f43f af75 	beq.w	8007474 <_dtoa_r+0x47c>
 800758a:	4b2f      	ldr	r3, [pc, #188]	; (8007648 <_dtoa_r+0x650>)
 800758c:	ec51 0b18 	vmov	r0, r1, d8
 8007590:	2200      	movs	r2, #0
 8007592:	f7f9 f831 	bl	80005f8 <__aeabi_dmul>
 8007596:	4b2c      	ldr	r3, [pc, #176]	; (8007648 <_dtoa_r+0x650>)
 8007598:	ec41 0b18 	vmov	d8, r0, r1
 800759c:	2200      	movs	r2, #0
 800759e:	4630      	mov	r0, r6
 80075a0:	4639      	mov	r1, r7
 80075a2:	f7f9 f829 	bl	80005f8 <__aeabi_dmul>
 80075a6:	4606      	mov	r6, r0
 80075a8:	460f      	mov	r7, r1
 80075aa:	e7c4      	b.n	8007536 <_dtoa_r+0x53e>
 80075ac:	ec51 0b17 	vmov	r0, r1, d7
 80075b0:	f7f9 f822 	bl	80005f8 <__aeabi_dmul>
 80075b4:	9b02      	ldr	r3, [sp, #8]
 80075b6:	9d00      	ldr	r5, [sp, #0]
 80075b8:	930c      	str	r3, [sp, #48]	; 0x30
 80075ba:	ec41 0b18 	vmov	d8, r0, r1
 80075be:	4639      	mov	r1, r7
 80075c0:	4630      	mov	r0, r6
 80075c2:	f7f9 fac9 	bl	8000b58 <__aeabi_d2iz>
 80075c6:	9011      	str	r0, [sp, #68]	; 0x44
 80075c8:	f7f8 ffac 	bl	8000524 <__aeabi_i2d>
 80075cc:	4602      	mov	r2, r0
 80075ce:	460b      	mov	r3, r1
 80075d0:	4630      	mov	r0, r6
 80075d2:	4639      	mov	r1, r7
 80075d4:	f7f8 fe58 	bl	8000288 <__aeabi_dsub>
 80075d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075da:	3330      	adds	r3, #48	; 0x30
 80075dc:	f805 3b01 	strb.w	r3, [r5], #1
 80075e0:	9b02      	ldr	r3, [sp, #8]
 80075e2:	429d      	cmp	r5, r3
 80075e4:	4606      	mov	r6, r0
 80075e6:	460f      	mov	r7, r1
 80075e8:	f04f 0200 	mov.w	r2, #0
 80075ec:	d134      	bne.n	8007658 <_dtoa_r+0x660>
 80075ee:	4b19      	ldr	r3, [pc, #100]	; (8007654 <_dtoa_r+0x65c>)
 80075f0:	ec51 0b18 	vmov	r0, r1, d8
 80075f4:	f7f8 fe4a 	bl	800028c <__adddf3>
 80075f8:	4602      	mov	r2, r0
 80075fa:	460b      	mov	r3, r1
 80075fc:	4630      	mov	r0, r6
 80075fe:	4639      	mov	r1, r7
 8007600:	f7f9 fa8a 	bl	8000b18 <__aeabi_dcmpgt>
 8007604:	2800      	cmp	r0, #0
 8007606:	d175      	bne.n	80076f4 <_dtoa_r+0x6fc>
 8007608:	ec53 2b18 	vmov	r2, r3, d8
 800760c:	4911      	ldr	r1, [pc, #68]	; (8007654 <_dtoa_r+0x65c>)
 800760e:	2000      	movs	r0, #0
 8007610:	f7f8 fe3a 	bl	8000288 <__aeabi_dsub>
 8007614:	4602      	mov	r2, r0
 8007616:	460b      	mov	r3, r1
 8007618:	4630      	mov	r0, r6
 800761a:	4639      	mov	r1, r7
 800761c:	f7f9 fa5e 	bl	8000adc <__aeabi_dcmplt>
 8007620:	2800      	cmp	r0, #0
 8007622:	f43f af27 	beq.w	8007474 <_dtoa_r+0x47c>
 8007626:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007628:	1e6b      	subs	r3, r5, #1
 800762a:	930c      	str	r3, [sp, #48]	; 0x30
 800762c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007630:	2b30      	cmp	r3, #48	; 0x30
 8007632:	d0f8      	beq.n	8007626 <_dtoa_r+0x62e>
 8007634:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007638:	e04a      	b.n	80076d0 <_dtoa_r+0x6d8>
 800763a:	bf00      	nop
 800763c:	08009fc0 	.word	0x08009fc0
 8007640:	08009f98 	.word	0x08009f98
 8007644:	3ff00000 	.word	0x3ff00000
 8007648:	40240000 	.word	0x40240000
 800764c:	401c0000 	.word	0x401c0000
 8007650:	40140000 	.word	0x40140000
 8007654:	3fe00000 	.word	0x3fe00000
 8007658:	4baf      	ldr	r3, [pc, #700]	; (8007918 <_dtoa_r+0x920>)
 800765a:	f7f8 ffcd 	bl	80005f8 <__aeabi_dmul>
 800765e:	4606      	mov	r6, r0
 8007660:	460f      	mov	r7, r1
 8007662:	e7ac      	b.n	80075be <_dtoa_r+0x5c6>
 8007664:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007668:	9d00      	ldr	r5, [sp, #0]
 800766a:	4642      	mov	r2, r8
 800766c:	464b      	mov	r3, r9
 800766e:	4630      	mov	r0, r6
 8007670:	4639      	mov	r1, r7
 8007672:	f7f9 f8eb 	bl	800084c <__aeabi_ddiv>
 8007676:	f7f9 fa6f 	bl	8000b58 <__aeabi_d2iz>
 800767a:	9002      	str	r0, [sp, #8]
 800767c:	f7f8 ff52 	bl	8000524 <__aeabi_i2d>
 8007680:	4642      	mov	r2, r8
 8007682:	464b      	mov	r3, r9
 8007684:	f7f8 ffb8 	bl	80005f8 <__aeabi_dmul>
 8007688:	4602      	mov	r2, r0
 800768a:	460b      	mov	r3, r1
 800768c:	4630      	mov	r0, r6
 800768e:	4639      	mov	r1, r7
 8007690:	f7f8 fdfa 	bl	8000288 <__aeabi_dsub>
 8007694:	9e02      	ldr	r6, [sp, #8]
 8007696:	9f01      	ldr	r7, [sp, #4]
 8007698:	3630      	adds	r6, #48	; 0x30
 800769a:	f805 6b01 	strb.w	r6, [r5], #1
 800769e:	9e00      	ldr	r6, [sp, #0]
 80076a0:	1bae      	subs	r6, r5, r6
 80076a2:	42b7      	cmp	r7, r6
 80076a4:	4602      	mov	r2, r0
 80076a6:	460b      	mov	r3, r1
 80076a8:	d137      	bne.n	800771a <_dtoa_r+0x722>
 80076aa:	f7f8 fdef 	bl	800028c <__adddf3>
 80076ae:	4642      	mov	r2, r8
 80076b0:	464b      	mov	r3, r9
 80076b2:	4606      	mov	r6, r0
 80076b4:	460f      	mov	r7, r1
 80076b6:	f7f9 fa2f 	bl	8000b18 <__aeabi_dcmpgt>
 80076ba:	b9c8      	cbnz	r0, 80076f0 <_dtoa_r+0x6f8>
 80076bc:	4642      	mov	r2, r8
 80076be:	464b      	mov	r3, r9
 80076c0:	4630      	mov	r0, r6
 80076c2:	4639      	mov	r1, r7
 80076c4:	f7f9 fa00 	bl	8000ac8 <__aeabi_dcmpeq>
 80076c8:	b110      	cbz	r0, 80076d0 <_dtoa_r+0x6d8>
 80076ca:	9b02      	ldr	r3, [sp, #8]
 80076cc:	07d9      	lsls	r1, r3, #31
 80076ce:	d40f      	bmi.n	80076f0 <_dtoa_r+0x6f8>
 80076d0:	4620      	mov	r0, r4
 80076d2:	4659      	mov	r1, fp
 80076d4:	f001 f86c 	bl	80087b0 <_Bfree>
 80076d8:	2300      	movs	r3, #0
 80076da:	702b      	strb	r3, [r5, #0]
 80076dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076de:	f10a 0001 	add.w	r0, sl, #1
 80076e2:	6018      	str	r0, [r3, #0]
 80076e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	f43f acd8 	beq.w	800709c <_dtoa_r+0xa4>
 80076ec:	601d      	str	r5, [r3, #0]
 80076ee:	e4d5      	b.n	800709c <_dtoa_r+0xa4>
 80076f0:	f8cd a01c 	str.w	sl, [sp, #28]
 80076f4:	462b      	mov	r3, r5
 80076f6:	461d      	mov	r5, r3
 80076f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076fc:	2a39      	cmp	r2, #57	; 0x39
 80076fe:	d108      	bne.n	8007712 <_dtoa_r+0x71a>
 8007700:	9a00      	ldr	r2, [sp, #0]
 8007702:	429a      	cmp	r2, r3
 8007704:	d1f7      	bne.n	80076f6 <_dtoa_r+0x6fe>
 8007706:	9a07      	ldr	r2, [sp, #28]
 8007708:	9900      	ldr	r1, [sp, #0]
 800770a:	3201      	adds	r2, #1
 800770c:	9207      	str	r2, [sp, #28]
 800770e:	2230      	movs	r2, #48	; 0x30
 8007710:	700a      	strb	r2, [r1, #0]
 8007712:	781a      	ldrb	r2, [r3, #0]
 8007714:	3201      	adds	r2, #1
 8007716:	701a      	strb	r2, [r3, #0]
 8007718:	e78c      	b.n	8007634 <_dtoa_r+0x63c>
 800771a:	4b7f      	ldr	r3, [pc, #508]	; (8007918 <_dtoa_r+0x920>)
 800771c:	2200      	movs	r2, #0
 800771e:	f7f8 ff6b 	bl	80005f8 <__aeabi_dmul>
 8007722:	2200      	movs	r2, #0
 8007724:	2300      	movs	r3, #0
 8007726:	4606      	mov	r6, r0
 8007728:	460f      	mov	r7, r1
 800772a:	f7f9 f9cd 	bl	8000ac8 <__aeabi_dcmpeq>
 800772e:	2800      	cmp	r0, #0
 8007730:	d09b      	beq.n	800766a <_dtoa_r+0x672>
 8007732:	e7cd      	b.n	80076d0 <_dtoa_r+0x6d8>
 8007734:	9a08      	ldr	r2, [sp, #32]
 8007736:	2a00      	cmp	r2, #0
 8007738:	f000 80c4 	beq.w	80078c4 <_dtoa_r+0x8cc>
 800773c:	9a05      	ldr	r2, [sp, #20]
 800773e:	2a01      	cmp	r2, #1
 8007740:	f300 80a8 	bgt.w	8007894 <_dtoa_r+0x89c>
 8007744:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007746:	2a00      	cmp	r2, #0
 8007748:	f000 80a0 	beq.w	800788c <_dtoa_r+0x894>
 800774c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007750:	9e06      	ldr	r6, [sp, #24]
 8007752:	4645      	mov	r5, r8
 8007754:	9a04      	ldr	r2, [sp, #16]
 8007756:	2101      	movs	r1, #1
 8007758:	441a      	add	r2, r3
 800775a:	4620      	mov	r0, r4
 800775c:	4498      	add	r8, r3
 800775e:	9204      	str	r2, [sp, #16]
 8007760:	f001 f92c 	bl	80089bc <__i2b>
 8007764:	4607      	mov	r7, r0
 8007766:	2d00      	cmp	r5, #0
 8007768:	dd0b      	ble.n	8007782 <_dtoa_r+0x78a>
 800776a:	9b04      	ldr	r3, [sp, #16]
 800776c:	2b00      	cmp	r3, #0
 800776e:	dd08      	ble.n	8007782 <_dtoa_r+0x78a>
 8007770:	42ab      	cmp	r3, r5
 8007772:	9a04      	ldr	r2, [sp, #16]
 8007774:	bfa8      	it	ge
 8007776:	462b      	movge	r3, r5
 8007778:	eba8 0803 	sub.w	r8, r8, r3
 800777c:	1aed      	subs	r5, r5, r3
 800777e:	1ad3      	subs	r3, r2, r3
 8007780:	9304      	str	r3, [sp, #16]
 8007782:	9b06      	ldr	r3, [sp, #24]
 8007784:	b1fb      	cbz	r3, 80077c6 <_dtoa_r+0x7ce>
 8007786:	9b08      	ldr	r3, [sp, #32]
 8007788:	2b00      	cmp	r3, #0
 800778a:	f000 809f 	beq.w	80078cc <_dtoa_r+0x8d4>
 800778e:	2e00      	cmp	r6, #0
 8007790:	dd11      	ble.n	80077b6 <_dtoa_r+0x7be>
 8007792:	4639      	mov	r1, r7
 8007794:	4632      	mov	r2, r6
 8007796:	4620      	mov	r0, r4
 8007798:	f001 f9cc 	bl	8008b34 <__pow5mult>
 800779c:	465a      	mov	r2, fp
 800779e:	4601      	mov	r1, r0
 80077a0:	4607      	mov	r7, r0
 80077a2:	4620      	mov	r0, r4
 80077a4:	f001 f920 	bl	80089e8 <__multiply>
 80077a8:	4659      	mov	r1, fp
 80077aa:	9007      	str	r0, [sp, #28]
 80077ac:	4620      	mov	r0, r4
 80077ae:	f000 ffff 	bl	80087b0 <_Bfree>
 80077b2:	9b07      	ldr	r3, [sp, #28]
 80077b4:	469b      	mov	fp, r3
 80077b6:	9b06      	ldr	r3, [sp, #24]
 80077b8:	1b9a      	subs	r2, r3, r6
 80077ba:	d004      	beq.n	80077c6 <_dtoa_r+0x7ce>
 80077bc:	4659      	mov	r1, fp
 80077be:	4620      	mov	r0, r4
 80077c0:	f001 f9b8 	bl	8008b34 <__pow5mult>
 80077c4:	4683      	mov	fp, r0
 80077c6:	2101      	movs	r1, #1
 80077c8:	4620      	mov	r0, r4
 80077ca:	f001 f8f7 	bl	80089bc <__i2b>
 80077ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	4606      	mov	r6, r0
 80077d4:	dd7c      	ble.n	80078d0 <_dtoa_r+0x8d8>
 80077d6:	461a      	mov	r2, r3
 80077d8:	4601      	mov	r1, r0
 80077da:	4620      	mov	r0, r4
 80077dc:	f001 f9aa 	bl	8008b34 <__pow5mult>
 80077e0:	9b05      	ldr	r3, [sp, #20]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	4606      	mov	r6, r0
 80077e6:	dd76      	ble.n	80078d6 <_dtoa_r+0x8de>
 80077e8:	2300      	movs	r3, #0
 80077ea:	9306      	str	r3, [sp, #24]
 80077ec:	6933      	ldr	r3, [r6, #16]
 80077ee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80077f2:	6918      	ldr	r0, [r3, #16]
 80077f4:	f001 f892 	bl	800891c <__hi0bits>
 80077f8:	f1c0 0020 	rsb	r0, r0, #32
 80077fc:	9b04      	ldr	r3, [sp, #16]
 80077fe:	4418      	add	r0, r3
 8007800:	f010 001f 	ands.w	r0, r0, #31
 8007804:	f000 8086 	beq.w	8007914 <_dtoa_r+0x91c>
 8007808:	f1c0 0320 	rsb	r3, r0, #32
 800780c:	2b04      	cmp	r3, #4
 800780e:	dd7f      	ble.n	8007910 <_dtoa_r+0x918>
 8007810:	f1c0 001c 	rsb	r0, r0, #28
 8007814:	9b04      	ldr	r3, [sp, #16]
 8007816:	4403      	add	r3, r0
 8007818:	4480      	add	r8, r0
 800781a:	4405      	add	r5, r0
 800781c:	9304      	str	r3, [sp, #16]
 800781e:	f1b8 0f00 	cmp.w	r8, #0
 8007822:	dd05      	ble.n	8007830 <_dtoa_r+0x838>
 8007824:	4659      	mov	r1, fp
 8007826:	4642      	mov	r2, r8
 8007828:	4620      	mov	r0, r4
 800782a:	f001 f9dd 	bl	8008be8 <__lshift>
 800782e:	4683      	mov	fp, r0
 8007830:	9b04      	ldr	r3, [sp, #16]
 8007832:	2b00      	cmp	r3, #0
 8007834:	dd05      	ble.n	8007842 <_dtoa_r+0x84a>
 8007836:	4631      	mov	r1, r6
 8007838:	461a      	mov	r2, r3
 800783a:	4620      	mov	r0, r4
 800783c:	f001 f9d4 	bl	8008be8 <__lshift>
 8007840:	4606      	mov	r6, r0
 8007842:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007844:	2b00      	cmp	r3, #0
 8007846:	d069      	beq.n	800791c <_dtoa_r+0x924>
 8007848:	4631      	mov	r1, r6
 800784a:	4658      	mov	r0, fp
 800784c:	f001 fa38 	bl	8008cc0 <__mcmp>
 8007850:	2800      	cmp	r0, #0
 8007852:	da63      	bge.n	800791c <_dtoa_r+0x924>
 8007854:	2300      	movs	r3, #0
 8007856:	4659      	mov	r1, fp
 8007858:	220a      	movs	r2, #10
 800785a:	4620      	mov	r0, r4
 800785c:	f000 ffca 	bl	80087f4 <__multadd>
 8007860:	9b08      	ldr	r3, [sp, #32]
 8007862:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007866:	4683      	mov	fp, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	f000 818f 	beq.w	8007b8c <_dtoa_r+0xb94>
 800786e:	4639      	mov	r1, r7
 8007870:	2300      	movs	r3, #0
 8007872:	220a      	movs	r2, #10
 8007874:	4620      	mov	r0, r4
 8007876:	f000 ffbd 	bl	80087f4 <__multadd>
 800787a:	f1b9 0f00 	cmp.w	r9, #0
 800787e:	4607      	mov	r7, r0
 8007880:	f300 808e 	bgt.w	80079a0 <_dtoa_r+0x9a8>
 8007884:	9b05      	ldr	r3, [sp, #20]
 8007886:	2b02      	cmp	r3, #2
 8007888:	dc50      	bgt.n	800792c <_dtoa_r+0x934>
 800788a:	e089      	b.n	80079a0 <_dtoa_r+0x9a8>
 800788c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800788e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007892:	e75d      	b.n	8007750 <_dtoa_r+0x758>
 8007894:	9b01      	ldr	r3, [sp, #4]
 8007896:	1e5e      	subs	r6, r3, #1
 8007898:	9b06      	ldr	r3, [sp, #24]
 800789a:	42b3      	cmp	r3, r6
 800789c:	bfbf      	itttt	lt
 800789e:	9b06      	ldrlt	r3, [sp, #24]
 80078a0:	9606      	strlt	r6, [sp, #24]
 80078a2:	1af2      	sublt	r2, r6, r3
 80078a4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80078a6:	bfb6      	itet	lt
 80078a8:	189b      	addlt	r3, r3, r2
 80078aa:	1b9e      	subge	r6, r3, r6
 80078ac:	930d      	strlt	r3, [sp, #52]	; 0x34
 80078ae:	9b01      	ldr	r3, [sp, #4]
 80078b0:	bfb8      	it	lt
 80078b2:	2600      	movlt	r6, #0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	bfb5      	itete	lt
 80078b8:	eba8 0503 	sublt.w	r5, r8, r3
 80078bc:	9b01      	ldrge	r3, [sp, #4]
 80078be:	2300      	movlt	r3, #0
 80078c0:	4645      	movge	r5, r8
 80078c2:	e747      	b.n	8007754 <_dtoa_r+0x75c>
 80078c4:	9e06      	ldr	r6, [sp, #24]
 80078c6:	9f08      	ldr	r7, [sp, #32]
 80078c8:	4645      	mov	r5, r8
 80078ca:	e74c      	b.n	8007766 <_dtoa_r+0x76e>
 80078cc:	9a06      	ldr	r2, [sp, #24]
 80078ce:	e775      	b.n	80077bc <_dtoa_r+0x7c4>
 80078d0:	9b05      	ldr	r3, [sp, #20]
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	dc18      	bgt.n	8007908 <_dtoa_r+0x910>
 80078d6:	9b02      	ldr	r3, [sp, #8]
 80078d8:	b9b3      	cbnz	r3, 8007908 <_dtoa_r+0x910>
 80078da:	9b03      	ldr	r3, [sp, #12]
 80078dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078e0:	b9a3      	cbnz	r3, 800790c <_dtoa_r+0x914>
 80078e2:	9b03      	ldr	r3, [sp, #12]
 80078e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80078e8:	0d1b      	lsrs	r3, r3, #20
 80078ea:	051b      	lsls	r3, r3, #20
 80078ec:	b12b      	cbz	r3, 80078fa <_dtoa_r+0x902>
 80078ee:	9b04      	ldr	r3, [sp, #16]
 80078f0:	3301      	adds	r3, #1
 80078f2:	9304      	str	r3, [sp, #16]
 80078f4:	f108 0801 	add.w	r8, r8, #1
 80078f8:	2301      	movs	r3, #1
 80078fa:	9306      	str	r3, [sp, #24]
 80078fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078fe:	2b00      	cmp	r3, #0
 8007900:	f47f af74 	bne.w	80077ec <_dtoa_r+0x7f4>
 8007904:	2001      	movs	r0, #1
 8007906:	e779      	b.n	80077fc <_dtoa_r+0x804>
 8007908:	2300      	movs	r3, #0
 800790a:	e7f6      	b.n	80078fa <_dtoa_r+0x902>
 800790c:	9b02      	ldr	r3, [sp, #8]
 800790e:	e7f4      	b.n	80078fa <_dtoa_r+0x902>
 8007910:	d085      	beq.n	800781e <_dtoa_r+0x826>
 8007912:	4618      	mov	r0, r3
 8007914:	301c      	adds	r0, #28
 8007916:	e77d      	b.n	8007814 <_dtoa_r+0x81c>
 8007918:	40240000 	.word	0x40240000
 800791c:	9b01      	ldr	r3, [sp, #4]
 800791e:	2b00      	cmp	r3, #0
 8007920:	dc38      	bgt.n	8007994 <_dtoa_r+0x99c>
 8007922:	9b05      	ldr	r3, [sp, #20]
 8007924:	2b02      	cmp	r3, #2
 8007926:	dd35      	ble.n	8007994 <_dtoa_r+0x99c>
 8007928:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800792c:	f1b9 0f00 	cmp.w	r9, #0
 8007930:	d10d      	bne.n	800794e <_dtoa_r+0x956>
 8007932:	4631      	mov	r1, r6
 8007934:	464b      	mov	r3, r9
 8007936:	2205      	movs	r2, #5
 8007938:	4620      	mov	r0, r4
 800793a:	f000 ff5b 	bl	80087f4 <__multadd>
 800793e:	4601      	mov	r1, r0
 8007940:	4606      	mov	r6, r0
 8007942:	4658      	mov	r0, fp
 8007944:	f001 f9bc 	bl	8008cc0 <__mcmp>
 8007948:	2800      	cmp	r0, #0
 800794a:	f73f adbd 	bgt.w	80074c8 <_dtoa_r+0x4d0>
 800794e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007950:	9d00      	ldr	r5, [sp, #0]
 8007952:	ea6f 0a03 	mvn.w	sl, r3
 8007956:	f04f 0800 	mov.w	r8, #0
 800795a:	4631      	mov	r1, r6
 800795c:	4620      	mov	r0, r4
 800795e:	f000 ff27 	bl	80087b0 <_Bfree>
 8007962:	2f00      	cmp	r7, #0
 8007964:	f43f aeb4 	beq.w	80076d0 <_dtoa_r+0x6d8>
 8007968:	f1b8 0f00 	cmp.w	r8, #0
 800796c:	d005      	beq.n	800797a <_dtoa_r+0x982>
 800796e:	45b8      	cmp	r8, r7
 8007970:	d003      	beq.n	800797a <_dtoa_r+0x982>
 8007972:	4641      	mov	r1, r8
 8007974:	4620      	mov	r0, r4
 8007976:	f000 ff1b 	bl	80087b0 <_Bfree>
 800797a:	4639      	mov	r1, r7
 800797c:	4620      	mov	r0, r4
 800797e:	f000 ff17 	bl	80087b0 <_Bfree>
 8007982:	e6a5      	b.n	80076d0 <_dtoa_r+0x6d8>
 8007984:	2600      	movs	r6, #0
 8007986:	4637      	mov	r7, r6
 8007988:	e7e1      	b.n	800794e <_dtoa_r+0x956>
 800798a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800798c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007990:	4637      	mov	r7, r6
 8007992:	e599      	b.n	80074c8 <_dtoa_r+0x4d0>
 8007994:	9b08      	ldr	r3, [sp, #32]
 8007996:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800799a:	2b00      	cmp	r3, #0
 800799c:	f000 80fd 	beq.w	8007b9a <_dtoa_r+0xba2>
 80079a0:	2d00      	cmp	r5, #0
 80079a2:	dd05      	ble.n	80079b0 <_dtoa_r+0x9b8>
 80079a4:	4639      	mov	r1, r7
 80079a6:	462a      	mov	r2, r5
 80079a8:	4620      	mov	r0, r4
 80079aa:	f001 f91d 	bl	8008be8 <__lshift>
 80079ae:	4607      	mov	r7, r0
 80079b0:	9b06      	ldr	r3, [sp, #24]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d05c      	beq.n	8007a70 <_dtoa_r+0xa78>
 80079b6:	6879      	ldr	r1, [r7, #4]
 80079b8:	4620      	mov	r0, r4
 80079ba:	f000 feb9 	bl	8008730 <_Balloc>
 80079be:	4605      	mov	r5, r0
 80079c0:	b928      	cbnz	r0, 80079ce <_dtoa_r+0x9d6>
 80079c2:	4b80      	ldr	r3, [pc, #512]	; (8007bc4 <_dtoa_r+0xbcc>)
 80079c4:	4602      	mov	r2, r0
 80079c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80079ca:	f7ff bb2e 	b.w	800702a <_dtoa_r+0x32>
 80079ce:	693a      	ldr	r2, [r7, #16]
 80079d0:	3202      	adds	r2, #2
 80079d2:	0092      	lsls	r2, r2, #2
 80079d4:	f107 010c 	add.w	r1, r7, #12
 80079d8:	300c      	adds	r0, #12
 80079da:	f7fd fa2f 	bl	8004e3c <memcpy>
 80079de:	2201      	movs	r2, #1
 80079e0:	4629      	mov	r1, r5
 80079e2:	4620      	mov	r0, r4
 80079e4:	f001 f900 	bl	8008be8 <__lshift>
 80079e8:	9b00      	ldr	r3, [sp, #0]
 80079ea:	3301      	adds	r3, #1
 80079ec:	9301      	str	r3, [sp, #4]
 80079ee:	9b00      	ldr	r3, [sp, #0]
 80079f0:	444b      	add	r3, r9
 80079f2:	9307      	str	r3, [sp, #28]
 80079f4:	9b02      	ldr	r3, [sp, #8]
 80079f6:	f003 0301 	and.w	r3, r3, #1
 80079fa:	46b8      	mov	r8, r7
 80079fc:	9306      	str	r3, [sp, #24]
 80079fe:	4607      	mov	r7, r0
 8007a00:	9b01      	ldr	r3, [sp, #4]
 8007a02:	4631      	mov	r1, r6
 8007a04:	3b01      	subs	r3, #1
 8007a06:	4658      	mov	r0, fp
 8007a08:	9302      	str	r3, [sp, #8]
 8007a0a:	f7ff fa67 	bl	8006edc <quorem>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	3330      	adds	r3, #48	; 0x30
 8007a12:	9004      	str	r0, [sp, #16]
 8007a14:	4641      	mov	r1, r8
 8007a16:	4658      	mov	r0, fp
 8007a18:	9308      	str	r3, [sp, #32]
 8007a1a:	f001 f951 	bl	8008cc0 <__mcmp>
 8007a1e:	463a      	mov	r2, r7
 8007a20:	4681      	mov	r9, r0
 8007a22:	4631      	mov	r1, r6
 8007a24:	4620      	mov	r0, r4
 8007a26:	f001 f967 	bl	8008cf8 <__mdiff>
 8007a2a:	68c2      	ldr	r2, [r0, #12]
 8007a2c:	9b08      	ldr	r3, [sp, #32]
 8007a2e:	4605      	mov	r5, r0
 8007a30:	bb02      	cbnz	r2, 8007a74 <_dtoa_r+0xa7c>
 8007a32:	4601      	mov	r1, r0
 8007a34:	4658      	mov	r0, fp
 8007a36:	f001 f943 	bl	8008cc0 <__mcmp>
 8007a3a:	9b08      	ldr	r3, [sp, #32]
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	4629      	mov	r1, r5
 8007a40:	4620      	mov	r0, r4
 8007a42:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007a46:	f000 feb3 	bl	80087b0 <_Bfree>
 8007a4a:	9b05      	ldr	r3, [sp, #20]
 8007a4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a4e:	9d01      	ldr	r5, [sp, #4]
 8007a50:	ea43 0102 	orr.w	r1, r3, r2
 8007a54:	9b06      	ldr	r3, [sp, #24]
 8007a56:	430b      	orrs	r3, r1
 8007a58:	9b08      	ldr	r3, [sp, #32]
 8007a5a:	d10d      	bne.n	8007a78 <_dtoa_r+0xa80>
 8007a5c:	2b39      	cmp	r3, #57	; 0x39
 8007a5e:	d029      	beq.n	8007ab4 <_dtoa_r+0xabc>
 8007a60:	f1b9 0f00 	cmp.w	r9, #0
 8007a64:	dd01      	ble.n	8007a6a <_dtoa_r+0xa72>
 8007a66:	9b04      	ldr	r3, [sp, #16]
 8007a68:	3331      	adds	r3, #49	; 0x31
 8007a6a:	9a02      	ldr	r2, [sp, #8]
 8007a6c:	7013      	strb	r3, [r2, #0]
 8007a6e:	e774      	b.n	800795a <_dtoa_r+0x962>
 8007a70:	4638      	mov	r0, r7
 8007a72:	e7b9      	b.n	80079e8 <_dtoa_r+0x9f0>
 8007a74:	2201      	movs	r2, #1
 8007a76:	e7e2      	b.n	8007a3e <_dtoa_r+0xa46>
 8007a78:	f1b9 0f00 	cmp.w	r9, #0
 8007a7c:	db06      	blt.n	8007a8c <_dtoa_r+0xa94>
 8007a7e:	9905      	ldr	r1, [sp, #20]
 8007a80:	ea41 0909 	orr.w	r9, r1, r9
 8007a84:	9906      	ldr	r1, [sp, #24]
 8007a86:	ea59 0101 	orrs.w	r1, r9, r1
 8007a8a:	d120      	bne.n	8007ace <_dtoa_r+0xad6>
 8007a8c:	2a00      	cmp	r2, #0
 8007a8e:	ddec      	ble.n	8007a6a <_dtoa_r+0xa72>
 8007a90:	4659      	mov	r1, fp
 8007a92:	2201      	movs	r2, #1
 8007a94:	4620      	mov	r0, r4
 8007a96:	9301      	str	r3, [sp, #4]
 8007a98:	f001 f8a6 	bl	8008be8 <__lshift>
 8007a9c:	4631      	mov	r1, r6
 8007a9e:	4683      	mov	fp, r0
 8007aa0:	f001 f90e 	bl	8008cc0 <__mcmp>
 8007aa4:	2800      	cmp	r0, #0
 8007aa6:	9b01      	ldr	r3, [sp, #4]
 8007aa8:	dc02      	bgt.n	8007ab0 <_dtoa_r+0xab8>
 8007aaa:	d1de      	bne.n	8007a6a <_dtoa_r+0xa72>
 8007aac:	07da      	lsls	r2, r3, #31
 8007aae:	d5dc      	bpl.n	8007a6a <_dtoa_r+0xa72>
 8007ab0:	2b39      	cmp	r3, #57	; 0x39
 8007ab2:	d1d8      	bne.n	8007a66 <_dtoa_r+0xa6e>
 8007ab4:	9a02      	ldr	r2, [sp, #8]
 8007ab6:	2339      	movs	r3, #57	; 0x39
 8007ab8:	7013      	strb	r3, [r2, #0]
 8007aba:	462b      	mov	r3, r5
 8007abc:	461d      	mov	r5, r3
 8007abe:	3b01      	subs	r3, #1
 8007ac0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007ac4:	2a39      	cmp	r2, #57	; 0x39
 8007ac6:	d050      	beq.n	8007b6a <_dtoa_r+0xb72>
 8007ac8:	3201      	adds	r2, #1
 8007aca:	701a      	strb	r2, [r3, #0]
 8007acc:	e745      	b.n	800795a <_dtoa_r+0x962>
 8007ace:	2a00      	cmp	r2, #0
 8007ad0:	dd03      	ble.n	8007ada <_dtoa_r+0xae2>
 8007ad2:	2b39      	cmp	r3, #57	; 0x39
 8007ad4:	d0ee      	beq.n	8007ab4 <_dtoa_r+0xabc>
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	e7c7      	b.n	8007a6a <_dtoa_r+0xa72>
 8007ada:	9a01      	ldr	r2, [sp, #4]
 8007adc:	9907      	ldr	r1, [sp, #28]
 8007ade:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007ae2:	428a      	cmp	r2, r1
 8007ae4:	d02a      	beq.n	8007b3c <_dtoa_r+0xb44>
 8007ae6:	4659      	mov	r1, fp
 8007ae8:	2300      	movs	r3, #0
 8007aea:	220a      	movs	r2, #10
 8007aec:	4620      	mov	r0, r4
 8007aee:	f000 fe81 	bl	80087f4 <__multadd>
 8007af2:	45b8      	cmp	r8, r7
 8007af4:	4683      	mov	fp, r0
 8007af6:	f04f 0300 	mov.w	r3, #0
 8007afa:	f04f 020a 	mov.w	r2, #10
 8007afe:	4641      	mov	r1, r8
 8007b00:	4620      	mov	r0, r4
 8007b02:	d107      	bne.n	8007b14 <_dtoa_r+0xb1c>
 8007b04:	f000 fe76 	bl	80087f4 <__multadd>
 8007b08:	4680      	mov	r8, r0
 8007b0a:	4607      	mov	r7, r0
 8007b0c:	9b01      	ldr	r3, [sp, #4]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	9301      	str	r3, [sp, #4]
 8007b12:	e775      	b.n	8007a00 <_dtoa_r+0xa08>
 8007b14:	f000 fe6e 	bl	80087f4 <__multadd>
 8007b18:	4639      	mov	r1, r7
 8007b1a:	4680      	mov	r8, r0
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	220a      	movs	r2, #10
 8007b20:	4620      	mov	r0, r4
 8007b22:	f000 fe67 	bl	80087f4 <__multadd>
 8007b26:	4607      	mov	r7, r0
 8007b28:	e7f0      	b.n	8007b0c <_dtoa_r+0xb14>
 8007b2a:	f1b9 0f00 	cmp.w	r9, #0
 8007b2e:	9a00      	ldr	r2, [sp, #0]
 8007b30:	bfcc      	ite	gt
 8007b32:	464d      	movgt	r5, r9
 8007b34:	2501      	movle	r5, #1
 8007b36:	4415      	add	r5, r2
 8007b38:	f04f 0800 	mov.w	r8, #0
 8007b3c:	4659      	mov	r1, fp
 8007b3e:	2201      	movs	r2, #1
 8007b40:	4620      	mov	r0, r4
 8007b42:	9301      	str	r3, [sp, #4]
 8007b44:	f001 f850 	bl	8008be8 <__lshift>
 8007b48:	4631      	mov	r1, r6
 8007b4a:	4683      	mov	fp, r0
 8007b4c:	f001 f8b8 	bl	8008cc0 <__mcmp>
 8007b50:	2800      	cmp	r0, #0
 8007b52:	dcb2      	bgt.n	8007aba <_dtoa_r+0xac2>
 8007b54:	d102      	bne.n	8007b5c <_dtoa_r+0xb64>
 8007b56:	9b01      	ldr	r3, [sp, #4]
 8007b58:	07db      	lsls	r3, r3, #31
 8007b5a:	d4ae      	bmi.n	8007aba <_dtoa_r+0xac2>
 8007b5c:	462b      	mov	r3, r5
 8007b5e:	461d      	mov	r5, r3
 8007b60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b64:	2a30      	cmp	r2, #48	; 0x30
 8007b66:	d0fa      	beq.n	8007b5e <_dtoa_r+0xb66>
 8007b68:	e6f7      	b.n	800795a <_dtoa_r+0x962>
 8007b6a:	9a00      	ldr	r2, [sp, #0]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d1a5      	bne.n	8007abc <_dtoa_r+0xac4>
 8007b70:	f10a 0a01 	add.w	sl, sl, #1
 8007b74:	2331      	movs	r3, #49	; 0x31
 8007b76:	e779      	b.n	8007a6c <_dtoa_r+0xa74>
 8007b78:	4b13      	ldr	r3, [pc, #76]	; (8007bc8 <_dtoa_r+0xbd0>)
 8007b7a:	f7ff baaf 	b.w	80070dc <_dtoa_r+0xe4>
 8007b7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f47f aa86 	bne.w	8007092 <_dtoa_r+0x9a>
 8007b86:	4b11      	ldr	r3, [pc, #68]	; (8007bcc <_dtoa_r+0xbd4>)
 8007b88:	f7ff baa8 	b.w	80070dc <_dtoa_r+0xe4>
 8007b8c:	f1b9 0f00 	cmp.w	r9, #0
 8007b90:	dc03      	bgt.n	8007b9a <_dtoa_r+0xba2>
 8007b92:	9b05      	ldr	r3, [sp, #20]
 8007b94:	2b02      	cmp	r3, #2
 8007b96:	f73f aec9 	bgt.w	800792c <_dtoa_r+0x934>
 8007b9a:	9d00      	ldr	r5, [sp, #0]
 8007b9c:	4631      	mov	r1, r6
 8007b9e:	4658      	mov	r0, fp
 8007ba0:	f7ff f99c 	bl	8006edc <quorem>
 8007ba4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007ba8:	f805 3b01 	strb.w	r3, [r5], #1
 8007bac:	9a00      	ldr	r2, [sp, #0]
 8007bae:	1aaa      	subs	r2, r5, r2
 8007bb0:	4591      	cmp	r9, r2
 8007bb2:	ddba      	ble.n	8007b2a <_dtoa_r+0xb32>
 8007bb4:	4659      	mov	r1, fp
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	220a      	movs	r2, #10
 8007bba:	4620      	mov	r0, r4
 8007bbc:	f000 fe1a 	bl	80087f4 <__multadd>
 8007bc0:	4683      	mov	fp, r0
 8007bc2:	e7eb      	b.n	8007b9c <_dtoa_r+0xba4>
 8007bc4:	08009e44 	.word	0x08009e44
 8007bc8:	08009c44 	.word	0x08009c44
 8007bcc:	08009dc1 	.word	0x08009dc1

08007bd0 <__sflush_r>:
 8007bd0:	898a      	ldrh	r2, [r1, #12]
 8007bd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bd6:	4605      	mov	r5, r0
 8007bd8:	0710      	lsls	r0, r2, #28
 8007bda:	460c      	mov	r4, r1
 8007bdc:	d458      	bmi.n	8007c90 <__sflush_r+0xc0>
 8007bde:	684b      	ldr	r3, [r1, #4]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	dc05      	bgt.n	8007bf0 <__sflush_r+0x20>
 8007be4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	dc02      	bgt.n	8007bf0 <__sflush_r+0x20>
 8007bea:	2000      	movs	r0, #0
 8007bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bf2:	2e00      	cmp	r6, #0
 8007bf4:	d0f9      	beq.n	8007bea <__sflush_r+0x1a>
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007bfc:	682f      	ldr	r7, [r5, #0]
 8007bfe:	602b      	str	r3, [r5, #0]
 8007c00:	d032      	beq.n	8007c68 <__sflush_r+0x98>
 8007c02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c04:	89a3      	ldrh	r3, [r4, #12]
 8007c06:	075a      	lsls	r2, r3, #29
 8007c08:	d505      	bpl.n	8007c16 <__sflush_r+0x46>
 8007c0a:	6863      	ldr	r3, [r4, #4]
 8007c0c:	1ac0      	subs	r0, r0, r3
 8007c0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c10:	b10b      	cbz	r3, 8007c16 <__sflush_r+0x46>
 8007c12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c14:	1ac0      	subs	r0, r0, r3
 8007c16:	2300      	movs	r3, #0
 8007c18:	4602      	mov	r2, r0
 8007c1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c1c:	6a21      	ldr	r1, [r4, #32]
 8007c1e:	4628      	mov	r0, r5
 8007c20:	47b0      	blx	r6
 8007c22:	1c43      	adds	r3, r0, #1
 8007c24:	89a3      	ldrh	r3, [r4, #12]
 8007c26:	d106      	bne.n	8007c36 <__sflush_r+0x66>
 8007c28:	6829      	ldr	r1, [r5, #0]
 8007c2a:	291d      	cmp	r1, #29
 8007c2c:	d82c      	bhi.n	8007c88 <__sflush_r+0xb8>
 8007c2e:	4a2a      	ldr	r2, [pc, #168]	; (8007cd8 <__sflush_r+0x108>)
 8007c30:	40ca      	lsrs	r2, r1
 8007c32:	07d6      	lsls	r6, r2, #31
 8007c34:	d528      	bpl.n	8007c88 <__sflush_r+0xb8>
 8007c36:	2200      	movs	r2, #0
 8007c38:	6062      	str	r2, [r4, #4]
 8007c3a:	04d9      	lsls	r1, r3, #19
 8007c3c:	6922      	ldr	r2, [r4, #16]
 8007c3e:	6022      	str	r2, [r4, #0]
 8007c40:	d504      	bpl.n	8007c4c <__sflush_r+0x7c>
 8007c42:	1c42      	adds	r2, r0, #1
 8007c44:	d101      	bne.n	8007c4a <__sflush_r+0x7a>
 8007c46:	682b      	ldr	r3, [r5, #0]
 8007c48:	b903      	cbnz	r3, 8007c4c <__sflush_r+0x7c>
 8007c4a:	6560      	str	r0, [r4, #84]	; 0x54
 8007c4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c4e:	602f      	str	r7, [r5, #0]
 8007c50:	2900      	cmp	r1, #0
 8007c52:	d0ca      	beq.n	8007bea <__sflush_r+0x1a>
 8007c54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c58:	4299      	cmp	r1, r3
 8007c5a:	d002      	beq.n	8007c62 <__sflush_r+0x92>
 8007c5c:	4628      	mov	r0, r5
 8007c5e:	f7fd f913 	bl	8004e88 <_free_r>
 8007c62:	2000      	movs	r0, #0
 8007c64:	6360      	str	r0, [r4, #52]	; 0x34
 8007c66:	e7c1      	b.n	8007bec <__sflush_r+0x1c>
 8007c68:	6a21      	ldr	r1, [r4, #32]
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	4628      	mov	r0, r5
 8007c6e:	47b0      	blx	r6
 8007c70:	1c41      	adds	r1, r0, #1
 8007c72:	d1c7      	bne.n	8007c04 <__sflush_r+0x34>
 8007c74:	682b      	ldr	r3, [r5, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d0c4      	beq.n	8007c04 <__sflush_r+0x34>
 8007c7a:	2b1d      	cmp	r3, #29
 8007c7c:	d001      	beq.n	8007c82 <__sflush_r+0xb2>
 8007c7e:	2b16      	cmp	r3, #22
 8007c80:	d101      	bne.n	8007c86 <__sflush_r+0xb6>
 8007c82:	602f      	str	r7, [r5, #0]
 8007c84:	e7b1      	b.n	8007bea <__sflush_r+0x1a>
 8007c86:	89a3      	ldrh	r3, [r4, #12]
 8007c88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c8c:	81a3      	strh	r3, [r4, #12]
 8007c8e:	e7ad      	b.n	8007bec <__sflush_r+0x1c>
 8007c90:	690f      	ldr	r7, [r1, #16]
 8007c92:	2f00      	cmp	r7, #0
 8007c94:	d0a9      	beq.n	8007bea <__sflush_r+0x1a>
 8007c96:	0793      	lsls	r3, r2, #30
 8007c98:	680e      	ldr	r6, [r1, #0]
 8007c9a:	bf08      	it	eq
 8007c9c:	694b      	ldreq	r3, [r1, #20]
 8007c9e:	600f      	str	r7, [r1, #0]
 8007ca0:	bf18      	it	ne
 8007ca2:	2300      	movne	r3, #0
 8007ca4:	eba6 0807 	sub.w	r8, r6, r7
 8007ca8:	608b      	str	r3, [r1, #8]
 8007caa:	f1b8 0f00 	cmp.w	r8, #0
 8007cae:	dd9c      	ble.n	8007bea <__sflush_r+0x1a>
 8007cb0:	6a21      	ldr	r1, [r4, #32]
 8007cb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007cb4:	4643      	mov	r3, r8
 8007cb6:	463a      	mov	r2, r7
 8007cb8:	4628      	mov	r0, r5
 8007cba:	47b0      	blx	r6
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	dc06      	bgt.n	8007cce <__sflush_r+0xfe>
 8007cc0:	89a3      	ldrh	r3, [r4, #12]
 8007cc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cc6:	81a3      	strh	r3, [r4, #12]
 8007cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ccc:	e78e      	b.n	8007bec <__sflush_r+0x1c>
 8007cce:	4407      	add	r7, r0
 8007cd0:	eba8 0800 	sub.w	r8, r8, r0
 8007cd4:	e7e9      	b.n	8007caa <__sflush_r+0xda>
 8007cd6:	bf00      	nop
 8007cd8:	20400001 	.word	0x20400001

08007cdc <_fflush_r>:
 8007cdc:	b538      	push	{r3, r4, r5, lr}
 8007cde:	690b      	ldr	r3, [r1, #16]
 8007ce0:	4605      	mov	r5, r0
 8007ce2:	460c      	mov	r4, r1
 8007ce4:	b913      	cbnz	r3, 8007cec <_fflush_r+0x10>
 8007ce6:	2500      	movs	r5, #0
 8007ce8:	4628      	mov	r0, r5
 8007cea:	bd38      	pop	{r3, r4, r5, pc}
 8007cec:	b118      	cbz	r0, 8007cf6 <_fflush_r+0x1a>
 8007cee:	6983      	ldr	r3, [r0, #24]
 8007cf0:	b90b      	cbnz	r3, 8007cf6 <_fflush_r+0x1a>
 8007cf2:	f000 f887 	bl	8007e04 <__sinit>
 8007cf6:	4b14      	ldr	r3, [pc, #80]	; (8007d48 <_fflush_r+0x6c>)
 8007cf8:	429c      	cmp	r4, r3
 8007cfa:	d11b      	bne.n	8007d34 <_fflush_r+0x58>
 8007cfc:	686c      	ldr	r4, [r5, #4]
 8007cfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d0ef      	beq.n	8007ce6 <_fflush_r+0xa>
 8007d06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d08:	07d0      	lsls	r0, r2, #31
 8007d0a:	d404      	bmi.n	8007d16 <_fflush_r+0x3a>
 8007d0c:	0599      	lsls	r1, r3, #22
 8007d0e:	d402      	bmi.n	8007d16 <_fflush_r+0x3a>
 8007d10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d12:	f000 fc88 	bl	8008626 <__retarget_lock_acquire_recursive>
 8007d16:	4628      	mov	r0, r5
 8007d18:	4621      	mov	r1, r4
 8007d1a:	f7ff ff59 	bl	8007bd0 <__sflush_r>
 8007d1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d20:	07da      	lsls	r2, r3, #31
 8007d22:	4605      	mov	r5, r0
 8007d24:	d4e0      	bmi.n	8007ce8 <_fflush_r+0xc>
 8007d26:	89a3      	ldrh	r3, [r4, #12]
 8007d28:	059b      	lsls	r3, r3, #22
 8007d2a:	d4dd      	bmi.n	8007ce8 <_fflush_r+0xc>
 8007d2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d2e:	f000 fc7b 	bl	8008628 <__retarget_lock_release_recursive>
 8007d32:	e7d9      	b.n	8007ce8 <_fflush_r+0xc>
 8007d34:	4b05      	ldr	r3, [pc, #20]	; (8007d4c <_fflush_r+0x70>)
 8007d36:	429c      	cmp	r4, r3
 8007d38:	d101      	bne.n	8007d3e <_fflush_r+0x62>
 8007d3a:	68ac      	ldr	r4, [r5, #8]
 8007d3c:	e7df      	b.n	8007cfe <_fflush_r+0x22>
 8007d3e:	4b04      	ldr	r3, [pc, #16]	; (8007d50 <_fflush_r+0x74>)
 8007d40:	429c      	cmp	r4, r3
 8007d42:	bf08      	it	eq
 8007d44:	68ec      	ldreq	r4, [r5, #12]
 8007d46:	e7da      	b.n	8007cfe <_fflush_r+0x22>
 8007d48:	08009e78 	.word	0x08009e78
 8007d4c:	08009e98 	.word	0x08009e98
 8007d50:	08009e58 	.word	0x08009e58

08007d54 <std>:
 8007d54:	2300      	movs	r3, #0
 8007d56:	b510      	push	{r4, lr}
 8007d58:	4604      	mov	r4, r0
 8007d5a:	e9c0 3300 	strd	r3, r3, [r0]
 8007d5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d62:	6083      	str	r3, [r0, #8]
 8007d64:	8181      	strh	r1, [r0, #12]
 8007d66:	6643      	str	r3, [r0, #100]	; 0x64
 8007d68:	81c2      	strh	r2, [r0, #14]
 8007d6a:	6183      	str	r3, [r0, #24]
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	2208      	movs	r2, #8
 8007d70:	305c      	adds	r0, #92	; 0x5c
 8007d72:	f7fd f871 	bl	8004e58 <memset>
 8007d76:	4b05      	ldr	r3, [pc, #20]	; (8007d8c <std+0x38>)
 8007d78:	6263      	str	r3, [r4, #36]	; 0x24
 8007d7a:	4b05      	ldr	r3, [pc, #20]	; (8007d90 <std+0x3c>)
 8007d7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d7e:	4b05      	ldr	r3, [pc, #20]	; (8007d94 <std+0x40>)
 8007d80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d82:	4b05      	ldr	r3, [pc, #20]	; (8007d98 <std+0x44>)
 8007d84:	6224      	str	r4, [r4, #32]
 8007d86:	6323      	str	r3, [r4, #48]	; 0x30
 8007d88:	bd10      	pop	{r4, pc}
 8007d8a:	bf00      	nop
 8007d8c:	08009621 	.word	0x08009621
 8007d90:	08009643 	.word	0x08009643
 8007d94:	0800967b 	.word	0x0800967b
 8007d98:	0800969f 	.word	0x0800969f

08007d9c <_cleanup_r>:
 8007d9c:	4901      	ldr	r1, [pc, #4]	; (8007da4 <_cleanup_r+0x8>)
 8007d9e:	f000 b8af 	b.w	8007f00 <_fwalk_reent>
 8007da2:	bf00      	nop
 8007da4:	08007cdd 	.word	0x08007cdd

08007da8 <__sfmoreglue>:
 8007da8:	b570      	push	{r4, r5, r6, lr}
 8007daa:	1e4a      	subs	r2, r1, #1
 8007dac:	2568      	movs	r5, #104	; 0x68
 8007dae:	4355      	muls	r5, r2
 8007db0:	460e      	mov	r6, r1
 8007db2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007db6:	f7fd f8b7 	bl	8004f28 <_malloc_r>
 8007dba:	4604      	mov	r4, r0
 8007dbc:	b140      	cbz	r0, 8007dd0 <__sfmoreglue+0x28>
 8007dbe:	2100      	movs	r1, #0
 8007dc0:	e9c0 1600 	strd	r1, r6, [r0]
 8007dc4:	300c      	adds	r0, #12
 8007dc6:	60a0      	str	r0, [r4, #8]
 8007dc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007dcc:	f7fd f844 	bl	8004e58 <memset>
 8007dd0:	4620      	mov	r0, r4
 8007dd2:	bd70      	pop	{r4, r5, r6, pc}

08007dd4 <__sfp_lock_acquire>:
 8007dd4:	4801      	ldr	r0, [pc, #4]	; (8007ddc <__sfp_lock_acquire+0x8>)
 8007dd6:	f000 bc26 	b.w	8008626 <__retarget_lock_acquire_recursive>
 8007dda:	bf00      	nop
 8007ddc:	20001d26 	.word	0x20001d26

08007de0 <__sfp_lock_release>:
 8007de0:	4801      	ldr	r0, [pc, #4]	; (8007de8 <__sfp_lock_release+0x8>)
 8007de2:	f000 bc21 	b.w	8008628 <__retarget_lock_release_recursive>
 8007de6:	bf00      	nop
 8007de8:	20001d26 	.word	0x20001d26

08007dec <__sinit_lock_acquire>:
 8007dec:	4801      	ldr	r0, [pc, #4]	; (8007df4 <__sinit_lock_acquire+0x8>)
 8007dee:	f000 bc1a 	b.w	8008626 <__retarget_lock_acquire_recursive>
 8007df2:	bf00      	nop
 8007df4:	20001d21 	.word	0x20001d21

08007df8 <__sinit_lock_release>:
 8007df8:	4801      	ldr	r0, [pc, #4]	; (8007e00 <__sinit_lock_release+0x8>)
 8007dfa:	f000 bc15 	b.w	8008628 <__retarget_lock_release_recursive>
 8007dfe:	bf00      	nop
 8007e00:	20001d21 	.word	0x20001d21

08007e04 <__sinit>:
 8007e04:	b510      	push	{r4, lr}
 8007e06:	4604      	mov	r4, r0
 8007e08:	f7ff fff0 	bl	8007dec <__sinit_lock_acquire>
 8007e0c:	69a3      	ldr	r3, [r4, #24]
 8007e0e:	b11b      	cbz	r3, 8007e18 <__sinit+0x14>
 8007e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e14:	f7ff bff0 	b.w	8007df8 <__sinit_lock_release>
 8007e18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007e1c:	6523      	str	r3, [r4, #80]	; 0x50
 8007e1e:	4b13      	ldr	r3, [pc, #76]	; (8007e6c <__sinit+0x68>)
 8007e20:	4a13      	ldr	r2, [pc, #76]	; (8007e70 <__sinit+0x6c>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e26:	42a3      	cmp	r3, r4
 8007e28:	bf04      	itt	eq
 8007e2a:	2301      	moveq	r3, #1
 8007e2c:	61a3      	streq	r3, [r4, #24]
 8007e2e:	4620      	mov	r0, r4
 8007e30:	f000 f820 	bl	8007e74 <__sfp>
 8007e34:	6060      	str	r0, [r4, #4]
 8007e36:	4620      	mov	r0, r4
 8007e38:	f000 f81c 	bl	8007e74 <__sfp>
 8007e3c:	60a0      	str	r0, [r4, #8]
 8007e3e:	4620      	mov	r0, r4
 8007e40:	f000 f818 	bl	8007e74 <__sfp>
 8007e44:	2200      	movs	r2, #0
 8007e46:	60e0      	str	r0, [r4, #12]
 8007e48:	2104      	movs	r1, #4
 8007e4a:	6860      	ldr	r0, [r4, #4]
 8007e4c:	f7ff ff82 	bl	8007d54 <std>
 8007e50:	68a0      	ldr	r0, [r4, #8]
 8007e52:	2201      	movs	r2, #1
 8007e54:	2109      	movs	r1, #9
 8007e56:	f7ff ff7d 	bl	8007d54 <std>
 8007e5a:	68e0      	ldr	r0, [r4, #12]
 8007e5c:	2202      	movs	r2, #2
 8007e5e:	2112      	movs	r1, #18
 8007e60:	f7ff ff78 	bl	8007d54 <std>
 8007e64:	2301      	movs	r3, #1
 8007e66:	61a3      	str	r3, [r4, #24]
 8007e68:	e7d2      	b.n	8007e10 <__sinit+0xc>
 8007e6a:	bf00      	nop
 8007e6c:	08009c30 	.word	0x08009c30
 8007e70:	08007d9d 	.word	0x08007d9d

08007e74 <__sfp>:
 8007e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e76:	4607      	mov	r7, r0
 8007e78:	f7ff ffac 	bl	8007dd4 <__sfp_lock_acquire>
 8007e7c:	4b1e      	ldr	r3, [pc, #120]	; (8007ef8 <__sfp+0x84>)
 8007e7e:	681e      	ldr	r6, [r3, #0]
 8007e80:	69b3      	ldr	r3, [r6, #24]
 8007e82:	b913      	cbnz	r3, 8007e8a <__sfp+0x16>
 8007e84:	4630      	mov	r0, r6
 8007e86:	f7ff ffbd 	bl	8007e04 <__sinit>
 8007e8a:	3648      	adds	r6, #72	; 0x48
 8007e8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007e90:	3b01      	subs	r3, #1
 8007e92:	d503      	bpl.n	8007e9c <__sfp+0x28>
 8007e94:	6833      	ldr	r3, [r6, #0]
 8007e96:	b30b      	cbz	r3, 8007edc <__sfp+0x68>
 8007e98:	6836      	ldr	r6, [r6, #0]
 8007e9a:	e7f7      	b.n	8007e8c <__sfp+0x18>
 8007e9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ea0:	b9d5      	cbnz	r5, 8007ed8 <__sfp+0x64>
 8007ea2:	4b16      	ldr	r3, [pc, #88]	; (8007efc <__sfp+0x88>)
 8007ea4:	60e3      	str	r3, [r4, #12]
 8007ea6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007eaa:	6665      	str	r5, [r4, #100]	; 0x64
 8007eac:	f000 fbba 	bl	8008624 <__retarget_lock_init_recursive>
 8007eb0:	f7ff ff96 	bl	8007de0 <__sfp_lock_release>
 8007eb4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007eb8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007ebc:	6025      	str	r5, [r4, #0]
 8007ebe:	61a5      	str	r5, [r4, #24]
 8007ec0:	2208      	movs	r2, #8
 8007ec2:	4629      	mov	r1, r5
 8007ec4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007ec8:	f7fc ffc6 	bl	8004e58 <memset>
 8007ecc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007ed0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007ed4:	4620      	mov	r0, r4
 8007ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ed8:	3468      	adds	r4, #104	; 0x68
 8007eda:	e7d9      	b.n	8007e90 <__sfp+0x1c>
 8007edc:	2104      	movs	r1, #4
 8007ede:	4638      	mov	r0, r7
 8007ee0:	f7ff ff62 	bl	8007da8 <__sfmoreglue>
 8007ee4:	4604      	mov	r4, r0
 8007ee6:	6030      	str	r0, [r6, #0]
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	d1d5      	bne.n	8007e98 <__sfp+0x24>
 8007eec:	f7ff ff78 	bl	8007de0 <__sfp_lock_release>
 8007ef0:	230c      	movs	r3, #12
 8007ef2:	603b      	str	r3, [r7, #0]
 8007ef4:	e7ee      	b.n	8007ed4 <__sfp+0x60>
 8007ef6:	bf00      	nop
 8007ef8:	08009c30 	.word	0x08009c30
 8007efc:	ffff0001 	.word	0xffff0001

08007f00 <_fwalk_reent>:
 8007f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f04:	4606      	mov	r6, r0
 8007f06:	4688      	mov	r8, r1
 8007f08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f0c:	2700      	movs	r7, #0
 8007f0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f12:	f1b9 0901 	subs.w	r9, r9, #1
 8007f16:	d505      	bpl.n	8007f24 <_fwalk_reent+0x24>
 8007f18:	6824      	ldr	r4, [r4, #0]
 8007f1a:	2c00      	cmp	r4, #0
 8007f1c:	d1f7      	bne.n	8007f0e <_fwalk_reent+0xe>
 8007f1e:	4638      	mov	r0, r7
 8007f20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f24:	89ab      	ldrh	r3, [r5, #12]
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d907      	bls.n	8007f3a <_fwalk_reent+0x3a>
 8007f2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f2e:	3301      	adds	r3, #1
 8007f30:	d003      	beq.n	8007f3a <_fwalk_reent+0x3a>
 8007f32:	4629      	mov	r1, r5
 8007f34:	4630      	mov	r0, r6
 8007f36:	47c0      	blx	r8
 8007f38:	4307      	orrs	r7, r0
 8007f3a:	3568      	adds	r5, #104	; 0x68
 8007f3c:	e7e9      	b.n	8007f12 <_fwalk_reent+0x12>

08007f3e <rshift>:
 8007f3e:	6903      	ldr	r3, [r0, #16]
 8007f40:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007f44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f48:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007f4c:	f100 0414 	add.w	r4, r0, #20
 8007f50:	dd45      	ble.n	8007fde <rshift+0xa0>
 8007f52:	f011 011f 	ands.w	r1, r1, #31
 8007f56:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007f5a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007f5e:	d10c      	bne.n	8007f7a <rshift+0x3c>
 8007f60:	f100 0710 	add.w	r7, r0, #16
 8007f64:	4629      	mov	r1, r5
 8007f66:	42b1      	cmp	r1, r6
 8007f68:	d334      	bcc.n	8007fd4 <rshift+0x96>
 8007f6a:	1a9b      	subs	r3, r3, r2
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	1eea      	subs	r2, r5, #3
 8007f70:	4296      	cmp	r6, r2
 8007f72:	bf38      	it	cc
 8007f74:	2300      	movcc	r3, #0
 8007f76:	4423      	add	r3, r4
 8007f78:	e015      	b.n	8007fa6 <rshift+0x68>
 8007f7a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007f7e:	f1c1 0820 	rsb	r8, r1, #32
 8007f82:	40cf      	lsrs	r7, r1
 8007f84:	f105 0e04 	add.w	lr, r5, #4
 8007f88:	46a1      	mov	r9, r4
 8007f8a:	4576      	cmp	r6, lr
 8007f8c:	46f4      	mov	ip, lr
 8007f8e:	d815      	bhi.n	8007fbc <rshift+0x7e>
 8007f90:	1a9b      	subs	r3, r3, r2
 8007f92:	009a      	lsls	r2, r3, #2
 8007f94:	3a04      	subs	r2, #4
 8007f96:	3501      	adds	r5, #1
 8007f98:	42ae      	cmp	r6, r5
 8007f9a:	bf38      	it	cc
 8007f9c:	2200      	movcc	r2, #0
 8007f9e:	18a3      	adds	r3, r4, r2
 8007fa0:	50a7      	str	r7, [r4, r2]
 8007fa2:	b107      	cbz	r7, 8007fa6 <rshift+0x68>
 8007fa4:	3304      	adds	r3, #4
 8007fa6:	1b1a      	subs	r2, r3, r4
 8007fa8:	42a3      	cmp	r3, r4
 8007faa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007fae:	bf08      	it	eq
 8007fb0:	2300      	moveq	r3, #0
 8007fb2:	6102      	str	r2, [r0, #16]
 8007fb4:	bf08      	it	eq
 8007fb6:	6143      	streq	r3, [r0, #20]
 8007fb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007fbc:	f8dc c000 	ldr.w	ip, [ip]
 8007fc0:	fa0c fc08 	lsl.w	ip, ip, r8
 8007fc4:	ea4c 0707 	orr.w	r7, ip, r7
 8007fc8:	f849 7b04 	str.w	r7, [r9], #4
 8007fcc:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007fd0:	40cf      	lsrs	r7, r1
 8007fd2:	e7da      	b.n	8007f8a <rshift+0x4c>
 8007fd4:	f851 cb04 	ldr.w	ip, [r1], #4
 8007fd8:	f847 cf04 	str.w	ip, [r7, #4]!
 8007fdc:	e7c3      	b.n	8007f66 <rshift+0x28>
 8007fde:	4623      	mov	r3, r4
 8007fe0:	e7e1      	b.n	8007fa6 <rshift+0x68>

08007fe2 <__hexdig_fun>:
 8007fe2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007fe6:	2b09      	cmp	r3, #9
 8007fe8:	d802      	bhi.n	8007ff0 <__hexdig_fun+0xe>
 8007fea:	3820      	subs	r0, #32
 8007fec:	b2c0      	uxtb	r0, r0
 8007fee:	4770      	bx	lr
 8007ff0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007ff4:	2b05      	cmp	r3, #5
 8007ff6:	d801      	bhi.n	8007ffc <__hexdig_fun+0x1a>
 8007ff8:	3847      	subs	r0, #71	; 0x47
 8007ffa:	e7f7      	b.n	8007fec <__hexdig_fun+0xa>
 8007ffc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008000:	2b05      	cmp	r3, #5
 8008002:	d801      	bhi.n	8008008 <__hexdig_fun+0x26>
 8008004:	3827      	subs	r0, #39	; 0x27
 8008006:	e7f1      	b.n	8007fec <__hexdig_fun+0xa>
 8008008:	2000      	movs	r0, #0
 800800a:	4770      	bx	lr

0800800c <__gethex>:
 800800c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008010:	ed2d 8b02 	vpush	{d8}
 8008014:	b089      	sub	sp, #36	; 0x24
 8008016:	ee08 0a10 	vmov	s16, r0
 800801a:	9304      	str	r3, [sp, #16]
 800801c:	4bbc      	ldr	r3, [pc, #752]	; (8008310 <__gethex+0x304>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	9301      	str	r3, [sp, #4]
 8008022:	4618      	mov	r0, r3
 8008024:	468b      	mov	fp, r1
 8008026:	4690      	mov	r8, r2
 8008028:	f7f8 f8d2 	bl	80001d0 <strlen>
 800802c:	9b01      	ldr	r3, [sp, #4]
 800802e:	f8db 2000 	ldr.w	r2, [fp]
 8008032:	4403      	add	r3, r0
 8008034:	4682      	mov	sl, r0
 8008036:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800803a:	9305      	str	r3, [sp, #20]
 800803c:	1c93      	adds	r3, r2, #2
 800803e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008042:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008046:	32fe      	adds	r2, #254	; 0xfe
 8008048:	18d1      	adds	r1, r2, r3
 800804a:	461f      	mov	r7, r3
 800804c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008050:	9100      	str	r1, [sp, #0]
 8008052:	2830      	cmp	r0, #48	; 0x30
 8008054:	d0f8      	beq.n	8008048 <__gethex+0x3c>
 8008056:	f7ff ffc4 	bl	8007fe2 <__hexdig_fun>
 800805a:	4604      	mov	r4, r0
 800805c:	2800      	cmp	r0, #0
 800805e:	d13a      	bne.n	80080d6 <__gethex+0xca>
 8008060:	9901      	ldr	r1, [sp, #4]
 8008062:	4652      	mov	r2, sl
 8008064:	4638      	mov	r0, r7
 8008066:	f001 fb1e 	bl	80096a6 <strncmp>
 800806a:	4605      	mov	r5, r0
 800806c:	2800      	cmp	r0, #0
 800806e:	d168      	bne.n	8008142 <__gethex+0x136>
 8008070:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008074:	eb07 060a 	add.w	r6, r7, sl
 8008078:	f7ff ffb3 	bl	8007fe2 <__hexdig_fun>
 800807c:	2800      	cmp	r0, #0
 800807e:	d062      	beq.n	8008146 <__gethex+0x13a>
 8008080:	4633      	mov	r3, r6
 8008082:	7818      	ldrb	r0, [r3, #0]
 8008084:	2830      	cmp	r0, #48	; 0x30
 8008086:	461f      	mov	r7, r3
 8008088:	f103 0301 	add.w	r3, r3, #1
 800808c:	d0f9      	beq.n	8008082 <__gethex+0x76>
 800808e:	f7ff ffa8 	bl	8007fe2 <__hexdig_fun>
 8008092:	2301      	movs	r3, #1
 8008094:	fab0 f480 	clz	r4, r0
 8008098:	0964      	lsrs	r4, r4, #5
 800809a:	4635      	mov	r5, r6
 800809c:	9300      	str	r3, [sp, #0]
 800809e:	463a      	mov	r2, r7
 80080a0:	4616      	mov	r6, r2
 80080a2:	3201      	adds	r2, #1
 80080a4:	7830      	ldrb	r0, [r6, #0]
 80080a6:	f7ff ff9c 	bl	8007fe2 <__hexdig_fun>
 80080aa:	2800      	cmp	r0, #0
 80080ac:	d1f8      	bne.n	80080a0 <__gethex+0x94>
 80080ae:	9901      	ldr	r1, [sp, #4]
 80080b0:	4652      	mov	r2, sl
 80080b2:	4630      	mov	r0, r6
 80080b4:	f001 faf7 	bl	80096a6 <strncmp>
 80080b8:	b980      	cbnz	r0, 80080dc <__gethex+0xd0>
 80080ba:	b94d      	cbnz	r5, 80080d0 <__gethex+0xc4>
 80080bc:	eb06 050a 	add.w	r5, r6, sl
 80080c0:	462a      	mov	r2, r5
 80080c2:	4616      	mov	r6, r2
 80080c4:	3201      	adds	r2, #1
 80080c6:	7830      	ldrb	r0, [r6, #0]
 80080c8:	f7ff ff8b 	bl	8007fe2 <__hexdig_fun>
 80080cc:	2800      	cmp	r0, #0
 80080ce:	d1f8      	bne.n	80080c2 <__gethex+0xb6>
 80080d0:	1bad      	subs	r5, r5, r6
 80080d2:	00ad      	lsls	r5, r5, #2
 80080d4:	e004      	b.n	80080e0 <__gethex+0xd4>
 80080d6:	2400      	movs	r4, #0
 80080d8:	4625      	mov	r5, r4
 80080da:	e7e0      	b.n	800809e <__gethex+0x92>
 80080dc:	2d00      	cmp	r5, #0
 80080de:	d1f7      	bne.n	80080d0 <__gethex+0xc4>
 80080e0:	7833      	ldrb	r3, [r6, #0]
 80080e2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80080e6:	2b50      	cmp	r3, #80	; 0x50
 80080e8:	d13b      	bne.n	8008162 <__gethex+0x156>
 80080ea:	7873      	ldrb	r3, [r6, #1]
 80080ec:	2b2b      	cmp	r3, #43	; 0x2b
 80080ee:	d02c      	beq.n	800814a <__gethex+0x13e>
 80080f0:	2b2d      	cmp	r3, #45	; 0x2d
 80080f2:	d02e      	beq.n	8008152 <__gethex+0x146>
 80080f4:	1c71      	adds	r1, r6, #1
 80080f6:	f04f 0900 	mov.w	r9, #0
 80080fa:	7808      	ldrb	r0, [r1, #0]
 80080fc:	f7ff ff71 	bl	8007fe2 <__hexdig_fun>
 8008100:	1e43      	subs	r3, r0, #1
 8008102:	b2db      	uxtb	r3, r3
 8008104:	2b18      	cmp	r3, #24
 8008106:	d82c      	bhi.n	8008162 <__gethex+0x156>
 8008108:	f1a0 0210 	sub.w	r2, r0, #16
 800810c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008110:	f7ff ff67 	bl	8007fe2 <__hexdig_fun>
 8008114:	1e43      	subs	r3, r0, #1
 8008116:	b2db      	uxtb	r3, r3
 8008118:	2b18      	cmp	r3, #24
 800811a:	d91d      	bls.n	8008158 <__gethex+0x14c>
 800811c:	f1b9 0f00 	cmp.w	r9, #0
 8008120:	d000      	beq.n	8008124 <__gethex+0x118>
 8008122:	4252      	negs	r2, r2
 8008124:	4415      	add	r5, r2
 8008126:	f8cb 1000 	str.w	r1, [fp]
 800812a:	b1e4      	cbz	r4, 8008166 <__gethex+0x15a>
 800812c:	9b00      	ldr	r3, [sp, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	bf14      	ite	ne
 8008132:	2700      	movne	r7, #0
 8008134:	2706      	moveq	r7, #6
 8008136:	4638      	mov	r0, r7
 8008138:	b009      	add	sp, #36	; 0x24
 800813a:	ecbd 8b02 	vpop	{d8}
 800813e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008142:	463e      	mov	r6, r7
 8008144:	4625      	mov	r5, r4
 8008146:	2401      	movs	r4, #1
 8008148:	e7ca      	b.n	80080e0 <__gethex+0xd4>
 800814a:	f04f 0900 	mov.w	r9, #0
 800814e:	1cb1      	adds	r1, r6, #2
 8008150:	e7d3      	b.n	80080fa <__gethex+0xee>
 8008152:	f04f 0901 	mov.w	r9, #1
 8008156:	e7fa      	b.n	800814e <__gethex+0x142>
 8008158:	230a      	movs	r3, #10
 800815a:	fb03 0202 	mla	r2, r3, r2, r0
 800815e:	3a10      	subs	r2, #16
 8008160:	e7d4      	b.n	800810c <__gethex+0x100>
 8008162:	4631      	mov	r1, r6
 8008164:	e7df      	b.n	8008126 <__gethex+0x11a>
 8008166:	1bf3      	subs	r3, r6, r7
 8008168:	3b01      	subs	r3, #1
 800816a:	4621      	mov	r1, r4
 800816c:	2b07      	cmp	r3, #7
 800816e:	dc0b      	bgt.n	8008188 <__gethex+0x17c>
 8008170:	ee18 0a10 	vmov	r0, s16
 8008174:	f000 fadc 	bl	8008730 <_Balloc>
 8008178:	4604      	mov	r4, r0
 800817a:	b940      	cbnz	r0, 800818e <__gethex+0x182>
 800817c:	4b65      	ldr	r3, [pc, #404]	; (8008314 <__gethex+0x308>)
 800817e:	4602      	mov	r2, r0
 8008180:	21de      	movs	r1, #222	; 0xde
 8008182:	4865      	ldr	r0, [pc, #404]	; (8008318 <__gethex+0x30c>)
 8008184:	f001 fac0 	bl	8009708 <__assert_func>
 8008188:	3101      	adds	r1, #1
 800818a:	105b      	asrs	r3, r3, #1
 800818c:	e7ee      	b.n	800816c <__gethex+0x160>
 800818e:	f100 0914 	add.w	r9, r0, #20
 8008192:	f04f 0b00 	mov.w	fp, #0
 8008196:	f1ca 0301 	rsb	r3, sl, #1
 800819a:	f8cd 9008 	str.w	r9, [sp, #8]
 800819e:	f8cd b000 	str.w	fp, [sp]
 80081a2:	9306      	str	r3, [sp, #24]
 80081a4:	42b7      	cmp	r7, r6
 80081a6:	d340      	bcc.n	800822a <__gethex+0x21e>
 80081a8:	9802      	ldr	r0, [sp, #8]
 80081aa:	9b00      	ldr	r3, [sp, #0]
 80081ac:	f840 3b04 	str.w	r3, [r0], #4
 80081b0:	eba0 0009 	sub.w	r0, r0, r9
 80081b4:	1080      	asrs	r0, r0, #2
 80081b6:	0146      	lsls	r6, r0, #5
 80081b8:	6120      	str	r0, [r4, #16]
 80081ba:	4618      	mov	r0, r3
 80081bc:	f000 fbae 	bl	800891c <__hi0bits>
 80081c0:	1a30      	subs	r0, r6, r0
 80081c2:	f8d8 6000 	ldr.w	r6, [r8]
 80081c6:	42b0      	cmp	r0, r6
 80081c8:	dd63      	ble.n	8008292 <__gethex+0x286>
 80081ca:	1b87      	subs	r7, r0, r6
 80081cc:	4639      	mov	r1, r7
 80081ce:	4620      	mov	r0, r4
 80081d0:	f000 ff48 	bl	8009064 <__any_on>
 80081d4:	4682      	mov	sl, r0
 80081d6:	b1a8      	cbz	r0, 8008204 <__gethex+0x1f8>
 80081d8:	1e7b      	subs	r3, r7, #1
 80081da:	1159      	asrs	r1, r3, #5
 80081dc:	f003 021f 	and.w	r2, r3, #31
 80081e0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80081e4:	f04f 0a01 	mov.w	sl, #1
 80081e8:	fa0a f202 	lsl.w	r2, sl, r2
 80081ec:	420a      	tst	r2, r1
 80081ee:	d009      	beq.n	8008204 <__gethex+0x1f8>
 80081f0:	4553      	cmp	r3, sl
 80081f2:	dd05      	ble.n	8008200 <__gethex+0x1f4>
 80081f4:	1eb9      	subs	r1, r7, #2
 80081f6:	4620      	mov	r0, r4
 80081f8:	f000 ff34 	bl	8009064 <__any_on>
 80081fc:	2800      	cmp	r0, #0
 80081fe:	d145      	bne.n	800828c <__gethex+0x280>
 8008200:	f04f 0a02 	mov.w	sl, #2
 8008204:	4639      	mov	r1, r7
 8008206:	4620      	mov	r0, r4
 8008208:	f7ff fe99 	bl	8007f3e <rshift>
 800820c:	443d      	add	r5, r7
 800820e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008212:	42ab      	cmp	r3, r5
 8008214:	da4c      	bge.n	80082b0 <__gethex+0x2a4>
 8008216:	ee18 0a10 	vmov	r0, s16
 800821a:	4621      	mov	r1, r4
 800821c:	f000 fac8 	bl	80087b0 <_Bfree>
 8008220:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008222:	2300      	movs	r3, #0
 8008224:	6013      	str	r3, [r2, #0]
 8008226:	27a3      	movs	r7, #163	; 0xa3
 8008228:	e785      	b.n	8008136 <__gethex+0x12a>
 800822a:	1e73      	subs	r3, r6, #1
 800822c:	9a05      	ldr	r2, [sp, #20]
 800822e:	9303      	str	r3, [sp, #12]
 8008230:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008234:	4293      	cmp	r3, r2
 8008236:	d019      	beq.n	800826c <__gethex+0x260>
 8008238:	f1bb 0f20 	cmp.w	fp, #32
 800823c:	d107      	bne.n	800824e <__gethex+0x242>
 800823e:	9b02      	ldr	r3, [sp, #8]
 8008240:	9a00      	ldr	r2, [sp, #0]
 8008242:	f843 2b04 	str.w	r2, [r3], #4
 8008246:	9302      	str	r3, [sp, #8]
 8008248:	2300      	movs	r3, #0
 800824a:	9300      	str	r3, [sp, #0]
 800824c:	469b      	mov	fp, r3
 800824e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008252:	f7ff fec6 	bl	8007fe2 <__hexdig_fun>
 8008256:	9b00      	ldr	r3, [sp, #0]
 8008258:	f000 000f 	and.w	r0, r0, #15
 800825c:	fa00 f00b 	lsl.w	r0, r0, fp
 8008260:	4303      	orrs	r3, r0
 8008262:	9300      	str	r3, [sp, #0]
 8008264:	f10b 0b04 	add.w	fp, fp, #4
 8008268:	9b03      	ldr	r3, [sp, #12]
 800826a:	e00d      	b.n	8008288 <__gethex+0x27c>
 800826c:	9b03      	ldr	r3, [sp, #12]
 800826e:	9a06      	ldr	r2, [sp, #24]
 8008270:	4413      	add	r3, r2
 8008272:	42bb      	cmp	r3, r7
 8008274:	d3e0      	bcc.n	8008238 <__gethex+0x22c>
 8008276:	4618      	mov	r0, r3
 8008278:	9901      	ldr	r1, [sp, #4]
 800827a:	9307      	str	r3, [sp, #28]
 800827c:	4652      	mov	r2, sl
 800827e:	f001 fa12 	bl	80096a6 <strncmp>
 8008282:	9b07      	ldr	r3, [sp, #28]
 8008284:	2800      	cmp	r0, #0
 8008286:	d1d7      	bne.n	8008238 <__gethex+0x22c>
 8008288:	461e      	mov	r6, r3
 800828a:	e78b      	b.n	80081a4 <__gethex+0x198>
 800828c:	f04f 0a03 	mov.w	sl, #3
 8008290:	e7b8      	b.n	8008204 <__gethex+0x1f8>
 8008292:	da0a      	bge.n	80082aa <__gethex+0x29e>
 8008294:	1a37      	subs	r7, r6, r0
 8008296:	4621      	mov	r1, r4
 8008298:	ee18 0a10 	vmov	r0, s16
 800829c:	463a      	mov	r2, r7
 800829e:	f000 fca3 	bl	8008be8 <__lshift>
 80082a2:	1bed      	subs	r5, r5, r7
 80082a4:	4604      	mov	r4, r0
 80082a6:	f100 0914 	add.w	r9, r0, #20
 80082aa:	f04f 0a00 	mov.w	sl, #0
 80082ae:	e7ae      	b.n	800820e <__gethex+0x202>
 80082b0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80082b4:	42a8      	cmp	r0, r5
 80082b6:	dd72      	ble.n	800839e <__gethex+0x392>
 80082b8:	1b45      	subs	r5, r0, r5
 80082ba:	42ae      	cmp	r6, r5
 80082bc:	dc36      	bgt.n	800832c <__gethex+0x320>
 80082be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80082c2:	2b02      	cmp	r3, #2
 80082c4:	d02a      	beq.n	800831c <__gethex+0x310>
 80082c6:	2b03      	cmp	r3, #3
 80082c8:	d02c      	beq.n	8008324 <__gethex+0x318>
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d115      	bne.n	80082fa <__gethex+0x2ee>
 80082ce:	42ae      	cmp	r6, r5
 80082d0:	d113      	bne.n	80082fa <__gethex+0x2ee>
 80082d2:	2e01      	cmp	r6, #1
 80082d4:	d10b      	bne.n	80082ee <__gethex+0x2e2>
 80082d6:	9a04      	ldr	r2, [sp, #16]
 80082d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80082dc:	6013      	str	r3, [r2, #0]
 80082de:	2301      	movs	r3, #1
 80082e0:	6123      	str	r3, [r4, #16]
 80082e2:	f8c9 3000 	str.w	r3, [r9]
 80082e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80082e8:	2762      	movs	r7, #98	; 0x62
 80082ea:	601c      	str	r4, [r3, #0]
 80082ec:	e723      	b.n	8008136 <__gethex+0x12a>
 80082ee:	1e71      	subs	r1, r6, #1
 80082f0:	4620      	mov	r0, r4
 80082f2:	f000 feb7 	bl	8009064 <__any_on>
 80082f6:	2800      	cmp	r0, #0
 80082f8:	d1ed      	bne.n	80082d6 <__gethex+0x2ca>
 80082fa:	ee18 0a10 	vmov	r0, s16
 80082fe:	4621      	mov	r1, r4
 8008300:	f000 fa56 	bl	80087b0 <_Bfree>
 8008304:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008306:	2300      	movs	r3, #0
 8008308:	6013      	str	r3, [r2, #0]
 800830a:	2750      	movs	r7, #80	; 0x50
 800830c:	e713      	b.n	8008136 <__gethex+0x12a>
 800830e:	bf00      	nop
 8008310:	08009f24 	.word	0x08009f24
 8008314:	08009e44 	.word	0x08009e44
 8008318:	08009eb8 	.word	0x08009eb8
 800831c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1eb      	bne.n	80082fa <__gethex+0x2ee>
 8008322:	e7d8      	b.n	80082d6 <__gethex+0x2ca>
 8008324:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008326:	2b00      	cmp	r3, #0
 8008328:	d1d5      	bne.n	80082d6 <__gethex+0x2ca>
 800832a:	e7e6      	b.n	80082fa <__gethex+0x2ee>
 800832c:	1e6f      	subs	r7, r5, #1
 800832e:	f1ba 0f00 	cmp.w	sl, #0
 8008332:	d131      	bne.n	8008398 <__gethex+0x38c>
 8008334:	b127      	cbz	r7, 8008340 <__gethex+0x334>
 8008336:	4639      	mov	r1, r7
 8008338:	4620      	mov	r0, r4
 800833a:	f000 fe93 	bl	8009064 <__any_on>
 800833e:	4682      	mov	sl, r0
 8008340:	117b      	asrs	r3, r7, #5
 8008342:	2101      	movs	r1, #1
 8008344:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008348:	f007 071f 	and.w	r7, r7, #31
 800834c:	fa01 f707 	lsl.w	r7, r1, r7
 8008350:	421f      	tst	r7, r3
 8008352:	4629      	mov	r1, r5
 8008354:	4620      	mov	r0, r4
 8008356:	bf18      	it	ne
 8008358:	f04a 0a02 	orrne.w	sl, sl, #2
 800835c:	1b76      	subs	r6, r6, r5
 800835e:	f7ff fdee 	bl	8007f3e <rshift>
 8008362:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008366:	2702      	movs	r7, #2
 8008368:	f1ba 0f00 	cmp.w	sl, #0
 800836c:	d048      	beq.n	8008400 <__gethex+0x3f4>
 800836e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008372:	2b02      	cmp	r3, #2
 8008374:	d015      	beq.n	80083a2 <__gethex+0x396>
 8008376:	2b03      	cmp	r3, #3
 8008378:	d017      	beq.n	80083aa <__gethex+0x39e>
 800837a:	2b01      	cmp	r3, #1
 800837c:	d109      	bne.n	8008392 <__gethex+0x386>
 800837e:	f01a 0f02 	tst.w	sl, #2
 8008382:	d006      	beq.n	8008392 <__gethex+0x386>
 8008384:	f8d9 0000 	ldr.w	r0, [r9]
 8008388:	ea4a 0a00 	orr.w	sl, sl, r0
 800838c:	f01a 0f01 	tst.w	sl, #1
 8008390:	d10e      	bne.n	80083b0 <__gethex+0x3a4>
 8008392:	f047 0710 	orr.w	r7, r7, #16
 8008396:	e033      	b.n	8008400 <__gethex+0x3f4>
 8008398:	f04f 0a01 	mov.w	sl, #1
 800839c:	e7d0      	b.n	8008340 <__gethex+0x334>
 800839e:	2701      	movs	r7, #1
 80083a0:	e7e2      	b.n	8008368 <__gethex+0x35c>
 80083a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083a4:	f1c3 0301 	rsb	r3, r3, #1
 80083a8:	9315      	str	r3, [sp, #84]	; 0x54
 80083aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d0f0      	beq.n	8008392 <__gethex+0x386>
 80083b0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80083b4:	f104 0314 	add.w	r3, r4, #20
 80083b8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80083bc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80083c0:	f04f 0c00 	mov.w	ip, #0
 80083c4:	4618      	mov	r0, r3
 80083c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80083ca:	f1b2 3fff 	cmp.w	r2, #4294967295
 80083ce:	d01c      	beq.n	800840a <__gethex+0x3fe>
 80083d0:	3201      	adds	r2, #1
 80083d2:	6002      	str	r2, [r0, #0]
 80083d4:	2f02      	cmp	r7, #2
 80083d6:	f104 0314 	add.w	r3, r4, #20
 80083da:	d13f      	bne.n	800845c <__gethex+0x450>
 80083dc:	f8d8 2000 	ldr.w	r2, [r8]
 80083e0:	3a01      	subs	r2, #1
 80083e2:	42b2      	cmp	r2, r6
 80083e4:	d10a      	bne.n	80083fc <__gethex+0x3f0>
 80083e6:	1171      	asrs	r1, r6, #5
 80083e8:	2201      	movs	r2, #1
 80083ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80083ee:	f006 061f 	and.w	r6, r6, #31
 80083f2:	fa02 f606 	lsl.w	r6, r2, r6
 80083f6:	421e      	tst	r6, r3
 80083f8:	bf18      	it	ne
 80083fa:	4617      	movne	r7, r2
 80083fc:	f047 0720 	orr.w	r7, r7, #32
 8008400:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008402:	601c      	str	r4, [r3, #0]
 8008404:	9b04      	ldr	r3, [sp, #16]
 8008406:	601d      	str	r5, [r3, #0]
 8008408:	e695      	b.n	8008136 <__gethex+0x12a>
 800840a:	4299      	cmp	r1, r3
 800840c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008410:	d8d8      	bhi.n	80083c4 <__gethex+0x3b8>
 8008412:	68a3      	ldr	r3, [r4, #8]
 8008414:	459b      	cmp	fp, r3
 8008416:	db19      	blt.n	800844c <__gethex+0x440>
 8008418:	6861      	ldr	r1, [r4, #4]
 800841a:	ee18 0a10 	vmov	r0, s16
 800841e:	3101      	adds	r1, #1
 8008420:	f000 f986 	bl	8008730 <_Balloc>
 8008424:	4681      	mov	r9, r0
 8008426:	b918      	cbnz	r0, 8008430 <__gethex+0x424>
 8008428:	4b1a      	ldr	r3, [pc, #104]	; (8008494 <__gethex+0x488>)
 800842a:	4602      	mov	r2, r0
 800842c:	2184      	movs	r1, #132	; 0x84
 800842e:	e6a8      	b.n	8008182 <__gethex+0x176>
 8008430:	6922      	ldr	r2, [r4, #16]
 8008432:	3202      	adds	r2, #2
 8008434:	f104 010c 	add.w	r1, r4, #12
 8008438:	0092      	lsls	r2, r2, #2
 800843a:	300c      	adds	r0, #12
 800843c:	f7fc fcfe 	bl	8004e3c <memcpy>
 8008440:	4621      	mov	r1, r4
 8008442:	ee18 0a10 	vmov	r0, s16
 8008446:	f000 f9b3 	bl	80087b0 <_Bfree>
 800844a:	464c      	mov	r4, r9
 800844c:	6923      	ldr	r3, [r4, #16]
 800844e:	1c5a      	adds	r2, r3, #1
 8008450:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008454:	6122      	str	r2, [r4, #16]
 8008456:	2201      	movs	r2, #1
 8008458:	615a      	str	r2, [r3, #20]
 800845a:	e7bb      	b.n	80083d4 <__gethex+0x3c8>
 800845c:	6922      	ldr	r2, [r4, #16]
 800845e:	455a      	cmp	r2, fp
 8008460:	dd0b      	ble.n	800847a <__gethex+0x46e>
 8008462:	2101      	movs	r1, #1
 8008464:	4620      	mov	r0, r4
 8008466:	f7ff fd6a 	bl	8007f3e <rshift>
 800846a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800846e:	3501      	adds	r5, #1
 8008470:	42ab      	cmp	r3, r5
 8008472:	f6ff aed0 	blt.w	8008216 <__gethex+0x20a>
 8008476:	2701      	movs	r7, #1
 8008478:	e7c0      	b.n	80083fc <__gethex+0x3f0>
 800847a:	f016 061f 	ands.w	r6, r6, #31
 800847e:	d0fa      	beq.n	8008476 <__gethex+0x46a>
 8008480:	449a      	add	sl, r3
 8008482:	f1c6 0620 	rsb	r6, r6, #32
 8008486:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800848a:	f000 fa47 	bl	800891c <__hi0bits>
 800848e:	42b0      	cmp	r0, r6
 8008490:	dbe7      	blt.n	8008462 <__gethex+0x456>
 8008492:	e7f0      	b.n	8008476 <__gethex+0x46a>
 8008494:	08009e44 	.word	0x08009e44

08008498 <L_shift>:
 8008498:	f1c2 0208 	rsb	r2, r2, #8
 800849c:	0092      	lsls	r2, r2, #2
 800849e:	b570      	push	{r4, r5, r6, lr}
 80084a0:	f1c2 0620 	rsb	r6, r2, #32
 80084a4:	6843      	ldr	r3, [r0, #4]
 80084a6:	6804      	ldr	r4, [r0, #0]
 80084a8:	fa03 f506 	lsl.w	r5, r3, r6
 80084ac:	432c      	orrs	r4, r5
 80084ae:	40d3      	lsrs	r3, r2
 80084b0:	6004      	str	r4, [r0, #0]
 80084b2:	f840 3f04 	str.w	r3, [r0, #4]!
 80084b6:	4288      	cmp	r0, r1
 80084b8:	d3f4      	bcc.n	80084a4 <L_shift+0xc>
 80084ba:	bd70      	pop	{r4, r5, r6, pc}

080084bc <__match>:
 80084bc:	b530      	push	{r4, r5, lr}
 80084be:	6803      	ldr	r3, [r0, #0]
 80084c0:	3301      	adds	r3, #1
 80084c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084c6:	b914      	cbnz	r4, 80084ce <__match+0x12>
 80084c8:	6003      	str	r3, [r0, #0]
 80084ca:	2001      	movs	r0, #1
 80084cc:	bd30      	pop	{r4, r5, pc}
 80084ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084d2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80084d6:	2d19      	cmp	r5, #25
 80084d8:	bf98      	it	ls
 80084da:	3220      	addls	r2, #32
 80084dc:	42a2      	cmp	r2, r4
 80084de:	d0f0      	beq.n	80084c2 <__match+0x6>
 80084e0:	2000      	movs	r0, #0
 80084e2:	e7f3      	b.n	80084cc <__match+0x10>

080084e4 <__hexnan>:
 80084e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e8:	680b      	ldr	r3, [r1, #0]
 80084ea:	6801      	ldr	r1, [r0, #0]
 80084ec:	115e      	asrs	r6, r3, #5
 80084ee:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80084f2:	f013 031f 	ands.w	r3, r3, #31
 80084f6:	b087      	sub	sp, #28
 80084f8:	bf18      	it	ne
 80084fa:	3604      	addne	r6, #4
 80084fc:	2500      	movs	r5, #0
 80084fe:	1f37      	subs	r7, r6, #4
 8008500:	4682      	mov	sl, r0
 8008502:	4690      	mov	r8, r2
 8008504:	9301      	str	r3, [sp, #4]
 8008506:	f846 5c04 	str.w	r5, [r6, #-4]
 800850a:	46b9      	mov	r9, r7
 800850c:	463c      	mov	r4, r7
 800850e:	9502      	str	r5, [sp, #8]
 8008510:	46ab      	mov	fp, r5
 8008512:	784a      	ldrb	r2, [r1, #1]
 8008514:	1c4b      	adds	r3, r1, #1
 8008516:	9303      	str	r3, [sp, #12]
 8008518:	b342      	cbz	r2, 800856c <__hexnan+0x88>
 800851a:	4610      	mov	r0, r2
 800851c:	9105      	str	r1, [sp, #20]
 800851e:	9204      	str	r2, [sp, #16]
 8008520:	f7ff fd5f 	bl	8007fe2 <__hexdig_fun>
 8008524:	2800      	cmp	r0, #0
 8008526:	d14f      	bne.n	80085c8 <__hexnan+0xe4>
 8008528:	9a04      	ldr	r2, [sp, #16]
 800852a:	9905      	ldr	r1, [sp, #20]
 800852c:	2a20      	cmp	r2, #32
 800852e:	d818      	bhi.n	8008562 <__hexnan+0x7e>
 8008530:	9b02      	ldr	r3, [sp, #8]
 8008532:	459b      	cmp	fp, r3
 8008534:	dd13      	ble.n	800855e <__hexnan+0x7a>
 8008536:	454c      	cmp	r4, r9
 8008538:	d206      	bcs.n	8008548 <__hexnan+0x64>
 800853a:	2d07      	cmp	r5, #7
 800853c:	dc04      	bgt.n	8008548 <__hexnan+0x64>
 800853e:	462a      	mov	r2, r5
 8008540:	4649      	mov	r1, r9
 8008542:	4620      	mov	r0, r4
 8008544:	f7ff ffa8 	bl	8008498 <L_shift>
 8008548:	4544      	cmp	r4, r8
 800854a:	d950      	bls.n	80085ee <__hexnan+0x10a>
 800854c:	2300      	movs	r3, #0
 800854e:	f1a4 0904 	sub.w	r9, r4, #4
 8008552:	f844 3c04 	str.w	r3, [r4, #-4]
 8008556:	f8cd b008 	str.w	fp, [sp, #8]
 800855a:	464c      	mov	r4, r9
 800855c:	461d      	mov	r5, r3
 800855e:	9903      	ldr	r1, [sp, #12]
 8008560:	e7d7      	b.n	8008512 <__hexnan+0x2e>
 8008562:	2a29      	cmp	r2, #41	; 0x29
 8008564:	d156      	bne.n	8008614 <__hexnan+0x130>
 8008566:	3102      	adds	r1, #2
 8008568:	f8ca 1000 	str.w	r1, [sl]
 800856c:	f1bb 0f00 	cmp.w	fp, #0
 8008570:	d050      	beq.n	8008614 <__hexnan+0x130>
 8008572:	454c      	cmp	r4, r9
 8008574:	d206      	bcs.n	8008584 <__hexnan+0xa0>
 8008576:	2d07      	cmp	r5, #7
 8008578:	dc04      	bgt.n	8008584 <__hexnan+0xa0>
 800857a:	462a      	mov	r2, r5
 800857c:	4649      	mov	r1, r9
 800857e:	4620      	mov	r0, r4
 8008580:	f7ff ff8a 	bl	8008498 <L_shift>
 8008584:	4544      	cmp	r4, r8
 8008586:	d934      	bls.n	80085f2 <__hexnan+0x10e>
 8008588:	f1a8 0204 	sub.w	r2, r8, #4
 800858c:	4623      	mov	r3, r4
 800858e:	f853 1b04 	ldr.w	r1, [r3], #4
 8008592:	f842 1f04 	str.w	r1, [r2, #4]!
 8008596:	429f      	cmp	r7, r3
 8008598:	d2f9      	bcs.n	800858e <__hexnan+0xaa>
 800859a:	1b3b      	subs	r3, r7, r4
 800859c:	f023 0303 	bic.w	r3, r3, #3
 80085a0:	3304      	adds	r3, #4
 80085a2:	3401      	adds	r4, #1
 80085a4:	3e03      	subs	r6, #3
 80085a6:	42b4      	cmp	r4, r6
 80085a8:	bf88      	it	hi
 80085aa:	2304      	movhi	r3, #4
 80085ac:	4443      	add	r3, r8
 80085ae:	2200      	movs	r2, #0
 80085b0:	f843 2b04 	str.w	r2, [r3], #4
 80085b4:	429f      	cmp	r7, r3
 80085b6:	d2fb      	bcs.n	80085b0 <__hexnan+0xcc>
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	b91b      	cbnz	r3, 80085c4 <__hexnan+0xe0>
 80085bc:	4547      	cmp	r7, r8
 80085be:	d127      	bne.n	8008610 <__hexnan+0x12c>
 80085c0:	2301      	movs	r3, #1
 80085c2:	603b      	str	r3, [r7, #0]
 80085c4:	2005      	movs	r0, #5
 80085c6:	e026      	b.n	8008616 <__hexnan+0x132>
 80085c8:	3501      	adds	r5, #1
 80085ca:	2d08      	cmp	r5, #8
 80085cc:	f10b 0b01 	add.w	fp, fp, #1
 80085d0:	dd06      	ble.n	80085e0 <__hexnan+0xfc>
 80085d2:	4544      	cmp	r4, r8
 80085d4:	d9c3      	bls.n	800855e <__hexnan+0x7a>
 80085d6:	2300      	movs	r3, #0
 80085d8:	f844 3c04 	str.w	r3, [r4, #-4]
 80085dc:	2501      	movs	r5, #1
 80085de:	3c04      	subs	r4, #4
 80085e0:	6822      	ldr	r2, [r4, #0]
 80085e2:	f000 000f 	and.w	r0, r0, #15
 80085e6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80085ea:	6022      	str	r2, [r4, #0]
 80085ec:	e7b7      	b.n	800855e <__hexnan+0x7a>
 80085ee:	2508      	movs	r5, #8
 80085f0:	e7b5      	b.n	800855e <__hexnan+0x7a>
 80085f2:	9b01      	ldr	r3, [sp, #4]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d0df      	beq.n	80085b8 <__hexnan+0xd4>
 80085f8:	f04f 32ff 	mov.w	r2, #4294967295
 80085fc:	f1c3 0320 	rsb	r3, r3, #32
 8008600:	fa22 f303 	lsr.w	r3, r2, r3
 8008604:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008608:	401a      	ands	r2, r3
 800860a:	f846 2c04 	str.w	r2, [r6, #-4]
 800860e:	e7d3      	b.n	80085b8 <__hexnan+0xd4>
 8008610:	3f04      	subs	r7, #4
 8008612:	e7d1      	b.n	80085b8 <__hexnan+0xd4>
 8008614:	2004      	movs	r0, #4
 8008616:	b007      	add	sp, #28
 8008618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800861c <_localeconv_r>:
 800861c:	4800      	ldr	r0, [pc, #0]	; (8008620 <_localeconv_r+0x4>)
 800861e:	4770      	bx	lr
 8008620:	20000164 	.word	0x20000164

08008624 <__retarget_lock_init_recursive>:
 8008624:	4770      	bx	lr

08008626 <__retarget_lock_acquire_recursive>:
 8008626:	4770      	bx	lr

08008628 <__retarget_lock_release_recursive>:
 8008628:	4770      	bx	lr

0800862a <__swhatbuf_r>:
 800862a:	b570      	push	{r4, r5, r6, lr}
 800862c:	460e      	mov	r6, r1
 800862e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008632:	2900      	cmp	r1, #0
 8008634:	b096      	sub	sp, #88	; 0x58
 8008636:	4614      	mov	r4, r2
 8008638:	461d      	mov	r5, r3
 800863a:	da07      	bge.n	800864c <__swhatbuf_r+0x22>
 800863c:	2300      	movs	r3, #0
 800863e:	602b      	str	r3, [r5, #0]
 8008640:	89b3      	ldrh	r3, [r6, #12]
 8008642:	061a      	lsls	r2, r3, #24
 8008644:	d410      	bmi.n	8008668 <__swhatbuf_r+0x3e>
 8008646:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800864a:	e00e      	b.n	800866a <__swhatbuf_r+0x40>
 800864c:	466a      	mov	r2, sp
 800864e:	f001 f89b 	bl	8009788 <_fstat_r>
 8008652:	2800      	cmp	r0, #0
 8008654:	dbf2      	blt.n	800863c <__swhatbuf_r+0x12>
 8008656:	9a01      	ldr	r2, [sp, #4]
 8008658:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800865c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008660:	425a      	negs	r2, r3
 8008662:	415a      	adcs	r2, r3
 8008664:	602a      	str	r2, [r5, #0]
 8008666:	e7ee      	b.n	8008646 <__swhatbuf_r+0x1c>
 8008668:	2340      	movs	r3, #64	; 0x40
 800866a:	2000      	movs	r0, #0
 800866c:	6023      	str	r3, [r4, #0]
 800866e:	b016      	add	sp, #88	; 0x58
 8008670:	bd70      	pop	{r4, r5, r6, pc}
	...

08008674 <__smakebuf_r>:
 8008674:	898b      	ldrh	r3, [r1, #12]
 8008676:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008678:	079d      	lsls	r5, r3, #30
 800867a:	4606      	mov	r6, r0
 800867c:	460c      	mov	r4, r1
 800867e:	d507      	bpl.n	8008690 <__smakebuf_r+0x1c>
 8008680:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008684:	6023      	str	r3, [r4, #0]
 8008686:	6123      	str	r3, [r4, #16]
 8008688:	2301      	movs	r3, #1
 800868a:	6163      	str	r3, [r4, #20]
 800868c:	b002      	add	sp, #8
 800868e:	bd70      	pop	{r4, r5, r6, pc}
 8008690:	ab01      	add	r3, sp, #4
 8008692:	466a      	mov	r2, sp
 8008694:	f7ff ffc9 	bl	800862a <__swhatbuf_r>
 8008698:	9900      	ldr	r1, [sp, #0]
 800869a:	4605      	mov	r5, r0
 800869c:	4630      	mov	r0, r6
 800869e:	f7fc fc43 	bl	8004f28 <_malloc_r>
 80086a2:	b948      	cbnz	r0, 80086b8 <__smakebuf_r+0x44>
 80086a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086a8:	059a      	lsls	r2, r3, #22
 80086aa:	d4ef      	bmi.n	800868c <__smakebuf_r+0x18>
 80086ac:	f023 0303 	bic.w	r3, r3, #3
 80086b0:	f043 0302 	orr.w	r3, r3, #2
 80086b4:	81a3      	strh	r3, [r4, #12]
 80086b6:	e7e3      	b.n	8008680 <__smakebuf_r+0xc>
 80086b8:	4b0d      	ldr	r3, [pc, #52]	; (80086f0 <__smakebuf_r+0x7c>)
 80086ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80086bc:	89a3      	ldrh	r3, [r4, #12]
 80086be:	6020      	str	r0, [r4, #0]
 80086c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086c4:	81a3      	strh	r3, [r4, #12]
 80086c6:	9b00      	ldr	r3, [sp, #0]
 80086c8:	6163      	str	r3, [r4, #20]
 80086ca:	9b01      	ldr	r3, [sp, #4]
 80086cc:	6120      	str	r0, [r4, #16]
 80086ce:	b15b      	cbz	r3, 80086e8 <__smakebuf_r+0x74>
 80086d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086d4:	4630      	mov	r0, r6
 80086d6:	f001 f869 	bl	80097ac <_isatty_r>
 80086da:	b128      	cbz	r0, 80086e8 <__smakebuf_r+0x74>
 80086dc:	89a3      	ldrh	r3, [r4, #12]
 80086de:	f023 0303 	bic.w	r3, r3, #3
 80086e2:	f043 0301 	orr.w	r3, r3, #1
 80086e6:	81a3      	strh	r3, [r4, #12]
 80086e8:	89a0      	ldrh	r0, [r4, #12]
 80086ea:	4305      	orrs	r5, r0
 80086ec:	81a5      	strh	r5, [r4, #12]
 80086ee:	e7cd      	b.n	800868c <__smakebuf_r+0x18>
 80086f0:	08007d9d 	.word	0x08007d9d

080086f4 <__ascii_mbtowc>:
 80086f4:	b082      	sub	sp, #8
 80086f6:	b901      	cbnz	r1, 80086fa <__ascii_mbtowc+0x6>
 80086f8:	a901      	add	r1, sp, #4
 80086fa:	b142      	cbz	r2, 800870e <__ascii_mbtowc+0x1a>
 80086fc:	b14b      	cbz	r3, 8008712 <__ascii_mbtowc+0x1e>
 80086fe:	7813      	ldrb	r3, [r2, #0]
 8008700:	600b      	str	r3, [r1, #0]
 8008702:	7812      	ldrb	r2, [r2, #0]
 8008704:	1e10      	subs	r0, r2, #0
 8008706:	bf18      	it	ne
 8008708:	2001      	movne	r0, #1
 800870a:	b002      	add	sp, #8
 800870c:	4770      	bx	lr
 800870e:	4610      	mov	r0, r2
 8008710:	e7fb      	b.n	800870a <__ascii_mbtowc+0x16>
 8008712:	f06f 0001 	mvn.w	r0, #1
 8008716:	e7f8      	b.n	800870a <__ascii_mbtowc+0x16>

08008718 <__malloc_lock>:
 8008718:	4801      	ldr	r0, [pc, #4]	; (8008720 <__malloc_lock+0x8>)
 800871a:	f7ff bf84 	b.w	8008626 <__retarget_lock_acquire_recursive>
 800871e:	bf00      	nop
 8008720:	20001d22 	.word	0x20001d22

08008724 <__malloc_unlock>:
 8008724:	4801      	ldr	r0, [pc, #4]	; (800872c <__malloc_unlock+0x8>)
 8008726:	f7ff bf7f 	b.w	8008628 <__retarget_lock_release_recursive>
 800872a:	bf00      	nop
 800872c:	20001d22 	.word	0x20001d22

08008730 <_Balloc>:
 8008730:	b570      	push	{r4, r5, r6, lr}
 8008732:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008734:	4604      	mov	r4, r0
 8008736:	460d      	mov	r5, r1
 8008738:	b976      	cbnz	r6, 8008758 <_Balloc+0x28>
 800873a:	2010      	movs	r0, #16
 800873c:	f7fc fb76 	bl	8004e2c <malloc>
 8008740:	4602      	mov	r2, r0
 8008742:	6260      	str	r0, [r4, #36]	; 0x24
 8008744:	b920      	cbnz	r0, 8008750 <_Balloc+0x20>
 8008746:	4b18      	ldr	r3, [pc, #96]	; (80087a8 <_Balloc+0x78>)
 8008748:	4818      	ldr	r0, [pc, #96]	; (80087ac <_Balloc+0x7c>)
 800874a:	2166      	movs	r1, #102	; 0x66
 800874c:	f000 ffdc 	bl	8009708 <__assert_func>
 8008750:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008754:	6006      	str	r6, [r0, #0]
 8008756:	60c6      	str	r6, [r0, #12]
 8008758:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800875a:	68f3      	ldr	r3, [r6, #12]
 800875c:	b183      	cbz	r3, 8008780 <_Balloc+0x50>
 800875e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008766:	b9b8      	cbnz	r0, 8008798 <_Balloc+0x68>
 8008768:	2101      	movs	r1, #1
 800876a:	fa01 f605 	lsl.w	r6, r1, r5
 800876e:	1d72      	adds	r2, r6, #5
 8008770:	0092      	lsls	r2, r2, #2
 8008772:	4620      	mov	r0, r4
 8008774:	f7fc fb78 	bl	8004e68 <_calloc_r>
 8008778:	b160      	cbz	r0, 8008794 <_Balloc+0x64>
 800877a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800877e:	e00e      	b.n	800879e <_Balloc+0x6e>
 8008780:	2221      	movs	r2, #33	; 0x21
 8008782:	2104      	movs	r1, #4
 8008784:	4620      	mov	r0, r4
 8008786:	f7fc fb6f 	bl	8004e68 <_calloc_r>
 800878a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800878c:	60f0      	str	r0, [r6, #12]
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d1e4      	bne.n	800875e <_Balloc+0x2e>
 8008794:	2000      	movs	r0, #0
 8008796:	bd70      	pop	{r4, r5, r6, pc}
 8008798:	6802      	ldr	r2, [r0, #0]
 800879a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800879e:	2300      	movs	r3, #0
 80087a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80087a4:	e7f7      	b.n	8008796 <_Balloc+0x66>
 80087a6:	bf00      	nop
 80087a8:	08009dce 	.word	0x08009dce
 80087ac:	08009f38 	.word	0x08009f38

080087b0 <_Bfree>:
 80087b0:	b570      	push	{r4, r5, r6, lr}
 80087b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80087b4:	4605      	mov	r5, r0
 80087b6:	460c      	mov	r4, r1
 80087b8:	b976      	cbnz	r6, 80087d8 <_Bfree+0x28>
 80087ba:	2010      	movs	r0, #16
 80087bc:	f7fc fb36 	bl	8004e2c <malloc>
 80087c0:	4602      	mov	r2, r0
 80087c2:	6268      	str	r0, [r5, #36]	; 0x24
 80087c4:	b920      	cbnz	r0, 80087d0 <_Bfree+0x20>
 80087c6:	4b09      	ldr	r3, [pc, #36]	; (80087ec <_Bfree+0x3c>)
 80087c8:	4809      	ldr	r0, [pc, #36]	; (80087f0 <_Bfree+0x40>)
 80087ca:	218a      	movs	r1, #138	; 0x8a
 80087cc:	f000 ff9c 	bl	8009708 <__assert_func>
 80087d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80087d4:	6006      	str	r6, [r0, #0]
 80087d6:	60c6      	str	r6, [r0, #12]
 80087d8:	b13c      	cbz	r4, 80087ea <_Bfree+0x3a>
 80087da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80087dc:	6862      	ldr	r2, [r4, #4]
 80087de:	68db      	ldr	r3, [r3, #12]
 80087e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80087e4:	6021      	str	r1, [r4, #0]
 80087e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80087ea:	bd70      	pop	{r4, r5, r6, pc}
 80087ec:	08009dce 	.word	0x08009dce
 80087f0:	08009f38 	.word	0x08009f38

080087f4 <__multadd>:
 80087f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087f8:	690e      	ldr	r6, [r1, #16]
 80087fa:	4607      	mov	r7, r0
 80087fc:	4698      	mov	r8, r3
 80087fe:	460c      	mov	r4, r1
 8008800:	f101 0014 	add.w	r0, r1, #20
 8008804:	2300      	movs	r3, #0
 8008806:	6805      	ldr	r5, [r0, #0]
 8008808:	b2a9      	uxth	r1, r5
 800880a:	fb02 8101 	mla	r1, r2, r1, r8
 800880e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008812:	0c2d      	lsrs	r5, r5, #16
 8008814:	fb02 c505 	mla	r5, r2, r5, ip
 8008818:	b289      	uxth	r1, r1
 800881a:	3301      	adds	r3, #1
 800881c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008820:	429e      	cmp	r6, r3
 8008822:	f840 1b04 	str.w	r1, [r0], #4
 8008826:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800882a:	dcec      	bgt.n	8008806 <__multadd+0x12>
 800882c:	f1b8 0f00 	cmp.w	r8, #0
 8008830:	d022      	beq.n	8008878 <__multadd+0x84>
 8008832:	68a3      	ldr	r3, [r4, #8]
 8008834:	42b3      	cmp	r3, r6
 8008836:	dc19      	bgt.n	800886c <__multadd+0x78>
 8008838:	6861      	ldr	r1, [r4, #4]
 800883a:	4638      	mov	r0, r7
 800883c:	3101      	adds	r1, #1
 800883e:	f7ff ff77 	bl	8008730 <_Balloc>
 8008842:	4605      	mov	r5, r0
 8008844:	b928      	cbnz	r0, 8008852 <__multadd+0x5e>
 8008846:	4602      	mov	r2, r0
 8008848:	4b0d      	ldr	r3, [pc, #52]	; (8008880 <__multadd+0x8c>)
 800884a:	480e      	ldr	r0, [pc, #56]	; (8008884 <__multadd+0x90>)
 800884c:	21b5      	movs	r1, #181	; 0xb5
 800884e:	f000 ff5b 	bl	8009708 <__assert_func>
 8008852:	6922      	ldr	r2, [r4, #16]
 8008854:	3202      	adds	r2, #2
 8008856:	f104 010c 	add.w	r1, r4, #12
 800885a:	0092      	lsls	r2, r2, #2
 800885c:	300c      	adds	r0, #12
 800885e:	f7fc faed 	bl	8004e3c <memcpy>
 8008862:	4621      	mov	r1, r4
 8008864:	4638      	mov	r0, r7
 8008866:	f7ff ffa3 	bl	80087b0 <_Bfree>
 800886a:	462c      	mov	r4, r5
 800886c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008870:	3601      	adds	r6, #1
 8008872:	f8c3 8014 	str.w	r8, [r3, #20]
 8008876:	6126      	str	r6, [r4, #16]
 8008878:	4620      	mov	r0, r4
 800887a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800887e:	bf00      	nop
 8008880:	08009e44 	.word	0x08009e44
 8008884:	08009f38 	.word	0x08009f38

08008888 <__s2b>:
 8008888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800888c:	460c      	mov	r4, r1
 800888e:	4615      	mov	r5, r2
 8008890:	461f      	mov	r7, r3
 8008892:	2209      	movs	r2, #9
 8008894:	3308      	adds	r3, #8
 8008896:	4606      	mov	r6, r0
 8008898:	fb93 f3f2 	sdiv	r3, r3, r2
 800889c:	2100      	movs	r1, #0
 800889e:	2201      	movs	r2, #1
 80088a0:	429a      	cmp	r2, r3
 80088a2:	db09      	blt.n	80088b8 <__s2b+0x30>
 80088a4:	4630      	mov	r0, r6
 80088a6:	f7ff ff43 	bl	8008730 <_Balloc>
 80088aa:	b940      	cbnz	r0, 80088be <__s2b+0x36>
 80088ac:	4602      	mov	r2, r0
 80088ae:	4b19      	ldr	r3, [pc, #100]	; (8008914 <__s2b+0x8c>)
 80088b0:	4819      	ldr	r0, [pc, #100]	; (8008918 <__s2b+0x90>)
 80088b2:	21ce      	movs	r1, #206	; 0xce
 80088b4:	f000 ff28 	bl	8009708 <__assert_func>
 80088b8:	0052      	lsls	r2, r2, #1
 80088ba:	3101      	adds	r1, #1
 80088bc:	e7f0      	b.n	80088a0 <__s2b+0x18>
 80088be:	9b08      	ldr	r3, [sp, #32]
 80088c0:	6143      	str	r3, [r0, #20]
 80088c2:	2d09      	cmp	r5, #9
 80088c4:	f04f 0301 	mov.w	r3, #1
 80088c8:	6103      	str	r3, [r0, #16]
 80088ca:	dd16      	ble.n	80088fa <__s2b+0x72>
 80088cc:	f104 0909 	add.w	r9, r4, #9
 80088d0:	46c8      	mov	r8, r9
 80088d2:	442c      	add	r4, r5
 80088d4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80088d8:	4601      	mov	r1, r0
 80088da:	3b30      	subs	r3, #48	; 0x30
 80088dc:	220a      	movs	r2, #10
 80088de:	4630      	mov	r0, r6
 80088e0:	f7ff ff88 	bl	80087f4 <__multadd>
 80088e4:	45a0      	cmp	r8, r4
 80088e6:	d1f5      	bne.n	80088d4 <__s2b+0x4c>
 80088e8:	f1a5 0408 	sub.w	r4, r5, #8
 80088ec:	444c      	add	r4, r9
 80088ee:	1b2d      	subs	r5, r5, r4
 80088f0:	1963      	adds	r3, r4, r5
 80088f2:	42bb      	cmp	r3, r7
 80088f4:	db04      	blt.n	8008900 <__s2b+0x78>
 80088f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088fa:	340a      	adds	r4, #10
 80088fc:	2509      	movs	r5, #9
 80088fe:	e7f6      	b.n	80088ee <__s2b+0x66>
 8008900:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008904:	4601      	mov	r1, r0
 8008906:	3b30      	subs	r3, #48	; 0x30
 8008908:	220a      	movs	r2, #10
 800890a:	4630      	mov	r0, r6
 800890c:	f7ff ff72 	bl	80087f4 <__multadd>
 8008910:	e7ee      	b.n	80088f0 <__s2b+0x68>
 8008912:	bf00      	nop
 8008914:	08009e44 	.word	0x08009e44
 8008918:	08009f38 	.word	0x08009f38

0800891c <__hi0bits>:
 800891c:	0c03      	lsrs	r3, r0, #16
 800891e:	041b      	lsls	r3, r3, #16
 8008920:	b9d3      	cbnz	r3, 8008958 <__hi0bits+0x3c>
 8008922:	0400      	lsls	r0, r0, #16
 8008924:	2310      	movs	r3, #16
 8008926:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800892a:	bf04      	itt	eq
 800892c:	0200      	lsleq	r0, r0, #8
 800892e:	3308      	addeq	r3, #8
 8008930:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008934:	bf04      	itt	eq
 8008936:	0100      	lsleq	r0, r0, #4
 8008938:	3304      	addeq	r3, #4
 800893a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800893e:	bf04      	itt	eq
 8008940:	0080      	lsleq	r0, r0, #2
 8008942:	3302      	addeq	r3, #2
 8008944:	2800      	cmp	r0, #0
 8008946:	db05      	blt.n	8008954 <__hi0bits+0x38>
 8008948:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800894c:	f103 0301 	add.w	r3, r3, #1
 8008950:	bf08      	it	eq
 8008952:	2320      	moveq	r3, #32
 8008954:	4618      	mov	r0, r3
 8008956:	4770      	bx	lr
 8008958:	2300      	movs	r3, #0
 800895a:	e7e4      	b.n	8008926 <__hi0bits+0xa>

0800895c <__lo0bits>:
 800895c:	6803      	ldr	r3, [r0, #0]
 800895e:	f013 0207 	ands.w	r2, r3, #7
 8008962:	4601      	mov	r1, r0
 8008964:	d00b      	beq.n	800897e <__lo0bits+0x22>
 8008966:	07da      	lsls	r2, r3, #31
 8008968:	d424      	bmi.n	80089b4 <__lo0bits+0x58>
 800896a:	0798      	lsls	r0, r3, #30
 800896c:	bf49      	itett	mi
 800896e:	085b      	lsrmi	r3, r3, #1
 8008970:	089b      	lsrpl	r3, r3, #2
 8008972:	2001      	movmi	r0, #1
 8008974:	600b      	strmi	r3, [r1, #0]
 8008976:	bf5c      	itt	pl
 8008978:	600b      	strpl	r3, [r1, #0]
 800897a:	2002      	movpl	r0, #2
 800897c:	4770      	bx	lr
 800897e:	b298      	uxth	r0, r3
 8008980:	b9b0      	cbnz	r0, 80089b0 <__lo0bits+0x54>
 8008982:	0c1b      	lsrs	r3, r3, #16
 8008984:	2010      	movs	r0, #16
 8008986:	f013 0fff 	tst.w	r3, #255	; 0xff
 800898a:	bf04      	itt	eq
 800898c:	0a1b      	lsreq	r3, r3, #8
 800898e:	3008      	addeq	r0, #8
 8008990:	071a      	lsls	r2, r3, #28
 8008992:	bf04      	itt	eq
 8008994:	091b      	lsreq	r3, r3, #4
 8008996:	3004      	addeq	r0, #4
 8008998:	079a      	lsls	r2, r3, #30
 800899a:	bf04      	itt	eq
 800899c:	089b      	lsreq	r3, r3, #2
 800899e:	3002      	addeq	r0, #2
 80089a0:	07da      	lsls	r2, r3, #31
 80089a2:	d403      	bmi.n	80089ac <__lo0bits+0x50>
 80089a4:	085b      	lsrs	r3, r3, #1
 80089a6:	f100 0001 	add.w	r0, r0, #1
 80089aa:	d005      	beq.n	80089b8 <__lo0bits+0x5c>
 80089ac:	600b      	str	r3, [r1, #0]
 80089ae:	4770      	bx	lr
 80089b0:	4610      	mov	r0, r2
 80089b2:	e7e8      	b.n	8008986 <__lo0bits+0x2a>
 80089b4:	2000      	movs	r0, #0
 80089b6:	4770      	bx	lr
 80089b8:	2020      	movs	r0, #32
 80089ba:	4770      	bx	lr

080089bc <__i2b>:
 80089bc:	b510      	push	{r4, lr}
 80089be:	460c      	mov	r4, r1
 80089c0:	2101      	movs	r1, #1
 80089c2:	f7ff feb5 	bl	8008730 <_Balloc>
 80089c6:	4602      	mov	r2, r0
 80089c8:	b928      	cbnz	r0, 80089d6 <__i2b+0x1a>
 80089ca:	4b05      	ldr	r3, [pc, #20]	; (80089e0 <__i2b+0x24>)
 80089cc:	4805      	ldr	r0, [pc, #20]	; (80089e4 <__i2b+0x28>)
 80089ce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80089d2:	f000 fe99 	bl	8009708 <__assert_func>
 80089d6:	2301      	movs	r3, #1
 80089d8:	6144      	str	r4, [r0, #20]
 80089da:	6103      	str	r3, [r0, #16]
 80089dc:	bd10      	pop	{r4, pc}
 80089de:	bf00      	nop
 80089e0:	08009e44 	.word	0x08009e44
 80089e4:	08009f38 	.word	0x08009f38

080089e8 <__multiply>:
 80089e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ec:	4614      	mov	r4, r2
 80089ee:	690a      	ldr	r2, [r1, #16]
 80089f0:	6923      	ldr	r3, [r4, #16]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	bfb8      	it	lt
 80089f6:	460b      	movlt	r3, r1
 80089f8:	460d      	mov	r5, r1
 80089fa:	bfbc      	itt	lt
 80089fc:	4625      	movlt	r5, r4
 80089fe:	461c      	movlt	r4, r3
 8008a00:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008a04:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008a08:	68ab      	ldr	r3, [r5, #8]
 8008a0a:	6869      	ldr	r1, [r5, #4]
 8008a0c:	eb0a 0709 	add.w	r7, sl, r9
 8008a10:	42bb      	cmp	r3, r7
 8008a12:	b085      	sub	sp, #20
 8008a14:	bfb8      	it	lt
 8008a16:	3101      	addlt	r1, #1
 8008a18:	f7ff fe8a 	bl	8008730 <_Balloc>
 8008a1c:	b930      	cbnz	r0, 8008a2c <__multiply+0x44>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	4b42      	ldr	r3, [pc, #264]	; (8008b2c <__multiply+0x144>)
 8008a22:	4843      	ldr	r0, [pc, #268]	; (8008b30 <__multiply+0x148>)
 8008a24:	f240 115d 	movw	r1, #349	; 0x15d
 8008a28:	f000 fe6e 	bl	8009708 <__assert_func>
 8008a2c:	f100 0614 	add.w	r6, r0, #20
 8008a30:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008a34:	4633      	mov	r3, r6
 8008a36:	2200      	movs	r2, #0
 8008a38:	4543      	cmp	r3, r8
 8008a3a:	d31e      	bcc.n	8008a7a <__multiply+0x92>
 8008a3c:	f105 0c14 	add.w	ip, r5, #20
 8008a40:	f104 0314 	add.w	r3, r4, #20
 8008a44:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008a48:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008a4c:	9202      	str	r2, [sp, #8]
 8008a4e:	ebac 0205 	sub.w	r2, ip, r5
 8008a52:	3a15      	subs	r2, #21
 8008a54:	f022 0203 	bic.w	r2, r2, #3
 8008a58:	3204      	adds	r2, #4
 8008a5a:	f105 0115 	add.w	r1, r5, #21
 8008a5e:	458c      	cmp	ip, r1
 8008a60:	bf38      	it	cc
 8008a62:	2204      	movcc	r2, #4
 8008a64:	9201      	str	r2, [sp, #4]
 8008a66:	9a02      	ldr	r2, [sp, #8]
 8008a68:	9303      	str	r3, [sp, #12]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d808      	bhi.n	8008a80 <__multiply+0x98>
 8008a6e:	2f00      	cmp	r7, #0
 8008a70:	dc55      	bgt.n	8008b1e <__multiply+0x136>
 8008a72:	6107      	str	r7, [r0, #16]
 8008a74:	b005      	add	sp, #20
 8008a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a7a:	f843 2b04 	str.w	r2, [r3], #4
 8008a7e:	e7db      	b.n	8008a38 <__multiply+0x50>
 8008a80:	f8b3 a000 	ldrh.w	sl, [r3]
 8008a84:	f1ba 0f00 	cmp.w	sl, #0
 8008a88:	d020      	beq.n	8008acc <__multiply+0xe4>
 8008a8a:	f105 0e14 	add.w	lr, r5, #20
 8008a8e:	46b1      	mov	r9, r6
 8008a90:	2200      	movs	r2, #0
 8008a92:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008a96:	f8d9 b000 	ldr.w	fp, [r9]
 8008a9a:	b2a1      	uxth	r1, r4
 8008a9c:	fa1f fb8b 	uxth.w	fp, fp
 8008aa0:	fb0a b101 	mla	r1, sl, r1, fp
 8008aa4:	4411      	add	r1, r2
 8008aa6:	f8d9 2000 	ldr.w	r2, [r9]
 8008aaa:	0c24      	lsrs	r4, r4, #16
 8008aac:	0c12      	lsrs	r2, r2, #16
 8008aae:	fb0a 2404 	mla	r4, sl, r4, r2
 8008ab2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008ab6:	b289      	uxth	r1, r1
 8008ab8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008abc:	45f4      	cmp	ip, lr
 8008abe:	f849 1b04 	str.w	r1, [r9], #4
 8008ac2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008ac6:	d8e4      	bhi.n	8008a92 <__multiply+0xaa>
 8008ac8:	9901      	ldr	r1, [sp, #4]
 8008aca:	5072      	str	r2, [r6, r1]
 8008acc:	9a03      	ldr	r2, [sp, #12]
 8008ace:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008ad2:	3304      	adds	r3, #4
 8008ad4:	f1b9 0f00 	cmp.w	r9, #0
 8008ad8:	d01f      	beq.n	8008b1a <__multiply+0x132>
 8008ada:	6834      	ldr	r4, [r6, #0]
 8008adc:	f105 0114 	add.w	r1, r5, #20
 8008ae0:	46b6      	mov	lr, r6
 8008ae2:	f04f 0a00 	mov.w	sl, #0
 8008ae6:	880a      	ldrh	r2, [r1, #0]
 8008ae8:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008aec:	fb09 b202 	mla	r2, r9, r2, fp
 8008af0:	4492      	add	sl, r2
 8008af2:	b2a4      	uxth	r4, r4
 8008af4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008af8:	f84e 4b04 	str.w	r4, [lr], #4
 8008afc:	f851 4b04 	ldr.w	r4, [r1], #4
 8008b00:	f8be 2000 	ldrh.w	r2, [lr]
 8008b04:	0c24      	lsrs	r4, r4, #16
 8008b06:	fb09 2404 	mla	r4, r9, r4, r2
 8008b0a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008b0e:	458c      	cmp	ip, r1
 8008b10:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008b14:	d8e7      	bhi.n	8008ae6 <__multiply+0xfe>
 8008b16:	9a01      	ldr	r2, [sp, #4]
 8008b18:	50b4      	str	r4, [r6, r2]
 8008b1a:	3604      	adds	r6, #4
 8008b1c:	e7a3      	b.n	8008a66 <__multiply+0x7e>
 8008b1e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d1a5      	bne.n	8008a72 <__multiply+0x8a>
 8008b26:	3f01      	subs	r7, #1
 8008b28:	e7a1      	b.n	8008a6e <__multiply+0x86>
 8008b2a:	bf00      	nop
 8008b2c:	08009e44 	.word	0x08009e44
 8008b30:	08009f38 	.word	0x08009f38

08008b34 <__pow5mult>:
 8008b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b38:	4615      	mov	r5, r2
 8008b3a:	f012 0203 	ands.w	r2, r2, #3
 8008b3e:	4606      	mov	r6, r0
 8008b40:	460f      	mov	r7, r1
 8008b42:	d007      	beq.n	8008b54 <__pow5mult+0x20>
 8008b44:	4c25      	ldr	r4, [pc, #148]	; (8008bdc <__pow5mult+0xa8>)
 8008b46:	3a01      	subs	r2, #1
 8008b48:	2300      	movs	r3, #0
 8008b4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008b4e:	f7ff fe51 	bl	80087f4 <__multadd>
 8008b52:	4607      	mov	r7, r0
 8008b54:	10ad      	asrs	r5, r5, #2
 8008b56:	d03d      	beq.n	8008bd4 <__pow5mult+0xa0>
 8008b58:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008b5a:	b97c      	cbnz	r4, 8008b7c <__pow5mult+0x48>
 8008b5c:	2010      	movs	r0, #16
 8008b5e:	f7fc f965 	bl	8004e2c <malloc>
 8008b62:	4602      	mov	r2, r0
 8008b64:	6270      	str	r0, [r6, #36]	; 0x24
 8008b66:	b928      	cbnz	r0, 8008b74 <__pow5mult+0x40>
 8008b68:	4b1d      	ldr	r3, [pc, #116]	; (8008be0 <__pow5mult+0xac>)
 8008b6a:	481e      	ldr	r0, [pc, #120]	; (8008be4 <__pow5mult+0xb0>)
 8008b6c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008b70:	f000 fdca 	bl	8009708 <__assert_func>
 8008b74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b78:	6004      	str	r4, [r0, #0]
 8008b7a:	60c4      	str	r4, [r0, #12]
 8008b7c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008b80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008b84:	b94c      	cbnz	r4, 8008b9a <__pow5mult+0x66>
 8008b86:	f240 2171 	movw	r1, #625	; 0x271
 8008b8a:	4630      	mov	r0, r6
 8008b8c:	f7ff ff16 	bl	80089bc <__i2b>
 8008b90:	2300      	movs	r3, #0
 8008b92:	f8c8 0008 	str.w	r0, [r8, #8]
 8008b96:	4604      	mov	r4, r0
 8008b98:	6003      	str	r3, [r0, #0]
 8008b9a:	f04f 0900 	mov.w	r9, #0
 8008b9e:	07eb      	lsls	r3, r5, #31
 8008ba0:	d50a      	bpl.n	8008bb8 <__pow5mult+0x84>
 8008ba2:	4639      	mov	r1, r7
 8008ba4:	4622      	mov	r2, r4
 8008ba6:	4630      	mov	r0, r6
 8008ba8:	f7ff ff1e 	bl	80089e8 <__multiply>
 8008bac:	4639      	mov	r1, r7
 8008bae:	4680      	mov	r8, r0
 8008bb0:	4630      	mov	r0, r6
 8008bb2:	f7ff fdfd 	bl	80087b0 <_Bfree>
 8008bb6:	4647      	mov	r7, r8
 8008bb8:	106d      	asrs	r5, r5, #1
 8008bba:	d00b      	beq.n	8008bd4 <__pow5mult+0xa0>
 8008bbc:	6820      	ldr	r0, [r4, #0]
 8008bbe:	b938      	cbnz	r0, 8008bd0 <__pow5mult+0x9c>
 8008bc0:	4622      	mov	r2, r4
 8008bc2:	4621      	mov	r1, r4
 8008bc4:	4630      	mov	r0, r6
 8008bc6:	f7ff ff0f 	bl	80089e8 <__multiply>
 8008bca:	6020      	str	r0, [r4, #0]
 8008bcc:	f8c0 9000 	str.w	r9, [r0]
 8008bd0:	4604      	mov	r4, r0
 8008bd2:	e7e4      	b.n	8008b9e <__pow5mult+0x6a>
 8008bd4:	4638      	mov	r0, r7
 8008bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bda:	bf00      	nop
 8008bdc:	0800a088 	.word	0x0800a088
 8008be0:	08009dce 	.word	0x08009dce
 8008be4:	08009f38 	.word	0x08009f38

08008be8 <__lshift>:
 8008be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bec:	460c      	mov	r4, r1
 8008bee:	6849      	ldr	r1, [r1, #4]
 8008bf0:	6923      	ldr	r3, [r4, #16]
 8008bf2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008bf6:	68a3      	ldr	r3, [r4, #8]
 8008bf8:	4607      	mov	r7, r0
 8008bfa:	4691      	mov	r9, r2
 8008bfc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c00:	f108 0601 	add.w	r6, r8, #1
 8008c04:	42b3      	cmp	r3, r6
 8008c06:	db0b      	blt.n	8008c20 <__lshift+0x38>
 8008c08:	4638      	mov	r0, r7
 8008c0a:	f7ff fd91 	bl	8008730 <_Balloc>
 8008c0e:	4605      	mov	r5, r0
 8008c10:	b948      	cbnz	r0, 8008c26 <__lshift+0x3e>
 8008c12:	4602      	mov	r2, r0
 8008c14:	4b28      	ldr	r3, [pc, #160]	; (8008cb8 <__lshift+0xd0>)
 8008c16:	4829      	ldr	r0, [pc, #164]	; (8008cbc <__lshift+0xd4>)
 8008c18:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008c1c:	f000 fd74 	bl	8009708 <__assert_func>
 8008c20:	3101      	adds	r1, #1
 8008c22:	005b      	lsls	r3, r3, #1
 8008c24:	e7ee      	b.n	8008c04 <__lshift+0x1c>
 8008c26:	2300      	movs	r3, #0
 8008c28:	f100 0114 	add.w	r1, r0, #20
 8008c2c:	f100 0210 	add.w	r2, r0, #16
 8008c30:	4618      	mov	r0, r3
 8008c32:	4553      	cmp	r3, sl
 8008c34:	db33      	blt.n	8008c9e <__lshift+0xb6>
 8008c36:	6920      	ldr	r0, [r4, #16]
 8008c38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c3c:	f104 0314 	add.w	r3, r4, #20
 8008c40:	f019 091f 	ands.w	r9, r9, #31
 8008c44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008c48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008c4c:	d02b      	beq.n	8008ca6 <__lshift+0xbe>
 8008c4e:	f1c9 0e20 	rsb	lr, r9, #32
 8008c52:	468a      	mov	sl, r1
 8008c54:	2200      	movs	r2, #0
 8008c56:	6818      	ldr	r0, [r3, #0]
 8008c58:	fa00 f009 	lsl.w	r0, r0, r9
 8008c5c:	4302      	orrs	r2, r0
 8008c5e:	f84a 2b04 	str.w	r2, [sl], #4
 8008c62:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c66:	459c      	cmp	ip, r3
 8008c68:	fa22 f20e 	lsr.w	r2, r2, lr
 8008c6c:	d8f3      	bhi.n	8008c56 <__lshift+0x6e>
 8008c6e:	ebac 0304 	sub.w	r3, ip, r4
 8008c72:	3b15      	subs	r3, #21
 8008c74:	f023 0303 	bic.w	r3, r3, #3
 8008c78:	3304      	adds	r3, #4
 8008c7a:	f104 0015 	add.w	r0, r4, #21
 8008c7e:	4584      	cmp	ip, r0
 8008c80:	bf38      	it	cc
 8008c82:	2304      	movcc	r3, #4
 8008c84:	50ca      	str	r2, [r1, r3]
 8008c86:	b10a      	cbz	r2, 8008c8c <__lshift+0xa4>
 8008c88:	f108 0602 	add.w	r6, r8, #2
 8008c8c:	3e01      	subs	r6, #1
 8008c8e:	4638      	mov	r0, r7
 8008c90:	612e      	str	r6, [r5, #16]
 8008c92:	4621      	mov	r1, r4
 8008c94:	f7ff fd8c 	bl	80087b0 <_Bfree>
 8008c98:	4628      	mov	r0, r5
 8008c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	e7c5      	b.n	8008c32 <__lshift+0x4a>
 8008ca6:	3904      	subs	r1, #4
 8008ca8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cac:	f841 2f04 	str.w	r2, [r1, #4]!
 8008cb0:	459c      	cmp	ip, r3
 8008cb2:	d8f9      	bhi.n	8008ca8 <__lshift+0xc0>
 8008cb4:	e7ea      	b.n	8008c8c <__lshift+0xa4>
 8008cb6:	bf00      	nop
 8008cb8:	08009e44 	.word	0x08009e44
 8008cbc:	08009f38 	.word	0x08009f38

08008cc0 <__mcmp>:
 8008cc0:	b530      	push	{r4, r5, lr}
 8008cc2:	6902      	ldr	r2, [r0, #16]
 8008cc4:	690c      	ldr	r4, [r1, #16]
 8008cc6:	1b12      	subs	r2, r2, r4
 8008cc8:	d10e      	bne.n	8008ce8 <__mcmp+0x28>
 8008cca:	f100 0314 	add.w	r3, r0, #20
 8008cce:	3114      	adds	r1, #20
 8008cd0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008cd4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008cd8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008cdc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008ce0:	42a5      	cmp	r5, r4
 8008ce2:	d003      	beq.n	8008cec <__mcmp+0x2c>
 8008ce4:	d305      	bcc.n	8008cf2 <__mcmp+0x32>
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	4610      	mov	r0, r2
 8008cea:	bd30      	pop	{r4, r5, pc}
 8008cec:	4283      	cmp	r3, r0
 8008cee:	d3f3      	bcc.n	8008cd8 <__mcmp+0x18>
 8008cf0:	e7fa      	b.n	8008ce8 <__mcmp+0x28>
 8008cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8008cf6:	e7f7      	b.n	8008ce8 <__mcmp+0x28>

08008cf8 <__mdiff>:
 8008cf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cfc:	460c      	mov	r4, r1
 8008cfe:	4606      	mov	r6, r0
 8008d00:	4611      	mov	r1, r2
 8008d02:	4620      	mov	r0, r4
 8008d04:	4617      	mov	r7, r2
 8008d06:	f7ff ffdb 	bl	8008cc0 <__mcmp>
 8008d0a:	1e05      	subs	r5, r0, #0
 8008d0c:	d110      	bne.n	8008d30 <__mdiff+0x38>
 8008d0e:	4629      	mov	r1, r5
 8008d10:	4630      	mov	r0, r6
 8008d12:	f7ff fd0d 	bl	8008730 <_Balloc>
 8008d16:	b930      	cbnz	r0, 8008d26 <__mdiff+0x2e>
 8008d18:	4b39      	ldr	r3, [pc, #228]	; (8008e00 <__mdiff+0x108>)
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	f240 2132 	movw	r1, #562	; 0x232
 8008d20:	4838      	ldr	r0, [pc, #224]	; (8008e04 <__mdiff+0x10c>)
 8008d22:	f000 fcf1 	bl	8009708 <__assert_func>
 8008d26:	2301      	movs	r3, #1
 8008d28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008d2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d30:	bfa4      	itt	ge
 8008d32:	463b      	movge	r3, r7
 8008d34:	4627      	movge	r7, r4
 8008d36:	4630      	mov	r0, r6
 8008d38:	6879      	ldr	r1, [r7, #4]
 8008d3a:	bfa6      	itte	ge
 8008d3c:	461c      	movge	r4, r3
 8008d3e:	2500      	movge	r5, #0
 8008d40:	2501      	movlt	r5, #1
 8008d42:	f7ff fcf5 	bl	8008730 <_Balloc>
 8008d46:	b920      	cbnz	r0, 8008d52 <__mdiff+0x5a>
 8008d48:	4b2d      	ldr	r3, [pc, #180]	; (8008e00 <__mdiff+0x108>)
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008d50:	e7e6      	b.n	8008d20 <__mdiff+0x28>
 8008d52:	693e      	ldr	r6, [r7, #16]
 8008d54:	60c5      	str	r5, [r0, #12]
 8008d56:	6925      	ldr	r5, [r4, #16]
 8008d58:	f107 0114 	add.w	r1, r7, #20
 8008d5c:	f104 0914 	add.w	r9, r4, #20
 8008d60:	f100 0e14 	add.w	lr, r0, #20
 8008d64:	f107 0210 	add.w	r2, r7, #16
 8008d68:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008d6c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008d70:	46f2      	mov	sl, lr
 8008d72:	2700      	movs	r7, #0
 8008d74:	f859 3b04 	ldr.w	r3, [r9], #4
 8008d78:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008d7c:	fa1f f883 	uxth.w	r8, r3
 8008d80:	fa17 f78b 	uxtah	r7, r7, fp
 8008d84:	0c1b      	lsrs	r3, r3, #16
 8008d86:	eba7 0808 	sub.w	r8, r7, r8
 8008d8a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008d8e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008d92:	fa1f f888 	uxth.w	r8, r8
 8008d96:	141f      	asrs	r7, r3, #16
 8008d98:	454d      	cmp	r5, r9
 8008d9a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008d9e:	f84a 3b04 	str.w	r3, [sl], #4
 8008da2:	d8e7      	bhi.n	8008d74 <__mdiff+0x7c>
 8008da4:	1b2b      	subs	r3, r5, r4
 8008da6:	3b15      	subs	r3, #21
 8008da8:	f023 0303 	bic.w	r3, r3, #3
 8008dac:	3304      	adds	r3, #4
 8008dae:	3415      	adds	r4, #21
 8008db0:	42a5      	cmp	r5, r4
 8008db2:	bf38      	it	cc
 8008db4:	2304      	movcc	r3, #4
 8008db6:	4419      	add	r1, r3
 8008db8:	4473      	add	r3, lr
 8008dba:	469e      	mov	lr, r3
 8008dbc:	460d      	mov	r5, r1
 8008dbe:	4565      	cmp	r5, ip
 8008dc0:	d30e      	bcc.n	8008de0 <__mdiff+0xe8>
 8008dc2:	f10c 0203 	add.w	r2, ip, #3
 8008dc6:	1a52      	subs	r2, r2, r1
 8008dc8:	f022 0203 	bic.w	r2, r2, #3
 8008dcc:	3903      	subs	r1, #3
 8008dce:	458c      	cmp	ip, r1
 8008dd0:	bf38      	it	cc
 8008dd2:	2200      	movcc	r2, #0
 8008dd4:	441a      	add	r2, r3
 8008dd6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008dda:	b17b      	cbz	r3, 8008dfc <__mdiff+0x104>
 8008ddc:	6106      	str	r6, [r0, #16]
 8008dde:	e7a5      	b.n	8008d2c <__mdiff+0x34>
 8008de0:	f855 8b04 	ldr.w	r8, [r5], #4
 8008de4:	fa17 f488 	uxtah	r4, r7, r8
 8008de8:	1422      	asrs	r2, r4, #16
 8008dea:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008dee:	b2a4      	uxth	r4, r4
 8008df0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008df4:	f84e 4b04 	str.w	r4, [lr], #4
 8008df8:	1417      	asrs	r7, r2, #16
 8008dfa:	e7e0      	b.n	8008dbe <__mdiff+0xc6>
 8008dfc:	3e01      	subs	r6, #1
 8008dfe:	e7ea      	b.n	8008dd6 <__mdiff+0xde>
 8008e00:	08009e44 	.word	0x08009e44
 8008e04:	08009f38 	.word	0x08009f38

08008e08 <__ulp>:
 8008e08:	b082      	sub	sp, #8
 8008e0a:	ed8d 0b00 	vstr	d0, [sp]
 8008e0e:	9b01      	ldr	r3, [sp, #4]
 8008e10:	4912      	ldr	r1, [pc, #72]	; (8008e5c <__ulp+0x54>)
 8008e12:	4019      	ands	r1, r3
 8008e14:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008e18:	2900      	cmp	r1, #0
 8008e1a:	dd05      	ble.n	8008e28 <__ulp+0x20>
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	460b      	mov	r3, r1
 8008e20:	ec43 2b10 	vmov	d0, r2, r3
 8008e24:	b002      	add	sp, #8
 8008e26:	4770      	bx	lr
 8008e28:	4249      	negs	r1, r1
 8008e2a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008e2e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008e32:	f04f 0200 	mov.w	r2, #0
 8008e36:	f04f 0300 	mov.w	r3, #0
 8008e3a:	da04      	bge.n	8008e46 <__ulp+0x3e>
 8008e3c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008e40:	fa41 f300 	asr.w	r3, r1, r0
 8008e44:	e7ec      	b.n	8008e20 <__ulp+0x18>
 8008e46:	f1a0 0114 	sub.w	r1, r0, #20
 8008e4a:	291e      	cmp	r1, #30
 8008e4c:	bfda      	itte	le
 8008e4e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008e52:	fa20 f101 	lsrle.w	r1, r0, r1
 8008e56:	2101      	movgt	r1, #1
 8008e58:	460a      	mov	r2, r1
 8008e5a:	e7e1      	b.n	8008e20 <__ulp+0x18>
 8008e5c:	7ff00000 	.word	0x7ff00000

08008e60 <__b2d>:
 8008e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e62:	6905      	ldr	r5, [r0, #16]
 8008e64:	f100 0714 	add.w	r7, r0, #20
 8008e68:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008e6c:	1f2e      	subs	r6, r5, #4
 8008e6e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008e72:	4620      	mov	r0, r4
 8008e74:	f7ff fd52 	bl	800891c <__hi0bits>
 8008e78:	f1c0 0320 	rsb	r3, r0, #32
 8008e7c:	280a      	cmp	r0, #10
 8008e7e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008efc <__b2d+0x9c>
 8008e82:	600b      	str	r3, [r1, #0]
 8008e84:	dc14      	bgt.n	8008eb0 <__b2d+0x50>
 8008e86:	f1c0 0e0b 	rsb	lr, r0, #11
 8008e8a:	fa24 f10e 	lsr.w	r1, r4, lr
 8008e8e:	42b7      	cmp	r7, r6
 8008e90:	ea41 030c 	orr.w	r3, r1, ip
 8008e94:	bf34      	ite	cc
 8008e96:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008e9a:	2100      	movcs	r1, #0
 8008e9c:	3015      	adds	r0, #21
 8008e9e:	fa04 f000 	lsl.w	r0, r4, r0
 8008ea2:	fa21 f10e 	lsr.w	r1, r1, lr
 8008ea6:	ea40 0201 	orr.w	r2, r0, r1
 8008eaa:	ec43 2b10 	vmov	d0, r2, r3
 8008eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008eb0:	42b7      	cmp	r7, r6
 8008eb2:	bf3a      	itte	cc
 8008eb4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008eb8:	f1a5 0608 	subcc.w	r6, r5, #8
 8008ebc:	2100      	movcs	r1, #0
 8008ebe:	380b      	subs	r0, #11
 8008ec0:	d017      	beq.n	8008ef2 <__b2d+0x92>
 8008ec2:	f1c0 0c20 	rsb	ip, r0, #32
 8008ec6:	fa04 f500 	lsl.w	r5, r4, r0
 8008eca:	42be      	cmp	r6, r7
 8008ecc:	fa21 f40c 	lsr.w	r4, r1, ip
 8008ed0:	ea45 0504 	orr.w	r5, r5, r4
 8008ed4:	bf8c      	ite	hi
 8008ed6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008eda:	2400      	movls	r4, #0
 8008edc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008ee0:	fa01 f000 	lsl.w	r0, r1, r0
 8008ee4:	fa24 f40c 	lsr.w	r4, r4, ip
 8008ee8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008eec:	ea40 0204 	orr.w	r2, r0, r4
 8008ef0:	e7db      	b.n	8008eaa <__b2d+0x4a>
 8008ef2:	ea44 030c 	orr.w	r3, r4, ip
 8008ef6:	460a      	mov	r2, r1
 8008ef8:	e7d7      	b.n	8008eaa <__b2d+0x4a>
 8008efa:	bf00      	nop
 8008efc:	3ff00000 	.word	0x3ff00000

08008f00 <__d2b>:
 8008f00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008f04:	4689      	mov	r9, r1
 8008f06:	2101      	movs	r1, #1
 8008f08:	ec57 6b10 	vmov	r6, r7, d0
 8008f0c:	4690      	mov	r8, r2
 8008f0e:	f7ff fc0f 	bl	8008730 <_Balloc>
 8008f12:	4604      	mov	r4, r0
 8008f14:	b930      	cbnz	r0, 8008f24 <__d2b+0x24>
 8008f16:	4602      	mov	r2, r0
 8008f18:	4b25      	ldr	r3, [pc, #148]	; (8008fb0 <__d2b+0xb0>)
 8008f1a:	4826      	ldr	r0, [pc, #152]	; (8008fb4 <__d2b+0xb4>)
 8008f1c:	f240 310a 	movw	r1, #778	; 0x30a
 8008f20:	f000 fbf2 	bl	8009708 <__assert_func>
 8008f24:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008f28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008f2c:	bb35      	cbnz	r5, 8008f7c <__d2b+0x7c>
 8008f2e:	2e00      	cmp	r6, #0
 8008f30:	9301      	str	r3, [sp, #4]
 8008f32:	d028      	beq.n	8008f86 <__d2b+0x86>
 8008f34:	4668      	mov	r0, sp
 8008f36:	9600      	str	r6, [sp, #0]
 8008f38:	f7ff fd10 	bl	800895c <__lo0bits>
 8008f3c:	9900      	ldr	r1, [sp, #0]
 8008f3e:	b300      	cbz	r0, 8008f82 <__d2b+0x82>
 8008f40:	9a01      	ldr	r2, [sp, #4]
 8008f42:	f1c0 0320 	rsb	r3, r0, #32
 8008f46:	fa02 f303 	lsl.w	r3, r2, r3
 8008f4a:	430b      	orrs	r3, r1
 8008f4c:	40c2      	lsrs	r2, r0
 8008f4e:	6163      	str	r3, [r4, #20]
 8008f50:	9201      	str	r2, [sp, #4]
 8008f52:	9b01      	ldr	r3, [sp, #4]
 8008f54:	61a3      	str	r3, [r4, #24]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	bf14      	ite	ne
 8008f5a:	2202      	movne	r2, #2
 8008f5c:	2201      	moveq	r2, #1
 8008f5e:	6122      	str	r2, [r4, #16]
 8008f60:	b1d5      	cbz	r5, 8008f98 <__d2b+0x98>
 8008f62:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008f66:	4405      	add	r5, r0
 8008f68:	f8c9 5000 	str.w	r5, [r9]
 8008f6c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008f70:	f8c8 0000 	str.w	r0, [r8]
 8008f74:	4620      	mov	r0, r4
 8008f76:	b003      	add	sp, #12
 8008f78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f80:	e7d5      	b.n	8008f2e <__d2b+0x2e>
 8008f82:	6161      	str	r1, [r4, #20]
 8008f84:	e7e5      	b.n	8008f52 <__d2b+0x52>
 8008f86:	a801      	add	r0, sp, #4
 8008f88:	f7ff fce8 	bl	800895c <__lo0bits>
 8008f8c:	9b01      	ldr	r3, [sp, #4]
 8008f8e:	6163      	str	r3, [r4, #20]
 8008f90:	2201      	movs	r2, #1
 8008f92:	6122      	str	r2, [r4, #16]
 8008f94:	3020      	adds	r0, #32
 8008f96:	e7e3      	b.n	8008f60 <__d2b+0x60>
 8008f98:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f9c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008fa0:	f8c9 0000 	str.w	r0, [r9]
 8008fa4:	6918      	ldr	r0, [r3, #16]
 8008fa6:	f7ff fcb9 	bl	800891c <__hi0bits>
 8008faa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008fae:	e7df      	b.n	8008f70 <__d2b+0x70>
 8008fb0:	08009e44 	.word	0x08009e44
 8008fb4:	08009f38 	.word	0x08009f38

08008fb8 <__ratio>:
 8008fb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fbc:	4688      	mov	r8, r1
 8008fbe:	4669      	mov	r1, sp
 8008fc0:	4681      	mov	r9, r0
 8008fc2:	f7ff ff4d 	bl	8008e60 <__b2d>
 8008fc6:	a901      	add	r1, sp, #4
 8008fc8:	4640      	mov	r0, r8
 8008fca:	ec55 4b10 	vmov	r4, r5, d0
 8008fce:	f7ff ff47 	bl	8008e60 <__b2d>
 8008fd2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008fd6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008fda:	eba3 0c02 	sub.w	ip, r3, r2
 8008fde:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008fe2:	1a9b      	subs	r3, r3, r2
 8008fe4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008fe8:	ec51 0b10 	vmov	r0, r1, d0
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	bfd6      	itet	le
 8008ff0:	460a      	movle	r2, r1
 8008ff2:	462a      	movgt	r2, r5
 8008ff4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008ff8:	468b      	mov	fp, r1
 8008ffa:	462f      	mov	r7, r5
 8008ffc:	bfd4      	ite	le
 8008ffe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009002:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009006:	4620      	mov	r0, r4
 8009008:	ee10 2a10 	vmov	r2, s0
 800900c:	465b      	mov	r3, fp
 800900e:	4639      	mov	r1, r7
 8009010:	f7f7 fc1c 	bl	800084c <__aeabi_ddiv>
 8009014:	ec41 0b10 	vmov	d0, r0, r1
 8009018:	b003      	add	sp, #12
 800901a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800901e <__copybits>:
 800901e:	3901      	subs	r1, #1
 8009020:	b570      	push	{r4, r5, r6, lr}
 8009022:	1149      	asrs	r1, r1, #5
 8009024:	6914      	ldr	r4, [r2, #16]
 8009026:	3101      	adds	r1, #1
 8009028:	f102 0314 	add.w	r3, r2, #20
 800902c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009030:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009034:	1f05      	subs	r5, r0, #4
 8009036:	42a3      	cmp	r3, r4
 8009038:	d30c      	bcc.n	8009054 <__copybits+0x36>
 800903a:	1aa3      	subs	r3, r4, r2
 800903c:	3b11      	subs	r3, #17
 800903e:	f023 0303 	bic.w	r3, r3, #3
 8009042:	3211      	adds	r2, #17
 8009044:	42a2      	cmp	r2, r4
 8009046:	bf88      	it	hi
 8009048:	2300      	movhi	r3, #0
 800904a:	4418      	add	r0, r3
 800904c:	2300      	movs	r3, #0
 800904e:	4288      	cmp	r0, r1
 8009050:	d305      	bcc.n	800905e <__copybits+0x40>
 8009052:	bd70      	pop	{r4, r5, r6, pc}
 8009054:	f853 6b04 	ldr.w	r6, [r3], #4
 8009058:	f845 6f04 	str.w	r6, [r5, #4]!
 800905c:	e7eb      	b.n	8009036 <__copybits+0x18>
 800905e:	f840 3b04 	str.w	r3, [r0], #4
 8009062:	e7f4      	b.n	800904e <__copybits+0x30>

08009064 <__any_on>:
 8009064:	f100 0214 	add.w	r2, r0, #20
 8009068:	6900      	ldr	r0, [r0, #16]
 800906a:	114b      	asrs	r3, r1, #5
 800906c:	4298      	cmp	r0, r3
 800906e:	b510      	push	{r4, lr}
 8009070:	db11      	blt.n	8009096 <__any_on+0x32>
 8009072:	dd0a      	ble.n	800908a <__any_on+0x26>
 8009074:	f011 011f 	ands.w	r1, r1, #31
 8009078:	d007      	beq.n	800908a <__any_on+0x26>
 800907a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800907e:	fa24 f001 	lsr.w	r0, r4, r1
 8009082:	fa00 f101 	lsl.w	r1, r0, r1
 8009086:	428c      	cmp	r4, r1
 8009088:	d10b      	bne.n	80090a2 <__any_on+0x3e>
 800908a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800908e:	4293      	cmp	r3, r2
 8009090:	d803      	bhi.n	800909a <__any_on+0x36>
 8009092:	2000      	movs	r0, #0
 8009094:	bd10      	pop	{r4, pc}
 8009096:	4603      	mov	r3, r0
 8009098:	e7f7      	b.n	800908a <__any_on+0x26>
 800909a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800909e:	2900      	cmp	r1, #0
 80090a0:	d0f5      	beq.n	800908e <__any_on+0x2a>
 80090a2:	2001      	movs	r0, #1
 80090a4:	e7f6      	b.n	8009094 <__any_on+0x30>

080090a6 <__ssputs_r>:
 80090a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090aa:	688e      	ldr	r6, [r1, #8]
 80090ac:	429e      	cmp	r6, r3
 80090ae:	4682      	mov	sl, r0
 80090b0:	460c      	mov	r4, r1
 80090b2:	4690      	mov	r8, r2
 80090b4:	461f      	mov	r7, r3
 80090b6:	d838      	bhi.n	800912a <__ssputs_r+0x84>
 80090b8:	898a      	ldrh	r2, [r1, #12]
 80090ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80090be:	d032      	beq.n	8009126 <__ssputs_r+0x80>
 80090c0:	6825      	ldr	r5, [r4, #0]
 80090c2:	6909      	ldr	r1, [r1, #16]
 80090c4:	eba5 0901 	sub.w	r9, r5, r1
 80090c8:	6965      	ldr	r5, [r4, #20]
 80090ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80090ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80090d2:	3301      	adds	r3, #1
 80090d4:	444b      	add	r3, r9
 80090d6:	106d      	asrs	r5, r5, #1
 80090d8:	429d      	cmp	r5, r3
 80090da:	bf38      	it	cc
 80090dc:	461d      	movcc	r5, r3
 80090de:	0553      	lsls	r3, r2, #21
 80090e0:	d531      	bpl.n	8009146 <__ssputs_r+0xa0>
 80090e2:	4629      	mov	r1, r5
 80090e4:	f7fb ff20 	bl	8004f28 <_malloc_r>
 80090e8:	4606      	mov	r6, r0
 80090ea:	b950      	cbnz	r0, 8009102 <__ssputs_r+0x5c>
 80090ec:	230c      	movs	r3, #12
 80090ee:	f8ca 3000 	str.w	r3, [sl]
 80090f2:	89a3      	ldrh	r3, [r4, #12]
 80090f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090f8:	81a3      	strh	r3, [r4, #12]
 80090fa:	f04f 30ff 	mov.w	r0, #4294967295
 80090fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009102:	6921      	ldr	r1, [r4, #16]
 8009104:	464a      	mov	r2, r9
 8009106:	f7fb fe99 	bl	8004e3c <memcpy>
 800910a:	89a3      	ldrh	r3, [r4, #12]
 800910c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009114:	81a3      	strh	r3, [r4, #12]
 8009116:	6126      	str	r6, [r4, #16]
 8009118:	6165      	str	r5, [r4, #20]
 800911a:	444e      	add	r6, r9
 800911c:	eba5 0509 	sub.w	r5, r5, r9
 8009120:	6026      	str	r6, [r4, #0]
 8009122:	60a5      	str	r5, [r4, #8]
 8009124:	463e      	mov	r6, r7
 8009126:	42be      	cmp	r6, r7
 8009128:	d900      	bls.n	800912c <__ssputs_r+0x86>
 800912a:	463e      	mov	r6, r7
 800912c:	4632      	mov	r2, r6
 800912e:	6820      	ldr	r0, [r4, #0]
 8009130:	4641      	mov	r1, r8
 8009132:	f000 fb5d 	bl	80097f0 <memmove>
 8009136:	68a3      	ldr	r3, [r4, #8]
 8009138:	6822      	ldr	r2, [r4, #0]
 800913a:	1b9b      	subs	r3, r3, r6
 800913c:	4432      	add	r2, r6
 800913e:	60a3      	str	r3, [r4, #8]
 8009140:	6022      	str	r2, [r4, #0]
 8009142:	2000      	movs	r0, #0
 8009144:	e7db      	b.n	80090fe <__ssputs_r+0x58>
 8009146:	462a      	mov	r2, r5
 8009148:	f000 fb6c 	bl	8009824 <_realloc_r>
 800914c:	4606      	mov	r6, r0
 800914e:	2800      	cmp	r0, #0
 8009150:	d1e1      	bne.n	8009116 <__ssputs_r+0x70>
 8009152:	6921      	ldr	r1, [r4, #16]
 8009154:	4650      	mov	r0, sl
 8009156:	f7fb fe97 	bl	8004e88 <_free_r>
 800915a:	e7c7      	b.n	80090ec <__ssputs_r+0x46>

0800915c <_svfiprintf_r>:
 800915c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009160:	4698      	mov	r8, r3
 8009162:	898b      	ldrh	r3, [r1, #12]
 8009164:	061b      	lsls	r3, r3, #24
 8009166:	b09d      	sub	sp, #116	; 0x74
 8009168:	4607      	mov	r7, r0
 800916a:	460d      	mov	r5, r1
 800916c:	4614      	mov	r4, r2
 800916e:	d50e      	bpl.n	800918e <_svfiprintf_r+0x32>
 8009170:	690b      	ldr	r3, [r1, #16]
 8009172:	b963      	cbnz	r3, 800918e <_svfiprintf_r+0x32>
 8009174:	2140      	movs	r1, #64	; 0x40
 8009176:	f7fb fed7 	bl	8004f28 <_malloc_r>
 800917a:	6028      	str	r0, [r5, #0]
 800917c:	6128      	str	r0, [r5, #16]
 800917e:	b920      	cbnz	r0, 800918a <_svfiprintf_r+0x2e>
 8009180:	230c      	movs	r3, #12
 8009182:	603b      	str	r3, [r7, #0]
 8009184:	f04f 30ff 	mov.w	r0, #4294967295
 8009188:	e0d1      	b.n	800932e <_svfiprintf_r+0x1d2>
 800918a:	2340      	movs	r3, #64	; 0x40
 800918c:	616b      	str	r3, [r5, #20]
 800918e:	2300      	movs	r3, #0
 8009190:	9309      	str	r3, [sp, #36]	; 0x24
 8009192:	2320      	movs	r3, #32
 8009194:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009198:	f8cd 800c 	str.w	r8, [sp, #12]
 800919c:	2330      	movs	r3, #48	; 0x30
 800919e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009348 <_svfiprintf_r+0x1ec>
 80091a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091a6:	f04f 0901 	mov.w	r9, #1
 80091aa:	4623      	mov	r3, r4
 80091ac:	469a      	mov	sl, r3
 80091ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091b2:	b10a      	cbz	r2, 80091b8 <_svfiprintf_r+0x5c>
 80091b4:	2a25      	cmp	r2, #37	; 0x25
 80091b6:	d1f9      	bne.n	80091ac <_svfiprintf_r+0x50>
 80091b8:	ebba 0b04 	subs.w	fp, sl, r4
 80091bc:	d00b      	beq.n	80091d6 <_svfiprintf_r+0x7a>
 80091be:	465b      	mov	r3, fp
 80091c0:	4622      	mov	r2, r4
 80091c2:	4629      	mov	r1, r5
 80091c4:	4638      	mov	r0, r7
 80091c6:	f7ff ff6e 	bl	80090a6 <__ssputs_r>
 80091ca:	3001      	adds	r0, #1
 80091cc:	f000 80aa 	beq.w	8009324 <_svfiprintf_r+0x1c8>
 80091d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091d2:	445a      	add	r2, fp
 80091d4:	9209      	str	r2, [sp, #36]	; 0x24
 80091d6:	f89a 3000 	ldrb.w	r3, [sl]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	f000 80a2 	beq.w	8009324 <_svfiprintf_r+0x1c8>
 80091e0:	2300      	movs	r3, #0
 80091e2:	f04f 32ff 	mov.w	r2, #4294967295
 80091e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091ea:	f10a 0a01 	add.w	sl, sl, #1
 80091ee:	9304      	str	r3, [sp, #16]
 80091f0:	9307      	str	r3, [sp, #28]
 80091f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091f6:	931a      	str	r3, [sp, #104]	; 0x68
 80091f8:	4654      	mov	r4, sl
 80091fa:	2205      	movs	r2, #5
 80091fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009200:	4851      	ldr	r0, [pc, #324]	; (8009348 <_svfiprintf_r+0x1ec>)
 8009202:	f7f6 ffed 	bl	80001e0 <memchr>
 8009206:	9a04      	ldr	r2, [sp, #16]
 8009208:	b9d8      	cbnz	r0, 8009242 <_svfiprintf_r+0xe6>
 800920a:	06d0      	lsls	r0, r2, #27
 800920c:	bf44      	itt	mi
 800920e:	2320      	movmi	r3, #32
 8009210:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009214:	0711      	lsls	r1, r2, #28
 8009216:	bf44      	itt	mi
 8009218:	232b      	movmi	r3, #43	; 0x2b
 800921a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800921e:	f89a 3000 	ldrb.w	r3, [sl]
 8009222:	2b2a      	cmp	r3, #42	; 0x2a
 8009224:	d015      	beq.n	8009252 <_svfiprintf_r+0xf6>
 8009226:	9a07      	ldr	r2, [sp, #28]
 8009228:	4654      	mov	r4, sl
 800922a:	2000      	movs	r0, #0
 800922c:	f04f 0c0a 	mov.w	ip, #10
 8009230:	4621      	mov	r1, r4
 8009232:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009236:	3b30      	subs	r3, #48	; 0x30
 8009238:	2b09      	cmp	r3, #9
 800923a:	d94e      	bls.n	80092da <_svfiprintf_r+0x17e>
 800923c:	b1b0      	cbz	r0, 800926c <_svfiprintf_r+0x110>
 800923e:	9207      	str	r2, [sp, #28]
 8009240:	e014      	b.n	800926c <_svfiprintf_r+0x110>
 8009242:	eba0 0308 	sub.w	r3, r0, r8
 8009246:	fa09 f303 	lsl.w	r3, r9, r3
 800924a:	4313      	orrs	r3, r2
 800924c:	9304      	str	r3, [sp, #16]
 800924e:	46a2      	mov	sl, r4
 8009250:	e7d2      	b.n	80091f8 <_svfiprintf_r+0x9c>
 8009252:	9b03      	ldr	r3, [sp, #12]
 8009254:	1d19      	adds	r1, r3, #4
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	9103      	str	r1, [sp, #12]
 800925a:	2b00      	cmp	r3, #0
 800925c:	bfbb      	ittet	lt
 800925e:	425b      	neglt	r3, r3
 8009260:	f042 0202 	orrlt.w	r2, r2, #2
 8009264:	9307      	strge	r3, [sp, #28]
 8009266:	9307      	strlt	r3, [sp, #28]
 8009268:	bfb8      	it	lt
 800926a:	9204      	strlt	r2, [sp, #16]
 800926c:	7823      	ldrb	r3, [r4, #0]
 800926e:	2b2e      	cmp	r3, #46	; 0x2e
 8009270:	d10c      	bne.n	800928c <_svfiprintf_r+0x130>
 8009272:	7863      	ldrb	r3, [r4, #1]
 8009274:	2b2a      	cmp	r3, #42	; 0x2a
 8009276:	d135      	bne.n	80092e4 <_svfiprintf_r+0x188>
 8009278:	9b03      	ldr	r3, [sp, #12]
 800927a:	1d1a      	adds	r2, r3, #4
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	9203      	str	r2, [sp, #12]
 8009280:	2b00      	cmp	r3, #0
 8009282:	bfb8      	it	lt
 8009284:	f04f 33ff 	movlt.w	r3, #4294967295
 8009288:	3402      	adds	r4, #2
 800928a:	9305      	str	r3, [sp, #20]
 800928c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009358 <_svfiprintf_r+0x1fc>
 8009290:	7821      	ldrb	r1, [r4, #0]
 8009292:	2203      	movs	r2, #3
 8009294:	4650      	mov	r0, sl
 8009296:	f7f6 ffa3 	bl	80001e0 <memchr>
 800929a:	b140      	cbz	r0, 80092ae <_svfiprintf_r+0x152>
 800929c:	2340      	movs	r3, #64	; 0x40
 800929e:	eba0 000a 	sub.w	r0, r0, sl
 80092a2:	fa03 f000 	lsl.w	r0, r3, r0
 80092a6:	9b04      	ldr	r3, [sp, #16]
 80092a8:	4303      	orrs	r3, r0
 80092aa:	3401      	adds	r4, #1
 80092ac:	9304      	str	r3, [sp, #16]
 80092ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092b2:	4826      	ldr	r0, [pc, #152]	; (800934c <_svfiprintf_r+0x1f0>)
 80092b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092b8:	2206      	movs	r2, #6
 80092ba:	f7f6 ff91 	bl	80001e0 <memchr>
 80092be:	2800      	cmp	r0, #0
 80092c0:	d038      	beq.n	8009334 <_svfiprintf_r+0x1d8>
 80092c2:	4b23      	ldr	r3, [pc, #140]	; (8009350 <_svfiprintf_r+0x1f4>)
 80092c4:	bb1b      	cbnz	r3, 800930e <_svfiprintf_r+0x1b2>
 80092c6:	9b03      	ldr	r3, [sp, #12]
 80092c8:	3307      	adds	r3, #7
 80092ca:	f023 0307 	bic.w	r3, r3, #7
 80092ce:	3308      	adds	r3, #8
 80092d0:	9303      	str	r3, [sp, #12]
 80092d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092d4:	4433      	add	r3, r6
 80092d6:	9309      	str	r3, [sp, #36]	; 0x24
 80092d8:	e767      	b.n	80091aa <_svfiprintf_r+0x4e>
 80092da:	fb0c 3202 	mla	r2, ip, r2, r3
 80092de:	460c      	mov	r4, r1
 80092e0:	2001      	movs	r0, #1
 80092e2:	e7a5      	b.n	8009230 <_svfiprintf_r+0xd4>
 80092e4:	2300      	movs	r3, #0
 80092e6:	3401      	adds	r4, #1
 80092e8:	9305      	str	r3, [sp, #20]
 80092ea:	4619      	mov	r1, r3
 80092ec:	f04f 0c0a 	mov.w	ip, #10
 80092f0:	4620      	mov	r0, r4
 80092f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092f6:	3a30      	subs	r2, #48	; 0x30
 80092f8:	2a09      	cmp	r2, #9
 80092fa:	d903      	bls.n	8009304 <_svfiprintf_r+0x1a8>
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d0c5      	beq.n	800928c <_svfiprintf_r+0x130>
 8009300:	9105      	str	r1, [sp, #20]
 8009302:	e7c3      	b.n	800928c <_svfiprintf_r+0x130>
 8009304:	fb0c 2101 	mla	r1, ip, r1, r2
 8009308:	4604      	mov	r4, r0
 800930a:	2301      	movs	r3, #1
 800930c:	e7f0      	b.n	80092f0 <_svfiprintf_r+0x194>
 800930e:	ab03      	add	r3, sp, #12
 8009310:	9300      	str	r3, [sp, #0]
 8009312:	462a      	mov	r2, r5
 8009314:	4b0f      	ldr	r3, [pc, #60]	; (8009354 <_svfiprintf_r+0x1f8>)
 8009316:	a904      	add	r1, sp, #16
 8009318:	4638      	mov	r0, r7
 800931a:	f7fb feff 	bl	800511c <_printf_float>
 800931e:	1c42      	adds	r2, r0, #1
 8009320:	4606      	mov	r6, r0
 8009322:	d1d6      	bne.n	80092d2 <_svfiprintf_r+0x176>
 8009324:	89ab      	ldrh	r3, [r5, #12]
 8009326:	065b      	lsls	r3, r3, #25
 8009328:	f53f af2c 	bmi.w	8009184 <_svfiprintf_r+0x28>
 800932c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800932e:	b01d      	add	sp, #116	; 0x74
 8009330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009334:	ab03      	add	r3, sp, #12
 8009336:	9300      	str	r3, [sp, #0]
 8009338:	462a      	mov	r2, r5
 800933a:	4b06      	ldr	r3, [pc, #24]	; (8009354 <_svfiprintf_r+0x1f8>)
 800933c:	a904      	add	r1, sp, #16
 800933e:	4638      	mov	r0, r7
 8009340:	f7fc f990 	bl	8005664 <_printf_i>
 8009344:	e7eb      	b.n	800931e <_svfiprintf_r+0x1c2>
 8009346:	bf00      	nop
 8009348:	0800a094 	.word	0x0800a094
 800934c:	0800a09e 	.word	0x0800a09e
 8009350:	0800511d 	.word	0x0800511d
 8009354:	080090a7 	.word	0x080090a7
 8009358:	0800a09a 	.word	0x0800a09a

0800935c <__sfputc_r>:
 800935c:	6893      	ldr	r3, [r2, #8]
 800935e:	3b01      	subs	r3, #1
 8009360:	2b00      	cmp	r3, #0
 8009362:	b410      	push	{r4}
 8009364:	6093      	str	r3, [r2, #8]
 8009366:	da08      	bge.n	800937a <__sfputc_r+0x1e>
 8009368:	6994      	ldr	r4, [r2, #24]
 800936a:	42a3      	cmp	r3, r4
 800936c:	db01      	blt.n	8009372 <__sfputc_r+0x16>
 800936e:	290a      	cmp	r1, #10
 8009370:	d103      	bne.n	800937a <__sfputc_r+0x1e>
 8009372:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009376:	f7fd bcf1 	b.w	8006d5c <__swbuf_r>
 800937a:	6813      	ldr	r3, [r2, #0]
 800937c:	1c58      	adds	r0, r3, #1
 800937e:	6010      	str	r0, [r2, #0]
 8009380:	7019      	strb	r1, [r3, #0]
 8009382:	4608      	mov	r0, r1
 8009384:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009388:	4770      	bx	lr

0800938a <__sfputs_r>:
 800938a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800938c:	4606      	mov	r6, r0
 800938e:	460f      	mov	r7, r1
 8009390:	4614      	mov	r4, r2
 8009392:	18d5      	adds	r5, r2, r3
 8009394:	42ac      	cmp	r4, r5
 8009396:	d101      	bne.n	800939c <__sfputs_r+0x12>
 8009398:	2000      	movs	r0, #0
 800939a:	e007      	b.n	80093ac <__sfputs_r+0x22>
 800939c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093a0:	463a      	mov	r2, r7
 80093a2:	4630      	mov	r0, r6
 80093a4:	f7ff ffda 	bl	800935c <__sfputc_r>
 80093a8:	1c43      	adds	r3, r0, #1
 80093aa:	d1f3      	bne.n	8009394 <__sfputs_r+0xa>
 80093ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080093b0 <_vfiprintf_r>:
 80093b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b4:	460d      	mov	r5, r1
 80093b6:	b09d      	sub	sp, #116	; 0x74
 80093b8:	4614      	mov	r4, r2
 80093ba:	4698      	mov	r8, r3
 80093bc:	4606      	mov	r6, r0
 80093be:	b118      	cbz	r0, 80093c8 <_vfiprintf_r+0x18>
 80093c0:	6983      	ldr	r3, [r0, #24]
 80093c2:	b90b      	cbnz	r3, 80093c8 <_vfiprintf_r+0x18>
 80093c4:	f7fe fd1e 	bl	8007e04 <__sinit>
 80093c8:	4b89      	ldr	r3, [pc, #548]	; (80095f0 <_vfiprintf_r+0x240>)
 80093ca:	429d      	cmp	r5, r3
 80093cc:	d11b      	bne.n	8009406 <_vfiprintf_r+0x56>
 80093ce:	6875      	ldr	r5, [r6, #4]
 80093d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093d2:	07d9      	lsls	r1, r3, #31
 80093d4:	d405      	bmi.n	80093e2 <_vfiprintf_r+0x32>
 80093d6:	89ab      	ldrh	r3, [r5, #12]
 80093d8:	059a      	lsls	r2, r3, #22
 80093da:	d402      	bmi.n	80093e2 <_vfiprintf_r+0x32>
 80093dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093de:	f7ff f922 	bl	8008626 <__retarget_lock_acquire_recursive>
 80093e2:	89ab      	ldrh	r3, [r5, #12]
 80093e4:	071b      	lsls	r3, r3, #28
 80093e6:	d501      	bpl.n	80093ec <_vfiprintf_r+0x3c>
 80093e8:	692b      	ldr	r3, [r5, #16]
 80093ea:	b9eb      	cbnz	r3, 8009428 <_vfiprintf_r+0x78>
 80093ec:	4629      	mov	r1, r5
 80093ee:	4630      	mov	r0, r6
 80093f0:	f7fd fd06 	bl	8006e00 <__swsetup_r>
 80093f4:	b1c0      	cbz	r0, 8009428 <_vfiprintf_r+0x78>
 80093f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093f8:	07dc      	lsls	r4, r3, #31
 80093fa:	d50e      	bpl.n	800941a <_vfiprintf_r+0x6a>
 80093fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009400:	b01d      	add	sp, #116	; 0x74
 8009402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009406:	4b7b      	ldr	r3, [pc, #492]	; (80095f4 <_vfiprintf_r+0x244>)
 8009408:	429d      	cmp	r5, r3
 800940a:	d101      	bne.n	8009410 <_vfiprintf_r+0x60>
 800940c:	68b5      	ldr	r5, [r6, #8]
 800940e:	e7df      	b.n	80093d0 <_vfiprintf_r+0x20>
 8009410:	4b79      	ldr	r3, [pc, #484]	; (80095f8 <_vfiprintf_r+0x248>)
 8009412:	429d      	cmp	r5, r3
 8009414:	bf08      	it	eq
 8009416:	68f5      	ldreq	r5, [r6, #12]
 8009418:	e7da      	b.n	80093d0 <_vfiprintf_r+0x20>
 800941a:	89ab      	ldrh	r3, [r5, #12]
 800941c:	0598      	lsls	r0, r3, #22
 800941e:	d4ed      	bmi.n	80093fc <_vfiprintf_r+0x4c>
 8009420:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009422:	f7ff f901 	bl	8008628 <__retarget_lock_release_recursive>
 8009426:	e7e9      	b.n	80093fc <_vfiprintf_r+0x4c>
 8009428:	2300      	movs	r3, #0
 800942a:	9309      	str	r3, [sp, #36]	; 0x24
 800942c:	2320      	movs	r3, #32
 800942e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009432:	f8cd 800c 	str.w	r8, [sp, #12]
 8009436:	2330      	movs	r3, #48	; 0x30
 8009438:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80095fc <_vfiprintf_r+0x24c>
 800943c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009440:	f04f 0901 	mov.w	r9, #1
 8009444:	4623      	mov	r3, r4
 8009446:	469a      	mov	sl, r3
 8009448:	f813 2b01 	ldrb.w	r2, [r3], #1
 800944c:	b10a      	cbz	r2, 8009452 <_vfiprintf_r+0xa2>
 800944e:	2a25      	cmp	r2, #37	; 0x25
 8009450:	d1f9      	bne.n	8009446 <_vfiprintf_r+0x96>
 8009452:	ebba 0b04 	subs.w	fp, sl, r4
 8009456:	d00b      	beq.n	8009470 <_vfiprintf_r+0xc0>
 8009458:	465b      	mov	r3, fp
 800945a:	4622      	mov	r2, r4
 800945c:	4629      	mov	r1, r5
 800945e:	4630      	mov	r0, r6
 8009460:	f7ff ff93 	bl	800938a <__sfputs_r>
 8009464:	3001      	adds	r0, #1
 8009466:	f000 80aa 	beq.w	80095be <_vfiprintf_r+0x20e>
 800946a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800946c:	445a      	add	r2, fp
 800946e:	9209      	str	r2, [sp, #36]	; 0x24
 8009470:	f89a 3000 	ldrb.w	r3, [sl]
 8009474:	2b00      	cmp	r3, #0
 8009476:	f000 80a2 	beq.w	80095be <_vfiprintf_r+0x20e>
 800947a:	2300      	movs	r3, #0
 800947c:	f04f 32ff 	mov.w	r2, #4294967295
 8009480:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009484:	f10a 0a01 	add.w	sl, sl, #1
 8009488:	9304      	str	r3, [sp, #16]
 800948a:	9307      	str	r3, [sp, #28]
 800948c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009490:	931a      	str	r3, [sp, #104]	; 0x68
 8009492:	4654      	mov	r4, sl
 8009494:	2205      	movs	r2, #5
 8009496:	f814 1b01 	ldrb.w	r1, [r4], #1
 800949a:	4858      	ldr	r0, [pc, #352]	; (80095fc <_vfiprintf_r+0x24c>)
 800949c:	f7f6 fea0 	bl	80001e0 <memchr>
 80094a0:	9a04      	ldr	r2, [sp, #16]
 80094a2:	b9d8      	cbnz	r0, 80094dc <_vfiprintf_r+0x12c>
 80094a4:	06d1      	lsls	r1, r2, #27
 80094a6:	bf44      	itt	mi
 80094a8:	2320      	movmi	r3, #32
 80094aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094ae:	0713      	lsls	r3, r2, #28
 80094b0:	bf44      	itt	mi
 80094b2:	232b      	movmi	r3, #43	; 0x2b
 80094b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094b8:	f89a 3000 	ldrb.w	r3, [sl]
 80094bc:	2b2a      	cmp	r3, #42	; 0x2a
 80094be:	d015      	beq.n	80094ec <_vfiprintf_r+0x13c>
 80094c0:	9a07      	ldr	r2, [sp, #28]
 80094c2:	4654      	mov	r4, sl
 80094c4:	2000      	movs	r0, #0
 80094c6:	f04f 0c0a 	mov.w	ip, #10
 80094ca:	4621      	mov	r1, r4
 80094cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094d0:	3b30      	subs	r3, #48	; 0x30
 80094d2:	2b09      	cmp	r3, #9
 80094d4:	d94e      	bls.n	8009574 <_vfiprintf_r+0x1c4>
 80094d6:	b1b0      	cbz	r0, 8009506 <_vfiprintf_r+0x156>
 80094d8:	9207      	str	r2, [sp, #28]
 80094da:	e014      	b.n	8009506 <_vfiprintf_r+0x156>
 80094dc:	eba0 0308 	sub.w	r3, r0, r8
 80094e0:	fa09 f303 	lsl.w	r3, r9, r3
 80094e4:	4313      	orrs	r3, r2
 80094e6:	9304      	str	r3, [sp, #16]
 80094e8:	46a2      	mov	sl, r4
 80094ea:	e7d2      	b.n	8009492 <_vfiprintf_r+0xe2>
 80094ec:	9b03      	ldr	r3, [sp, #12]
 80094ee:	1d19      	adds	r1, r3, #4
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	9103      	str	r1, [sp, #12]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	bfbb      	ittet	lt
 80094f8:	425b      	neglt	r3, r3
 80094fa:	f042 0202 	orrlt.w	r2, r2, #2
 80094fe:	9307      	strge	r3, [sp, #28]
 8009500:	9307      	strlt	r3, [sp, #28]
 8009502:	bfb8      	it	lt
 8009504:	9204      	strlt	r2, [sp, #16]
 8009506:	7823      	ldrb	r3, [r4, #0]
 8009508:	2b2e      	cmp	r3, #46	; 0x2e
 800950a:	d10c      	bne.n	8009526 <_vfiprintf_r+0x176>
 800950c:	7863      	ldrb	r3, [r4, #1]
 800950e:	2b2a      	cmp	r3, #42	; 0x2a
 8009510:	d135      	bne.n	800957e <_vfiprintf_r+0x1ce>
 8009512:	9b03      	ldr	r3, [sp, #12]
 8009514:	1d1a      	adds	r2, r3, #4
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	9203      	str	r2, [sp, #12]
 800951a:	2b00      	cmp	r3, #0
 800951c:	bfb8      	it	lt
 800951e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009522:	3402      	adds	r4, #2
 8009524:	9305      	str	r3, [sp, #20]
 8009526:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800960c <_vfiprintf_r+0x25c>
 800952a:	7821      	ldrb	r1, [r4, #0]
 800952c:	2203      	movs	r2, #3
 800952e:	4650      	mov	r0, sl
 8009530:	f7f6 fe56 	bl	80001e0 <memchr>
 8009534:	b140      	cbz	r0, 8009548 <_vfiprintf_r+0x198>
 8009536:	2340      	movs	r3, #64	; 0x40
 8009538:	eba0 000a 	sub.w	r0, r0, sl
 800953c:	fa03 f000 	lsl.w	r0, r3, r0
 8009540:	9b04      	ldr	r3, [sp, #16]
 8009542:	4303      	orrs	r3, r0
 8009544:	3401      	adds	r4, #1
 8009546:	9304      	str	r3, [sp, #16]
 8009548:	f814 1b01 	ldrb.w	r1, [r4], #1
 800954c:	482c      	ldr	r0, [pc, #176]	; (8009600 <_vfiprintf_r+0x250>)
 800954e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009552:	2206      	movs	r2, #6
 8009554:	f7f6 fe44 	bl	80001e0 <memchr>
 8009558:	2800      	cmp	r0, #0
 800955a:	d03f      	beq.n	80095dc <_vfiprintf_r+0x22c>
 800955c:	4b29      	ldr	r3, [pc, #164]	; (8009604 <_vfiprintf_r+0x254>)
 800955e:	bb1b      	cbnz	r3, 80095a8 <_vfiprintf_r+0x1f8>
 8009560:	9b03      	ldr	r3, [sp, #12]
 8009562:	3307      	adds	r3, #7
 8009564:	f023 0307 	bic.w	r3, r3, #7
 8009568:	3308      	adds	r3, #8
 800956a:	9303      	str	r3, [sp, #12]
 800956c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800956e:	443b      	add	r3, r7
 8009570:	9309      	str	r3, [sp, #36]	; 0x24
 8009572:	e767      	b.n	8009444 <_vfiprintf_r+0x94>
 8009574:	fb0c 3202 	mla	r2, ip, r2, r3
 8009578:	460c      	mov	r4, r1
 800957a:	2001      	movs	r0, #1
 800957c:	e7a5      	b.n	80094ca <_vfiprintf_r+0x11a>
 800957e:	2300      	movs	r3, #0
 8009580:	3401      	adds	r4, #1
 8009582:	9305      	str	r3, [sp, #20]
 8009584:	4619      	mov	r1, r3
 8009586:	f04f 0c0a 	mov.w	ip, #10
 800958a:	4620      	mov	r0, r4
 800958c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009590:	3a30      	subs	r2, #48	; 0x30
 8009592:	2a09      	cmp	r2, #9
 8009594:	d903      	bls.n	800959e <_vfiprintf_r+0x1ee>
 8009596:	2b00      	cmp	r3, #0
 8009598:	d0c5      	beq.n	8009526 <_vfiprintf_r+0x176>
 800959a:	9105      	str	r1, [sp, #20]
 800959c:	e7c3      	b.n	8009526 <_vfiprintf_r+0x176>
 800959e:	fb0c 2101 	mla	r1, ip, r1, r2
 80095a2:	4604      	mov	r4, r0
 80095a4:	2301      	movs	r3, #1
 80095a6:	e7f0      	b.n	800958a <_vfiprintf_r+0x1da>
 80095a8:	ab03      	add	r3, sp, #12
 80095aa:	9300      	str	r3, [sp, #0]
 80095ac:	462a      	mov	r2, r5
 80095ae:	4b16      	ldr	r3, [pc, #88]	; (8009608 <_vfiprintf_r+0x258>)
 80095b0:	a904      	add	r1, sp, #16
 80095b2:	4630      	mov	r0, r6
 80095b4:	f7fb fdb2 	bl	800511c <_printf_float>
 80095b8:	4607      	mov	r7, r0
 80095ba:	1c78      	adds	r0, r7, #1
 80095bc:	d1d6      	bne.n	800956c <_vfiprintf_r+0x1bc>
 80095be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095c0:	07d9      	lsls	r1, r3, #31
 80095c2:	d405      	bmi.n	80095d0 <_vfiprintf_r+0x220>
 80095c4:	89ab      	ldrh	r3, [r5, #12]
 80095c6:	059a      	lsls	r2, r3, #22
 80095c8:	d402      	bmi.n	80095d0 <_vfiprintf_r+0x220>
 80095ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095cc:	f7ff f82c 	bl	8008628 <__retarget_lock_release_recursive>
 80095d0:	89ab      	ldrh	r3, [r5, #12]
 80095d2:	065b      	lsls	r3, r3, #25
 80095d4:	f53f af12 	bmi.w	80093fc <_vfiprintf_r+0x4c>
 80095d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095da:	e711      	b.n	8009400 <_vfiprintf_r+0x50>
 80095dc:	ab03      	add	r3, sp, #12
 80095de:	9300      	str	r3, [sp, #0]
 80095e0:	462a      	mov	r2, r5
 80095e2:	4b09      	ldr	r3, [pc, #36]	; (8009608 <_vfiprintf_r+0x258>)
 80095e4:	a904      	add	r1, sp, #16
 80095e6:	4630      	mov	r0, r6
 80095e8:	f7fc f83c 	bl	8005664 <_printf_i>
 80095ec:	e7e4      	b.n	80095b8 <_vfiprintf_r+0x208>
 80095ee:	bf00      	nop
 80095f0:	08009e78 	.word	0x08009e78
 80095f4:	08009e98 	.word	0x08009e98
 80095f8:	08009e58 	.word	0x08009e58
 80095fc:	0800a094 	.word	0x0800a094
 8009600:	0800a09e 	.word	0x0800a09e
 8009604:	0800511d 	.word	0x0800511d
 8009608:	0800938b 	.word	0x0800938b
 800960c:	0800a09a 	.word	0x0800a09a

08009610 <nan>:
 8009610:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009618 <nan+0x8>
 8009614:	4770      	bx	lr
 8009616:	bf00      	nop
 8009618:	00000000 	.word	0x00000000
 800961c:	7ff80000 	.word	0x7ff80000

08009620 <__sread>:
 8009620:	b510      	push	{r4, lr}
 8009622:	460c      	mov	r4, r1
 8009624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009628:	f000 f922 	bl	8009870 <_read_r>
 800962c:	2800      	cmp	r0, #0
 800962e:	bfab      	itete	ge
 8009630:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009632:	89a3      	ldrhlt	r3, [r4, #12]
 8009634:	181b      	addge	r3, r3, r0
 8009636:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800963a:	bfac      	ite	ge
 800963c:	6563      	strge	r3, [r4, #84]	; 0x54
 800963e:	81a3      	strhlt	r3, [r4, #12]
 8009640:	bd10      	pop	{r4, pc}

08009642 <__swrite>:
 8009642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009646:	461f      	mov	r7, r3
 8009648:	898b      	ldrh	r3, [r1, #12]
 800964a:	05db      	lsls	r3, r3, #23
 800964c:	4605      	mov	r5, r0
 800964e:	460c      	mov	r4, r1
 8009650:	4616      	mov	r6, r2
 8009652:	d505      	bpl.n	8009660 <__swrite+0x1e>
 8009654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009658:	2302      	movs	r3, #2
 800965a:	2200      	movs	r2, #0
 800965c:	f000 f8b6 	bl	80097cc <_lseek_r>
 8009660:	89a3      	ldrh	r3, [r4, #12]
 8009662:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009666:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800966a:	81a3      	strh	r3, [r4, #12]
 800966c:	4632      	mov	r2, r6
 800966e:	463b      	mov	r3, r7
 8009670:	4628      	mov	r0, r5
 8009672:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009676:	f000 b835 	b.w	80096e4 <_write_r>

0800967a <__sseek>:
 800967a:	b510      	push	{r4, lr}
 800967c:	460c      	mov	r4, r1
 800967e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009682:	f000 f8a3 	bl	80097cc <_lseek_r>
 8009686:	1c43      	adds	r3, r0, #1
 8009688:	89a3      	ldrh	r3, [r4, #12]
 800968a:	bf15      	itete	ne
 800968c:	6560      	strne	r0, [r4, #84]	; 0x54
 800968e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009692:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009696:	81a3      	strheq	r3, [r4, #12]
 8009698:	bf18      	it	ne
 800969a:	81a3      	strhne	r3, [r4, #12]
 800969c:	bd10      	pop	{r4, pc}

0800969e <__sclose>:
 800969e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096a2:	f000 b84f 	b.w	8009744 <_close_r>

080096a6 <strncmp>:
 80096a6:	b510      	push	{r4, lr}
 80096a8:	b16a      	cbz	r2, 80096c6 <strncmp+0x20>
 80096aa:	3901      	subs	r1, #1
 80096ac:	1884      	adds	r4, r0, r2
 80096ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80096b2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d103      	bne.n	80096c2 <strncmp+0x1c>
 80096ba:	42a0      	cmp	r0, r4
 80096bc:	d001      	beq.n	80096c2 <strncmp+0x1c>
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d1f5      	bne.n	80096ae <strncmp+0x8>
 80096c2:	1a98      	subs	r0, r3, r2
 80096c4:	bd10      	pop	{r4, pc}
 80096c6:	4610      	mov	r0, r2
 80096c8:	e7fc      	b.n	80096c4 <strncmp+0x1e>

080096ca <__ascii_wctomb>:
 80096ca:	b149      	cbz	r1, 80096e0 <__ascii_wctomb+0x16>
 80096cc:	2aff      	cmp	r2, #255	; 0xff
 80096ce:	bf85      	ittet	hi
 80096d0:	238a      	movhi	r3, #138	; 0x8a
 80096d2:	6003      	strhi	r3, [r0, #0]
 80096d4:	700a      	strbls	r2, [r1, #0]
 80096d6:	f04f 30ff 	movhi.w	r0, #4294967295
 80096da:	bf98      	it	ls
 80096dc:	2001      	movls	r0, #1
 80096de:	4770      	bx	lr
 80096e0:	4608      	mov	r0, r1
 80096e2:	4770      	bx	lr

080096e4 <_write_r>:
 80096e4:	b538      	push	{r3, r4, r5, lr}
 80096e6:	4d07      	ldr	r5, [pc, #28]	; (8009704 <_write_r+0x20>)
 80096e8:	4604      	mov	r4, r0
 80096ea:	4608      	mov	r0, r1
 80096ec:	4611      	mov	r1, r2
 80096ee:	2200      	movs	r2, #0
 80096f0:	602a      	str	r2, [r5, #0]
 80096f2:	461a      	mov	r2, r3
 80096f4:	f7f7 fc7a 	bl	8000fec <_write>
 80096f8:	1c43      	adds	r3, r0, #1
 80096fa:	d102      	bne.n	8009702 <_write_r+0x1e>
 80096fc:	682b      	ldr	r3, [r5, #0]
 80096fe:	b103      	cbz	r3, 8009702 <_write_r+0x1e>
 8009700:	6023      	str	r3, [r4, #0]
 8009702:	bd38      	pop	{r3, r4, r5, pc}
 8009704:	20001d28 	.word	0x20001d28

08009708 <__assert_func>:
 8009708:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800970a:	4614      	mov	r4, r2
 800970c:	461a      	mov	r2, r3
 800970e:	4b09      	ldr	r3, [pc, #36]	; (8009734 <__assert_func+0x2c>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4605      	mov	r5, r0
 8009714:	68d8      	ldr	r0, [r3, #12]
 8009716:	b14c      	cbz	r4, 800972c <__assert_func+0x24>
 8009718:	4b07      	ldr	r3, [pc, #28]	; (8009738 <__assert_func+0x30>)
 800971a:	9100      	str	r1, [sp, #0]
 800971c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009720:	4906      	ldr	r1, [pc, #24]	; (800973c <__assert_func+0x34>)
 8009722:	462b      	mov	r3, r5
 8009724:	f000 f81e 	bl	8009764 <fiprintf>
 8009728:	f000 f8b4 	bl	8009894 <abort>
 800972c:	4b04      	ldr	r3, [pc, #16]	; (8009740 <__assert_func+0x38>)
 800972e:	461c      	mov	r4, r3
 8009730:	e7f3      	b.n	800971a <__assert_func+0x12>
 8009732:	bf00      	nop
 8009734:	2000000c 	.word	0x2000000c
 8009738:	0800a0a5 	.word	0x0800a0a5
 800973c:	0800a0b2 	.word	0x0800a0b2
 8009740:	0800a0e0 	.word	0x0800a0e0

08009744 <_close_r>:
 8009744:	b538      	push	{r3, r4, r5, lr}
 8009746:	4d06      	ldr	r5, [pc, #24]	; (8009760 <_close_r+0x1c>)
 8009748:	2300      	movs	r3, #0
 800974a:	4604      	mov	r4, r0
 800974c:	4608      	mov	r0, r1
 800974e:	602b      	str	r3, [r5, #0]
 8009750:	f7f8 f911 	bl	8001976 <_close>
 8009754:	1c43      	adds	r3, r0, #1
 8009756:	d102      	bne.n	800975e <_close_r+0x1a>
 8009758:	682b      	ldr	r3, [r5, #0]
 800975a:	b103      	cbz	r3, 800975e <_close_r+0x1a>
 800975c:	6023      	str	r3, [r4, #0]
 800975e:	bd38      	pop	{r3, r4, r5, pc}
 8009760:	20001d28 	.word	0x20001d28

08009764 <fiprintf>:
 8009764:	b40e      	push	{r1, r2, r3}
 8009766:	b503      	push	{r0, r1, lr}
 8009768:	4601      	mov	r1, r0
 800976a:	ab03      	add	r3, sp, #12
 800976c:	4805      	ldr	r0, [pc, #20]	; (8009784 <fiprintf+0x20>)
 800976e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009772:	6800      	ldr	r0, [r0, #0]
 8009774:	9301      	str	r3, [sp, #4]
 8009776:	f7ff fe1b 	bl	80093b0 <_vfiprintf_r>
 800977a:	b002      	add	sp, #8
 800977c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009780:	b003      	add	sp, #12
 8009782:	4770      	bx	lr
 8009784:	2000000c 	.word	0x2000000c

08009788 <_fstat_r>:
 8009788:	b538      	push	{r3, r4, r5, lr}
 800978a:	4d07      	ldr	r5, [pc, #28]	; (80097a8 <_fstat_r+0x20>)
 800978c:	2300      	movs	r3, #0
 800978e:	4604      	mov	r4, r0
 8009790:	4608      	mov	r0, r1
 8009792:	4611      	mov	r1, r2
 8009794:	602b      	str	r3, [r5, #0]
 8009796:	f7f8 f8fa 	bl	800198e <_fstat>
 800979a:	1c43      	adds	r3, r0, #1
 800979c:	d102      	bne.n	80097a4 <_fstat_r+0x1c>
 800979e:	682b      	ldr	r3, [r5, #0]
 80097a0:	b103      	cbz	r3, 80097a4 <_fstat_r+0x1c>
 80097a2:	6023      	str	r3, [r4, #0]
 80097a4:	bd38      	pop	{r3, r4, r5, pc}
 80097a6:	bf00      	nop
 80097a8:	20001d28 	.word	0x20001d28

080097ac <_isatty_r>:
 80097ac:	b538      	push	{r3, r4, r5, lr}
 80097ae:	4d06      	ldr	r5, [pc, #24]	; (80097c8 <_isatty_r+0x1c>)
 80097b0:	2300      	movs	r3, #0
 80097b2:	4604      	mov	r4, r0
 80097b4:	4608      	mov	r0, r1
 80097b6:	602b      	str	r3, [r5, #0]
 80097b8:	f7f8 f8f9 	bl	80019ae <_isatty>
 80097bc:	1c43      	adds	r3, r0, #1
 80097be:	d102      	bne.n	80097c6 <_isatty_r+0x1a>
 80097c0:	682b      	ldr	r3, [r5, #0]
 80097c2:	b103      	cbz	r3, 80097c6 <_isatty_r+0x1a>
 80097c4:	6023      	str	r3, [r4, #0]
 80097c6:	bd38      	pop	{r3, r4, r5, pc}
 80097c8:	20001d28 	.word	0x20001d28

080097cc <_lseek_r>:
 80097cc:	b538      	push	{r3, r4, r5, lr}
 80097ce:	4d07      	ldr	r5, [pc, #28]	; (80097ec <_lseek_r+0x20>)
 80097d0:	4604      	mov	r4, r0
 80097d2:	4608      	mov	r0, r1
 80097d4:	4611      	mov	r1, r2
 80097d6:	2200      	movs	r2, #0
 80097d8:	602a      	str	r2, [r5, #0]
 80097da:	461a      	mov	r2, r3
 80097dc:	f7f8 f8f2 	bl	80019c4 <_lseek>
 80097e0:	1c43      	adds	r3, r0, #1
 80097e2:	d102      	bne.n	80097ea <_lseek_r+0x1e>
 80097e4:	682b      	ldr	r3, [r5, #0]
 80097e6:	b103      	cbz	r3, 80097ea <_lseek_r+0x1e>
 80097e8:	6023      	str	r3, [r4, #0]
 80097ea:	bd38      	pop	{r3, r4, r5, pc}
 80097ec:	20001d28 	.word	0x20001d28

080097f0 <memmove>:
 80097f0:	4288      	cmp	r0, r1
 80097f2:	b510      	push	{r4, lr}
 80097f4:	eb01 0402 	add.w	r4, r1, r2
 80097f8:	d902      	bls.n	8009800 <memmove+0x10>
 80097fa:	4284      	cmp	r4, r0
 80097fc:	4623      	mov	r3, r4
 80097fe:	d807      	bhi.n	8009810 <memmove+0x20>
 8009800:	1e43      	subs	r3, r0, #1
 8009802:	42a1      	cmp	r1, r4
 8009804:	d008      	beq.n	8009818 <memmove+0x28>
 8009806:	f811 2b01 	ldrb.w	r2, [r1], #1
 800980a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800980e:	e7f8      	b.n	8009802 <memmove+0x12>
 8009810:	4402      	add	r2, r0
 8009812:	4601      	mov	r1, r0
 8009814:	428a      	cmp	r2, r1
 8009816:	d100      	bne.n	800981a <memmove+0x2a>
 8009818:	bd10      	pop	{r4, pc}
 800981a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800981e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009822:	e7f7      	b.n	8009814 <memmove+0x24>

08009824 <_realloc_r>:
 8009824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009826:	4607      	mov	r7, r0
 8009828:	4614      	mov	r4, r2
 800982a:	460e      	mov	r6, r1
 800982c:	b921      	cbnz	r1, 8009838 <_realloc_r+0x14>
 800982e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009832:	4611      	mov	r1, r2
 8009834:	f7fb bb78 	b.w	8004f28 <_malloc_r>
 8009838:	b922      	cbnz	r2, 8009844 <_realloc_r+0x20>
 800983a:	f7fb fb25 	bl	8004e88 <_free_r>
 800983e:	4625      	mov	r5, r4
 8009840:	4628      	mov	r0, r5
 8009842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009844:	f000 f82d 	bl	80098a2 <_malloc_usable_size_r>
 8009848:	42a0      	cmp	r0, r4
 800984a:	d20f      	bcs.n	800986c <_realloc_r+0x48>
 800984c:	4621      	mov	r1, r4
 800984e:	4638      	mov	r0, r7
 8009850:	f7fb fb6a 	bl	8004f28 <_malloc_r>
 8009854:	4605      	mov	r5, r0
 8009856:	2800      	cmp	r0, #0
 8009858:	d0f2      	beq.n	8009840 <_realloc_r+0x1c>
 800985a:	4631      	mov	r1, r6
 800985c:	4622      	mov	r2, r4
 800985e:	f7fb faed 	bl	8004e3c <memcpy>
 8009862:	4631      	mov	r1, r6
 8009864:	4638      	mov	r0, r7
 8009866:	f7fb fb0f 	bl	8004e88 <_free_r>
 800986a:	e7e9      	b.n	8009840 <_realloc_r+0x1c>
 800986c:	4635      	mov	r5, r6
 800986e:	e7e7      	b.n	8009840 <_realloc_r+0x1c>

08009870 <_read_r>:
 8009870:	b538      	push	{r3, r4, r5, lr}
 8009872:	4d07      	ldr	r5, [pc, #28]	; (8009890 <_read_r+0x20>)
 8009874:	4604      	mov	r4, r0
 8009876:	4608      	mov	r0, r1
 8009878:	4611      	mov	r1, r2
 800987a:	2200      	movs	r2, #0
 800987c:	602a      	str	r2, [r5, #0]
 800987e:	461a      	mov	r2, r3
 8009880:	f7f8 f85c 	bl	800193c <_read>
 8009884:	1c43      	adds	r3, r0, #1
 8009886:	d102      	bne.n	800988e <_read_r+0x1e>
 8009888:	682b      	ldr	r3, [r5, #0]
 800988a:	b103      	cbz	r3, 800988e <_read_r+0x1e>
 800988c:	6023      	str	r3, [r4, #0]
 800988e:	bd38      	pop	{r3, r4, r5, pc}
 8009890:	20001d28 	.word	0x20001d28

08009894 <abort>:
 8009894:	b508      	push	{r3, lr}
 8009896:	2006      	movs	r0, #6
 8009898:	f000 f834 	bl	8009904 <raise>
 800989c:	2001      	movs	r0, #1
 800989e:	f7f8 f843 	bl	8001928 <_exit>

080098a2 <_malloc_usable_size_r>:
 80098a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098a6:	1f18      	subs	r0, r3, #4
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	bfbc      	itt	lt
 80098ac:	580b      	ldrlt	r3, [r1, r0]
 80098ae:	18c0      	addlt	r0, r0, r3
 80098b0:	4770      	bx	lr

080098b2 <_raise_r>:
 80098b2:	291f      	cmp	r1, #31
 80098b4:	b538      	push	{r3, r4, r5, lr}
 80098b6:	4604      	mov	r4, r0
 80098b8:	460d      	mov	r5, r1
 80098ba:	d904      	bls.n	80098c6 <_raise_r+0x14>
 80098bc:	2316      	movs	r3, #22
 80098be:	6003      	str	r3, [r0, #0]
 80098c0:	f04f 30ff 	mov.w	r0, #4294967295
 80098c4:	bd38      	pop	{r3, r4, r5, pc}
 80098c6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80098c8:	b112      	cbz	r2, 80098d0 <_raise_r+0x1e>
 80098ca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80098ce:	b94b      	cbnz	r3, 80098e4 <_raise_r+0x32>
 80098d0:	4620      	mov	r0, r4
 80098d2:	f000 f831 	bl	8009938 <_getpid_r>
 80098d6:	462a      	mov	r2, r5
 80098d8:	4601      	mov	r1, r0
 80098da:	4620      	mov	r0, r4
 80098dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098e0:	f000 b818 	b.w	8009914 <_kill_r>
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d00a      	beq.n	80098fe <_raise_r+0x4c>
 80098e8:	1c59      	adds	r1, r3, #1
 80098ea:	d103      	bne.n	80098f4 <_raise_r+0x42>
 80098ec:	2316      	movs	r3, #22
 80098ee:	6003      	str	r3, [r0, #0]
 80098f0:	2001      	movs	r0, #1
 80098f2:	e7e7      	b.n	80098c4 <_raise_r+0x12>
 80098f4:	2400      	movs	r4, #0
 80098f6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80098fa:	4628      	mov	r0, r5
 80098fc:	4798      	blx	r3
 80098fe:	2000      	movs	r0, #0
 8009900:	e7e0      	b.n	80098c4 <_raise_r+0x12>
	...

08009904 <raise>:
 8009904:	4b02      	ldr	r3, [pc, #8]	; (8009910 <raise+0xc>)
 8009906:	4601      	mov	r1, r0
 8009908:	6818      	ldr	r0, [r3, #0]
 800990a:	f7ff bfd2 	b.w	80098b2 <_raise_r>
 800990e:	bf00      	nop
 8009910:	2000000c 	.word	0x2000000c

08009914 <_kill_r>:
 8009914:	b538      	push	{r3, r4, r5, lr}
 8009916:	4d07      	ldr	r5, [pc, #28]	; (8009934 <_kill_r+0x20>)
 8009918:	2300      	movs	r3, #0
 800991a:	4604      	mov	r4, r0
 800991c:	4608      	mov	r0, r1
 800991e:	4611      	mov	r1, r2
 8009920:	602b      	str	r3, [r5, #0]
 8009922:	f7f7 fff1 	bl	8001908 <_kill>
 8009926:	1c43      	adds	r3, r0, #1
 8009928:	d102      	bne.n	8009930 <_kill_r+0x1c>
 800992a:	682b      	ldr	r3, [r5, #0]
 800992c:	b103      	cbz	r3, 8009930 <_kill_r+0x1c>
 800992e:	6023      	str	r3, [r4, #0]
 8009930:	bd38      	pop	{r3, r4, r5, pc}
 8009932:	bf00      	nop
 8009934:	20001d28 	.word	0x20001d28

08009938 <_getpid_r>:
 8009938:	f7f7 bfde 	b.w	80018f8 <_getpid>

0800993c <_init>:
 800993c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800993e:	bf00      	nop
 8009940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009942:	bc08      	pop	{r3}
 8009944:	469e      	mov	lr, r3
 8009946:	4770      	bx	lr

08009948 <_fini>:
 8009948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800994a:	bf00      	nop
 800994c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800994e:	bc08      	pop	{r3}
 8009950:	469e      	mov	lr, r3
 8009952:	4770      	bx	lr
