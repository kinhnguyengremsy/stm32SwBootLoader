
stm32SwBootLoader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aac4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d5c  0800ac58  0800ac58  0001ac58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9b4  0800b9b4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b9b4  0800b9b4  0001b9b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b9bc  0800b9bc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9bc  0800b9bc  0001b9bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b9c0  0800b9c0  0001b9c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b9c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00001190  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001370  20001370  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f3df  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002939  00000000  00000000  0002f5ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b00  00000000  00000000  00031f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a38  00000000  00000000  00032a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002123c  00000000  00000000  00033460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f91a  00000000  00000000  0005469c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c82f2  00000000  00000000  00063fb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012c2a8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000041f0  00000000  00000000  0012c2f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ac3c 	.word	0x0800ac3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800ac3c 	.word	0x0800ac3c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, 10);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	b29a      	uxth	r2, r3
 8001008:	230a      	movs	r3, #10
 800100a:	68b9      	ldr	r1, [r7, #8]
 800100c:	4803      	ldr	r0, [pc, #12]	; (800101c <_write+0x24>)
 800100e:	f002 fbcd 	bl	80037ac <HAL_UART_Transmit>
  return len;
 8001012:	687b      	ldr	r3, [r7, #4]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000240 	.word	0x20000240

08001020 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 8001024:	4b0d      	ldr	r3, [pc, #52]	; (800105c <main+0x3c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	2100      	movs	r1, #0
 800102c:	4618      	mov	r0, r3
 800102e:	f006 f861 	bl	80070f4 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001032:	f000 fdbb 	bl	8001bac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001036:	f000 f817 	bl	8001068 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103a:	f000 f953 	bl	80012e4 <MX_GPIO_Init>
  MX_DMA_Init();
 800103e:	f000 f8fb 	bl	8001238 <MX_DMA_Init>
  MX_UART4_Init();
 8001042:	f000 f87b 	bl	800113c <MX_UART4_Init>
  MX_USART2_UART_Init();
 8001046:	f000 f8cd 	bl	80011e4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800104a:	f000 f8a1 	bl	8001190 <MX_USART1_UART_Init>

//	sotfEmulations_configuration();
#endif

#if (USE_HOST_BOOTLOADER == 1)
  hostUartBootLoaderConfiguration(&host, &huart2);
 800104e:	4904      	ldr	r1, [pc, #16]	; (8001060 <main+0x40>)
 8001050:	4804      	ldr	r0, [pc, #16]	; (8001064 <main+0x44>)
 8001052:	f003 fe35 	bl	8004cc0 <hostUartBootLoaderConfiguration>
#if (USE_MAVLINK_BOOTLOADER == 1)
	  swBootLoader_process();
#endif

#if (USE_HOST_BOOTLOADER == 1)
	  hostUartBootLoaderProcess();
 8001056:	f004 fd89 	bl	8005b6c <hostUartBootLoaderProcess>
 800105a:	e7fc      	b.n	8001056 <main+0x36>
 800105c:	2000000c 	.word	0x2000000c
 8001060:	20000284 	.word	0x20000284
 8001064:	20000508 	.word	0x20000508

08001068 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b094      	sub	sp, #80	; 0x50
 800106c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106e:	f107 0320 	add.w	r3, r7, #32
 8001072:	2230      	movs	r2, #48	; 0x30
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f005 f826 	bl	80060c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800108c:	2300      	movs	r3, #0
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	4b28      	ldr	r3, [pc, #160]	; (8001134 <SystemClock_Config+0xcc>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	4a27      	ldr	r2, [pc, #156]	; (8001134 <SystemClock_Config+0xcc>)
 8001096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109a:	6413      	str	r3, [r2, #64]	; 0x40
 800109c:	4b25      	ldr	r3, [pc, #148]	; (8001134 <SystemClock_Config+0xcc>)
 800109e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a8:	2300      	movs	r3, #0
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	4b22      	ldr	r3, [pc, #136]	; (8001138 <SystemClock_Config+0xd0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a21      	ldr	r2, [pc, #132]	; (8001138 <SystemClock_Config+0xd0>)
 80010b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	4b1f      	ldr	r3, [pc, #124]	; (8001138 <SystemClock_Config+0xd0>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010c4:	2301      	movs	r3, #1
 80010c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ce:	2302      	movs	r3, #2
 80010d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010d8:	2304      	movs	r3, #4
 80010da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010dc:	23a8      	movs	r3, #168	; 0xa8
 80010de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010e0:	2302      	movs	r3, #2
 80010e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010e4:	2304      	movs	r3, #4
 80010e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e8:	f107 0320 	add.w	r3, r7, #32
 80010ec:	4618      	mov	r0, r3
 80010ee:	f001 fe49 	bl	8002d84 <HAL_RCC_OscConfig>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010f8:	f000 f946 	bl	8001388 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fc:	230f      	movs	r3, #15
 80010fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001100:	2302      	movs	r3, #2
 8001102:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001108:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800110c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800110e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001112:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001114:	f107 030c 	add.w	r3, r7, #12
 8001118:	2105      	movs	r1, #5
 800111a:	4618      	mov	r0, r3
 800111c:	f002 f8aa 	bl	8003274 <HAL_RCC_ClockConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001126:	f000 f92f 	bl	8001388 <Error_Handler>
  }
}
 800112a:	bf00      	nop
 800112c:	3750      	adds	r7, #80	; 0x50
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800
 8001138:	40007000 	.word	0x40007000

0800113c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <MX_UART4_Init+0x4c>)
 8001142:	4a12      	ldr	r2, [pc, #72]	; (800118c <MX_UART4_Init+0x50>)
 8001144:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001146:	4b10      	ldr	r3, [pc, #64]	; (8001188 <MX_UART4_Init+0x4c>)
 8001148:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800114c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <MX_UART4_Init+0x4c>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <MX_UART4_Init+0x4c>)
 8001156:	2200      	movs	r2, #0
 8001158:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <MX_UART4_Init+0x4c>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001160:	4b09      	ldr	r3, [pc, #36]	; (8001188 <MX_UART4_Init+0x4c>)
 8001162:	220c      	movs	r2, #12
 8001164:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001166:	4b08      	ldr	r3, [pc, #32]	; (8001188 <MX_UART4_Init+0x4c>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <MX_UART4_Init+0x4c>)
 800116e:	2200      	movs	r2, #0
 8001170:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001172:	4805      	ldr	r0, [pc, #20]	; (8001188 <MX_UART4_Init+0x4c>)
 8001174:	f002 fa9e 	bl	80036b4 <HAL_UART_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800117e:	f000 f903 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	200001fc 	.word	0x200001fc
 800118c:	40004c00 	.word	0x40004c00

08001190 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <MX_USART1_UART_Init+0x4c>)
 8001196:	4a12      	ldr	r2, [pc, #72]	; (80011e0 <MX_USART1_UART_Init+0x50>)
 8001198:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <MX_USART1_UART_Init+0x4c>)
 800119c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <MX_USART1_UART_Init+0x4c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <MX_USART1_UART_Init+0x4c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011ae:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <MX_USART1_UART_Init+0x4c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011b4:	4b09      	ldr	r3, [pc, #36]	; (80011dc <MX_USART1_UART_Init+0x4c>)
 80011b6:	220c      	movs	r2, #12
 80011b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ba:	4b08      	ldr	r3, [pc, #32]	; (80011dc <MX_USART1_UART_Init+0x4c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <MX_USART1_UART_Init+0x4c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011c6:	4805      	ldr	r0, [pc, #20]	; (80011dc <MX_USART1_UART_Init+0x4c>)
 80011c8:	f002 fa74 	bl	80036b4 <HAL_UART_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011d2:	f000 f8d9 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000240 	.word	0x20000240
 80011e0:	40011000 	.word	0x40011000

080011e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011e8:	4b11      	ldr	r3, [pc, #68]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 80011ea:	4a12      	ldr	r2, [pc, #72]	; (8001234 <MX_USART2_UART_Init+0x50>)
 80011ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 80011f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001202:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001208:	4b09      	ldr	r3, [pc, #36]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 800120a:	220c      	movs	r2, #12
 800120c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800121a:	4805      	ldr	r0, [pc, #20]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 800121c:	f002 fa4a 	bl	80036b4 <HAL_UART_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001226:	f000 f8af 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000284 	.word	0x20000284
 8001234:	40004400 	.word	0x40004400

08001238 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	4b27      	ldr	r3, [pc, #156]	; (80012e0 <MX_DMA_Init+0xa8>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a26      	ldr	r2, [pc, #152]	; (80012e0 <MX_DMA_Init+0xa8>)
 8001248:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b24      	ldr	r3, [pc, #144]	; (80012e0 <MX_DMA_Init+0xa8>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	603b      	str	r3, [r7, #0]
 800125e:	4b20      	ldr	r3, [pc, #128]	; (80012e0 <MX_DMA_Init+0xa8>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a1f      	ldr	r2, [pc, #124]	; (80012e0 <MX_DMA_Init+0xa8>)
 8001264:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b1d      	ldr	r3, [pc, #116]	; (80012e0 <MX_DMA_Init+0xa8>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001272:	603b      	str	r3, [r7, #0]
 8001274:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	2100      	movs	r1, #0
 800127a:	200d      	movs	r0, #13
 800127c:	f000 fe2b 	bl	8001ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001280:	200d      	movs	r0, #13
 8001282:	f000 fe44 	bl	8001f0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	2100      	movs	r1, #0
 800128a:	200f      	movs	r0, #15
 800128c:	f000 fe23 	bl	8001ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001290:	200f      	movs	r0, #15
 8001292:	f000 fe3c 	bl	8001f0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001296:	2200      	movs	r2, #0
 8001298:	2100      	movs	r1, #0
 800129a:	2010      	movs	r0, #16
 800129c:	f000 fe1b 	bl	8001ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80012a0:	2010      	movs	r0, #16
 80012a2:	f000 fe34 	bl	8001f0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2100      	movs	r1, #0
 80012aa:	2011      	movs	r0, #17
 80012ac:	f000 fe13 	bl	8001ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80012b0:	2011      	movs	r0, #17
 80012b2:	f000 fe2c 	bl	8001f0e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2100      	movs	r1, #0
 80012ba:	203a      	movs	r0, #58	; 0x3a
 80012bc:	f000 fe0b 	bl	8001ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80012c0:	203a      	movs	r0, #58	; 0x3a
 80012c2:	f000 fe24 	bl	8001f0e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2100      	movs	r1, #0
 80012ca:	2046      	movs	r0, #70	; 0x46
 80012cc:	f000 fe03 	bl	8001ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80012d0:	2046      	movs	r0, #70	; 0x46
 80012d2:	f000 fe1c 	bl	8001f0e <HAL_NVIC_EnableIRQ>

}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800

080012e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ea:	f107 030c 	add.w	r3, r7, #12
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
 80012f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	4b20      	ldr	r3, [pc, #128]	; (8001380 <MX_GPIO_Init+0x9c>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a1f      	ldr	r2, [pc, #124]	; (8001380 <MX_GPIO_Init+0x9c>)
 8001304:	f043 0304 	orr.w	r3, r3, #4
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b1d      	ldr	r3, [pc, #116]	; (8001380 <MX_GPIO_Init+0x9c>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0304 	and.w	r3, r3, #4
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	4b19      	ldr	r3, [pc, #100]	; (8001380 <MX_GPIO_Init+0x9c>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a18      	ldr	r2, [pc, #96]	; (8001380 <MX_GPIO_Init+0x9c>)
 8001320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b16      	ldr	r3, [pc, #88]	; (8001380 <MX_GPIO_Init+0x9c>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	603b      	str	r3, [r7, #0]
 8001336:	4b12      	ldr	r3, [pc, #72]	; (8001380 <MX_GPIO_Init+0x9c>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a11      	ldr	r2, [pc, #68]	; (8001380 <MX_GPIO_Init+0x9c>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <MX_GPIO_Init+0x9c>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	603b      	str	r3, [r7, #0]
 800134c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 800134e:	2201      	movs	r2, #1
 8001350:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001354:	480b      	ldr	r0, [pc, #44]	; (8001384 <MX_GPIO_Init+0xa0>)
 8001356:	f001 fcfb 	bl	8002d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800135a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800135e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001360:	2301      	movs	r3, #1
 8001362:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001368:	2300      	movs	r3, #0
 800136a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800136c:	f107 030c 	add.w	r3, r7, #12
 8001370:	4619      	mov	r1, r3
 8001372:	4804      	ldr	r0, [pc, #16]	; (8001384 <MX_GPIO_Init+0xa0>)
 8001374:	f001 fa54 	bl	8002820 <HAL_GPIO_Init>

}
 8001378:	bf00      	nop
 800137a:	3720      	adds	r7, #32
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40023800 	.word	0x40023800
 8001384:	40020800 	.word	0x40020800

08001388 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800138c:	b672      	cpsid	i
}
 800138e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("\n[Error_Handler] ......\n");
 8001390:	4803      	ldr	r0, [pc, #12]	; (80013a0 <Error_Handler+0x18>)
 8001392:	f005 fe97 	bl	80070c4 <puts>
	  HAL_Delay(1000);
 8001396:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800139a:	f000 fc79 	bl	8001c90 <HAL_Delay>
	  printf("\n[Error_Handler] ......\n");
 800139e:	e7f7      	b.n	8001390 <Error_Handler+0x8>
 80013a0:	0800ac58 	.word	0x0800ac58

080013a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <HAL_MspInit+0x4c>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	4a0f      	ldr	r2, [pc, #60]	; (80013f0 <HAL_MspInit+0x4c>)
 80013b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013b8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ba:	4b0d      	ldr	r3, [pc, #52]	; (80013f0 <HAL_MspInit+0x4c>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	603b      	str	r3, [r7, #0]
 80013ca:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <HAL_MspInit+0x4c>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	4a08      	ldr	r2, [pc, #32]	; (80013f0 <HAL_MspInit+0x4c>)
 80013d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d4:	6413      	str	r3, [r2, #64]	; 0x40
 80013d6:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <HAL_MspInit+0x4c>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013de:	603b      	str	r3, [r7, #0]
 80013e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40023800 	.word	0x40023800

080013f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08e      	sub	sp, #56	; 0x38
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a98      	ldr	r2, [pc, #608]	; (8001674 <HAL_UART_MspInit+0x280>)
 8001412:	4293      	cmp	r3, r2
 8001414:	f040 8095 	bne.w	8001542 <HAL_UART_MspInit+0x14e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001418:	2300      	movs	r3, #0
 800141a:	623b      	str	r3, [r7, #32]
 800141c:	4b96      	ldr	r3, [pc, #600]	; (8001678 <HAL_UART_MspInit+0x284>)
 800141e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001420:	4a95      	ldr	r2, [pc, #596]	; (8001678 <HAL_UART_MspInit+0x284>)
 8001422:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001426:	6413      	str	r3, [r2, #64]	; 0x40
 8001428:	4b93      	ldr	r3, [pc, #588]	; (8001678 <HAL_UART_MspInit+0x284>)
 800142a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001430:	623b      	str	r3, [r7, #32]
 8001432:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001434:	2300      	movs	r3, #0
 8001436:	61fb      	str	r3, [r7, #28]
 8001438:	4b8f      	ldr	r3, [pc, #572]	; (8001678 <HAL_UART_MspInit+0x284>)
 800143a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143c:	4a8e      	ldr	r2, [pc, #568]	; (8001678 <HAL_UART_MspInit+0x284>)
 800143e:	f043 0304 	orr.w	r3, r3, #4
 8001442:	6313      	str	r3, [r2, #48]	; 0x30
 8001444:	4b8c      	ldr	r3, [pc, #560]	; (8001678 <HAL_UART_MspInit+0x284>)
 8001446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001448:	f003 0304 	and.w	r3, r3, #4
 800144c:	61fb      	str	r3, [r7, #28]
 800144e:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001450:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001456:	2302      	movs	r3, #2
 8001458:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145e:	2303      	movs	r3, #3
 8001460:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001462:	2308      	movs	r3, #8
 8001464:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001466:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146a:	4619      	mov	r1, r3
 800146c:	4883      	ldr	r0, [pc, #524]	; (800167c <HAL_UART_MspInit+0x288>)
 800146e:	f001 f9d7 	bl	8002820 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8001472:	4b83      	ldr	r3, [pc, #524]	; (8001680 <HAL_UART_MspInit+0x28c>)
 8001474:	4a83      	ldr	r2, [pc, #524]	; (8001684 <HAL_UART_MspInit+0x290>)
 8001476:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8001478:	4b81      	ldr	r3, [pc, #516]	; (8001680 <HAL_UART_MspInit+0x28c>)
 800147a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800147e:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001480:	4b7f      	ldr	r3, [pc, #508]	; (8001680 <HAL_UART_MspInit+0x28c>)
 8001482:	2240      	movs	r2, #64	; 0x40
 8001484:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001486:	4b7e      	ldr	r3, [pc, #504]	; (8001680 <HAL_UART_MspInit+0x28c>)
 8001488:	2200      	movs	r2, #0
 800148a:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800148c:	4b7c      	ldr	r3, [pc, #496]	; (8001680 <HAL_UART_MspInit+0x28c>)
 800148e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001492:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001494:	4b7a      	ldr	r3, [pc, #488]	; (8001680 <HAL_UART_MspInit+0x28c>)
 8001496:	2200      	movs	r2, #0
 8001498:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800149a:	4b79      	ldr	r3, [pc, #484]	; (8001680 <HAL_UART_MspInit+0x28c>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80014a0:	4b77      	ldr	r3, [pc, #476]	; (8001680 <HAL_UART_MspInit+0x28c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80014a6:	4b76      	ldr	r3, [pc, #472]	; (8001680 <HAL_UART_MspInit+0x28c>)
 80014a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014ac:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014ae:	4b74      	ldr	r3, [pc, #464]	; (8001680 <HAL_UART_MspInit+0x28c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80014b4:	4872      	ldr	r0, [pc, #456]	; (8001680 <HAL_UART_MspInit+0x28c>)
 80014b6:	f000 fd53 	bl	8001f60 <HAL_DMA_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80014c0:	f7ff ff62 	bl	8001388 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4a6e      	ldr	r2, [pc, #440]	; (8001680 <HAL_UART_MspInit+0x28c>)
 80014c8:	635a      	str	r2, [r3, #52]	; 0x34
 80014ca:	4a6d      	ldr	r2, [pc, #436]	; (8001680 <HAL_UART_MspInit+0x28c>)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80014d0:	4b6d      	ldr	r3, [pc, #436]	; (8001688 <HAL_UART_MspInit+0x294>)
 80014d2:	4a6e      	ldr	r2, [pc, #440]	; (800168c <HAL_UART_MspInit+0x298>)
 80014d4:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80014d6:	4b6c      	ldr	r3, [pc, #432]	; (8001688 <HAL_UART_MspInit+0x294>)
 80014d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014dc:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014de:	4b6a      	ldr	r3, [pc, #424]	; (8001688 <HAL_UART_MspInit+0x294>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014e4:	4b68      	ldr	r3, [pc, #416]	; (8001688 <HAL_UART_MspInit+0x294>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014ea:	4b67      	ldr	r3, [pc, #412]	; (8001688 <HAL_UART_MspInit+0x294>)
 80014ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014f0:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014f2:	4b65      	ldr	r3, [pc, #404]	; (8001688 <HAL_UART_MspInit+0x294>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014f8:	4b63      	ldr	r3, [pc, #396]	; (8001688 <HAL_UART_MspInit+0x294>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80014fe:	4b62      	ldr	r3, [pc, #392]	; (8001688 <HAL_UART_MspInit+0x294>)
 8001500:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001504:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001506:	4b60      	ldr	r3, [pc, #384]	; (8001688 <HAL_UART_MspInit+0x294>)
 8001508:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800150c:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800150e:	4b5e      	ldr	r3, [pc, #376]	; (8001688 <HAL_UART_MspInit+0x294>)
 8001510:	2200      	movs	r2, #0
 8001512:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001514:	485c      	ldr	r0, [pc, #368]	; (8001688 <HAL_UART_MspInit+0x294>)
 8001516:	f000 fd23 	bl	8001f60 <HAL_DMA_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 8001520:	f7ff ff32 	bl	8001388 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a58      	ldr	r2, [pc, #352]	; (8001688 <HAL_UART_MspInit+0x294>)
 8001528:	639a      	str	r2, [r3, #56]	; 0x38
 800152a:	4a57      	ldr	r2, [pc, #348]	; (8001688 <HAL_UART_MspInit+0x294>)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001530:	2200      	movs	r2, #0
 8001532:	2100      	movs	r1, #0
 8001534:	2034      	movs	r0, #52	; 0x34
 8001536:	f000 fcce 	bl	8001ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800153a:	2034      	movs	r0, #52	; 0x34
 800153c:	f000 fce7 	bl	8001f0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001540:	e14b      	b.n	80017da <HAL_UART_MspInit+0x3e6>
  else if(huart->Instance==USART1)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a52      	ldr	r2, [pc, #328]	; (8001690 <HAL_UART_MspInit+0x29c>)
 8001548:	4293      	cmp	r3, r2
 800154a:	f040 80ad 	bne.w	80016a8 <HAL_UART_MspInit+0x2b4>
    __HAL_RCC_USART1_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	61bb      	str	r3, [r7, #24]
 8001552:	4b49      	ldr	r3, [pc, #292]	; (8001678 <HAL_UART_MspInit+0x284>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	4a48      	ldr	r2, [pc, #288]	; (8001678 <HAL_UART_MspInit+0x284>)
 8001558:	f043 0310 	orr.w	r3, r3, #16
 800155c:	6453      	str	r3, [r2, #68]	; 0x44
 800155e:	4b46      	ldr	r3, [pc, #280]	; (8001678 <HAL_UART_MspInit+0x284>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	f003 0310 	and.w	r3, r3, #16
 8001566:	61bb      	str	r3, [r7, #24]
 8001568:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
 800156e:	4b42      	ldr	r3, [pc, #264]	; (8001678 <HAL_UART_MspInit+0x284>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a41      	ldr	r2, [pc, #260]	; (8001678 <HAL_UART_MspInit+0x284>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b3f      	ldr	r3, [pc, #252]	; (8001678 <HAL_UART_MspInit+0x284>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001586:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158c:	2302      	movs	r3, #2
 800158e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001594:	2303      	movs	r3, #3
 8001596:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001598:	2307      	movs	r3, #7
 800159a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a0:	4619      	mov	r1, r3
 80015a2:	483c      	ldr	r0, [pc, #240]	; (8001694 <HAL_UART_MspInit+0x2a0>)
 80015a4:	f001 f93c 	bl	8002820 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80015a8:	4b3b      	ldr	r3, [pc, #236]	; (8001698 <HAL_UART_MspInit+0x2a4>)
 80015aa:	4a3c      	ldr	r2, [pc, #240]	; (800169c <HAL_UART_MspInit+0x2a8>)
 80015ac:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80015ae:	4b3a      	ldr	r3, [pc, #232]	; (8001698 <HAL_UART_MspInit+0x2a4>)
 80015b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015b4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015b6:	4b38      	ldr	r3, [pc, #224]	; (8001698 <HAL_UART_MspInit+0x2a4>)
 80015b8:	2240      	movs	r2, #64	; 0x40
 80015ba:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015bc:	4b36      	ldr	r3, [pc, #216]	; (8001698 <HAL_UART_MspInit+0x2a4>)
 80015be:	2200      	movs	r2, #0
 80015c0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015c2:	4b35      	ldr	r3, [pc, #212]	; (8001698 <HAL_UART_MspInit+0x2a4>)
 80015c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015c8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015ca:	4b33      	ldr	r3, [pc, #204]	; (8001698 <HAL_UART_MspInit+0x2a4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015d0:	4b31      	ldr	r3, [pc, #196]	; (8001698 <HAL_UART_MspInit+0x2a4>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80015d6:	4b30      	ldr	r3, [pc, #192]	; (8001698 <HAL_UART_MspInit+0x2a4>)
 80015d8:	2200      	movs	r2, #0
 80015da:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015dc:	4b2e      	ldr	r3, [pc, #184]	; (8001698 <HAL_UART_MspInit+0x2a4>)
 80015de:	2200      	movs	r2, #0
 80015e0:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015e2:	4b2d      	ldr	r3, [pc, #180]	; (8001698 <HAL_UART_MspInit+0x2a4>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80015e8:	482b      	ldr	r0, [pc, #172]	; (8001698 <HAL_UART_MspInit+0x2a4>)
 80015ea:	f000 fcb9 	bl	8001f60 <HAL_DMA_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <HAL_UART_MspInit+0x204>
      Error_Handler();
 80015f4:	f7ff fec8 	bl	8001388 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a27      	ldr	r2, [pc, #156]	; (8001698 <HAL_UART_MspInit+0x2a4>)
 80015fc:	635a      	str	r2, [r3, #52]	; 0x34
 80015fe:	4a26      	ldr	r2, [pc, #152]	; (8001698 <HAL_UART_MspInit+0x2a4>)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001604:	4b26      	ldr	r3, [pc, #152]	; (80016a0 <HAL_UART_MspInit+0x2ac>)
 8001606:	4a27      	ldr	r2, [pc, #156]	; (80016a4 <HAL_UART_MspInit+0x2b0>)
 8001608:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800160a:	4b25      	ldr	r3, [pc, #148]	; (80016a0 <HAL_UART_MspInit+0x2ac>)
 800160c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001610:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001612:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <HAL_UART_MspInit+0x2ac>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001618:	4b21      	ldr	r3, [pc, #132]	; (80016a0 <HAL_UART_MspInit+0x2ac>)
 800161a:	2200      	movs	r2, #0
 800161c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800161e:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <HAL_UART_MspInit+0x2ac>)
 8001620:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001624:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001626:	4b1e      	ldr	r3, [pc, #120]	; (80016a0 <HAL_UART_MspInit+0x2ac>)
 8001628:	2200      	movs	r2, #0
 800162a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800162c:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <HAL_UART_MspInit+0x2ac>)
 800162e:	2200      	movs	r2, #0
 8001630:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001632:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <HAL_UART_MspInit+0x2ac>)
 8001634:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001638:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800163a:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <HAL_UART_MspInit+0x2ac>)
 800163c:	2200      	movs	r2, #0
 800163e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001640:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <HAL_UART_MspInit+0x2ac>)
 8001642:	2200      	movs	r2, #0
 8001644:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001646:	4816      	ldr	r0, [pc, #88]	; (80016a0 <HAL_UART_MspInit+0x2ac>)
 8001648:	f000 fc8a 	bl	8001f60 <HAL_DMA_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <HAL_UART_MspInit+0x262>
      Error_Handler();
 8001652:	f7ff fe99 	bl	8001388 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a11      	ldr	r2, [pc, #68]	; (80016a0 <HAL_UART_MspInit+0x2ac>)
 800165a:	639a      	str	r2, [r3, #56]	; 0x38
 800165c:	4a10      	ldr	r2, [pc, #64]	; (80016a0 <HAL_UART_MspInit+0x2ac>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001662:	2200      	movs	r2, #0
 8001664:	2100      	movs	r1, #0
 8001666:	2025      	movs	r0, #37	; 0x25
 8001668:	f000 fc35 	bl	8001ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800166c:	2025      	movs	r0, #37	; 0x25
 800166e:	f000 fc4e 	bl	8001f0e <HAL_NVIC_EnableIRQ>
}
 8001672:	e0b2      	b.n	80017da <HAL_UART_MspInit+0x3e6>
 8001674:	40004c00 	.word	0x40004c00
 8001678:	40023800 	.word	0x40023800
 800167c:	40020800 	.word	0x40020800
 8001680:	200002c8 	.word	0x200002c8
 8001684:	40026070 	.word	0x40026070
 8001688:	20000328 	.word	0x20000328
 800168c:	40026040 	.word	0x40026040
 8001690:	40011000 	.word	0x40011000
 8001694:	40020000 	.word	0x40020000
 8001698:	20000388 	.word	0x20000388
 800169c:	400264b8 	.word	0x400264b8
 80016a0:	200003e8 	.word	0x200003e8
 80016a4:	40026440 	.word	0x40026440
  else if(huart->Instance==USART2)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a4d      	ldr	r2, [pc, #308]	; (80017e4 <HAL_UART_MspInit+0x3f0>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	f040 8093 	bne.w	80017da <HAL_UART_MspInit+0x3e6>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016b4:	2300      	movs	r3, #0
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	4b4b      	ldr	r3, [pc, #300]	; (80017e8 <HAL_UART_MspInit+0x3f4>)
 80016ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016bc:	4a4a      	ldr	r2, [pc, #296]	; (80017e8 <HAL_UART_MspInit+0x3f4>)
 80016be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c2:	6413      	str	r3, [r2, #64]	; 0x40
 80016c4:	4b48      	ldr	r3, [pc, #288]	; (80017e8 <HAL_UART_MspInit+0x3f4>)
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	4b44      	ldr	r3, [pc, #272]	; (80017e8 <HAL_UART_MspInit+0x3f4>)
 80016d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d8:	4a43      	ldr	r2, [pc, #268]	; (80017e8 <HAL_UART_MspInit+0x3f4>)
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	6313      	str	r3, [r2, #48]	; 0x30
 80016e0:	4b41      	ldr	r3, [pc, #260]	; (80017e8 <HAL_UART_MspInit+0x3f4>)
 80016e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016ec:	230c      	movs	r3, #12
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f0:	2302      	movs	r3, #2
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f8:	2303      	movs	r3, #3
 80016fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016fc:	2307      	movs	r3, #7
 80016fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001700:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001704:	4619      	mov	r1, r3
 8001706:	4839      	ldr	r0, [pc, #228]	; (80017ec <HAL_UART_MspInit+0x3f8>)
 8001708:	f001 f88a 	bl	8002820 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800170c:	4b38      	ldr	r3, [pc, #224]	; (80017f0 <HAL_UART_MspInit+0x3fc>)
 800170e:	4a39      	ldr	r2, [pc, #228]	; (80017f4 <HAL_UART_MspInit+0x400>)
 8001710:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001712:	4b37      	ldr	r3, [pc, #220]	; (80017f0 <HAL_UART_MspInit+0x3fc>)
 8001714:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001718:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800171a:	4b35      	ldr	r3, [pc, #212]	; (80017f0 <HAL_UART_MspInit+0x3fc>)
 800171c:	2240      	movs	r2, #64	; 0x40
 800171e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001720:	4b33      	ldr	r3, [pc, #204]	; (80017f0 <HAL_UART_MspInit+0x3fc>)
 8001722:	2200      	movs	r2, #0
 8001724:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001726:	4b32      	ldr	r3, [pc, #200]	; (80017f0 <HAL_UART_MspInit+0x3fc>)
 8001728:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800172c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800172e:	4b30      	ldr	r3, [pc, #192]	; (80017f0 <HAL_UART_MspInit+0x3fc>)
 8001730:	2200      	movs	r2, #0
 8001732:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001734:	4b2e      	ldr	r3, [pc, #184]	; (80017f0 <HAL_UART_MspInit+0x3fc>)
 8001736:	2200      	movs	r2, #0
 8001738:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800173a:	4b2d      	ldr	r3, [pc, #180]	; (80017f0 <HAL_UART_MspInit+0x3fc>)
 800173c:	2200      	movs	r2, #0
 800173e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001740:	4b2b      	ldr	r3, [pc, #172]	; (80017f0 <HAL_UART_MspInit+0x3fc>)
 8001742:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001746:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001748:	4b29      	ldr	r3, [pc, #164]	; (80017f0 <HAL_UART_MspInit+0x3fc>)
 800174a:	2200      	movs	r2, #0
 800174c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800174e:	4828      	ldr	r0, [pc, #160]	; (80017f0 <HAL_UART_MspInit+0x3fc>)
 8001750:	f000 fc06 	bl	8001f60 <HAL_DMA_Init>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <HAL_UART_MspInit+0x36a>
      Error_Handler();
 800175a:	f7ff fe15 	bl	8001388 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a23      	ldr	r2, [pc, #140]	; (80017f0 <HAL_UART_MspInit+0x3fc>)
 8001762:	635a      	str	r2, [r3, #52]	; 0x34
 8001764:	4a22      	ldr	r2, [pc, #136]	; (80017f0 <HAL_UART_MspInit+0x3fc>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800176a:	4b23      	ldr	r3, [pc, #140]	; (80017f8 <HAL_UART_MspInit+0x404>)
 800176c:	4a23      	ldr	r2, [pc, #140]	; (80017fc <HAL_UART_MspInit+0x408>)
 800176e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001770:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <HAL_UART_MspInit+0x404>)
 8001772:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001776:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001778:	4b1f      	ldr	r3, [pc, #124]	; (80017f8 <HAL_UART_MspInit+0x404>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800177e:	4b1e      	ldr	r3, [pc, #120]	; (80017f8 <HAL_UART_MspInit+0x404>)
 8001780:	2200      	movs	r2, #0
 8001782:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001784:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <HAL_UART_MspInit+0x404>)
 8001786:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800178a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800178c:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <HAL_UART_MspInit+0x404>)
 800178e:	2200      	movs	r2, #0
 8001790:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001792:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <HAL_UART_MspInit+0x404>)
 8001794:	2200      	movs	r2, #0
 8001796:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001798:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <HAL_UART_MspInit+0x404>)
 800179a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800179e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80017a0:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <HAL_UART_MspInit+0x404>)
 80017a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017a6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017a8:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <HAL_UART_MspInit+0x404>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80017ae:	4812      	ldr	r0, [pc, #72]	; (80017f8 <HAL_UART_MspInit+0x404>)
 80017b0:	f000 fbd6 	bl	8001f60 <HAL_DMA_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <HAL_UART_MspInit+0x3ca>
      Error_Handler();
 80017ba:	f7ff fde5 	bl	8001388 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a0d      	ldr	r2, [pc, #52]	; (80017f8 <HAL_UART_MspInit+0x404>)
 80017c2:	639a      	str	r2, [r3, #56]	; 0x38
 80017c4:	4a0c      	ldr	r2, [pc, #48]	; (80017f8 <HAL_UART_MspInit+0x404>)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017ca:	2200      	movs	r2, #0
 80017cc:	2100      	movs	r1, #0
 80017ce:	2026      	movs	r0, #38	; 0x26
 80017d0:	f000 fb81 	bl	8001ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017d4:	2026      	movs	r0, #38	; 0x26
 80017d6:	f000 fb9a 	bl	8001f0e <HAL_NVIC_EnableIRQ>
}
 80017da:	bf00      	nop
 80017dc:	3738      	adds	r7, #56	; 0x38
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40004400 	.word	0x40004400
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40020000 	.word	0x40020000
 80017f0:	20000448 	.word	0x20000448
 80017f4:	400260a0 	.word	0x400260a0
 80017f8:	200004a8 	.word	0x200004a8
 80017fc:	40026088 	.word	0x40026088

08001800 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a2c      	ldr	r2, [pc, #176]	; (80018c0 <HAL_UART_MspDeInit+0xc0>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d118      	bne.n	8001844 <HAL_UART_MspDeInit+0x44>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 8001812:	4b2c      	ldr	r3, [pc, #176]	; (80018c4 <HAL_UART_MspDeInit+0xc4>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	4a2b      	ldr	r2, [pc, #172]	; (80018c4 <HAL_UART_MspDeInit+0xc4>)
 8001818:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800181c:	6413      	str	r3, [r2, #64]	; 0x40

    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11);
 800181e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001822:	4829      	ldr	r0, [pc, #164]	; (80018c8 <HAL_UART_MspDeInit+0xc8>)
 8001824:	f001 f998 	bl	8002b58 <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800182c:	4618      	mov	r0, r3
 800182e:	f000 fc45 	bl	80020bc <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001836:	4618      	mov	r0, r3
 8001838:	f000 fc40 	bl	80020bc <HAL_DMA_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 800183c:	2034      	movs	r0, #52	; 0x34
 800183e:	f000 fb74 	bl	8001f2a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8001842:	e039      	b.n	80018b8 <HAL_UART_MspDeInit+0xb8>
  else if(huart->Instance==USART1)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a20      	ldr	r2, [pc, #128]	; (80018cc <HAL_UART_MspDeInit+0xcc>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d118      	bne.n	8001880 <HAL_UART_MspDeInit+0x80>
    __HAL_RCC_USART1_CLK_DISABLE();
 800184e:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <HAL_UART_MspDeInit+0xc4>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	4a1c      	ldr	r2, [pc, #112]	; (80018c4 <HAL_UART_MspDeInit+0xc4>)
 8001854:	f023 0310 	bic.w	r3, r3, #16
 8001858:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800185a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800185e:	481c      	ldr	r0, [pc, #112]	; (80018d0 <HAL_UART_MspDeInit+0xd0>)
 8001860:	f001 f97a 	bl	8002b58 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001868:	4618      	mov	r0, r3
 800186a:	f000 fc27 	bl	80020bc <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001872:	4618      	mov	r0, r3
 8001874:	f000 fc22 	bl	80020bc <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001878:	2025      	movs	r0, #37	; 0x25
 800187a:	f000 fb56 	bl	8001f2a <HAL_NVIC_DisableIRQ>
}
 800187e:	e01b      	b.n	80018b8 <HAL_UART_MspDeInit+0xb8>
  else if(huart->Instance==USART2)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a13      	ldr	r2, [pc, #76]	; (80018d4 <HAL_UART_MspDeInit+0xd4>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d116      	bne.n	80018b8 <HAL_UART_MspDeInit+0xb8>
    __HAL_RCC_USART2_CLK_DISABLE();
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <HAL_UART_MspDeInit+0xc4>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	4a0d      	ldr	r2, [pc, #52]	; (80018c4 <HAL_UART_MspDeInit+0xc4>)
 8001890:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001894:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8001896:	210c      	movs	r1, #12
 8001898:	480d      	ldr	r0, [pc, #52]	; (80018d0 <HAL_UART_MspDeInit+0xd0>)
 800189a:	f001 f95d 	bl	8002b58 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 fc0a 	bl	80020bc <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ac:	4618      	mov	r0, r3
 80018ae:	f000 fc05 	bl	80020bc <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80018b2:	2026      	movs	r0, #38	; 0x26
 80018b4:	f000 fb39 	bl	8001f2a <HAL_NVIC_DisableIRQ>
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40004c00 	.word	0x40004c00
 80018c4:	40023800 	.word	0x40023800
 80018c8:	40020800 	.word	0x40020800
 80018cc:	40011000 	.word	0x40011000
 80018d0:	40020000 	.word	0x40020000
 80018d4:	40004400 	.word	0x40004400

080018d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018dc:	e7fe      	b.n	80018dc <NMI_Handler+0x4>

080018de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018e2:	e7fe      	b.n	80018e2 <HardFault_Handler+0x4>

080018e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e8:	e7fe      	b.n	80018e8 <MemManage_Handler+0x4>

080018ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ee:	e7fe      	b.n	80018ee <BusFault_Handler+0x4>

080018f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f4:	e7fe      	b.n	80018f4 <UsageFault_Handler+0x4>

080018f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001924:	f000 f994 	bl	8001c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}

0800192c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001930:	4802      	ldr	r0, [pc, #8]	; (800193c <DMA1_Stream2_IRQHandler+0x10>)
 8001932:	f000 fd0b 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000328 	.word	0x20000328

08001940 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001944:	4802      	ldr	r0, [pc, #8]	; (8001950 <DMA1_Stream4_IRQHandler+0x10>)
 8001946:	f000 fd01 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	200002c8 	.word	0x200002c8

08001954 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001958:	4802      	ldr	r0, [pc, #8]	; (8001964 <DMA1_Stream5_IRQHandler+0x10>)
 800195a:	f000 fcf7 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	200004a8 	.word	0x200004a8

08001968 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800196c:	4802      	ldr	r0, [pc, #8]	; (8001978 <DMA1_Stream6_IRQHandler+0x10>)
 800196e:	f000 fced 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000448 	.word	0x20000448

0800197c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001980:	4802      	ldr	r0, [pc, #8]	; (800198c <USART1_IRQHandler+0x10>)
 8001982:	f002 f853 	bl	8003a2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000240 	.word	0x20000240

08001990 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001994:	4802      	ldr	r0, [pc, #8]	; (80019a0 <USART2_IRQHandler+0x10>)
 8001996:	f002 f849 	bl	8003a2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000284 	.word	0x20000284

080019a4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80019a8:	4802      	ldr	r0, [pc, #8]	; (80019b4 <UART4_IRQHandler+0x10>)
 80019aa:	f002 f83f 	bl	8003a2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	200001fc 	.word	0x200001fc

080019b8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80019bc:	4802      	ldr	r0, [pc, #8]	; (80019c8 <DMA2_Stream2_IRQHandler+0x10>)
 80019be:	f000 fcc5 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	200003e8 	.word	0x200003e8

080019cc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80019d0:	4802      	ldr	r0, [pc, #8]	; (80019dc <DMA2_Stream7_IRQHandler+0x10>)
 80019d2:	f000 fcbb 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000388 	.word	0x20000388

080019e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
	return 1;
 80019e4:	2301      	movs	r3, #1
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <_kill>:

int _kill(int pid, int sig)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019fa:	f004 fb25 	bl	8006048 <__errno>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2216      	movs	r2, #22
 8001a02:	601a      	str	r2, [r3, #0]
	return -1;
 8001a04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <_exit>:

void _exit (int status)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a18:	f04f 31ff 	mov.w	r1, #4294967295
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff ffe7 	bl	80019f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a22:	e7fe      	b.n	8001a22 <_exit+0x12>

08001a24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	e00a      	b.n	8001a4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a36:	f3af 8000 	nop.w
 8001a3a:	4601      	mov	r1, r0
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	1c5a      	adds	r2, r3, #1
 8001a40:	60ba      	str	r2, [r7, #8]
 8001a42:	b2ca      	uxtb	r2, r1
 8001a44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	dbf0      	blt.n	8001a36 <_read+0x12>
	}

return len;
 8001a54:	687b      	ldr	r3, [r7, #4]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <_close>:
	}
	return len;
}

int _close(int file)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
	return -1;
 8001a66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
 8001a7e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a86:	605a      	str	r2, [r3, #4]
	return 0;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <_isatty>:

int _isatty(int file)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
	return 1;
 8001a9e:	2301      	movs	r3, #1
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
	return 0;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3714      	adds	r7, #20
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
	...

08001ac8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ad0:	4a14      	ldr	r2, [pc, #80]	; (8001b24 <_sbrk+0x5c>)
 8001ad2:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <_sbrk+0x60>)
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001adc:	4b13      	ldr	r3, [pc, #76]	; (8001b2c <_sbrk+0x64>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d102      	bne.n	8001aea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ae4:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <_sbrk+0x64>)
 8001ae6:	4a12      	ldr	r2, [pc, #72]	; (8001b30 <_sbrk+0x68>)
 8001ae8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aea:	4b10      	ldr	r3, [pc, #64]	; (8001b2c <_sbrk+0x64>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4413      	add	r3, r2
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d207      	bcs.n	8001b08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001af8:	f004 faa6 	bl	8006048 <__errno>
 8001afc:	4603      	mov	r3, r0
 8001afe:	220c      	movs	r2, #12
 8001b00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b02:	f04f 33ff 	mov.w	r3, #4294967295
 8001b06:	e009      	b.n	8001b1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b08:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <_sbrk+0x64>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b0e:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <_sbrk+0x64>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4413      	add	r3, r2
 8001b16:	4a05      	ldr	r2, [pc, #20]	; (8001b2c <_sbrk+0x64>)
 8001b18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3718      	adds	r7, #24
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20020000 	.word	0x20020000
 8001b28:	00000400 	.word	0x00000400
 8001b2c:	20000510 	.word	0x20000510
 8001b30:	20001370 	.word	0x20001370

08001b34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <SystemInit+0x20>)
 8001b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b3e:	4a05      	ldr	r2, [pc, #20]	; (8001b54 <SystemInit+0x20>)
 8001b40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b5c:	480d      	ldr	r0, [pc, #52]	; (8001b94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b5e:	490e      	ldr	r1, [pc, #56]	; (8001b98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b60:	4a0e      	ldr	r2, [pc, #56]	; (8001b9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b64:	e002      	b.n	8001b6c <LoopCopyDataInit>

08001b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b6a:	3304      	adds	r3, #4

08001b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b70:	d3f9      	bcc.n	8001b66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b72:	4a0b      	ldr	r2, [pc, #44]	; (8001ba0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b74:	4c0b      	ldr	r4, [pc, #44]	; (8001ba4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b78:	e001      	b.n	8001b7e <LoopFillZerobss>

08001b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b7c:	3204      	adds	r2, #4

08001b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b80:	d3fb      	bcc.n	8001b7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b82:	f7ff ffd7 	bl	8001b34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b86:	f004 fa65 	bl	8006054 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b8a:	f7ff fa49 	bl	8001020 <main>
  bx  lr    
 8001b8e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b98:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001b9c:	0800b9c4 	.word	0x0800b9c4
  ldr r2, =_sbss
 8001ba0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001ba4:	20001370 	.word	0x20001370

08001ba8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ba8:	e7fe      	b.n	8001ba8 <ADC_IRQHandler>
	...

08001bac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <HAL_Init+0x40>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a0d      	ldr	r2, [pc, #52]	; (8001bec <HAL_Init+0x40>)
 8001bb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <HAL_Init+0x40>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a0a      	ldr	r2, [pc, #40]	; (8001bec <HAL_Init+0x40>)
 8001bc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bc8:	4b08      	ldr	r3, [pc, #32]	; (8001bec <HAL_Init+0x40>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a07      	ldr	r2, [pc, #28]	; (8001bec <HAL_Init+0x40>)
 8001bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd4:	2003      	movs	r0, #3
 8001bd6:	f000 f973 	bl	8001ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bda:	200f      	movs	r0, #15
 8001bdc:	f000 f808 	bl	8001bf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001be0:	f7ff fbe0 	bl	80013a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40023c00 	.word	0x40023c00

08001bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bf8:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <HAL_InitTick+0x54>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <HAL_InitTick+0x58>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	4619      	mov	r1, r3
 8001c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f000 f999 	bl	8001f46 <HAL_SYSTICK_Config>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e00e      	b.n	8001c3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b0f      	cmp	r3, #15
 8001c22:	d80a      	bhi.n	8001c3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c24:	2200      	movs	r2, #0
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	f04f 30ff 	mov.w	r0, #4294967295
 8001c2c:	f000 f953 	bl	8001ed6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c30:	4a06      	ldr	r2, [pc, #24]	; (8001c4c <HAL_InitTick+0x5c>)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	e000      	b.n	8001c3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20000000 	.word	0x20000000
 8001c48:	20000008 	.word	0x20000008
 8001c4c:	20000004 	.word	0x20000004

08001c50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <HAL_IncTick+0x20>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <HAL_IncTick+0x24>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4413      	add	r3, r2
 8001c60:	4a04      	ldr	r2, [pc, #16]	; (8001c74 <HAL_IncTick+0x24>)
 8001c62:	6013      	str	r3, [r2, #0]
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	20000008 	.word	0x20000008
 8001c74:	20000514 	.word	0x20000514

08001c78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c7c:	4b03      	ldr	r3, [pc, #12]	; (8001c8c <HAL_GetTick+0x14>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	20000514 	.word	0x20000514

08001c90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c98:	f7ff ffee 	bl	8001c78 <HAL_GetTick>
 8001c9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca8:	d005      	beq.n	8001cb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001caa:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <HAL_Delay+0x44>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cb6:	bf00      	nop
 8001cb8:	f7ff ffde 	bl	8001c78 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d8f7      	bhi.n	8001cb8 <HAL_Delay+0x28>
  {
  }
}
 8001cc8:	bf00      	nop
 8001cca:	bf00      	nop
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000008 	.word	0x20000008

08001cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <__NVIC_SetPriorityGrouping+0x44>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d0a:	4a04      	ldr	r2, [pc, #16]	; (8001d1c <__NVIC_SetPriorityGrouping+0x44>)
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	60d3      	str	r3, [r2, #12]
}
 8001d10:	bf00      	nop
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d24:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <__NVIC_GetPriorityGrouping+0x18>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	0a1b      	lsrs	r3, r3, #8
 8001d2a:	f003 0307 	and.w	r3, r3, #7
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	db0b      	blt.n	8001d66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	f003 021f 	and.w	r2, r3, #31
 8001d54:	4907      	ldr	r1, [pc, #28]	; (8001d74 <__NVIC_EnableIRQ+0x38>)
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	095b      	lsrs	r3, r3, #5
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	e000e100 	.word	0xe000e100

08001d78 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	db12      	blt.n	8001db0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d8a:	79fb      	ldrb	r3, [r7, #7]
 8001d8c:	f003 021f 	and.w	r2, r3, #31
 8001d90:	490a      	ldr	r1, [pc, #40]	; (8001dbc <__NVIC_DisableIRQ+0x44>)
 8001d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d96:	095b      	lsrs	r3, r3, #5
 8001d98:	2001      	movs	r0, #1
 8001d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d9e:	3320      	adds	r3, #32
 8001da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001da4:	f3bf 8f4f 	dsb	sy
}
 8001da8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001daa:	f3bf 8f6f 	isb	sy
}
 8001dae:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000e100 	.word	0xe000e100

08001dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	6039      	str	r1, [r7, #0]
 8001dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	db0a      	blt.n	8001dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	490c      	ldr	r1, [pc, #48]	; (8001e0c <__NVIC_SetPriority+0x4c>)
 8001dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dde:	0112      	lsls	r2, r2, #4
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	440b      	add	r3, r1
 8001de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001de8:	e00a      	b.n	8001e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	4908      	ldr	r1, [pc, #32]	; (8001e10 <__NVIC_SetPriority+0x50>)
 8001df0:	79fb      	ldrb	r3, [r7, #7]
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	3b04      	subs	r3, #4
 8001df8:	0112      	lsls	r2, r2, #4
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	761a      	strb	r2, [r3, #24]
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	e000e100 	.word	0xe000e100
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b089      	sub	sp, #36	; 0x24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f1c3 0307 	rsb	r3, r3, #7
 8001e2e:	2b04      	cmp	r3, #4
 8001e30:	bf28      	it	cs
 8001e32:	2304      	movcs	r3, #4
 8001e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	3304      	adds	r3, #4
 8001e3a:	2b06      	cmp	r3, #6
 8001e3c:	d902      	bls.n	8001e44 <NVIC_EncodePriority+0x30>
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	3b03      	subs	r3, #3
 8001e42:	e000      	b.n	8001e46 <NVIC_EncodePriority+0x32>
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e48:	f04f 32ff 	mov.w	r2, #4294967295
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43da      	mvns	r2, r3
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	401a      	ands	r2, r3
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	fa01 f303 	lsl.w	r3, r1, r3
 8001e66:	43d9      	mvns	r1, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e6c:	4313      	orrs	r3, r2
         );
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3724      	adds	r7, #36	; 0x24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
	...

08001e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e8c:	d301      	bcc.n	8001e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e00f      	b.n	8001eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e92:	4a0a      	ldr	r2, [pc, #40]	; (8001ebc <SysTick_Config+0x40>)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e9a:	210f      	movs	r1, #15
 8001e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea0:	f7ff ff8e 	bl	8001dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ea4:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <SysTick_Config+0x40>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eaa:	4b04      	ldr	r3, [pc, #16]	; (8001ebc <SysTick_Config+0x40>)
 8001eac:	2207      	movs	r2, #7
 8001eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	e000e010 	.word	0xe000e010

08001ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f7ff ff05 	bl	8001cd8 <__NVIC_SetPriorityGrouping>
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b086      	sub	sp, #24
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	4603      	mov	r3, r0
 8001ede:	60b9      	str	r1, [r7, #8]
 8001ee0:	607a      	str	r2, [r7, #4]
 8001ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ee8:	f7ff ff1a 	bl	8001d20 <__NVIC_GetPriorityGrouping>
 8001eec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	68b9      	ldr	r1, [r7, #8]
 8001ef2:	6978      	ldr	r0, [r7, #20]
 8001ef4:	f7ff ff8e 	bl	8001e14 <NVIC_EncodePriority>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001efe:	4611      	mov	r1, r2
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff ff5d 	bl	8001dc0 <__NVIC_SetPriority>
}
 8001f06:	bf00      	nop
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	4603      	mov	r3, r0
 8001f16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ff0d 	bl	8001d3c <__NVIC_EnableIRQ>
}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	4603      	mov	r3, r0
 8001f32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff ff1d 	bl	8001d78 <__NVIC_DisableIRQ>
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff ff94 	bl	8001e7c <SysTick_Config>
 8001f54:	4603      	mov	r3, r0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f6c:	f7ff fe84 	bl	8001c78 <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e099      	b.n	80020b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2202      	movs	r2, #2
 8001f80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 0201 	bic.w	r2, r2, #1
 8001f9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f9c:	e00f      	b.n	8001fbe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f9e:	f7ff fe6b 	bl	8001c78 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b05      	cmp	r3, #5
 8001faa:	d908      	bls.n	8001fbe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2220      	movs	r2, #32
 8001fb0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2203      	movs	r2, #3
 8001fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e078      	b.n	80020b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1e8      	bne.n	8001f9e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	4b38      	ldr	r3, [pc, #224]	; (80020b8 <HAL_DMA_Init+0x158>)
 8001fd8:	4013      	ands	r3, r2
 8001fda:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ff6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002002:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	4313      	orrs	r3, r2
 800200e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002014:	2b04      	cmp	r3, #4
 8002016:	d107      	bne.n	8002028 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002020:	4313      	orrs	r3, r2
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	4313      	orrs	r3, r2
 8002026:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	697a      	ldr	r2, [r7, #20]
 800202e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	f023 0307 	bic.w	r3, r3, #7
 800203e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002044:	697a      	ldr	r2, [r7, #20]
 8002046:	4313      	orrs	r3, r2
 8002048:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204e:	2b04      	cmp	r3, #4
 8002050:	d117      	bne.n	8002082 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	4313      	orrs	r3, r2
 800205a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00e      	beq.n	8002082 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 fb5f 	bl	8002728 <DMA_CheckFifoParam>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d008      	beq.n	8002082 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2240      	movs	r2, #64	; 0x40
 8002074:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800207e:	2301      	movs	r3, #1
 8002080:	e016      	b.n	80020b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 fb16 	bl	80026bc <DMA_CalcBaseAndBitshift>
 8002090:	4603      	mov	r3, r0
 8002092:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002098:	223f      	movs	r2, #63	; 0x3f
 800209a:	409a      	lsls	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	f010803f 	.word	0xf010803f

080020bc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e050      	b.n	8002170 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d101      	bne.n	80020de <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80020da:	2302      	movs	r3, #2
 80020dc:	e048      	b.n	8002170 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 0201 	bic.w	r2, r2, #1
 80020ec:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2200      	movs	r2, #0
 80020fc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2200      	movs	r2, #0
 8002104:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2200      	movs	r2, #0
 800210c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2200      	movs	r2, #0
 8002114:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2221      	movs	r2, #33	; 0x21
 800211c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 facc 	bl	80026bc <DMA_CalcBaseAndBitshift>
 8002124:	4603      	mov	r3, r0
 8002126:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002150:	223f      	movs	r2, #63	; 0x3f
 8002152:	409a      	lsls	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
 8002184:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002186:	2300      	movs	r3, #0
 8002188:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002196:	2b01      	cmp	r3, #1
 8002198:	d101      	bne.n	800219e <HAL_DMA_Start_IT+0x26>
 800219a:	2302      	movs	r3, #2
 800219c:	e040      	b.n	8002220 <HAL_DMA_Start_IT+0xa8>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d12f      	bne.n	8002212 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2202      	movs	r2, #2
 80021b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	68b9      	ldr	r1, [r7, #8]
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f000 fa4a 	bl	8002660 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d0:	223f      	movs	r2, #63	; 0x3f
 80021d2:	409a      	lsls	r2, r3
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f042 0216 	orr.w	r2, r2, #22
 80021e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d007      	beq.n	8002200 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0208 	orr.w	r2, r2, #8
 80021fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0201 	orr.w	r2, r2, #1
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	e005      	b.n	800221e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800221a:	2302      	movs	r3, #2
 800221c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800221e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002234:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002236:	f7ff fd1f 	bl	8001c78 <HAL_GetTick>
 800223a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d008      	beq.n	800225a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2280      	movs	r2, #128	; 0x80
 800224c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e052      	b.n	8002300 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 0216 	bic.w	r2, r2, #22
 8002268:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	695a      	ldr	r2, [r3, #20]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002278:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	2b00      	cmp	r3, #0
 8002280:	d103      	bne.n	800228a <HAL_DMA_Abort+0x62>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002286:	2b00      	cmp	r3, #0
 8002288:	d007      	beq.n	800229a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f022 0208 	bic.w	r2, r2, #8
 8002298:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 0201 	bic.w	r2, r2, #1
 80022a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022aa:	e013      	b.n	80022d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022ac:	f7ff fce4 	bl	8001c78 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b05      	cmp	r3, #5
 80022b8:	d90c      	bls.n	80022d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2220      	movs	r2, #32
 80022be:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2203      	movs	r2, #3
 80022c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e015      	b.n	8002300 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1e4      	bne.n	80022ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e6:	223f      	movs	r2, #63	; 0x3f
 80022e8:	409a      	lsls	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d004      	beq.n	8002326 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2280      	movs	r2, #128	; 0x80
 8002320:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e00c      	b.n	8002340 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2205      	movs	r2, #5
 800232a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 0201 	bic.w	r2, r2, #1
 800233c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002354:	2300      	movs	r3, #0
 8002356:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002358:	4b8e      	ldr	r3, [pc, #568]	; (8002594 <HAL_DMA_IRQHandler+0x248>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a8e      	ldr	r2, [pc, #568]	; (8002598 <HAL_DMA_IRQHandler+0x24c>)
 800235e:	fba2 2303 	umull	r2, r3, r2, r3
 8002362:	0a9b      	lsrs	r3, r3, #10
 8002364:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002376:	2208      	movs	r2, #8
 8002378:	409a      	lsls	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	4013      	ands	r3, r2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d01a      	beq.n	80023b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	d013      	beq.n	80023b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 0204 	bic.w	r2, r2, #4
 800239e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a4:	2208      	movs	r2, #8
 80023a6:	409a      	lsls	r2, r3
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b0:	f043 0201 	orr.w	r2, r3, #1
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023bc:	2201      	movs	r2, #1
 80023be:	409a      	lsls	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4013      	ands	r3, r2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d012      	beq.n	80023ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00b      	beq.n	80023ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023da:	2201      	movs	r2, #1
 80023dc:	409a      	lsls	r2, r3
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e6:	f043 0202 	orr.w	r2, r3, #2
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f2:	2204      	movs	r2, #4
 80023f4:	409a      	lsls	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	4013      	ands	r3, r2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d012      	beq.n	8002424 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00b      	beq.n	8002424 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002410:	2204      	movs	r2, #4
 8002412:	409a      	lsls	r2, r3
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241c:	f043 0204 	orr.w	r2, r3, #4
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002428:	2210      	movs	r2, #16
 800242a:	409a      	lsls	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4013      	ands	r3, r2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d043      	beq.n	80024bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	2b00      	cmp	r3, #0
 8002440:	d03c      	beq.n	80024bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002446:	2210      	movs	r2, #16
 8002448:	409a      	lsls	r2, r3
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d018      	beq.n	800248e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d108      	bne.n	800247c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	2b00      	cmp	r3, #0
 8002470:	d024      	beq.n	80024bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	4798      	blx	r3
 800247a:	e01f      	b.n	80024bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002480:	2b00      	cmp	r3, #0
 8002482:	d01b      	beq.n	80024bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	4798      	blx	r3
 800248c:	e016      	b.n	80024bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002498:	2b00      	cmp	r3, #0
 800249a:	d107      	bne.n	80024ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 0208 	bic.w	r2, r2, #8
 80024aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c0:	2220      	movs	r2, #32
 80024c2:	409a      	lsls	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4013      	ands	r3, r2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 808f 	beq.w	80025ec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0310 	and.w	r3, r3, #16
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 8087 	beq.w	80025ec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e2:	2220      	movs	r2, #32
 80024e4:	409a      	lsls	r2, r3
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b05      	cmp	r3, #5
 80024f4:	d136      	bne.n	8002564 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 0216 	bic.w	r2, r2, #22
 8002504:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695a      	ldr	r2, [r3, #20]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002514:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	2b00      	cmp	r3, #0
 800251c:	d103      	bne.n	8002526 <HAL_DMA_IRQHandler+0x1da>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002522:	2b00      	cmp	r3, #0
 8002524:	d007      	beq.n	8002536 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 0208 	bic.w	r2, r2, #8
 8002534:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253a:	223f      	movs	r2, #63	; 0x3f
 800253c:	409a      	lsls	r2, r3
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002556:	2b00      	cmp	r3, #0
 8002558:	d07e      	beq.n	8002658 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	4798      	blx	r3
        }
        return;
 8002562:	e079      	b.n	8002658 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d01d      	beq.n	80025ae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d10d      	bne.n	800259c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002584:	2b00      	cmp	r3, #0
 8002586:	d031      	beq.n	80025ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	4798      	blx	r3
 8002590:	e02c      	b.n	80025ec <HAL_DMA_IRQHandler+0x2a0>
 8002592:	bf00      	nop
 8002594:	20000000 	.word	0x20000000
 8002598:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d023      	beq.n	80025ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	4798      	blx	r3
 80025ac:	e01e      	b.n	80025ec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10f      	bne.n	80025dc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 0210 	bic.w	r2, r2, #16
 80025ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d003      	beq.n	80025ec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d032      	beq.n	800265a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d022      	beq.n	8002646 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2205      	movs	r2, #5
 8002604:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 0201 	bic.w	r2, r2, #1
 8002616:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	3301      	adds	r3, #1
 800261c:	60bb      	str	r3, [r7, #8]
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	429a      	cmp	r2, r3
 8002622:	d307      	bcc.n	8002634 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f2      	bne.n	8002618 <HAL_DMA_IRQHandler+0x2cc>
 8002632:	e000      	b.n	8002636 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002634:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800264a:	2b00      	cmp	r3, #0
 800264c:	d005      	beq.n	800265a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	4798      	blx	r3
 8002656:	e000      	b.n	800265a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002658:	bf00      	nop
    }
  }
}
 800265a:	3718      	adds	r7, #24
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
 800266c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800267c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	2b40      	cmp	r3, #64	; 0x40
 800268c:	d108      	bne.n	80026a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800269e:	e007      	b.n	80026b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68ba      	ldr	r2, [r7, #8]
 80026a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	60da      	str	r2, [r3, #12]
}
 80026b0:	bf00      	nop
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	3b10      	subs	r3, #16
 80026cc:	4a14      	ldr	r2, [pc, #80]	; (8002720 <DMA_CalcBaseAndBitshift+0x64>)
 80026ce:	fba2 2303 	umull	r2, r3, r2, r3
 80026d2:	091b      	lsrs	r3, r3, #4
 80026d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026d6:	4a13      	ldr	r2, [pc, #76]	; (8002724 <DMA_CalcBaseAndBitshift+0x68>)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4413      	add	r3, r2
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	461a      	mov	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2b03      	cmp	r3, #3
 80026e8:	d909      	bls.n	80026fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026f2:	f023 0303 	bic.w	r3, r3, #3
 80026f6:	1d1a      	adds	r2, r3, #4
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	659a      	str	r2, [r3, #88]	; 0x58
 80026fc:	e007      	b.n	800270e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002706:	f023 0303 	bic.w	r3, r3, #3
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002712:	4618      	mov	r0, r3
 8002714:	3714      	adds	r7, #20
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	aaaaaaab 	.word	0xaaaaaaab
 8002724:	0800b4fc 	.word	0x0800b4fc

08002728 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002730:	2300      	movs	r3, #0
 8002732:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002738:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d11f      	bne.n	8002782 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2b03      	cmp	r3, #3
 8002746:	d856      	bhi.n	80027f6 <DMA_CheckFifoParam+0xce>
 8002748:	a201      	add	r2, pc, #4	; (adr r2, 8002750 <DMA_CheckFifoParam+0x28>)
 800274a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800274e:	bf00      	nop
 8002750:	08002761 	.word	0x08002761
 8002754:	08002773 	.word	0x08002773
 8002758:	08002761 	.word	0x08002761
 800275c:	080027f7 	.word	0x080027f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002764:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d046      	beq.n	80027fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002770:	e043      	b.n	80027fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002776:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800277a:	d140      	bne.n	80027fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002780:	e03d      	b.n	80027fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800278a:	d121      	bne.n	80027d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	2b03      	cmp	r3, #3
 8002790:	d837      	bhi.n	8002802 <DMA_CheckFifoParam+0xda>
 8002792:	a201      	add	r2, pc, #4	; (adr r2, 8002798 <DMA_CheckFifoParam+0x70>)
 8002794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002798:	080027a9 	.word	0x080027a9
 800279c:	080027af 	.word	0x080027af
 80027a0:	080027a9 	.word	0x080027a9
 80027a4:	080027c1 	.word	0x080027c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	73fb      	strb	r3, [r7, #15]
      break;
 80027ac:	e030      	b.n	8002810 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d025      	beq.n	8002806 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027be:	e022      	b.n	8002806 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027c8:	d11f      	bne.n	800280a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027ce:	e01c      	b.n	800280a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d903      	bls.n	80027de <DMA_CheckFifoParam+0xb6>
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	2b03      	cmp	r3, #3
 80027da:	d003      	beq.n	80027e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027dc:	e018      	b.n	8002810 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	73fb      	strb	r3, [r7, #15]
      break;
 80027e2:	e015      	b.n	8002810 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00e      	beq.n	800280e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	73fb      	strb	r3, [r7, #15]
      break;
 80027f4:	e00b      	b.n	800280e <DMA_CheckFifoParam+0xe6>
      break;
 80027f6:	bf00      	nop
 80027f8:	e00a      	b.n	8002810 <DMA_CheckFifoParam+0xe8>
      break;
 80027fa:	bf00      	nop
 80027fc:	e008      	b.n	8002810 <DMA_CheckFifoParam+0xe8>
      break;
 80027fe:	bf00      	nop
 8002800:	e006      	b.n	8002810 <DMA_CheckFifoParam+0xe8>
      break;
 8002802:	bf00      	nop
 8002804:	e004      	b.n	8002810 <DMA_CheckFifoParam+0xe8>
      break;
 8002806:	bf00      	nop
 8002808:	e002      	b.n	8002810 <DMA_CheckFifoParam+0xe8>
      break;   
 800280a:	bf00      	nop
 800280c:	e000      	b.n	8002810 <DMA_CheckFifoParam+0xe8>
      break;
 800280e:	bf00      	nop
    }
  } 
  
  return status; 
 8002810:	7bfb      	ldrb	r3, [r7, #15]
}
 8002812:	4618      	mov	r0, r3
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop

08002820 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002820:	b480      	push	{r7}
 8002822:	b089      	sub	sp, #36	; 0x24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800282e:	2300      	movs	r3, #0
 8002830:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002832:	2300      	movs	r3, #0
 8002834:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002836:	2300      	movs	r3, #0
 8002838:	61fb      	str	r3, [r7, #28]
 800283a:	e16b      	b.n	8002b14 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800283c:	2201      	movs	r2, #1
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	4013      	ands	r3, r2
 800284e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	429a      	cmp	r2, r3
 8002856:	f040 815a 	bne.w	8002b0e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	2b01      	cmp	r3, #1
 8002864:	d005      	beq.n	8002872 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800286e:	2b02      	cmp	r3, #2
 8002870:	d130      	bne.n	80028d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	2203      	movs	r2, #3
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	43db      	mvns	r3, r3
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4013      	ands	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4313      	orrs	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028a8:	2201      	movs	r2, #1
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	43db      	mvns	r3, r3
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	4013      	ands	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	091b      	lsrs	r3, r3, #4
 80028be:	f003 0201 	and.w	r2, r3, #1
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f003 0303 	and.w	r3, r3, #3
 80028dc:	2b03      	cmp	r3, #3
 80028de:	d017      	beq.n	8002910 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	2203      	movs	r2, #3
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43db      	mvns	r3, r3
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4013      	ands	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4313      	orrs	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f003 0303 	and.w	r3, r3, #3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d123      	bne.n	8002964 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	08da      	lsrs	r2, r3, #3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3208      	adds	r2, #8
 8002924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002928:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	220f      	movs	r2, #15
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43db      	mvns	r3, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4013      	ands	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	691a      	ldr	r2, [r3, #16]
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4313      	orrs	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	08da      	lsrs	r2, r3, #3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	3208      	adds	r2, #8
 800295e:	69b9      	ldr	r1, [r7, #24]
 8002960:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	2203      	movs	r2, #3
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	43db      	mvns	r3, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4013      	ands	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f003 0203 	and.w	r2, r3, #3
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4313      	orrs	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 80b4 	beq.w	8002b0e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	4b60      	ldr	r3, [pc, #384]	; (8002b2c <HAL_GPIO_Init+0x30c>)
 80029ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ae:	4a5f      	ldr	r2, [pc, #380]	; (8002b2c <HAL_GPIO_Init+0x30c>)
 80029b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029b4:	6453      	str	r3, [r2, #68]	; 0x44
 80029b6:	4b5d      	ldr	r3, [pc, #372]	; (8002b2c <HAL_GPIO_Init+0x30c>)
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029c2:	4a5b      	ldr	r2, [pc, #364]	; (8002b30 <HAL_GPIO_Init+0x310>)
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	089b      	lsrs	r3, r3, #2
 80029c8:	3302      	adds	r3, #2
 80029ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	f003 0303 	and.w	r3, r3, #3
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	220f      	movs	r2, #15
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	43db      	mvns	r3, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4013      	ands	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a52      	ldr	r2, [pc, #328]	; (8002b34 <HAL_GPIO_Init+0x314>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d02b      	beq.n	8002a46 <HAL_GPIO_Init+0x226>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a51      	ldr	r2, [pc, #324]	; (8002b38 <HAL_GPIO_Init+0x318>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d025      	beq.n	8002a42 <HAL_GPIO_Init+0x222>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a50      	ldr	r2, [pc, #320]	; (8002b3c <HAL_GPIO_Init+0x31c>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d01f      	beq.n	8002a3e <HAL_GPIO_Init+0x21e>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a4f      	ldr	r2, [pc, #316]	; (8002b40 <HAL_GPIO_Init+0x320>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d019      	beq.n	8002a3a <HAL_GPIO_Init+0x21a>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a4e      	ldr	r2, [pc, #312]	; (8002b44 <HAL_GPIO_Init+0x324>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d013      	beq.n	8002a36 <HAL_GPIO_Init+0x216>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a4d      	ldr	r2, [pc, #308]	; (8002b48 <HAL_GPIO_Init+0x328>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d00d      	beq.n	8002a32 <HAL_GPIO_Init+0x212>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a4c      	ldr	r2, [pc, #304]	; (8002b4c <HAL_GPIO_Init+0x32c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d007      	beq.n	8002a2e <HAL_GPIO_Init+0x20e>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a4b      	ldr	r2, [pc, #300]	; (8002b50 <HAL_GPIO_Init+0x330>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d101      	bne.n	8002a2a <HAL_GPIO_Init+0x20a>
 8002a26:	2307      	movs	r3, #7
 8002a28:	e00e      	b.n	8002a48 <HAL_GPIO_Init+0x228>
 8002a2a:	2308      	movs	r3, #8
 8002a2c:	e00c      	b.n	8002a48 <HAL_GPIO_Init+0x228>
 8002a2e:	2306      	movs	r3, #6
 8002a30:	e00a      	b.n	8002a48 <HAL_GPIO_Init+0x228>
 8002a32:	2305      	movs	r3, #5
 8002a34:	e008      	b.n	8002a48 <HAL_GPIO_Init+0x228>
 8002a36:	2304      	movs	r3, #4
 8002a38:	e006      	b.n	8002a48 <HAL_GPIO_Init+0x228>
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e004      	b.n	8002a48 <HAL_GPIO_Init+0x228>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	e002      	b.n	8002a48 <HAL_GPIO_Init+0x228>
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <HAL_GPIO_Init+0x228>
 8002a46:	2300      	movs	r3, #0
 8002a48:	69fa      	ldr	r2, [r7, #28]
 8002a4a:	f002 0203 	and.w	r2, r2, #3
 8002a4e:	0092      	lsls	r2, r2, #2
 8002a50:	4093      	lsls	r3, r2
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a58:	4935      	ldr	r1, [pc, #212]	; (8002b30 <HAL_GPIO_Init+0x310>)
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	089b      	lsrs	r3, r3, #2
 8002a5e:	3302      	adds	r3, #2
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a66:	4b3b      	ldr	r3, [pc, #236]	; (8002b54 <HAL_GPIO_Init+0x334>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	4013      	ands	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a8a:	4a32      	ldr	r2, [pc, #200]	; (8002b54 <HAL_GPIO_Init+0x334>)
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a90:	4b30      	ldr	r3, [pc, #192]	; (8002b54 <HAL_GPIO_Init+0x334>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d003      	beq.n	8002ab4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ab4:	4a27      	ldr	r2, [pc, #156]	; (8002b54 <HAL_GPIO_Init+0x334>)
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aba:	4b26      	ldr	r3, [pc, #152]	; (8002b54 <HAL_GPIO_Init+0x334>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ade:	4a1d      	ldr	r2, [pc, #116]	; (8002b54 <HAL_GPIO_Init+0x334>)
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ae4:	4b1b      	ldr	r3, [pc, #108]	; (8002b54 <HAL_GPIO_Init+0x334>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	43db      	mvns	r3, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4013      	ands	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d003      	beq.n	8002b08 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b08:	4a12      	ldr	r2, [pc, #72]	; (8002b54 <HAL_GPIO_Init+0x334>)
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	3301      	adds	r3, #1
 8002b12:	61fb      	str	r3, [r7, #28]
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	2b0f      	cmp	r3, #15
 8002b18:	f67f ae90 	bls.w	800283c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b1c:	bf00      	nop
 8002b1e:	bf00      	nop
 8002b20:	3724      	adds	r7, #36	; 0x24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	40013800 	.word	0x40013800
 8002b34:	40020000 	.word	0x40020000
 8002b38:	40020400 	.word	0x40020400
 8002b3c:	40020800 	.word	0x40020800
 8002b40:	40020c00 	.word	0x40020c00
 8002b44:	40021000 	.word	0x40021000
 8002b48:	40021400 	.word	0x40021400
 8002b4c:	40021800 	.word	0x40021800
 8002b50:	40021c00 	.word	0x40021c00
 8002b54:	40013c00 	.word	0x40013c00

08002b58 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b087      	sub	sp, #28
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]
 8002b72:	e0cd      	b.n	8002d10 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b74:	2201      	movs	r2, #1
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	4013      	ands	r3, r2
 8002b84:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	f040 80bd 	bne.w	8002d0a <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002b90:	4a65      	ldr	r2, [pc, #404]	; (8002d28 <HAL_GPIO_DeInit+0x1d0>)
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	089b      	lsrs	r3, r3, #2
 8002b96:	3302      	adds	r3, #2
 8002b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b9c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	f003 0303 	and.w	r3, r3, #3
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	220f      	movs	r2, #15
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a5d      	ldr	r2, [pc, #372]	; (8002d2c <HAL_GPIO_DeInit+0x1d4>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d02b      	beq.n	8002c12 <HAL_GPIO_DeInit+0xba>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a5c      	ldr	r2, [pc, #368]	; (8002d30 <HAL_GPIO_DeInit+0x1d8>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d025      	beq.n	8002c0e <HAL_GPIO_DeInit+0xb6>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a5b      	ldr	r2, [pc, #364]	; (8002d34 <HAL_GPIO_DeInit+0x1dc>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d01f      	beq.n	8002c0a <HAL_GPIO_DeInit+0xb2>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a5a      	ldr	r2, [pc, #360]	; (8002d38 <HAL_GPIO_DeInit+0x1e0>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d019      	beq.n	8002c06 <HAL_GPIO_DeInit+0xae>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a59      	ldr	r2, [pc, #356]	; (8002d3c <HAL_GPIO_DeInit+0x1e4>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d013      	beq.n	8002c02 <HAL_GPIO_DeInit+0xaa>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a58      	ldr	r2, [pc, #352]	; (8002d40 <HAL_GPIO_DeInit+0x1e8>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d00d      	beq.n	8002bfe <HAL_GPIO_DeInit+0xa6>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a57      	ldr	r2, [pc, #348]	; (8002d44 <HAL_GPIO_DeInit+0x1ec>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d007      	beq.n	8002bfa <HAL_GPIO_DeInit+0xa2>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a56      	ldr	r2, [pc, #344]	; (8002d48 <HAL_GPIO_DeInit+0x1f0>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d101      	bne.n	8002bf6 <HAL_GPIO_DeInit+0x9e>
 8002bf2:	2307      	movs	r3, #7
 8002bf4:	e00e      	b.n	8002c14 <HAL_GPIO_DeInit+0xbc>
 8002bf6:	2308      	movs	r3, #8
 8002bf8:	e00c      	b.n	8002c14 <HAL_GPIO_DeInit+0xbc>
 8002bfa:	2306      	movs	r3, #6
 8002bfc:	e00a      	b.n	8002c14 <HAL_GPIO_DeInit+0xbc>
 8002bfe:	2305      	movs	r3, #5
 8002c00:	e008      	b.n	8002c14 <HAL_GPIO_DeInit+0xbc>
 8002c02:	2304      	movs	r3, #4
 8002c04:	e006      	b.n	8002c14 <HAL_GPIO_DeInit+0xbc>
 8002c06:	2303      	movs	r3, #3
 8002c08:	e004      	b.n	8002c14 <HAL_GPIO_DeInit+0xbc>
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	e002      	b.n	8002c14 <HAL_GPIO_DeInit+0xbc>
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e000      	b.n	8002c14 <HAL_GPIO_DeInit+0xbc>
 8002c12:	2300      	movs	r3, #0
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	f002 0203 	and.w	r2, r2, #3
 8002c1a:	0092      	lsls	r2, r2, #2
 8002c1c:	4093      	lsls	r3, r2
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d132      	bne.n	8002c8a <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002c24:	4b49      	ldr	r3, [pc, #292]	; (8002d4c <HAL_GPIO_DeInit+0x1f4>)
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	4947      	ldr	r1, [pc, #284]	; (8002d4c <HAL_GPIO_DeInit+0x1f4>)
 8002c2e:	4013      	ands	r3, r2
 8002c30:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002c32:	4b46      	ldr	r3, [pc, #280]	; (8002d4c <HAL_GPIO_DeInit+0x1f4>)
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	4944      	ldr	r1, [pc, #272]	; (8002d4c <HAL_GPIO_DeInit+0x1f4>)
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002c40:	4b42      	ldr	r3, [pc, #264]	; (8002d4c <HAL_GPIO_DeInit+0x1f4>)
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	43db      	mvns	r3, r3
 8002c48:	4940      	ldr	r1, [pc, #256]	; (8002d4c <HAL_GPIO_DeInit+0x1f4>)
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002c4e:	4b3f      	ldr	r3, [pc, #252]	; (8002d4c <HAL_GPIO_DeInit+0x1f4>)
 8002c50:	68da      	ldr	r2, [r3, #12]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	43db      	mvns	r3, r3
 8002c56:	493d      	ldr	r1, [pc, #244]	; (8002d4c <HAL_GPIO_DeInit+0x1f4>)
 8002c58:	4013      	ands	r3, r2
 8002c5a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	220f      	movs	r2, #15
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002c6c:	4a2e      	ldr	r2, [pc, #184]	; (8002d28 <HAL_GPIO_DeInit+0x1d0>)
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	089b      	lsrs	r3, r3, #2
 8002c72:	3302      	adds	r3, #2
 8002c74:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	43da      	mvns	r2, r3
 8002c7c:	482a      	ldr	r0, [pc, #168]	; (8002d28 <HAL_GPIO_DeInit+0x1d0>)
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	089b      	lsrs	r3, r3, #2
 8002c82:	400a      	ands	r2, r1
 8002c84:	3302      	adds	r3, #2
 8002c86:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	2103      	movs	r1, #3
 8002c94:	fa01 f303 	lsl.w	r3, r1, r3
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	401a      	ands	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	08da      	lsrs	r2, r3, #3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3208      	adds	r2, #8
 8002ca8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	f003 0307 	and.w	r3, r3, #7
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	220f      	movs	r2, #15
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	08d2      	lsrs	r2, r2, #3
 8002cc0:	4019      	ands	r1, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	3208      	adds	r2, #8
 8002cc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68da      	ldr	r2, [r3, #12]
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	2103      	movs	r1, #3
 8002cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	401a      	ands	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cec:	43db      	mvns	r3, r3
 8002cee:	401a      	ands	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	2103      	movs	r1, #3
 8002cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002d02:	43db      	mvns	r3, r3
 8002d04:	401a      	ands	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	617b      	str	r3, [r7, #20]
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	2b0f      	cmp	r3, #15
 8002d14:	f67f af2e 	bls.w	8002b74 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002d18:	bf00      	nop
 8002d1a:	bf00      	nop
 8002d1c:	371c      	adds	r7, #28
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	40013800 	.word	0x40013800
 8002d2c:	40020000 	.word	0x40020000
 8002d30:	40020400 	.word	0x40020400
 8002d34:	40020800 	.word	0x40020800
 8002d38:	40020c00 	.word	0x40020c00
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	40021400 	.word	0x40021400
 8002d44:	40021800 	.word	0x40021800
 8002d48:	40021c00 	.word	0x40021c00
 8002d4c:	40013c00 	.word	0x40013c00

08002d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	807b      	strh	r3, [r7, #2]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d60:	787b      	ldrb	r3, [r7, #1]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d66:	887a      	ldrh	r2, [r7, #2]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d6c:	e003      	b.n	8002d76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d6e:	887b      	ldrh	r3, [r7, #2]
 8002d70:	041a      	lsls	r2, r3, #16
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	619a      	str	r2, [r3, #24]
}
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
	...

08002d84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e267      	b.n	8003266 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d075      	beq.n	8002e8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002da2:	4b88      	ldr	r3, [pc, #544]	; (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 030c 	and.w	r3, r3, #12
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	d00c      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dae:	4b85      	ldr	r3, [pc, #532]	; (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002db6:	2b08      	cmp	r3, #8
 8002db8:	d112      	bne.n	8002de0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dba:	4b82      	ldr	r3, [pc, #520]	; (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dc6:	d10b      	bne.n	8002de0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc8:	4b7e      	ldr	r3, [pc, #504]	; (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d05b      	beq.n	8002e8c <HAL_RCC_OscConfig+0x108>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d157      	bne.n	8002e8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e242      	b.n	8003266 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de8:	d106      	bne.n	8002df8 <HAL_RCC_OscConfig+0x74>
 8002dea:	4b76      	ldr	r3, [pc, #472]	; (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a75      	ldr	r2, [pc, #468]	; (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df4:	6013      	str	r3, [r2, #0]
 8002df6:	e01d      	b.n	8002e34 <HAL_RCC_OscConfig+0xb0>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e00:	d10c      	bne.n	8002e1c <HAL_RCC_OscConfig+0x98>
 8002e02:	4b70      	ldr	r3, [pc, #448]	; (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a6f      	ldr	r2, [pc, #444]	; (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e0c:	6013      	str	r3, [r2, #0]
 8002e0e:	4b6d      	ldr	r3, [pc, #436]	; (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a6c      	ldr	r2, [pc, #432]	; (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e18:	6013      	str	r3, [r2, #0]
 8002e1a:	e00b      	b.n	8002e34 <HAL_RCC_OscConfig+0xb0>
 8002e1c:	4b69      	ldr	r3, [pc, #420]	; (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a68      	ldr	r2, [pc, #416]	; (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e26:	6013      	str	r3, [r2, #0]
 8002e28:	4b66      	ldr	r3, [pc, #408]	; (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a65      	ldr	r2, [pc, #404]	; (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002e2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d013      	beq.n	8002e64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3c:	f7fe ff1c 	bl	8001c78 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e44:	f7fe ff18 	bl	8001c78 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b64      	cmp	r3, #100	; 0x64
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e207      	b.n	8003266 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e56:	4b5b      	ldr	r3, [pc, #364]	; (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0f0      	beq.n	8002e44 <HAL_RCC_OscConfig+0xc0>
 8002e62:	e014      	b.n	8002e8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e64:	f7fe ff08 	bl	8001c78 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e6c:	f7fe ff04 	bl	8001c78 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b64      	cmp	r3, #100	; 0x64
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e1f3      	b.n	8003266 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e7e:	4b51      	ldr	r3, [pc, #324]	; (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0xe8>
 8002e8a:	e000      	b.n	8002e8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d063      	beq.n	8002f62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e9a:	4b4a      	ldr	r3, [pc, #296]	; (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 030c 	and.w	r3, r3, #12
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00b      	beq.n	8002ebe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ea6:	4b47      	ldr	r3, [pc, #284]	; (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002eae:	2b08      	cmp	r3, #8
 8002eb0:	d11c      	bne.n	8002eec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eb2:	4b44      	ldr	r3, [pc, #272]	; (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d116      	bne.n	8002eec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ebe:	4b41      	ldr	r3, [pc, #260]	; (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d005      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x152>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d001      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e1c7      	b.n	8003266 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed6:	4b3b      	ldr	r3, [pc, #236]	; (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	4937      	ldr	r1, [pc, #220]	; (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eea:	e03a      	b.n	8002f62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d020      	beq.n	8002f36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ef4:	4b34      	ldr	r3, [pc, #208]	; (8002fc8 <HAL_RCC_OscConfig+0x244>)
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efa:	f7fe febd 	bl	8001c78 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f00:	e008      	b.n	8002f14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f02:	f7fe feb9 	bl	8001c78 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e1a8      	b.n	8003266 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f14:	4b2b      	ldr	r3, [pc, #172]	; (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0f0      	beq.n	8002f02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f20:	4b28      	ldr	r3, [pc, #160]	; (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	4925      	ldr	r1, [pc, #148]	; (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	600b      	str	r3, [r1, #0]
 8002f34:	e015      	b.n	8002f62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f36:	4b24      	ldr	r3, [pc, #144]	; (8002fc8 <HAL_RCC_OscConfig+0x244>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3c:	f7fe fe9c 	bl	8001c78 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f44:	f7fe fe98 	bl	8001c78 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e187      	b.n	8003266 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f56:	4b1b      	ldr	r3, [pc, #108]	; (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1f0      	bne.n	8002f44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0308 	and.w	r3, r3, #8
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d036      	beq.n	8002fdc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d016      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f76:	4b15      	ldr	r3, [pc, #84]	; (8002fcc <HAL_RCC_OscConfig+0x248>)
 8002f78:	2201      	movs	r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f7c:	f7fe fe7c 	bl	8001c78 <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f84:	f7fe fe78 	bl	8001c78 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e167      	b.n	8003266 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f96:	4b0b      	ldr	r3, [pc, #44]	; (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002f98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d0f0      	beq.n	8002f84 <HAL_RCC_OscConfig+0x200>
 8002fa2:	e01b      	b.n	8002fdc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fa4:	4b09      	ldr	r3, [pc, #36]	; (8002fcc <HAL_RCC_OscConfig+0x248>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002faa:	f7fe fe65 	bl	8001c78 <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fb0:	e00e      	b.n	8002fd0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fb2:	f7fe fe61 	bl	8001c78 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d907      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e150      	b.n	8003266 <HAL_RCC_OscConfig+0x4e2>
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	42470000 	.word	0x42470000
 8002fcc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fd0:	4b88      	ldr	r3, [pc, #544]	; (80031f4 <HAL_RCC_OscConfig+0x470>)
 8002fd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1ea      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 8097 	beq.w	8003118 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fea:	2300      	movs	r3, #0
 8002fec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fee:	4b81      	ldr	r3, [pc, #516]	; (80031f4 <HAL_RCC_OscConfig+0x470>)
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10f      	bne.n	800301a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60bb      	str	r3, [r7, #8]
 8002ffe:	4b7d      	ldr	r3, [pc, #500]	; (80031f4 <HAL_RCC_OscConfig+0x470>)
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	4a7c      	ldr	r2, [pc, #496]	; (80031f4 <HAL_RCC_OscConfig+0x470>)
 8003004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003008:	6413      	str	r3, [r2, #64]	; 0x40
 800300a:	4b7a      	ldr	r3, [pc, #488]	; (80031f4 <HAL_RCC_OscConfig+0x470>)
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003012:	60bb      	str	r3, [r7, #8]
 8003014:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003016:	2301      	movs	r3, #1
 8003018:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800301a:	4b77      	ldr	r3, [pc, #476]	; (80031f8 <HAL_RCC_OscConfig+0x474>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003022:	2b00      	cmp	r3, #0
 8003024:	d118      	bne.n	8003058 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003026:	4b74      	ldr	r3, [pc, #464]	; (80031f8 <HAL_RCC_OscConfig+0x474>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a73      	ldr	r2, [pc, #460]	; (80031f8 <HAL_RCC_OscConfig+0x474>)
 800302c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003030:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003032:	f7fe fe21 	bl	8001c78 <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003038:	e008      	b.n	800304c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800303a:	f7fe fe1d 	bl	8001c78 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e10c      	b.n	8003266 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800304c:	4b6a      	ldr	r3, [pc, #424]	; (80031f8 <HAL_RCC_OscConfig+0x474>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003054:	2b00      	cmp	r3, #0
 8003056:	d0f0      	beq.n	800303a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d106      	bne.n	800306e <HAL_RCC_OscConfig+0x2ea>
 8003060:	4b64      	ldr	r3, [pc, #400]	; (80031f4 <HAL_RCC_OscConfig+0x470>)
 8003062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003064:	4a63      	ldr	r2, [pc, #396]	; (80031f4 <HAL_RCC_OscConfig+0x470>)
 8003066:	f043 0301 	orr.w	r3, r3, #1
 800306a:	6713      	str	r3, [r2, #112]	; 0x70
 800306c:	e01c      	b.n	80030a8 <HAL_RCC_OscConfig+0x324>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	2b05      	cmp	r3, #5
 8003074:	d10c      	bne.n	8003090 <HAL_RCC_OscConfig+0x30c>
 8003076:	4b5f      	ldr	r3, [pc, #380]	; (80031f4 <HAL_RCC_OscConfig+0x470>)
 8003078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307a:	4a5e      	ldr	r2, [pc, #376]	; (80031f4 <HAL_RCC_OscConfig+0x470>)
 800307c:	f043 0304 	orr.w	r3, r3, #4
 8003080:	6713      	str	r3, [r2, #112]	; 0x70
 8003082:	4b5c      	ldr	r3, [pc, #368]	; (80031f4 <HAL_RCC_OscConfig+0x470>)
 8003084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003086:	4a5b      	ldr	r2, [pc, #364]	; (80031f4 <HAL_RCC_OscConfig+0x470>)
 8003088:	f043 0301 	orr.w	r3, r3, #1
 800308c:	6713      	str	r3, [r2, #112]	; 0x70
 800308e:	e00b      	b.n	80030a8 <HAL_RCC_OscConfig+0x324>
 8003090:	4b58      	ldr	r3, [pc, #352]	; (80031f4 <HAL_RCC_OscConfig+0x470>)
 8003092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003094:	4a57      	ldr	r2, [pc, #348]	; (80031f4 <HAL_RCC_OscConfig+0x470>)
 8003096:	f023 0301 	bic.w	r3, r3, #1
 800309a:	6713      	str	r3, [r2, #112]	; 0x70
 800309c:	4b55      	ldr	r3, [pc, #340]	; (80031f4 <HAL_RCC_OscConfig+0x470>)
 800309e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a0:	4a54      	ldr	r2, [pc, #336]	; (80031f4 <HAL_RCC_OscConfig+0x470>)
 80030a2:	f023 0304 	bic.w	r3, r3, #4
 80030a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d015      	beq.n	80030dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b0:	f7fe fde2 	bl	8001c78 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b6:	e00a      	b.n	80030ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030b8:	f7fe fdde 	bl	8001c78 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e0cb      	b.n	8003266 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ce:	4b49      	ldr	r3, [pc, #292]	; (80031f4 <HAL_RCC_OscConfig+0x470>)
 80030d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0ee      	beq.n	80030b8 <HAL_RCC_OscConfig+0x334>
 80030da:	e014      	b.n	8003106 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030dc:	f7fe fdcc 	bl	8001c78 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e2:	e00a      	b.n	80030fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030e4:	f7fe fdc8 	bl	8001c78 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e0b5      	b.n	8003266 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030fa:	4b3e      	ldr	r3, [pc, #248]	; (80031f4 <HAL_RCC_OscConfig+0x470>)
 80030fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1ee      	bne.n	80030e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003106:	7dfb      	ldrb	r3, [r7, #23]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d105      	bne.n	8003118 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800310c:	4b39      	ldr	r3, [pc, #228]	; (80031f4 <HAL_RCC_OscConfig+0x470>)
 800310e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003110:	4a38      	ldr	r2, [pc, #224]	; (80031f4 <HAL_RCC_OscConfig+0x470>)
 8003112:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003116:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	2b00      	cmp	r3, #0
 800311e:	f000 80a1 	beq.w	8003264 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003122:	4b34      	ldr	r3, [pc, #208]	; (80031f4 <HAL_RCC_OscConfig+0x470>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 030c 	and.w	r3, r3, #12
 800312a:	2b08      	cmp	r3, #8
 800312c:	d05c      	beq.n	80031e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	2b02      	cmp	r3, #2
 8003134:	d141      	bne.n	80031ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003136:	4b31      	ldr	r3, [pc, #196]	; (80031fc <HAL_RCC_OscConfig+0x478>)
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313c:	f7fe fd9c 	bl	8001c78 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003144:	f7fe fd98 	bl	8001c78 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e087      	b.n	8003266 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003156:	4b27      	ldr	r3, [pc, #156]	; (80031f4 <HAL_RCC_OscConfig+0x470>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f0      	bne.n	8003144 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	69da      	ldr	r2, [r3, #28]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	431a      	orrs	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003170:	019b      	lsls	r3, r3, #6
 8003172:	431a      	orrs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003178:	085b      	lsrs	r3, r3, #1
 800317a:	3b01      	subs	r3, #1
 800317c:	041b      	lsls	r3, r3, #16
 800317e:	431a      	orrs	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003184:	061b      	lsls	r3, r3, #24
 8003186:	491b      	ldr	r1, [pc, #108]	; (80031f4 <HAL_RCC_OscConfig+0x470>)
 8003188:	4313      	orrs	r3, r2
 800318a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800318c:	4b1b      	ldr	r3, [pc, #108]	; (80031fc <HAL_RCC_OscConfig+0x478>)
 800318e:	2201      	movs	r2, #1
 8003190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003192:	f7fe fd71 	bl	8001c78 <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003198:	e008      	b.n	80031ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800319a:	f7fe fd6d 	bl	8001c78 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e05c      	b.n	8003266 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ac:	4b11      	ldr	r3, [pc, #68]	; (80031f4 <HAL_RCC_OscConfig+0x470>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0f0      	beq.n	800319a <HAL_RCC_OscConfig+0x416>
 80031b8:	e054      	b.n	8003264 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ba:	4b10      	ldr	r3, [pc, #64]	; (80031fc <HAL_RCC_OscConfig+0x478>)
 80031bc:	2200      	movs	r2, #0
 80031be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c0:	f7fe fd5a 	bl	8001c78 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031c8:	f7fe fd56 	bl	8001c78 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e045      	b.n	8003266 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031da:	4b06      	ldr	r3, [pc, #24]	; (80031f4 <HAL_RCC_OscConfig+0x470>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1f0      	bne.n	80031c8 <HAL_RCC_OscConfig+0x444>
 80031e6:	e03d      	b.n	8003264 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d107      	bne.n	8003200 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e038      	b.n	8003266 <HAL_RCC_OscConfig+0x4e2>
 80031f4:	40023800 	.word	0x40023800
 80031f8:	40007000 	.word	0x40007000
 80031fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003200:	4b1b      	ldr	r3, [pc, #108]	; (8003270 <HAL_RCC_OscConfig+0x4ec>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d028      	beq.n	8003260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003218:	429a      	cmp	r2, r3
 800321a:	d121      	bne.n	8003260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003226:	429a      	cmp	r2, r3
 8003228:	d11a      	bne.n	8003260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003230:	4013      	ands	r3, r2
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003236:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003238:	4293      	cmp	r3, r2
 800323a:	d111      	bne.n	8003260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003246:	085b      	lsrs	r3, r3, #1
 8003248:	3b01      	subs	r3, #1
 800324a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800324c:	429a      	cmp	r2, r3
 800324e:	d107      	bne.n	8003260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800325c:	429a      	cmp	r2, r3
 800325e:	d001      	beq.n	8003264 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e000      	b.n	8003266 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3718      	adds	r7, #24
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40023800 	.word	0x40023800

08003274 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e0cc      	b.n	8003422 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003288:	4b68      	ldr	r3, [pc, #416]	; (800342c <HAL_RCC_ClockConfig+0x1b8>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	429a      	cmp	r2, r3
 8003294:	d90c      	bls.n	80032b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003296:	4b65      	ldr	r3, [pc, #404]	; (800342c <HAL_RCC_ClockConfig+0x1b8>)
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800329e:	4b63      	ldr	r3, [pc, #396]	; (800342c <HAL_RCC_ClockConfig+0x1b8>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0307 	and.w	r3, r3, #7
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d001      	beq.n	80032b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e0b8      	b.n	8003422 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d020      	beq.n	80032fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0304 	and.w	r3, r3, #4
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d005      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032c8:	4b59      	ldr	r3, [pc, #356]	; (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	4a58      	ldr	r2, [pc, #352]	; (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0308 	and.w	r3, r3, #8
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d005      	beq.n	80032ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032e0:	4b53      	ldr	r3, [pc, #332]	; (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	4a52      	ldr	r2, [pc, #328]	; (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 80032e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032ec:	4b50      	ldr	r3, [pc, #320]	; (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	494d      	ldr	r1, [pc, #308]	; (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d044      	beq.n	8003394 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d107      	bne.n	8003322 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003312:	4b47      	ldr	r3, [pc, #284]	; (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d119      	bne.n	8003352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e07f      	b.n	8003422 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b02      	cmp	r3, #2
 8003328:	d003      	beq.n	8003332 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800332e:	2b03      	cmp	r3, #3
 8003330:	d107      	bne.n	8003342 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003332:	4b3f      	ldr	r3, [pc, #252]	; (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d109      	bne.n	8003352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e06f      	b.n	8003422 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003342:	4b3b      	ldr	r3, [pc, #236]	; (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e067      	b.n	8003422 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003352:	4b37      	ldr	r3, [pc, #220]	; (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f023 0203 	bic.w	r2, r3, #3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	4934      	ldr	r1, [pc, #208]	; (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 8003360:	4313      	orrs	r3, r2
 8003362:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003364:	f7fe fc88 	bl	8001c78 <HAL_GetTick>
 8003368:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336a:	e00a      	b.n	8003382 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800336c:	f7fe fc84 	bl	8001c78 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	f241 3288 	movw	r2, #5000	; 0x1388
 800337a:	4293      	cmp	r3, r2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e04f      	b.n	8003422 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003382:	4b2b      	ldr	r3, [pc, #172]	; (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f003 020c 	and.w	r2, r3, #12
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	429a      	cmp	r2, r3
 8003392:	d1eb      	bne.n	800336c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003394:	4b25      	ldr	r3, [pc, #148]	; (800342c <HAL_RCC_ClockConfig+0x1b8>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0307 	and.w	r3, r3, #7
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d20c      	bcs.n	80033bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a2:	4b22      	ldr	r3, [pc, #136]	; (800342c <HAL_RCC_ClockConfig+0x1b8>)
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	b2d2      	uxtb	r2, r2
 80033a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033aa:	4b20      	ldr	r3, [pc, #128]	; (800342c <HAL_RCC_ClockConfig+0x1b8>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d001      	beq.n	80033bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e032      	b.n	8003422 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d008      	beq.n	80033da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033c8:	4b19      	ldr	r3, [pc, #100]	; (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	4916      	ldr	r1, [pc, #88]	; (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0308 	and.w	r3, r3, #8
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d009      	beq.n	80033fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033e6:	4b12      	ldr	r3, [pc, #72]	; (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	490e      	ldr	r1, [pc, #56]	; (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033fa:	f000 f821 	bl	8003440 <HAL_RCC_GetSysClockFreq>
 80033fe:	4602      	mov	r2, r0
 8003400:	4b0b      	ldr	r3, [pc, #44]	; (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	091b      	lsrs	r3, r3, #4
 8003406:	f003 030f 	and.w	r3, r3, #15
 800340a:	490a      	ldr	r1, [pc, #40]	; (8003434 <HAL_RCC_ClockConfig+0x1c0>)
 800340c:	5ccb      	ldrb	r3, [r1, r3]
 800340e:	fa22 f303 	lsr.w	r3, r2, r3
 8003412:	4a09      	ldr	r2, [pc, #36]	; (8003438 <HAL_RCC_ClockConfig+0x1c4>)
 8003414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003416:	4b09      	ldr	r3, [pc, #36]	; (800343c <HAL_RCC_ClockConfig+0x1c8>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f7fe fbe8 	bl	8001bf0 <HAL_InitTick>

  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	40023c00 	.word	0x40023c00
 8003430:	40023800 	.word	0x40023800
 8003434:	0800b4e4 	.word	0x0800b4e4
 8003438:	20000000 	.word	0x20000000
 800343c:	20000004 	.word	0x20000004

08003440 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003444:	b094      	sub	sp, #80	; 0x50
 8003446:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003448:	2300      	movs	r3, #0
 800344a:	647b      	str	r3, [r7, #68]	; 0x44
 800344c:	2300      	movs	r3, #0
 800344e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003450:	2300      	movs	r3, #0
 8003452:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003454:	2300      	movs	r3, #0
 8003456:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003458:	4b79      	ldr	r3, [pc, #484]	; (8003640 <HAL_RCC_GetSysClockFreq+0x200>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f003 030c 	and.w	r3, r3, #12
 8003460:	2b08      	cmp	r3, #8
 8003462:	d00d      	beq.n	8003480 <HAL_RCC_GetSysClockFreq+0x40>
 8003464:	2b08      	cmp	r3, #8
 8003466:	f200 80e1 	bhi.w	800362c <HAL_RCC_GetSysClockFreq+0x1ec>
 800346a:	2b00      	cmp	r3, #0
 800346c:	d002      	beq.n	8003474 <HAL_RCC_GetSysClockFreq+0x34>
 800346e:	2b04      	cmp	r3, #4
 8003470:	d003      	beq.n	800347a <HAL_RCC_GetSysClockFreq+0x3a>
 8003472:	e0db      	b.n	800362c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003474:	4b73      	ldr	r3, [pc, #460]	; (8003644 <HAL_RCC_GetSysClockFreq+0x204>)
 8003476:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003478:	e0db      	b.n	8003632 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800347a:	4b73      	ldr	r3, [pc, #460]	; (8003648 <HAL_RCC_GetSysClockFreq+0x208>)
 800347c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800347e:	e0d8      	b.n	8003632 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003480:	4b6f      	ldr	r3, [pc, #444]	; (8003640 <HAL_RCC_GetSysClockFreq+0x200>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003488:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800348a:	4b6d      	ldr	r3, [pc, #436]	; (8003640 <HAL_RCC_GetSysClockFreq+0x200>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d063      	beq.n	800355e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003496:	4b6a      	ldr	r3, [pc, #424]	; (8003640 <HAL_RCC_GetSysClockFreq+0x200>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	099b      	lsrs	r3, r3, #6
 800349c:	2200      	movs	r2, #0
 800349e:	63bb      	str	r3, [r7, #56]	; 0x38
 80034a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80034a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034a8:	633b      	str	r3, [r7, #48]	; 0x30
 80034aa:	2300      	movs	r3, #0
 80034ac:	637b      	str	r3, [r7, #52]	; 0x34
 80034ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80034b2:	4622      	mov	r2, r4
 80034b4:	462b      	mov	r3, r5
 80034b6:	f04f 0000 	mov.w	r0, #0
 80034ba:	f04f 0100 	mov.w	r1, #0
 80034be:	0159      	lsls	r1, r3, #5
 80034c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034c4:	0150      	lsls	r0, r2, #5
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	4621      	mov	r1, r4
 80034cc:	1a51      	subs	r1, r2, r1
 80034ce:	6139      	str	r1, [r7, #16]
 80034d0:	4629      	mov	r1, r5
 80034d2:	eb63 0301 	sbc.w	r3, r3, r1
 80034d6:	617b      	str	r3, [r7, #20]
 80034d8:	f04f 0200 	mov.w	r2, #0
 80034dc:	f04f 0300 	mov.w	r3, #0
 80034e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034e4:	4659      	mov	r1, fp
 80034e6:	018b      	lsls	r3, r1, #6
 80034e8:	4651      	mov	r1, sl
 80034ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034ee:	4651      	mov	r1, sl
 80034f0:	018a      	lsls	r2, r1, #6
 80034f2:	4651      	mov	r1, sl
 80034f4:	ebb2 0801 	subs.w	r8, r2, r1
 80034f8:	4659      	mov	r1, fp
 80034fa:	eb63 0901 	sbc.w	r9, r3, r1
 80034fe:	f04f 0200 	mov.w	r2, #0
 8003502:	f04f 0300 	mov.w	r3, #0
 8003506:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800350a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800350e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003512:	4690      	mov	r8, r2
 8003514:	4699      	mov	r9, r3
 8003516:	4623      	mov	r3, r4
 8003518:	eb18 0303 	adds.w	r3, r8, r3
 800351c:	60bb      	str	r3, [r7, #8]
 800351e:	462b      	mov	r3, r5
 8003520:	eb49 0303 	adc.w	r3, r9, r3
 8003524:	60fb      	str	r3, [r7, #12]
 8003526:	f04f 0200 	mov.w	r2, #0
 800352a:	f04f 0300 	mov.w	r3, #0
 800352e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003532:	4629      	mov	r1, r5
 8003534:	024b      	lsls	r3, r1, #9
 8003536:	4621      	mov	r1, r4
 8003538:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800353c:	4621      	mov	r1, r4
 800353e:	024a      	lsls	r2, r1, #9
 8003540:	4610      	mov	r0, r2
 8003542:	4619      	mov	r1, r3
 8003544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003546:	2200      	movs	r2, #0
 8003548:	62bb      	str	r3, [r7, #40]	; 0x28
 800354a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800354c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003550:	f7fd fb9a 	bl	8000c88 <__aeabi_uldivmod>
 8003554:	4602      	mov	r2, r0
 8003556:	460b      	mov	r3, r1
 8003558:	4613      	mov	r3, r2
 800355a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800355c:	e058      	b.n	8003610 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800355e:	4b38      	ldr	r3, [pc, #224]	; (8003640 <HAL_RCC_GetSysClockFreq+0x200>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	099b      	lsrs	r3, r3, #6
 8003564:	2200      	movs	r2, #0
 8003566:	4618      	mov	r0, r3
 8003568:	4611      	mov	r1, r2
 800356a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800356e:	623b      	str	r3, [r7, #32]
 8003570:	2300      	movs	r3, #0
 8003572:	627b      	str	r3, [r7, #36]	; 0x24
 8003574:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003578:	4642      	mov	r2, r8
 800357a:	464b      	mov	r3, r9
 800357c:	f04f 0000 	mov.w	r0, #0
 8003580:	f04f 0100 	mov.w	r1, #0
 8003584:	0159      	lsls	r1, r3, #5
 8003586:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800358a:	0150      	lsls	r0, r2, #5
 800358c:	4602      	mov	r2, r0
 800358e:	460b      	mov	r3, r1
 8003590:	4641      	mov	r1, r8
 8003592:	ebb2 0a01 	subs.w	sl, r2, r1
 8003596:	4649      	mov	r1, r9
 8003598:	eb63 0b01 	sbc.w	fp, r3, r1
 800359c:	f04f 0200 	mov.w	r2, #0
 80035a0:	f04f 0300 	mov.w	r3, #0
 80035a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035b0:	ebb2 040a 	subs.w	r4, r2, sl
 80035b4:	eb63 050b 	sbc.w	r5, r3, fp
 80035b8:	f04f 0200 	mov.w	r2, #0
 80035bc:	f04f 0300 	mov.w	r3, #0
 80035c0:	00eb      	lsls	r3, r5, #3
 80035c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035c6:	00e2      	lsls	r2, r4, #3
 80035c8:	4614      	mov	r4, r2
 80035ca:	461d      	mov	r5, r3
 80035cc:	4643      	mov	r3, r8
 80035ce:	18e3      	adds	r3, r4, r3
 80035d0:	603b      	str	r3, [r7, #0]
 80035d2:	464b      	mov	r3, r9
 80035d4:	eb45 0303 	adc.w	r3, r5, r3
 80035d8:	607b      	str	r3, [r7, #4]
 80035da:	f04f 0200 	mov.w	r2, #0
 80035de:	f04f 0300 	mov.w	r3, #0
 80035e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035e6:	4629      	mov	r1, r5
 80035e8:	028b      	lsls	r3, r1, #10
 80035ea:	4621      	mov	r1, r4
 80035ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035f0:	4621      	mov	r1, r4
 80035f2:	028a      	lsls	r2, r1, #10
 80035f4:	4610      	mov	r0, r2
 80035f6:	4619      	mov	r1, r3
 80035f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035fa:	2200      	movs	r2, #0
 80035fc:	61bb      	str	r3, [r7, #24]
 80035fe:	61fa      	str	r2, [r7, #28]
 8003600:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003604:	f7fd fb40 	bl	8000c88 <__aeabi_uldivmod>
 8003608:	4602      	mov	r2, r0
 800360a:	460b      	mov	r3, r1
 800360c:	4613      	mov	r3, r2
 800360e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003610:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <HAL_RCC_GetSysClockFreq+0x200>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	0c1b      	lsrs	r3, r3, #16
 8003616:	f003 0303 	and.w	r3, r3, #3
 800361a:	3301      	adds	r3, #1
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003620:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003624:	fbb2 f3f3 	udiv	r3, r2, r3
 8003628:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800362a:	e002      	b.n	8003632 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800362c:	4b05      	ldr	r3, [pc, #20]	; (8003644 <HAL_RCC_GetSysClockFreq+0x204>)
 800362e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003630:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003632:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003634:	4618      	mov	r0, r3
 8003636:	3750      	adds	r7, #80	; 0x50
 8003638:	46bd      	mov	sp, r7
 800363a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800363e:	bf00      	nop
 8003640:	40023800 	.word	0x40023800
 8003644:	00f42400 	.word	0x00f42400
 8003648:	007a1200 	.word	0x007a1200

0800364c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003650:	4b03      	ldr	r3, [pc, #12]	; (8003660 <HAL_RCC_GetHCLKFreq+0x14>)
 8003652:	681b      	ldr	r3, [r3, #0]
}
 8003654:	4618      	mov	r0, r3
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	20000000 	.word	0x20000000

08003664 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003668:	f7ff fff0 	bl	800364c <HAL_RCC_GetHCLKFreq>
 800366c:	4602      	mov	r2, r0
 800366e:	4b05      	ldr	r3, [pc, #20]	; (8003684 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	0a9b      	lsrs	r3, r3, #10
 8003674:	f003 0307 	and.w	r3, r3, #7
 8003678:	4903      	ldr	r1, [pc, #12]	; (8003688 <HAL_RCC_GetPCLK1Freq+0x24>)
 800367a:	5ccb      	ldrb	r3, [r1, r3]
 800367c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003680:	4618      	mov	r0, r3
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40023800 	.word	0x40023800
 8003688:	0800b4f4 	.word	0x0800b4f4

0800368c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003690:	f7ff ffdc 	bl	800364c <HAL_RCC_GetHCLKFreq>
 8003694:	4602      	mov	r2, r0
 8003696:	4b05      	ldr	r3, [pc, #20]	; (80036ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	0b5b      	lsrs	r3, r3, #13
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	4903      	ldr	r1, [pc, #12]	; (80036b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036a2:	5ccb      	ldrb	r3, [r1, r3]
 80036a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	40023800 	.word	0x40023800
 80036b0:	0800b4f4 	.word	0x0800b4f4

080036b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e03f      	b.n	8003746 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d106      	bne.n	80036e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7fd fe8a 	bl	80013f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2224      	movs	r2, #36	; 0x24
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f001 f86d 	bl	80047d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	691a      	ldr	r2, [r3, #16]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800370c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	695a      	ldr	r2, [r3, #20]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800371c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68da      	ldr	r2, [r3, #12]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800372c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2220      	movs	r2, #32
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2220      	movs	r2, #32
 8003740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b082      	sub	sp, #8
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d101      	bne.n	8003760 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e021      	b.n	80037a4 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2224      	movs	r2, #36	; 0x24
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003776:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f7fe f841 	bl	8001800 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3708      	adds	r7, #8
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b08a      	sub	sp, #40	; 0x28
 80037b0:	af02      	add	r7, sp, #8
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	603b      	str	r3, [r7, #0]
 80037b8:	4613      	mov	r3, r2
 80037ba:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037bc:	2300      	movs	r3, #0
 80037be:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b20      	cmp	r3, #32
 80037ca:	d17c      	bne.n	80038c6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d002      	beq.n	80037d8 <HAL_UART_Transmit+0x2c>
 80037d2:	88fb      	ldrh	r3, [r7, #6]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e075      	b.n	80038c8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d101      	bne.n	80037ea <HAL_UART_Transmit+0x3e>
 80037e6:	2302      	movs	r3, #2
 80037e8:	e06e      	b.n	80038c8 <HAL_UART_Transmit+0x11c>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2221      	movs	r2, #33	; 0x21
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003800:	f7fe fa3a 	bl	8001c78 <HAL_GetTick>
 8003804:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	88fa      	ldrh	r2, [r7, #6]
 800380a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	88fa      	ldrh	r2, [r7, #6]
 8003810:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800381a:	d108      	bne.n	800382e <HAL_UART_Transmit+0x82>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d104      	bne.n	800382e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003824:	2300      	movs	r3, #0
 8003826:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	61bb      	str	r3, [r7, #24]
 800382c:	e003      	b.n	8003836 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003832:	2300      	movs	r3, #0
 8003834:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800383e:	e02a      	b.n	8003896 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	2200      	movs	r2, #0
 8003848:	2180      	movs	r1, #128	; 0x80
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 fcf9 	bl	8004242 <UART_WaitOnFlagUntilTimeout>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e036      	b.n	80038c8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10b      	bne.n	8003878 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	881b      	ldrh	r3, [r3, #0]
 8003864:	461a      	mov	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800386e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	3302      	adds	r3, #2
 8003874:	61bb      	str	r3, [r7, #24]
 8003876:	e007      	b.n	8003888 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	781a      	ldrb	r2, [r3, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	3301      	adds	r3, #1
 8003886:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800388c:	b29b      	uxth	r3, r3
 800388e:	3b01      	subs	r3, #1
 8003890:	b29a      	uxth	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800389a:	b29b      	uxth	r3, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1cf      	bne.n	8003840 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	9300      	str	r3, [sp, #0]
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	2200      	movs	r2, #0
 80038a8:	2140      	movs	r1, #64	; 0x40
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f000 fcc9 	bl	8004242 <UART_WaitOnFlagUntilTimeout>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e006      	b.n	80038c8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2220      	movs	r2, #32
 80038be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80038c2:	2300      	movs	r3, #0
 80038c4:	e000      	b.n	80038c8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80038c6:	2302      	movs	r3, #2
  }
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3720      	adds	r7, #32
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b08c      	sub	sp, #48	; 0x30
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	4613      	mov	r3, r2
 80038dc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b20      	cmp	r3, #32
 80038e8:	d165      	bne.n	80039b6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d002      	beq.n	80038f6 <HAL_UART_Transmit_DMA+0x26>
 80038f0:	88fb      	ldrh	r3, [r7, #6]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e05e      	b.n	80039b8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003900:	2b01      	cmp	r3, #1
 8003902:	d101      	bne.n	8003908 <HAL_UART_Transmit_DMA+0x38>
 8003904:	2302      	movs	r3, #2
 8003906:	e057      	b.n	80039b8 <HAL_UART_Transmit_DMA+0xe8>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003910:	68ba      	ldr	r2, [r7, #8]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	88fa      	ldrh	r2, [r7, #6]
 800391a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	88fa      	ldrh	r2, [r7, #6]
 8003920:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2221      	movs	r2, #33	; 0x21
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003934:	4a22      	ldr	r2, [pc, #136]	; (80039c0 <HAL_UART_Transmit_DMA+0xf0>)
 8003936:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800393c:	4a21      	ldr	r2, [pc, #132]	; (80039c4 <HAL_UART_Transmit_DMA+0xf4>)
 800393e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003944:	4a20      	ldr	r2, [pc, #128]	; (80039c8 <HAL_UART_Transmit_DMA+0xf8>)
 8003946:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800394c:	2200      	movs	r2, #0
 800394e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8003950:	f107 0308 	add.w	r3, r7, #8
 8003954:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800395a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800395c:	6819      	ldr	r1, [r3, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	3304      	adds	r3, #4
 8003964:	461a      	mov	r2, r3
 8003966:	88fb      	ldrh	r3, [r7, #6]
 8003968:	f7fe fc06 	bl	8002178 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003974:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	3314      	adds	r3, #20
 8003984:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	e853 3f00 	ldrex	r3, [r3]
 800398c:	617b      	str	r3, [r7, #20]
   return(result);
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003994:	62bb      	str	r3, [r7, #40]	; 0x28
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	3314      	adds	r3, #20
 800399c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800399e:	627a      	str	r2, [r7, #36]	; 0x24
 80039a0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a2:	6a39      	ldr	r1, [r7, #32]
 80039a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039a6:	e841 2300 	strex	r3, r2, [r1]
 80039aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1e5      	bne.n	800397e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80039b2:	2300      	movs	r3, #0
 80039b4:	e000      	b.n	80039b8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80039b6:	2302      	movs	r3, #2
  }
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3730      	adds	r7, #48	; 0x30
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	08003f9d 	.word	0x08003f9d
 80039c4:	08004037 	.word	0x08004037
 80039c8:	080041af 	.word	0x080041af

080039cc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	4613      	mov	r3, r2
 80039d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b20      	cmp	r3, #32
 80039e4:	d11d      	bne.n	8003a22 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d002      	beq.n	80039f2 <HAL_UART_Receive_DMA+0x26>
 80039ec:	88fb      	ldrh	r3, [r7, #6]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e016      	b.n	8003a24 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d101      	bne.n	8003a04 <HAL_UART_Receive_DMA+0x38>
 8003a00:	2302      	movs	r3, #2
 8003a02:	e00f      	b.n	8003a24 <HAL_UART_Receive_DMA+0x58>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003a12:	88fb      	ldrh	r3, [r7, #6]
 8003a14:	461a      	mov	r2, r3
 8003a16:	68b9      	ldr	r1, [r7, #8]
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 fc81 	bl	8004320 <UART_Start_Receive_DMA>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	e000      	b.n	8003a24 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003a22:	2302      	movs	r3, #2
  }
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b0ba      	sub	sp, #232	; 0xe8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003a52:	2300      	movs	r3, #0
 8003a54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a62:	f003 030f 	and.w	r3, r3, #15
 8003a66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003a6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10f      	bne.n	8003a92 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a76:	f003 0320 	and.w	r3, r3, #32
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d009      	beq.n	8003a92 <HAL_UART_IRQHandler+0x66>
 8003a7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a82:	f003 0320 	and.w	r3, r3, #32
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 fde9 	bl	8004662 <UART_Receive_IT>
      return;
 8003a90:	e256      	b.n	8003f40 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f000 80de 	beq.w	8003c58 <HAL_UART_IRQHandler+0x22c>
 8003a9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d106      	bne.n	8003ab6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f000 80d1 	beq.w	8003c58 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00b      	beq.n	8003ada <HAL_UART_IRQHandler+0xae>
 8003ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d005      	beq.n	8003ada <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad2:	f043 0201 	orr.w	r2, r3, #1
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ade:	f003 0304 	and.w	r3, r3, #4
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00b      	beq.n	8003afe <HAL_UART_IRQHandler+0xd2>
 8003ae6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d005      	beq.n	8003afe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	f043 0202 	orr.w	r2, r3, #2
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00b      	beq.n	8003b22 <HAL_UART_IRQHandler+0xf6>
 8003b0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d005      	beq.n	8003b22 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	f043 0204 	orr.w	r2, r3, #4
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d011      	beq.n	8003b52 <HAL_UART_IRQHandler+0x126>
 8003b2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b32:	f003 0320 	and.w	r3, r3, #32
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d105      	bne.n	8003b46 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d005      	beq.n	8003b52 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	f043 0208 	orr.w	r2, r3, #8
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 81ed 	beq.w	8003f36 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b60:	f003 0320 	and.w	r3, r3, #32
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d008      	beq.n	8003b7a <HAL_UART_IRQHandler+0x14e>
 8003b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b6c:	f003 0320 	and.w	r3, r3, #32
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d002      	beq.n	8003b7a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 fd74 	bl	8004662 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b84:	2b40      	cmp	r3, #64	; 0x40
 8003b86:	bf0c      	ite	eq
 8003b88:	2301      	moveq	r3, #1
 8003b8a:	2300      	movne	r3, #0
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	f003 0308 	and.w	r3, r3, #8
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d103      	bne.n	8003ba6 <HAL_UART_IRQHandler+0x17a>
 8003b9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d04f      	beq.n	8003c46 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 fc7c 	bl	80044a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb6:	2b40      	cmp	r3, #64	; 0x40
 8003bb8:	d141      	bne.n	8003c3e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	3314      	adds	r3, #20
 8003bc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bc8:	e853 3f00 	ldrex	r3, [r3]
 8003bcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003bd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	3314      	adds	r3, #20
 8003be2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003be6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003bea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003bf2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003bf6:	e841 2300 	strex	r3, r2, [r1]
 8003bfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003bfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1d9      	bne.n	8003bba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d013      	beq.n	8003c36 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c12:	4a7d      	ldr	r2, [pc, #500]	; (8003e08 <HAL_UART_IRQHandler+0x3dc>)
 8003c14:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7fe fb74 	bl	8002308 <HAL_DMA_Abort_IT>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d016      	beq.n	8003c54 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c30:	4610      	mov	r0, r2
 8003c32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c34:	e00e      	b.n	8003c54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f99a 	bl	8003f70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c3c:	e00a      	b.n	8003c54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f996 	bl	8003f70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c44:	e006      	b.n	8003c54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f992 	bl	8003f70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003c52:	e170      	b.n	8003f36 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c54:	bf00      	nop
    return;
 8003c56:	e16e      	b.n	8003f36 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	f040 814a 	bne.w	8003ef6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c66:	f003 0310 	and.w	r3, r3, #16
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 8143 	beq.w	8003ef6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c74:	f003 0310 	and.w	r3, r3, #16
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 813c 	beq.w	8003ef6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c7e:	2300      	movs	r3, #0
 8003c80:	60bb      	str	r3, [r7, #8]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	60bb      	str	r3, [r7, #8]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	60bb      	str	r3, [r7, #8]
 8003c92:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9e:	2b40      	cmp	r3, #64	; 0x40
 8003ca0:	f040 80b4 	bne.w	8003e0c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003cb0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 8140 	beq.w	8003f3a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	f080 8139 	bcs.w	8003f3a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cda:	f000 8088 	beq.w	8003dee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	330c      	adds	r3, #12
 8003ce4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cec:	e853 3f00 	ldrex	r3, [r3]
 8003cf0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003cf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	330c      	adds	r3, #12
 8003d06:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003d0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d12:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d16:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d1a:	e841 2300 	strex	r3, r2, [r1]
 8003d1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1d9      	bne.n	8003cde <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	3314      	adds	r3, #20
 8003d30:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d34:	e853 3f00 	ldrex	r3, [r3]
 8003d38:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d3c:	f023 0301 	bic.w	r3, r3, #1
 8003d40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3314      	adds	r3, #20
 8003d4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d4e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d52:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d54:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d56:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d5a:	e841 2300 	strex	r3, r2, [r1]
 8003d5e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1e1      	bne.n	8003d2a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	3314      	adds	r3, #20
 8003d6c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d70:	e853 3f00 	ldrex	r3, [r3]
 8003d74:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	3314      	adds	r3, #20
 8003d86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d8c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d90:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d92:	e841 2300 	strex	r3, r2, [r1]
 8003d96:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1e3      	bne.n	8003d66 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2220      	movs	r2, #32
 8003da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	330c      	adds	r3, #12
 8003db2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003db6:	e853 3f00 	ldrex	r3, [r3]
 8003dba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003dbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dbe:	f023 0310 	bic.w	r3, r3, #16
 8003dc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	330c      	adds	r3, #12
 8003dcc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003dd0:	65ba      	str	r2, [r7, #88]	; 0x58
 8003dd2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003dd6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003dd8:	e841 2300 	strex	r3, r2, [r1]
 8003ddc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003dde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1e3      	bne.n	8003dac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7fe fa1d 	bl	8002228 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f8c0 	bl	8003f84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e04:	e099      	b.n	8003f3a <HAL_UART_IRQHandler+0x50e>
 8003e06:	bf00      	nop
 8003e08:	0800456b 	.word	0x0800456b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 808b 	beq.w	8003f3e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003e28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 8086 	beq.w	8003f3e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	330c      	adds	r3, #12
 8003e38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e3c:	e853 3f00 	ldrex	r3, [r3]
 8003e40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	330c      	adds	r3, #12
 8003e52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003e56:	647a      	str	r2, [r7, #68]	; 0x44
 8003e58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e5e:	e841 2300 	strex	r3, r2, [r1]
 8003e62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1e3      	bne.n	8003e32 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	3314      	adds	r3, #20
 8003e70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e74:	e853 3f00 	ldrex	r3, [r3]
 8003e78:	623b      	str	r3, [r7, #32]
   return(result);
 8003e7a:	6a3b      	ldr	r3, [r7, #32]
 8003e7c:	f023 0301 	bic.w	r3, r3, #1
 8003e80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	3314      	adds	r3, #20
 8003e8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e8e:	633a      	str	r2, [r7, #48]	; 0x30
 8003e90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e96:	e841 2300 	strex	r3, r2, [r1]
 8003e9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1e3      	bne.n	8003e6a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	330c      	adds	r3, #12
 8003eb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	e853 3f00 	ldrex	r3, [r3]
 8003ebe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f023 0310 	bic.w	r3, r3, #16
 8003ec6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	330c      	adds	r3, #12
 8003ed0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003ed4:	61fa      	str	r2, [r7, #28]
 8003ed6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed8:	69b9      	ldr	r1, [r7, #24]
 8003eda:	69fa      	ldr	r2, [r7, #28]
 8003edc:	e841 2300 	strex	r3, r2, [r1]
 8003ee0:	617b      	str	r3, [r7, #20]
   return(result);
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1e3      	bne.n	8003eb0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ee8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003eec:	4619      	mov	r1, r3
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f848 	bl	8003f84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ef4:	e023      	b.n	8003f3e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d009      	beq.n	8003f16 <HAL_UART_IRQHandler+0x4ea>
 8003f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 fb3f 	bl	8004592 <UART_Transmit_IT>
    return;
 8003f14:	e014      	b.n	8003f40 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00e      	beq.n	8003f40 <HAL_UART_IRQHandler+0x514>
 8003f22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d008      	beq.n	8003f40 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 fb7f 	bl	8004632 <UART_EndTransmit_IT>
    return;
 8003f34:	e004      	b.n	8003f40 <HAL_UART_IRQHandler+0x514>
    return;
 8003f36:	bf00      	nop
 8003f38:	e002      	b.n	8003f40 <HAL_UART_IRQHandler+0x514>
      return;
 8003f3a:	bf00      	nop
 8003f3c:	e000      	b.n	8003f40 <HAL_UART_IRQHandler+0x514>
      return;
 8003f3e:	bf00      	nop
  }
}
 8003f40:	37e8      	adds	r7, #232	; 0xe8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop

08003f48 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b090      	sub	sp, #64	; 0x40
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d137      	bne.n	8004028 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fba:	2200      	movs	r2, #0
 8003fbc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	3314      	adds	r3, #20
 8003fc4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	e853 3f00 	ldrex	r3, [r3]
 8003fcc:	623b      	str	r3, [r7, #32]
   return(result);
 8003fce:	6a3b      	ldr	r3, [r7, #32]
 8003fd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	3314      	adds	r3, #20
 8003fdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fde:	633a      	str	r2, [r7, #48]	; 0x30
 8003fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fe6:	e841 2300 	strex	r3, r2, [r1]
 8003fea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1e5      	bne.n	8003fbe <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	330c      	adds	r3, #12
 8003ff8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	e853 3f00 	ldrex	r3, [r3]
 8004000:	60fb      	str	r3, [r7, #12]
   return(result);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004008:	637b      	str	r3, [r7, #52]	; 0x34
 800400a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	330c      	adds	r3, #12
 8004010:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004012:	61fa      	str	r2, [r7, #28]
 8004014:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004016:	69b9      	ldr	r1, [r7, #24]
 8004018:	69fa      	ldr	r2, [r7, #28]
 800401a:	e841 2300 	strex	r3, r2, [r1]
 800401e:	617b      	str	r3, [r7, #20]
   return(result);
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1e5      	bne.n	8003ff2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004026:	e002      	b.n	800402e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004028:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800402a:	f001 ffad 	bl	8005f88 <HAL_UART_TxCpltCallback>
}
 800402e:	bf00      	nop
 8004030:	3740      	adds	r7, #64	; 0x40
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b084      	sub	sp, #16
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004042:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f7ff ff7f 	bl	8003f48 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800404a:	bf00      	nop
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b09c      	sub	sp, #112	; 0x70
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800406a:	2b00      	cmp	r3, #0
 800406c:	d172      	bne.n	8004154 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800406e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004070:	2200      	movs	r2, #0
 8004072:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	330c      	adds	r3, #12
 800407a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800407e:	e853 3f00 	ldrex	r3, [r3]
 8004082:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004084:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004086:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800408a:	66bb      	str	r3, [r7, #104]	; 0x68
 800408c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	330c      	adds	r3, #12
 8004092:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004094:	65ba      	str	r2, [r7, #88]	; 0x58
 8004096:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004098:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800409a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800409c:	e841 2300 	strex	r3, r2, [r1]
 80040a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80040a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1e5      	bne.n	8004074 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	3314      	adds	r3, #20
 80040ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b2:	e853 3f00 	ldrex	r3, [r3]
 80040b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ba:	f023 0301 	bic.w	r3, r3, #1
 80040be:	667b      	str	r3, [r7, #100]	; 0x64
 80040c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	3314      	adds	r3, #20
 80040c6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80040c8:	647a      	str	r2, [r7, #68]	; 0x44
 80040ca:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040d0:	e841 2300 	strex	r3, r2, [r1]
 80040d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1e5      	bne.n	80040a8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	3314      	adds	r3, #20
 80040e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e6:	e853 3f00 	ldrex	r3, [r3]
 80040ea:	623b      	str	r3, [r7, #32]
   return(result);
 80040ec:	6a3b      	ldr	r3, [r7, #32]
 80040ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040f2:	663b      	str	r3, [r7, #96]	; 0x60
 80040f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	3314      	adds	r3, #20
 80040fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80040fc:	633a      	str	r2, [r7, #48]	; 0x30
 80040fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004100:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004102:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004104:	e841 2300 	strex	r3, r2, [r1]
 8004108:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800410a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1e5      	bne.n	80040dc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004112:	2220      	movs	r2, #32
 8004114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800411a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411c:	2b01      	cmp	r3, #1
 800411e:	d119      	bne.n	8004154 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	330c      	adds	r3, #12
 8004126:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	e853 3f00 	ldrex	r3, [r3]
 800412e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f023 0310 	bic.w	r3, r3, #16
 8004136:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	330c      	adds	r3, #12
 800413e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004140:	61fa      	str	r2, [r7, #28]
 8004142:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004144:	69b9      	ldr	r1, [r7, #24]
 8004146:	69fa      	ldr	r2, [r7, #28]
 8004148:	e841 2300 	strex	r3, r2, [r1]
 800414c:	617b      	str	r3, [r7, #20]
   return(result);
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1e5      	bne.n	8004120 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004158:	2b01      	cmp	r3, #1
 800415a:	d106      	bne.n	800416a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800415c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800415e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004160:	4619      	mov	r1, r3
 8004162:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004164:	f7ff ff0e 	bl	8003f84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004168:	e002      	b.n	8004170 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800416a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800416c:	f001 ff2e 	bl	8005fcc <HAL_UART_RxCpltCallback>
}
 8004170:	bf00      	nop
 8004172:	3770      	adds	r7, #112	; 0x70
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004184:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418a:	2b01      	cmp	r3, #1
 800418c:	d108      	bne.n	80041a0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004192:	085b      	lsrs	r3, r3, #1
 8004194:	b29b      	uxth	r3, r3
 8004196:	4619      	mov	r1, r3
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f7ff fef3 	bl	8003f84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800419e:	e002      	b.n	80041a6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f7ff fedb 	bl	8003f5c <HAL_UART_RxHalfCpltCallback>
}
 80041a6:	bf00      	nop
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b084      	sub	sp, #16
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80041b6:	2300      	movs	r3, #0
 80041b8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041be:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ca:	2b80      	cmp	r3, #128	; 0x80
 80041cc:	bf0c      	ite	eq
 80041ce:	2301      	moveq	r3, #1
 80041d0:	2300      	movne	r3, #0
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b21      	cmp	r3, #33	; 0x21
 80041e0:	d108      	bne.n	80041f4 <UART_DMAError+0x46>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d005      	beq.n	80041f4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	2200      	movs	r2, #0
 80041ec:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80041ee:	68b8      	ldr	r0, [r7, #8]
 80041f0:	f000 f930 	bl	8004454 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fe:	2b40      	cmp	r3, #64	; 0x40
 8004200:	bf0c      	ite	eq
 8004202:	2301      	moveq	r3, #1
 8004204:	2300      	movne	r3, #0
 8004206:	b2db      	uxtb	r3, r3
 8004208:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b22      	cmp	r3, #34	; 0x22
 8004214:	d108      	bne.n	8004228 <UART_DMAError+0x7a>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d005      	beq.n	8004228 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	2200      	movs	r2, #0
 8004220:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004222:	68b8      	ldr	r0, [r7, #8]
 8004224:	f000 f93e 	bl	80044a4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	f043 0210 	orr.w	r2, r3, #16
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004234:	68b8      	ldr	r0, [r7, #8]
 8004236:	f7ff fe9b 	bl	8003f70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800423a:	bf00      	nop
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b090      	sub	sp, #64	; 0x40
 8004246:	af00      	add	r7, sp, #0
 8004248:	60f8      	str	r0, [r7, #12]
 800424a:	60b9      	str	r1, [r7, #8]
 800424c:	603b      	str	r3, [r7, #0]
 800424e:	4613      	mov	r3, r2
 8004250:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004252:	e050      	b.n	80042f6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004254:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425a:	d04c      	beq.n	80042f6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800425c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800425e:	2b00      	cmp	r3, #0
 8004260:	d007      	beq.n	8004272 <UART_WaitOnFlagUntilTimeout+0x30>
 8004262:	f7fd fd09 	bl	8001c78 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800426e:	429a      	cmp	r2, r3
 8004270:	d241      	bcs.n	80042f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	330c      	adds	r3, #12
 8004278:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427c:	e853 3f00 	ldrex	r3, [r3]
 8004280:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004284:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004288:	63fb      	str	r3, [r7, #60]	; 0x3c
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	330c      	adds	r3, #12
 8004290:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004292:	637a      	str	r2, [r7, #52]	; 0x34
 8004294:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004296:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004298:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800429a:	e841 2300 	strex	r3, r2, [r1]
 800429e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80042a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1e5      	bne.n	8004272 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	3314      	adds	r3, #20
 80042ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	e853 3f00 	ldrex	r3, [r3]
 80042b4:	613b      	str	r3, [r7, #16]
   return(result);
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f023 0301 	bic.w	r3, r3, #1
 80042bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	3314      	adds	r3, #20
 80042c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042c6:	623a      	str	r2, [r7, #32]
 80042c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ca:	69f9      	ldr	r1, [r7, #28]
 80042cc:	6a3a      	ldr	r2, [r7, #32]
 80042ce:	e841 2300 	strex	r3, r2, [r1]
 80042d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1e5      	bne.n	80042a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2220      	movs	r2, #32
 80042de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2220      	movs	r2, #32
 80042e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e00f      	b.n	8004316 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	4013      	ands	r3, r2
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	429a      	cmp	r2, r3
 8004304:	bf0c      	ite	eq
 8004306:	2301      	moveq	r3, #1
 8004308:	2300      	movne	r3, #0
 800430a:	b2db      	uxtb	r3, r3
 800430c:	461a      	mov	r2, r3
 800430e:	79fb      	ldrb	r3, [r7, #7]
 8004310:	429a      	cmp	r2, r3
 8004312:	d09f      	beq.n	8004254 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3740      	adds	r7, #64	; 0x40
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
	...

08004320 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b098      	sub	sp, #96	; 0x60
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	4613      	mov	r3, r2
 800432c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	88fa      	ldrh	r2, [r7, #6]
 8004338:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2222      	movs	r2, #34	; 0x22
 8004344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434c:	4a3e      	ldr	r2, [pc, #248]	; (8004448 <UART_Start_Receive_DMA+0x128>)
 800434e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004354:	4a3d      	ldr	r2, [pc, #244]	; (800444c <UART_Start_Receive_DMA+0x12c>)
 8004356:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435c:	4a3c      	ldr	r2, [pc, #240]	; (8004450 <UART_Start_Receive_DMA+0x130>)
 800435e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004364:	2200      	movs	r2, #0
 8004366:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004368:	f107 0308 	add.w	r3, r7, #8
 800436c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	3304      	adds	r3, #4
 8004378:	4619      	mov	r1, r3
 800437a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	88fb      	ldrh	r3, [r7, #6]
 8004380:	f7fd fefa 	bl	8002178 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004384:	2300      	movs	r3, #0
 8004386:	613b      	str	r3, [r7, #16]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	613b      	str	r3, [r7, #16]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	613b      	str	r3, [r7, #16]
 8004398:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	330c      	adds	r3, #12
 80043a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043ac:	e853 3f00 	ldrex	r3, [r3]
 80043b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80043b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	330c      	adds	r3, #12
 80043c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043c2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80043c4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80043c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043ca:	e841 2300 	strex	r3, r2, [r1]
 80043ce:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80043d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1e5      	bne.n	80043a2 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	3314      	adds	r3, #20
 80043dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e0:	e853 3f00 	ldrex	r3, [r3]
 80043e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e8:	f043 0301 	orr.w	r3, r3, #1
 80043ec:	657b      	str	r3, [r7, #84]	; 0x54
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	3314      	adds	r3, #20
 80043f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80043f6:	63ba      	str	r2, [r7, #56]	; 0x38
 80043f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80043fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043fe:	e841 2300 	strex	r3, r2, [r1]
 8004402:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1e5      	bne.n	80043d6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	3314      	adds	r3, #20
 8004410:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	e853 3f00 	ldrex	r3, [r3]
 8004418:	617b      	str	r3, [r7, #20]
   return(result);
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004420:	653b      	str	r3, [r7, #80]	; 0x50
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	3314      	adds	r3, #20
 8004428:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800442a:	627a      	str	r2, [r7, #36]	; 0x24
 800442c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442e:	6a39      	ldr	r1, [r7, #32]
 8004430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004432:	e841 2300 	strex	r3, r2, [r1]
 8004436:	61fb      	str	r3, [r7, #28]
   return(result);
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1e5      	bne.n	800440a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3760      	adds	r7, #96	; 0x60
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	08004053 	.word	0x08004053
 800444c:	08004179 	.word	0x08004179
 8004450:	080041af 	.word	0x080041af

08004454 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004454:	b480      	push	{r7}
 8004456:	b089      	sub	sp, #36	; 0x24
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	330c      	adds	r3, #12
 8004462:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	e853 3f00 	ldrex	r3, [r3]
 800446a:	60bb      	str	r3, [r7, #8]
   return(result);
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004472:	61fb      	str	r3, [r7, #28]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	330c      	adds	r3, #12
 800447a:	69fa      	ldr	r2, [r7, #28]
 800447c:	61ba      	str	r2, [r7, #24]
 800447e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004480:	6979      	ldr	r1, [r7, #20]
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	e841 2300 	strex	r3, r2, [r1]
 8004488:	613b      	str	r3, [r7, #16]
   return(result);
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1e5      	bne.n	800445c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2220      	movs	r2, #32
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004498:	bf00      	nop
 800449a:	3724      	adds	r7, #36	; 0x24
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b095      	sub	sp, #84	; 0x54
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	330c      	adds	r3, #12
 80044b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044b6:	e853 3f00 	ldrex	r3, [r3]
 80044ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	330c      	adds	r3, #12
 80044ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044cc:	643a      	str	r2, [r7, #64]	; 0x40
 80044ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044d4:	e841 2300 	strex	r3, r2, [r1]
 80044d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1e5      	bne.n	80044ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	3314      	adds	r3, #20
 80044e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e8:	6a3b      	ldr	r3, [r7, #32]
 80044ea:	e853 3f00 	ldrex	r3, [r3]
 80044ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	f023 0301 	bic.w	r3, r3, #1
 80044f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	3314      	adds	r3, #20
 80044fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004500:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004502:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004504:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004506:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004508:	e841 2300 	strex	r3, r2, [r1]
 800450c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1e5      	bne.n	80044e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004518:	2b01      	cmp	r3, #1
 800451a:	d119      	bne.n	8004550 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	330c      	adds	r3, #12
 8004522:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	e853 3f00 	ldrex	r3, [r3]
 800452a:	60bb      	str	r3, [r7, #8]
   return(result);
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	f023 0310 	bic.w	r3, r3, #16
 8004532:	647b      	str	r3, [r7, #68]	; 0x44
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	330c      	adds	r3, #12
 800453a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800453c:	61ba      	str	r2, [r7, #24]
 800453e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004540:	6979      	ldr	r1, [r7, #20]
 8004542:	69ba      	ldr	r2, [r7, #24]
 8004544:	e841 2300 	strex	r3, r2, [r1]
 8004548:	613b      	str	r3, [r7, #16]
   return(result);
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1e5      	bne.n	800451c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2220      	movs	r2, #32
 8004554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800455e:	bf00      	nop
 8004560:	3754      	adds	r7, #84	; 0x54
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b084      	sub	sp, #16
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004576:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f7ff fcf3 	bl	8003f70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800458a:	bf00      	nop
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004592:	b480      	push	{r7}
 8004594:	b085      	sub	sp, #20
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b21      	cmp	r3, #33	; 0x21
 80045a4:	d13e      	bne.n	8004624 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ae:	d114      	bne.n	80045da <UART_Transmit_IT+0x48>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d110      	bne.n	80045da <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a1b      	ldr	r3, [r3, #32]
 80045bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	881b      	ldrh	r3, [r3, #0]
 80045c2:	461a      	mov	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	1c9a      	adds	r2, r3, #2
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	621a      	str	r2, [r3, #32]
 80045d8:	e008      	b.n	80045ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	1c59      	adds	r1, r3, #1
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6211      	str	r1, [r2, #32]
 80045e4:	781a      	ldrb	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	3b01      	subs	r3, #1
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	4619      	mov	r1, r3
 80045fa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10f      	bne.n	8004620 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68da      	ldr	r2, [r3, #12]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800460e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68da      	ldr	r2, [r3, #12]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800461e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004620:	2300      	movs	r3, #0
 8004622:	e000      	b.n	8004626 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004624:	2302      	movs	r3, #2
  }
}
 8004626:	4618      	mov	r0, r3
 8004628:	3714      	adds	r7, #20
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b082      	sub	sp, #8
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68da      	ldr	r2, [r3, #12]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004648:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2220      	movs	r2, #32
 800464e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f001 fc98 	bl	8005f88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3708      	adds	r7, #8
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b08c      	sub	sp, #48	; 0x30
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b22      	cmp	r3, #34	; 0x22
 8004674:	f040 80ab 	bne.w	80047ce <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004680:	d117      	bne.n	80046b2 <UART_Receive_IT+0x50>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d113      	bne.n	80046b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800468a:	2300      	movs	r3, #0
 800468c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004692:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	b29b      	uxth	r3, r3
 800469c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046aa:	1c9a      	adds	r2, r3, #2
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	629a      	str	r2, [r3, #40]	; 0x28
 80046b0:	e026      	b.n	8004700 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80046b8:	2300      	movs	r3, #0
 80046ba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c4:	d007      	beq.n	80046d6 <UART_Receive_IT+0x74>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10a      	bne.n	80046e4 <UART_Receive_IT+0x82>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d106      	bne.n	80046e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e0:	701a      	strb	r2, [r3, #0]
 80046e2:	e008      	b.n	80046f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046f0:	b2da      	uxtb	r2, r3
 80046f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fa:	1c5a      	adds	r2, r3, #1
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004704:	b29b      	uxth	r3, r3
 8004706:	3b01      	subs	r3, #1
 8004708:	b29b      	uxth	r3, r3
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	4619      	mov	r1, r3
 800470e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004710:	2b00      	cmp	r3, #0
 8004712:	d15a      	bne.n	80047ca <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 0220 	bic.w	r2, r2, #32
 8004722:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68da      	ldr	r2, [r3, #12]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004732:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	695a      	ldr	r2, [r3, #20]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 0201 	bic.w	r2, r2, #1
 8004742:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2220      	movs	r2, #32
 8004748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004750:	2b01      	cmp	r3, #1
 8004752:	d135      	bne.n	80047c0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	330c      	adds	r3, #12
 8004760:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	e853 3f00 	ldrex	r3, [r3]
 8004768:	613b      	str	r3, [r7, #16]
   return(result);
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	f023 0310 	bic.w	r3, r3, #16
 8004770:	627b      	str	r3, [r7, #36]	; 0x24
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	330c      	adds	r3, #12
 8004778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800477a:	623a      	str	r2, [r7, #32]
 800477c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477e:	69f9      	ldr	r1, [r7, #28]
 8004780:	6a3a      	ldr	r2, [r7, #32]
 8004782:	e841 2300 	strex	r3, r2, [r1]
 8004786:	61bb      	str	r3, [r7, #24]
   return(result);
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1e5      	bne.n	800475a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0310 	and.w	r3, r3, #16
 8004798:	2b10      	cmp	r3, #16
 800479a:	d10a      	bne.n	80047b2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800479c:	2300      	movs	r3, #0
 800479e:	60fb      	str	r3, [r7, #12]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	60fb      	str	r3, [r7, #12]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	60fb      	str	r3, [r7, #12]
 80047b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047b6:	4619      	mov	r1, r3
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7ff fbe3 	bl	8003f84 <HAL_UARTEx_RxEventCallback>
 80047be:	e002      	b.n	80047c6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f001 fc03 	bl	8005fcc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80047c6:	2300      	movs	r3, #0
 80047c8:	e002      	b.n	80047d0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80047ca:	2300      	movs	r3, #0
 80047cc:	e000      	b.n	80047d0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80047ce:	2302      	movs	r3, #2
  }
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3730      	adds	r7, #48	; 0x30
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047dc:	b0c0      	sub	sp, #256	; 0x100
 80047de:	af00      	add	r7, sp, #0
 80047e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80047f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f4:	68d9      	ldr	r1, [r3, #12]
 80047f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	ea40 0301 	orr.w	r3, r0, r1
 8004800:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004806:	689a      	ldr	r2, [r3, #8]
 8004808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	431a      	orrs	r2, r3
 8004810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	431a      	orrs	r2, r3
 8004818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800481c:	69db      	ldr	r3, [r3, #28]
 800481e:	4313      	orrs	r3, r2
 8004820:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004830:	f021 010c 	bic.w	r1, r1, #12
 8004834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800483e:	430b      	orrs	r3, r1
 8004840:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800484e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004852:	6999      	ldr	r1, [r3, #24]
 8004854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	ea40 0301 	orr.w	r3, r0, r1
 800485e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	4b8f      	ldr	r3, [pc, #572]	; (8004aa4 <UART_SetConfig+0x2cc>)
 8004868:	429a      	cmp	r2, r3
 800486a:	d005      	beq.n	8004878 <UART_SetConfig+0xa0>
 800486c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	4b8d      	ldr	r3, [pc, #564]	; (8004aa8 <UART_SetConfig+0x2d0>)
 8004874:	429a      	cmp	r2, r3
 8004876:	d104      	bne.n	8004882 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004878:	f7fe ff08 	bl	800368c <HAL_RCC_GetPCLK2Freq>
 800487c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004880:	e003      	b.n	800488a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004882:	f7fe feef 	bl	8003664 <HAL_RCC_GetPCLK1Freq>
 8004886:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800488a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800488e:	69db      	ldr	r3, [r3, #28]
 8004890:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004894:	f040 810c 	bne.w	8004ab0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004898:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800489c:	2200      	movs	r2, #0
 800489e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80048a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80048a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80048aa:	4622      	mov	r2, r4
 80048ac:	462b      	mov	r3, r5
 80048ae:	1891      	adds	r1, r2, r2
 80048b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80048b2:	415b      	adcs	r3, r3
 80048b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80048ba:	4621      	mov	r1, r4
 80048bc:	eb12 0801 	adds.w	r8, r2, r1
 80048c0:	4629      	mov	r1, r5
 80048c2:	eb43 0901 	adc.w	r9, r3, r1
 80048c6:	f04f 0200 	mov.w	r2, #0
 80048ca:	f04f 0300 	mov.w	r3, #0
 80048ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048da:	4690      	mov	r8, r2
 80048dc:	4699      	mov	r9, r3
 80048de:	4623      	mov	r3, r4
 80048e0:	eb18 0303 	adds.w	r3, r8, r3
 80048e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80048e8:	462b      	mov	r3, r5
 80048ea:	eb49 0303 	adc.w	r3, r9, r3
 80048ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80048f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004902:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004906:	460b      	mov	r3, r1
 8004908:	18db      	adds	r3, r3, r3
 800490a:	653b      	str	r3, [r7, #80]	; 0x50
 800490c:	4613      	mov	r3, r2
 800490e:	eb42 0303 	adc.w	r3, r2, r3
 8004912:	657b      	str	r3, [r7, #84]	; 0x54
 8004914:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004918:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800491c:	f7fc f9b4 	bl	8000c88 <__aeabi_uldivmod>
 8004920:	4602      	mov	r2, r0
 8004922:	460b      	mov	r3, r1
 8004924:	4b61      	ldr	r3, [pc, #388]	; (8004aac <UART_SetConfig+0x2d4>)
 8004926:	fba3 2302 	umull	r2, r3, r3, r2
 800492a:	095b      	lsrs	r3, r3, #5
 800492c:	011c      	lsls	r4, r3, #4
 800492e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004932:	2200      	movs	r2, #0
 8004934:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004938:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800493c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004940:	4642      	mov	r2, r8
 8004942:	464b      	mov	r3, r9
 8004944:	1891      	adds	r1, r2, r2
 8004946:	64b9      	str	r1, [r7, #72]	; 0x48
 8004948:	415b      	adcs	r3, r3
 800494a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800494c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004950:	4641      	mov	r1, r8
 8004952:	eb12 0a01 	adds.w	sl, r2, r1
 8004956:	4649      	mov	r1, r9
 8004958:	eb43 0b01 	adc.w	fp, r3, r1
 800495c:	f04f 0200 	mov.w	r2, #0
 8004960:	f04f 0300 	mov.w	r3, #0
 8004964:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004968:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800496c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004970:	4692      	mov	sl, r2
 8004972:	469b      	mov	fp, r3
 8004974:	4643      	mov	r3, r8
 8004976:	eb1a 0303 	adds.w	r3, sl, r3
 800497a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800497e:	464b      	mov	r3, r9
 8004980:	eb4b 0303 	adc.w	r3, fp, r3
 8004984:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004994:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004998:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800499c:	460b      	mov	r3, r1
 800499e:	18db      	adds	r3, r3, r3
 80049a0:	643b      	str	r3, [r7, #64]	; 0x40
 80049a2:	4613      	mov	r3, r2
 80049a4:	eb42 0303 	adc.w	r3, r2, r3
 80049a8:	647b      	str	r3, [r7, #68]	; 0x44
 80049aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80049ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80049b2:	f7fc f969 	bl	8000c88 <__aeabi_uldivmod>
 80049b6:	4602      	mov	r2, r0
 80049b8:	460b      	mov	r3, r1
 80049ba:	4611      	mov	r1, r2
 80049bc:	4b3b      	ldr	r3, [pc, #236]	; (8004aac <UART_SetConfig+0x2d4>)
 80049be:	fba3 2301 	umull	r2, r3, r3, r1
 80049c2:	095b      	lsrs	r3, r3, #5
 80049c4:	2264      	movs	r2, #100	; 0x64
 80049c6:	fb02 f303 	mul.w	r3, r2, r3
 80049ca:	1acb      	subs	r3, r1, r3
 80049cc:	00db      	lsls	r3, r3, #3
 80049ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80049d2:	4b36      	ldr	r3, [pc, #216]	; (8004aac <UART_SetConfig+0x2d4>)
 80049d4:	fba3 2302 	umull	r2, r3, r3, r2
 80049d8:	095b      	lsrs	r3, r3, #5
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049e0:	441c      	add	r4, r3
 80049e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049e6:	2200      	movs	r2, #0
 80049e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80049f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80049f4:	4642      	mov	r2, r8
 80049f6:	464b      	mov	r3, r9
 80049f8:	1891      	adds	r1, r2, r2
 80049fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80049fc:	415b      	adcs	r3, r3
 80049fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a04:	4641      	mov	r1, r8
 8004a06:	1851      	adds	r1, r2, r1
 8004a08:	6339      	str	r1, [r7, #48]	; 0x30
 8004a0a:	4649      	mov	r1, r9
 8004a0c:	414b      	adcs	r3, r1
 8004a0e:	637b      	str	r3, [r7, #52]	; 0x34
 8004a10:	f04f 0200 	mov.w	r2, #0
 8004a14:	f04f 0300 	mov.w	r3, #0
 8004a18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004a1c:	4659      	mov	r1, fp
 8004a1e:	00cb      	lsls	r3, r1, #3
 8004a20:	4651      	mov	r1, sl
 8004a22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a26:	4651      	mov	r1, sl
 8004a28:	00ca      	lsls	r2, r1, #3
 8004a2a:	4610      	mov	r0, r2
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	4603      	mov	r3, r0
 8004a30:	4642      	mov	r2, r8
 8004a32:	189b      	adds	r3, r3, r2
 8004a34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a38:	464b      	mov	r3, r9
 8004a3a:	460a      	mov	r2, r1
 8004a3c:	eb42 0303 	adc.w	r3, r2, r3
 8004a40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a50:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004a54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a58:	460b      	mov	r3, r1
 8004a5a:	18db      	adds	r3, r3, r3
 8004a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a5e:	4613      	mov	r3, r2
 8004a60:	eb42 0303 	adc.w	r3, r2, r3
 8004a64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004a6e:	f7fc f90b 	bl	8000c88 <__aeabi_uldivmod>
 8004a72:	4602      	mov	r2, r0
 8004a74:	460b      	mov	r3, r1
 8004a76:	4b0d      	ldr	r3, [pc, #52]	; (8004aac <UART_SetConfig+0x2d4>)
 8004a78:	fba3 1302 	umull	r1, r3, r3, r2
 8004a7c:	095b      	lsrs	r3, r3, #5
 8004a7e:	2164      	movs	r1, #100	; 0x64
 8004a80:	fb01 f303 	mul.w	r3, r1, r3
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	00db      	lsls	r3, r3, #3
 8004a88:	3332      	adds	r3, #50	; 0x32
 8004a8a:	4a08      	ldr	r2, [pc, #32]	; (8004aac <UART_SetConfig+0x2d4>)
 8004a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a90:	095b      	lsrs	r3, r3, #5
 8004a92:	f003 0207 	and.w	r2, r3, #7
 8004a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4422      	add	r2, r4
 8004a9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004aa0:	e105      	b.n	8004cae <UART_SetConfig+0x4d6>
 8004aa2:	bf00      	nop
 8004aa4:	40011000 	.word	0x40011000
 8004aa8:	40011400 	.word	0x40011400
 8004aac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ab0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004aba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004abe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004ac2:	4642      	mov	r2, r8
 8004ac4:	464b      	mov	r3, r9
 8004ac6:	1891      	adds	r1, r2, r2
 8004ac8:	6239      	str	r1, [r7, #32]
 8004aca:	415b      	adcs	r3, r3
 8004acc:	627b      	str	r3, [r7, #36]	; 0x24
 8004ace:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ad2:	4641      	mov	r1, r8
 8004ad4:	1854      	adds	r4, r2, r1
 8004ad6:	4649      	mov	r1, r9
 8004ad8:	eb43 0501 	adc.w	r5, r3, r1
 8004adc:	f04f 0200 	mov.w	r2, #0
 8004ae0:	f04f 0300 	mov.w	r3, #0
 8004ae4:	00eb      	lsls	r3, r5, #3
 8004ae6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004aea:	00e2      	lsls	r2, r4, #3
 8004aec:	4614      	mov	r4, r2
 8004aee:	461d      	mov	r5, r3
 8004af0:	4643      	mov	r3, r8
 8004af2:	18e3      	adds	r3, r4, r3
 8004af4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004af8:	464b      	mov	r3, r9
 8004afa:	eb45 0303 	adc.w	r3, r5, r3
 8004afe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b12:	f04f 0200 	mov.w	r2, #0
 8004b16:	f04f 0300 	mov.w	r3, #0
 8004b1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004b1e:	4629      	mov	r1, r5
 8004b20:	008b      	lsls	r3, r1, #2
 8004b22:	4621      	mov	r1, r4
 8004b24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b28:	4621      	mov	r1, r4
 8004b2a:	008a      	lsls	r2, r1, #2
 8004b2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b30:	f7fc f8aa 	bl	8000c88 <__aeabi_uldivmod>
 8004b34:	4602      	mov	r2, r0
 8004b36:	460b      	mov	r3, r1
 8004b38:	4b60      	ldr	r3, [pc, #384]	; (8004cbc <UART_SetConfig+0x4e4>)
 8004b3a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b3e:	095b      	lsrs	r3, r3, #5
 8004b40:	011c      	lsls	r4, r3, #4
 8004b42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b46:	2200      	movs	r2, #0
 8004b48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004b54:	4642      	mov	r2, r8
 8004b56:	464b      	mov	r3, r9
 8004b58:	1891      	adds	r1, r2, r2
 8004b5a:	61b9      	str	r1, [r7, #24]
 8004b5c:	415b      	adcs	r3, r3
 8004b5e:	61fb      	str	r3, [r7, #28]
 8004b60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b64:	4641      	mov	r1, r8
 8004b66:	1851      	adds	r1, r2, r1
 8004b68:	6139      	str	r1, [r7, #16]
 8004b6a:	4649      	mov	r1, r9
 8004b6c:	414b      	adcs	r3, r1
 8004b6e:	617b      	str	r3, [r7, #20]
 8004b70:	f04f 0200 	mov.w	r2, #0
 8004b74:	f04f 0300 	mov.w	r3, #0
 8004b78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b7c:	4659      	mov	r1, fp
 8004b7e:	00cb      	lsls	r3, r1, #3
 8004b80:	4651      	mov	r1, sl
 8004b82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b86:	4651      	mov	r1, sl
 8004b88:	00ca      	lsls	r2, r1, #3
 8004b8a:	4610      	mov	r0, r2
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	4603      	mov	r3, r0
 8004b90:	4642      	mov	r2, r8
 8004b92:	189b      	adds	r3, r3, r2
 8004b94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b98:	464b      	mov	r3, r9
 8004b9a:	460a      	mov	r2, r1
 8004b9c:	eb42 0303 	adc.w	r3, r2, r3
 8004ba0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	67bb      	str	r3, [r7, #120]	; 0x78
 8004bae:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004bb0:	f04f 0200 	mov.w	r2, #0
 8004bb4:	f04f 0300 	mov.w	r3, #0
 8004bb8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004bbc:	4649      	mov	r1, r9
 8004bbe:	008b      	lsls	r3, r1, #2
 8004bc0:	4641      	mov	r1, r8
 8004bc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bc6:	4641      	mov	r1, r8
 8004bc8:	008a      	lsls	r2, r1, #2
 8004bca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004bce:	f7fc f85b 	bl	8000c88 <__aeabi_uldivmod>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	4b39      	ldr	r3, [pc, #228]	; (8004cbc <UART_SetConfig+0x4e4>)
 8004bd8:	fba3 1302 	umull	r1, r3, r3, r2
 8004bdc:	095b      	lsrs	r3, r3, #5
 8004bde:	2164      	movs	r1, #100	; 0x64
 8004be0:	fb01 f303 	mul.w	r3, r1, r3
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	011b      	lsls	r3, r3, #4
 8004be8:	3332      	adds	r3, #50	; 0x32
 8004bea:	4a34      	ldr	r2, [pc, #208]	; (8004cbc <UART_SetConfig+0x4e4>)
 8004bec:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf0:	095b      	lsrs	r3, r3, #5
 8004bf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bf6:	441c      	add	r4, r3
 8004bf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	673b      	str	r3, [r7, #112]	; 0x70
 8004c00:	677a      	str	r2, [r7, #116]	; 0x74
 8004c02:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004c06:	4642      	mov	r2, r8
 8004c08:	464b      	mov	r3, r9
 8004c0a:	1891      	adds	r1, r2, r2
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	415b      	adcs	r3, r3
 8004c10:	60fb      	str	r3, [r7, #12]
 8004c12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c16:	4641      	mov	r1, r8
 8004c18:	1851      	adds	r1, r2, r1
 8004c1a:	6039      	str	r1, [r7, #0]
 8004c1c:	4649      	mov	r1, r9
 8004c1e:	414b      	adcs	r3, r1
 8004c20:	607b      	str	r3, [r7, #4]
 8004c22:	f04f 0200 	mov.w	r2, #0
 8004c26:	f04f 0300 	mov.w	r3, #0
 8004c2a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c2e:	4659      	mov	r1, fp
 8004c30:	00cb      	lsls	r3, r1, #3
 8004c32:	4651      	mov	r1, sl
 8004c34:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c38:	4651      	mov	r1, sl
 8004c3a:	00ca      	lsls	r2, r1, #3
 8004c3c:	4610      	mov	r0, r2
 8004c3e:	4619      	mov	r1, r3
 8004c40:	4603      	mov	r3, r0
 8004c42:	4642      	mov	r2, r8
 8004c44:	189b      	adds	r3, r3, r2
 8004c46:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c48:	464b      	mov	r3, r9
 8004c4a:	460a      	mov	r2, r1
 8004c4c:	eb42 0303 	adc.w	r3, r2, r3
 8004c50:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	663b      	str	r3, [r7, #96]	; 0x60
 8004c5c:	667a      	str	r2, [r7, #100]	; 0x64
 8004c5e:	f04f 0200 	mov.w	r2, #0
 8004c62:	f04f 0300 	mov.w	r3, #0
 8004c66:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004c6a:	4649      	mov	r1, r9
 8004c6c:	008b      	lsls	r3, r1, #2
 8004c6e:	4641      	mov	r1, r8
 8004c70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c74:	4641      	mov	r1, r8
 8004c76:	008a      	lsls	r2, r1, #2
 8004c78:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004c7c:	f7fc f804 	bl	8000c88 <__aeabi_uldivmod>
 8004c80:	4602      	mov	r2, r0
 8004c82:	460b      	mov	r3, r1
 8004c84:	4b0d      	ldr	r3, [pc, #52]	; (8004cbc <UART_SetConfig+0x4e4>)
 8004c86:	fba3 1302 	umull	r1, r3, r3, r2
 8004c8a:	095b      	lsrs	r3, r3, #5
 8004c8c:	2164      	movs	r1, #100	; 0x64
 8004c8e:	fb01 f303 	mul.w	r3, r1, r3
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	011b      	lsls	r3, r3, #4
 8004c96:	3332      	adds	r3, #50	; 0x32
 8004c98:	4a08      	ldr	r2, [pc, #32]	; (8004cbc <UART_SetConfig+0x4e4>)
 8004c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9e:	095b      	lsrs	r3, r3, #5
 8004ca0:	f003 020f 	and.w	r2, r3, #15
 8004ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4422      	add	r2, r4
 8004cac:	609a      	str	r2, [r3, #8]
}
 8004cae:	bf00      	nop
 8004cb0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cba:	bf00      	nop
 8004cbc:	51eb851f 	.word	0x51eb851f

08004cc0 <hostUartBootLoaderConfiguration>:
#define __HOST_UART_BOOTLOADER_CONFIGURATION
/** @brief  hostUartBootLoaderConfiguration
    @return none
*/
void hostUartBootLoaderConfiguration(hostBootLoader_t *_host, UART_HandleTypeDef *huart)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
	printf("\n[hostUartBootLoaderConfiguration] use mavlink + hw host boot loader + uart cli ...\n");
 8004cca:	4808      	ldr	r0, [pc, #32]	; (8004cec <hostUartBootLoaderConfiguration+0x2c>)
 8004ccc:	f002 f9fa 	bl	80070c4 <puts>
	host = _host;
 8004cd0:	4a07      	ldr	r2, [pc, #28]	; (8004cf0 <hostUartBootLoaderConfiguration+0x30>)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6013      	str	r3, [r2, #0]
	uart_hostBL = huart;
 8004cd6:	4a07      	ldr	r2, [pc, #28]	; (8004cf4 <hostUartBootLoaderConfiguration+0x34>)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	6013      	str	r3, [r2, #0]
//	mavlinhControlConfiguration();

	/// debug
	host->isBootLoader = true;
 8004cdc:	4b04      	ldr	r3, [pc, #16]	; (8004cf0 <hostUartBootLoaderConfiguration+0x30>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	701a      	strb	r2, [r3, #0]
}
 8004ce4:	bf00      	nop
 8004ce6:	3708      	adds	r7, #8
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	0800ac70 	.word	0x0800ac70
 8004cf0:	20000630 	.word	0x20000630
 8004cf4:	20000634 	.word	0x20000634

08004cf8 <__hostBL>:

/** @brief  __hostBL
    @return pointer struct support host boot loader
*/
hostBootLoader_t* __hostBL(void)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	af00      	add	r7, sp, #0
	return host;
 8004cfc:	4b03      	ldr	r3, [pc, #12]	; (8004d0c <__hostBL+0x14>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	20000630 	.word	0x20000630

08004d10 <getTime>:

/** @brief  getTime
    @return bool
*/
static bool getTime(uint32_t *time, uint32_t timeCmp)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
	if(HAL_GetTick() - *time > timeCmp || *time == 0)
 8004d1a:	f7fc ffad 	bl	8001c78 <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d303      	bcc.n	8004d34 <getTime+0x24>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d106      	bne.n	8004d42 <getTime+0x32>
	{
		*time = HAL_GetTick();
 8004d34:	f7fc ffa0 	bl	8001c78 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	601a      	str	r2, [r3, #0]

		return true;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e000      	b.n	8004d44 <getTime+0x34>
	}

	return false;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3708      	adds	r7, #8
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <hostBootLoader_uartConfigForBL>:
#define __HOST_UART_BOOTLOADER_FUNCTION
/** @brief  hostBootLoader_uartConfigForBL
    @return none
*/
static void hostBootLoader_uartConfigForBL(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(uart_hostBL);
 8004d50:	4b29      	ldr	r3, [pc, #164]	; (8004df8 <hostBootLoader_uartConfigForBL+0xac>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7fe fcfa 	bl	800374e <HAL_UART_DeInit>

	HAL_Delay(500);
 8004d5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004d5e:	f7fc ff97 	bl	8001c90 <HAL_Delay>

	uart_hostBL->Instance 					= USART2;
 8004d62:	4b25      	ldr	r3, [pc, #148]	; (8004df8 <hostBootLoader_uartConfigForBL+0xac>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a25      	ldr	r2, [pc, #148]	; (8004dfc <hostBootLoader_uartConfigForBL+0xb0>)
 8004d68:	601a      	str	r2, [r3, #0]
	uart_hostBL->Init.BaudRate 				= 115200;//460800 ;
 8004d6a:	4b23      	ldr	r3, [pc, #140]	; (8004df8 <hostBootLoader_uartConfigForBL+0xac>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004d72:	605a      	str	r2, [r3, #4]
	uart_hostBL->Init.WordLength 			= UART_WORDLENGTH_9B;
 8004d74:	4b20      	ldr	r3, [pc, #128]	; (8004df8 <hostBootLoader_uartConfigForBL+0xac>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004d7c:	609a      	str	r2, [r3, #8]
	uart_hostBL->Init.StopBits 				= UART_STOPBITS_1;
 8004d7e:	4b1e      	ldr	r3, [pc, #120]	; (8004df8 <hostBootLoader_uartConfigForBL+0xac>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2200      	movs	r2, #0
 8004d84:	60da      	str	r2, [r3, #12]
	uart_hostBL->Init.Parity 				= UART_PARITY_EVEN;
 8004d86:	4b1c      	ldr	r3, [pc, #112]	; (8004df8 <hostBootLoader_uartConfigForBL+0xac>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d8e:	611a      	str	r2, [r3, #16]
	uart_hostBL->Init.Mode 					= UART_MODE_TX_RX;
 8004d90:	4b19      	ldr	r3, [pc, #100]	; (8004df8 <hostBootLoader_uartConfigForBL+0xac>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	220c      	movs	r2, #12
 8004d96:	615a      	str	r2, [r3, #20]
	uart_hostBL->Init.HwFlowCtl 			= UART_HWCONTROL_NONE;
 8004d98:	4b17      	ldr	r3, [pc, #92]	; (8004df8 <hostBootLoader_uartConfigForBL+0xac>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	619a      	str	r2, [r3, #24]
	uart_hostBL->Init.OverSampling 			= UART_OVERSAMPLING_16;
 8004da0:	4b15      	ldr	r3, [pc, #84]	; (8004df8 <hostBootLoader_uartConfigForBL+0xac>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2200      	movs	r2, #0
 8004da6:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(uart_hostBL) != HAL_OK)
 8004da8:	4b13      	ldr	r3, [pc, #76]	; (8004df8 <hostBootLoader_uartConfigForBL+0xac>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7fe fc81 	bl	80036b4 <HAL_UART_Init>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d001      	beq.n	8004dbc <hostBootLoader_uartConfigForBL+0x70>
	{
		Error_Handler();
 8004db8:	f7fc fae6 	bl	8001388 <Error_Handler>
	}

	ringBufferInit(&rBufferHostBL);
 8004dbc:	4810      	ldr	r0, [pc, #64]	; (8004e00 <hostBootLoader_uartConfigForBL+0xb4>)
 8004dbe:	f000 fff3 	bl	8005da8 <ringBufferInit>
	if(HAL_UART_Receive_IT(uart_hostBL, &wData, 1) != HAL_OK)
	{
		Error_Handler();
	}
#else
	if(HAL_UART_Receive_DMA(uart_hostBL, &wData, 1) != HAL_OK)
 8004dc2:	4b0d      	ldr	r3, [pc, #52]	; (8004df8 <hostBootLoader_uartConfigForBL+0xac>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	490e      	ldr	r1, [pc, #56]	; (8004e04 <hostBootLoader_uartConfigForBL+0xb8>)
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fe fdfe 	bl	80039cc <HAL_UART_Receive_DMA>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d001      	beq.n	8004dda <hostBootLoader_uartConfigForBL+0x8e>
	{
		Error_Handler();
 8004dd6:	f7fc fad7 	bl	8001388 <Error_Handler>
	}
#endif


    /// xoa bo dem uart truoc khi truyen
    __HAL_UART_FLUSH_DRREGISTER(uart_hostBL);
 8004dda:	4b07      	ldr	r3, [pc, #28]	; (8004df8 <hostBootLoader_uartConfigForBL+0xac>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]

    HAL_Delay(500);
 8004de2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004de6:	f7fc ff53 	bl	8001c90 <HAL_Delay>

    /// first send cmd connect
    host->hostCmd[0] = UART_BOOTLOADER_CMD_CONNECT;
 8004dea:	4b07      	ldr	r3, [pc, #28]	; (8004e08 <hostBootLoader_uartConfigForBL+0xbc>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	227f      	movs	r2, #127	; 0x7f
 8004df0:	70da      	strb	r2, [r3, #3]
}
 8004df2:	bf00      	nop
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	20000634 	.word	0x20000634
 8004dfc:	40004400 	.word	0x40004400
 8004e00:	20000518 	.word	0x20000518
 8004e04:	2000062c 	.word	0x2000062c
 8004e08:	20000630 	.word	0x20000630

08004e0c <hostBootLoader_sendData>:

/** @brief  hostBootLoader_sendData
    @return number of command
*/
static void hostBootLoader_sendData(uint8_t *buffer, uint16_t len)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	460b      	mov	r3, r1
 8004e16:	807b      	strh	r3, [r7, #2]

#if(HOST_USE_UART_IT == 1)
	HAL_UART_Transmit_IT(uart_hostBL, buffer, len);
#else
	HAL_UART_Transmit_DMA(uart_hostBL, buffer, len);
 8004e18:	4b0a      	ldr	r3, [pc, #40]	; (8004e44 <hostBootLoader_sendData+0x38>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	887a      	ldrh	r2, [r7, #2]
 8004e1e:	6879      	ldr	r1, [r7, #4]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7fe fd55 	bl	80038d0 <HAL_UART_Transmit_DMA>
#endif

	while(txComplete == false);
 8004e26:	bf00      	nop
 8004e28:	4b07      	ldr	r3, [pc, #28]	; (8004e48 <hostBootLoader_sendData+0x3c>)
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	f083 0301 	eor.w	r3, r3, #1
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1f8      	bne.n	8004e28 <hostBootLoader_sendData+0x1c>
	txComplete = false;
 8004e36:	4b04      	ldr	r3, [pc, #16]	; (8004e48 <hostBootLoader_sendData+0x3c>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	701a      	strb	r2, [r3, #0]
}
 8004e3c:	bf00      	nop
 8004e3e:	3708      	adds	r7, #8
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	20000634 	.word	0x20000634
 8004e48:	2000135c 	.word	0x2000135c

08004e4c <hostBootLoader_getCmdHeader>:

/** @brief  hostBootLoader_getCmdHeader
    @return number of command header
*/
static uint8_t hostBootLoader_getCmdHeader(uint8_t cmdIndex)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	4603      	mov	r3, r0
 8004e54:	71fb      	strb	r3, [r7, #7]
	return cmdIndex;
 8004e56:	79fb      	ldrb	r3, [r7, #7]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <hostBootLoader_getCmdFooter>:

/** @brief  hostBootLoader_getCmdFooter
    @return number of command footer
*/
static uint8_t hostBootLoader_getCmdFooter(uint8_t cmdIndex)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	71fb      	strb	r3, [r7, #7]
	return (cmdIndex ^ 0xff);
 8004e6e:	79fb      	ldrb	r3, [r7, #7]
 8004e70:	43db      	mvns	r3, r3
 8004e72:	b2db      	uxtb	r3, r3
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <hostBootLoader_sendCommand>:

/** @brief  hostBootLoader_readCommand
    @return number of command
*/
static void hostBootLoader_sendCommand(uint8_t cmdIndex, uint8_t len)
{
 8004e80:	b590      	push	{r4, r7, lr}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	4603      	mov	r3, r0
 8004e88:	460a      	mov	r2, r1
 8004e8a:	71fb      	strb	r3, [r7, #7]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	71bb      	strb	r3, [r7, #6]
	host->isSendCmd = true;
 8004e90:	4b15      	ldr	r3, [pc, #84]	; (8004ee8 <hostBootLoader_sendCommand+0x68>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2201      	movs	r2, #1
 8004e96:	709a      	strb	r2, [r3, #2]
	/// get cmd header
	host->hostCmd[0] = hostBootLoader_getCmdHeader(cmdIndex);
 8004e98:	4b13      	ldr	r3, [pc, #76]	; (8004ee8 <hostBootLoader_sendCommand+0x68>)
 8004e9a:	681c      	ldr	r4, [r3, #0]
 8004e9c:	79fb      	ldrb	r3, [r7, #7]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7ff ffd4 	bl	8004e4c <hostBootLoader_getCmdHeader>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	70e3      	strb	r3, [r4, #3]

	/// get cmd footer
	host->hostCmd[1] = hostBootLoader_getCmdFooter(cmdIndex);
 8004ea8:	4b0f      	ldr	r3, [pc, #60]	; (8004ee8 <hostBootLoader_sendCommand+0x68>)
 8004eaa:	681c      	ldr	r4, [r3, #0]
 8004eac:	79fb      	ldrb	r3, [r7, #7]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7ff ffd8 	bl	8004e64 <hostBootLoader_getCmdFooter>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	7123      	strb	r3, [r4, #4]

	hostBootLoader_sendData(host->hostCmd, len);
 8004eb8:	4b0b      	ldr	r3, [pc, #44]	; (8004ee8 <hostBootLoader_sendCommand+0x68>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	3303      	adds	r3, #3
 8004ebe:	79ba      	ldrb	r2, [r7, #6]
 8004ec0:	b292      	uxth	r2, r2
 8004ec2:	4611      	mov	r1, r2
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7ff ffa1 	bl	8004e0c <hostBootLoader_sendData>

	printf("\n[hostBootLoader_sendCommand] 0x%x | 0x%x\n", host->hostCmd[0], host->hostCmd[1]);
 8004eca:	4b07      	ldr	r3, [pc, #28]	; (8004ee8 <hostBootLoader_sendCommand+0x68>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	78db      	ldrb	r3, [r3, #3]
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	4b05      	ldr	r3, [pc, #20]	; (8004ee8 <hostBootLoader_sendCommand+0x68>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	791b      	ldrb	r3, [r3, #4]
 8004ed8:	461a      	mov	r2, r3
 8004eda:	4804      	ldr	r0, [pc, #16]	; (8004eec <hostBootLoader_sendCommand+0x6c>)
 8004edc:	f002 f86c 	bl	8006fb8 <iprintf>
}
 8004ee0:	bf00      	nop
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd90      	pop	{r4, r7, pc}
 8004ee8:	20000630 	.word	0x20000630
 8004eec:	0800acc4 	.word	0x0800acc4

08004ef0 <hostBootLoader_waittingResponeCmdConnect>:

/** @brief  hostBootLoader_waittingResponeCmdConnect
    @return number of command
*/
static bool hostBootLoader_waittingResponeCmdConnect(void)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
	uint8_t rData = 0;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	71fb      	strb	r3, [r7, #7]

	if(rBufferHostBL.len == 1)
 8004efa:	4b0c      	ldr	r3, [pc, #48]	; (8004f2c <hostBootLoader_waittingResponeCmdConnect+0x3c>)
 8004efc:	889b      	ldrh	r3, [r3, #4]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d10f      	bne.n	8004f22 <hostBootLoader_waittingResponeCmdConnect+0x32>
	{
		if(ringBufferRead(&rBufferHostBL, &rData) == RING_BUFFER_OK)
 8004f02:	1dfb      	adds	r3, r7, #7
 8004f04:	4619      	mov	r1, r3
 8004f06:	4809      	ldr	r0, [pc, #36]	; (8004f2c <hostBootLoader_waittingResponeCmdConnect+0x3c>)
 8004f08:	f000 ff98 	bl	8005e3c <ringBufferRead>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d107      	bne.n	8004f22 <hostBootLoader_waittingResponeCmdConnect+0x32>
		{
			if(rData == UART_BOOTLOADER_ACK)
 8004f12:	79fb      	ldrb	r3, [r7, #7]
 8004f14:	2b79      	cmp	r3, #121	; 0x79
 8004f16:	d104      	bne.n	8004f22 <hostBootLoader_waittingResponeCmdConnect+0x32>
			{
				printf("\n[hostBootLoader_waittingResponeCmdConnect] device connected !@!\n");
 8004f18:	4805      	ldr	r0, [pc, #20]	; (8004f30 <hostBootLoader_waittingResponeCmdConnect+0x40>)
 8004f1a:	f002 f8d3 	bl	80070c4 <puts>
				return true;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e000      	b.n	8004f24 <hostBootLoader_waittingResponeCmdConnect+0x34>
			}
		}
	}

	return false;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3708      	adds	r7, #8
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	20000518 	.word	0x20000518
 8004f30:	0800acf0 	.word	0x0800acf0

08004f34 <hostBootLoader_waittingResponeCmdGet>:

/** @brief  hostBootLoader_waittingResponeCmdGet
    @return number of command
*/
static bool hostBootLoader_waittingResponeCmdGet(void)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
	uint8_t rData = 0;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	75bb      	strb	r3, [r7, #22]
	uint8_t buffer[BOOTLOADER_CMD_GET_LEN];

	if(rBufferHostBL.len >= BOOTLOADER_CMD_GET_LEN)
 8004f3e:	4b28      	ldr	r3, [pc, #160]	; (8004fe0 <hostBootLoader_waittingResponeCmdGet+0xac>)
 8004f40:	889b      	ldrh	r3, [r3, #4]
 8004f42:	2b0e      	cmp	r3, #14
 8004f44:	d946      	bls.n	8004fd4 <hostBootLoader_waittingResponeCmdGet+0xa0>
	{
		for(uint8_t i = 0; i < BOOTLOADER_CMD_GET_LEN; i++)
 8004f46:	2300      	movs	r3, #0
 8004f48:	75fb      	strb	r3, [r7, #23]
 8004f4a:	e011      	b.n	8004f70 <hostBootLoader_waittingResponeCmdGet+0x3c>
		{
			if(ringBufferRead(&rBufferHostBL, &rData) == RING_BUFFER_OK)
 8004f4c:	f107 0316 	add.w	r3, r7, #22
 8004f50:	4619      	mov	r1, r3
 8004f52:	4823      	ldr	r0, [pc, #140]	; (8004fe0 <hostBootLoader_waittingResponeCmdGet+0xac>)
 8004f54:	f000 ff72 	bl	8005e3c <ringBufferRead>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d105      	bne.n	8004f6a <hostBootLoader_waittingResponeCmdGet+0x36>
			{
				buffer[i] = rData;
 8004f5e:	7dfb      	ldrb	r3, [r7, #23]
 8004f60:	7dba      	ldrb	r2, [r7, #22]
 8004f62:	3318      	adds	r3, #24
 8004f64:	443b      	add	r3, r7
 8004f66:	f803 2c14 	strb.w	r2, [r3, #-20]
		for(uint8_t i = 0; i < BOOTLOADER_CMD_GET_LEN; i++)
 8004f6a:	7dfb      	ldrb	r3, [r7, #23]
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	75fb      	strb	r3, [r7, #23]
 8004f70:	7dfb      	ldrb	r3, [r7, #23]
 8004f72:	2b0e      	cmp	r3, #14
 8004f74:	d9ea      	bls.n	8004f4c <hostBootLoader_waittingResponeCmdGet+0x18>
			}
		}

		/// kiem tra ack
		if(buffer[0] == UART_BOOTLOADER_ACK && buffer[14] == UART_BOOTLOADER_ACK)
 8004f76:	793b      	ldrb	r3, [r7, #4]
 8004f78:	2b79      	cmp	r3, #121	; 0x79
 8004f7a:	d12b      	bne.n	8004fd4 <hostBootLoader_waittingResponeCmdGet+0xa0>
 8004f7c:	7cbb      	ldrb	r3, [r7, #18]
 8004f7e:	2b79      	cmp	r3, #121	; 0x79
 8004f80:	d128      	bne.n	8004fd4 <hostBootLoader_waittingResponeCmdGet+0xa0>
		{
			hostPri.cmdGet.numberOfbyte 			= buffer[1];
 8004f82:	797a      	ldrb	r2, [r7, #5]
 8004f84:	4b17      	ldr	r3, [pc, #92]	; (8004fe4 <hostBootLoader_waittingResponeCmdGet+0xb0>)
 8004f86:	711a      	strb	r2, [r3, #4]
			hostPri.cmdGet.version 					= buffer[2];
 8004f88:	79ba      	ldrb	r2, [r7, #6]
 8004f8a:	4b16      	ldr	r3, [pc, #88]	; (8004fe4 <hostBootLoader_waittingResponeCmdGet+0xb0>)
 8004f8c:	715a      	strb	r2, [r3, #5]
			hostPri.cmdGet.getCmd 					= buffer[3];
 8004f8e:	79fa      	ldrb	r2, [r7, #7]
 8004f90:	4b14      	ldr	r3, [pc, #80]	; (8004fe4 <hostBootLoader_waittingResponeCmdGet+0xb0>)
 8004f92:	719a      	strb	r2, [r3, #6]
			hostPri.cmdGet.getVerAndRPStatus 		= buffer[4];
 8004f94:	7a3a      	ldrb	r2, [r7, #8]
 8004f96:	4b13      	ldr	r3, [pc, #76]	; (8004fe4 <hostBootLoader_waittingResponeCmdGet+0xb0>)
 8004f98:	71da      	strb	r2, [r3, #7]
			hostPri.cmdGet.getId 					= buffer[5];
 8004f9a:	7a7a      	ldrb	r2, [r7, #9]
 8004f9c:	4b11      	ldr	r3, [pc, #68]	; (8004fe4 <hostBootLoader_waittingResponeCmdGet+0xb0>)
 8004f9e:	721a      	strb	r2, [r3, #8]
			hostPri.cmdGet.readMemoryCmd 			= buffer[6];
 8004fa0:	7aba      	ldrb	r2, [r7, #10]
 8004fa2:	4b10      	ldr	r3, [pc, #64]	; (8004fe4 <hostBootLoader_waittingResponeCmdGet+0xb0>)
 8004fa4:	725a      	strb	r2, [r3, #9]
			hostPri.cmdGet.goCmd 					= buffer[7];
 8004fa6:	7afa      	ldrb	r2, [r7, #11]
 8004fa8:	4b0e      	ldr	r3, [pc, #56]	; (8004fe4 <hostBootLoader_waittingResponeCmdGet+0xb0>)
 8004faa:	729a      	strb	r2, [r3, #10]
			hostPri.cmdGet.writeMemoryCmd 			= buffer[8];
 8004fac:	7b3a      	ldrb	r2, [r7, #12]
 8004fae:	4b0d      	ldr	r3, [pc, #52]	; (8004fe4 <hostBootLoader_waittingResponeCmdGet+0xb0>)
 8004fb0:	72da      	strb	r2, [r3, #11]
			hostPri.cmdGet.EraseCmd 				= buffer[9];
 8004fb2:	7b7a      	ldrb	r2, [r7, #13]
 8004fb4:	4b0b      	ldr	r3, [pc, #44]	; (8004fe4 <hostBootLoader_waittingResponeCmdGet+0xb0>)
 8004fb6:	731a      	strb	r2, [r3, #12]
			hostPri.cmdGet.writeProtectCmd 			= buffer[10];
 8004fb8:	7bba      	ldrb	r2, [r7, #14]
 8004fba:	4b0a      	ldr	r3, [pc, #40]	; (8004fe4 <hostBootLoader_waittingResponeCmdGet+0xb0>)
 8004fbc:	735a      	strb	r2, [r3, #13]
			hostPri.cmdGet.writeUnProtectCmd 		= buffer[11];
 8004fbe:	7bfa      	ldrb	r2, [r7, #15]
 8004fc0:	4b08      	ldr	r3, [pc, #32]	; (8004fe4 <hostBootLoader_waittingResponeCmdGet+0xb0>)
 8004fc2:	739a      	strb	r2, [r3, #14]
			hostPri.cmdGet.readOutProtectCmd 		= buffer[12];
 8004fc4:	7c3a      	ldrb	r2, [r7, #16]
 8004fc6:	4b07      	ldr	r3, [pc, #28]	; (8004fe4 <hostBootLoader_waittingResponeCmdGet+0xb0>)
 8004fc8:	73da      	strb	r2, [r3, #15]
			hostPri.cmdGet.readOutUnProtectCmd 		= buffer[13];
 8004fca:	7c7a      	ldrb	r2, [r7, #17]
 8004fcc:	4b05      	ldr	r3, [pc, #20]	; (8004fe4 <hostBootLoader_waittingResponeCmdGet+0xb0>)
 8004fce:	741a      	strb	r2, [r3, #16]

			return true;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e000      	b.n	8004fd6 <hostBootLoader_waittingResponeCmdGet+0xa2>
		}
	}

	return false;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3718      	adds	r7, #24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	20000518 	.word	0x20000518
 8004fe4:	20000638 	.word	0x20000638

08004fe8 <hostBootLoader_waittingResponeCmdGetId>:

/** @brief  hostBootLoader_waittingResponeCmdGetId
    @return number of command
*/
static bool hostBootLoader_waittingResponeCmdGetId(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
	uint8_t rData = 0;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	71bb      	strb	r3, [r7, #6]
	uint8_t buffer[BOOTLOADER_CMD_GET_ID_LEN];

	if(rBufferHostBL.len >= BOOTLOADER_CMD_GET_ID_LEN)
 8004ff2:	4b21      	ldr	r3, [pc, #132]	; (8005078 <hostBootLoader_waittingResponeCmdGetId+0x90>)
 8004ff4:	889b      	ldrh	r3, [r3, #4]
 8004ff6:	2b04      	cmp	r3, #4
 8004ff8:	d939      	bls.n	800506e <hostBootLoader_waittingResponeCmdGetId+0x86>
	{
		for(uint8_t i = 0; i < BOOTLOADER_CMD_GET_ID_LEN; i++)
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	71fb      	strb	r3, [r7, #7]
 8004ffe:	e010      	b.n	8005022 <hostBootLoader_waittingResponeCmdGetId+0x3a>
		{
			if(ringBufferRead(&rBufferHostBL, &rData))
 8005000:	1dbb      	adds	r3, r7, #6
 8005002:	4619      	mov	r1, r3
 8005004:	481c      	ldr	r0, [pc, #112]	; (8005078 <hostBootLoader_waittingResponeCmdGetId+0x90>)
 8005006:	f000 ff19 	bl	8005e3c <ringBufferRead>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d005      	beq.n	800501c <hostBootLoader_waittingResponeCmdGetId+0x34>
			buffer[i] = rData;
 8005010:	79fb      	ldrb	r3, [r7, #7]
 8005012:	79ba      	ldrb	r2, [r7, #6]
 8005014:	3308      	adds	r3, #8
 8005016:	443b      	add	r3, r7
 8005018:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i < BOOTLOADER_CMD_GET_ID_LEN; i++)
 800501c:	79fb      	ldrb	r3, [r7, #7]
 800501e:	3301      	adds	r3, #1
 8005020:	71fb      	strb	r3, [r7, #7]
 8005022:	79fb      	ldrb	r3, [r7, #7]
 8005024:	2b04      	cmp	r3, #4
 8005026:	d9eb      	bls.n	8005000 <hostBootLoader_waittingResponeCmdGetId+0x18>
		}

		if(buffer[0] == UART_BOOTLOADER_ACK && buffer[4] == UART_BOOTLOADER_ACK)
 8005028:	783b      	ldrb	r3, [r7, #0]
 800502a:	2b79      	cmp	r3, #121	; 0x79
 800502c:	d11f      	bne.n	800506e <hostBootLoader_waittingResponeCmdGetId+0x86>
 800502e:	793b      	ldrb	r3, [r7, #4]
 8005030:	2b79      	cmp	r3, #121	; 0x79
 8005032:	d11c      	bne.n	800506e <hostBootLoader_waittingResponeCmdGetId+0x86>
		{
			hostPri.cmdGetId.numberOfbyte = buffer[1];
 8005034:	787a      	ldrb	r2, [r7, #1]
 8005036:	4b11      	ldr	r3, [pc, #68]	; (800507c <hostBootLoader_waittingResponeCmdGetId+0x94>)
 8005038:	749a      	strb	r2, [r3, #18]
			hostPri.cmdGetId.byte3 = buffer[2];
 800503a:	78ba      	ldrb	r2, [r7, #2]
 800503c:	4b0f      	ldr	r3, [pc, #60]	; (800507c <hostBootLoader_waittingResponeCmdGetId+0x94>)
 800503e:	74da      	strb	r2, [r3, #19]
			hostPri.cmdGetId.byte4 = buffer[3];
 8005040:	78fa      	ldrb	r2, [r7, #3]
 8005042:	4b0e      	ldr	r3, [pc, #56]	; (800507c <hostBootLoader_waittingResponeCmdGetId+0x94>)
 8005044:	751a      	strb	r2, [r3, #20]
			hostPri.cmdGetId.PID = hostPri.cmdGetId.byte3 << 8 | hostPri.cmdGetId.byte4;
 8005046:	4b0d      	ldr	r3, [pc, #52]	; (800507c <hostBootLoader_waittingResponeCmdGetId+0x94>)
 8005048:	7cdb      	ldrb	r3, [r3, #19]
 800504a:	021b      	lsls	r3, r3, #8
 800504c:	b21a      	sxth	r2, r3
 800504e:	4b0b      	ldr	r3, [pc, #44]	; (800507c <hostBootLoader_waittingResponeCmdGetId+0x94>)
 8005050:	7d1b      	ldrb	r3, [r3, #20]
 8005052:	b21b      	sxth	r3, r3
 8005054:	4313      	orrs	r3, r2
 8005056:	b21b      	sxth	r3, r3
 8005058:	b29a      	uxth	r2, r3
 800505a:	4b08      	ldr	r3, [pc, #32]	; (800507c <hostBootLoader_waittingResponeCmdGetId+0x94>)
 800505c:	82da      	strh	r2, [r3, #22]

			printf("\n[hostBootLoader_waittingResponeCmdGetId] chipId : 0x%x\n", hostPri.cmdGetId.PID);
 800505e:	4b07      	ldr	r3, [pc, #28]	; (800507c <hostBootLoader_waittingResponeCmdGetId+0x94>)
 8005060:	8adb      	ldrh	r3, [r3, #22]
 8005062:	4619      	mov	r1, r3
 8005064:	4806      	ldr	r0, [pc, #24]	; (8005080 <hostBootLoader_waittingResponeCmdGetId+0x98>)
 8005066:	f001 ffa7 	bl	8006fb8 <iprintf>

			return true;
 800506a:	2301      	movs	r3, #1
 800506c:	e000      	b.n	8005070 <hostBootLoader_waittingResponeCmdGetId+0x88>
		}
	}

	return false;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3708      	adds	r7, #8
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	20000518 	.word	0x20000518
 800507c:	20000638 	.word	0x20000638
 8005080:	0800ad34 	.word	0x0800ad34

08005084 <hostBootLoader_waittingResponeCmdErase>:

/** @brief  hostBootLoader_waittingResponeCmdErase
    @return uint8_t
*/
static uint8_t hostBootLoader_waittingResponeCmdErase(void)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
	uint8_t rData = 0;
 800508a:	2300      	movs	r3, #0
 800508c:	71fb      	strb	r3, [r7, #7]

	switch(hostPri.cmdEraseState)
 800508e:	4b35      	ldr	r3, [pc, #212]	; (8005164 <hostBootLoader_waittingResponeCmdErase+0xe0>)
 8005090:	7e1b      	ldrb	r3, [r3, #24]
 8005092:	2b04      	cmp	r3, #4
 8005094:	d860      	bhi.n	8005158 <hostBootLoader_waittingResponeCmdErase+0xd4>
 8005096:	a201      	add	r2, pc, #4	; (adr r2, 800509c <hostBootLoader_waittingResponeCmdErase+0x18>)
 8005098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800509c:	080050b1 	.word	0x080050b1
 80050a0:	080050f1 	.word	0x080050f1
 80050a4:	08005109 	.word	0x08005109
 80050a8:	08005137 	.word	0x08005137
 80050ac:	08005145 	.word	0x08005145
	{
		case 0: /// waitting ack
		{
			if(rBufferHostBL.len >= 1)
 80050b0:	4b2d      	ldr	r3, [pc, #180]	; (8005168 <hostBootLoader_waittingResponeCmdErase+0xe4>)
 80050b2:	889b      	ldrh	r3, [r3, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d04c      	beq.n	8005152 <hostBootLoader_waittingResponeCmdErase+0xce>
			{
				printf("[hostBootLoader_waittingResponeCmdErase] Erase memory ....\n");
 80050b8:	482c      	ldr	r0, [pc, #176]	; (800516c <hostBootLoader_waittingResponeCmdErase+0xe8>)
 80050ba:	f002 f803 	bl	80070c4 <puts>
				if(ringBufferRead(&rBufferHostBL, &rData) == RING_BUFFER_OK)
 80050be:	1dfb      	adds	r3, r7, #7
 80050c0:	4619      	mov	r1, r3
 80050c2:	4829      	ldr	r0, [pc, #164]	; (8005168 <hostBootLoader_waittingResponeCmdErase+0xe4>)
 80050c4:	f000 feba 	bl	8005e3c <ringBufferRead>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d141      	bne.n	8005152 <hostBootLoader_waittingResponeCmdErase+0xce>
				{
					if(rData == UART_BOOTLOADER_ACK)
 80050ce:	79fb      	ldrb	r3, [r7, #7]
 80050d0:	2b79      	cmp	r3, #121	; 0x79
 80050d2:	d109      	bne.n	80050e8 <hostBootLoader_waittingResponeCmdErase+0x64>
					{
						hostPri.deviceReponseCmdErase = true;
 80050d4:	4b23      	ldr	r3, [pc, #140]	; (8005164 <hostBootLoader_waittingResponeCmdErase+0xe0>)
 80050d6:	2201      	movs	r2, #1
 80050d8:	765a      	strb	r2, [r3, #25]
						printf("[hostBootLoader_waittingResponeCmdErase] Erase memory running ....\n");
 80050da:	4825      	ldr	r0, [pc, #148]	; (8005170 <hostBootLoader_waittingResponeCmdErase+0xec>)
 80050dc:	f001 fff2 	bl	80070c4 <puts>
						hostPri.cmdEraseState = 1;
 80050e0:	4b20      	ldr	r3, [pc, #128]	; (8005164 <hostBootLoader_waittingResponeCmdErase+0xe0>)
 80050e2:	2201      	movs	r2, #1
 80050e4:	761a      	strb	r2, [r3, #24]
					{
						hostPri.cmdEraseState = 4;
					}
				}
			}
		}break;
 80050e6:	e034      	b.n	8005152 <hostBootLoader_waittingResponeCmdErase+0xce>
						hostPri.cmdEraseState = 4;
 80050e8:	4b1e      	ldr	r3, [pc, #120]	; (8005164 <hostBootLoader_waittingResponeCmdErase+0xe0>)
 80050ea:	2204      	movs	r2, #4
 80050ec:	761a      	strb	r2, [r3, #24]
		}break;
 80050ee:	e030      	b.n	8005152 <hostBootLoader_waittingResponeCmdErase+0xce>
		case 1: /// send number of byte
		{
			uint8_t buffer[2] = {0xff, 0xff};//, 0x00};
 80050f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80050f4:	80bb      	strh	r3, [r7, #4]
			hostBootLoader_sendData(buffer, 2);
 80050f6:	1d3b      	adds	r3, r7, #4
 80050f8:	2102      	movs	r1, #2
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7ff fe86 	bl	8004e0c <hostBootLoader_sendData>

			hostPri.cmdEraseState = 2;
 8005100:	4b18      	ldr	r3, [pc, #96]	; (8005164 <hostBootLoader_waittingResponeCmdErase+0xe0>)
 8005102:	2202      	movs	r2, #2
 8005104:	761a      	strb	r2, [r3, #24]
		}break;
 8005106:	e027      	b.n	8005158 <hostBootLoader_waittingResponeCmdErase+0xd4>
		case 2: // waitting ack
		{
			if(rBufferHostBL.len >= 1)
 8005108:	4b17      	ldr	r3, [pc, #92]	; (8005168 <hostBootLoader_waittingResponeCmdErase+0xe4>)
 800510a:	889b      	ldrh	r3, [r3, #4]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d022      	beq.n	8005156 <hostBootLoader_waittingResponeCmdErase+0xd2>
			{
				if(ringBufferRead(&rBufferHostBL, &rData) == RING_BUFFER_OK)
 8005110:	1dfb      	adds	r3, r7, #7
 8005112:	4619      	mov	r1, r3
 8005114:	4814      	ldr	r0, [pc, #80]	; (8005168 <hostBootLoader_waittingResponeCmdErase+0xe4>)
 8005116:	f000 fe91 	bl	8005e3c <ringBufferRead>
 800511a:	4603      	mov	r3, r0
 800511c:	2b01      	cmp	r3, #1
 800511e:	d11a      	bne.n	8005156 <hostBootLoader_waittingResponeCmdErase+0xd2>
				{
					if(rData == UART_BOOTLOADER_ACK)
 8005120:	79fb      	ldrb	r3, [r7, #7]
 8005122:	2b79      	cmp	r3, #121	; 0x79
 8005124:	d103      	bne.n	800512e <hostBootLoader_waittingResponeCmdErase+0xaa>
					{
						hostPri.cmdEraseState = 3;
 8005126:	4b0f      	ldr	r3, [pc, #60]	; (8005164 <hostBootLoader_waittingResponeCmdErase+0xe0>)
 8005128:	2203      	movs	r2, #3
 800512a:	761a      	strb	r2, [r3, #24]
					{
						hostPri.cmdEraseState = 4;
					}
				}
			}
		}break;
 800512c:	e013      	b.n	8005156 <hostBootLoader_waittingResponeCmdErase+0xd2>
						hostPri.cmdEraseState = 4;
 800512e:	4b0d      	ldr	r3, [pc, #52]	; (8005164 <hostBootLoader_waittingResponeCmdErase+0xe0>)
 8005130:	2204      	movs	r2, #4
 8005132:	761a      	strb	r2, [r3, #24]
		}break;
 8005134:	e00f      	b.n	8005156 <hostBootLoader_waittingResponeCmdErase+0xd2>
		case 3:
		{
			/// clear flag reponse cmd erase
			hostPri.deviceReponseCmdErase = false;
 8005136:	4b0b      	ldr	r3, [pc, #44]	; (8005164 <hostBootLoader_waittingResponeCmdErase+0xe0>)
 8005138:	2200      	movs	r2, #0
 800513a:	765a      	strb	r2, [r3, #25]

			printf("[hostBootLoader_waittingResponeCmdErase] Erase memory successfull ....\n");
 800513c:	480d      	ldr	r0, [pc, #52]	; (8005174 <hostBootLoader_waittingResponeCmdErase+0xf0>)
 800513e:	f001 ffc1 	bl	80070c4 <puts>
		}break;
 8005142:	e009      	b.n	8005158 <hostBootLoader_waittingResponeCmdErase+0xd4>
		case 4:
		{
			/// clear flag reponse cmd erase
			hostPri.deviceReponseCmdErase = false;
 8005144:	4b07      	ldr	r3, [pc, #28]	; (8005164 <hostBootLoader_waittingResponeCmdErase+0xe0>)
 8005146:	2200      	movs	r2, #0
 8005148:	765a      	strb	r2, [r3, #25]

			printf("[hostBootLoader_waittingResponeCmdErase] Erase memory fail ....\n");
 800514a:	480b      	ldr	r0, [pc, #44]	; (8005178 <hostBootLoader_waittingResponeCmdErase+0xf4>)
 800514c:	f001 ffba 	bl	80070c4 <puts>
		}break;
 8005150:	e002      	b.n	8005158 <hostBootLoader_waittingResponeCmdErase+0xd4>
		}break;
 8005152:	bf00      	nop
 8005154:	e000      	b.n	8005158 <hostBootLoader_waittingResponeCmdErase+0xd4>
		}break;
 8005156:	bf00      	nop
	}

	return hostPri.cmdEraseState;
 8005158:	4b02      	ldr	r3, [pc, #8]	; (8005164 <hostBootLoader_waittingResponeCmdErase+0xe0>)
 800515a:	7e1b      	ldrb	r3, [r3, #24]
}
 800515c:	4618      	mov	r0, r3
 800515e:	3708      	adds	r7, #8
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	20000638 	.word	0x20000638
 8005168:	20000518 	.word	0x20000518
 800516c:	0800ad70 	.word	0x0800ad70
 8005170:	0800adac 	.word	0x0800adac
 8005174:	0800adf0 	.word	0x0800adf0
 8005178:	0800ae38 	.word	0x0800ae38

0800517c <hostBootLoader_readDataFromFlash>:

/** @brief  hostBootLoader_readDataFromFlash
    @return bool
*/
static void hostBootLoader_readDataFromFlash(hostBootLoaderPrivate_t *private, uint32_t flashStartAddress)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
    uint32_t data = 0;
 8005186:	2300      	movs	r3, #0
 8005188:	60bb      	str	r3, [r7, #8]

    /// clear buffer
    memset(private->writeData, 0, STM32_MAX_FRAME);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	331d      	adds	r3, #29
 800518e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005192:	2100      	movs	r1, #0
 8005194:	4618      	mov	r0, r3
 8005196:	f000 ff97 	bl	80060c8 <memset>

    for(uint16_t i = 0; i < STM32_MAX_FRAME; i+=4)
 800519a:	2300      	movs	r3, #0
 800519c:	81fb      	strh	r3, [r7, #14]
 800519e:	e00f      	b.n	80051c0 <hostBootLoader_readDataFromFlash+0x44>
    {
        /// read flash
        data = *(__IO uint32_t*)flashStartAddress;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	60bb      	str	r3, [r7, #8]

        memcpy(&private->writeData[i], (uint8_t *)&data, 4);
 80051a6:	89fb      	ldrh	r3, [r7, #14]
 80051a8:	3318      	adds	r3, #24
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	4413      	add	r3, r2
 80051ae:	3305      	adds	r3, #5
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	601a      	str	r2, [r3, #0]

        flashStartAddress += 4;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	3304      	adds	r3, #4
 80051b8:	603b      	str	r3, [r7, #0]
    for(uint16_t i = 0; i < STM32_MAX_FRAME; i+=4)
 80051ba:	89fb      	ldrh	r3, [r7, #14]
 80051bc:	3304      	adds	r3, #4
 80051be:	81fb      	strh	r3, [r7, #14]
 80051c0:	89fb      	ldrh	r3, [r7, #14]
 80051c2:	2bff      	cmp	r3, #255	; 0xff
 80051c4:	d9ec      	bls.n	80051a0 <hostBootLoader_readDataFromFlash+0x24>
    }
}
 80051c6:	bf00      	nop
 80051c8:	bf00      	nop
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <hostBootLoader_readMemCmd>:

/** @brief  hostBootLoader_writeMemCmd
    @return uint8_t
*/
static bool  hostBootLoader_readMemCmd(uint32_t address, uint8_t *data, uint16_t len)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b08a      	sub	sp, #40	; 0x28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	4613      	mov	r3, r2
 80051dc:	80fb      	strh	r3, [r7, #6]
	uint8_t cmdBuffer[2] = {hostPri.cmdGet.readMemoryCmd, hostPri.cmdGet.readMemoryCmd ^ 0xff};
 80051de:	4b60      	ldr	r3, [pc, #384]	; (8005360 <hostBootLoader_readMemCmd+0x190>)
 80051e0:	7a5b      	ldrb	r3, [r3, #9]
 80051e2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80051e6:	4b5e      	ldr	r3, [pc, #376]	; (8005360 <hostBootLoader_readMemCmd+0x190>)
 80051e8:	7a5b      	ldrb	r3, [r3, #9]
 80051ea:	43db      	mvns	r3, r3
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t addressBuffer[5] = {0};
 80051f2:	2300      	movs	r3, #0
 80051f4:	61fb      	str	r3, [r7, #28]
 80051f6:	2300      	movs	r3, #0
 80051f8:	f887 3020 	strb.w	r3, [r7, #32]
	uint8_t NOBbuffer[2] = {0};
 80051fc:	2300      	movs	r3, #0
 80051fe:	833b      	strh	r3, [r7, #24]
	uint8_t rData = 0;
 8005200:	2300      	movs	r3, #0
 8005202:	75fb      	strb	r3, [r7, #23]

    if(!len)
 8005204:	88fb      	ldrh	r3, [r7, #6]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d104      	bne.n	8005214 <hostBootLoader_readMemCmd+0x44>
    {
    	printf("\n[hostBootLoader_readMemCmd] len error\n");
 800520a:	4856      	ldr	r0, [pc, #344]	; (8005364 <hostBootLoader_readMemCmd+0x194>)
 800520c:	f001 ff5a 	bl	80070c4 <puts>
        return false;
 8005210:	2300      	movs	r3, #0
 8005212:	e0a0      	b.n	8005356 <hostBootLoader_readMemCmd+0x186>
    }

    if(len > STM32_MAX_FRAME)
 8005214:	88fb      	ldrh	r3, [r7, #6]
 8005216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800521a:	d904      	bls.n	8005226 <hostBootLoader_readMemCmd+0x56>
    {
        printf("\n[hostBootLoader_readMemCmd] Error: READ length limit at STM32_MAX_FRAME bytes\n");
 800521c:	4852      	ldr	r0, [pc, #328]	; (8005368 <hostBootLoader_readMemCmd+0x198>)
 800521e:	f001 ff51 	bl	80070c4 <puts>

        return false;
 8005222:	2300      	movs	r3, #0
 8005224:	e097      	b.n	8005356 <hostBootLoader_readMemCmd+0x186>
    }

    printf("[BL_readMemory_command] Read memory ....\n");
 8005226:	4851      	ldr	r0, [pc, #324]	; (800536c <hostBootLoader_readMemCmd+0x19c>)
 8005228:	f001 ff4c 	bl	80070c4 <puts>

	hostBootLoader_sendData(cmdBuffer, 2);
 800522c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005230:	2102      	movs	r1, #2
 8005232:	4618      	mov	r0, r3
 8005234:	f7ff fdea 	bl	8004e0c <hostBootLoader_sendData>

	while(rBufferHostBL.len < 1); /// waitting ack 1
 8005238:	bf00      	nop
 800523a:	4b4d      	ldr	r3, [pc, #308]	; (8005370 <hostBootLoader_readMemCmd+0x1a0>)
 800523c:	889b      	ldrh	r3, [r3, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d0fb      	beq.n	800523a <hostBootLoader_readMemCmd+0x6a>

	/// read ack 1
	if(ringBufferRead(&rBufferHostBL, &rData) == RING_BUFFER_OK)
 8005242:	f107 0317 	add.w	r3, r7, #23
 8005246:	4619      	mov	r1, r3
 8005248:	4849      	ldr	r0, [pc, #292]	; (8005370 <hostBootLoader_readMemCmd+0x1a0>)
 800524a:	f000 fdf7 	bl	8005e3c <ringBufferRead>
 800524e:	4603      	mov	r3, r0
 8005250:	2b01      	cmp	r3, #1
 8005252:	d107      	bne.n	8005264 <hostBootLoader_readMemCmd+0x94>
	{
		if(rData != UART_BOOTLOADER_ACK)
 8005254:	7dfb      	ldrb	r3, [r7, #23]
 8005256:	2b79      	cmp	r3, #121	; 0x79
 8005258:	d004      	beq.n	8005264 <hostBootLoader_readMemCmd+0x94>
		{
			printf("\n[hostBootLoader_writeMemCmd] ack error 1\n");
 800525a:	4846      	ldr	r0, [pc, #280]	; (8005374 <hostBootLoader_readMemCmd+0x1a4>)
 800525c:	f001 ff32 	bl	80070c4 <puts>
			return false;
 8005260:	2300      	movs	r3, #0
 8005262:	e078      	b.n	8005356 <hostBootLoader_readMemCmd+0x186>
		}
	}

    addressBuffer[0] = address >> 24;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	0e1b      	lsrs	r3, r3, #24
 8005268:	b2db      	uxtb	r3, r3
 800526a:	773b      	strb	r3, [r7, #28]
    addressBuffer[1] = (address >> 16) & 0xFF;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	0c1b      	lsrs	r3, r3, #16
 8005270:	b2db      	uxtb	r3, r3
 8005272:	777b      	strb	r3, [r7, #29]
    addressBuffer[2] = (address >> 8) & 0xFF;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	0a1b      	lsrs	r3, r3, #8
 8005278:	b2db      	uxtb	r3, r3
 800527a:	77bb      	strb	r3, [r7, #30]
    addressBuffer[3] = address & 0xFF;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	b2db      	uxtb	r3, r3
 8005280:	77fb      	strb	r3, [r7, #31]
    addressBuffer[4] = addressBuffer[0] ^ addressBuffer[1] ^ addressBuffer[2] ^ addressBuffer[3];
 8005282:	7f3a      	ldrb	r2, [r7, #28]
 8005284:	7f7b      	ldrb	r3, [r7, #29]
 8005286:	4053      	eors	r3, r2
 8005288:	b2da      	uxtb	r2, r3
 800528a:	7fbb      	ldrb	r3, [r7, #30]
 800528c:	4053      	eors	r3, r2
 800528e:	b2da      	uxtb	r2, r3
 8005290:	7ffb      	ldrb	r3, [r7, #31]
 8005292:	4053      	eors	r3, r2
 8005294:	b2db      	uxtb	r3, r3
 8005296:	f887 3020 	strb.w	r3, [r7, #32]

    hostBootLoader_sendData(addressBuffer, 5);
 800529a:	f107 031c 	add.w	r3, r7, #28
 800529e:	2105      	movs	r1, #5
 80052a0:	4618      	mov	r0, r3
 80052a2:	f7ff fdb3 	bl	8004e0c <hostBootLoader_sendData>

	while(rBufferHostBL.len < 1); /// waitting ack 2
 80052a6:	bf00      	nop
 80052a8:	4b31      	ldr	r3, [pc, #196]	; (8005370 <hostBootLoader_readMemCmd+0x1a0>)
 80052aa:	889b      	ldrh	r3, [r3, #4]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d0fb      	beq.n	80052a8 <hostBootLoader_readMemCmd+0xd8>

	/// read ack 2
	if(ringBufferRead(&rBufferHostBL, &rData) == RING_BUFFER_OK)
 80052b0:	f107 0317 	add.w	r3, r7, #23
 80052b4:	4619      	mov	r1, r3
 80052b6:	482e      	ldr	r0, [pc, #184]	; (8005370 <hostBootLoader_readMemCmd+0x1a0>)
 80052b8:	f000 fdc0 	bl	8005e3c <ringBufferRead>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d107      	bne.n	80052d2 <hostBootLoader_readMemCmd+0x102>
	{
		if(rData != UART_BOOTLOADER_ACK)
 80052c2:	7dfb      	ldrb	r3, [r7, #23]
 80052c4:	2b79      	cmp	r3, #121	; 0x79
 80052c6:	d004      	beq.n	80052d2 <hostBootLoader_readMemCmd+0x102>
		{
			printf("\n[hostBootLoader_writeMemCmd] ack error 2\n");
 80052c8:	482b      	ldr	r0, [pc, #172]	; (8005378 <hostBootLoader_readMemCmd+0x1a8>)
 80052ca:	f001 fefb 	bl	80070c4 <puts>
			return false;
 80052ce:	2300      	movs	r3, #0
 80052d0:	e041      	b.n	8005356 <hostBootLoader_readMemCmd+0x186>
		}
	}

	NOBbuffer[0] = len - 1;
 80052d2:	88fb      	ldrh	r3, [r7, #6]
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	3b01      	subs	r3, #1
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	763b      	strb	r3, [r7, #24]
	NOBbuffer[1] = NOBbuffer[0] ^ 0xff;
 80052dc:	7e3b      	ldrb	r3, [r7, #24]
 80052de:	43db      	mvns	r3, r3
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	767b      	strb	r3, [r7, #25]

	hostBootLoader_sendData(NOBbuffer, 2);
 80052e4:	f107 0318 	add.w	r3, r7, #24
 80052e8:	2102      	movs	r1, #2
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7ff fd8e 	bl	8004e0c <hostBootLoader_sendData>

	while(rBufferHostBL.len < 1); /// waitting ack 2
 80052f0:	bf00      	nop
 80052f2:	4b1f      	ldr	r3, [pc, #124]	; (8005370 <hostBootLoader_readMemCmd+0x1a0>)
 80052f4:	889b      	ldrh	r3, [r3, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d0fb      	beq.n	80052f2 <hostBootLoader_readMemCmd+0x122>

	/// read ack 2
	if(ringBufferRead(&rBufferHostBL, &rData) == RING_BUFFER_OK)
 80052fa:	f107 0317 	add.w	r3, r7, #23
 80052fe:	4619      	mov	r1, r3
 8005300:	481b      	ldr	r0, [pc, #108]	; (8005370 <hostBootLoader_readMemCmd+0x1a0>)
 8005302:	f000 fd9b 	bl	8005e3c <ringBufferRead>
 8005306:	4603      	mov	r3, r0
 8005308:	2b01      	cmp	r3, #1
 800530a:	d107      	bne.n	800531c <hostBootLoader_readMemCmd+0x14c>
	{
		if(rData != UART_BOOTLOADER_ACK)
 800530c:	7dfb      	ldrb	r3, [r7, #23]
 800530e:	2b79      	cmp	r3, #121	; 0x79
 8005310:	d004      	beq.n	800531c <hostBootLoader_readMemCmd+0x14c>
		{
			printf("\n[hostBootLoader_writeMemCmd] ack error 2\n");
 8005312:	4819      	ldr	r0, [pc, #100]	; (8005378 <hostBootLoader_readMemCmd+0x1a8>)
 8005314:	f001 fed6 	bl	80070c4 <puts>
			return false;
 8005318:	2300      	movs	r3, #0
 800531a:	e01c      	b.n	8005356 <hostBootLoader_readMemCmd+0x186>
		}
	}


	while(rBufferHostBL.len < STM32_MAX_FRAME); /// waitting data
 800531c:	bf00      	nop
 800531e:	4b14      	ldr	r3, [pc, #80]	; (8005370 <hostBootLoader_readMemCmd+0x1a0>)
 8005320:	889b      	ldrh	r3, [r3, #4]
 8005322:	2bff      	cmp	r3, #255	; 0xff
 8005324:	d9fb      	bls.n	800531e <hostBootLoader_readMemCmd+0x14e>

	for(uint16_t i = 0; i < STM32_MAX_FRAME; i++)
 8005326:	2300      	movs	r3, #0
 8005328:	84fb      	strh	r3, [r7, #38]	; 0x26
 800532a:	e010      	b.n	800534e <hostBootLoader_readMemCmd+0x17e>
	{
		/// read data
		if(ringBufferRead(&rBufferHostBL, &rData) == RING_BUFFER_OK)
 800532c:	f107 0317 	add.w	r3, r7, #23
 8005330:	4619      	mov	r1, r3
 8005332:	480f      	ldr	r0, [pc, #60]	; (8005370 <hostBootLoader_readMemCmd+0x1a0>)
 8005334:	f000 fd82 	bl	8005e3c <ringBufferRead>
 8005338:	4603      	mov	r3, r0
 800533a:	2b01      	cmp	r3, #1
 800533c:	d104      	bne.n	8005348 <hostBootLoader_readMemCmd+0x178>
		{
			data[i] = rData;
 800533e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005340:	68ba      	ldr	r2, [r7, #8]
 8005342:	4413      	add	r3, r2
 8005344:	7dfa      	ldrb	r2, [r7, #23]
 8005346:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i < STM32_MAX_FRAME; i++)
 8005348:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800534a:	3301      	adds	r3, #1
 800534c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800534e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005350:	2bff      	cmp	r3, #255	; 0xff
 8005352:	d9eb      	bls.n	800532c <hostBootLoader_readMemCmd+0x15c>
		}
	}

	return true;
 8005354:	2301      	movs	r3, #1
}
 8005356:	4618      	mov	r0, r3
 8005358:	3728      	adds	r7, #40	; 0x28
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	20000638 	.word	0x20000638
 8005364:	0800ae78 	.word	0x0800ae78
 8005368:	0800aea0 	.word	0x0800aea0
 800536c:	0800aef0 	.word	0x0800aef0
 8005370:	20000518 	.word	0x20000518
 8005374:	0800af1c 	.word	0x0800af1c
 8005378:	0800af48 	.word	0x0800af48

0800537c <hostBootLoader_verifyMemory>:

/** @brief  hostBootLoader_writeMemCmd
    @return uint8_t
*/
static bool hostBootLoader_verifyMemory(uint32_t address, uint8_t *dataVerify, uint16_t len)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b0c6      	sub	sp, #280	; 0x118
 8005380:	af00      	add	r7, sp, #0
 8005382:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005386:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800538a:	6018      	str	r0, [r3, #0]
 800538c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005390:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005394:	6019      	str	r1, [r3, #0]
 8005396:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800539a:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 800539e:	801a      	strh	r2, [r3, #0]
	uint8_t cmpBuffer[STM32_MAX_FRAME];
	uint16_t offset = 0;
 80053a0:	2300      	movs	r3, #0
 80053a2:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
	uint16_t rlen = 0;
 80053a6:	2300      	movs	r3, #0
 80053a8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112

	printf("\n[hostBootLoader_verifyMemory] Verify memory address 0x%x\n", (int)address);
 80053ac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80053b0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4619      	mov	r1, r3
 80053b8:	484e      	ldr	r0, [pc, #312]	; (80054f4 <hostBootLoader_verifyMemory+0x178>)
 80053ba:	f001 fdfd 	bl	8006fb8 <iprintf>

	while(offset < len)
 80053be:	e043      	b.n	8005448 <hostBootLoader_verifyMemory+0xcc>
	{
        rlen = len - offset;
 80053c0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80053c4:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 80053c8:	881a      	ldrh	r2, [r3, #0]
 80053ca:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
        rlen = rlen < STM32_MAX_FRAME ? rlen : STM32_MAX_FRAME;
 80053d4:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 80053d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053dc:	bf28      	it	cs
 80053de:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80053e2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112

        uint8_t state = 0;
 80053e6:	2300      	movs	r3, #0
 80053e8:	f887 3111 	strb.w	r3, [r7, #273]	; 0x111
        state = hostBootLoader_readMemCmd(address + offset, cmpBuffer + offset, rlen);
 80053ec:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 80053f0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80053f4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	18d0      	adds	r0, r2, r3
 80053fc:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8005400:	f107 0210 	add.w	r2, r7, #16
 8005404:	4413      	add	r3, r2
 8005406:	f8b7 2112 	ldrh.w	r2, [r7, #274]	; 0x112
 800540a:	4619      	mov	r1, r3
 800540c:	f7ff fee0 	bl	80051d0 <hostBootLoader_readMemCmd>
 8005410:	4603      	mov	r3, r0
 8005412:	f887 3111 	strb.w	r3, [r7, #273]	; 0x111
        if(state != true)
 8005416:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 800541a:	2b01      	cmp	r3, #1
 800541c:	d00d      	beq.n	800543a <hostBootLoader_verifyMemory+0xbe>
        {
        	printf("\n[hostBootLoader_verifyMemory] read memory address 0x%x fail\n", (int)(address + offset));
 800541e:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 8005422:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005426:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4413      	add	r3, r2
 800542e:	4619      	mov	r1, r3
 8005430:	4831      	ldr	r0, [pc, #196]	; (80054f8 <hostBootLoader_verifyMemory+0x17c>)
 8005432:	f001 fdc1 	bl	8006fb8 <iprintf>
            return false;
 8005436:	2300      	movs	r3, #0
 8005438:	e057      	b.n	80054ea <hostBootLoader_verifyMemory+0x16e>
        }

        offset += rlen;
 800543a:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 800543e:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 8005442:	4413      	add	r3, r2
 8005444:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
	while(offset < len)
 8005448:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800544c:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 8005450:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 8005454:	881b      	ldrh	r3, [r3, #0]
 8005456:	429a      	cmp	r2, r3
 8005458:	d3b2      	bcc.n	80053c0 <hostBootLoader_verifyMemory+0x44>
	}

    /// compare data
    for(uint16_t i = 0; i < len; i++)
 800545a:	2300      	movs	r3, #0
 800545c:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
 8005460:	e036      	b.n	80054d0 <hostBootLoader_verifyMemory+0x154>
    {
        if(dataVerify[i] != cmpBuffer[i])
 8005462:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8005466:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800546a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800546e:	6812      	ldr	r2, [r2, #0]
 8005470:	4413      	add	r3, r2
 8005472:	781a      	ldrb	r2, [r3, #0]
 8005474:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8005478:	f507 718c 	add.w	r1, r7, #280	; 0x118
 800547c:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 8005480:	5ccb      	ldrb	r3, [r1, r3]
 8005482:	429a      	cmp	r2, r3
 8005484:	d01f      	beq.n	80054c6 <hostBootLoader_verifyMemory+0x14a>
        {
			printf("Failed to verify at address 0x%08x, expected 0x%02x and found 0x%02x\n", (int)(address + i), (int)dataVerify[i], (int)cmpBuffer[i]);
 8005486:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 800548a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800548e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4413      	add	r3, r2
 8005496:	4619      	mov	r1, r3
 8005498:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 800549c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80054a0:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80054a4:	6812      	ldr	r2, [r2, #0]
 80054a6:	4413      	add	r3, r2
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	4618      	mov	r0, r3
 80054ac:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 80054b0:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80054b4:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80054b8:	5cd3      	ldrb	r3, [r2, r3]
 80054ba:	4602      	mov	r2, r0
 80054bc:	480f      	ldr	r0, [pc, #60]	; (80054fc <hostBootLoader_verifyMemory+0x180>)
 80054be:	f001 fd7b 	bl	8006fb8 <iprintf>

			return false;
 80054c2:	2300      	movs	r3, #0
 80054c4:	e011      	b.n	80054ea <hostBootLoader_verifyMemory+0x16e>
    for(uint16_t i = 0; i < len; i++)
 80054c6:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 80054ca:	3301      	adds	r3, #1
 80054cc:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
 80054d0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80054d4:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 80054d8:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 80054dc:	881b      	ldrh	r3, [r3, #0]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d3bf      	bcc.n	8005462 <hostBootLoader_verifyMemory+0xe6>
        }
    }

    printf("[hostBootLoader_verifyMemory] Verify memory successfull\n");
 80054e2:	4807      	ldr	r0, [pc, #28]	; (8005500 <hostBootLoader_verifyMemory+0x184>)
 80054e4:	f001 fdee 	bl	80070c4 <puts>

	return true;
 80054e8:	2301      	movs	r3, #1
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	0800af74 	.word	0x0800af74
 80054f8:	0800afb0 	.word	0x0800afb0
 80054fc:	0800aff0 	.word	0x0800aff0
 8005500:	0800b038 	.word	0x0800b038

08005504 <hostBootLoader_writeMemCmd>:

/** @brief  hostBootLoader_writeMemCmd
    @return bool
*/
static bool hostBootLoader_writeMemCmd(uint32_t address, uint8_t *data, uint16_t len)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b0cc      	sub	sp, #304	; 0x130
 8005508:	af00      	add	r7, sp, #0
 800550a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800550e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005512:	6018      	str	r0, [r3, #0]
 8005514:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005518:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800551c:	6019      	str	r1, [r3, #0]
 800551e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005522:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005526:	801a      	strh	r2, [r3, #0]
	uint8_t cmdBuffer[2] = {hostPri.cmdGet.writeMemoryCmd, hostPri.cmdGet.writeMemoryCmd ^ 0xff};
 8005528:	4bb3      	ldr	r3, [pc, #716]	; (80057f8 <hostBootLoader_writeMemCmd+0x2f4>)
 800552a:	7adb      	ldrb	r3, [r3, #11]
 800552c:	f887 3124 	strb.w	r3, [r7, #292]	; 0x124
 8005530:	4bb1      	ldr	r3, [pc, #708]	; (80057f8 <hostBootLoader_writeMemCmd+0x2f4>)
 8005532:	7adb      	ldrb	r3, [r3, #11]
 8005534:	43db      	mvns	r3, r3
 8005536:	b2db      	uxtb	r3, r3
 8005538:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
	uint8_t addressBuffer[5] = {0};
 800553c:	2300      	movs	r3, #0
 800553e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005542:	2300      	movs	r3, #0
 8005544:	f887 3120 	strb.w	r3, [r7, #288]	; 0x120
	uint8_t cs = 0;
 8005548:	2300      	movs	r3, #0
 800554a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	uint8_t dataBuffer[STM32_MAX_FRAME + 2] = {0};
 800554e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005552:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005556:	2200      	movs	r2, #0
 8005558:	601a      	str	r2, [r3, #0]
 800555a:	3304      	adds	r3, #4
 800555c:	22fe      	movs	r2, #254	; 0xfe
 800555e:	2100      	movs	r1, #0
 8005560:	4618      	mov	r0, r3
 8005562:	f000 fdb1 	bl	80060c8 <memset>
	uint16_t i, aligned_len;
	uint8_t rData = 0;
 8005566:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800556a:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800556e:	2200      	movs	r2, #0
 8005570:	701a      	strb	r2, [r3, #0]

	if(!len)
 8005572:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005576:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800557a:	881b      	ldrh	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d104      	bne.n	800558a <hostBootLoader_writeMemCmd+0x86>
	{
		printf("\n[hostBootLoader_writeMemCmd] len error 1\n");
 8005580:	489e      	ldr	r0, [pc, #632]	; (80057fc <hostBootLoader_writeMemCmd+0x2f8>)
 8005582:	f001 fd9f 	bl	80070c4 <puts>
		return false;
 8005586:	2300      	movs	r3, #0
 8005588:	e130      	b.n	80057ec <hostBootLoader_writeMemCmd+0x2e8>
	}

	if(len > STM32_MAX_FRAME)
 800558a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800558e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005592:	881b      	ldrh	r3, [r3, #0]
 8005594:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005598:	d904      	bls.n	80055a4 <hostBootLoader_writeMemCmd+0xa0>
	{
		printf("\n[hostBootLoader_writeMemCmd] len error 2\n");
 800559a:	4899      	ldr	r0, [pc, #612]	; (8005800 <hostBootLoader_writeMemCmd+0x2fc>)
 800559c:	f001 fd92 	bl	80070c4 <puts>
		return false;
 80055a0:	2300      	movs	r3, #0
 80055a2:	e123      	b.n	80057ec <hostBootLoader_writeMemCmd+0x2e8>
	}

	uint32_t check = address & 0x30;
 80055a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055a8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80055b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	if(check)
 80055b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d004      	beq.n	80055c8 <hostBootLoader_writeMemCmd+0xc4>
	{
		printf("\n[hostBootLoader_writeMemCmd] address error 1\n");
 80055be:	4891      	ldr	r0, [pc, #580]	; (8005804 <hostBootLoader_writeMemCmd+0x300>)
 80055c0:	f001 fd80 	bl	80070c4 <puts>
		return false;
 80055c4:	2300      	movs	r3, #0
 80055c6:	e111      	b.n	80057ec <hostBootLoader_writeMemCmd+0x2e8>
	}

	hostBootLoader_sendData(cmdBuffer, 2);
 80055c8:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80055cc:	2102      	movs	r1, #2
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7ff fc1c 	bl	8004e0c <hostBootLoader_sendData>

	while(rBufferHostBL.len < 1); /// waitting ack 1
 80055d4:	bf00      	nop
 80055d6:	4b8c      	ldr	r3, [pc, #560]	; (8005808 <hostBootLoader_writeMemCmd+0x304>)
 80055d8:	889b      	ldrh	r3, [r3, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d0fb      	beq.n	80055d6 <hostBootLoader_writeMemCmd+0xd2>

	/// read ack 1
	if(ringBufferRead(&rBufferHostBL, &rData) == RING_BUFFER_OK)
 80055de:	f107 0317 	add.w	r3, r7, #23
 80055e2:	4619      	mov	r1, r3
 80055e4:	4888      	ldr	r0, [pc, #544]	; (8005808 <hostBootLoader_writeMemCmd+0x304>)
 80055e6:	f000 fc29 	bl	8005e3c <ringBufferRead>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d10b      	bne.n	8005608 <hostBootLoader_writeMemCmd+0x104>
	{
		if(rData == UART_BOOTLOADER_NACK)
 80055f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055f4:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	2b1f      	cmp	r3, #31
 80055fc:	d104      	bne.n	8005608 <hostBootLoader_writeMemCmd+0x104>
		{
			printf("\n[hostBootLoader_writeMemCmd] ack error 1\n");
 80055fe:	4883      	ldr	r0, [pc, #524]	; (800580c <hostBootLoader_writeMemCmd+0x308>)
 8005600:	f001 fd60 	bl	80070c4 <puts>
			return false;
 8005604:	2300      	movs	r3, #0
 8005606:	e0f1      	b.n	80057ec <hostBootLoader_writeMemCmd+0x2e8>
		{
//			hostPri.deviceReponseCmdWrite = true;
		}
	}

    addressBuffer[0] = address >> 24;
 8005608:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800560c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	0e1b      	lsrs	r3, r3, #24
 8005614:	b2db      	uxtb	r3, r3
 8005616:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
    addressBuffer[1] = (address >> 16) & 0xFF;
 800561a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800561e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	0c1b      	lsrs	r3, r3, #16
 8005626:	b2db      	uxtb	r3, r3
 8005628:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
    addressBuffer[2] = (address >> 8) & 0xFF;
 800562c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005630:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	0a1b      	lsrs	r3, r3, #8
 8005638:	b2db      	uxtb	r3, r3
 800563a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    addressBuffer[3] = address & 0xFF;
 800563e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005642:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	b2db      	uxtb	r3, r3
 800564a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    addressBuffer[4] = addressBuffer[0] ^ addressBuffer[1] ^ addressBuffer[2] ^ addressBuffer[3];
 800564e:	f897 211c 	ldrb.w	r2, [r7, #284]	; 0x11c
 8005652:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8005656:	4053      	eors	r3, r2
 8005658:	b2da      	uxtb	r2, r3
 800565a:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800565e:	4053      	eors	r3, r2
 8005660:	b2da      	uxtb	r2, r3
 8005662:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005666:	4053      	eors	r3, r2
 8005668:	b2db      	uxtb	r3, r3
 800566a:	f887 3120 	strb.w	r3, [r7, #288]	; 0x120

    hostBootLoader_sendData(addressBuffer, 5);
 800566e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8005672:	2105      	movs	r1, #5
 8005674:	4618      	mov	r0, r3
 8005676:	f7ff fbc9 	bl	8004e0c <hostBootLoader_sendData>

	while(rBufferHostBL.len < 1); /// waitting ack 2
 800567a:	bf00      	nop
 800567c:	4b62      	ldr	r3, [pc, #392]	; (8005808 <hostBootLoader_writeMemCmd+0x304>)
 800567e:	889b      	ldrh	r3, [r3, #4]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d0fb      	beq.n	800567c <hostBootLoader_writeMemCmd+0x178>

	/// read ack 2
	if(ringBufferRead(&rBufferHostBL, &rData) == RING_BUFFER_OK)
 8005684:	f107 0317 	add.w	r3, r7, #23
 8005688:	4619      	mov	r1, r3
 800568a:	485f      	ldr	r0, [pc, #380]	; (8005808 <hostBootLoader_writeMemCmd+0x304>)
 800568c:	f000 fbd6 	bl	8005e3c <ringBufferRead>
 8005690:	4603      	mov	r3, r0
 8005692:	2b01      	cmp	r3, #1
 8005694:	d10b      	bne.n	80056ae <hostBootLoader_writeMemCmd+0x1aa>
	{
		if(rData == UART_BOOTLOADER_NACK)
 8005696:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800569a:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	2b1f      	cmp	r3, #31
 80056a2:	d104      	bne.n	80056ae <hostBootLoader_writeMemCmd+0x1aa>
		{
			printf("\n[hostBootLoader_writeMemCmd] ack error 2\n");
 80056a4:	485a      	ldr	r0, [pc, #360]	; (8005810 <hostBootLoader_writeMemCmd+0x30c>)
 80056a6:	f001 fd0d 	bl	80070c4 <puts>
			return false;
 80056aa:	2300      	movs	r3, #0
 80056ac:	e09e      	b.n	80057ec <hostBootLoader_writeMemCmd+0x2e8>
		}
	}

    aligned_len = (len + 3) & ~3;
 80056ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056b2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80056b6:	881b      	ldrh	r3, [r3, #0]
 80056b8:	3303      	adds	r3, #3
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	f023 0303 	bic.w	r3, r3, #3
 80056c0:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
    cs = aligned_len - 1;
 80056c4:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	3b01      	subs	r3, #1
 80056cc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    dataBuffer[0] = aligned_len - 1;
 80056d0:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	3b01      	subs	r3, #1
 80056d8:	b2da      	uxtb	r2, r3
 80056da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056de:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80056e2:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < len; i++)
 80056e4:	2300      	movs	r3, #0
 80056e6:	f8a7 312c 	strh.w	r3, [r7, #300]	; 0x12c
 80056ea:	e023      	b.n	8005734 <hostBootLoader_writeMemCmd+0x230>
    {
        cs ^= data[i];
 80056ec:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 80056f0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80056f4:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 80056f8:	6812      	ldr	r2, [r2, #0]
 80056fa:	4413      	add	r3, r2
 80056fc:	781a      	ldrb	r2, [r3, #0]
 80056fe:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005702:	4053      	eors	r3, r2
 8005704:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        dataBuffer[i + 1] = data[i];
 8005708:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 800570c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005710:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 8005714:	6812      	ldr	r2, [r2, #0]
 8005716:	441a      	add	r2, r3
 8005718:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 800571c:	3301      	adds	r3, #1
 800571e:	7811      	ldrb	r1, [r2, #0]
 8005720:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005724:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8005728:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < len; i++)
 800572a:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 800572e:	3301      	adds	r3, #1
 8005730:	f8a7 312c 	strh.w	r3, [r7, #300]	; 0x12c
 8005734:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005738:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800573c:	f8b7 212c 	ldrh.w	r2, [r7, #300]	; 0x12c
 8005740:	881b      	ldrh	r3, [r3, #0]
 8005742:	429a      	cmp	r2, r3
 8005744:	d3d2      	bcc.n	80056ec <hostBootLoader_writeMemCmd+0x1e8>
    }
    /* padding data */
    for (i = len; i < aligned_len; i++)
 8005746:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800574a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800574e:	881b      	ldrh	r3, [r3, #0]
 8005750:	f8a7 312c 	strh.w	r3, [r7, #300]	; 0x12c
 8005754:	e012      	b.n	800577c <hostBootLoader_writeMemCmd+0x278>
    {
        cs ^= 0xFF;
 8005756:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800575a:	43db      	mvns	r3, r3
 800575c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        dataBuffer[i + 1] = 0xFF;
 8005760:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 8005764:	3301      	adds	r3, #1
 8005766:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800576a:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800576e:	21ff      	movs	r1, #255	; 0xff
 8005770:	54d1      	strb	r1, [r2, r3]
    for (i = len; i < aligned_len; i++)
 8005772:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 8005776:	3301      	adds	r3, #1
 8005778:	f8a7 312c 	strh.w	r3, [r7, #300]	; 0x12c
 800577c:	f8b7 212c 	ldrh.w	r2, [r7, #300]	; 0x12c
 8005780:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8005784:	429a      	cmp	r2, r3
 8005786:	d3e6      	bcc.n	8005756 <hostBootLoader_writeMemCmd+0x252>
    }
    dataBuffer[aligned_len + 1] = cs;
 8005788:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 800578c:	3301      	adds	r3, #1
 800578e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005792:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8005796:	f897 112f 	ldrb.w	r1, [r7, #303]	; 0x12f
 800579a:	54d1      	strb	r1, [r2, r3]

    hostBootLoader_sendData(dataBuffer, aligned_len + 2);
 800579c:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 80057a0:	3302      	adds	r3, #2
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	f107 0318 	add.w	r3, r7, #24
 80057a8:	4611      	mov	r1, r2
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7ff fb2e 	bl	8004e0c <hostBootLoader_sendData>

	while(rBufferHostBL.len < 1); /// waitting ack 3
 80057b0:	bf00      	nop
 80057b2:	4b15      	ldr	r3, [pc, #84]	; (8005808 <hostBootLoader_writeMemCmd+0x304>)
 80057b4:	889b      	ldrh	r3, [r3, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d0fb      	beq.n	80057b2 <hostBootLoader_writeMemCmd+0x2ae>

	/// read ack 3
	if(ringBufferRead(&rBufferHostBL, &rData) == RING_BUFFER_OK)
 80057ba:	f107 0317 	add.w	r3, r7, #23
 80057be:	4619      	mov	r1, r3
 80057c0:	4811      	ldr	r0, [pc, #68]	; (8005808 <hostBootLoader_writeMemCmd+0x304>)
 80057c2:	f000 fb3b 	bl	8005e3c <ringBufferRead>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d10e      	bne.n	80057ea <hostBootLoader_writeMemCmd+0x2e6>
	{
		if(rData == UART_BOOTLOADER_NACK)
 80057cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057d0:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	2b1f      	cmp	r3, #31
 80057d8:	d104      	bne.n	80057e4 <hostBootLoader_writeMemCmd+0x2e0>
		{
			printf("\n[hostBootLoader_writeMemCmd] ack error 3\n");
 80057da:	480e      	ldr	r0, [pc, #56]	; (8005814 <hostBootLoader_writeMemCmd+0x310>)
 80057dc:	f001 fc72 	bl	80070c4 <puts>
			return false;
 80057e0:	2300      	movs	r3, #0
 80057e2:	e003      	b.n	80057ec <hostBootLoader_writeMemCmd+0x2e8>
		}
		else
		{
//			hostPri.deviceReponseCmdWrite = false;
			printf("\n[hostBootLoader_writeMemCmd] write memory successful\n");
 80057e4:	480c      	ldr	r0, [pc, #48]	; (8005818 <hostBootLoader_writeMemCmd+0x314>)
 80057e6:	f001 fc6d 	bl	80070c4 <puts>
		}
	}

	return true;
 80057ea:	2301      	movs	r3, #1
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	20000638 	.word	0x20000638
 80057fc:	0800b070 	.word	0x0800b070
 8005800:	0800b09c 	.word	0x0800b09c
 8005804:	0800b0c8 	.word	0x0800b0c8
 8005808:	20000518 	.word	0x20000518
 800580c:	0800af1c 	.word	0x0800af1c
 8005810:	0800af48 	.word	0x0800af48
 8005814:	0800b0f8 	.word	0x0800b0f8
 8005818:	0800b124 	.word	0x0800b124

0800581c <hostBootLoader_waittingResponeCmdWriteMem>:

/** @brief  hostBootLoader_waittingResponeCmdWriteMem
    @return bool
*/
static bool hostBootLoader_waittingResponeCmdWriteMem(void)
{
 800581c:	b590      	push	{r4, r7, lr}
 800581e:	b08b      	sub	sp, #44	; 0x2c
 8005820:	af00      	add	r7, sp, #0
    uint32_t flashAddress = 0x08020000;
 8005822:	4b51      	ldr	r3, [pc, #324]	; (8005968 <hostBootLoader_waittingResponeCmdWriteMem+0x14c>)
 8005824:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t maxDataLength = 0x2b6b8;
 8005826:	4b51      	ldr	r3, [pc, #324]	; (800596c <hostBootLoader_waittingResponeCmdWriteMem+0x150>)
 8005828:	617b      	str	r3, [r7, #20]
    uint32_t start = 0x08020000;
 800582a:	4b4f      	ldr	r3, [pc, #316]	; (8005968 <hostBootLoader_waittingResponeCmdWriteMem+0x14c>)
 800582c:	613b      	str	r3, [r7, #16]
    uint32_t end = start + maxDataLength;
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	4413      	add	r3, r2
 8005834:	60fb      	str	r3, [r7, #12]
    uint32_t left;
    uint16_t len = 0;
 8005836:	2300      	movs	r3, #0
 8005838:	847b      	strh	r3, [r7, #34]	; 0x22
    uint32_t addr = start;
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	61fb      	str	r3, [r7, #28]
    uint32_t offset = 0;
 800583e:	2300      	movs	r3, #0
 8005840:	61bb      	str	r3, [r7, #24]
    uint16_t size = end - start;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	b29a      	uxth	r2, r3
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	b29b      	uxth	r3, r3
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	817b      	strh	r3, [r7, #10]

    while(addr < end && offset < size)
 800584e:	bf00      	nop
 8005850:	e07b      	b.n	800594a <hostBootLoader_waittingResponeCmdWriteMem+0x12e>
    {
    	switch(hostPri.cmdWriteMemState)
 8005852:	4b47      	ldr	r3, [pc, #284]	; (8005970 <hostBootLoader_waittingResponeCmdWriteMem+0x154>)
 8005854:	7e9b      	ldrb	r3, [r3, #26]
 8005856:	2b05      	cmp	r3, #5
 8005858:	d877      	bhi.n	800594a <hostBootLoader_waittingResponeCmdWriteMem+0x12e>
 800585a:	a201      	add	r2, pc, #4	; (adr r2, 8005860 <hostBootLoader_waittingResponeCmdWriteMem+0x44>)
 800585c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005860:	08005879 	.word	0x08005879
 8005864:	08005889 	.word	0x08005889
 8005868:	080058c9 	.word	0x080058c9
 800586c:	080058f3 	.word	0x080058f3
 8005870:	0800594b 	.word	0x0800594b
 8005874:	08005949 	.word	0x08005949
    	{
    		case 0: /// read source data from flash
    		{
    			hostBootLoader_readDataFromFlash(&hostPri, flashAddress);
 8005878:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800587a:	483d      	ldr	r0, [pc, #244]	; (8005970 <hostBootLoader_waittingResponeCmdWriteMem+0x154>)
 800587c:	f7ff fc7e 	bl	800517c <hostBootLoader_readDataFromFlash>

    			hostPri.cmdWriteMemState = 1;
 8005880:	4b3b      	ldr	r3, [pc, #236]	; (8005970 <hostBootLoader_waittingResponeCmdWriteMem+0x154>)
 8005882:	2201      	movs	r2, #1
 8005884:	769a      	strb	r2, [r3, #26]
    		}break;
 8005886:	e060      	b.n	800594a <hostBootLoader_waittingResponeCmdWriteMem+0x12e>
    		case 1: /// calculator address offset and write to memory
    		{
    	        left = end - addr;
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	607b      	str	r3, [r7, #4]
    	        len = STM32_MAX_FRAME > left ? left : STM32_MAX_FRAME;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005896:	bf28      	it	cs
 8005898:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800589c:	847b      	strh	r3, [r7, #34]	; 0x22
    	        len = len > (size - offset) ? (size - offset) : len;
 800589e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80058a0:	8979      	ldrh	r1, [r7, #10]
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	1acb      	subs	r3, r1, r3
 80058a6:	4293      	cmp	r3, r2
 80058a8:	bf28      	it	cs
 80058aa:	4613      	movcs	r3, r2
 80058ac:	847b      	strh	r3, [r7, #34]	; 0x22

    			if(hostBootLoader_writeMemCmd(addr, hostPri.writeData, STM32_MAX_FRAME) == true)
 80058ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058b2:	4930      	ldr	r1, [pc, #192]	; (8005974 <hostBootLoader_waittingResponeCmdWriteMem+0x158>)
 80058b4:	69f8      	ldr	r0, [r7, #28]
 80058b6:	f7ff fe25 	bl	8005504 <hostBootLoader_writeMemCmd>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d044      	beq.n	800594a <hostBootLoader_waittingResponeCmdWriteMem+0x12e>
    			{
    				hostPri.cmdWriteMemState = 2;
 80058c0:	4b2b      	ldr	r3, [pc, #172]	; (8005970 <hostBootLoader_waittingResponeCmdWriteMem+0x154>)
 80058c2:	2202      	movs	r2, #2
 80058c4:	769a      	strb	r2, [r3, #26]
    			}
    		}break;
 80058c6:	e040      	b.n	800594a <hostBootLoader_waittingResponeCmdWriteMem+0x12e>
    		case 2: /// verify memory after write
    		{
    			static bool state = false;
    			state = hostBootLoader_verifyMemory(addr, hostPri.writeData, STM32_MAX_FRAME);
 80058c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058cc:	4929      	ldr	r1, [pc, #164]	; (8005974 <hostBootLoader_waittingResponeCmdWriteMem+0x158>)
 80058ce:	69f8      	ldr	r0, [r7, #28]
 80058d0:	f7ff fd54 	bl	800537c <hostBootLoader_verifyMemory>
 80058d4:	4603      	mov	r3, r0
 80058d6:	461a      	mov	r2, r3
 80058d8:	4b27      	ldr	r3, [pc, #156]	; (8005978 <hostBootLoader_waittingResponeCmdWriteMem+0x15c>)
 80058da:	701a      	strb	r2, [r3, #0]
    			if(state == true)
 80058dc:	4b26      	ldr	r3, [pc, #152]	; (8005978 <hostBootLoader_waittingResponeCmdWriteMem+0x15c>)
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d032      	beq.n	800594a <hostBootLoader_waittingResponeCmdWriteMem+0x12e>
    			{
    				state = false;
 80058e4:	4b24      	ldr	r3, [pc, #144]	; (8005978 <hostBootLoader_waittingResponeCmdWriteMem+0x15c>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	701a      	strb	r2, [r3, #0]

    				hostPri.cmdWriteMemState = 3;
 80058ea:	4b21      	ldr	r3, [pc, #132]	; (8005970 <hostBootLoader_waittingResponeCmdWriteMem+0x154>)
 80058ec:	2203      	movs	r2, #3
 80058ee:	769a      	strb	r2, [r3, #26]
    			}
    		}break;
 80058f0:	e02b      	b.n	800594a <hostBootLoader_waittingResponeCmdWriteMem+0x12e>
    		case 3: /// calculator next address
    		{
    	        addr += len;
 80058f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80058f4:	69fa      	ldr	r2, [r7, #28]
 80058f6:	4413      	add	r3, r2
 80058f8:	61fb      	str	r3, [r7, #28]
    	        offset += len;
 80058fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80058fc:	69ba      	ldr	r2, [r7, #24]
 80058fe:	4413      	add	r3, r2
 8005900:	61bb      	str	r3, [r7, #24]
    	        flashAddress += len;
 8005902:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005906:	4413      	add	r3, r2
 8005908:	627b      	str	r3, [r7, #36]	; 0x24
    	        printf("\r[hostBootLoader_waittingResponeCmdWriteMem] Wrote address 0x%08x (%.2f%%) ", (int)addr, (100.0f / size) * offset);
 800590a:	69fc      	ldr	r4, [r7, #28]
 800590c:	897b      	ldrh	r3, [r7, #10]
 800590e:	ee07 3a90 	vmov	s15, r3
 8005912:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005916:	eddf 6a19 	vldr	s13, [pc, #100]	; 800597c <hostBootLoader_waittingResponeCmdWriteMem+0x160>
 800591a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	ee07 3a90 	vmov	s15, r3
 8005924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005928:	ee67 7a27 	vmul.f32	s15, s14, s15
 800592c:	ee17 0a90 	vmov	r0, s15
 8005930:	f7fa fe0a 	bl	8000548 <__aeabi_f2d>
 8005934:	4602      	mov	r2, r0
 8005936:	460b      	mov	r3, r1
 8005938:	4621      	mov	r1, r4
 800593a:	4811      	ldr	r0, [pc, #68]	; (8005980 <hostBootLoader_waittingResponeCmdWriteMem+0x164>)
 800593c:	f001 fb3c 	bl	8006fb8 <iprintf>

    	        hostPri.cmdWriteMemState = 0;
 8005940:	4b0b      	ldr	r3, [pc, #44]	; (8005970 <hostBootLoader_waittingResponeCmdWriteMem+0x154>)
 8005942:	2200      	movs	r2, #0
 8005944:	769a      	strb	r2, [r3, #26]
    		}break;
 8005946:	e000      	b.n	800594a <hostBootLoader_waittingResponeCmdWriteMem+0x12e>

    		}break;
    		case 5:
    		{

    		}break;
 8005948:	bf00      	nop
    while(addr < end && offset < size)
 800594a:	69fa      	ldr	r2, [r7, #28]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	429a      	cmp	r2, r3
 8005950:	d204      	bcs.n	800595c <hostBootLoader_waittingResponeCmdWriteMem+0x140>
 8005952:	897b      	ldrh	r3, [r7, #10]
 8005954:	69ba      	ldr	r2, [r7, #24]
 8005956:	429a      	cmp	r2, r3
 8005958:	f4ff af7b 	bcc.w	8005852 <hostBootLoader_waittingResponeCmdWriteMem+0x36>
    	}
    }

	return true;
 800595c:	2301      	movs	r3, #1
}
 800595e:	4618      	mov	r0, r3
 8005960:	372c      	adds	r7, #44	; 0x2c
 8005962:	46bd      	mov	sp, r7
 8005964:	bd90      	pop	{r4, r7, pc}
 8005966:	bf00      	nop
 8005968:	08020000 	.word	0x08020000
 800596c:	0002b6b8 	.word	0x0002b6b8
 8005970:	20000638 	.word	0x20000638
 8005974:	20000655 	.word	0x20000655
 8005978:	20000758 	.word	0x20000758
 800597c:	42c80000 	.word	0x42c80000
 8005980:	0800b15c 	.word	0x0800b15c

08005984 <hostBootLoader_waittingResponeCmdGo>:

/** @brief  hostBootLoader_waittingResponeCmdGo
    @return bool
*/
static bool hostBootLoader_waittingResponeCmdGo(void)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
	uint8_t rData = 0;
 800598a:	2300      	movs	r3, #0
 800598c:	71fb      	strb	r3, [r7, #7]

	if(rBufferHostBL.len == 1)
 800598e:	4b0c      	ldr	r3, [pc, #48]	; (80059c0 <hostBootLoader_waittingResponeCmdGo+0x3c>)
 8005990:	889b      	ldrh	r3, [r3, #4]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d10f      	bne.n	80059b6 <hostBootLoader_waittingResponeCmdGo+0x32>
	{
		if(ringBufferRead(&rBufferHostBL, &rData) == RING_BUFFER_OK)
 8005996:	1dfb      	adds	r3, r7, #7
 8005998:	4619      	mov	r1, r3
 800599a:	4809      	ldr	r0, [pc, #36]	; (80059c0 <hostBootLoader_waittingResponeCmdGo+0x3c>)
 800599c:	f000 fa4e 	bl	8005e3c <ringBufferRead>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d107      	bne.n	80059b6 <hostBootLoader_waittingResponeCmdGo+0x32>
		{
			if(rData == UART_BOOTLOADER_ACK)
 80059a6:	79fb      	ldrb	r3, [r7, #7]
 80059a8:	2b79      	cmp	r3, #121	; 0x79
 80059aa:	d104      	bne.n	80059b6 <hostBootLoader_waittingResponeCmdGo+0x32>
			{
				printf("\n[hostBootLoader_waittingResponeCmdGo] device disconnect !@!\n");
 80059ac:	4805      	ldr	r0, [pc, #20]	; (80059c4 <hostBootLoader_waittingResponeCmdGo+0x40>)
 80059ae:	f001 fb89 	bl	80070c4 <puts>
				return true;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e000      	b.n	80059b8 <hostBootLoader_waittingResponeCmdGo+0x34>
			}
		}
	}
	return false;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3708      	adds	r7, #8
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	20000518 	.word	0x20000518
 80059c4:	0800b1a8 	.word	0x0800b1a8

080059c8 <hostBootLoader_readCommand>:

/** @brief  hostBootLoader_readCommand
    @return number of command
*/
static hostBootLoaderState_t hostBootLoader_readCommand(void)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	af00      	add	r7, sp, #0
	static hostBootLoaderState_t state = HOST_BOOTLOADER_STATE_CONNECTED;

		switch(host->hostCmd[0])
 80059cc:	4b63      	ldr	r3, [pc, #396]	; (8005b5c <hostBootLoader_readCommand+0x194>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	78db      	ldrb	r3, [r3, #3]
 80059d2:	2b7f      	cmp	r3, #127	; 0x7f
 80059d4:	d05b      	beq.n	8005a8e <hostBootLoader_readCommand+0xc6>
 80059d6:	2b7f      	cmp	r3, #127	; 0x7f
 80059d8:	f300 80bc 	bgt.w	8005b54 <hostBootLoader_readCommand+0x18c>
 80059dc:	2b44      	cmp	r3, #68	; 0x44
 80059de:	f000 808f 	beq.w	8005b00 <hostBootLoader_readCommand+0x138>
 80059e2:	2b44      	cmp	r3, #68	; 0x44
 80059e4:	f300 80b6 	bgt.w	8005b54 <hostBootLoader_readCommand+0x18c>
 80059e8:	2b21      	cmp	r3, #33	; 0x21
 80059ea:	dc4d      	bgt.n	8005a88 <hostBootLoader_readCommand+0xc0>
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f2c0 80b1 	blt.w	8005b54 <hostBootLoader_readCommand+0x18c>
 80059f2:	2b21      	cmp	r3, #33	; 0x21
 80059f4:	f200 80ae 	bhi.w	8005b54 <hostBootLoader_readCommand+0x18c>
 80059f8:	a201      	add	r2, pc, #4	; (adr r2, 8005a00 <hostBootLoader_readCommand+0x38>)
 80059fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059fe:	bf00      	nop
 8005a00:	08005aa7 	.word	0x08005aa7
 8005a04:	08005b55 	.word	0x08005b55
 8005a08:	08005abf 	.word	0x08005abf
 8005a0c:	08005b55 	.word	0x08005b55
 8005a10:	08005b55 	.word	0x08005b55
 8005a14:	08005b55 	.word	0x08005b55
 8005a18:	08005b55 	.word	0x08005b55
 8005a1c:	08005b55 	.word	0x08005b55
 8005a20:	08005b55 	.word	0x08005b55
 8005a24:	08005b55 	.word	0x08005b55
 8005a28:	08005b55 	.word	0x08005b55
 8005a2c:	08005b55 	.word	0x08005b55
 8005a30:	08005b55 	.word	0x08005b55
 8005a34:	08005b55 	.word	0x08005b55
 8005a38:	08005b55 	.word	0x08005b55
 8005a3c:	08005b55 	.word	0x08005b55
 8005a40:	08005b55 	.word	0x08005b55
 8005a44:	08005b55 	.word	0x08005b55
 8005a48:	08005b55 	.word	0x08005b55
 8005a4c:	08005b55 	.word	0x08005b55
 8005a50:	08005b55 	.word	0x08005b55
 8005a54:	08005b55 	.word	0x08005b55
 8005a58:	08005b55 	.word	0x08005b55
 8005a5c:	08005b55 	.word	0x08005b55
 8005a60:	08005b55 	.word	0x08005b55
 8005a64:	08005b55 	.word	0x08005b55
 8005a68:	08005b55 	.word	0x08005b55
 8005a6c:	08005b55 	.word	0x08005b55
 8005a70:	08005b55 	.word	0x08005b55
 8005a74:	08005b55 	.word	0x08005b55
 8005a78:	08005b55 	.word	0x08005b55
 8005a7c:	08005b55 	.word	0x08005b55
 8005a80:	08005b55 	.word	0x08005b55
 8005a84:	08005ad7 	.word	0x08005ad7
 8005a88:	2b31      	cmp	r3, #49	; 0x31
 8005a8a:	d02d      	beq.n	8005ae8 <hostBootLoader_readCommand+0x120>
 8005a8c:	e062      	b.n	8005b54 <hostBootLoader_readCommand+0x18c>
		{
			case UART_BOOTLOADER_CMD_CONNECT:
			{
				if(hostBootLoader_waittingResponeCmdConnect() == true)
 8005a8e:	f7ff fa2f 	bl	8004ef0 <hostBootLoader_waittingResponeCmdConnect>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d052      	beq.n	8005b3e <hostBootLoader_readCommand+0x176>
				{
					hostPri.timeSendCmd = 0;
 8005a98:	4b31      	ldr	r3, [pc, #196]	; (8005b60 <hostBootLoader_readCommand+0x198>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	601a      	str	r2, [r3, #0]
					state = HOST_BOOTLOADER_STATE_CMD_GET;
 8005a9e:	4b31      	ldr	r3, [pc, #196]	; (8005b64 <hostBootLoader_readCommand+0x19c>)
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	701a      	strb	r2, [r3, #0]
				}
				else
				{

				}
			}break;
 8005aa4:	e04b      	b.n	8005b3e <hostBootLoader_readCommand+0x176>
			case UART_BOOTLOADER_CMD_GET:
			{
				if(hostBootLoader_waittingResponeCmdGet() == true)
 8005aa6:	f7ff fa45 	bl	8004f34 <hostBootLoader_waittingResponeCmdGet>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d048      	beq.n	8005b42 <hostBootLoader_readCommand+0x17a>
				{
					hostPri.timeSendCmd = 0;
 8005ab0:	4b2b      	ldr	r3, [pc, #172]	; (8005b60 <hostBootLoader_readCommand+0x198>)
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	601a      	str	r2, [r3, #0]
					state = HOST_BOOTLOADER_STATE_GET_ID;
 8005ab6:	4b2b      	ldr	r3, [pc, #172]	; (8005b64 <hostBootLoader_readCommand+0x19c>)
 8005ab8:	2202      	movs	r2, #2
 8005aba:	701a      	strb	r2, [r3, #0]
				}
				else
				{

				}
			}break;
 8005abc:	e041      	b.n	8005b42 <hostBootLoader_readCommand+0x17a>
			{

			}break;
			case UART_BOOTLOADER_CMD_GET_ID:
			{
				if(hostBootLoader_waittingResponeCmdGetId() == true)
 8005abe:	f7ff fa93 	bl	8004fe8 <hostBootLoader_waittingResponeCmdGetId>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d03e      	beq.n	8005b46 <hostBootLoader_readCommand+0x17e>
				{
					hostPri.timeSendCmd = 0;
 8005ac8:	4b25      	ldr	r3, [pc, #148]	; (8005b60 <hostBootLoader_readCommand+0x198>)
 8005aca:	2200      	movs	r2, #0
 8005acc:	601a      	str	r2, [r3, #0]
					state = HOST_BOOTLOADER_STATE_ERASE;
 8005ace:	4b25      	ldr	r3, [pc, #148]	; (8005b64 <hostBootLoader_readCommand+0x19c>)
 8005ad0:	2203      	movs	r2, #3
 8005ad2:	701a      	strb	r2, [r3, #0]
				}
				else
				{

				}
			}break;
 8005ad4:	e037      	b.n	8005b46 <hostBootLoader_readCommand+0x17e>
			{

			}break;
			case UART_BOOTLOADER_CMD_GO:
			{
				if(hostBootLoader_waittingResponeCmdGo() == true)
 8005ad6:	f7ff ff55 	bl	8005984 <hostBootLoader_waittingResponeCmdGo>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d034      	beq.n	8005b4a <hostBootLoader_readCommand+0x182>
				{
					state = HOST_BOOTLOADER_STATE_DONE;
 8005ae0:	4b20      	ldr	r3, [pc, #128]	; (8005b64 <hostBootLoader_readCommand+0x19c>)
 8005ae2:	2206      	movs	r2, #6
 8005ae4:	701a      	strb	r2, [r3, #0]
				}
			}break;
 8005ae6:	e030      	b.n	8005b4a <hostBootLoader_readCommand+0x182>
			case UART_BOOTLOADER_CMD_WRITE_MEMORY:
			{
				if(hostBootLoader_waittingResponeCmdWriteMem() == true)
 8005ae8:	f7ff fe98 	bl	800581c <hostBootLoader_waittingResponeCmdWriteMem>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d02d      	beq.n	8005b4e <hostBootLoader_readCommand+0x186>
				{
					hostPri.timeSendCmd = 0;
 8005af2:	4b1b      	ldr	r3, [pc, #108]	; (8005b60 <hostBootLoader_readCommand+0x198>)
 8005af4:	2200      	movs	r2, #0
 8005af6:	601a      	str	r2, [r3, #0]
					state = HOST_BOOTLOADER_STATE_CMD_GO;
 8005af8:	4b1a      	ldr	r3, [pc, #104]	; (8005b64 <hostBootLoader_readCommand+0x19c>)
 8005afa:	2205      	movs	r2, #5
 8005afc:	701a      	strb	r2, [r3, #0]
				}
			}break;
 8005afe:	e026      	b.n	8005b4e <hostBootLoader_readCommand+0x186>
			case UART_BOOTLOADER_CMD_ERASE:
			{
				static uint8_t _state = 0;
				_state = hostBootLoader_waittingResponeCmdErase();
 8005b00:	f7ff fac0 	bl	8005084 <hostBootLoader_waittingResponeCmdErase>
 8005b04:	4603      	mov	r3, r0
 8005b06:	461a      	mov	r2, r3
 8005b08:	4b17      	ldr	r3, [pc, #92]	; (8005b68 <hostBootLoader_readCommand+0x1a0>)
 8005b0a:	701a      	strb	r2, [r3, #0]
				if(_state == 3)
 8005b0c:	4b16      	ldr	r3, [pc, #88]	; (8005b68 <hostBootLoader_readCommand+0x1a0>)
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	2b03      	cmp	r3, #3
 8005b12:	d109      	bne.n	8005b28 <hostBootLoader_readCommand+0x160>
				{
					_state = 0;
 8005b14:	4b14      	ldr	r3, [pc, #80]	; (8005b68 <hostBootLoader_readCommand+0x1a0>)
 8005b16:	2200      	movs	r2, #0
 8005b18:	701a      	strb	r2, [r3, #0]
					hostPri.timeSendCmd = 0;
 8005b1a:	4b11      	ldr	r3, [pc, #68]	; (8005b60 <hostBootLoader_readCommand+0x198>)
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	601a      	str	r2, [r3, #0]
					state = HOST_BOOTLOADER_STATE_WRITE;
 8005b20:	4b10      	ldr	r3, [pc, #64]	; (8005b64 <hostBootLoader_readCommand+0x19c>)
 8005b22:	2204      	movs	r2, #4
 8005b24:	701a      	strb	r2, [r3, #0]
				}
				else
				{

				}
			}break;
 8005b26:	e014      	b.n	8005b52 <hostBootLoader_readCommand+0x18a>
				else if(state == 4)
 8005b28:	4b0e      	ldr	r3, [pc, #56]	; (8005b64 <hostBootLoader_readCommand+0x19c>)
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	2b04      	cmp	r3, #4
 8005b2e:	d110      	bne.n	8005b52 <hostBootLoader_readCommand+0x18a>
					_state = 0;
 8005b30:	4b0d      	ldr	r3, [pc, #52]	; (8005b68 <hostBootLoader_readCommand+0x1a0>)
 8005b32:	2200      	movs	r2, #0
 8005b34:	701a      	strb	r2, [r3, #0]
					state = HOST_BOOTLOADER_STATE_ERROR;
 8005b36:	4b0b      	ldr	r3, [pc, #44]	; (8005b64 <hostBootLoader_readCommand+0x19c>)
 8005b38:	2207      	movs	r2, #7
 8005b3a:	701a      	strb	r2, [r3, #0]
			}break;
 8005b3c:	e009      	b.n	8005b52 <hostBootLoader_readCommand+0x18a>
			}break;
 8005b3e:	bf00      	nop
 8005b40:	e008      	b.n	8005b54 <hostBootLoader_readCommand+0x18c>
			}break;
 8005b42:	bf00      	nop
 8005b44:	e006      	b.n	8005b54 <hostBootLoader_readCommand+0x18c>
			}break;
 8005b46:	bf00      	nop
 8005b48:	e004      	b.n	8005b54 <hostBootLoader_readCommand+0x18c>
			}break;
 8005b4a:	bf00      	nop
 8005b4c:	e002      	b.n	8005b54 <hostBootLoader_readCommand+0x18c>
			}break;
 8005b4e:	bf00      	nop
 8005b50:	e000      	b.n	8005b54 <hostBootLoader_readCommand+0x18c>
			}break;
 8005b52:	bf00      	nop
		}

	return state;
 8005b54:	4b03      	ldr	r3, [pc, #12]	; (8005b64 <hostBootLoader_readCommand+0x19c>)
 8005b56:	781b      	ldrb	r3, [r3, #0]
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	20000630 	.word	0x20000630
 8005b60:	20000638 	.word	0x20000638
 8005b64:	20000759 	.word	0x20000759
 8005b68:	2000075a 	.word	0x2000075a

08005b6c <hostUartBootLoaderProcess>:
#define __HOST_UART_BOOTLOADER_PROCESS
/** @brief  hostUartBootLoaderProcess
    @return none
*/
void hostUartBootLoaderProcess(void)
{
 8005b6c:	b598      	push	{r3, r4, r7, lr}
 8005b6e:	af00      	add	r7, sp, #0
	static uint32_t timeSendCmd = 0;
	static uint8_t lostConnectCount = 0;

	if(__cmdCli()->flagMsgJumTarget == true)
 8005b70:	f000 f9fe 	bl	8005f70 <__cmdCli>
 8005b74:	4603      	mov	r3, r0
 8005b76:	785b      	ldrb	r3, [r3, #1]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d003      	beq.n	8005b84 <hostUartBootLoaderProcess+0x18>
	{
		host->isBootLoader = true;
 8005b7c:	4b7c      	ldr	r3, [pc, #496]	; (8005d70 <hostUartBootLoaderProcess+0x204>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2201      	movs	r2, #1
 8005b82:	701a      	strb	r2, [r3, #0]
	}

	if(host->isBootLoader == true)
 8005b84:	4b7a      	ldr	r3, [pc, #488]	; (8005d70 <hostUartBootLoaderProcess+0x204>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f000 80ed 	beq.w	8005d6a <hostUartBootLoaderProcess+0x1fe>
	{
		if(host->uartConfigForHwBL == false)
 8005b90:	4b77      	ldr	r3, [pc, #476]	; (8005d70 <hostUartBootLoaderProcess+0x204>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	785b      	ldrb	r3, [r3, #1]
 8005b96:	f083 0301 	eor.w	r3, r3, #1
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d009      	beq.n	8005bb4 <hostUartBootLoaderProcess+0x48>
		{
			host->uartConfigForHwBL = true;
 8005ba0:	4b73      	ldr	r3, [pc, #460]	; (8005d70 <hostUartBootLoaderProcess+0x204>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	705a      	strb	r2, [r3, #1]

			printf("\n[hostUartBootLoaderProcess] re config uart for boot loader\n");
 8005ba8:	4872      	ldr	r0, [pc, #456]	; (8005d74 <hostUartBootLoaderProcess+0x208>)
 8005baa:	f001 fa8b 	bl	80070c4 <puts>

			hostBootLoader_uartConfigForBL();
 8005bae:	f7ff f8cd 	bl	8004d4c <hostBootLoader_uartConfigForBL>
	}
	else
	{
//		mavlinkControl_process();
	}
}
 8005bb2:	e0da      	b.n	8005d6a <hostUartBootLoaderProcess+0x1fe>
			host->state = hostBootLoader_readCommand();
 8005bb4:	4b6e      	ldr	r3, [pc, #440]	; (8005d70 <hostUartBootLoaderProcess+0x204>)
 8005bb6:	681c      	ldr	r4, [r3, #0]
 8005bb8:	f7ff ff06 	bl	80059c8 <hostBootLoader_readCommand>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	7163      	strb	r3, [r4, #5]
			switch(host->state)
 8005bc0:	4b6b      	ldr	r3, [pc, #428]	; (8005d70 <hostUartBootLoaderProcess+0x204>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	795b      	ldrb	r3, [r3, #5]
 8005bc6:	2b07      	cmp	r3, #7
 8005bc8:	f200 80cf 	bhi.w	8005d6a <hostUartBootLoaderProcess+0x1fe>
 8005bcc:	a201      	add	r2, pc, #4	; (adr r2, 8005bd4 <hostUartBootLoaderProcess+0x68>)
 8005bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd2:	bf00      	nop
 8005bd4:	08005bf5 	.word	0x08005bf5
 8005bd8:	08005c3d 	.word	0x08005c3d
 8005bdc:	08005c63 	.word	0x08005c63
 8005be0:	08005c87 	.word	0x08005c87
 8005be4:	08005cb9 	.word	0x08005cb9
 8005be8:	08005cf9 	.word	0x08005cf9
 8005bec:	08005d1d 	.word	0x08005d1d
 8005bf0:	08005d35 	.word	0x08005d35
					if(getTime(&hostPri.timeSendCmd, 1000) == true)
 8005bf4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005bf8:	485f      	ldr	r0, [pc, #380]	; (8005d78 <hostUartBootLoaderProcess+0x20c>)
 8005bfa:	f7ff f889 	bl	8004d10 <getTime>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f000 80a3 	beq.w	8005d4c <hostUartBootLoaderProcess+0x1e0>
						if(++lostConnectCount > 5)
 8005c06:	4b5d      	ldr	r3, [pc, #372]	; (8005d7c <hostUartBootLoaderProcess+0x210>)
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	b2da      	uxtb	r2, r3
 8005c0e:	4b5b      	ldr	r3, [pc, #364]	; (8005d7c <hostUartBootLoaderProcess+0x210>)
 8005c10:	701a      	strb	r2, [r3, #0]
 8005c12:	4b5a      	ldr	r3, [pc, #360]	; (8005d7c <hostUartBootLoaderProcess+0x210>)
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	2b05      	cmp	r3, #5
 8005c18:	d908      	bls.n	8005c2c <hostUartBootLoaderProcess+0xc0>
							lostConnectCount = 0;
 8005c1a:	4b58      	ldr	r3, [pc, #352]	; (8005d7c <hostUartBootLoaderProcess+0x210>)
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	701a      	strb	r2, [r3, #0]
							hostBootLoader_uartConfigForBL();
 8005c20:	f7ff f894 	bl	8004d4c <hostBootLoader_uartConfigForBL>
							printf("\n[hostBootLoader_waittingResponeCmdConnect] device lost connect -> try again ...\n");
 8005c24:	4856      	ldr	r0, [pc, #344]	; (8005d80 <hostUartBootLoaderProcess+0x214>)
 8005c26:	f001 fa4d 	bl	80070c4 <puts>
				}break;
 8005c2a:	e08f      	b.n	8005d4c <hostUartBootLoaderProcess+0x1e0>
							printf("\n[hostBootLoader_waittingResponeCmdConnect] waitting device connect ...\n");
 8005c2c:	4855      	ldr	r0, [pc, #340]	; (8005d84 <hostUartBootLoaderProcess+0x218>)
 8005c2e:	f001 fa49 	bl	80070c4 <puts>
							hostBootLoader_sendCommand(UART_BOOTLOADER_CMD_CONNECT, 1);
 8005c32:	2101      	movs	r1, #1
 8005c34:	207f      	movs	r0, #127	; 0x7f
 8005c36:	f7ff f923 	bl	8004e80 <hostBootLoader_sendCommand>
				}break;
 8005c3a:	e087      	b.n	8005d4c <hostUartBootLoaderProcess+0x1e0>
					if(getTime(&hostPri.timeSendCmd, 1000) == true)
 8005c3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005c40:	484d      	ldr	r0, [pc, #308]	; (8005d78 <hostUartBootLoaderProcess+0x20c>)
 8005c42:	f7ff f865 	bl	8004d10 <getTime>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f000 8081 	beq.w	8005d50 <hostUartBootLoaderProcess+0x1e4>
						printf("\n[hostBootLoader_waittingResponeCmdConnect] waitting device reponse cmd get ...\n");
 8005c4e:	484e      	ldr	r0, [pc, #312]	; (8005d88 <hostUartBootLoaderProcess+0x21c>)
 8005c50:	f001 fa38 	bl	80070c4 <puts>
						hostBootLoader_sendCommand(hostPri.cmdGet.getCmd, 2);
 8005c54:	4b48      	ldr	r3, [pc, #288]	; (8005d78 <hostUartBootLoaderProcess+0x20c>)
 8005c56:	799b      	ldrb	r3, [r3, #6]
 8005c58:	2102      	movs	r1, #2
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7ff f910 	bl	8004e80 <hostBootLoader_sendCommand>
				}break;
 8005c60:	e076      	b.n	8005d50 <hostUartBootLoaderProcess+0x1e4>
					if(getTime(&hostPri.timeSendCmd, 1000) == true)
 8005c62:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005c66:	4844      	ldr	r0, [pc, #272]	; (8005d78 <hostUartBootLoaderProcess+0x20c>)
 8005c68:	f7ff f852 	bl	8004d10 <getTime>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d070      	beq.n	8005d54 <hostUartBootLoaderProcess+0x1e8>
						printf("\n[hostBootLoader_waittingResponeCmdConnect] waitting device reponse cmd getId ...\n");
 8005c72:	4846      	ldr	r0, [pc, #280]	; (8005d8c <hostUartBootLoaderProcess+0x220>)
 8005c74:	f001 fa26 	bl	80070c4 <puts>
						hostBootLoader_sendCommand(hostPri.cmdGet.getId, 2);
 8005c78:	4b3f      	ldr	r3, [pc, #252]	; (8005d78 <hostUartBootLoaderProcess+0x20c>)
 8005c7a:	7a1b      	ldrb	r3, [r3, #8]
 8005c7c:	2102      	movs	r1, #2
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7ff f8fe 	bl	8004e80 <hostBootLoader_sendCommand>
				}break;
 8005c84:	e066      	b.n	8005d54 <hostUartBootLoaderProcess+0x1e8>
					if(getTime(&hostPri.timeSendCmd, 1000) == true)
 8005c86:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005c8a:	483b      	ldr	r0, [pc, #236]	; (8005d78 <hostUartBootLoaderProcess+0x20c>)
 8005c8c:	f7ff f840 	bl	8004d10 <getTime>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d060      	beq.n	8005d58 <hostUartBootLoaderProcess+0x1ec>
						if(hostPri.deviceReponseCmdErase == false)
 8005c96:	4b38      	ldr	r3, [pc, #224]	; (8005d78 <hostUartBootLoaderProcess+0x20c>)
 8005c98:	7e5b      	ldrb	r3, [r3, #25]
 8005c9a:	f083 0301 	eor.w	r3, r3, #1
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d059      	beq.n	8005d58 <hostUartBootLoaderProcess+0x1ec>
							printf("\n[hostBootLoader_waittingResponeCmdConnect] waitting device reponse cmd erase ...\n");
 8005ca4:	483a      	ldr	r0, [pc, #232]	; (8005d90 <hostUartBootLoaderProcess+0x224>)
 8005ca6:	f001 fa0d 	bl	80070c4 <puts>
							hostBootLoader_sendCommand(hostPri.cmdGet.EraseCmd, 2);
 8005caa:	4b33      	ldr	r3, [pc, #204]	; (8005d78 <hostUartBootLoaderProcess+0x20c>)
 8005cac:	7b1b      	ldrb	r3, [r3, #12]
 8005cae:	2102      	movs	r1, #2
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7ff f8e5 	bl	8004e80 <hostBootLoader_sendCommand>
				}break;
 8005cb6:	e04f      	b.n	8005d58 <hostUartBootLoaderProcess+0x1ec>
					if(getTime(&hostPri.timeSendCmd, 1000) == true)
 8005cb8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005cbc:	482e      	ldr	r0, [pc, #184]	; (8005d78 <hostUartBootLoaderProcess+0x20c>)
 8005cbe:	f7ff f827 	bl	8004d10 <getTime>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d049      	beq.n	8005d5c <hostUartBootLoaderProcess+0x1f0>
						if(hostPri.deviceReponseCmdWrite == false)
 8005cc8:	4b2b      	ldr	r3, [pc, #172]	; (8005d78 <hostUartBootLoaderProcess+0x20c>)
 8005cca:	7edb      	ldrb	r3, [r3, #27]
 8005ccc:	f083 0301 	eor.w	r3, r3, #1
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d042      	beq.n	8005d5c <hostUartBootLoaderProcess+0x1f0>
							printf("\n[hostBootLoader_waittingResponeCmdConnect] waitting device reponse cmd write memory ...\n");
 8005cd6:	482f      	ldr	r0, [pc, #188]	; (8005d94 <hostUartBootLoaderProcess+0x228>)
 8005cd8:	f001 f9f4 	bl	80070c4 <puts>
							host->hostCmd[0] = hostPri.cmdGet.writeMemoryCmd;
 8005cdc:	4b24      	ldr	r3, [pc, #144]	; (8005d70 <hostUartBootLoaderProcess+0x204>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a25      	ldr	r2, [pc, #148]	; (8005d78 <hostUartBootLoaderProcess+0x20c>)
 8005ce2:	7ad2      	ldrb	r2, [r2, #11]
 8005ce4:	70da      	strb	r2, [r3, #3]
							host->hostCmd[1] = host->hostCmd[0] ^ 0xff;
 8005ce6:	4b22      	ldr	r3, [pc, #136]	; (8005d70 <hostUartBootLoaderProcess+0x204>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	78da      	ldrb	r2, [r3, #3]
 8005cec:	4b20      	ldr	r3, [pc, #128]	; (8005d70 <hostUartBootLoaderProcess+0x204>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	43d2      	mvns	r2, r2
 8005cf2:	b2d2      	uxtb	r2, r2
 8005cf4:	711a      	strb	r2, [r3, #4]
				}break;
 8005cf6:	e031      	b.n	8005d5c <hostUartBootLoaderProcess+0x1f0>
					if(getTime(&hostPri.timeSendCmd, 1000) == true)
 8005cf8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005cfc:	481e      	ldr	r0, [pc, #120]	; (8005d78 <hostUartBootLoaderProcess+0x20c>)
 8005cfe:	f7ff f807 	bl	8004d10 <getTime>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d02b      	beq.n	8005d60 <hostUartBootLoaderProcess+0x1f4>
						printf("\n[hostBootLoader_waittingResponeCmdConnect] waitting device reponse cmd go ...\n");
 8005d08:	4823      	ldr	r0, [pc, #140]	; (8005d98 <hostUartBootLoaderProcess+0x22c>)
 8005d0a:	f001 f9db 	bl	80070c4 <puts>
						hostBootLoader_sendCommand(hostPri.cmdGet.goCmd, 2);
 8005d0e:	4b1a      	ldr	r3, [pc, #104]	; (8005d78 <hostUartBootLoaderProcess+0x20c>)
 8005d10:	7a9b      	ldrb	r3, [r3, #10]
 8005d12:	2102      	movs	r1, #2
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7ff f8b3 	bl	8004e80 <hostBootLoader_sendCommand>
				}break;
 8005d1a:	e021      	b.n	8005d60 <hostUartBootLoaderProcess+0x1f4>
					if(getTime(&timeSendCmd, 5000) == true)
 8005d1c:	f241 3188 	movw	r1, #5000	; 0x1388
 8005d20:	481e      	ldr	r0, [pc, #120]	; (8005d9c <hostUartBootLoaderProcess+0x230>)
 8005d22:	f7fe fff5 	bl	8004d10 <getTime>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d01b      	beq.n	8005d64 <hostUartBootLoaderProcess+0x1f8>
						printf("\n[hostUartBootLoaderProcess] Upragde fw successfull ..............\n");
 8005d2c:	481c      	ldr	r0, [pc, #112]	; (8005da0 <hostUartBootLoaderProcess+0x234>)
 8005d2e:	f001 f9c9 	bl	80070c4 <puts>
				}break;
 8005d32:	e017      	b.n	8005d64 <hostUartBootLoaderProcess+0x1f8>
					if(getTime(&timeSendCmd, 1000) == true)
 8005d34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005d38:	4818      	ldr	r0, [pc, #96]	; (8005d9c <hostUartBootLoaderProcess+0x230>)
 8005d3a:	f7fe ffe9 	bl	8004d10 <getTime>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d011      	beq.n	8005d68 <hostUartBootLoaderProcess+0x1fc>
						printf("\n[hostUartBootLoaderProcess] HOST_BOOTLOADER_STATE_ERROR\n");
 8005d44:	4817      	ldr	r0, [pc, #92]	; (8005da4 <hostUartBootLoaderProcess+0x238>)
 8005d46:	f001 f9bd 	bl	80070c4 <puts>
				}break;
 8005d4a:	e00d      	b.n	8005d68 <hostUartBootLoaderProcess+0x1fc>
				}break;
 8005d4c:	bf00      	nop
 8005d4e:	e00c      	b.n	8005d6a <hostUartBootLoaderProcess+0x1fe>
				}break;
 8005d50:	bf00      	nop
 8005d52:	e00a      	b.n	8005d6a <hostUartBootLoaderProcess+0x1fe>
				}break;
 8005d54:	bf00      	nop
 8005d56:	e008      	b.n	8005d6a <hostUartBootLoaderProcess+0x1fe>
				}break;
 8005d58:	bf00      	nop
 8005d5a:	e006      	b.n	8005d6a <hostUartBootLoaderProcess+0x1fe>
				}break;
 8005d5c:	bf00      	nop
 8005d5e:	e004      	b.n	8005d6a <hostUartBootLoaderProcess+0x1fe>
				}break;
 8005d60:	bf00      	nop
 8005d62:	e002      	b.n	8005d6a <hostUartBootLoaderProcess+0x1fe>
				}break;
 8005d64:	bf00      	nop
 8005d66:	e000      	b.n	8005d6a <hostUartBootLoaderProcess+0x1fe>
				}break;
 8005d68:	bf00      	nop
}
 8005d6a:	bf00      	nop
 8005d6c:	bd98      	pop	{r3, r4, r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	20000630 	.word	0x20000630
 8005d74:	0800b1e8 	.word	0x0800b1e8
 8005d78:	20000638 	.word	0x20000638
 8005d7c:	2000075b 	.word	0x2000075b
 8005d80:	0800b224 	.word	0x0800b224
 8005d84:	0800b278 	.word	0x0800b278
 8005d88:	0800b2c0 	.word	0x0800b2c0
 8005d8c:	0800b310 	.word	0x0800b310
 8005d90:	0800b364 	.word	0x0800b364
 8005d94:	0800b3b8 	.word	0x0800b3b8
 8005d98:	0800b414 	.word	0x0800b414
 8005d9c:	2000075c 	.word	0x2000075c
 8005da0:	0800b464 	.word	0x0800b464
 8005da4:	0800b4a8 	.word	0x0800b4a8

08005da8 <ringBufferInit>:
#define __RING_BUFFER_CONFIGURATION
/** @brief  ringBufferInit
    @return none
*/
void ringBufferInit(ringBuffer_t *rBuff)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
	rBuff->head = 0;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	801a      	strh	r2, [r3, #0]
	rBuff->tail = 0;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	805a      	strh	r2, [r3, #2]
	rBuff->len = 0;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	809a      	strh	r2, [r3, #4]
}
 8005dc2:	bf00      	nop
 8005dc4:	370c      	adds	r7, #12
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
	...

08005dd0 <ringBufferWrite>:
#define __RING_BUFFER_FUNCTION
/** @brief  ringBufferWrite
    @return ringBufferState_t
*/
ringBufferState_t ringBufferWrite(ringBuffer_t *rBuff, uint8_t wData)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	460b      	mov	r3, r1
 8005dda:	70fb      	strb	r3, [r7, #3]
	if(rBuff->len >= RING_BUFFER_LEN)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	889b      	ldrh	r3, [r3, #4]
 8005de0:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8005de4:	d301      	bcc.n	8005dea <ringBufferWrite+0x1a>
	{
		return RING_BUFFER_ERROR;
 8005de6:	2300      	movs	r3, #0
 8005de8:	e01f      	b.n	8005e2a <ringBufferWrite+0x5a>
	}

	rBuff->buffer[rBuff->tail] = wData;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	885b      	ldrh	r3, [r3, #2]
 8005dee:	461a      	mov	r2, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4413      	add	r3, r2
 8005df4:	78fa      	ldrb	r2, [r7, #3]
 8005df6:	719a      	strb	r2, [r3, #6]
	rBuff->tail = (rBuff->tail + 1) % RING_BUFFER_LEN;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	885b      	ldrh	r3, [r3, #2]
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	4a0e      	ldr	r2, [pc, #56]	; (8005e38 <ringBufferWrite+0x68>)
 8005e00:	fb82 1203 	smull	r1, r2, r2, r3
 8005e04:	441a      	add	r2, r3
 8005e06:	1211      	asrs	r1, r2, #8
 8005e08:	17da      	asrs	r2, r3, #31
 8005e0a:	1a8a      	subs	r2, r1, r2
 8005e0c:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8005e10:	fb01 f202 	mul.w	r2, r1, r2
 8005e14:	1a9a      	subs	r2, r3, r2
 8005e16:	b292      	uxth	r2, r2
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	805a      	strh	r2, [r3, #2]
	rBuff->len++;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	889b      	ldrh	r3, [r3, #4]
 8005e20:	3301      	adds	r3, #1
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	809a      	strh	r2, [r3, #4]

	return RING_BUFFER_OK;
 8005e28:	2301      	movs	r3, #1
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	370c      	adds	r7, #12
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	f2b9d649 	.word	0xf2b9d649

08005e3c <ringBufferRead>:

/** @brief  ringBufferRead
    @return ringBufferState_t
*/
ringBufferState_t ringBufferRead(ringBuffer_t *rBuff, uint8_t *rData)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
	if(rBuff->len == 0)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	889b      	ldrh	r3, [r3, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d101      	bne.n	8005e52 <ringBufferRead+0x16>
	{
		return RING_BUFFER_ERROR;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	e020      	b.n	8005e94 <ringBufferRead+0x58>
	}

	*rData = rBuff->buffer[rBuff->head];
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	881b      	ldrh	r3, [r3, #0]
 8005e56:	461a      	mov	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	799a      	ldrb	r2, [r3, #6]
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	701a      	strb	r2, [r3, #0]

	rBuff->head = (rBuff->head + 1) % RING_BUFFER_LEN;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	881b      	ldrh	r3, [r3, #0]
 8005e66:	3301      	adds	r3, #1
 8005e68:	4a0d      	ldr	r2, [pc, #52]	; (8005ea0 <ringBufferRead+0x64>)
 8005e6a:	fb82 1203 	smull	r1, r2, r2, r3
 8005e6e:	441a      	add	r2, r3
 8005e70:	1211      	asrs	r1, r2, #8
 8005e72:	17da      	asrs	r2, r3, #31
 8005e74:	1a8a      	subs	r2, r1, r2
 8005e76:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8005e7a:	fb01 f202 	mul.w	r2, r1, r2
 8005e7e:	1a9a      	subs	r2, r3, r2
 8005e80:	b292      	uxth	r2, r2
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	801a      	strh	r2, [r3, #0]
	rBuff->len--;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	889b      	ldrh	r3, [r3, #4]
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	b29a      	uxth	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	809a      	strh	r2, [r3, #4]

	return RING_BUFFER_OK;
 8005e92:	2301      	movs	r3, #1
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr
 8005ea0:	f2b9d649 	.word	0xf2b9d649

08005ea4 <serialPort_send>:
/** @brief    serialPort_send
	@param[1] serial
	@return   none
*/
void serialPort_send(serialPort_t* serial)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
    if(serial->zPrivate.uartHandle.Instance == USART2)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005eb2:	4a12      	ldr	r2, [pc, #72]	; (8005efc <serialPort_send+0x58>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d10b      	bne.n	8005ed0 <serialPort_send+0x2c>
    {
        HAL_UART_Transmit_DMA(&huart2, serial->zPrivate.writeBuffer, serial->zPrivate.writeBufferPtr);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f203 310e 	addw	r1, r3, #782	; 0x30e
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 3ade 	ldrb.w	r3, [r3, #2782]	; 0xade
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	480d      	ldr	r0, [pc, #52]	; (8005f00 <serialPort_send+0x5c>)
 8005eca:	f7fd fd01 	bl	80038d0 <HAL_UART_Transmit_DMA>
    }
    else if(serial->zPrivate.uartHandle.Instance == UART4)
    {
        HAL_UART_Transmit_DMA(&huart4, serial->zPrivate.writeBuffer, serial->zPrivate.writeBufferPtr);
    }
}
 8005ece:	e010      	b.n	8005ef2 <serialPort_send+0x4e>
    else if(serial->zPrivate.uartHandle.Instance == UART4)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005ed6:	4a0b      	ldr	r2, [pc, #44]	; (8005f04 <serialPort_send+0x60>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d10a      	bne.n	8005ef2 <serialPort_send+0x4e>
        HAL_UART_Transmit_DMA(&huart4, serial->zPrivate.writeBuffer, serial->zPrivate.writeBufferPtr);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f203 310e 	addw	r1, r3, #782	; 0x30e
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 3ade 	ldrb.w	r3, [r3, #2782]	; 0xade
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	461a      	mov	r2, r3
 8005eec:	4806      	ldr	r0, [pc, #24]	; (8005f08 <serialPort_send+0x64>)
 8005eee:	f7fd fcef 	bl	80038d0 <HAL_UART_Transmit_DMA>
}
 8005ef2:	bf00      	nop
 8005ef4:	3708      	adds	r7, #8
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	40004400 	.word	0x40004400
 8005f00:	20000284 	.word	0x20000284
 8005f04:	40004c00 	.word	0x40004c00
 8005f08:	200001fc 	.word	0x200001fc

08005f0c <serialPort_tx_finish>:
/** @brief    serialPort_tx_finish
	@param[1] serial
	@return   none
*/
void serialPort_tx_finish(serialPort_t* serial)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
    if(serial->zPrivate.writeBufferPtr != 0)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f893 3ade 	ldrb.w	r3, [r3, #2782]	; 0xade
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d020      	beq.n	8005f60 <serialPort_tx_finish+0x54>
    {
        uint8_t i = 0;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	73fb      	strb	r3, [r7, #15]

        for( i = 0; i < serial->zPrivate.writeBufferPtr; i++)
 8005f22:	2300      	movs	r3, #0
 8005f24:	73fb      	strb	r3, [r7, #15]
 8005f26:	e00d      	b.n	8005f44 <serialPort_tx_finish+0x38>
        {
            serial->zPrivate.writeBuffer[i] = serial->zPrivate.writeBufferTemp[i];
 8005f28:	7bfa      	ldrb	r2, [r7, #15]
 8005f2a:	7bfb      	ldrb	r3, [r7, #15]
 8005f2c:	6879      	ldr	r1, [r7, #4]
 8005f2e:	440a      	add	r2, r1
 8005f30:	f892 16f6 	ldrb.w	r1, [r2, #1782]	; 0x6f6
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	4413      	add	r3, r2
 8005f38:	460a      	mov	r2, r1
 8005f3a:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e
        for( i = 0; i < serial->zPrivate.writeBufferPtr; i++)
 8005f3e:	7bfb      	ldrb	r3, [r7, #15]
 8005f40:	3301      	adds	r3, #1
 8005f42:	73fb      	strb	r3, [r7, #15]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f893 3ade 	ldrb.w	r3, [r3, #2782]	; 0xade
 8005f4a:	7bfa      	ldrb	r2, [r7, #15]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d3eb      	bcc.n	8005f28 <serialPort_tx_finish+0x1c>
        }

        serialPort_send(serial);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f7ff ffa7 	bl	8005ea4 <serialPort_send>
        serial->zPrivate.writeBufferPtr = 0;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 2ade 	strb.w	r2, [r3, #2782]	; 0xade
    }
    else
    {
        serial->isWriteFinish = true;
    }
}
 8005f5e:	e003      	b.n	8005f68 <serialPort_tx_finish+0x5c>
        serial->isWriteFinish = true;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
}
 8005f68:	bf00      	nop
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <__cmdCli>:

/** @brief  __cmdCli
    @return pointer struct support uart cli
*/
uartCLI_t* __cmdCli(void)
{
 8005f70:	b480      	push	{r7}
 8005f72:	af00      	add	r7, sp, #0
	return cli;
 8005f74:	4b03      	ldr	r3, [pc, #12]	; (8005f84 <__cmdCli+0x14>)
 8005f76:	681b      	ldr	r3, [r3, #0]
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	20001358 	.word	0x20001358

08005f88 <HAL_UART_TxCpltCallback>:
#define __UART_TX_CALLBACK
/** @brief
    @return
*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
			txComplete = true;
		}
	#endif

	#if (USE_HOST_BOOTLOADER == 1)
		if(huart->Instance == huart2.Instance)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	4b0a      	ldr	r3, [pc, #40]	; (8005fc0 <HAL_UART_TxCpltCallback+0x38>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d10c      	bne.n	8005fb6 <HAL_UART_TxCpltCallback+0x2e>
		{
			if(__hostBL()->isBootLoader == true)
 8005f9c:	f7fe feac 	bl	8004cf8 <__hostBL>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d003      	beq.n	8005fb0 <HAL_UART_TxCpltCallback+0x28>
			{
				txComplete = true;
 8005fa8:	4b06      	ldr	r3, [pc, #24]	; (8005fc4 <HAL_UART_TxCpltCallback+0x3c>)
 8005faa:	2201      	movs	r2, #1
 8005fac:	701a      	strb	r2, [r3, #0]
		if(huart->Instance == huart2.Instance)
		{
			serialPort_tx_finish(&serial_port2);
		}
	#endif
}
 8005fae:	e002      	b.n	8005fb6 <HAL_UART_TxCpltCallback+0x2e>
				serialPort_tx_finish(&serial_port2);
 8005fb0:	4805      	ldr	r0, [pc, #20]	; (8005fc8 <HAL_UART_TxCpltCallback+0x40>)
 8005fb2:	f7ff ffab 	bl	8005f0c <serialPort_tx_finish>
}
 8005fb6:	bf00      	nop
 8005fb8:	3708      	adds	r7, #8
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	20000284 	.word	0x20000284
 8005fc4:	2000135c 	.word	0x2000135c
 8005fc8:	20000760 	.word	0x20000760

08005fcc <HAL_UART_RxCpltCallback>:
#define __UART_RX_CALLBACK
/** @brief
    @return
*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
		    __HAL_UART_FLUSH_DRREGISTER(&huart2);
		}
	#endif

	#if (USE_HOST_BOOTLOADER == 1)
		if(huart->Instance == huart2.Instance)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	4b14      	ldr	r3, [pc, #80]	; (800602c <HAL_UART_RxCpltCallback+0x60>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d10e      	bne.n	8005ffe <HAL_UART_RxCpltCallback+0x32>
		{
			if(__hostBL()->isBootLoader == true)
 8005fe0:	f7fe fe8a 	bl	8004cf8 <__hostBL>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d008      	beq.n	8005ffe <HAL_UART_RxCpltCallback+0x32>
			{
				ringBufferWrite(&rBufferHostBL, wData);
 8005fec:	4b10      	ldr	r3, [pc, #64]	; (8006030 <HAL_UART_RxCpltCallback+0x64>)
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	4810      	ldr	r0, [pc, #64]	; (8006034 <HAL_UART_RxCpltCallback+0x68>)
 8005ff4:	f7ff feec 	bl	8005dd0 <ringBufferWrite>
					Error_Handler();
				}
#endif

			    /// xoa bo dem uart truoc khi truyen
			    __HAL_UART_FLUSH_DRREGISTER(&huart2);
 8005ff8:	4b0c      	ldr	r3, [pc, #48]	; (800602c <HAL_UART_RxCpltCallback+0x60>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	685b      	ldr	r3, [r3, #4]

		}
	#endif

	#if (USE_COMMAND_LINE_INTERFACE == 1)
		if(huart->Instance == huart1.Instance)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	4b0d      	ldr	r3, [pc, #52]	; (8006038 <HAL_UART_RxCpltCallback+0x6c>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	429a      	cmp	r2, r3
 8006008:	d10c      	bne.n	8006024 <HAL_UART_RxCpltCallback+0x58>
		{
			ringBufferWrite(&rBufferRxU1, usart1WData);
 800600a:	4b0c      	ldr	r3, [pc, #48]	; (800603c <HAL_UART_RxCpltCallback+0x70>)
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	4619      	mov	r1, r3
 8006010:	480b      	ldr	r0, [pc, #44]	; (8006040 <HAL_UART_RxCpltCallback+0x74>)
 8006012:	f7ff fedd 	bl	8005dd0 <ringBufferWrite>

			if(usart1WData == '\n')
 8006016:	4b09      	ldr	r3, [pc, #36]	; (800603c <HAL_UART_RxCpltCallback+0x70>)
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	2b0a      	cmp	r3, #10
 800601c:	d102      	bne.n	8006024 <HAL_UART_RxCpltCallback+0x58>
			{
				endCmd = true;
 800601e:	4b09      	ldr	r3, [pc, #36]	; (8006044 <HAL_UART_RxCpltCallback+0x78>)
 8006020:	2201      	movs	r2, #1
 8006022:	701a      	strb	r2, [r3, #0]
			}
		}
	#endif
}
 8006024:	bf00      	nop
 8006026:	3708      	adds	r7, #8
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	20000284 	.word	0x20000284
 8006030:	2000062c 	.word	0x2000062c
 8006034:	20000518 	.word	0x20000518
 8006038:	20000240 	.word	0x20000240
 800603c:	20001354 	.word	0x20001354
 8006040:	20001240 	.word	0x20001240
 8006044:	20001355 	.word	0x20001355

08006048 <__errno>:
 8006048:	4b01      	ldr	r3, [pc, #4]	; (8006050 <__errno+0x8>)
 800604a:	6818      	ldr	r0, [r3, #0]
 800604c:	4770      	bx	lr
 800604e:	bf00      	nop
 8006050:	2000000c 	.word	0x2000000c

08006054 <__libc_init_array>:
 8006054:	b570      	push	{r4, r5, r6, lr}
 8006056:	4d0d      	ldr	r5, [pc, #52]	; (800608c <__libc_init_array+0x38>)
 8006058:	4c0d      	ldr	r4, [pc, #52]	; (8006090 <__libc_init_array+0x3c>)
 800605a:	1b64      	subs	r4, r4, r5
 800605c:	10a4      	asrs	r4, r4, #2
 800605e:	2600      	movs	r6, #0
 8006060:	42a6      	cmp	r6, r4
 8006062:	d109      	bne.n	8006078 <__libc_init_array+0x24>
 8006064:	4d0b      	ldr	r5, [pc, #44]	; (8006094 <__libc_init_array+0x40>)
 8006066:	4c0c      	ldr	r4, [pc, #48]	; (8006098 <__libc_init_array+0x44>)
 8006068:	f004 fde8 	bl	800ac3c <_init>
 800606c:	1b64      	subs	r4, r4, r5
 800606e:	10a4      	asrs	r4, r4, #2
 8006070:	2600      	movs	r6, #0
 8006072:	42a6      	cmp	r6, r4
 8006074:	d105      	bne.n	8006082 <__libc_init_array+0x2e>
 8006076:	bd70      	pop	{r4, r5, r6, pc}
 8006078:	f855 3b04 	ldr.w	r3, [r5], #4
 800607c:	4798      	blx	r3
 800607e:	3601      	adds	r6, #1
 8006080:	e7ee      	b.n	8006060 <__libc_init_array+0xc>
 8006082:	f855 3b04 	ldr.w	r3, [r5], #4
 8006086:	4798      	blx	r3
 8006088:	3601      	adds	r6, #1
 800608a:	e7f2      	b.n	8006072 <__libc_init_array+0x1e>
 800608c:	0800b9bc 	.word	0x0800b9bc
 8006090:	0800b9bc 	.word	0x0800b9bc
 8006094:	0800b9bc 	.word	0x0800b9bc
 8006098:	0800b9c0 	.word	0x0800b9c0

0800609c <malloc>:
 800609c:	4b02      	ldr	r3, [pc, #8]	; (80060a8 <malloc+0xc>)
 800609e:	4601      	mov	r1, r0
 80060a0:	6818      	ldr	r0, [r3, #0]
 80060a2:	f000 b89b 	b.w	80061dc <_malloc_r>
 80060a6:	bf00      	nop
 80060a8:	2000000c 	.word	0x2000000c

080060ac <memcpy>:
 80060ac:	440a      	add	r2, r1
 80060ae:	4291      	cmp	r1, r2
 80060b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80060b4:	d100      	bne.n	80060b8 <memcpy+0xc>
 80060b6:	4770      	bx	lr
 80060b8:	b510      	push	{r4, lr}
 80060ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060c2:	4291      	cmp	r1, r2
 80060c4:	d1f9      	bne.n	80060ba <memcpy+0xe>
 80060c6:	bd10      	pop	{r4, pc}

080060c8 <memset>:
 80060c8:	4402      	add	r2, r0
 80060ca:	4603      	mov	r3, r0
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d100      	bne.n	80060d2 <memset+0xa>
 80060d0:	4770      	bx	lr
 80060d2:	f803 1b01 	strb.w	r1, [r3], #1
 80060d6:	e7f9      	b.n	80060cc <memset+0x4>

080060d8 <_calloc_r>:
 80060d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060da:	fba1 2402 	umull	r2, r4, r1, r2
 80060de:	b94c      	cbnz	r4, 80060f4 <_calloc_r+0x1c>
 80060e0:	4611      	mov	r1, r2
 80060e2:	9201      	str	r2, [sp, #4]
 80060e4:	f000 f87a 	bl	80061dc <_malloc_r>
 80060e8:	9a01      	ldr	r2, [sp, #4]
 80060ea:	4605      	mov	r5, r0
 80060ec:	b930      	cbnz	r0, 80060fc <_calloc_r+0x24>
 80060ee:	4628      	mov	r0, r5
 80060f0:	b003      	add	sp, #12
 80060f2:	bd30      	pop	{r4, r5, pc}
 80060f4:	220c      	movs	r2, #12
 80060f6:	6002      	str	r2, [r0, #0]
 80060f8:	2500      	movs	r5, #0
 80060fa:	e7f8      	b.n	80060ee <_calloc_r+0x16>
 80060fc:	4621      	mov	r1, r4
 80060fe:	f7ff ffe3 	bl	80060c8 <memset>
 8006102:	e7f4      	b.n	80060ee <_calloc_r+0x16>

08006104 <_free_r>:
 8006104:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006106:	2900      	cmp	r1, #0
 8006108:	d044      	beq.n	8006194 <_free_r+0x90>
 800610a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800610e:	9001      	str	r0, [sp, #4]
 8006110:	2b00      	cmp	r3, #0
 8006112:	f1a1 0404 	sub.w	r4, r1, #4
 8006116:	bfb8      	it	lt
 8006118:	18e4      	addlt	r4, r4, r3
 800611a:	f003 fc6b 	bl	80099f4 <__malloc_lock>
 800611e:	4a1e      	ldr	r2, [pc, #120]	; (8006198 <_free_r+0x94>)
 8006120:	9801      	ldr	r0, [sp, #4]
 8006122:	6813      	ldr	r3, [r2, #0]
 8006124:	b933      	cbnz	r3, 8006134 <_free_r+0x30>
 8006126:	6063      	str	r3, [r4, #4]
 8006128:	6014      	str	r4, [r2, #0]
 800612a:	b003      	add	sp, #12
 800612c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006130:	f003 bc66 	b.w	8009a00 <__malloc_unlock>
 8006134:	42a3      	cmp	r3, r4
 8006136:	d908      	bls.n	800614a <_free_r+0x46>
 8006138:	6825      	ldr	r5, [r4, #0]
 800613a:	1961      	adds	r1, r4, r5
 800613c:	428b      	cmp	r3, r1
 800613e:	bf01      	itttt	eq
 8006140:	6819      	ldreq	r1, [r3, #0]
 8006142:	685b      	ldreq	r3, [r3, #4]
 8006144:	1949      	addeq	r1, r1, r5
 8006146:	6021      	streq	r1, [r4, #0]
 8006148:	e7ed      	b.n	8006126 <_free_r+0x22>
 800614a:	461a      	mov	r2, r3
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	b10b      	cbz	r3, 8006154 <_free_r+0x50>
 8006150:	42a3      	cmp	r3, r4
 8006152:	d9fa      	bls.n	800614a <_free_r+0x46>
 8006154:	6811      	ldr	r1, [r2, #0]
 8006156:	1855      	adds	r5, r2, r1
 8006158:	42a5      	cmp	r5, r4
 800615a:	d10b      	bne.n	8006174 <_free_r+0x70>
 800615c:	6824      	ldr	r4, [r4, #0]
 800615e:	4421      	add	r1, r4
 8006160:	1854      	adds	r4, r2, r1
 8006162:	42a3      	cmp	r3, r4
 8006164:	6011      	str	r1, [r2, #0]
 8006166:	d1e0      	bne.n	800612a <_free_r+0x26>
 8006168:	681c      	ldr	r4, [r3, #0]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	6053      	str	r3, [r2, #4]
 800616e:	4421      	add	r1, r4
 8006170:	6011      	str	r1, [r2, #0]
 8006172:	e7da      	b.n	800612a <_free_r+0x26>
 8006174:	d902      	bls.n	800617c <_free_r+0x78>
 8006176:	230c      	movs	r3, #12
 8006178:	6003      	str	r3, [r0, #0]
 800617a:	e7d6      	b.n	800612a <_free_r+0x26>
 800617c:	6825      	ldr	r5, [r4, #0]
 800617e:	1961      	adds	r1, r4, r5
 8006180:	428b      	cmp	r3, r1
 8006182:	bf04      	itt	eq
 8006184:	6819      	ldreq	r1, [r3, #0]
 8006186:	685b      	ldreq	r3, [r3, #4]
 8006188:	6063      	str	r3, [r4, #4]
 800618a:	bf04      	itt	eq
 800618c:	1949      	addeq	r1, r1, r5
 800618e:	6021      	streq	r1, [r4, #0]
 8006190:	6054      	str	r4, [r2, #4]
 8006192:	e7ca      	b.n	800612a <_free_r+0x26>
 8006194:	b003      	add	sp, #12
 8006196:	bd30      	pop	{r4, r5, pc}
 8006198:	20001360 	.word	0x20001360

0800619c <sbrk_aligned>:
 800619c:	b570      	push	{r4, r5, r6, lr}
 800619e:	4e0e      	ldr	r6, [pc, #56]	; (80061d8 <sbrk_aligned+0x3c>)
 80061a0:	460c      	mov	r4, r1
 80061a2:	6831      	ldr	r1, [r6, #0]
 80061a4:	4605      	mov	r5, r0
 80061a6:	b911      	cbnz	r1, 80061ae <sbrk_aligned+0x12>
 80061a8:	f000 ff94 	bl	80070d4 <_sbrk_r>
 80061ac:	6030      	str	r0, [r6, #0]
 80061ae:	4621      	mov	r1, r4
 80061b0:	4628      	mov	r0, r5
 80061b2:	f000 ff8f 	bl	80070d4 <_sbrk_r>
 80061b6:	1c43      	adds	r3, r0, #1
 80061b8:	d00a      	beq.n	80061d0 <sbrk_aligned+0x34>
 80061ba:	1cc4      	adds	r4, r0, #3
 80061bc:	f024 0403 	bic.w	r4, r4, #3
 80061c0:	42a0      	cmp	r0, r4
 80061c2:	d007      	beq.n	80061d4 <sbrk_aligned+0x38>
 80061c4:	1a21      	subs	r1, r4, r0
 80061c6:	4628      	mov	r0, r5
 80061c8:	f000 ff84 	bl	80070d4 <_sbrk_r>
 80061cc:	3001      	adds	r0, #1
 80061ce:	d101      	bne.n	80061d4 <sbrk_aligned+0x38>
 80061d0:	f04f 34ff 	mov.w	r4, #4294967295
 80061d4:	4620      	mov	r0, r4
 80061d6:	bd70      	pop	{r4, r5, r6, pc}
 80061d8:	20001364 	.word	0x20001364

080061dc <_malloc_r>:
 80061dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061e0:	1ccd      	adds	r5, r1, #3
 80061e2:	f025 0503 	bic.w	r5, r5, #3
 80061e6:	3508      	adds	r5, #8
 80061e8:	2d0c      	cmp	r5, #12
 80061ea:	bf38      	it	cc
 80061ec:	250c      	movcc	r5, #12
 80061ee:	2d00      	cmp	r5, #0
 80061f0:	4607      	mov	r7, r0
 80061f2:	db01      	blt.n	80061f8 <_malloc_r+0x1c>
 80061f4:	42a9      	cmp	r1, r5
 80061f6:	d905      	bls.n	8006204 <_malloc_r+0x28>
 80061f8:	230c      	movs	r3, #12
 80061fa:	603b      	str	r3, [r7, #0]
 80061fc:	2600      	movs	r6, #0
 80061fe:	4630      	mov	r0, r6
 8006200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006204:	4e2e      	ldr	r6, [pc, #184]	; (80062c0 <_malloc_r+0xe4>)
 8006206:	f003 fbf5 	bl	80099f4 <__malloc_lock>
 800620a:	6833      	ldr	r3, [r6, #0]
 800620c:	461c      	mov	r4, r3
 800620e:	bb34      	cbnz	r4, 800625e <_malloc_r+0x82>
 8006210:	4629      	mov	r1, r5
 8006212:	4638      	mov	r0, r7
 8006214:	f7ff ffc2 	bl	800619c <sbrk_aligned>
 8006218:	1c43      	adds	r3, r0, #1
 800621a:	4604      	mov	r4, r0
 800621c:	d14d      	bne.n	80062ba <_malloc_r+0xde>
 800621e:	6834      	ldr	r4, [r6, #0]
 8006220:	4626      	mov	r6, r4
 8006222:	2e00      	cmp	r6, #0
 8006224:	d140      	bne.n	80062a8 <_malloc_r+0xcc>
 8006226:	6823      	ldr	r3, [r4, #0]
 8006228:	4631      	mov	r1, r6
 800622a:	4638      	mov	r0, r7
 800622c:	eb04 0803 	add.w	r8, r4, r3
 8006230:	f000 ff50 	bl	80070d4 <_sbrk_r>
 8006234:	4580      	cmp	r8, r0
 8006236:	d13a      	bne.n	80062ae <_malloc_r+0xd2>
 8006238:	6821      	ldr	r1, [r4, #0]
 800623a:	3503      	adds	r5, #3
 800623c:	1a6d      	subs	r5, r5, r1
 800623e:	f025 0503 	bic.w	r5, r5, #3
 8006242:	3508      	adds	r5, #8
 8006244:	2d0c      	cmp	r5, #12
 8006246:	bf38      	it	cc
 8006248:	250c      	movcc	r5, #12
 800624a:	4629      	mov	r1, r5
 800624c:	4638      	mov	r0, r7
 800624e:	f7ff ffa5 	bl	800619c <sbrk_aligned>
 8006252:	3001      	adds	r0, #1
 8006254:	d02b      	beq.n	80062ae <_malloc_r+0xd2>
 8006256:	6823      	ldr	r3, [r4, #0]
 8006258:	442b      	add	r3, r5
 800625a:	6023      	str	r3, [r4, #0]
 800625c:	e00e      	b.n	800627c <_malloc_r+0xa0>
 800625e:	6822      	ldr	r2, [r4, #0]
 8006260:	1b52      	subs	r2, r2, r5
 8006262:	d41e      	bmi.n	80062a2 <_malloc_r+0xc6>
 8006264:	2a0b      	cmp	r2, #11
 8006266:	d916      	bls.n	8006296 <_malloc_r+0xba>
 8006268:	1961      	adds	r1, r4, r5
 800626a:	42a3      	cmp	r3, r4
 800626c:	6025      	str	r5, [r4, #0]
 800626e:	bf18      	it	ne
 8006270:	6059      	strne	r1, [r3, #4]
 8006272:	6863      	ldr	r3, [r4, #4]
 8006274:	bf08      	it	eq
 8006276:	6031      	streq	r1, [r6, #0]
 8006278:	5162      	str	r2, [r4, r5]
 800627a:	604b      	str	r3, [r1, #4]
 800627c:	4638      	mov	r0, r7
 800627e:	f104 060b 	add.w	r6, r4, #11
 8006282:	f003 fbbd 	bl	8009a00 <__malloc_unlock>
 8006286:	f026 0607 	bic.w	r6, r6, #7
 800628a:	1d23      	adds	r3, r4, #4
 800628c:	1af2      	subs	r2, r6, r3
 800628e:	d0b6      	beq.n	80061fe <_malloc_r+0x22>
 8006290:	1b9b      	subs	r3, r3, r6
 8006292:	50a3      	str	r3, [r4, r2]
 8006294:	e7b3      	b.n	80061fe <_malloc_r+0x22>
 8006296:	6862      	ldr	r2, [r4, #4]
 8006298:	42a3      	cmp	r3, r4
 800629a:	bf0c      	ite	eq
 800629c:	6032      	streq	r2, [r6, #0]
 800629e:	605a      	strne	r2, [r3, #4]
 80062a0:	e7ec      	b.n	800627c <_malloc_r+0xa0>
 80062a2:	4623      	mov	r3, r4
 80062a4:	6864      	ldr	r4, [r4, #4]
 80062a6:	e7b2      	b.n	800620e <_malloc_r+0x32>
 80062a8:	4634      	mov	r4, r6
 80062aa:	6876      	ldr	r6, [r6, #4]
 80062ac:	e7b9      	b.n	8006222 <_malloc_r+0x46>
 80062ae:	230c      	movs	r3, #12
 80062b0:	603b      	str	r3, [r7, #0]
 80062b2:	4638      	mov	r0, r7
 80062b4:	f003 fba4 	bl	8009a00 <__malloc_unlock>
 80062b8:	e7a1      	b.n	80061fe <_malloc_r+0x22>
 80062ba:	6025      	str	r5, [r4, #0]
 80062bc:	e7de      	b.n	800627c <_malloc_r+0xa0>
 80062be:	bf00      	nop
 80062c0:	20001360 	.word	0x20001360

080062c4 <__cvt>:
 80062c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062c8:	ec55 4b10 	vmov	r4, r5, d0
 80062cc:	2d00      	cmp	r5, #0
 80062ce:	460e      	mov	r6, r1
 80062d0:	4619      	mov	r1, r3
 80062d2:	462b      	mov	r3, r5
 80062d4:	bfbb      	ittet	lt
 80062d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80062da:	461d      	movlt	r5, r3
 80062dc:	2300      	movge	r3, #0
 80062de:	232d      	movlt	r3, #45	; 0x2d
 80062e0:	700b      	strb	r3, [r1, #0]
 80062e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062e4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80062e8:	4691      	mov	r9, r2
 80062ea:	f023 0820 	bic.w	r8, r3, #32
 80062ee:	bfbc      	itt	lt
 80062f0:	4622      	movlt	r2, r4
 80062f2:	4614      	movlt	r4, r2
 80062f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80062f8:	d005      	beq.n	8006306 <__cvt+0x42>
 80062fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80062fe:	d100      	bne.n	8006302 <__cvt+0x3e>
 8006300:	3601      	adds	r6, #1
 8006302:	2102      	movs	r1, #2
 8006304:	e000      	b.n	8006308 <__cvt+0x44>
 8006306:	2103      	movs	r1, #3
 8006308:	ab03      	add	r3, sp, #12
 800630a:	9301      	str	r3, [sp, #4]
 800630c:	ab02      	add	r3, sp, #8
 800630e:	9300      	str	r3, [sp, #0]
 8006310:	ec45 4b10 	vmov	d0, r4, r5
 8006314:	4653      	mov	r3, sl
 8006316:	4632      	mov	r2, r6
 8006318:	f001 ffda 	bl	80082d0 <_dtoa_r>
 800631c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006320:	4607      	mov	r7, r0
 8006322:	d102      	bne.n	800632a <__cvt+0x66>
 8006324:	f019 0f01 	tst.w	r9, #1
 8006328:	d022      	beq.n	8006370 <__cvt+0xac>
 800632a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800632e:	eb07 0906 	add.w	r9, r7, r6
 8006332:	d110      	bne.n	8006356 <__cvt+0x92>
 8006334:	783b      	ldrb	r3, [r7, #0]
 8006336:	2b30      	cmp	r3, #48	; 0x30
 8006338:	d10a      	bne.n	8006350 <__cvt+0x8c>
 800633a:	2200      	movs	r2, #0
 800633c:	2300      	movs	r3, #0
 800633e:	4620      	mov	r0, r4
 8006340:	4629      	mov	r1, r5
 8006342:	f7fa fbc1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006346:	b918      	cbnz	r0, 8006350 <__cvt+0x8c>
 8006348:	f1c6 0601 	rsb	r6, r6, #1
 800634c:	f8ca 6000 	str.w	r6, [sl]
 8006350:	f8da 3000 	ldr.w	r3, [sl]
 8006354:	4499      	add	r9, r3
 8006356:	2200      	movs	r2, #0
 8006358:	2300      	movs	r3, #0
 800635a:	4620      	mov	r0, r4
 800635c:	4629      	mov	r1, r5
 800635e:	f7fa fbb3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006362:	b108      	cbz	r0, 8006368 <__cvt+0xa4>
 8006364:	f8cd 900c 	str.w	r9, [sp, #12]
 8006368:	2230      	movs	r2, #48	; 0x30
 800636a:	9b03      	ldr	r3, [sp, #12]
 800636c:	454b      	cmp	r3, r9
 800636e:	d307      	bcc.n	8006380 <__cvt+0xbc>
 8006370:	9b03      	ldr	r3, [sp, #12]
 8006372:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006374:	1bdb      	subs	r3, r3, r7
 8006376:	4638      	mov	r0, r7
 8006378:	6013      	str	r3, [r2, #0]
 800637a:	b004      	add	sp, #16
 800637c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006380:	1c59      	adds	r1, r3, #1
 8006382:	9103      	str	r1, [sp, #12]
 8006384:	701a      	strb	r2, [r3, #0]
 8006386:	e7f0      	b.n	800636a <__cvt+0xa6>

08006388 <__exponent>:
 8006388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800638a:	4603      	mov	r3, r0
 800638c:	2900      	cmp	r1, #0
 800638e:	bfb8      	it	lt
 8006390:	4249      	neglt	r1, r1
 8006392:	f803 2b02 	strb.w	r2, [r3], #2
 8006396:	bfb4      	ite	lt
 8006398:	222d      	movlt	r2, #45	; 0x2d
 800639a:	222b      	movge	r2, #43	; 0x2b
 800639c:	2909      	cmp	r1, #9
 800639e:	7042      	strb	r2, [r0, #1]
 80063a0:	dd2a      	ble.n	80063f8 <__exponent+0x70>
 80063a2:	f10d 0407 	add.w	r4, sp, #7
 80063a6:	46a4      	mov	ip, r4
 80063a8:	270a      	movs	r7, #10
 80063aa:	46a6      	mov	lr, r4
 80063ac:	460a      	mov	r2, r1
 80063ae:	fb91 f6f7 	sdiv	r6, r1, r7
 80063b2:	fb07 1516 	mls	r5, r7, r6, r1
 80063b6:	3530      	adds	r5, #48	; 0x30
 80063b8:	2a63      	cmp	r2, #99	; 0x63
 80063ba:	f104 34ff 	add.w	r4, r4, #4294967295
 80063be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80063c2:	4631      	mov	r1, r6
 80063c4:	dcf1      	bgt.n	80063aa <__exponent+0x22>
 80063c6:	3130      	adds	r1, #48	; 0x30
 80063c8:	f1ae 0502 	sub.w	r5, lr, #2
 80063cc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80063d0:	1c44      	adds	r4, r0, #1
 80063d2:	4629      	mov	r1, r5
 80063d4:	4561      	cmp	r1, ip
 80063d6:	d30a      	bcc.n	80063ee <__exponent+0x66>
 80063d8:	f10d 0209 	add.w	r2, sp, #9
 80063dc:	eba2 020e 	sub.w	r2, r2, lr
 80063e0:	4565      	cmp	r5, ip
 80063e2:	bf88      	it	hi
 80063e4:	2200      	movhi	r2, #0
 80063e6:	4413      	add	r3, r2
 80063e8:	1a18      	subs	r0, r3, r0
 80063ea:	b003      	add	sp, #12
 80063ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063f2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80063f6:	e7ed      	b.n	80063d4 <__exponent+0x4c>
 80063f8:	2330      	movs	r3, #48	; 0x30
 80063fa:	3130      	adds	r1, #48	; 0x30
 80063fc:	7083      	strb	r3, [r0, #2]
 80063fe:	70c1      	strb	r1, [r0, #3]
 8006400:	1d03      	adds	r3, r0, #4
 8006402:	e7f1      	b.n	80063e8 <__exponent+0x60>

08006404 <_printf_float>:
 8006404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006408:	ed2d 8b02 	vpush	{d8}
 800640c:	b08d      	sub	sp, #52	; 0x34
 800640e:	460c      	mov	r4, r1
 8006410:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006414:	4616      	mov	r6, r2
 8006416:	461f      	mov	r7, r3
 8006418:	4605      	mov	r5, r0
 800641a:	f003 fa6d 	bl	80098f8 <_localeconv_r>
 800641e:	f8d0 a000 	ldr.w	sl, [r0]
 8006422:	4650      	mov	r0, sl
 8006424:	f7f9 fed4 	bl	80001d0 <strlen>
 8006428:	2300      	movs	r3, #0
 800642a:	930a      	str	r3, [sp, #40]	; 0x28
 800642c:	6823      	ldr	r3, [r4, #0]
 800642e:	9305      	str	r3, [sp, #20]
 8006430:	f8d8 3000 	ldr.w	r3, [r8]
 8006434:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006438:	3307      	adds	r3, #7
 800643a:	f023 0307 	bic.w	r3, r3, #7
 800643e:	f103 0208 	add.w	r2, r3, #8
 8006442:	f8c8 2000 	str.w	r2, [r8]
 8006446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800644e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006452:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006456:	9307      	str	r3, [sp, #28]
 8006458:	f8cd 8018 	str.w	r8, [sp, #24]
 800645c:	ee08 0a10 	vmov	s16, r0
 8006460:	4b9f      	ldr	r3, [pc, #636]	; (80066e0 <_printf_float+0x2dc>)
 8006462:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006466:	f04f 32ff 	mov.w	r2, #4294967295
 800646a:	f7fa fb5f 	bl	8000b2c <__aeabi_dcmpun>
 800646e:	bb88      	cbnz	r0, 80064d4 <_printf_float+0xd0>
 8006470:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006474:	4b9a      	ldr	r3, [pc, #616]	; (80066e0 <_printf_float+0x2dc>)
 8006476:	f04f 32ff 	mov.w	r2, #4294967295
 800647a:	f7fa fb39 	bl	8000af0 <__aeabi_dcmple>
 800647e:	bb48      	cbnz	r0, 80064d4 <_printf_float+0xd0>
 8006480:	2200      	movs	r2, #0
 8006482:	2300      	movs	r3, #0
 8006484:	4640      	mov	r0, r8
 8006486:	4649      	mov	r1, r9
 8006488:	f7fa fb28 	bl	8000adc <__aeabi_dcmplt>
 800648c:	b110      	cbz	r0, 8006494 <_printf_float+0x90>
 800648e:	232d      	movs	r3, #45	; 0x2d
 8006490:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006494:	4b93      	ldr	r3, [pc, #588]	; (80066e4 <_printf_float+0x2e0>)
 8006496:	4894      	ldr	r0, [pc, #592]	; (80066e8 <_printf_float+0x2e4>)
 8006498:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800649c:	bf94      	ite	ls
 800649e:	4698      	movls	r8, r3
 80064a0:	4680      	movhi	r8, r0
 80064a2:	2303      	movs	r3, #3
 80064a4:	6123      	str	r3, [r4, #16]
 80064a6:	9b05      	ldr	r3, [sp, #20]
 80064a8:	f023 0204 	bic.w	r2, r3, #4
 80064ac:	6022      	str	r2, [r4, #0]
 80064ae:	f04f 0900 	mov.w	r9, #0
 80064b2:	9700      	str	r7, [sp, #0]
 80064b4:	4633      	mov	r3, r6
 80064b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80064b8:	4621      	mov	r1, r4
 80064ba:	4628      	mov	r0, r5
 80064bc:	f000 f9d8 	bl	8006870 <_printf_common>
 80064c0:	3001      	adds	r0, #1
 80064c2:	f040 8090 	bne.w	80065e6 <_printf_float+0x1e2>
 80064c6:	f04f 30ff 	mov.w	r0, #4294967295
 80064ca:	b00d      	add	sp, #52	; 0x34
 80064cc:	ecbd 8b02 	vpop	{d8}
 80064d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064d4:	4642      	mov	r2, r8
 80064d6:	464b      	mov	r3, r9
 80064d8:	4640      	mov	r0, r8
 80064da:	4649      	mov	r1, r9
 80064dc:	f7fa fb26 	bl	8000b2c <__aeabi_dcmpun>
 80064e0:	b140      	cbz	r0, 80064f4 <_printf_float+0xf0>
 80064e2:	464b      	mov	r3, r9
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	bfbc      	itt	lt
 80064e8:	232d      	movlt	r3, #45	; 0x2d
 80064ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80064ee:	487f      	ldr	r0, [pc, #508]	; (80066ec <_printf_float+0x2e8>)
 80064f0:	4b7f      	ldr	r3, [pc, #508]	; (80066f0 <_printf_float+0x2ec>)
 80064f2:	e7d1      	b.n	8006498 <_printf_float+0x94>
 80064f4:	6863      	ldr	r3, [r4, #4]
 80064f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80064fa:	9206      	str	r2, [sp, #24]
 80064fc:	1c5a      	adds	r2, r3, #1
 80064fe:	d13f      	bne.n	8006580 <_printf_float+0x17c>
 8006500:	2306      	movs	r3, #6
 8006502:	6063      	str	r3, [r4, #4]
 8006504:	9b05      	ldr	r3, [sp, #20]
 8006506:	6861      	ldr	r1, [r4, #4]
 8006508:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800650c:	2300      	movs	r3, #0
 800650e:	9303      	str	r3, [sp, #12]
 8006510:	ab0a      	add	r3, sp, #40	; 0x28
 8006512:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006516:	ab09      	add	r3, sp, #36	; 0x24
 8006518:	ec49 8b10 	vmov	d0, r8, r9
 800651c:	9300      	str	r3, [sp, #0]
 800651e:	6022      	str	r2, [r4, #0]
 8006520:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006524:	4628      	mov	r0, r5
 8006526:	f7ff fecd 	bl	80062c4 <__cvt>
 800652a:	9b06      	ldr	r3, [sp, #24]
 800652c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800652e:	2b47      	cmp	r3, #71	; 0x47
 8006530:	4680      	mov	r8, r0
 8006532:	d108      	bne.n	8006546 <_printf_float+0x142>
 8006534:	1cc8      	adds	r0, r1, #3
 8006536:	db02      	blt.n	800653e <_printf_float+0x13a>
 8006538:	6863      	ldr	r3, [r4, #4]
 800653a:	4299      	cmp	r1, r3
 800653c:	dd41      	ble.n	80065c2 <_printf_float+0x1be>
 800653e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006542:	fa5f fb8b 	uxtb.w	fp, fp
 8006546:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800654a:	d820      	bhi.n	800658e <_printf_float+0x18a>
 800654c:	3901      	subs	r1, #1
 800654e:	465a      	mov	r2, fp
 8006550:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006554:	9109      	str	r1, [sp, #36]	; 0x24
 8006556:	f7ff ff17 	bl	8006388 <__exponent>
 800655a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800655c:	1813      	adds	r3, r2, r0
 800655e:	2a01      	cmp	r2, #1
 8006560:	4681      	mov	r9, r0
 8006562:	6123      	str	r3, [r4, #16]
 8006564:	dc02      	bgt.n	800656c <_printf_float+0x168>
 8006566:	6822      	ldr	r2, [r4, #0]
 8006568:	07d2      	lsls	r2, r2, #31
 800656a:	d501      	bpl.n	8006570 <_printf_float+0x16c>
 800656c:	3301      	adds	r3, #1
 800656e:	6123      	str	r3, [r4, #16]
 8006570:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006574:	2b00      	cmp	r3, #0
 8006576:	d09c      	beq.n	80064b2 <_printf_float+0xae>
 8006578:	232d      	movs	r3, #45	; 0x2d
 800657a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800657e:	e798      	b.n	80064b2 <_printf_float+0xae>
 8006580:	9a06      	ldr	r2, [sp, #24]
 8006582:	2a47      	cmp	r2, #71	; 0x47
 8006584:	d1be      	bne.n	8006504 <_printf_float+0x100>
 8006586:	2b00      	cmp	r3, #0
 8006588:	d1bc      	bne.n	8006504 <_printf_float+0x100>
 800658a:	2301      	movs	r3, #1
 800658c:	e7b9      	b.n	8006502 <_printf_float+0xfe>
 800658e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006592:	d118      	bne.n	80065c6 <_printf_float+0x1c2>
 8006594:	2900      	cmp	r1, #0
 8006596:	6863      	ldr	r3, [r4, #4]
 8006598:	dd0b      	ble.n	80065b2 <_printf_float+0x1ae>
 800659a:	6121      	str	r1, [r4, #16]
 800659c:	b913      	cbnz	r3, 80065a4 <_printf_float+0x1a0>
 800659e:	6822      	ldr	r2, [r4, #0]
 80065a0:	07d0      	lsls	r0, r2, #31
 80065a2:	d502      	bpl.n	80065aa <_printf_float+0x1a6>
 80065a4:	3301      	adds	r3, #1
 80065a6:	440b      	add	r3, r1
 80065a8:	6123      	str	r3, [r4, #16]
 80065aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80065ac:	f04f 0900 	mov.w	r9, #0
 80065b0:	e7de      	b.n	8006570 <_printf_float+0x16c>
 80065b2:	b913      	cbnz	r3, 80065ba <_printf_float+0x1b6>
 80065b4:	6822      	ldr	r2, [r4, #0]
 80065b6:	07d2      	lsls	r2, r2, #31
 80065b8:	d501      	bpl.n	80065be <_printf_float+0x1ba>
 80065ba:	3302      	adds	r3, #2
 80065bc:	e7f4      	b.n	80065a8 <_printf_float+0x1a4>
 80065be:	2301      	movs	r3, #1
 80065c0:	e7f2      	b.n	80065a8 <_printf_float+0x1a4>
 80065c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80065c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065c8:	4299      	cmp	r1, r3
 80065ca:	db05      	blt.n	80065d8 <_printf_float+0x1d4>
 80065cc:	6823      	ldr	r3, [r4, #0]
 80065ce:	6121      	str	r1, [r4, #16]
 80065d0:	07d8      	lsls	r0, r3, #31
 80065d2:	d5ea      	bpl.n	80065aa <_printf_float+0x1a6>
 80065d4:	1c4b      	adds	r3, r1, #1
 80065d6:	e7e7      	b.n	80065a8 <_printf_float+0x1a4>
 80065d8:	2900      	cmp	r1, #0
 80065da:	bfd4      	ite	le
 80065dc:	f1c1 0202 	rsble	r2, r1, #2
 80065e0:	2201      	movgt	r2, #1
 80065e2:	4413      	add	r3, r2
 80065e4:	e7e0      	b.n	80065a8 <_printf_float+0x1a4>
 80065e6:	6823      	ldr	r3, [r4, #0]
 80065e8:	055a      	lsls	r2, r3, #21
 80065ea:	d407      	bmi.n	80065fc <_printf_float+0x1f8>
 80065ec:	6923      	ldr	r3, [r4, #16]
 80065ee:	4642      	mov	r2, r8
 80065f0:	4631      	mov	r1, r6
 80065f2:	4628      	mov	r0, r5
 80065f4:	47b8      	blx	r7
 80065f6:	3001      	adds	r0, #1
 80065f8:	d12c      	bne.n	8006654 <_printf_float+0x250>
 80065fa:	e764      	b.n	80064c6 <_printf_float+0xc2>
 80065fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006600:	f240 80e0 	bls.w	80067c4 <_printf_float+0x3c0>
 8006604:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006608:	2200      	movs	r2, #0
 800660a:	2300      	movs	r3, #0
 800660c:	f7fa fa5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006610:	2800      	cmp	r0, #0
 8006612:	d034      	beq.n	800667e <_printf_float+0x27a>
 8006614:	4a37      	ldr	r2, [pc, #220]	; (80066f4 <_printf_float+0x2f0>)
 8006616:	2301      	movs	r3, #1
 8006618:	4631      	mov	r1, r6
 800661a:	4628      	mov	r0, r5
 800661c:	47b8      	blx	r7
 800661e:	3001      	adds	r0, #1
 8006620:	f43f af51 	beq.w	80064c6 <_printf_float+0xc2>
 8006624:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006628:	429a      	cmp	r2, r3
 800662a:	db02      	blt.n	8006632 <_printf_float+0x22e>
 800662c:	6823      	ldr	r3, [r4, #0]
 800662e:	07d8      	lsls	r0, r3, #31
 8006630:	d510      	bpl.n	8006654 <_printf_float+0x250>
 8006632:	ee18 3a10 	vmov	r3, s16
 8006636:	4652      	mov	r2, sl
 8006638:	4631      	mov	r1, r6
 800663a:	4628      	mov	r0, r5
 800663c:	47b8      	blx	r7
 800663e:	3001      	adds	r0, #1
 8006640:	f43f af41 	beq.w	80064c6 <_printf_float+0xc2>
 8006644:	f04f 0800 	mov.w	r8, #0
 8006648:	f104 091a 	add.w	r9, r4, #26
 800664c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800664e:	3b01      	subs	r3, #1
 8006650:	4543      	cmp	r3, r8
 8006652:	dc09      	bgt.n	8006668 <_printf_float+0x264>
 8006654:	6823      	ldr	r3, [r4, #0]
 8006656:	079b      	lsls	r3, r3, #30
 8006658:	f100 8105 	bmi.w	8006866 <_printf_float+0x462>
 800665c:	68e0      	ldr	r0, [r4, #12]
 800665e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006660:	4298      	cmp	r0, r3
 8006662:	bfb8      	it	lt
 8006664:	4618      	movlt	r0, r3
 8006666:	e730      	b.n	80064ca <_printf_float+0xc6>
 8006668:	2301      	movs	r3, #1
 800666a:	464a      	mov	r2, r9
 800666c:	4631      	mov	r1, r6
 800666e:	4628      	mov	r0, r5
 8006670:	47b8      	blx	r7
 8006672:	3001      	adds	r0, #1
 8006674:	f43f af27 	beq.w	80064c6 <_printf_float+0xc2>
 8006678:	f108 0801 	add.w	r8, r8, #1
 800667c:	e7e6      	b.n	800664c <_printf_float+0x248>
 800667e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006680:	2b00      	cmp	r3, #0
 8006682:	dc39      	bgt.n	80066f8 <_printf_float+0x2f4>
 8006684:	4a1b      	ldr	r2, [pc, #108]	; (80066f4 <_printf_float+0x2f0>)
 8006686:	2301      	movs	r3, #1
 8006688:	4631      	mov	r1, r6
 800668a:	4628      	mov	r0, r5
 800668c:	47b8      	blx	r7
 800668e:	3001      	adds	r0, #1
 8006690:	f43f af19 	beq.w	80064c6 <_printf_float+0xc2>
 8006694:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006698:	4313      	orrs	r3, r2
 800669a:	d102      	bne.n	80066a2 <_printf_float+0x29e>
 800669c:	6823      	ldr	r3, [r4, #0]
 800669e:	07d9      	lsls	r1, r3, #31
 80066a0:	d5d8      	bpl.n	8006654 <_printf_float+0x250>
 80066a2:	ee18 3a10 	vmov	r3, s16
 80066a6:	4652      	mov	r2, sl
 80066a8:	4631      	mov	r1, r6
 80066aa:	4628      	mov	r0, r5
 80066ac:	47b8      	blx	r7
 80066ae:	3001      	adds	r0, #1
 80066b0:	f43f af09 	beq.w	80064c6 <_printf_float+0xc2>
 80066b4:	f04f 0900 	mov.w	r9, #0
 80066b8:	f104 0a1a 	add.w	sl, r4, #26
 80066bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066be:	425b      	negs	r3, r3
 80066c0:	454b      	cmp	r3, r9
 80066c2:	dc01      	bgt.n	80066c8 <_printf_float+0x2c4>
 80066c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066c6:	e792      	b.n	80065ee <_printf_float+0x1ea>
 80066c8:	2301      	movs	r3, #1
 80066ca:	4652      	mov	r2, sl
 80066cc:	4631      	mov	r1, r6
 80066ce:	4628      	mov	r0, r5
 80066d0:	47b8      	blx	r7
 80066d2:	3001      	adds	r0, #1
 80066d4:	f43f aef7 	beq.w	80064c6 <_printf_float+0xc2>
 80066d8:	f109 0901 	add.w	r9, r9, #1
 80066dc:	e7ee      	b.n	80066bc <_printf_float+0x2b8>
 80066de:	bf00      	nop
 80066e0:	7fefffff 	.word	0x7fefffff
 80066e4:	0800b508 	.word	0x0800b508
 80066e8:	0800b50c 	.word	0x0800b50c
 80066ec:	0800b514 	.word	0x0800b514
 80066f0:	0800b510 	.word	0x0800b510
 80066f4:	0800b518 	.word	0x0800b518
 80066f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80066fc:	429a      	cmp	r2, r3
 80066fe:	bfa8      	it	ge
 8006700:	461a      	movge	r2, r3
 8006702:	2a00      	cmp	r2, #0
 8006704:	4691      	mov	r9, r2
 8006706:	dc37      	bgt.n	8006778 <_printf_float+0x374>
 8006708:	f04f 0b00 	mov.w	fp, #0
 800670c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006710:	f104 021a 	add.w	r2, r4, #26
 8006714:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006716:	9305      	str	r3, [sp, #20]
 8006718:	eba3 0309 	sub.w	r3, r3, r9
 800671c:	455b      	cmp	r3, fp
 800671e:	dc33      	bgt.n	8006788 <_printf_float+0x384>
 8006720:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006724:	429a      	cmp	r2, r3
 8006726:	db3b      	blt.n	80067a0 <_printf_float+0x39c>
 8006728:	6823      	ldr	r3, [r4, #0]
 800672a:	07da      	lsls	r2, r3, #31
 800672c:	d438      	bmi.n	80067a0 <_printf_float+0x39c>
 800672e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006730:	9a05      	ldr	r2, [sp, #20]
 8006732:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006734:	1a9a      	subs	r2, r3, r2
 8006736:	eba3 0901 	sub.w	r9, r3, r1
 800673a:	4591      	cmp	r9, r2
 800673c:	bfa8      	it	ge
 800673e:	4691      	movge	r9, r2
 8006740:	f1b9 0f00 	cmp.w	r9, #0
 8006744:	dc35      	bgt.n	80067b2 <_printf_float+0x3ae>
 8006746:	f04f 0800 	mov.w	r8, #0
 800674a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800674e:	f104 0a1a 	add.w	sl, r4, #26
 8006752:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006756:	1a9b      	subs	r3, r3, r2
 8006758:	eba3 0309 	sub.w	r3, r3, r9
 800675c:	4543      	cmp	r3, r8
 800675e:	f77f af79 	ble.w	8006654 <_printf_float+0x250>
 8006762:	2301      	movs	r3, #1
 8006764:	4652      	mov	r2, sl
 8006766:	4631      	mov	r1, r6
 8006768:	4628      	mov	r0, r5
 800676a:	47b8      	blx	r7
 800676c:	3001      	adds	r0, #1
 800676e:	f43f aeaa 	beq.w	80064c6 <_printf_float+0xc2>
 8006772:	f108 0801 	add.w	r8, r8, #1
 8006776:	e7ec      	b.n	8006752 <_printf_float+0x34e>
 8006778:	4613      	mov	r3, r2
 800677a:	4631      	mov	r1, r6
 800677c:	4642      	mov	r2, r8
 800677e:	4628      	mov	r0, r5
 8006780:	47b8      	blx	r7
 8006782:	3001      	adds	r0, #1
 8006784:	d1c0      	bne.n	8006708 <_printf_float+0x304>
 8006786:	e69e      	b.n	80064c6 <_printf_float+0xc2>
 8006788:	2301      	movs	r3, #1
 800678a:	4631      	mov	r1, r6
 800678c:	4628      	mov	r0, r5
 800678e:	9205      	str	r2, [sp, #20]
 8006790:	47b8      	blx	r7
 8006792:	3001      	adds	r0, #1
 8006794:	f43f ae97 	beq.w	80064c6 <_printf_float+0xc2>
 8006798:	9a05      	ldr	r2, [sp, #20]
 800679a:	f10b 0b01 	add.w	fp, fp, #1
 800679e:	e7b9      	b.n	8006714 <_printf_float+0x310>
 80067a0:	ee18 3a10 	vmov	r3, s16
 80067a4:	4652      	mov	r2, sl
 80067a6:	4631      	mov	r1, r6
 80067a8:	4628      	mov	r0, r5
 80067aa:	47b8      	blx	r7
 80067ac:	3001      	adds	r0, #1
 80067ae:	d1be      	bne.n	800672e <_printf_float+0x32a>
 80067b0:	e689      	b.n	80064c6 <_printf_float+0xc2>
 80067b2:	9a05      	ldr	r2, [sp, #20]
 80067b4:	464b      	mov	r3, r9
 80067b6:	4442      	add	r2, r8
 80067b8:	4631      	mov	r1, r6
 80067ba:	4628      	mov	r0, r5
 80067bc:	47b8      	blx	r7
 80067be:	3001      	adds	r0, #1
 80067c0:	d1c1      	bne.n	8006746 <_printf_float+0x342>
 80067c2:	e680      	b.n	80064c6 <_printf_float+0xc2>
 80067c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067c6:	2a01      	cmp	r2, #1
 80067c8:	dc01      	bgt.n	80067ce <_printf_float+0x3ca>
 80067ca:	07db      	lsls	r3, r3, #31
 80067cc:	d538      	bpl.n	8006840 <_printf_float+0x43c>
 80067ce:	2301      	movs	r3, #1
 80067d0:	4642      	mov	r2, r8
 80067d2:	4631      	mov	r1, r6
 80067d4:	4628      	mov	r0, r5
 80067d6:	47b8      	blx	r7
 80067d8:	3001      	adds	r0, #1
 80067da:	f43f ae74 	beq.w	80064c6 <_printf_float+0xc2>
 80067de:	ee18 3a10 	vmov	r3, s16
 80067e2:	4652      	mov	r2, sl
 80067e4:	4631      	mov	r1, r6
 80067e6:	4628      	mov	r0, r5
 80067e8:	47b8      	blx	r7
 80067ea:	3001      	adds	r0, #1
 80067ec:	f43f ae6b 	beq.w	80064c6 <_printf_float+0xc2>
 80067f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067f4:	2200      	movs	r2, #0
 80067f6:	2300      	movs	r3, #0
 80067f8:	f7fa f966 	bl	8000ac8 <__aeabi_dcmpeq>
 80067fc:	b9d8      	cbnz	r0, 8006836 <_printf_float+0x432>
 80067fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006800:	f108 0201 	add.w	r2, r8, #1
 8006804:	3b01      	subs	r3, #1
 8006806:	4631      	mov	r1, r6
 8006808:	4628      	mov	r0, r5
 800680a:	47b8      	blx	r7
 800680c:	3001      	adds	r0, #1
 800680e:	d10e      	bne.n	800682e <_printf_float+0x42a>
 8006810:	e659      	b.n	80064c6 <_printf_float+0xc2>
 8006812:	2301      	movs	r3, #1
 8006814:	4652      	mov	r2, sl
 8006816:	4631      	mov	r1, r6
 8006818:	4628      	mov	r0, r5
 800681a:	47b8      	blx	r7
 800681c:	3001      	adds	r0, #1
 800681e:	f43f ae52 	beq.w	80064c6 <_printf_float+0xc2>
 8006822:	f108 0801 	add.w	r8, r8, #1
 8006826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006828:	3b01      	subs	r3, #1
 800682a:	4543      	cmp	r3, r8
 800682c:	dcf1      	bgt.n	8006812 <_printf_float+0x40e>
 800682e:	464b      	mov	r3, r9
 8006830:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006834:	e6dc      	b.n	80065f0 <_printf_float+0x1ec>
 8006836:	f04f 0800 	mov.w	r8, #0
 800683a:	f104 0a1a 	add.w	sl, r4, #26
 800683e:	e7f2      	b.n	8006826 <_printf_float+0x422>
 8006840:	2301      	movs	r3, #1
 8006842:	4642      	mov	r2, r8
 8006844:	e7df      	b.n	8006806 <_printf_float+0x402>
 8006846:	2301      	movs	r3, #1
 8006848:	464a      	mov	r2, r9
 800684a:	4631      	mov	r1, r6
 800684c:	4628      	mov	r0, r5
 800684e:	47b8      	blx	r7
 8006850:	3001      	adds	r0, #1
 8006852:	f43f ae38 	beq.w	80064c6 <_printf_float+0xc2>
 8006856:	f108 0801 	add.w	r8, r8, #1
 800685a:	68e3      	ldr	r3, [r4, #12]
 800685c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800685e:	1a5b      	subs	r3, r3, r1
 8006860:	4543      	cmp	r3, r8
 8006862:	dcf0      	bgt.n	8006846 <_printf_float+0x442>
 8006864:	e6fa      	b.n	800665c <_printf_float+0x258>
 8006866:	f04f 0800 	mov.w	r8, #0
 800686a:	f104 0919 	add.w	r9, r4, #25
 800686e:	e7f4      	b.n	800685a <_printf_float+0x456>

08006870 <_printf_common>:
 8006870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006874:	4616      	mov	r6, r2
 8006876:	4699      	mov	r9, r3
 8006878:	688a      	ldr	r2, [r1, #8]
 800687a:	690b      	ldr	r3, [r1, #16]
 800687c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006880:	4293      	cmp	r3, r2
 8006882:	bfb8      	it	lt
 8006884:	4613      	movlt	r3, r2
 8006886:	6033      	str	r3, [r6, #0]
 8006888:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800688c:	4607      	mov	r7, r0
 800688e:	460c      	mov	r4, r1
 8006890:	b10a      	cbz	r2, 8006896 <_printf_common+0x26>
 8006892:	3301      	adds	r3, #1
 8006894:	6033      	str	r3, [r6, #0]
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	0699      	lsls	r1, r3, #26
 800689a:	bf42      	ittt	mi
 800689c:	6833      	ldrmi	r3, [r6, #0]
 800689e:	3302      	addmi	r3, #2
 80068a0:	6033      	strmi	r3, [r6, #0]
 80068a2:	6825      	ldr	r5, [r4, #0]
 80068a4:	f015 0506 	ands.w	r5, r5, #6
 80068a8:	d106      	bne.n	80068b8 <_printf_common+0x48>
 80068aa:	f104 0a19 	add.w	sl, r4, #25
 80068ae:	68e3      	ldr	r3, [r4, #12]
 80068b0:	6832      	ldr	r2, [r6, #0]
 80068b2:	1a9b      	subs	r3, r3, r2
 80068b4:	42ab      	cmp	r3, r5
 80068b6:	dc26      	bgt.n	8006906 <_printf_common+0x96>
 80068b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80068bc:	1e13      	subs	r3, r2, #0
 80068be:	6822      	ldr	r2, [r4, #0]
 80068c0:	bf18      	it	ne
 80068c2:	2301      	movne	r3, #1
 80068c4:	0692      	lsls	r2, r2, #26
 80068c6:	d42b      	bmi.n	8006920 <_printf_common+0xb0>
 80068c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068cc:	4649      	mov	r1, r9
 80068ce:	4638      	mov	r0, r7
 80068d0:	47c0      	blx	r8
 80068d2:	3001      	adds	r0, #1
 80068d4:	d01e      	beq.n	8006914 <_printf_common+0xa4>
 80068d6:	6823      	ldr	r3, [r4, #0]
 80068d8:	68e5      	ldr	r5, [r4, #12]
 80068da:	6832      	ldr	r2, [r6, #0]
 80068dc:	f003 0306 	and.w	r3, r3, #6
 80068e0:	2b04      	cmp	r3, #4
 80068e2:	bf08      	it	eq
 80068e4:	1aad      	subeq	r5, r5, r2
 80068e6:	68a3      	ldr	r3, [r4, #8]
 80068e8:	6922      	ldr	r2, [r4, #16]
 80068ea:	bf0c      	ite	eq
 80068ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068f0:	2500      	movne	r5, #0
 80068f2:	4293      	cmp	r3, r2
 80068f4:	bfc4      	itt	gt
 80068f6:	1a9b      	subgt	r3, r3, r2
 80068f8:	18ed      	addgt	r5, r5, r3
 80068fa:	2600      	movs	r6, #0
 80068fc:	341a      	adds	r4, #26
 80068fe:	42b5      	cmp	r5, r6
 8006900:	d11a      	bne.n	8006938 <_printf_common+0xc8>
 8006902:	2000      	movs	r0, #0
 8006904:	e008      	b.n	8006918 <_printf_common+0xa8>
 8006906:	2301      	movs	r3, #1
 8006908:	4652      	mov	r2, sl
 800690a:	4649      	mov	r1, r9
 800690c:	4638      	mov	r0, r7
 800690e:	47c0      	blx	r8
 8006910:	3001      	adds	r0, #1
 8006912:	d103      	bne.n	800691c <_printf_common+0xac>
 8006914:	f04f 30ff 	mov.w	r0, #4294967295
 8006918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800691c:	3501      	adds	r5, #1
 800691e:	e7c6      	b.n	80068ae <_printf_common+0x3e>
 8006920:	18e1      	adds	r1, r4, r3
 8006922:	1c5a      	adds	r2, r3, #1
 8006924:	2030      	movs	r0, #48	; 0x30
 8006926:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800692a:	4422      	add	r2, r4
 800692c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006930:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006934:	3302      	adds	r3, #2
 8006936:	e7c7      	b.n	80068c8 <_printf_common+0x58>
 8006938:	2301      	movs	r3, #1
 800693a:	4622      	mov	r2, r4
 800693c:	4649      	mov	r1, r9
 800693e:	4638      	mov	r0, r7
 8006940:	47c0      	blx	r8
 8006942:	3001      	adds	r0, #1
 8006944:	d0e6      	beq.n	8006914 <_printf_common+0xa4>
 8006946:	3601      	adds	r6, #1
 8006948:	e7d9      	b.n	80068fe <_printf_common+0x8e>
	...

0800694c <_printf_i>:
 800694c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006950:	7e0f      	ldrb	r7, [r1, #24]
 8006952:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006954:	2f78      	cmp	r7, #120	; 0x78
 8006956:	4691      	mov	r9, r2
 8006958:	4680      	mov	r8, r0
 800695a:	460c      	mov	r4, r1
 800695c:	469a      	mov	sl, r3
 800695e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006962:	d807      	bhi.n	8006974 <_printf_i+0x28>
 8006964:	2f62      	cmp	r7, #98	; 0x62
 8006966:	d80a      	bhi.n	800697e <_printf_i+0x32>
 8006968:	2f00      	cmp	r7, #0
 800696a:	f000 80d8 	beq.w	8006b1e <_printf_i+0x1d2>
 800696e:	2f58      	cmp	r7, #88	; 0x58
 8006970:	f000 80a3 	beq.w	8006aba <_printf_i+0x16e>
 8006974:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006978:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800697c:	e03a      	b.n	80069f4 <_printf_i+0xa8>
 800697e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006982:	2b15      	cmp	r3, #21
 8006984:	d8f6      	bhi.n	8006974 <_printf_i+0x28>
 8006986:	a101      	add	r1, pc, #4	; (adr r1, 800698c <_printf_i+0x40>)
 8006988:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800698c:	080069e5 	.word	0x080069e5
 8006990:	080069f9 	.word	0x080069f9
 8006994:	08006975 	.word	0x08006975
 8006998:	08006975 	.word	0x08006975
 800699c:	08006975 	.word	0x08006975
 80069a0:	08006975 	.word	0x08006975
 80069a4:	080069f9 	.word	0x080069f9
 80069a8:	08006975 	.word	0x08006975
 80069ac:	08006975 	.word	0x08006975
 80069b0:	08006975 	.word	0x08006975
 80069b4:	08006975 	.word	0x08006975
 80069b8:	08006b05 	.word	0x08006b05
 80069bc:	08006a29 	.word	0x08006a29
 80069c0:	08006ae7 	.word	0x08006ae7
 80069c4:	08006975 	.word	0x08006975
 80069c8:	08006975 	.word	0x08006975
 80069cc:	08006b27 	.word	0x08006b27
 80069d0:	08006975 	.word	0x08006975
 80069d4:	08006a29 	.word	0x08006a29
 80069d8:	08006975 	.word	0x08006975
 80069dc:	08006975 	.word	0x08006975
 80069e0:	08006aef 	.word	0x08006aef
 80069e4:	682b      	ldr	r3, [r5, #0]
 80069e6:	1d1a      	adds	r2, r3, #4
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	602a      	str	r2, [r5, #0]
 80069ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069f4:	2301      	movs	r3, #1
 80069f6:	e0a3      	b.n	8006b40 <_printf_i+0x1f4>
 80069f8:	6820      	ldr	r0, [r4, #0]
 80069fa:	6829      	ldr	r1, [r5, #0]
 80069fc:	0606      	lsls	r6, r0, #24
 80069fe:	f101 0304 	add.w	r3, r1, #4
 8006a02:	d50a      	bpl.n	8006a1a <_printf_i+0xce>
 8006a04:	680e      	ldr	r6, [r1, #0]
 8006a06:	602b      	str	r3, [r5, #0]
 8006a08:	2e00      	cmp	r6, #0
 8006a0a:	da03      	bge.n	8006a14 <_printf_i+0xc8>
 8006a0c:	232d      	movs	r3, #45	; 0x2d
 8006a0e:	4276      	negs	r6, r6
 8006a10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a14:	485e      	ldr	r0, [pc, #376]	; (8006b90 <_printf_i+0x244>)
 8006a16:	230a      	movs	r3, #10
 8006a18:	e019      	b.n	8006a4e <_printf_i+0x102>
 8006a1a:	680e      	ldr	r6, [r1, #0]
 8006a1c:	602b      	str	r3, [r5, #0]
 8006a1e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a22:	bf18      	it	ne
 8006a24:	b236      	sxthne	r6, r6
 8006a26:	e7ef      	b.n	8006a08 <_printf_i+0xbc>
 8006a28:	682b      	ldr	r3, [r5, #0]
 8006a2a:	6820      	ldr	r0, [r4, #0]
 8006a2c:	1d19      	adds	r1, r3, #4
 8006a2e:	6029      	str	r1, [r5, #0]
 8006a30:	0601      	lsls	r1, r0, #24
 8006a32:	d501      	bpl.n	8006a38 <_printf_i+0xec>
 8006a34:	681e      	ldr	r6, [r3, #0]
 8006a36:	e002      	b.n	8006a3e <_printf_i+0xf2>
 8006a38:	0646      	lsls	r6, r0, #25
 8006a3a:	d5fb      	bpl.n	8006a34 <_printf_i+0xe8>
 8006a3c:	881e      	ldrh	r6, [r3, #0]
 8006a3e:	4854      	ldr	r0, [pc, #336]	; (8006b90 <_printf_i+0x244>)
 8006a40:	2f6f      	cmp	r7, #111	; 0x6f
 8006a42:	bf0c      	ite	eq
 8006a44:	2308      	moveq	r3, #8
 8006a46:	230a      	movne	r3, #10
 8006a48:	2100      	movs	r1, #0
 8006a4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a4e:	6865      	ldr	r5, [r4, #4]
 8006a50:	60a5      	str	r5, [r4, #8]
 8006a52:	2d00      	cmp	r5, #0
 8006a54:	bfa2      	ittt	ge
 8006a56:	6821      	ldrge	r1, [r4, #0]
 8006a58:	f021 0104 	bicge.w	r1, r1, #4
 8006a5c:	6021      	strge	r1, [r4, #0]
 8006a5e:	b90e      	cbnz	r6, 8006a64 <_printf_i+0x118>
 8006a60:	2d00      	cmp	r5, #0
 8006a62:	d04d      	beq.n	8006b00 <_printf_i+0x1b4>
 8006a64:	4615      	mov	r5, r2
 8006a66:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a6a:	fb03 6711 	mls	r7, r3, r1, r6
 8006a6e:	5dc7      	ldrb	r7, [r0, r7]
 8006a70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a74:	4637      	mov	r7, r6
 8006a76:	42bb      	cmp	r3, r7
 8006a78:	460e      	mov	r6, r1
 8006a7a:	d9f4      	bls.n	8006a66 <_printf_i+0x11a>
 8006a7c:	2b08      	cmp	r3, #8
 8006a7e:	d10b      	bne.n	8006a98 <_printf_i+0x14c>
 8006a80:	6823      	ldr	r3, [r4, #0]
 8006a82:	07de      	lsls	r6, r3, #31
 8006a84:	d508      	bpl.n	8006a98 <_printf_i+0x14c>
 8006a86:	6923      	ldr	r3, [r4, #16]
 8006a88:	6861      	ldr	r1, [r4, #4]
 8006a8a:	4299      	cmp	r1, r3
 8006a8c:	bfde      	ittt	le
 8006a8e:	2330      	movle	r3, #48	; 0x30
 8006a90:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a94:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a98:	1b52      	subs	r2, r2, r5
 8006a9a:	6122      	str	r2, [r4, #16]
 8006a9c:	f8cd a000 	str.w	sl, [sp]
 8006aa0:	464b      	mov	r3, r9
 8006aa2:	aa03      	add	r2, sp, #12
 8006aa4:	4621      	mov	r1, r4
 8006aa6:	4640      	mov	r0, r8
 8006aa8:	f7ff fee2 	bl	8006870 <_printf_common>
 8006aac:	3001      	adds	r0, #1
 8006aae:	d14c      	bne.n	8006b4a <_printf_i+0x1fe>
 8006ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab4:	b004      	add	sp, #16
 8006ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aba:	4835      	ldr	r0, [pc, #212]	; (8006b90 <_printf_i+0x244>)
 8006abc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006ac0:	6829      	ldr	r1, [r5, #0]
 8006ac2:	6823      	ldr	r3, [r4, #0]
 8006ac4:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ac8:	6029      	str	r1, [r5, #0]
 8006aca:	061d      	lsls	r5, r3, #24
 8006acc:	d514      	bpl.n	8006af8 <_printf_i+0x1ac>
 8006ace:	07df      	lsls	r7, r3, #31
 8006ad0:	bf44      	itt	mi
 8006ad2:	f043 0320 	orrmi.w	r3, r3, #32
 8006ad6:	6023      	strmi	r3, [r4, #0]
 8006ad8:	b91e      	cbnz	r6, 8006ae2 <_printf_i+0x196>
 8006ada:	6823      	ldr	r3, [r4, #0]
 8006adc:	f023 0320 	bic.w	r3, r3, #32
 8006ae0:	6023      	str	r3, [r4, #0]
 8006ae2:	2310      	movs	r3, #16
 8006ae4:	e7b0      	b.n	8006a48 <_printf_i+0xfc>
 8006ae6:	6823      	ldr	r3, [r4, #0]
 8006ae8:	f043 0320 	orr.w	r3, r3, #32
 8006aec:	6023      	str	r3, [r4, #0]
 8006aee:	2378      	movs	r3, #120	; 0x78
 8006af0:	4828      	ldr	r0, [pc, #160]	; (8006b94 <_printf_i+0x248>)
 8006af2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006af6:	e7e3      	b.n	8006ac0 <_printf_i+0x174>
 8006af8:	0659      	lsls	r1, r3, #25
 8006afa:	bf48      	it	mi
 8006afc:	b2b6      	uxthmi	r6, r6
 8006afe:	e7e6      	b.n	8006ace <_printf_i+0x182>
 8006b00:	4615      	mov	r5, r2
 8006b02:	e7bb      	b.n	8006a7c <_printf_i+0x130>
 8006b04:	682b      	ldr	r3, [r5, #0]
 8006b06:	6826      	ldr	r6, [r4, #0]
 8006b08:	6961      	ldr	r1, [r4, #20]
 8006b0a:	1d18      	adds	r0, r3, #4
 8006b0c:	6028      	str	r0, [r5, #0]
 8006b0e:	0635      	lsls	r5, r6, #24
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	d501      	bpl.n	8006b18 <_printf_i+0x1cc>
 8006b14:	6019      	str	r1, [r3, #0]
 8006b16:	e002      	b.n	8006b1e <_printf_i+0x1d2>
 8006b18:	0670      	lsls	r0, r6, #25
 8006b1a:	d5fb      	bpl.n	8006b14 <_printf_i+0x1c8>
 8006b1c:	8019      	strh	r1, [r3, #0]
 8006b1e:	2300      	movs	r3, #0
 8006b20:	6123      	str	r3, [r4, #16]
 8006b22:	4615      	mov	r5, r2
 8006b24:	e7ba      	b.n	8006a9c <_printf_i+0x150>
 8006b26:	682b      	ldr	r3, [r5, #0]
 8006b28:	1d1a      	adds	r2, r3, #4
 8006b2a:	602a      	str	r2, [r5, #0]
 8006b2c:	681d      	ldr	r5, [r3, #0]
 8006b2e:	6862      	ldr	r2, [r4, #4]
 8006b30:	2100      	movs	r1, #0
 8006b32:	4628      	mov	r0, r5
 8006b34:	f7f9 fb54 	bl	80001e0 <memchr>
 8006b38:	b108      	cbz	r0, 8006b3e <_printf_i+0x1f2>
 8006b3a:	1b40      	subs	r0, r0, r5
 8006b3c:	6060      	str	r0, [r4, #4]
 8006b3e:	6863      	ldr	r3, [r4, #4]
 8006b40:	6123      	str	r3, [r4, #16]
 8006b42:	2300      	movs	r3, #0
 8006b44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b48:	e7a8      	b.n	8006a9c <_printf_i+0x150>
 8006b4a:	6923      	ldr	r3, [r4, #16]
 8006b4c:	462a      	mov	r2, r5
 8006b4e:	4649      	mov	r1, r9
 8006b50:	4640      	mov	r0, r8
 8006b52:	47d0      	blx	sl
 8006b54:	3001      	adds	r0, #1
 8006b56:	d0ab      	beq.n	8006ab0 <_printf_i+0x164>
 8006b58:	6823      	ldr	r3, [r4, #0]
 8006b5a:	079b      	lsls	r3, r3, #30
 8006b5c:	d413      	bmi.n	8006b86 <_printf_i+0x23a>
 8006b5e:	68e0      	ldr	r0, [r4, #12]
 8006b60:	9b03      	ldr	r3, [sp, #12]
 8006b62:	4298      	cmp	r0, r3
 8006b64:	bfb8      	it	lt
 8006b66:	4618      	movlt	r0, r3
 8006b68:	e7a4      	b.n	8006ab4 <_printf_i+0x168>
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	4632      	mov	r2, r6
 8006b6e:	4649      	mov	r1, r9
 8006b70:	4640      	mov	r0, r8
 8006b72:	47d0      	blx	sl
 8006b74:	3001      	adds	r0, #1
 8006b76:	d09b      	beq.n	8006ab0 <_printf_i+0x164>
 8006b78:	3501      	adds	r5, #1
 8006b7a:	68e3      	ldr	r3, [r4, #12]
 8006b7c:	9903      	ldr	r1, [sp, #12]
 8006b7e:	1a5b      	subs	r3, r3, r1
 8006b80:	42ab      	cmp	r3, r5
 8006b82:	dcf2      	bgt.n	8006b6a <_printf_i+0x21e>
 8006b84:	e7eb      	b.n	8006b5e <_printf_i+0x212>
 8006b86:	2500      	movs	r5, #0
 8006b88:	f104 0619 	add.w	r6, r4, #25
 8006b8c:	e7f5      	b.n	8006b7a <_printf_i+0x22e>
 8006b8e:	bf00      	nop
 8006b90:	0800b51a 	.word	0x0800b51a
 8006b94:	0800b52b 	.word	0x0800b52b

08006b98 <_scanf_float>:
 8006b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b9c:	b087      	sub	sp, #28
 8006b9e:	4617      	mov	r7, r2
 8006ba0:	9303      	str	r3, [sp, #12]
 8006ba2:	688b      	ldr	r3, [r1, #8]
 8006ba4:	1e5a      	subs	r2, r3, #1
 8006ba6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006baa:	bf83      	ittte	hi
 8006bac:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006bb0:	195b      	addhi	r3, r3, r5
 8006bb2:	9302      	strhi	r3, [sp, #8]
 8006bb4:	2300      	movls	r3, #0
 8006bb6:	bf86      	itte	hi
 8006bb8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006bbc:	608b      	strhi	r3, [r1, #8]
 8006bbe:	9302      	strls	r3, [sp, #8]
 8006bc0:	680b      	ldr	r3, [r1, #0]
 8006bc2:	468b      	mov	fp, r1
 8006bc4:	2500      	movs	r5, #0
 8006bc6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006bca:	f84b 3b1c 	str.w	r3, [fp], #28
 8006bce:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006bd2:	4680      	mov	r8, r0
 8006bd4:	460c      	mov	r4, r1
 8006bd6:	465e      	mov	r6, fp
 8006bd8:	46aa      	mov	sl, r5
 8006bda:	46a9      	mov	r9, r5
 8006bdc:	9501      	str	r5, [sp, #4]
 8006bde:	68a2      	ldr	r2, [r4, #8]
 8006be0:	b152      	cbz	r2, 8006bf8 <_scanf_float+0x60>
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	2b4e      	cmp	r3, #78	; 0x4e
 8006be8:	d864      	bhi.n	8006cb4 <_scanf_float+0x11c>
 8006bea:	2b40      	cmp	r3, #64	; 0x40
 8006bec:	d83c      	bhi.n	8006c68 <_scanf_float+0xd0>
 8006bee:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006bf2:	b2c8      	uxtb	r0, r1
 8006bf4:	280e      	cmp	r0, #14
 8006bf6:	d93a      	bls.n	8006c6e <_scanf_float+0xd6>
 8006bf8:	f1b9 0f00 	cmp.w	r9, #0
 8006bfc:	d003      	beq.n	8006c06 <_scanf_float+0x6e>
 8006bfe:	6823      	ldr	r3, [r4, #0]
 8006c00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c04:	6023      	str	r3, [r4, #0]
 8006c06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c0a:	f1ba 0f01 	cmp.w	sl, #1
 8006c0e:	f200 8113 	bhi.w	8006e38 <_scanf_float+0x2a0>
 8006c12:	455e      	cmp	r6, fp
 8006c14:	f200 8105 	bhi.w	8006e22 <_scanf_float+0x28a>
 8006c18:	2501      	movs	r5, #1
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	b007      	add	sp, #28
 8006c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c22:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006c26:	2a0d      	cmp	r2, #13
 8006c28:	d8e6      	bhi.n	8006bf8 <_scanf_float+0x60>
 8006c2a:	a101      	add	r1, pc, #4	; (adr r1, 8006c30 <_scanf_float+0x98>)
 8006c2c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006c30:	08006d6f 	.word	0x08006d6f
 8006c34:	08006bf9 	.word	0x08006bf9
 8006c38:	08006bf9 	.word	0x08006bf9
 8006c3c:	08006bf9 	.word	0x08006bf9
 8006c40:	08006dcf 	.word	0x08006dcf
 8006c44:	08006da7 	.word	0x08006da7
 8006c48:	08006bf9 	.word	0x08006bf9
 8006c4c:	08006bf9 	.word	0x08006bf9
 8006c50:	08006d7d 	.word	0x08006d7d
 8006c54:	08006bf9 	.word	0x08006bf9
 8006c58:	08006bf9 	.word	0x08006bf9
 8006c5c:	08006bf9 	.word	0x08006bf9
 8006c60:	08006bf9 	.word	0x08006bf9
 8006c64:	08006d35 	.word	0x08006d35
 8006c68:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006c6c:	e7db      	b.n	8006c26 <_scanf_float+0x8e>
 8006c6e:	290e      	cmp	r1, #14
 8006c70:	d8c2      	bhi.n	8006bf8 <_scanf_float+0x60>
 8006c72:	a001      	add	r0, pc, #4	; (adr r0, 8006c78 <_scanf_float+0xe0>)
 8006c74:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006c78:	08006d27 	.word	0x08006d27
 8006c7c:	08006bf9 	.word	0x08006bf9
 8006c80:	08006d27 	.word	0x08006d27
 8006c84:	08006dbb 	.word	0x08006dbb
 8006c88:	08006bf9 	.word	0x08006bf9
 8006c8c:	08006cd5 	.word	0x08006cd5
 8006c90:	08006d11 	.word	0x08006d11
 8006c94:	08006d11 	.word	0x08006d11
 8006c98:	08006d11 	.word	0x08006d11
 8006c9c:	08006d11 	.word	0x08006d11
 8006ca0:	08006d11 	.word	0x08006d11
 8006ca4:	08006d11 	.word	0x08006d11
 8006ca8:	08006d11 	.word	0x08006d11
 8006cac:	08006d11 	.word	0x08006d11
 8006cb0:	08006d11 	.word	0x08006d11
 8006cb4:	2b6e      	cmp	r3, #110	; 0x6e
 8006cb6:	d809      	bhi.n	8006ccc <_scanf_float+0x134>
 8006cb8:	2b60      	cmp	r3, #96	; 0x60
 8006cba:	d8b2      	bhi.n	8006c22 <_scanf_float+0x8a>
 8006cbc:	2b54      	cmp	r3, #84	; 0x54
 8006cbe:	d077      	beq.n	8006db0 <_scanf_float+0x218>
 8006cc0:	2b59      	cmp	r3, #89	; 0x59
 8006cc2:	d199      	bne.n	8006bf8 <_scanf_float+0x60>
 8006cc4:	2d07      	cmp	r5, #7
 8006cc6:	d197      	bne.n	8006bf8 <_scanf_float+0x60>
 8006cc8:	2508      	movs	r5, #8
 8006cca:	e029      	b.n	8006d20 <_scanf_float+0x188>
 8006ccc:	2b74      	cmp	r3, #116	; 0x74
 8006cce:	d06f      	beq.n	8006db0 <_scanf_float+0x218>
 8006cd0:	2b79      	cmp	r3, #121	; 0x79
 8006cd2:	e7f6      	b.n	8006cc2 <_scanf_float+0x12a>
 8006cd4:	6821      	ldr	r1, [r4, #0]
 8006cd6:	05c8      	lsls	r0, r1, #23
 8006cd8:	d51a      	bpl.n	8006d10 <_scanf_float+0x178>
 8006cda:	9b02      	ldr	r3, [sp, #8]
 8006cdc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006ce0:	6021      	str	r1, [r4, #0]
 8006ce2:	f109 0901 	add.w	r9, r9, #1
 8006ce6:	b11b      	cbz	r3, 8006cf0 <_scanf_float+0x158>
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	3201      	adds	r2, #1
 8006cec:	9302      	str	r3, [sp, #8]
 8006cee:	60a2      	str	r2, [r4, #8]
 8006cf0:	68a3      	ldr	r3, [r4, #8]
 8006cf2:	3b01      	subs	r3, #1
 8006cf4:	60a3      	str	r3, [r4, #8]
 8006cf6:	6923      	ldr	r3, [r4, #16]
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	6123      	str	r3, [r4, #16]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	607b      	str	r3, [r7, #4]
 8006d04:	f340 8084 	ble.w	8006e10 <_scanf_float+0x278>
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	603b      	str	r3, [r7, #0]
 8006d0e:	e766      	b.n	8006bde <_scanf_float+0x46>
 8006d10:	eb1a 0f05 	cmn.w	sl, r5
 8006d14:	f47f af70 	bne.w	8006bf8 <_scanf_float+0x60>
 8006d18:	6822      	ldr	r2, [r4, #0]
 8006d1a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006d1e:	6022      	str	r2, [r4, #0]
 8006d20:	f806 3b01 	strb.w	r3, [r6], #1
 8006d24:	e7e4      	b.n	8006cf0 <_scanf_float+0x158>
 8006d26:	6822      	ldr	r2, [r4, #0]
 8006d28:	0610      	lsls	r0, r2, #24
 8006d2a:	f57f af65 	bpl.w	8006bf8 <_scanf_float+0x60>
 8006d2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d32:	e7f4      	b.n	8006d1e <_scanf_float+0x186>
 8006d34:	f1ba 0f00 	cmp.w	sl, #0
 8006d38:	d10e      	bne.n	8006d58 <_scanf_float+0x1c0>
 8006d3a:	f1b9 0f00 	cmp.w	r9, #0
 8006d3e:	d10e      	bne.n	8006d5e <_scanf_float+0x1c6>
 8006d40:	6822      	ldr	r2, [r4, #0]
 8006d42:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006d46:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006d4a:	d108      	bne.n	8006d5e <_scanf_float+0x1c6>
 8006d4c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006d50:	6022      	str	r2, [r4, #0]
 8006d52:	f04f 0a01 	mov.w	sl, #1
 8006d56:	e7e3      	b.n	8006d20 <_scanf_float+0x188>
 8006d58:	f1ba 0f02 	cmp.w	sl, #2
 8006d5c:	d055      	beq.n	8006e0a <_scanf_float+0x272>
 8006d5e:	2d01      	cmp	r5, #1
 8006d60:	d002      	beq.n	8006d68 <_scanf_float+0x1d0>
 8006d62:	2d04      	cmp	r5, #4
 8006d64:	f47f af48 	bne.w	8006bf8 <_scanf_float+0x60>
 8006d68:	3501      	adds	r5, #1
 8006d6a:	b2ed      	uxtb	r5, r5
 8006d6c:	e7d8      	b.n	8006d20 <_scanf_float+0x188>
 8006d6e:	f1ba 0f01 	cmp.w	sl, #1
 8006d72:	f47f af41 	bne.w	8006bf8 <_scanf_float+0x60>
 8006d76:	f04f 0a02 	mov.w	sl, #2
 8006d7a:	e7d1      	b.n	8006d20 <_scanf_float+0x188>
 8006d7c:	b97d      	cbnz	r5, 8006d9e <_scanf_float+0x206>
 8006d7e:	f1b9 0f00 	cmp.w	r9, #0
 8006d82:	f47f af3c 	bne.w	8006bfe <_scanf_float+0x66>
 8006d86:	6822      	ldr	r2, [r4, #0]
 8006d88:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006d8c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006d90:	f47f af39 	bne.w	8006c06 <_scanf_float+0x6e>
 8006d94:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006d98:	6022      	str	r2, [r4, #0]
 8006d9a:	2501      	movs	r5, #1
 8006d9c:	e7c0      	b.n	8006d20 <_scanf_float+0x188>
 8006d9e:	2d03      	cmp	r5, #3
 8006da0:	d0e2      	beq.n	8006d68 <_scanf_float+0x1d0>
 8006da2:	2d05      	cmp	r5, #5
 8006da4:	e7de      	b.n	8006d64 <_scanf_float+0x1cc>
 8006da6:	2d02      	cmp	r5, #2
 8006da8:	f47f af26 	bne.w	8006bf8 <_scanf_float+0x60>
 8006dac:	2503      	movs	r5, #3
 8006dae:	e7b7      	b.n	8006d20 <_scanf_float+0x188>
 8006db0:	2d06      	cmp	r5, #6
 8006db2:	f47f af21 	bne.w	8006bf8 <_scanf_float+0x60>
 8006db6:	2507      	movs	r5, #7
 8006db8:	e7b2      	b.n	8006d20 <_scanf_float+0x188>
 8006dba:	6822      	ldr	r2, [r4, #0]
 8006dbc:	0591      	lsls	r1, r2, #22
 8006dbe:	f57f af1b 	bpl.w	8006bf8 <_scanf_float+0x60>
 8006dc2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006dc6:	6022      	str	r2, [r4, #0]
 8006dc8:	f8cd 9004 	str.w	r9, [sp, #4]
 8006dcc:	e7a8      	b.n	8006d20 <_scanf_float+0x188>
 8006dce:	6822      	ldr	r2, [r4, #0]
 8006dd0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006dd4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006dd8:	d006      	beq.n	8006de8 <_scanf_float+0x250>
 8006dda:	0550      	lsls	r0, r2, #21
 8006ddc:	f57f af0c 	bpl.w	8006bf8 <_scanf_float+0x60>
 8006de0:	f1b9 0f00 	cmp.w	r9, #0
 8006de4:	f43f af0f 	beq.w	8006c06 <_scanf_float+0x6e>
 8006de8:	0591      	lsls	r1, r2, #22
 8006dea:	bf58      	it	pl
 8006dec:	9901      	ldrpl	r1, [sp, #4]
 8006dee:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006df2:	bf58      	it	pl
 8006df4:	eba9 0101 	subpl.w	r1, r9, r1
 8006df8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006dfc:	bf58      	it	pl
 8006dfe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006e02:	6022      	str	r2, [r4, #0]
 8006e04:	f04f 0900 	mov.w	r9, #0
 8006e08:	e78a      	b.n	8006d20 <_scanf_float+0x188>
 8006e0a:	f04f 0a03 	mov.w	sl, #3
 8006e0e:	e787      	b.n	8006d20 <_scanf_float+0x188>
 8006e10:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006e14:	4639      	mov	r1, r7
 8006e16:	4640      	mov	r0, r8
 8006e18:	4798      	blx	r3
 8006e1a:	2800      	cmp	r0, #0
 8006e1c:	f43f aedf 	beq.w	8006bde <_scanf_float+0x46>
 8006e20:	e6ea      	b.n	8006bf8 <_scanf_float+0x60>
 8006e22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e26:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006e2a:	463a      	mov	r2, r7
 8006e2c:	4640      	mov	r0, r8
 8006e2e:	4798      	blx	r3
 8006e30:	6923      	ldr	r3, [r4, #16]
 8006e32:	3b01      	subs	r3, #1
 8006e34:	6123      	str	r3, [r4, #16]
 8006e36:	e6ec      	b.n	8006c12 <_scanf_float+0x7a>
 8006e38:	1e6b      	subs	r3, r5, #1
 8006e3a:	2b06      	cmp	r3, #6
 8006e3c:	d825      	bhi.n	8006e8a <_scanf_float+0x2f2>
 8006e3e:	2d02      	cmp	r5, #2
 8006e40:	d836      	bhi.n	8006eb0 <_scanf_float+0x318>
 8006e42:	455e      	cmp	r6, fp
 8006e44:	f67f aee8 	bls.w	8006c18 <_scanf_float+0x80>
 8006e48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e4c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006e50:	463a      	mov	r2, r7
 8006e52:	4640      	mov	r0, r8
 8006e54:	4798      	blx	r3
 8006e56:	6923      	ldr	r3, [r4, #16]
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	6123      	str	r3, [r4, #16]
 8006e5c:	e7f1      	b.n	8006e42 <_scanf_float+0x2aa>
 8006e5e:	9802      	ldr	r0, [sp, #8]
 8006e60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e64:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006e68:	9002      	str	r0, [sp, #8]
 8006e6a:	463a      	mov	r2, r7
 8006e6c:	4640      	mov	r0, r8
 8006e6e:	4798      	blx	r3
 8006e70:	6923      	ldr	r3, [r4, #16]
 8006e72:	3b01      	subs	r3, #1
 8006e74:	6123      	str	r3, [r4, #16]
 8006e76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e7a:	fa5f fa8a 	uxtb.w	sl, sl
 8006e7e:	f1ba 0f02 	cmp.w	sl, #2
 8006e82:	d1ec      	bne.n	8006e5e <_scanf_float+0x2c6>
 8006e84:	3d03      	subs	r5, #3
 8006e86:	b2ed      	uxtb	r5, r5
 8006e88:	1b76      	subs	r6, r6, r5
 8006e8a:	6823      	ldr	r3, [r4, #0]
 8006e8c:	05da      	lsls	r2, r3, #23
 8006e8e:	d52f      	bpl.n	8006ef0 <_scanf_float+0x358>
 8006e90:	055b      	lsls	r3, r3, #21
 8006e92:	d510      	bpl.n	8006eb6 <_scanf_float+0x31e>
 8006e94:	455e      	cmp	r6, fp
 8006e96:	f67f aebf 	bls.w	8006c18 <_scanf_float+0x80>
 8006e9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ea2:	463a      	mov	r2, r7
 8006ea4:	4640      	mov	r0, r8
 8006ea6:	4798      	blx	r3
 8006ea8:	6923      	ldr	r3, [r4, #16]
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	6123      	str	r3, [r4, #16]
 8006eae:	e7f1      	b.n	8006e94 <_scanf_float+0x2fc>
 8006eb0:	46aa      	mov	sl, r5
 8006eb2:	9602      	str	r6, [sp, #8]
 8006eb4:	e7df      	b.n	8006e76 <_scanf_float+0x2de>
 8006eb6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006eba:	6923      	ldr	r3, [r4, #16]
 8006ebc:	2965      	cmp	r1, #101	; 0x65
 8006ebe:	f103 33ff 	add.w	r3, r3, #4294967295
 8006ec2:	f106 35ff 	add.w	r5, r6, #4294967295
 8006ec6:	6123      	str	r3, [r4, #16]
 8006ec8:	d00c      	beq.n	8006ee4 <_scanf_float+0x34c>
 8006eca:	2945      	cmp	r1, #69	; 0x45
 8006ecc:	d00a      	beq.n	8006ee4 <_scanf_float+0x34c>
 8006ece:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ed2:	463a      	mov	r2, r7
 8006ed4:	4640      	mov	r0, r8
 8006ed6:	4798      	blx	r3
 8006ed8:	6923      	ldr	r3, [r4, #16]
 8006eda:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	1eb5      	subs	r5, r6, #2
 8006ee2:	6123      	str	r3, [r4, #16]
 8006ee4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ee8:	463a      	mov	r2, r7
 8006eea:	4640      	mov	r0, r8
 8006eec:	4798      	blx	r3
 8006eee:	462e      	mov	r6, r5
 8006ef0:	6825      	ldr	r5, [r4, #0]
 8006ef2:	f015 0510 	ands.w	r5, r5, #16
 8006ef6:	d159      	bne.n	8006fac <_scanf_float+0x414>
 8006ef8:	7035      	strb	r5, [r6, #0]
 8006efa:	6823      	ldr	r3, [r4, #0]
 8006efc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f04:	d11b      	bne.n	8006f3e <_scanf_float+0x3a6>
 8006f06:	9b01      	ldr	r3, [sp, #4]
 8006f08:	454b      	cmp	r3, r9
 8006f0a:	eba3 0209 	sub.w	r2, r3, r9
 8006f0e:	d123      	bne.n	8006f58 <_scanf_float+0x3c0>
 8006f10:	2200      	movs	r2, #0
 8006f12:	4659      	mov	r1, fp
 8006f14:	4640      	mov	r0, r8
 8006f16:	f001 f805 	bl	8007f24 <_strtod_r>
 8006f1a:	6822      	ldr	r2, [r4, #0]
 8006f1c:	9b03      	ldr	r3, [sp, #12]
 8006f1e:	f012 0f02 	tst.w	r2, #2
 8006f22:	ec57 6b10 	vmov	r6, r7, d0
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	d021      	beq.n	8006f6e <_scanf_float+0x3d6>
 8006f2a:	9903      	ldr	r1, [sp, #12]
 8006f2c:	1d1a      	adds	r2, r3, #4
 8006f2e:	600a      	str	r2, [r1, #0]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	e9c3 6700 	strd	r6, r7, [r3]
 8006f36:	68e3      	ldr	r3, [r4, #12]
 8006f38:	3301      	adds	r3, #1
 8006f3a:	60e3      	str	r3, [r4, #12]
 8006f3c:	e66d      	b.n	8006c1a <_scanf_float+0x82>
 8006f3e:	9b04      	ldr	r3, [sp, #16]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d0e5      	beq.n	8006f10 <_scanf_float+0x378>
 8006f44:	9905      	ldr	r1, [sp, #20]
 8006f46:	230a      	movs	r3, #10
 8006f48:	462a      	mov	r2, r5
 8006f4a:	3101      	adds	r1, #1
 8006f4c:	4640      	mov	r0, r8
 8006f4e:	f001 f871 	bl	8008034 <_strtol_r>
 8006f52:	9b04      	ldr	r3, [sp, #16]
 8006f54:	9e05      	ldr	r6, [sp, #20]
 8006f56:	1ac2      	subs	r2, r0, r3
 8006f58:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006f5c:	429e      	cmp	r6, r3
 8006f5e:	bf28      	it	cs
 8006f60:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006f64:	4912      	ldr	r1, [pc, #72]	; (8006fb0 <_scanf_float+0x418>)
 8006f66:	4630      	mov	r0, r6
 8006f68:	f000 f998 	bl	800729c <siprintf>
 8006f6c:	e7d0      	b.n	8006f10 <_scanf_float+0x378>
 8006f6e:	9903      	ldr	r1, [sp, #12]
 8006f70:	f012 0f04 	tst.w	r2, #4
 8006f74:	f103 0204 	add.w	r2, r3, #4
 8006f78:	600a      	str	r2, [r1, #0]
 8006f7a:	d1d9      	bne.n	8006f30 <_scanf_float+0x398>
 8006f7c:	f8d3 8000 	ldr.w	r8, [r3]
 8006f80:	ee10 2a10 	vmov	r2, s0
 8006f84:	ee10 0a10 	vmov	r0, s0
 8006f88:	463b      	mov	r3, r7
 8006f8a:	4639      	mov	r1, r7
 8006f8c:	f7f9 fdce 	bl	8000b2c <__aeabi_dcmpun>
 8006f90:	b128      	cbz	r0, 8006f9e <_scanf_float+0x406>
 8006f92:	4808      	ldr	r0, [pc, #32]	; (8006fb4 <_scanf_float+0x41c>)
 8006f94:	f000 f97c 	bl	8007290 <nanf>
 8006f98:	ed88 0a00 	vstr	s0, [r8]
 8006f9c:	e7cb      	b.n	8006f36 <_scanf_float+0x39e>
 8006f9e:	4630      	mov	r0, r6
 8006fa0:	4639      	mov	r1, r7
 8006fa2:	f7f9 fe21 	bl	8000be8 <__aeabi_d2f>
 8006fa6:	f8c8 0000 	str.w	r0, [r8]
 8006faa:	e7c4      	b.n	8006f36 <_scanf_float+0x39e>
 8006fac:	2500      	movs	r5, #0
 8006fae:	e634      	b.n	8006c1a <_scanf_float+0x82>
 8006fb0:	0800b53c 	.word	0x0800b53c
 8006fb4:	0800b9b0 	.word	0x0800b9b0

08006fb8 <iprintf>:
 8006fb8:	b40f      	push	{r0, r1, r2, r3}
 8006fba:	4b0a      	ldr	r3, [pc, #40]	; (8006fe4 <iprintf+0x2c>)
 8006fbc:	b513      	push	{r0, r1, r4, lr}
 8006fbe:	681c      	ldr	r4, [r3, #0]
 8006fc0:	b124      	cbz	r4, 8006fcc <iprintf+0x14>
 8006fc2:	69a3      	ldr	r3, [r4, #24]
 8006fc4:	b913      	cbnz	r3, 8006fcc <iprintf+0x14>
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	f002 f88a 	bl	80090e0 <__sinit>
 8006fcc:	ab05      	add	r3, sp, #20
 8006fce:	9a04      	ldr	r2, [sp, #16]
 8006fd0:	68a1      	ldr	r1, [r4, #8]
 8006fd2:	9301      	str	r3, [sp, #4]
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	f003 fb5f 	bl	800a698 <_vfiprintf_r>
 8006fda:	b002      	add	sp, #8
 8006fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fe0:	b004      	add	sp, #16
 8006fe2:	4770      	bx	lr
 8006fe4:	2000000c 	.word	0x2000000c

08006fe8 <_puts_r>:
 8006fe8:	b570      	push	{r4, r5, r6, lr}
 8006fea:	460e      	mov	r6, r1
 8006fec:	4605      	mov	r5, r0
 8006fee:	b118      	cbz	r0, 8006ff8 <_puts_r+0x10>
 8006ff0:	6983      	ldr	r3, [r0, #24]
 8006ff2:	b90b      	cbnz	r3, 8006ff8 <_puts_r+0x10>
 8006ff4:	f002 f874 	bl	80090e0 <__sinit>
 8006ff8:	69ab      	ldr	r3, [r5, #24]
 8006ffa:	68ac      	ldr	r4, [r5, #8]
 8006ffc:	b913      	cbnz	r3, 8007004 <_puts_r+0x1c>
 8006ffe:	4628      	mov	r0, r5
 8007000:	f002 f86e 	bl	80090e0 <__sinit>
 8007004:	4b2c      	ldr	r3, [pc, #176]	; (80070b8 <_puts_r+0xd0>)
 8007006:	429c      	cmp	r4, r3
 8007008:	d120      	bne.n	800704c <_puts_r+0x64>
 800700a:	686c      	ldr	r4, [r5, #4]
 800700c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800700e:	07db      	lsls	r3, r3, #31
 8007010:	d405      	bmi.n	800701e <_puts_r+0x36>
 8007012:	89a3      	ldrh	r3, [r4, #12]
 8007014:	0598      	lsls	r0, r3, #22
 8007016:	d402      	bmi.n	800701e <_puts_r+0x36>
 8007018:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800701a:	f002 fc72 	bl	8009902 <__retarget_lock_acquire_recursive>
 800701e:	89a3      	ldrh	r3, [r4, #12]
 8007020:	0719      	lsls	r1, r3, #28
 8007022:	d51d      	bpl.n	8007060 <_puts_r+0x78>
 8007024:	6923      	ldr	r3, [r4, #16]
 8007026:	b1db      	cbz	r3, 8007060 <_puts_r+0x78>
 8007028:	3e01      	subs	r6, #1
 800702a:	68a3      	ldr	r3, [r4, #8]
 800702c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007030:	3b01      	subs	r3, #1
 8007032:	60a3      	str	r3, [r4, #8]
 8007034:	bb39      	cbnz	r1, 8007086 <_puts_r+0x9e>
 8007036:	2b00      	cmp	r3, #0
 8007038:	da38      	bge.n	80070ac <_puts_r+0xc4>
 800703a:	4622      	mov	r2, r4
 800703c:	210a      	movs	r1, #10
 800703e:	4628      	mov	r0, r5
 8007040:	f000 fffa 	bl	8008038 <__swbuf_r>
 8007044:	3001      	adds	r0, #1
 8007046:	d011      	beq.n	800706c <_puts_r+0x84>
 8007048:	250a      	movs	r5, #10
 800704a:	e011      	b.n	8007070 <_puts_r+0x88>
 800704c:	4b1b      	ldr	r3, [pc, #108]	; (80070bc <_puts_r+0xd4>)
 800704e:	429c      	cmp	r4, r3
 8007050:	d101      	bne.n	8007056 <_puts_r+0x6e>
 8007052:	68ac      	ldr	r4, [r5, #8]
 8007054:	e7da      	b.n	800700c <_puts_r+0x24>
 8007056:	4b1a      	ldr	r3, [pc, #104]	; (80070c0 <_puts_r+0xd8>)
 8007058:	429c      	cmp	r4, r3
 800705a:	bf08      	it	eq
 800705c:	68ec      	ldreq	r4, [r5, #12]
 800705e:	e7d5      	b.n	800700c <_puts_r+0x24>
 8007060:	4621      	mov	r1, r4
 8007062:	4628      	mov	r0, r5
 8007064:	f001 f83a 	bl	80080dc <__swsetup_r>
 8007068:	2800      	cmp	r0, #0
 800706a:	d0dd      	beq.n	8007028 <_puts_r+0x40>
 800706c:	f04f 35ff 	mov.w	r5, #4294967295
 8007070:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007072:	07da      	lsls	r2, r3, #31
 8007074:	d405      	bmi.n	8007082 <_puts_r+0x9a>
 8007076:	89a3      	ldrh	r3, [r4, #12]
 8007078:	059b      	lsls	r3, r3, #22
 800707a:	d402      	bmi.n	8007082 <_puts_r+0x9a>
 800707c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800707e:	f002 fc41 	bl	8009904 <__retarget_lock_release_recursive>
 8007082:	4628      	mov	r0, r5
 8007084:	bd70      	pop	{r4, r5, r6, pc}
 8007086:	2b00      	cmp	r3, #0
 8007088:	da04      	bge.n	8007094 <_puts_r+0xac>
 800708a:	69a2      	ldr	r2, [r4, #24]
 800708c:	429a      	cmp	r2, r3
 800708e:	dc06      	bgt.n	800709e <_puts_r+0xb6>
 8007090:	290a      	cmp	r1, #10
 8007092:	d004      	beq.n	800709e <_puts_r+0xb6>
 8007094:	6823      	ldr	r3, [r4, #0]
 8007096:	1c5a      	adds	r2, r3, #1
 8007098:	6022      	str	r2, [r4, #0]
 800709a:	7019      	strb	r1, [r3, #0]
 800709c:	e7c5      	b.n	800702a <_puts_r+0x42>
 800709e:	4622      	mov	r2, r4
 80070a0:	4628      	mov	r0, r5
 80070a2:	f000 ffc9 	bl	8008038 <__swbuf_r>
 80070a6:	3001      	adds	r0, #1
 80070a8:	d1bf      	bne.n	800702a <_puts_r+0x42>
 80070aa:	e7df      	b.n	800706c <_puts_r+0x84>
 80070ac:	6823      	ldr	r3, [r4, #0]
 80070ae:	250a      	movs	r5, #10
 80070b0:	1c5a      	adds	r2, r3, #1
 80070b2:	6022      	str	r2, [r4, #0]
 80070b4:	701d      	strb	r5, [r3, #0]
 80070b6:	e7db      	b.n	8007070 <_puts_r+0x88>
 80070b8:	0800b74c 	.word	0x0800b74c
 80070bc:	0800b76c 	.word	0x0800b76c
 80070c0:	0800b72c 	.word	0x0800b72c

080070c4 <puts>:
 80070c4:	4b02      	ldr	r3, [pc, #8]	; (80070d0 <puts+0xc>)
 80070c6:	4601      	mov	r1, r0
 80070c8:	6818      	ldr	r0, [r3, #0]
 80070ca:	f7ff bf8d 	b.w	8006fe8 <_puts_r>
 80070ce:	bf00      	nop
 80070d0:	2000000c 	.word	0x2000000c

080070d4 <_sbrk_r>:
 80070d4:	b538      	push	{r3, r4, r5, lr}
 80070d6:	4d06      	ldr	r5, [pc, #24]	; (80070f0 <_sbrk_r+0x1c>)
 80070d8:	2300      	movs	r3, #0
 80070da:	4604      	mov	r4, r0
 80070dc:	4608      	mov	r0, r1
 80070de:	602b      	str	r3, [r5, #0]
 80070e0:	f7fa fcf2 	bl	8001ac8 <_sbrk>
 80070e4:	1c43      	adds	r3, r0, #1
 80070e6:	d102      	bne.n	80070ee <_sbrk_r+0x1a>
 80070e8:	682b      	ldr	r3, [r5, #0]
 80070ea:	b103      	cbz	r3, 80070ee <_sbrk_r+0x1a>
 80070ec:	6023      	str	r3, [r4, #0]
 80070ee:	bd38      	pop	{r3, r4, r5, pc}
 80070f0:	2000136c 	.word	0x2000136c

080070f4 <setbuf>:
 80070f4:	2900      	cmp	r1, #0
 80070f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070fa:	bf0c      	ite	eq
 80070fc:	2202      	moveq	r2, #2
 80070fe:	2200      	movne	r2, #0
 8007100:	f000 b800 	b.w	8007104 <setvbuf>

08007104 <setvbuf>:
 8007104:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007108:	461d      	mov	r5, r3
 800710a:	4b5d      	ldr	r3, [pc, #372]	; (8007280 <setvbuf+0x17c>)
 800710c:	681f      	ldr	r7, [r3, #0]
 800710e:	4604      	mov	r4, r0
 8007110:	460e      	mov	r6, r1
 8007112:	4690      	mov	r8, r2
 8007114:	b127      	cbz	r7, 8007120 <setvbuf+0x1c>
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	b913      	cbnz	r3, 8007120 <setvbuf+0x1c>
 800711a:	4638      	mov	r0, r7
 800711c:	f001 ffe0 	bl	80090e0 <__sinit>
 8007120:	4b58      	ldr	r3, [pc, #352]	; (8007284 <setvbuf+0x180>)
 8007122:	429c      	cmp	r4, r3
 8007124:	d167      	bne.n	80071f6 <setvbuf+0xf2>
 8007126:	687c      	ldr	r4, [r7, #4]
 8007128:	f1b8 0f02 	cmp.w	r8, #2
 800712c:	d006      	beq.n	800713c <setvbuf+0x38>
 800712e:	f1b8 0f01 	cmp.w	r8, #1
 8007132:	f200 809f 	bhi.w	8007274 <setvbuf+0x170>
 8007136:	2d00      	cmp	r5, #0
 8007138:	f2c0 809c 	blt.w	8007274 <setvbuf+0x170>
 800713c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800713e:	07db      	lsls	r3, r3, #31
 8007140:	d405      	bmi.n	800714e <setvbuf+0x4a>
 8007142:	89a3      	ldrh	r3, [r4, #12]
 8007144:	0598      	lsls	r0, r3, #22
 8007146:	d402      	bmi.n	800714e <setvbuf+0x4a>
 8007148:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800714a:	f002 fbda 	bl	8009902 <__retarget_lock_acquire_recursive>
 800714e:	4621      	mov	r1, r4
 8007150:	4638      	mov	r0, r7
 8007152:	f001 ff31 	bl	8008fb8 <_fflush_r>
 8007156:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007158:	b141      	cbz	r1, 800716c <setvbuf+0x68>
 800715a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800715e:	4299      	cmp	r1, r3
 8007160:	d002      	beq.n	8007168 <setvbuf+0x64>
 8007162:	4638      	mov	r0, r7
 8007164:	f7fe ffce 	bl	8006104 <_free_r>
 8007168:	2300      	movs	r3, #0
 800716a:	6363      	str	r3, [r4, #52]	; 0x34
 800716c:	2300      	movs	r3, #0
 800716e:	61a3      	str	r3, [r4, #24]
 8007170:	6063      	str	r3, [r4, #4]
 8007172:	89a3      	ldrh	r3, [r4, #12]
 8007174:	0619      	lsls	r1, r3, #24
 8007176:	d503      	bpl.n	8007180 <setvbuf+0x7c>
 8007178:	6921      	ldr	r1, [r4, #16]
 800717a:	4638      	mov	r0, r7
 800717c:	f7fe ffc2 	bl	8006104 <_free_r>
 8007180:	89a3      	ldrh	r3, [r4, #12]
 8007182:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8007186:	f023 0303 	bic.w	r3, r3, #3
 800718a:	f1b8 0f02 	cmp.w	r8, #2
 800718e:	81a3      	strh	r3, [r4, #12]
 8007190:	d06c      	beq.n	800726c <setvbuf+0x168>
 8007192:	ab01      	add	r3, sp, #4
 8007194:	466a      	mov	r2, sp
 8007196:	4621      	mov	r1, r4
 8007198:	4638      	mov	r0, r7
 800719a:	f002 fbb4 	bl	8009906 <__swhatbuf_r>
 800719e:	89a3      	ldrh	r3, [r4, #12]
 80071a0:	4318      	orrs	r0, r3
 80071a2:	81a0      	strh	r0, [r4, #12]
 80071a4:	2d00      	cmp	r5, #0
 80071a6:	d130      	bne.n	800720a <setvbuf+0x106>
 80071a8:	9d00      	ldr	r5, [sp, #0]
 80071aa:	4628      	mov	r0, r5
 80071ac:	f7fe ff76 	bl	800609c <malloc>
 80071b0:	4606      	mov	r6, r0
 80071b2:	2800      	cmp	r0, #0
 80071b4:	d155      	bne.n	8007262 <setvbuf+0x15e>
 80071b6:	f8dd 9000 	ldr.w	r9, [sp]
 80071ba:	45a9      	cmp	r9, r5
 80071bc:	d14a      	bne.n	8007254 <setvbuf+0x150>
 80071be:	f04f 35ff 	mov.w	r5, #4294967295
 80071c2:	2200      	movs	r2, #0
 80071c4:	60a2      	str	r2, [r4, #8]
 80071c6:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80071ca:	6022      	str	r2, [r4, #0]
 80071cc:	6122      	str	r2, [r4, #16]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071d4:	6162      	str	r2, [r4, #20]
 80071d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80071d8:	f043 0302 	orr.w	r3, r3, #2
 80071dc:	07d2      	lsls	r2, r2, #31
 80071de:	81a3      	strh	r3, [r4, #12]
 80071e0:	d405      	bmi.n	80071ee <setvbuf+0xea>
 80071e2:	f413 7f00 	tst.w	r3, #512	; 0x200
 80071e6:	d102      	bne.n	80071ee <setvbuf+0xea>
 80071e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071ea:	f002 fb8b 	bl	8009904 <__retarget_lock_release_recursive>
 80071ee:	4628      	mov	r0, r5
 80071f0:	b003      	add	sp, #12
 80071f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80071f6:	4b24      	ldr	r3, [pc, #144]	; (8007288 <setvbuf+0x184>)
 80071f8:	429c      	cmp	r4, r3
 80071fa:	d101      	bne.n	8007200 <setvbuf+0xfc>
 80071fc:	68bc      	ldr	r4, [r7, #8]
 80071fe:	e793      	b.n	8007128 <setvbuf+0x24>
 8007200:	4b22      	ldr	r3, [pc, #136]	; (800728c <setvbuf+0x188>)
 8007202:	429c      	cmp	r4, r3
 8007204:	bf08      	it	eq
 8007206:	68fc      	ldreq	r4, [r7, #12]
 8007208:	e78e      	b.n	8007128 <setvbuf+0x24>
 800720a:	2e00      	cmp	r6, #0
 800720c:	d0cd      	beq.n	80071aa <setvbuf+0xa6>
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	b913      	cbnz	r3, 8007218 <setvbuf+0x114>
 8007212:	4638      	mov	r0, r7
 8007214:	f001 ff64 	bl	80090e0 <__sinit>
 8007218:	f1b8 0f01 	cmp.w	r8, #1
 800721c:	bf08      	it	eq
 800721e:	89a3      	ldrheq	r3, [r4, #12]
 8007220:	6026      	str	r6, [r4, #0]
 8007222:	bf04      	itt	eq
 8007224:	f043 0301 	orreq.w	r3, r3, #1
 8007228:	81a3      	strheq	r3, [r4, #12]
 800722a:	89a2      	ldrh	r2, [r4, #12]
 800722c:	f012 0308 	ands.w	r3, r2, #8
 8007230:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8007234:	d01c      	beq.n	8007270 <setvbuf+0x16c>
 8007236:	07d3      	lsls	r3, r2, #31
 8007238:	bf41      	itttt	mi
 800723a:	2300      	movmi	r3, #0
 800723c:	426d      	negmi	r5, r5
 800723e:	60a3      	strmi	r3, [r4, #8]
 8007240:	61a5      	strmi	r5, [r4, #24]
 8007242:	bf58      	it	pl
 8007244:	60a5      	strpl	r5, [r4, #8]
 8007246:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8007248:	f015 0501 	ands.w	r5, r5, #1
 800724c:	d115      	bne.n	800727a <setvbuf+0x176>
 800724e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8007252:	e7c8      	b.n	80071e6 <setvbuf+0xe2>
 8007254:	4648      	mov	r0, r9
 8007256:	f7fe ff21 	bl	800609c <malloc>
 800725a:	4606      	mov	r6, r0
 800725c:	2800      	cmp	r0, #0
 800725e:	d0ae      	beq.n	80071be <setvbuf+0xba>
 8007260:	464d      	mov	r5, r9
 8007262:	89a3      	ldrh	r3, [r4, #12]
 8007264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007268:	81a3      	strh	r3, [r4, #12]
 800726a:	e7d0      	b.n	800720e <setvbuf+0x10a>
 800726c:	2500      	movs	r5, #0
 800726e:	e7a8      	b.n	80071c2 <setvbuf+0xbe>
 8007270:	60a3      	str	r3, [r4, #8]
 8007272:	e7e8      	b.n	8007246 <setvbuf+0x142>
 8007274:	f04f 35ff 	mov.w	r5, #4294967295
 8007278:	e7b9      	b.n	80071ee <setvbuf+0xea>
 800727a:	2500      	movs	r5, #0
 800727c:	e7b7      	b.n	80071ee <setvbuf+0xea>
 800727e:	bf00      	nop
 8007280:	2000000c 	.word	0x2000000c
 8007284:	0800b74c 	.word	0x0800b74c
 8007288:	0800b76c 	.word	0x0800b76c
 800728c:	0800b72c 	.word	0x0800b72c

08007290 <nanf>:
 8007290:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007298 <nanf+0x8>
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop
 8007298:	7fc00000 	.word	0x7fc00000

0800729c <siprintf>:
 800729c:	b40e      	push	{r1, r2, r3}
 800729e:	b500      	push	{lr}
 80072a0:	b09c      	sub	sp, #112	; 0x70
 80072a2:	ab1d      	add	r3, sp, #116	; 0x74
 80072a4:	9002      	str	r0, [sp, #8]
 80072a6:	9006      	str	r0, [sp, #24]
 80072a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80072ac:	4809      	ldr	r0, [pc, #36]	; (80072d4 <siprintf+0x38>)
 80072ae:	9107      	str	r1, [sp, #28]
 80072b0:	9104      	str	r1, [sp, #16]
 80072b2:	4909      	ldr	r1, [pc, #36]	; (80072d8 <siprintf+0x3c>)
 80072b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80072b8:	9105      	str	r1, [sp, #20]
 80072ba:	6800      	ldr	r0, [r0, #0]
 80072bc:	9301      	str	r3, [sp, #4]
 80072be:	a902      	add	r1, sp, #8
 80072c0:	f003 f8c0 	bl	800a444 <_svfiprintf_r>
 80072c4:	9b02      	ldr	r3, [sp, #8]
 80072c6:	2200      	movs	r2, #0
 80072c8:	701a      	strb	r2, [r3, #0]
 80072ca:	b01c      	add	sp, #112	; 0x70
 80072cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80072d0:	b003      	add	sp, #12
 80072d2:	4770      	bx	lr
 80072d4:	2000000c 	.word	0x2000000c
 80072d8:	ffff0208 	.word	0xffff0208

080072dc <sulp>:
 80072dc:	b570      	push	{r4, r5, r6, lr}
 80072de:	4604      	mov	r4, r0
 80072e0:	460d      	mov	r5, r1
 80072e2:	ec45 4b10 	vmov	d0, r4, r5
 80072e6:	4616      	mov	r6, r2
 80072e8:	f002 ff02 	bl	800a0f0 <__ulp>
 80072ec:	ec51 0b10 	vmov	r0, r1, d0
 80072f0:	b17e      	cbz	r6, 8007312 <sulp+0x36>
 80072f2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80072f6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	dd09      	ble.n	8007312 <sulp+0x36>
 80072fe:	051b      	lsls	r3, r3, #20
 8007300:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007304:	2400      	movs	r4, #0
 8007306:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800730a:	4622      	mov	r2, r4
 800730c:	462b      	mov	r3, r5
 800730e:	f7f9 f973 	bl	80005f8 <__aeabi_dmul>
 8007312:	bd70      	pop	{r4, r5, r6, pc}
 8007314:	0000      	movs	r0, r0
	...

08007318 <_strtod_l>:
 8007318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800731c:	ed2d 8b02 	vpush	{d8}
 8007320:	b09d      	sub	sp, #116	; 0x74
 8007322:	461f      	mov	r7, r3
 8007324:	2300      	movs	r3, #0
 8007326:	9318      	str	r3, [sp, #96]	; 0x60
 8007328:	4ba2      	ldr	r3, [pc, #648]	; (80075b4 <_strtod_l+0x29c>)
 800732a:	9213      	str	r2, [sp, #76]	; 0x4c
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	9305      	str	r3, [sp, #20]
 8007330:	4604      	mov	r4, r0
 8007332:	4618      	mov	r0, r3
 8007334:	4688      	mov	r8, r1
 8007336:	f7f8 ff4b 	bl	80001d0 <strlen>
 800733a:	f04f 0a00 	mov.w	sl, #0
 800733e:	4605      	mov	r5, r0
 8007340:	f04f 0b00 	mov.w	fp, #0
 8007344:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007348:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800734a:	781a      	ldrb	r2, [r3, #0]
 800734c:	2a2b      	cmp	r2, #43	; 0x2b
 800734e:	d04e      	beq.n	80073ee <_strtod_l+0xd6>
 8007350:	d83b      	bhi.n	80073ca <_strtod_l+0xb2>
 8007352:	2a0d      	cmp	r2, #13
 8007354:	d834      	bhi.n	80073c0 <_strtod_l+0xa8>
 8007356:	2a08      	cmp	r2, #8
 8007358:	d834      	bhi.n	80073c4 <_strtod_l+0xac>
 800735a:	2a00      	cmp	r2, #0
 800735c:	d03e      	beq.n	80073dc <_strtod_l+0xc4>
 800735e:	2300      	movs	r3, #0
 8007360:	930a      	str	r3, [sp, #40]	; 0x28
 8007362:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007364:	7833      	ldrb	r3, [r6, #0]
 8007366:	2b30      	cmp	r3, #48	; 0x30
 8007368:	f040 80b0 	bne.w	80074cc <_strtod_l+0x1b4>
 800736c:	7873      	ldrb	r3, [r6, #1]
 800736e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007372:	2b58      	cmp	r3, #88	; 0x58
 8007374:	d168      	bne.n	8007448 <_strtod_l+0x130>
 8007376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007378:	9301      	str	r3, [sp, #4]
 800737a:	ab18      	add	r3, sp, #96	; 0x60
 800737c:	9702      	str	r7, [sp, #8]
 800737e:	9300      	str	r3, [sp, #0]
 8007380:	4a8d      	ldr	r2, [pc, #564]	; (80075b8 <_strtod_l+0x2a0>)
 8007382:	ab19      	add	r3, sp, #100	; 0x64
 8007384:	a917      	add	r1, sp, #92	; 0x5c
 8007386:	4620      	mov	r0, r4
 8007388:	f001 ffae 	bl	80092e8 <__gethex>
 800738c:	f010 0707 	ands.w	r7, r0, #7
 8007390:	4605      	mov	r5, r0
 8007392:	d005      	beq.n	80073a0 <_strtod_l+0x88>
 8007394:	2f06      	cmp	r7, #6
 8007396:	d12c      	bne.n	80073f2 <_strtod_l+0xda>
 8007398:	3601      	adds	r6, #1
 800739a:	2300      	movs	r3, #0
 800739c:	9617      	str	r6, [sp, #92]	; 0x5c
 800739e:	930a      	str	r3, [sp, #40]	; 0x28
 80073a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	f040 8590 	bne.w	8007ec8 <_strtod_l+0xbb0>
 80073a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073aa:	b1eb      	cbz	r3, 80073e8 <_strtod_l+0xd0>
 80073ac:	4652      	mov	r2, sl
 80073ae:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80073b2:	ec43 2b10 	vmov	d0, r2, r3
 80073b6:	b01d      	add	sp, #116	; 0x74
 80073b8:	ecbd 8b02 	vpop	{d8}
 80073bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073c0:	2a20      	cmp	r2, #32
 80073c2:	d1cc      	bne.n	800735e <_strtod_l+0x46>
 80073c4:	3301      	adds	r3, #1
 80073c6:	9317      	str	r3, [sp, #92]	; 0x5c
 80073c8:	e7be      	b.n	8007348 <_strtod_l+0x30>
 80073ca:	2a2d      	cmp	r2, #45	; 0x2d
 80073cc:	d1c7      	bne.n	800735e <_strtod_l+0x46>
 80073ce:	2201      	movs	r2, #1
 80073d0:	920a      	str	r2, [sp, #40]	; 0x28
 80073d2:	1c5a      	adds	r2, r3, #1
 80073d4:	9217      	str	r2, [sp, #92]	; 0x5c
 80073d6:	785b      	ldrb	r3, [r3, #1]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d1c2      	bne.n	8007362 <_strtod_l+0x4a>
 80073dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80073de:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	f040 856e 	bne.w	8007ec4 <_strtod_l+0xbac>
 80073e8:	4652      	mov	r2, sl
 80073ea:	465b      	mov	r3, fp
 80073ec:	e7e1      	b.n	80073b2 <_strtod_l+0x9a>
 80073ee:	2200      	movs	r2, #0
 80073f0:	e7ee      	b.n	80073d0 <_strtod_l+0xb8>
 80073f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80073f4:	b13a      	cbz	r2, 8007406 <_strtod_l+0xee>
 80073f6:	2135      	movs	r1, #53	; 0x35
 80073f8:	a81a      	add	r0, sp, #104	; 0x68
 80073fa:	f002 ff84 	bl	800a306 <__copybits>
 80073fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007400:	4620      	mov	r0, r4
 8007402:	f002 fb43 	bl	8009a8c <_Bfree>
 8007406:	3f01      	subs	r7, #1
 8007408:	2f04      	cmp	r7, #4
 800740a:	d806      	bhi.n	800741a <_strtod_l+0x102>
 800740c:	e8df f007 	tbb	[pc, r7]
 8007410:	1714030a 	.word	0x1714030a
 8007414:	0a          	.byte	0x0a
 8007415:	00          	.byte	0x00
 8007416:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800741a:	0728      	lsls	r0, r5, #28
 800741c:	d5c0      	bpl.n	80073a0 <_strtod_l+0x88>
 800741e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007422:	e7bd      	b.n	80073a0 <_strtod_l+0x88>
 8007424:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007428:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800742a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800742e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007432:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007436:	e7f0      	b.n	800741a <_strtod_l+0x102>
 8007438:	f8df b180 	ldr.w	fp, [pc, #384]	; 80075bc <_strtod_l+0x2a4>
 800743c:	e7ed      	b.n	800741a <_strtod_l+0x102>
 800743e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007442:	f04f 3aff 	mov.w	sl, #4294967295
 8007446:	e7e8      	b.n	800741a <_strtod_l+0x102>
 8007448:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800744a:	1c5a      	adds	r2, r3, #1
 800744c:	9217      	str	r2, [sp, #92]	; 0x5c
 800744e:	785b      	ldrb	r3, [r3, #1]
 8007450:	2b30      	cmp	r3, #48	; 0x30
 8007452:	d0f9      	beq.n	8007448 <_strtod_l+0x130>
 8007454:	2b00      	cmp	r3, #0
 8007456:	d0a3      	beq.n	80073a0 <_strtod_l+0x88>
 8007458:	2301      	movs	r3, #1
 800745a:	f04f 0900 	mov.w	r9, #0
 800745e:	9304      	str	r3, [sp, #16]
 8007460:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007462:	9308      	str	r3, [sp, #32]
 8007464:	f8cd 901c 	str.w	r9, [sp, #28]
 8007468:	464f      	mov	r7, r9
 800746a:	220a      	movs	r2, #10
 800746c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800746e:	7806      	ldrb	r6, [r0, #0]
 8007470:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007474:	b2d9      	uxtb	r1, r3
 8007476:	2909      	cmp	r1, #9
 8007478:	d92a      	bls.n	80074d0 <_strtod_l+0x1b8>
 800747a:	9905      	ldr	r1, [sp, #20]
 800747c:	462a      	mov	r2, r5
 800747e:	f003 fa86 	bl	800a98e <strncmp>
 8007482:	b398      	cbz	r0, 80074ec <_strtod_l+0x1d4>
 8007484:	2000      	movs	r0, #0
 8007486:	4632      	mov	r2, r6
 8007488:	463d      	mov	r5, r7
 800748a:	9005      	str	r0, [sp, #20]
 800748c:	4603      	mov	r3, r0
 800748e:	2a65      	cmp	r2, #101	; 0x65
 8007490:	d001      	beq.n	8007496 <_strtod_l+0x17e>
 8007492:	2a45      	cmp	r2, #69	; 0x45
 8007494:	d118      	bne.n	80074c8 <_strtod_l+0x1b0>
 8007496:	b91d      	cbnz	r5, 80074a0 <_strtod_l+0x188>
 8007498:	9a04      	ldr	r2, [sp, #16]
 800749a:	4302      	orrs	r2, r0
 800749c:	d09e      	beq.n	80073dc <_strtod_l+0xc4>
 800749e:	2500      	movs	r5, #0
 80074a0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80074a4:	f108 0201 	add.w	r2, r8, #1
 80074a8:	9217      	str	r2, [sp, #92]	; 0x5c
 80074aa:	f898 2001 	ldrb.w	r2, [r8, #1]
 80074ae:	2a2b      	cmp	r2, #43	; 0x2b
 80074b0:	d075      	beq.n	800759e <_strtod_l+0x286>
 80074b2:	2a2d      	cmp	r2, #45	; 0x2d
 80074b4:	d07b      	beq.n	80075ae <_strtod_l+0x296>
 80074b6:	f04f 0c00 	mov.w	ip, #0
 80074ba:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80074be:	2909      	cmp	r1, #9
 80074c0:	f240 8082 	bls.w	80075c8 <_strtod_l+0x2b0>
 80074c4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80074c8:	2600      	movs	r6, #0
 80074ca:	e09d      	b.n	8007608 <_strtod_l+0x2f0>
 80074cc:	2300      	movs	r3, #0
 80074ce:	e7c4      	b.n	800745a <_strtod_l+0x142>
 80074d0:	2f08      	cmp	r7, #8
 80074d2:	bfd8      	it	le
 80074d4:	9907      	ldrle	r1, [sp, #28]
 80074d6:	f100 0001 	add.w	r0, r0, #1
 80074da:	bfda      	itte	le
 80074dc:	fb02 3301 	mlale	r3, r2, r1, r3
 80074e0:	9307      	strle	r3, [sp, #28]
 80074e2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80074e6:	3701      	adds	r7, #1
 80074e8:	9017      	str	r0, [sp, #92]	; 0x5c
 80074ea:	e7bf      	b.n	800746c <_strtod_l+0x154>
 80074ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80074ee:	195a      	adds	r2, r3, r5
 80074f0:	9217      	str	r2, [sp, #92]	; 0x5c
 80074f2:	5d5a      	ldrb	r2, [r3, r5]
 80074f4:	2f00      	cmp	r7, #0
 80074f6:	d037      	beq.n	8007568 <_strtod_l+0x250>
 80074f8:	9005      	str	r0, [sp, #20]
 80074fa:	463d      	mov	r5, r7
 80074fc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007500:	2b09      	cmp	r3, #9
 8007502:	d912      	bls.n	800752a <_strtod_l+0x212>
 8007504:	2301      	movs	r3, #1
 8007506:	e7c2      	b.n	800748e <_strtod_l+0x176>
 8007508:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800750a:	1c5a      	adds	r2, r3, #1
 800750c:	9217      	str	r2, [sp, #92]	; 0x5c
 800750e:	785a      	ldrb	r2, [r3, #1]
 8007510:	3001      	adds	r0, #1
 8007512:	2a30      	cmp	r2, #48	; 0x30
 8007514:	d0f8      	beq.n	8007508 <_strtod_l+0x1f0>
 8007516:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800751a:	2b08      	cmp	r3, #8
 800751c:	f200 84d9 	bhi.w	8007ed2 <_strtod_l+0xbba>
 8007520:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007522:	9005      	str	r0, [sp, #20]
 8007524:	2000      	movs	r0, #0
 8007526:	9308      	str	r3, [sp, #32]
 8007528:	4605      	mov	r5, r0
 800752a:	3a30      	subs	r2, #48	; 0x30
 800752c:	f100 0301 	add.w	r3, r0, #1
 8007530:	d014      	beq.n	800755c <_strtod_l+0x244>
 8007532:	9905      	ldr	r1, [sp, #20]
 8007534:	4419      	add	r1, r3
 8007536:	9105      	str	r1, [sp, #20]
 8007538:	462b      	mov	r3, r5
 800753a:	eb00 0e05 	add.w	lr, r0, r5
 800753e:	210a      	movs	r1, #10
 8007540:	4573      	cmp	r3, lr
 8007542:	d113      	bne.n	800756c <_strtod_l+0x254>
 8007544:	182b      	adds	r3, r5, r0
 8007546:	2b08      	cmp	r3, #8
 8007548:	f105 0501 	add.w	r5, r5, #1
 800754c:	4405      	add	r5, r0
 800754e:	dc1c      	bgt.n	800758a <_strtod_l+0x272>
 8007550:	9907      	ldr	r1, [sp, #28]
 8007552:	230a      	movs	r3, #10
 8007554:	fb03 2301 	mla	r3, r3, r1, r2
 8007558:	9307      	str	r3, [sp, #28]
 800755a:	2300      	movs	r3, #0
 800755c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800755e:	1c51      	adds	r1, r2, #1
 8007560:	9117      	str	r1, [sp, #92]	; 0x5c
 8007562:	7852      	ldrb	r2, [r2, #1]
 8007564:	4618      	mov	r0, r3
 8007566:	e7c9      	b.n	80074fc <_strtod_l+0x1e4>
 8007568:	4638      	mov	r0, r7
 800756a:	e7d2      	b.n	8007512 <_strtod_l+0x1fa>
 800756c:	2b08      	cmp	r3, #8
 800756e:	dc04      	bgt.n	800757a <_strtod_l+0x262>
 8007570:	9e07      	ldr	r6, [sp, #28]
 8007572:	434e      	muls	r6, r1
 8007574:	9607      	str	r6, [sp, #28]
 8007576:	3301      	adds	r3, #1
 8007578:	e7e2      	b.n	8007540 <_strtod_l+0x228>
 800757a:	f103 0c01 	add.w	ip, r3, #1
 800757e:	f1bc 0f10 	cmp.w	ip, #16
 8007582:	bfd8      	it	le
 8007584:	fb01 f909 	mulle.w	r9, r1, r9
 8007588:	e7f5      	b.n	8007576 <_strtod_l+0x25e>
 800758a:	2d10      	cmp	r5, #16
 800758c:	bfdc      	itt	le
 800758e:	230a      	movle	r3, #10
 8007590:	fb03 2909 	mlale	r9, r3, r9, r2
 8007594:	e7e1      	b.n	800755a <_strtod_l+0x242>
 8007596:	2300      	movs	r3, #0
 8007598:	9305      	str	r3, [sp, #20]
 800759a:	2301      	movs	r3, #1
 800759c:	e77c      	b.n	8007498 <_strtod_l+0x180>
 800759e:	f04f 0c00 	mov.w	ip, #0
 80075a2:	f108 0202 	add.w	r2, r8, #2
 80075a6:	9217      	str	r2, [sp, #92]	; 0x5c
 80075a8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80075ac:	e785      	b.n	80074ba <_strtod_l+0x1a2>
 80075ae:	f04f 0c01 	mov.w	ip, #1
 80075b2:	e7f6      	b.n	80075a2 <_strtod_l+0x28a>
 80075b4:	0800b7f4 	.word	0x0800b7f4
 80075b8:	0800b544 	.word	0x0800b544
 80075bc:	7ff00000 	.word	0x7ff00000
 80075c0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80075c2:	1c51      	adds	r1, r2, #1
 80075c4:	9117      	str	r1, [sp, #92]	; 0x5c
 80075c6:	7852      	ldrb	r2, [r2, #1]
 80075c8:	2a30      	cmp	r2, #48	; 0x30
 80075ca:	d0f9      	beq.n	80075c0 <_strtod_l+0x2a8>
 80075cc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80075d0:	2908      	cmp	r1, #8
 80075d2:	f63f af79 	bhi.w	80074c8 <_strtod_l+0x1b0>
 80075d6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80075da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80075dc:	9206      	str	r2, [sp, #24]
 80075de:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80075e0:	1c51      	adds	r1, r2, #1
 80075e2:	9117      	str	r1, [sp, #92]	; 0x5c
 80075e4:	7852      	ldrb	r2, [r2, #1]
 80075e6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80075ea:	2e09      	cmp	r6, #9
 80075ec:	d937      	bls.n	800765e <_strtod_l+0x346>
 80075ee:	9e06      	ldr	r6, [sp, #24]
 80075f0:	1b89      	subs	r1, r1, r6
 80075f2:	2908      	cmp	r1, #8
 80075f4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80075f8:	dc02      	bgt.n	8007600 <_strtod_l+0x2e8>
 80075fa:	4576      	cmp	r6, lr
 80075fc:	bfa8      	it	ge
 80075fe:	4676      	movge	r6, lr
 8007600:	f1bc 0f00 	cmp.w	ip, #0
 8007604:	d000      	beq.n	8007608 <_strtod_l+0x2f0>
 8007606:	4276      	negs	r6, r6
 8007608:	2d00      	cmp	r5, #0
 800760a:	d14d      	bne.n	80076a8 <_strtod_l+0x390>
 800760c:	9904      	ldr	r1, [sp, #16]
 800760e:	4301      	orrs	r1, r0
 8007610:	f47f aec6 	bne.w	80073a0 <_strtod_l+0x88>
 8007614:	2b00      	cmp	r3, #0
 8007616:	f47f aee1 	bne.w	80073dc <_strtod_l+0xc4>
 800761a:	2a69      	cmp	r2, #105	; 0x69
 800761c:	d027      	beq.n	800766e <_strtod_l+0x356>
 800761e:	dc24      	bgt.n	800766a <_strtod_l+0x352>
 8007620:	2a49      	cmp	r2, #73	; 0x49
 8007622:	d024      	beq.n	800766e <_strtod_l+0x356>
 8007624:	2a4e      	cmp	r2, #78	; 0x4e
 8007626:	f47f aed9 	bne.w	80073dc <_strtod_l+0xc4>
 800762a:	499f      	ldr	r1, [pc, #636]	; (80078a8 <_strtod_l+0x590>)
 800762c:	a817      	add	r0, sp, #92	; 0x5c
 800762e:	f002 f8b3 	bl	8009798 <__match>
 8007632:	2800      	cmp	r0, #0
 8007634:	f43f aed2 	beq.w	80073dc <_strtod_l+0xc4>
 8007638:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	2b28      	cmp	r3, #40	; 0x28
 800763e:	d12d      	bne.n	800769c <_strtod_l+0x384>
 8007640:	499a      	ldr	r1, [pc, #616]	; (80078ac <_strtod_l+0x594>)
 8007642:	aa1a      	add	r2, sp, #104	; 0x68
 8007644:	a817      	add	r0, sp, #92	; 0x5c
 8007646:	f002 f8bb 	bl	80097c0 <__hexnan>
 800764a:	2805      	cmp	r0, #5
 800764c:	d126      	bne.n	800769c <_strtod_l+0x384>
 800764e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007650:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007654:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007658:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800765c:	e6a0      	b.n	80073a0 <_strtod_l+0x88>
 800765e:	210a      	movs	r1, #10
 8007660:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007664:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007668:	e7b9      	b.n	80075de <_strtod_l+0x2c6>
 800766a:	2a6e      	cmp	r2, #110	; 0x6e
 800766c:	e7db      	b.n	8007626 <_strtod_l+0x30e>
 800766e:	4990      	ldr	r1, [pc, #576]	; (80078b0 <_strtod_l+0x598>)
 8007670:	a817      	add	r0, sp, #92	; 0x5c
 8007672:	f002 f891 	bl	8009798 <__match>
 8007676:	2800      	cmp	r0, #0
 8007678:	f43f aeb0 	beq.w	80073dc <_strtod_l+0xc4>
 800767c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800767e:	498d      	ldr	r1, [pc, #564]	; (80078b4 <_strtod_l+0x59c>)
 8007680:	3b01      	subs	r3, #1
 8007682:	a817      	add	r0, sp, #92	; 0x5c
 8007684:	9317      	str	r3, [sp, #92]	; 0x5c
 8007686:	f002 f887 	bl	8009798 <__match>
 800768a:	b910      	cbnz	r0, 8007692 <_strtod_l+0x37a>
 800768c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800768e:	3301      	adds	r3, #1
 8007690:	9317      	str	r3, [sp, #92]	; 0x5c
 8007692:	f8df b230 	ldr.w	fp, [pc, #560]	; 80078c4 <_strtod_l+0x5ac>
 8007696:	f04f 0a00 	mov.w	sl, #0
 800769a:	e681      	b.n	80073a0 <_strtod_l+0x88>
 800769c:	4886      	ldr	r0, [pc, #536]	; (80078b8 <_strtod_l+0x5a0>)
 800769e:	f003 f92b 	bl	800a8f8 <nan>
 80076a2:	ec5b ab10 	vmov	sl, fp, d0
 80076a6:	e67b      	b.n	80073a0 <_strtod_l+0x88>
 80076a8:	9b05      	ldr	r3, [sp, #20]
 80076aa:	9807      	ldr	r0, [sp, #28]
 80076ac:	1af3      	subs	r3, r6, r3
 80076ae:	2f00      	cmp	r7, #0
 80076b0:	bf08      	it	eq
 80076b2:	462f      	moveq	r7, r5
 80076b4:	2d10      	cmp	r5, #16
 80076b6:	9306      	str	r3, [sp, #24]
 80076b8:	46a8      	mov	r8, r5
 80076ba:	bfa8      	it	ge
 80076bc:	f04f 0810 	movge.w	r8, #16
 80076c0:	f7f8 ff20 	bl	8000504 <__aeabi_ui2d>
 80076c4:	2d09      	cmp	r5, #9
 80076c6:	4682      	mov	sl, r0
 80076c8:	468b      	mov	fp, r1
 80076ca:	dd13      	ble.n	80076f4 <_strtod_l+0x3dc>
 80076cc:	4b7b      	ldr	r3, [pc, #492]	; (80078bc <_strtod_l+0x5a4>)
 80076ce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80076d2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80076d6:	f7f8 ff8f 	bl	80005f8 <__aeabi_dmul>
 80076da:	4682      	mov	sl, r0
 80076dc:	4648      	mov	r0, r9
 80076de:	468b      	mov	fp, r1
 80076e0:	f7f8 ff10 	bl	8000504 <__aeabi_ui2d>
 80076e4:	4602      	mov	r2, r0
 80076e6:	460b      	mov	r3, r1
 80076e8:	4650      	mov	r0, sl
 80076ea:	4659      	mov	r1, fp
 80076ec:	f7f8 fdce 	bl	800028c <__adddf3>
 80076f0:	4682      	mov	sl, r0
 80076f2:	468b      	mov	fp, r1
 80076f4:	2d0f      	cmp	r5, #15
 80076f6:	dc38      	bgt.n	800776a <_strtod_l+0x452>
 80076f8:	9b06      	ldr	r3, [sp, #24]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f43f ae50 	beq.w	80073a0 <_strtod_l+0x88>
 8007700:	dd24      	ble.n	800774c <_strtod_l+0x434>
 8007702:	2b16      	cmp	r3, #22
 8007704:	dc0b      	bgt.n	800771e <_strtod_l+0x406>
 8007706:	496d      	ldr	r1, [pc, #436]	; (80078bc <_strtod_l+0x5a4>)
 8007708:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800770c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007710:	4652      	mov	r2, sl
 8007712:	465b      	mov	r3, fp
 8007714:	f7f8 ff70 	bl	80005f8 <__aeabi_dmul>
 8007718:	4682      	mov	sl, r0
 800771a:	468b      	mov	fp, r1
 800771c:	e640      	b.n	80073a0 <_strtod_l+0x88>
 800771e:	9a06      	ldr	r2, [sp, #24]
 8007720:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007724:	4293      	cmp	r3, r2
 8007726:	db20      	blt.n	800776a <_strtod_l+0x452>
 8007728:	4c64      	ldr	r4, [pc, #400]	; (80078bc <_strtod_l+0x5a4>)
 800772a:	f1c5 050f 	rsb	r5, r5, #15
 800772e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007732:	4652      	mov	r2, sl
 8007734:	465b      	mov	r3, fp
 8007736:	e9d1 0100 	ldrd	r0, r1, [r1]
 800773a:	f7f8 ff5d 	bl	80005f8 <__aeabi_dmul>
 800773e:	9b06      	ldr	r3, [sp, #24]
 8007740:	1b5d      	subs	r5, r3, r5
 8007742:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007746:	e9d4 2300 	ldrd	r2, r3, [r4]
 800774a:	e7e3      	b.n	8007714 <_strtod_l+0x3fc>
 800774c:	9b06      	ldr	r3, [sp, #24]
 800774e:	3316      	adds	r3, #22
 8007750:	db0b      	blt.n	800776a <_strtod_l+0x452>
 8007752:	9b05      	ldr	r3, [sp, #20]
 8007754:	1b9e      	subs	r6, r3, r6
 8007756:	4b59      	ldr	r3, [pc, #356]	; (80078bc <_strtod_l+0x5a4>)
 8007758:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800775c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007760:	4650      	mov	r0, sl
 8007762:	4659      	mov	r1, fp
 8007764:	f7f9 f872 	bl	800084c <__aeabi_ddiv>
 8007768:	e7d6      	b.n	8007718 <_strtod_l+0x400>
 800776a:	9b06      	ldr	r3, [sp, #24]
 800776c:	eba5 0808 	sub.w	r8, r5, r8
 8007770:	4498      	add	r8, r3
 8007772:	f1b8 0f00 	cmp.w	r8, #0
 8007776:	dd74      	ble.n	8007862 <_strtod_l+0x54a>
 8007778:	f018 030f 	ands.w	r3, r8, #15
 800777c:	d00a      	beq.n	8007794 <_strtod_l+0x47c>
 800777e:	494f      	ldr	r1, [pc, #316]	; (80078bc <_strtod_l+0x5a4>)
 8007780:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007784:	4652      	mov	r2, sl
 8007786:	465b      	mov	r3, fp
 8007788:	e9d1 0100 	ldrd	r0, r1, [r1]
 800778c:	f7f8 ff34 	bl	80005f8 <__aeabi_dmul>
 8007790:	4682      	mov	sl, r0
 8007792:	468b      	mov	fp, r1
 8007794:	f038 080f 	bics.w	r8, r8, #15
 8007798:	d04f      	beq.n	800783a <_strtod_l+0x522>
 800779a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800779e:	dd22      	ble.n	80077e6 <_strtod_l+0x4ce>
 80077a0:	2500      	movs	r5, #0
 80077a2:	462e      	mov	r6, r5
 80077a4:	9507      	str	r5, [sp, #28]
 80077a6:	9505      	str	r5, [sp, #20]
 80077a8:	2322      	movs	r3, #34	; 0x22
 80077aa:	f8df b118 	ldr.w	fp, [pc, #280]	; 80078c4 <_strtod_l+0x5ac>
 80077ae:	6023      	str	r3, [r4, #0]
 80077b0:	f04f 0a00 	mov.w	sl, #0
 80077b4:	9b07      	ldr	r3, [sp, #28]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	f43f adf2 	beq.w	80073a0 <_strtod_l+0x88>
 80077bc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80077be:	4620      	mov	r0, r4
 80077c0:	f002 f964 	bl	8009a8c <_Bfree>
 80077c4:	9905      	ldr	r1, [sp, #20]
 80077c6:	4620      	mov	r0, r4
 80077c8:	f002 f960 	bl	8009a8c <_Bfree>
 80077cc:	4631      	mov	r1, r6
 80077ce:	4620      	mov	r0, r4
 80077d0:	f002 f95c 	bl	8009a8c <_Bfree>
 80077d4:	9907      	ldr	r1, [sp, #28]
 80077d6:	4620      	mov	r0, r4
 80077d8:	f002 f958 	bl	8009a8c <_Bfree>
 80077dc:	4629      	mov	r1, r5
 80077de:	4620      	mov	r0, r4
 80077e0:	f002 f954 	bl	8009a8c <_Bfree>
 80077e4:	e5dc      	b.n	80073a0 <_strtod_l+0x88>
 80077e6:	4b36      	ldr	r3, [pc, #216]	; (80078c0 <_strtod_l+0x5a8>)
 80077e8:	9304      	str	r3, [sp, #16]
 80077ea:	2300      	movs	r3, #0
 80077ec:	ea4f 1828 	mov.w	r8, r8, asr #4
 80077f0:	4650      	mov	r0, sl
 80077f2:	4659      	mov	r1, fp
 80077f4:	4699      	mov	r9, r3
 80077f6:	f1b8 0f01 	cmp.w	r8, #1
 80077fa:	dc21      	bgt.n	8007840 <_strtod_l+0x528>
 80077fc:	b10b      	cbz	r3, 8007802 <_strtod_l+0x4ea>
 80077fe:	4682      	mov	sl, r0
 8007800:	468b      	mov	fp, r1
 8007802:	4b2f      	ldr	r3, [pc, #188]	; (80078c0 <_strtod_l+0x5a8>)
 8007804:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007808:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800780c:	4652      	mov	r2, sl
 800780e:	465b      	mov	r3, fp
 8007810:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007814:	f7f8 fef0 	bl	80005f8 <__aeabi_dmul>
 8007818:	4b2a      	ldr	r3, [pc, #168]	; (80078c4 <_strtod_l+0x5ac>)
 800781a:	460a      	mov	r2, r1
 800781c:	400b      	ands	r3, r1
 800781e:	492a      	ldr	r1, [pc, #168]	; (80078c8 <_strtod_l+0x5b0>)
 8007820:	428b      	cmp	r3, r1
 8007822:	4682      	mov	sl, r0
 8007824:	d8bc      	bhi.n	80077a0 <_strtod_l+0x488>
 8007826:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800782a:	428b      	cmp	r3, r1
 800782c:	bf86      	itte	hi
 800782e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80078cc <_strtod_l+0x5b4>
 8007832:	f04f 3aff 	movhi.w	sl, #4294967295
 8007836:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800783a:	2300      	movs	r3, #0
 800783c:	9304      	str	r3, [sp, #16]
 800783e:	e084      	b.n	800794a <_strtod_l+0x632>
 8007840:	f018 0f01 	tst.w	r8, #1
 8007844:	d005      	beq.n	8007852 <_strtod_l+0x53a>
 8007846:	9b04      	ldr	r3, [sp, #16]
 8007848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784c:	f7f8 fed4 	bl	80005f8 <__aeabi_dmul>
 8007850:	2301      	movs	r3, #1
 8007852:	9a04      	ldr	r2, [sp, #16]
 8007854:	3208      	adds	r2, #8
 8007856:	f109 0901 	add.w	r9, r9, #1
 800785a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800785e:	9204      	str	r2, [sp, #16]
 8007860:	e7c9      	b.n	80077f6 <_strtod_l+0x4de>
 8007862:	d0ea      	beq.n	800783a <_strtod_l+0x522>
 8007864:	f1c8 0800 	rsb	r8, r8, #0
 8007868:	f018 020f 	ands.w	r2, r8, #15
 800786c:	d00a      	beq.n	8007884 <_strtod_l+0x56c>
 800786e:	4b13      	ldr	r3, [pc, #76]	; (80078bc <_strtod_l+0x5a4>)
 8007870:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007874:	4650      	mov	r0, sl
 8007876:	4659      	mov	r1, fp
 8007878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787c:	f7f8 ffe6 	bl	800084c <__aeabi_ddiv>
 8007880:	4682      	mov	sl, r0
 8007882:	468b      	mov	fp, r1
 8007884:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007888:	d0d7      	beq.n	800783a <_strtod_l+0x522>
 800788a:	f1b8 0f1f 	cmp.w	r8, #31
 800788e:	dd1f      	ble.n	80078d0 <_strtod_l+0x5b8>
 8007890:	2500      	movs	r5, #0
 8007892:	462e      	mov	r6, r5
 8007894:	9507      	str	r5, [sp, #28]
 8007896:	9505      	str	r5, [sp, #20]
 8007898:	2322      	movs	r3, #34	; 0x22
 800789a:	f04f 0a00 	mov.w	sl, #0
 800789e:	f04f 0b00 	mov.w	fp, #0
 80078a2:	6023      	str	r3, [r4, #0]
 80078a4:	e786      	b.n	80077b4 <_strtod_l+0x49c>
 80078a6:	bf00      	nop
 80078a8:	0800b515 	.word	0x0800b515
 80078ac:	0800b558 	.word	0x0800b558
 80078b0:	0800b50d 	.word	0x0800b50d
 80078b4:	0800b69c 	.word	0x0800b69c
 80078b8:	0800b9b0 	.word	0x0800b9b0
 80078bc:	0800b890 	.word	0x0800b890
 80078c0:	0800b868 	.word	0x0800b868
 80078c4:	7ff00000 	.word	0x7ff00000
 80078c8:	7ca00000 	.word	0x7ca00000
 80078cc:	7fefffff 	.word	0x7fefffff
 80078d0:	f018 0310 	ands.w	r3, r8, #16
 80078d4:	bf18      	it	ne
 80078d6:	236a      	movne	r3, #106	; 0x6a
 80078d8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007c88 <_strtod_l+0x970>
 80078dc:	9304      	str	r3, [sp, #16]
 80078de:	4650      	mov	r0, sl
 80078e0:	4659      	mov	r1, fp
 80078e2:	2300      	movs	r3, #0
 80078e4:	f018 0f01 	tst.w	r8, #1
 80078e8:	d004      	beq.n	80078f4 <_strtod_l+0x5dc>
 80078ea:	e9d9 2300 	ldrd	r2, r3, [r9]
 80078ee:	f7f8 fe83 	bl	80005f8 <__aeabi_dmul>
 80078f2:	2301      	movs	r3, #1
 80078f4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80078f8:	f109 0908 	add.w	r9, r9, #8
 80078fc:	d1f2      	bne.n	80078e4 <_strtod_l+0x5cc>
 80078fe:	b10b      	cbz	r3, 8007904 <_strtod_l+0x5ec>
 8007900:	4682      	mov	sl, r0
 8007902:	468b      	mov	fp, r1
 8007904:	9b04      	ldr	r3, [sp, #16]
 8007906:	b1c3      	cbz	r3, 800793a <_strtod_l+0x622>
 8007908:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800790c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007910:	2b00      	cmp	r3, #0
 8007912:	4659      	mov	r1, fp
 8007914:	dd11      	ble.n	800793a <_strtod_l+0x622>
 8007916:	2b1f      	cmp	r3, #31
 8007918:	f340 8124 	ble.w	8007b64 <_strtod_l+0x84c>
 800791c:	2b34      	cmp	r3, #52	; 0x34
 800791e:	bfde      	ittt	le
 8007920:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007924:	f04f 33ff 	movle.w	r3, #4294967295
 8007928:	fa03 f202 	lslle.w	r2, r3, r2
 800792c:	f04f 0a00 	mov.w	sl, #0
 8007930:	bfcc      	ite	gt
 8007932:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007936:	ea02 0b01 	andle.w	fp, r2, r1
 800793a:	2200      	movs	r2, #0
 800793c:	2300      	movs	r3, #0
 800793e:	4650      	mov	r0, sl
 8007940:	4659      	mov	r1, fp
 8007942:	f7f9 f8c1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007946:	2800      	cmp	r0, #0
 8007948:	d1a2      	bne.n	8007890 <_strtod_l+0x578>
 800794a:	9b07      	ldr	r3, [sp, #28]
 800794c:	9300      	str	r3, [sp, #0]
 800794e:	9908      	ldr	r1, [sp, #32]
 8007950:	462b      	mov	r3, r5
 8007952:	463a      	mov	r2, r7
 8007954:	4620      	mov	r0, r4
 8007956:	f002 f901 	bl	8009b5c <__s2b>
 800795a:	9007      	str	r0, [sp, #28]
 800795c:	2800      	cmp	r0, #0
 800795e:	f43f af1f 	beq.w	80077a0 <_strtod_l+0x488>
 8007962:	9b05      	ldr	r3, [sp, #20]
 8007964:	1b9e      	subs	r6, r3, r6
 8007966:	9b06      	ldr	r3, [sp, #24]
 8007968:	2b00      	cmp	r3, #0
 800796a:	bfb4      	ite	lt
 800796c:	4633      	movlt	r3, r6
 800796e:	2300      	movge	r3, #0
 8007970:	930c      	str	r3, [sp, #48]	; 0x30
 8007972:	9b06      	ldr	r3, [sp, #24]
 8007974:	2500      	movs	r5, #0
 8007976:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800797a:	9312      	str	r3, [sp, #72]	; 0x48
 800797c:	462e      	mov	r6, r5
 800797e:	9b07      	ldr	r3, [sp, #28]
 8007980:	4620      	mov	r0, r4
 8007982:	6859      	ldr	r1, [r3, #4]
 8007984:	f002 f842 	bl	8009a0c <_Balloc>
 8007988:	9005      	str	r0, [sp, #20]
 800798a:	2800      	cmp	r0, #0
 800798c:	f43f af0c 	beq.w	80077a8 <_strtod_l+0x490>
 8007990:	9b07      	ldr	r3, [sp, #28]
 8007992:	691a      	ldr	r2, [r3, #16]
 8007994:	3202      	adds	r2, #2
 8007996:	f103 010c 	add.w	r1, r3, #12
 800799a:	0092      	lsls	r2, r2, #2
 800799c:	300c      	adds	r0, #12
 800799e:	f7fe fb85 	bl	80060ac <memcpy>
 80079a2:	ec4b ab10 	vmov	d0, sl, fp
 80079a6:	aa1a      	add	r2, sp, #104	; 0x68
 80079a8:	a919      	add	r1, sp, #100	; 0x64
 80079aa:	4620      	mov	r0, r4
 80079ac:	f002 fc1c 	bl	800a1e8 <__d2b>
 80079b0:	ec4b ab18 	vmov	d8, sl, fp
 80079b4:	9018      	str	r0, [sp, #96]	; 0x60
 80079b6:	2800      	cmp	r0, #0
 80079b8:	f43f aef6 	beq.w	80077a8 <_strtod_l+0x490>
 80079bc:	2101      	movs	r1, #1
 80079be:	4620      	mov	r0, r4
 80079c0:	f002 f966 	bl	8009c90 <__i2b>
 80079c4:	4606      	mov	r6, r0
 80079c6:	2800      	cmp	r0, #0
 80079c8:	f43f aeee 	beq.w	80077a8 <_strtod_l+0x490>
 80079cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80079ce:	9904      	ldr	r1, [sp, #16]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	bfab      	itete	ge
 80079d4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80079d6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80079d8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80079da:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80079de:	bfac      	ite	ge
 80079e0:	eb03 0902 	addge.w	r9, r3, r2
 80079e4:	1ad7      	sublt	r7, r2, r3
 80079e6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80079e8:	eba3 0801 	sub.w	r8, r3, r1
 80079ec:	4490      	add	r8, r2
 80079ee:	4ba1      	ldr	r3, [pc, #644]	; (8007c74 <_strtod_l+0x95c>)
 80079f0:	f108 38ff 	add.w	r8, r8, #4294967295
 80079f4:	4598      	cmp	r8, r3
 80079f6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80079fa:	f280 80c7 	bge.w	8007b8c <_strtod_l+0x874>
 80079fe:	eba3 0308 	sub.w	r3, r3, r8
 8007a02:	2b1f      	cmp	r3, #31
 8007a04:	eba2 0203 	sub.w	r2, r2, r3
 8007a08:	f04f 0101 	mov.w	r1, #1
 8007a0c:	f300 80b1 	bgt.w	8007b72 <_strtod_l+0x85a>
 8007a10:	fa01 f303 	lsl.w	r3, r1, r3
 8007a14:	930d      	str	r3, [sp, #52]	; 0x34
 8007a16:	2300      	movs	r3, #0
 8007a18:	9308      	str	r3, [sp, #32]
 8007a1a:	eb09 0802 	add.w	r8, r9, r2
 8007a1e:	9b04      	ldr	r3, [sp, #16]
 8007a20:	45c1      	cmp	r9, r8
 8007a22:	4417      	add	r7, r2
 8007a24:	441f      	add	r7, r3
 8007a26:	464b      	mov	r3, r9
 8007a28:	bfa8      	it	ge
 8007a2a:	4643      	movge	r3, r8
 8007a2c:	42bb      	cmp	r3, r7
 8007a2e:	bfa8      	it	ge
 8007a30:	463b      	movge	r3, r7
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	bfc2      	ittt	gt
 8007a36:	eba8 0803 	subgt.w	r8, r8, r3
 8007a3a:	1aff      	subgt	r7, r7, r3
 8007a3c:	eba9 0903 	subgt.w	r9, r9, r3
 8007a40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	dd17      	ble.n	8007a76 <_strtod_l+0x75e>
 8007a46:	4631      	mov	r1, r6
 8007a48:	461a      	mov	r2, r3
 8007a4a:	4620      	mov	r0, r4
 8007a4c:	f002 f9e0 	bl	8009e10 <__pow5mult>
 8007a50:	4606      	mov	r6, r0
 8007a52:	2800      	cmp	r0, #0
 8007a54:	f43f aea8 	beq.w	80077a8 <_strtod_l+0x490>
 8007a58:	4601      	mov	r1, r0
 8007a5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	f002 f92d 	bl	8009cbc <__multiply>
 8007a62:	900b      	str	r0, [sp, #44]	; 0x2c
 8007a64:	2800      	cmp	r0, #0
 8007a66:	f43f ae9f 	beq.w	80077a8 <_strtod_l+0x490>
 8007a6a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	f002 f80d 	bl	8009a8c <_Bfree>
 8007a72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a74:	9318      	str	r3, [sp, #96]	; 0x60
 8007a76:	f1b8 0f00 	cmp.w	r8, #0
 8007a7a:	f300 808c 	bgt.w	8007b96 <_strtod_l+0x87e>
 8007a7e:	9b06      	ldr	r3, [sp, #24]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	dd08      	ble.n	8007a96 <_strtod_l+0x77e>
 8007a84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007a86:	9905      	ldr	r1, [sp, #20]
 8007a88:	4620      	mov	r0, r4
 8007a8a:	f002 f9c1 	bl	8009e10 <__pow5mult>
 8007a8e:	9005      	str	r0, [sp, #20]
 8007a90:	2800      	cmp	r0, #0
 8007a92:	f43f ae89 	beq.w	80077a8 <_strtod_l+0x490>
 8007a96:	2f00      	cmp	r7, #0
 8007a98:	dd08      	ble.n	8007aac <_strtod_l+0x794>
 8007a9a:	9905      	ldr	r1, [sp, #20]
 8007a9c:	463a      	mov	r2, r7
 8007a9e:	4620      	mov	r0, r4
 8007aa0:	f002 fa10 	bl	8009ec4 <__lshift>
 8007aa4:	9005      	str	r0, [sp, #20]
 8007aa6:	2800      	cmp	r0, #0
 8007aa8:	f43f ae7e 	beq.w	80077a8 <_strtod_l+0x490>
 8007aac:	f1b9 0f00 	cmp.w	r9, #0
 8007ab0:	dd08      	ble.n	8007ac4 <_strtod_l+0x7ac>
 8007ab2:	4631      	mov	r1, r6
 8007ab4:	464a      	mov	r2, r9
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	f002 fa04 	bl	8009ec4 <__lshift>
 8007abc:	4606      	mov	r6, r0
 8007abe:	2800      	cmp	r0, #0
 8007ac0:	f43f ae72 	beq.w	80077a8 <_strtod_l+0x490>
 8007ac4:	9a05      	ldr	r2, [sp, #20]
 8007ac6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007ac8:	4620      	mov	r0, r4
 8007aca:	f002 fa87 	bl	8009fdc <__mdiff>
 8007ace:	4605      	mov	r5, r0
 8007ad0:	2800      	cmp	r0, #0
 8007ad2:	f43f ae69 	beq.w	80077a8 <_strtod_l+0x490>
 8007ad6:	68c3      	ldr	r3, [r0, #12]
 8007ad8:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ada:	2300      	movs	r3, #0
 8007adc:	60c3      	str	r3, [r0, #12]
 8007ade:	4631      	mov	r1, r6
 8007ae0:	f002 fa60 	bl	8009fa4 <__mcmp>
 8007ae4:	2800      	cmp	r0, #0
 8007ae6:	da60      	bge.n	8007baa <_strtod_l+0x892>
 8007ae8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007aea:	ea53 030a 	orrs.w	r3, r3, sl
 8007aee:	f040 8082 	bne.w	8007bf6 <_strtod_l+0x8de>
 8007af2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d17d      	bne.n	8007bf6 <_strtod_l+0x8de>
 8007afa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007afe:	0d1b      	lsrs	r3, r3, #20
 8007b00:	051b      	lsls	r3, r3, #20
 8007b02:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007b06:	d976      	bls.n	8007bf6 <_strtod_l+0x8de>
 8007b08:	696b      	ldr	r3, [r5, #20]
 8007b0a:	b913      	cbnz	r3, 8007b12 <_strtod_l+0x7fa>
 8007b0c:	692b      	ldr	r3, [r5, #16]
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	dd71      	ble.n	8007bf6 <_strtod_l+0x8de>
 8007b12:	4629      	mov	r1, r5
 8007b14:	2201      	movs	r2, #1
 8007b16:	4620      	mov	r0, r4
 8007b18:	f002 f9d4 	bl	8009ec4 <__lshift>
 8007b1c:	4631      	mov	r1, r6
 8007b1e:	4605      	mov	r5, r0
 8007b20:	f002 fa40 	bl	8009fa4 <__mcmp>
 8007b24:	2800      	cmp	r0, #0
 8007b26:	dd66      	ble.n	8007bf6 <_strtod_l+0x8de>
 8007b28:	9904      	ldr	r1, [sp, #16]
 8007b2a:	4a53      	ldr	r2, [pc, #332]	; (8007c78 <_strtod_l+0x960>)
 8007b2c:	465b      	mov	r3, fp
 8007b2e:	2900      	cmp	r1, #0
 8007b30:	f000 8081 	beq.w	8007c36 <_strtod_l+0x91e>
 8007b34:	ea02 010b 	and.w	r1, r2, fp
 8007b38:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007b3c:	dc7b      	bgt.n	8007c36 <_strtod_l+0x91e>
 8007b3e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007b42:	f77f aea9 	ble.w	8007898 <_strtod_l+0x580>
 8007b46:	4b4d      	ldr	r3, [pc, #308]	; (8007c7c <_strtod_l+0x964>)
 8007b48:	4650      	mov	r0, sl
 8007b4a:	4659      	mov	r1, fp
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f7f8 fd53 	bl	80005f8 <__aeabi_dmul>
 8007b52:	460b      	mov	r3, r1
 8007b54:	4303      	orrs	r3, r0
 8007b56:	bf08      	it	eq
 8007b58:	2322      	moveq	r3, #34	; 0x22
 8007b5a:	4682      	mov	sl, r0
 8007b5c:	468b      	mov	fp, r1
 8007b5e:	bf08      	it	eq
 8007b60:	6023      	streq	r3, [r4, #0]
 8007b62:	e62b      	b.n	80077bc <_strtod_l+0x4a4>
 8007b64:	f04f 32ff 	mov.w	r2, #4294967295
 8007b68:	fa02 f303 	lsl.w	r3, r2, r3
 8007b6c:	ea03 0a0a 	and.w	sl, r3, sl
 8007b70:	e6e3      	b.n	800793a <_strtod_l+0x622>
 8007b72:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007b76:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007b7a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007b7e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007b82:	fa01 f308 	lsl.w	r3, r1, r8
 8007b86:	9308      	str	r3, [sp, #32]
 8007b88:	910d      	str	r1, [sp, #52]	; 0x34
 8007b8a:	e746      	b.n	8007a1a <_strtod_l+0x702>
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	9308      	str	r3, [sp, #32]
 8007b90:	2301      	movs	r3, #1
 8007b92:	930d      	str	r3, [sp, #52]	; 0x34
 8007b94:	e741      	b.n	8007a1a <_strtod_l+0x702>
 8007b96:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007b98:	4642      	mov	r2, r8
 8007b9a:	4620      	mov	r0, r4
 8007b9c:	f002 f992 	bl	8009ec4 <__lshift>
 8007ba0:	9018      	str	r0, [sp, #96]	; 0x60
 8007ba2:	2800      	cmp	r0, #0
 8007ba4:	f47f af6b 	bne.w	8007a7e <_strtod_l+0x766>
 8007ba8:	e5fe      	b.n	80077a8 <_strtod_l+0x490>
 8007baa:	465f      	mov	r7, fp
 8007bac:	d16e      	bne.n	8007c8c <_strtod_l+0x974>
 8007bae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007bb0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007bb4:	b342      	cbz	r2, 8007c08 <_strtod_l+0x8f0>
 8007bb6:	4a32      	ldr	r2, [pc, #200]	; (8007c80 <_strtod_l+0x968>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d128      	bne.n	8007c0e <_strtod_l+0x8f6>
 8007bbc:	9b04      	ldr	r3, [sp, #16]
 8007bbe:	4651      	mov	r1, sl
 8007bc0:	b1eb      	cbz	r3, 8007bfe <_strtod_l+0x8e6>
 8007bc2:	4b2d      	ldr	r3, [pc, #180]	; (8007c78 <_strtod_l+0x960>)
 8007bc4:	403b      	ands	r3, r7
 8007bc6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007bca:	f04f 32ff 	mov.w	r2, #4294967295
 8007bce:	d819      	bhi.n	8007c04 <_strtod_l+0x8ec>
 8007bd0:	0d1b      	lsrs	r3, r3, #20
 8007bd2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bda:	4299      	cmp	r1, r3
 8007bdc:	d117      	bne.n	8007c0e <_strtod_l+0x8f6>
 8007bde:	4b29      	ldr	r3, [pc, #164]	; (8007c84 <_strtod_l+0x96c>)
 8007be0:	429f      	cmp	r7, r3
 8007be2:	d102      	bne.n	8007bea <_strtod_l+0x8d2>
 8007be4:	3101      	adds	r1, #1
 8007be6:	f43f addf 	beq.w	80077a8 <_strtod_l+0x490>
 8007bea:	4b23      	ldr	r3, [pc, #140]	; (8007c78 <_strtod_l+0x960>)
 8007bec:	403b      	ands	r3, r7
 8007bee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007bf2:	f04f 0a00 	mov.w	sl, #0
 8007bf6:	9b04      	ldr	r3, [sp, #16]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d1a4      	bne.n	8007b46 <_strtod_l+0x82e>
 8007bfc:	e5de      	b.n	80077bc <_strtod_l+0x4a4>
 8007bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8007c02:	e7ea      	b.n	8007bda <_strtod_l+0x8c2>
 8007c04:	4613      	mov	r3, r2
 8007c06:	e7e8      	b.n	8007bda <_strtod_l+0x8c2>
 8007c08:	ea53 030a 	orrs.w	r3, r3, sl
 8007c0c:	d08c      	beq.n	8007b28 <_strtod_l+0x810>
 8007c0e:	9b08      	ldr	r3, [sp, #32]
 8007c10:	b1db      	cbz	r3, 8007c4a <_strtod_l+0x932>
 8007c12:	423b      	tst	r3, r7
 8007c14:	d0ef      	beq.n	8007bf6 <_strtod_l+0x8de>
 8007c16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c18:	9a04      	ldr	r2, [sp, #16]
 8007c1a:	4650      	mov	r0, sl
 8007c1c:	4659      	mov	r1, fp
 8007c1e:	b1c3      	cbz	r3, 8007c52 <_strtod_l+0x93a>
 8007c20:	f7ff fb5c 	bl	80072dc <sulp>
 8007c24:	4602      	mov	r2, r0
 8007c26:	460b      	mov	r3, r1
 8007c28:	ec51 0b18 	vmov	r0, r1, d8
 8007c2c:	f7f8 fb2e 	bl	800028c <__adddf3>
 8007c30:	4682      	mov	sl, r0
 8007c32:	468b      	mov	fp, r1
 8007c34:	e7df      	b.n	8007bf6 <_strtod_l+0x8de>
 8007c36:	4013      	ands	r3, r2
 8007c38:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007c3c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007c40:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007c44:	f04f 3aff 	mov.w	sl, #4294967295
 8007c48:	e7d5      	b.n	8007bf6 <_strtod_l+0x8de>
 8007c4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c4c:	ea13 0f0a 	tst.w	r3, sl
 8007c50:	e7e0      	b.n	8007c14 <_strtod_l+0x8fc>
 8007c52:	f7ff fb43 	bl	80072dc <sulp>
 8007c56:	4602      	mov	r2, r0
 8007c58:	460b      	mov	r3, r1
 8007c5a:	ec51 0b18 	vmov	r0, r1, d8
 8007c5e:	f7f8 fb13 	bl	8000288 <__aeabi_dsub>
 8007c62:	2200      	movs	r2, #0
 8007c64:	2300      	movs	r3, #0
 8007c66:	4682      	mov	sl, r0
 8007c68:	468b      	mov	fp, r1
 8007c6a:	f7f8 ff2d 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c6e:	2800      	cmp	r0, #0
 8007c70:	d0c1      	beq.n	8007bf6 <_strtod_l+0x8de>
 8007c72:	e611      	b.n	8007898 <_strtod_l+0x580>
 8007c74:	fffffc02 	.word	0xfffffc02
 8007c78:	7ff00000 	.word	0x7ff00000
 8007c7c:	39500000 	.word	0x39500000
 8007c80:	000fffff 	.word	0x000fffff
 8007c84:	7fefffff 	.word	0x7fefffff
 8007c88:	0800b570 	.word	0x0800b570
 8007c8c:	4631      	mov	r1, r6
 8007c8e:	4628      	mov	r0, r5
 8007c90:	f002 fb06 	bl	800a2a0 <__ratio>
 8007c94:	ec59 8b10 	vmov	r8, r9, d0
 8007c98:	ee10 0a10 	vmov	r0, s0
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007ca2:	4649      	mov	r1, r9
 8007ca4:	f7f8 ff24 	bl	8000af0 <__aeabi_dcmple>
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	d07a      	beq.n	8007da2 <_strtod_l+0xa8a>
 8007cac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d04a      	beq.n	8007d48 <_strtod_l+0xa30>
 8007cb2:	4b95      	ldr	r3, [pc, #596]	; (8007f08 <_strtod_l+0xbf0>)
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007cba:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007f08 <_strtod_l+0xbf0>
 8007cbe:	f04f 0800 	mov.w	r8, #0
 8007cc2:	4b92      	ldr	r3, [pc, #584]	; (8007f0c <_strtod_l+0xbf4>)
 8007cc4:	403b      	ands	r3, r7
 8007cc6:	930d      	str	r3, [sp, #52]	; 0x34
 8007cc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007cca:	4b91      	ldr	r3, [pc, #580]	; (8007f10 <_strtod_l+0xbf8>)
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	f040 80b0 	bne.w	8007e32 <_strtod_l+0xb1a>
 8007cd2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007cd6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007cda:	ec4b ab10 	vmov	d0, sl, fp
 8007cde:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007ce2:	f002 fa05 	bl	800a0f0 <__ulp>
 8007ce6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007cea:	ec53 2b10 	vmov	r2, r3, d0
 8007cee:	f7f8 fc83 	bl	80005f8 <__aeabi_dmul>
 8007cf2:	4652      	mov	r2, sl
 8007cf4:	465b      	mov	r3, fp
 8007cf6:	f7f8 fac9 	bl	800028c <__adddf3>
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	4983      	ldr	r1, [pc, #524]	; (8007f0c <_strtod_l+0xbf4>)
 8007cfe:	4a85      	ldr	r2, [pc, #532]	; (8007f14 <_strtod_l+0xbfc>)
 8007d00:	4019      	ands	r1, r3
 8007d02:	4291      	cmp	r1, r2
 8007d04:	4682      	mov	sl, r0
 8007d06:	d960      	bls.n	8007dca <_strtod_l+0xab2>
 8007d08:	ee18 3a90 	vmov	r3, s17
 8007d0c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d104      	bne.n	8007d1e <_strtod_l+0xa06>
 8007d14:	ee18 3a10 	vmov	r3, s16
 8007d18:	3301      	adds	r3, #1
 8007d1a:	f43f ad45 	beq.w	80077a8 <_strtod_l+0x490>
 8007d1e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007f20 <_strtod_l+0xc08>
 8007d22:	f04f 3aff 	mov.w	sl, #4294967295
 8007d26:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007d28:	4620      	mov	r0, r4
 8007d2a:	f001 feaf 	bl	8009a8c <_Bfree>
 8007d2e:	9905      	ldr	r1, [sp, #20]
 8007d30:	4620      	mov	r0, r4
 8007d32:	f001 feab 	bl	8009a8c <_Bfree>
 8007d36:	4631      	mov	r1, r6
 8007d38:	4620      	mov	r0, r4
 8007d3a:	f001 fea7 	bl	8009a8c <_Bfree>
 8007d3e:	4629      	mov	r1, r5
 8007d40:	4620      	mov	r0, r4
 8007d42:	f001 fea3 	bl	8009a8c <_Bfree>
 8007d46:	e61a      	b.n	800797e <_strtod_l+0x666>
 8007d48:	f1ba 0f00 	cmp.w	sl, #0
 8007d4c:	d11b      	bne.n	8007d86 <_strtod_l+0xa6e>
 8007d4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d52:	b9f3      	cbnz	r3, 8007d92 <_strtod_l+0xa7a>
 8007d54:	4b6c      	ldr	r3, [pc, #432]	; (8007f08 <_strtod_l+0xbf0>)
 8007d56:	2200      	movs	r2, #0
 8007d58:	4640      	mov	r0, r8
 8007d5a:	4649      	mov	r1, r9
 8007d5c:	f7f8 febe 	bl	8000adc <__aeabi_dcmplt>
 8007d60:	b9d0      	cbnz	r0, 8007d98 <_strtod_l+0xa80>
 8007d62:	4640      	mov	r0, r8
 8007d64:	4649      	mov	r1, r9
 8007d66:	4b6c      	ldr	r3, [pc, #432]	; (8007f18 <_strtod_l+0xc00>)
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f7f8 fc45 	bl	80005f8 <__aeabi_dmul>
 8007d6e:	4680      	mov	r8, r0
 8007d70:	4689      	mov	r9, r1
 8007d72:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007d76:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007d7a:	9315      	str	r3, [sp, #84]	; 0x54
 8007d7c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007d80:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007d84:	e79d      	b.n	8007cc2 <_strtod_l+0x9aa>
 8007d86:	f1ba 0f01 	cmp.w	sl, #1
 8007d8a:	d102      	bne.n	8007d92 <_strtod_l+0xa7a>
 8007d8c:	2f00      	cmp	r7, #0
 8007d8e:	f43f ad83 	beq.w	8007898 <_strtod_l+0x580>
 8007d92:	4b62      	ldr	r3, [pc, #392]	; (8007f1c <_strtod_l+0xc04>)
 8007d94:	2200      	movs	r2, #0
 8007d96:	e78e      	b.n	8007cb6 <_strtod_l+0x99e>
 8007d98:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007f18 <_strtod_l+0xc00>
 8007d9c:	f04f 0800 	mov.w	r8, #0
 8007da0:	e7e7      	b.n	8007d72 <_strtod_l+0xa5a>
 8007da2:	4b5d      	ldr	r3, [pc, #372]	; (8007f18 <_strtod_l+0xc00>)
 8007da4:	4640      	mov	r0, r8
 8007da6:	4649      	mov	r1, r9
 8007da8:	2200      	movs	r2, #0
 8007daa:	f7f8 fc25 	bl	80005f8 <__aeabi_dmul>
 8007dae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007db0:	4680      	mov	r8, r0
 8007db2:	4689      	mov	r9, r1
 8007db4:	b933      	cbnz	r3, 8007dc4 <_strtod_l+0xaac>
 8007db6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007dba:	900e      	str	r0, [sp, #56]	; 0x38
 8007dbc:	930f      	str	r3, [sp, #60]	; 0x3c
 8007dbe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007dc2:	e7dd      	b.n	8007d80 <_strtod_l+0xa68>
 8007dc4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007dc8:	e7f9      	b.n	8007dbe <_strtod_l+0xaa6>
 8007dca:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007dce:	9b04      	ldr	r3, [sp, #16]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d1a8      	bne.n	8007d26 <_strtod_l+0xa0e>
 8007dd4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007dd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007dda:	0d1b      	lsrs	r3, r3, #20
 8007ddc:	051b      	lsls	r3, r3, #20
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d1a1      	bne.n	8007d26 <_strtod_l+0xa0e>
 8007de2:	4640      	mov	r0, r8
 8007de4:	4649      	mov	r1, r9
 8007de6:	f7f8 ff67 	bl	8000cb8 <__aeabi_d2lz>
 8007dea:	f7f8 fbd7 	bl	800059c <__aeabi_l2d>
 8007dee:	4602      	mov	r2, r0
 8007df0:	460b      	mov	r3, r1
 8007df2:	4640      	mov	r0, r8
 8007df4:	4649      	mov	r1, r9
 8007df6:	f7f8 fa47 	bl	8000288 <__aeabi_dsub>
 8007dfa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007dfc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e00:	ea43 030a 	orr.w	r3, r3, sl
 8007e04:	4313      	orrs	r3, r2
 8007e06:	4680      	mov	r8, r0
 8007e08:	4689      	mov	r9, r1
 8007e0a:	d055      	beq.n	8007eb8 <_strtod_l+0xba0>
 8007e0c:	a336      	add	r3, pc, #216	; (adr r3, 8007ee8 <_strtod_l+0xbd0>)
 8007e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e12:	f7f8 fe63 	bl	8000adc <__aeabi_dcmplt>
 8007e16:	2800      	cmp	r0, #0
 8007e18:	f47f acd0 	bne.w	80077bc <_strtod_l+0x4a4>
 8007e1c:	a334      	add	r3, pc, #208	; (adr r3, 8007ef0 <_strtod_l+0xbd8>)
 8007e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e22:	4640      	mov	r0, r8
 8007e24:	4649      	mov	r1, r9
 8007e26:	f7f8 fe77 	bl	8000b18 <__aeabi_dcmpgt>
 8007e2a:	2800      	cmp	r0, #0
 8007e2c:	f43f af7b 	beq.w	8007d26 <_strtod_l+0xa0e>
 8007e30:	e4c4      	b.n	80077bc <_strtod_l+0x4a4>
 8007e32:	9b04      	ldr	r3, [sp, #16]
 8007e34:	b333      	cbz	r3, 8007e84 <_strtod_l+0xb6c>
 8007e36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e38:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007e3c:	d822      	bhi.n	8007e84 <_strtod_l+0xb6c>
 8007e3e:	a32e      	add	r3, pc, #184	; (adr r3, 8007ef8 <_strtod_l+0xbe0>)
 8007e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e44:	4640      	mov	r0, r8
 8007e46:	4649      	mov	r1, r9
 8007e48:	f7f8 fe52 	bl	8000af0 <__aeabi_dcmple>
 8007e4c:	b1a0      	cbz	r0, 8007e78 <_strtod_l+0xb60>
 8007e4e:	4649      	mov	r1, r9
 8007e50:	4640      	mov	r0, r8
 8007e52:	f7f8 fea9 	bl	8000ba8 <__aeabi_d2uiz>
 8007e56:	2801      	cmp	r0, #1
 8007e58:	bf38      	it	cc
 8007e5a:	2001      	movcc	r0, #1
 8007e5c:	f7f8 fb52 	bl	8000504 <__aeabi_ui2d>
 8007e60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e62:	4680      	mov	r8, r0
 8007e64:	4689      	mov	r9, r1
 8007e66:	bb23      	cbnz	r3, 8007eb2 <_strtod_l+0xb9a>
 8007e68:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e6c:	9010      	str	r0, [sp, #64]	; 0x40
 8007e6e:	9311      	str	r3, [sp, #68]	; 0x44
 8007e70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007e74:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e7c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007e80:	1a9b      	subs	r3, r3, r2
 8007e82:	9309      	str	r3, [sp, #36]	; 0x24
 8007e84:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007e88:	eeb0 0a48 	vmov.f32	s0, s16
 8007e8c:	eef0 0a68 	vmov.f32	s1, s17
 8007e90:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007e94:	f002 f92c 	bl	800a0f0 <__ulp>
 8007e98:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007e9c:	ec53 2b10 	vmov	r2, r3, d0
 8007ea0:	f7f8 fbaa 	bl	80005f8 <__aeabi_dmul>
 8007ea4:	ec53 2b18 	vmov	r2, r3, d8
 8007ea8:	f7f8 f9f0 	bl	800028c <__adddf3>
 8007eac:	4682      	mov	sl, r0
 8007eae:	468b      	mov	fp, r1
 8007eb0:	e78d      	b.n	8007dce <_strtod_l+0xab6>
 8007eb2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007eb6:	e7db      	b.n	8007e70 <_strtod_l+0xb58>
 8007eb8:	a311      	add	r3, pc, #68	; (adr r3, 8007f00 <_strtod_l+0xbe8>)
 8007eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ebe:	f7f8 fe0d 	bl	8000adc <__aeabi_dcmplt>
 8007ec2:	e7b2      	b.n	8007e2a <_strtod_l+0xb12>
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	930a      	str	r3, [sp, #40]	; 0x28
 8007ec8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007eca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ecc:	6013      	str	r3, [r2, #0]
 8007ece:	f7ff ba6b 	b.w	80073a8 <_strtod_l+0x90>
 8007ed2:	2a65      	cmp	r2, #101	; 0x65
 8007ed4:	f43f ab5f 	beq.w	8007596 <_strtod_l+0x27e>
 8007ed8:	2a45      	cmp	r2, #69	; 0x45
 8007eda:	f43f ab5c 	beq.w	8007596 <_strtod_l+0x27e>
 8007ede:	2301      	movs	r3, #1
 8007ee0:	f7ff bb94 	b.w	800760c <_strtod_l+0x2f4>
 8007ee4:	f3af 8000 	nop.w
 8007ee8:	94a03595 	.word	0x94a03595
 8007eec:	3fdfffff 	.word	0x3fdfffff
 8007ef0:	35afe535 	.word	0x35afe535
 8007ef4:	3fe00000 	.word	0x3fe00000
 8007ef8:	ffc00000 	.word	0xffc00000
 8007efc:	41dfffff 	.word	0x41dfffff
 8007f00:	94a03595 	.word	0x94a03595
 8007f04:	3fcfffff 	.word	0x3fcfffff
 8007f08:	3ff00000 	.word	0x3ff00000
 8007f0c:	7ff00000 	.word	0x7ff00000
 8007f10:	7fe00000 	.word	0x7fe00000
 8007f14:	7c9fffff 	.word	0x7c9fffff
 8007f18:	3fe00000 	.word	0x3fe00000
 8007f1c:	bff00000 	.word	0xbff00000
 8007f20:	7fefffff 	.word	0x7fefffff

08007f24 <_strtod_r>:
 8007f24:	4b01      	ldr	r3, [pc, #4]	; (8007f2c <_strtod_r+0x8>)
 8007f26:	f7ff b9f7 	b.w	8007318 <_strtod_l>
 8007f2a:	bf00      	nop
 8007f2c:	20000074 	.word	0x20000074

08007f30 <_strtol_l.constprop.0>:
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f36:	d001      	beq.n	8007f3c <_strtol_l.constprop.0+0xc>
 8007f38:	2b24      	cmp	r3, #36	; 0x24
 8007f3a:	d906      	bls.n	8007f4a <_strtol_l.constprop.0+0x1a>
 8007f3c:	f7fe f884 	bl	8006048 <__errno>
 8007f40:	2316      	movs	r3, #22
 8007f42:	6003      	str	r3, [r0, #0]
 8007f44:	2000      	movs	r0, #0
 8007f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f4a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008030 <_strtol_l.constprop.0+0x100>
 8007f4e:	460d      	mov	r5, r1
 8007f50:	462e      	mov	r6, r5
 8007f52:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f56:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007f5a:	f017 0708 	ands.w	r7, r7, #8
 8007f5e:	d1f7      	bne.n	8007f50 <_strtol_l.constprop.0+0x20>
 8007f60:	2c2d      	cmp	r4, #45	; 0x2d
 8007f62:	d132      	bne.n	8007fca <_strtol_l.constprop.0+0x9a>
 8007f64:	782c      	ldrb	r4, [r5, #0]
 8007f66:	2701      	movs	r7, #1
 8007f68:	1cb5      	adds	r5, r6, #2
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d05b      	beq.n	8008026 <_strtol_l.constprop.0+0xf6>
 8007f6e:	2b10      	cmp	r3, #16
 8007f70:	d109      	bne.n	8007f86 <_strtol_l.constprop.0+0x56>
 8007f72:	2c30      	cmp	r4, #48	; 0x30
 8007f74:	d107      	bne.n	8007f86 <_strtol_l.constprop.0+0x56>
 8007f76:	782c      	ldrb	r4, [r5, #0]
 8007f78:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007f7c:	2c58      	cmp	r4, #88	; 0x58
 8007f7e:	d14d      	bne.n	800801c <_strtol_l.constprop.0+0xec>
 8007f80:	786c      	ldrb	r4, [r5, #1]
 8007f82:	2310      	movs	r3, #16
 8007f84:	3502      	adds	r5, #2
 8007f86:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007f8a:	f108 38ff 	add.w	r8, r8, #4294967295
 8007f8e:	f04f 0c00 	mov.w	ip, #0
 8007f92:	fbb8 f9f3 	udiv	r9, r8, r3
 8007f96:	4666      	mov	r6, ip
 8007f98:	fb03 8a19 	mls	sl, r3, r9, r8
 8007f9c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007fa0:	f1be 0f09 	cmp.w	lr, #9
 8007fa4:	d816      	bhi.n	8007fd4 <_strtol_l.constprop.0+0xa4>
 8007fa6:	4674      	mov	r4, lr
 8007fa8:	42a3      	cmp	r3, r4
 8007faa:	dd24      	ble.n	8007ff6 <_strtol_l.constprop.0+0xc6>
 8007fac:	f1bc 0f00 	cmp.w	ip, #0
 8007fb0:	db1e      	blt.n	8007ff0 <_strtol_l.constprop.0+0xc0>
 8007fb2:	45b1      	cmp	r9, r6
 8007fb4:	d31c      	bcc.n	8007ff0 <_strtol_l.constprop.0+0xc0>
 8007fb6:	d101      	bne.n	8007fbc <_strtol_l.constprop.0+0x8c>
 8007fb8:	45a2      	cmp	sl, r4
 8007fba:	db19      	blt.n	8007ff0 <_strtol_l.constprop.0+0xc0>
 8007fbc:	fb06 4603 	mla	r6, r6, r3, r4
 8007fc0:	f04f 0c01 	mov.w	ip, #1
 8007fc4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007fc8:	e7e8      	b.n	8007f9c <_strtol_l.constprop.0+0x6c>
 8007fca:	2c2b      	cmp	r4, #43	; 0x2b
 8007fcc:	bf04      	itt	eq
 8007fce:	782c      	ldrbeq	r4, [r5, #0]
 8007fd0:	1cb5      	addeq	r5, r6, #2
 8007fd2:	e7ca      	b.n	8007f6a <_strtol_l.constprop.0+0x3a>
 8007fd4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007fd8:	f1be 0f19 	cmp.w	lr, #25
 8007fdc:	d801      	bhi.n	8007fe2 <_strtol_l.constprop.0+0xb2>
 8007fde:	3c37      	subs	r4, #55	; 0x37
 8007fe0:	e7e2      	b.n	8007fa8 <_strtol_l.constprop.0+0x78>
 8007fe2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007fe6:	f1be 0f19 	cmp.w	lr, #25
 8007fea:	d804      	bhi.n	8007ff6 <_strtol_l.constprop.0+0xc6>
 8007fec:	3c57      	subs	r4, #87	; 0x57
 8007fee:	e7db      	b.n	8007fa8 <_strtol_l.constprop.0+0x78>
 8007ff0:	f04f 3cff 	mov.w	ip, #4294967295
 8007ff4:	e7e6      	b.n	8007fc4 <_strtol_l.constprop.0+0x94>
 8007ff6:	f1bc 0f00 	cmp.w	ip, #0
 8007ffa:	da05      	bge.n	8008008 <_strtol_l.constprop.0+0xd8>
 8007ffc:	2322      	movs	r3, #34	; 0x22
 8007ffe:	6003      	str	r3, [r0, #0]
 8008000:	4646      	mov	r6, r8
 8008002:	b942      	cbnz	r2, 8008016 <_strtol_l.constprop.0+0xe6>
 8008004:	4630      	mov	r0, r6
 8008006:	e79e      	b.n	8007f46 <_strtol_l.constprop.0+0x16>
 8008008:	b107      	cbz	r7, 800800c <_strtol_l.constprop.0+0xdc>
 800800a:	4276      	negs	r6, r6
 800800c:	2a00      	cmp	r2, #0
 800800e:	d0f9      	beq.n	8008004 <_strtol_l.constprop.0+0xd4>
 8008010:	f1bc 0f00 	cmp.w	ip, #0
 8008014:	d000      	beq.n	8008018 <_strtol_l.constprop.0+0xe8>
 8008016:	1e69      	subs	r1, r5, #1
 8008018:	6011      	str	r1, [r2, #0]
 800801a:	e7f3      	b.n	8008004 <_strtol_l.constprop.0+0xd4>
 800801c:	2430      	movs	r4, #48	; 0x30
 800801e:	2b00      	cmp	r3, #0
 8008020:	d1b1      	bne.n	8007f86 <_strtol_l.constprop.0+0x56>
 8008022:	2308      	movs	r3, #8
 8008024:	e7af      	b.n	8007f86 <_strtol_l.constprop.0+0x56>
 8008026:	2c30      	cmp	r4, #48	; 0x30
 8008028:	d0a5      	beq.n	8007f76 <_strtol_l.constprop.0+0x46>
 800802a:	230a      	movs	r3, #10
 800802c:	e7ab      	b.n	8007f86 <_strtol_l.constprop.0+0x56>
 800802e:	bf00      	nop
 8008030:	0800b599 	.word	0x0800b599

08008034 <_strtol_r>:
 8008034:	f7ff bf7c 	b.w	8007f30 <_strtol_l.constprop.0>

08008038 <__swbuf_r>:
 8008038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800803a:	460e      	mov	r6, r1
 800803c:	4614      	mov	r4, r2
 800803e:	4605      	mov	r5, r0
 8008040:	b118      	cbz	r0, 800804a <__swbuf_r+0x12>
 8008042:	6983      	ldr	r3, [r0, #24]
 8008044:	b90b      	cbnz	r3, 800804a <__swbuf_r+0x12>
 8008046:	f001 f84b 	bl	80090e0 <__sinit>
 800804a:	4b21      	ldr	r3, [pc, #132]	; (80080d0 <__swbuf_r+0x98>)
 800804c:	429c      	cmp	r4, r3
 800804e:	d12b      	bne.n	80080a8 <__swbuf_r+0x70>
 8008050:	686c      	ldr	r4, [r5, #4]
 8008052:	69a3      	ldr	r3, [r4, #24]
 8008054:	60a3      	str	r3, [r4, #8]
 8008056:	89a3      	ldrh	r3, [r4, #12]
 8008058:	071a      	lsls	r2, r3, #28
 800805a:	d52f      	bpl.n	80080bc <__swbuf_r+0x84>
 800805c:	6923      	ldr	r3, [r4, #16]
 800805e:	b36b      	cbz	r3, 80080bc <__swbuf_r+0x84>
 8008060:	6923      	ldr	r3, [r4, #16]
 8008062:	6820      	ldr	r0, [r4, #0]
 8008064:	1ac0      	subs	r0, r0, r3
 8008066:	6963      	ldr	r3, [r4, #20]
 8008068:	b2f6      	uxtb	r6, r6
 800806a:	4283      	cmp	r3, r0
 800806c:	4637      	mov	r7, r6
 800806e:	dc04      	bgt.n	800807a <__swbuf_r+0x42>
 8008070:	4621      	mov	r1, r4
 8008072:	4628      	mov	r0, r5
 8008074:	f000 ffa0 	bl	8008fb8 <_fflush_r>
 8008078:	bb30      	cbnz	r0, 80080c8 <__swbuf_r+0x90>
 800807a:	68a3      	ldr	r3, [r4, #8]
 800807c:	3b01      	subs	r3, #1
 800807e:	60a3      	str	r3, [r4, #8]
 8008080:	6823      	ldr	r3, [r4, #0]
 8008082:	1c5a      	adds	r2, r3, #1
 8008084:	6022      	str	r2, [r4, #0]
 8008086:	701e      	strb	r6, [r3, #0]
 8008088:	6963      	ldr	r3, [r4, #20]
 800808a:	3001      	adds	r0, #1
 800808c:	4283      	cmp	r3, r0
 800808e:	d004      	beq.n	800809a <__swbuf_r+0x62>
 8008090:	89a3      	ldrh	r3, [r4, #12]
 8008092:	07db      	lsls	r3, r3, #31
 8008094:	d506      	bpl.n	80080a4 <__swbuf_r+0x6c>
 8008096:	2e0a      	cmp	r6, #10
 8008098:	d104      	bne.n	80080a4 <__swbuf_r+0x6c>
 800809a:	4621      	mov	r1, r4
 800809c:	4628      	mov	r0, r5
 800809e:	f000 ff8b 	bl	8008fb8 <_fflush_r>
 80080a2:	b988      	cbnz	r0, 80080c8 <__swbuf_r+0x90>
 80080a4:	4638      	mov	r0, r7
 80080a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080a8:	4b0a      	ldr	r3, [pc, #40]	; (80080d4 <__swbuf_r+0x9c>)
 80080aa:	429c      	cmp	r4, r3
 80080ac:	d101      	bne.n	80080b2 <__swbuf_r+0x7a>
 80080ae:	68ac      	ldr	r4, [r5, #8]
 80080b0:	e7cf      	b.n	8008052 <__swbuf_r+0x1a>
 80080b2:	4b09      	ldr	r3, [pc, #36]	; (80080d8 <__swbuf_r+0xa0>)
 80080b4:	429c      	cmp	r4, r3
 80080b6:	bf08      	it	eq
 80080b8:	68ec      	ldreq	r4, [r5, #12]
 80080ba:	e7ca      	b.n	8008052 <__swbuf_r+0x1a>
 80080bc:	4621      	mov	r1, r4
 80080be:	4628      	mov	r0, r5
 80080c0:	f000 f80c 	bl	80080dc <__swsetup_r>
 80080c4:	2800      	cmp	r0, #0
 80080c6:	d0cb      	beq.n	8008060 <__swbuf_r+0x28>
 80080c8:	f04f 37ff 	mov.w	r7, #4294967295
 80080cc:	e7ea      	b.n	80080a4 <__swbuf_r+0x6c>
 80080ce:	bf00      	nop
 80080d0:	0800b74c 	.word	0x0800b74c
 80080d4:	0800b76c 	.word	0x0800b76c
 80080d8:	0800b72c 	.word	0x0800b72c

080080dc <__swsetup_r>:
 80080dc:	4b32      	ldr	r3, [pc, #200]	; (80081a8 <__swsetup_r+0xcc>)
 80080de:	b570      	push	{r4, r5, r6, lr}
 80080e0:	681d      	ldr	r5, [r3, #0]
 80080e2:	4606      	mov	r6, r0
 80080e4:	460c      	mov	r4, r1
 80080e6:	b125      	cbz	r5, 80080f2 <__swsetup_r+0x16>
 80080e8:	69ab      	ldr	r3, [r5, #24]
 80080ea:	b913      	cbnz	r3, 80080f2 <__swsetup_r+0x16>
 80080ec:	4628      	mov	r0, r5
 80080ee:	f000 fff7 	bl	80090e0 <__sinit>
 80080f2:	4b2e      	ldr	r3, [pc, #184]	; (80081ac <__swsetup_r+0xd0>)
 80080f4:	429c      	cmp	r4, r3
 80080f6:	d10f      	bne.n	8008118 <__swsetup_r+0x3c>
 80080f8:	686c      	ldr	r4, [r5, #4]
 80080fa:	89a3      	ldrh	r3, [r4, #12]
 80080fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008100:	0719      	lsls	r1, r3, #28
 8008102:	d42c      	bmi.n	800815e <__swsetup_r+0x82>
 8008104:	06dd      	lsls	r5, r3, #27
 8008106:	d411      	bmi.n	800812c <__swsetup_r+0x50>
 8008108:	2309      	movs	r3, #9
 800810a:	6033      	str	r3, [r6, #0]
 800810c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008110:	81a3      	strh	r3, [r4, #12]
 8008112:	f04f 30ff 	mov.w	r0, #4294967295
 8008116:	e03e      	b.n	8008196 <__swsetup_r+0xba>
 8008118:	4b25      	ldr	r3, [pc, #148]	; (80081b0 <__swsetup_r+0xd4>)
 800811a:	429c      	cmp	r4, r3
 800811c:	d101      	bne.n	8008122 <__swsetup_r+0x46>
 800811e:	68ac      	ldr	r4, [r5, #8]
 8008120:	e7eb      	b.n	80080fa <__swsetup_r+0x1e>
 8008122:	4b24      	ldr	r3, [pc, #144]	; (80081b4 <__swsetup_r+0xd8>)
 8008124:	429c      	cmp	r4, r3
 8008126:	bf08      	it	eq
 8008128:	68ec      	ldreq	r4, [r5, #12]
 800812a:	e7e6      	b.n	80080fa <__swsetup_r+0x1e>
 800812c:	0758      	lsls	r0, r3, #29
 800812e:	d512      	bpl.n	8008156 <__swsetup_r+0x7a>
 8008130:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008132:	b141      	cbz	r1, 8008146 <__swsetup_r+0x6a>
 8008134:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008138:	4299      	cmp	r1, r3
 800813a:	d002      	beq.n	8008142 <__swsetup_r+0x66>
 800813c:	4630      	mov	r0, r6
 800813e:	f7fd ffe1 	bl	8006104 <_free_r>
 8008142:	2300      	movs	r3, #0
 8008144:	6363      	str	r3, [r4, #52]	; 0x34
 8008146:	89a3      	ldrh	r3, [r4, #12]
 8008148:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800814c:	81a3      	strh	r3, [r4, #12]
 800814e:	2300      	movs	r3, #0
 8008150:	6063      	str	r3, [r4, #4]
 8008152:	6923      	ldr	r3, [r4, #16]
 8008154:	6023      	str	r3, [r4, #0]
 8008156:	89a3      	ldrh	r3, [r4, #12]
 8008158:	f043 0308 	orr.w	r3, r3, #8
 800815c:	81a3      	strh	r3, [r4, #12]
 800815e:	6923      	ldr	r3, [r4, #16]
 8008160:	b94b      	cbnz	r3, 8008176 <__swsetup_r+0x9a>
 8008162:	89a3      	ldrh	r3, [r4, #12]
 8008164:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800816c:	d003      	beq.n	8008176 <__swsetup_r+0x9a>
 800816e:	4621      	mov	r1, r4
 8008170:	4630      	mov	r0, r6
 8008172:	f001 fbed 	bl	8009950 <__smakebuf_r>
 8008176:	89a0      	ldrh	r0, [r4, #12]
 8008178:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800817c:	f010 0301 	ands.w	r3, r0, #1
 8008180:	d00a      	beq.n	8008198 <__swsetup_r+0xbc>
 8008182:	2300      	movs	r3, #0
 8008184:	60a3      	str	r3, [r4, #8]
 8008186:	6963      	ldr	r3, [r4, #20]
 8008188:	425b      	negs	r3, r3
 800818a:	61a3      	str	r3, [r4, #24]
 800818c:	6923      	ldr	r3, [r4, #16]
 800818e:	b943      	cbnz	r3, 80081a2 <__swsetup_r+0xc6>
 8008190:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008194:	d1ba      	bne.n	800810c <__swsetup_r+0x30>
 8008196:	bd70      	pop	{r4, r5, r6, pc}
 8008198:	0781      	lsls	r1, r0, #30
 800819a:	bf58      	it	pl
 800819c:	6963      	ldrpl	r3, [r4, #20]
 800819e:	60a3      	str	r3, [r4, #8]
 80081a0:	e7f4      	b.n	800818c <__swsetup_r+0xb0>
 80081a2:	2000      	movs	r0, #0
 80081a4:	e7f7      	b.n	8008196 <__swsetup_r+0xba>
 80081a6:	bf00      	nop
 80081a8:	2000000c 	.word	0x2000000c
 80081ac:	0800b74c 	.word	0x0800b74c
 80081b0:	0800b76c 	.word	0x0800b76c
 80081b4:	0800b72c 	.word	0x0800b72c

080081b8 <quorem>:
 80081b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081bc:	6903      	ldr	r3, [r0, #16]
 80081be:	690c      	ldr	r4, [r1, #16]
 80081c0:	42a3      	cmp	r3, r4
 80081c2:	4607      	mov	r7, r0
 80081c4:	f2c0 8081 	blt.w	80082ca <quorem+0x112>
 80081c8:	3c01      	subs	r4, #1
 80081ca:	f101 0814 	add.w	r8, r1, #20
 80081ce:	f100 0514 	add.w	r5, r0, #20
 80081d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081d6:	9301      	str	r3, [sp, #4]
 80081d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80081dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081e0:	3301      	adds	r3, #1
 80081e2:	429a      	cmp	r2, r3
 80081e4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80081e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80081ec:	fbb2 f6f3 	udiv	r6, r2, r3
 80081f0:	d331      	bcc.n	8008256 <quorem+0x9e>
 80081f2:	f04f 0e00 	mov.w	lr, #0
 80081f6:	4640      	mov	r0, r8
 80081f8:	46ac      	mov	ip, r5
 80081fa:	46f2      	mov	sl, lr
 80081fc:	f850 2b04 	ldr.w	r2, [r0], #4
 8008200:	b293      	uxth	r3, r2
 8008202:	fb06 e303 	mla	r3, r6, r3, lr
 8008206:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800820a:	b29b      	uxth	r3, r3
 800820c:	ebaa 0303 	sub.w	r3, sl, r3
 8008210:	f8dc a000 	ldr.w	sl, [ip]
 8008214:	0c12      	lsrs	r2, r2, #16
 8008216:	fa13 f38a 	uxtah	r3, r3, sl
 800821a:	fb06 e202 	mla	r2, r6, r2, lr
 800821e:	9300      	str	r3, [sp, #0]
 8008220:	9b00      	ldr	r3, [sp, #0]
 8008222:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008226:	b292      	uxth	r2, r2
 8008228:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800822c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008230:	f8bd 3000 	ldrh.w	r3, [sp]
 8008234:	4581      	cmp	r9, r0
 8008236:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800823a:	f84c 3b04 	str.w	r3, [ip], #4
 800823e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008242:	d2db      	bcs.n	80081fc <quorem+0x44>
 8008244:	f855 300b 	ldr.w	r3, [r5, fp]
 8008248:	b92b      	cbnz	r3, 8008256 <quorem+0x9e>
 800824a:	9b01      	ldr	r3, [sp, #4]
 800824c:	3b04      	subs	r3, #4
 800824e:	429d      	cmp	r5, r3
 8008250:	461a      	mov	r2, r3
 8008252:	d32e      	bcc.n	80082b2 <quorem+0xfa>
 8008254:	613c      	str	r4, [r7, #16]
 8008256:	4638      	mov	r0, r7
 8008258:	f001 fea4 	bl	8009fa4 <__mcmp>
 800825c:	2800      	cmp	r0, #0
 800825e:	db24      	blt.n	80082aa <quorem+0xf2>
 8008260:	3601      	adds	r6, #1
 8008262:	4628      	mov	r0, r5
 8008264:	f04f 0c00 	mov.w	ip, #0
 8008268:	f858 2b04 	ldr.w	r2, [r8], #4
 800826c:	f8d0 e000 	ldr.w	lr, [r0]
 8008270:	b293      	uxth	r3, r2
 8008272:	ebac 0303 	sub.w	r3, ip, r3
 8008276:	0c12      	lsrs	r2, r2, #16
 8008278:	fa13 f38e 	uxtah	r3, r3, lr
 800827c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008280:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008284:	b29b      	uxth	r3, r3
 8008286:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800828a:	45c1      	cmp	r9, r8
 800828c:	f840 3b04 	str.w	r3, [r0], #4
 8008290:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008294:	d2e8      	bcs.n	8008268 <quorem+0xb0>
 8008296:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800829a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800829e:	b922      	cbnz	r2, 80082aa <quorem+0xf2>
 80082a0:	3b04      	subs	r3, #4
 80082a2:	429d      	cmp	r5, r3
 80082a4:	461a      	mov	r2, r3
 80082a6:	d30a      	bcc.n	80082be <quorem+0x106>
 80082a8:	613c      	str	r4, [r7, #16]
 80082aa:	4630      	mov	r0, r6
 80082ac:	b003      	add	sp, #12
 80082ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082b2:	6812      	ldr	r2, [r2, #0]
 80082b4:	3b04      	subs	r3, #4
 80082b6:	2a00      	cmp	r2, #0
 80082b8:	d1cc      	bne.n	8008254 <quorem+0x9c>
 80082ba:	3c01      	subs	r4, #1
 80082bc:	e7c7      	b.n	800824e <quorem+0x96>
 80082be:	6812      	ldr	r2, [r2, #0]
 80082c0:	3b04      	subs	r3, #4
 80082c2:	2a00      	cmp	r2, #0
 80082c4:	d1f0      	bne.n	80082a8 <quorem+0xf0>
 80082c6:	3c01      	subs	r4, #1
 80082c8:	e7eb      	b.n	80082a2 <quorem+0xea>
 80082ca:	2000      	movs	r0, #0
 80082cc:	e7ee      	b.n	80082ac <quorem+0xf4>
	...

080082d0 <_dtoa_r>:
 80082d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082d4:	ed2d 8b04 	vpush	{d8-d9}
 80082d8:	ec57 6b10 	vmov	r6, r7, d0
 80082dc:	b093      	sub	sp, #76	; 0x4c
 80082de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80082e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80082e4:	9106      	str	r1, [sp, #24]
 80082e6:	ee10 aa10 	vmov	sl, s0
 80082ea:	4604      	mov	r4, r0
 80082ec:	9209      	str	r2, [sp, #36]	; 0x24
 80082ee:	930c      	str	r3, [sp, #48]	; 0x30
 80082f0:	46bb      	mov	fp, r7
 80082f2:	b975      	cbnz	r5, 8008312 <_dtoa_r+0x42>
 80082f4:	2010      	movs	r0, #16
 80082f6:	f7fd fed1 	bl	800609c <malloc>
 80082fa:	4602      	mov	r2, r0
 80082fc:	6260      	str	r0, [r4, #36]	; 0x24
 80082fe:	b920      	cbnz	r0, 800830a <_dtoa_r+0x3a>
 8008300:	4ba7      	ldr	r3, [pc, #668]	; (80085a0 <_dtoa_r+0x2d0>)
 8008302:	21ea      	movs	r1, #234	; 0xea
 8008304:	48a7      	ldr	r0, [pc, #668]	; (80085a4 <_dtoa_r+0x2d4>)
 8008306:	f002 fb75 	bl	800a9f4 <__assert_func>
 800830a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800830e:	6005      	str	r5, [r0, #0]
 8008310:	60c5      	str	r5, [r0, #12]
 8008312:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008314:	6819      	ldr	r1, [r3, #0]
 8008316:	b151      	cbz	r1, 800832e <_dtoa_r+0x5e>
 8008318:	685a      	ldr	r2, [r3, #4]
 800831a:	604a      	str	r2, [r1, #4]
 800831c:	2301      	movs	r3, #1
 800831e:	4093      	lsls	r3, r2
 8008320:	608b      	str	r3, [r1, #8]
 8008322:	4620      	mov	r0, r4
 8008324:	f001 fbb2 	bl	8009a8c <_Bfree>
 8008328:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800832a:	2200      	movs	r2, #0
 800832c:	601a      	str	r2, [r3, #0]
 800832e:	1e3b      	subs	r3, r7, #0
 8008330:	bfaa      	itet	ge
 8008332:	2300      	movge	r3, #0
 8008334:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008338:	f8c8 3000 	strge.w	r3, [r8]
 800833c:	4b9a      	ldr	r3, [pc, #616]	; (80085a8 <_dtoa_r+0x2d8>)
 800833e:	bfbc      	itt	lt
 8008340:	2201      	movlt	r2, #1
 8008342:	f8c8 2000 	strlt.w	r2, [r8]
 8008346:	ea33 030b 	bics.w	r3, r3, fp
 800834a:	d11b      	bne.n	8008384 <_dtoa_r+0xb4>
 800834c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800834e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008352:	6013      	str	r3, [r2, #0]
 8008354:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008358:	4333      	orrs	r3, r6
 800835a:	f000 8592 	beq.w	8008e82 <_dtoa_r+0xbb2>
 800835e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008360:	b963      	cbnz	r3, 800837c <_dtoa_r+0xac>
 8008362:	4b92      	ldr	r3, [pc, #584]	; (80085ac <_dtoa_r+0x2dc>)
 8008364:	e022      	b.n	80083ac <_dtoa_r+0xdc>
 8008366:	4b92      	ldr	r3, [pc, #584]	; (80085b0 <_dtoa_r+0x2e0>)
 8008368:	9301      	str	r3, [sp, #4]
 800836a:	3308      	adds	r3, #8
 800836c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800836e:	6013      	str	r3, [r2, #0]
 8008370:	9801      	ldr	r0, [sp, #4]
 8008372:	b013      	add	sp, #76	; 0x4c
 8008374:	ecbd 8b04 	vpop	{d8-d9}
 8008378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800837c:	4b8b      	ldr	r3, [pc, #556]	; (80085ac <_dtoa_r+0x2dc>)
 800837e:	9301      	str	r3, [sp, #4]
 8008380:	3303      	adds	r3, #3
 8008382:	e7f3      	b.n	800836c <_dtoa_r+0x9c>
 8008384:	2200      	movs	r2, #0
 8008386:	2300      	movs	r3, #0
 8008388:	4650      	mov	r0, sl
 800838a:	4659      	mov	r1, fp
 800838c:	f7f8 fb9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008390:	ec4b ab19 	vmov	d9, sl, fp
 8008394:	4680      	mov	r8, r0
 8008396:	b158      	cbz	r0, 80083b0 <_dtoa_r+0xe0>
 8008398:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800839a:	2301      	movs	r3, #1
 800839c:	6013      	str	r3, [r2, #0]
 800839e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	f000 856b 	beq.w	8008e7c <_dtoa_r+0xbac>
 80083a6:	4883      	ldr	r0, [pc, #524]	; (80085b4 <_dtoa_r+0x2e4>)
 80083a8:	6018      	str	r0, [r3, #0]
 80083aa:	1e43      	subs	r3, r0, #1
 80083ac:	9301      	str	r3, [sp, #4]
 80083ae:	e7df      	b.n	8008370 <_dtoa_r+0xa0>
 80083b0:	ec4b ab10 	vmov	d0, sl, fp
 80083b4:	aa10      	add	r2, sp, #64	; 0x40
 80083b6:	a911      	add	r1, sp, #68	; 0x44
 80083b8:	4620      	mov	r0, r4
 80083ba:	f001 ff15 	bl	800a1e8 <__d2b>
 80083be:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80083c2:	ee08 0a10 	vmov	s16, r0
 80083c6:	2d00      	cmp	r5, #0
 80083c8:	f000 8084 	beq.w	80084d4 <_dtoa_r+0x204>
 80083cc:	ee19 3a90 	vmov	r3, s19
 80083d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083d4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80083d8:	4656      	mov	r6, sl
 80083da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80083de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80083e2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80083e6:	4b74      	ldr	r3, [pc, #464]	; (80085b8 <_dtoa_r+0x2e8>)
 80083e8:	2200      	movs	r2, #0
 80083ea:	4630      	mov	r0, r6
 80083ec:	4639      	mov	r1, r7
 80083ee:	f7f7 ff4b 	bl	8000288 <__aeabi_dsub>
 80083f2:	a365      	add	r3, pc, #404	; (adr r3, 8008588 <_dtoa_r+0x2b8>)
 80083f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f8:	f7f8 f8fe 	bl	80005f8 <__aeabi_dmul>
 80083fc:	a364      	add	r3, pc, #400	; (adr r3, 8008590 <_dtoa_r+0x2c0>)
 80083fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008402:	f7f7 ff43 	bl	800028c <__adddf3>
 8008406:	4606      	mov	r6, r0
 8008408:	4628      	mov	r0, r5
 800840a:	460f      	mov	r7, r1
 800840c:	f7f8 f88a 	bl	8000524 <__aeabi_i2d>
 8008410:	a361      	add	r3, pc, #388	; (adr r3, 8008598 <_dtoa_r+0x2c8>)
 8008412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008416:	f7f8 f8ef 	bl	80005f8 <__aeabi_dmul>
 800841a:	4602      	mov	r2, r0
 800841c:	460b      	mov	r3, r1
 800841e:	4630      	mov	r0, r6
 8008420:	4639      	mov	r1, r7
 8008422:	f7f7 ff33 	bl	800028c <__adddf3>
 8008426:	4606      	mov	r6, r0
 8008428:	460f      	mov	r7, r1
 800842a:	f7f8 fb95 	bl	8000b58 <__aeabi_d2iz>
 800842e:	2200      	movs	r2, #0
 8008430:	9000      	str	r0, [sp, #0]
 8008432:	2300      	movs	r3, #0
 8008434:	4630      	mov	r0, r6
 8008436:	4639      	mov	r1, r7
 8008438:	f7f8 fb50 	bl	8000adc <__aeabi_dcmplt>
 800843c:	b150      	cbz	r0, 8008454 <_dtoa_r+0x184>
 800843e:	9800      	ldr	r0, [sp, #0]
 8008440:	f7f8 f870 	bl	8000524 <__aeabi_i2d>
 8008444:	4632      	mov	r2, r6
 8008446:	463b      	mov	r3, r7
 8008448:	f7f8 fb3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800844c:	b910      	cbnz	r0, 8008454 <_dtoa_r+0x184>
 800844e:	9b00      	ldr	r3, [sp, #0]
 8008450:	3b01      	subs	r3, #1
 8008452:	9300      	str	r3, [sp, #0]
 8008454:	9b00      	ldr	r3, [sp, #0]
 8008456:	2b16      	cmp	r3, #22
 8008458:	d85a      	bhi.n	8008510 <_dtoa_r+0x240>
 800845a:	9a00      	ldr	r2, [sp, #0]
 800845c:	4b57      	ldr	r3, [pc, #348]	; (80085bc <_dtoa_r+0x2ec>)
 800845e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008466:	ec51 0b19 	vmov	r0, r1, d9
 800846a:	f7f8 fb37 	bl	8000adc <__aeabi_dcmplt>
 800846e:	2800      	cmp	r0, #0
 8008470:	d050      	beq.n	8008514 <_dtoa_r+0x244>
 8008472:	9b00      	ldr	r3, [sp, #0]
 8008474:	3b01      	subs	r3, #1
 8008476:	9300      	str	r3, [sp, #0]
 8008478:	2300      	movs	r3, #0
 800847a:	930b      	str	r3, [sp, #44]	; 0x2c
 800847c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800847e:	1b5d      	subs	r5, r3, r5
 8008480:	1e6b      	subs	r3, r5, #1
 8008482:	9305      	str	r3, [sp, #20]
 8008484:	bf45      	ittet	mi
 8008486:	f1c5 0301 	rsbmi	r3, r5, #1
 800848a:	9304      	strmi	r3, [sp, #16]
 800848c:	2300      	movpl	r3, #0
 800848e:	2300      	movmi	r3, #0
 8008490:	bf4c      	ite	mi
 8008492:	9305      	strmi	r3, [sp, #20]
 8008494:	9304      	strpl	r3, [sp, #16]
 8008496:	9b00      	ldr	r3, [sp, #0]
 8008498:	2b00      	cmp	r3, #0
 800849a:	db3d      	blt.n	8008518 <_dtoa_r+0x248>
 800849c:	9b05      	ldr	r3, [sp, #20]
 800849e:	9a00      	ldr	r2, [sp, #0]
 80084a0:	920a      	str	r2, [sp, #40]	; 0x28
 80084a2:	4413      	add	r3, r2
 80084a4:	9305      	str	r3, [sp, #20]
 80084a6:	2300      	movs	r3, #0
 80084a8:	9307      	str	r3, [sp, #28]
 80084aa:	9b06      	ldr	r3, [sp, #24]
 80084ac:	2b09      	cmp	r3, #9
 80084ae:	f200 8089 	bhi.w	80085c4 <_dtoa_r+0x2f4>
 80084b2:	2b05      	cmp	r3, #5
 80084b4:	bfc4      	itt	gt
 80084b6:	3b04      	subgt	r3, #4
 80084b8:	9306      	strgt	r3, [sp, #24]
 80084ba:	9b06      	ldr	r3, [sp, #24]
 80084bc:	f1a3 0302 	sub.w	r3, r3, #2
 80084c0:	bfcc      	ite	gt
 80084c2:	2500      	movgt	r5, #0
 80084c4:	2501      	movle	r5, #1
 80084c6:	2b03      	cmp	r3, #3
 80084c8:	f200 8087 	bhi.w	80085da <_dtoa_r+0x30a>
 80084cc:	e8df f003 	tbb	[pc, r3]
 80084d0:	59383a2d 	.word	0x59383a2d
 80084d4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80084d8:	441d      	add	r5, r3
 80084da:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80084de:	2b20      	cmp	r3, #32
 80084e0:	bfc1      	itttt	gt
 80084e2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80084e6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80084ea:	fa0b f303 	lslgt.w	r3, fp, r3
 80084ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 80084f2:	bfda      	itte	le
 80084f4:	f1c3 0320 	rsble	r3, r3, #32
 80084f8:	fa06 f003 	lslle.w	r0, r6, r3
 80084fc:	4318      	orrgt	r0, r3
 80084fe:	f7f8 f801 	bl	8000504 <__aeabi_ui2d>
 8008502:	2301      	movs	r3, #1
 8008504:	4606      	mov	r6, r0
 8008506:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800850a:	3d01      	subs	r5, #1
 800850c:	930e      	str	r3, [sp, #56]	; 0x38
 800850e:	e76a      	b.n	80083e6 <_dtoa_r+0x116>
 8008510:	2301      	movs	r3, #1
 8008512:	e7b2      	b.n	800847a <_dtoa_r+0x1aa>
 8008514:	900b      	str	r0, [sp, #44]	; 0x2c
 8008516:	e7b1      	b.n	800847c <_dtoa_r+0x1ac>
 8008518:	9b04      	ldr	r3, [sp, #16]
 800851a:	9a00      	ldr	r2, [sp, #0]
 800851c:	1a9b      	subs	r3, r3, r2
 800851e:	9304      	str	r3, [sp, #16]
 8008520:	4253      	negs	r3, r2
 8008522:	9307      	str	r3, [sp, #28]
 8008524:	2300      	movs	r3, #0
 8008526:	930a      	str	r3, [sp, #40]	; 0x28
 8008528:	e7bf      	b.n	80084aa <_dtoa_r+0x1da>
 800852a:	2300      	movs	r3, #0
 800852c:	9308      	str	r3, [sp, #32]
 800852e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008530:	2b00      	cmp	r3, #0
 8008532:	dc55      	bgt.n	80085e0 <_dtoa_r+0x310>
 8008534:	2301      	movs	r3, #1
 8008536:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800853a:	461a      	mov	r2, r3
 800853c:	9209      	str	r2, [sp, #36]	; 0x24
 800853e:	e00c      	b.n	800855a <_dtoa_r+0x28a>
 8008540:	2301      	movs	r3, #1
 8008542:	e7f3      	b.n	800852c <_dtoa_r+0x25c>
 8008544:	2300      	movs	r3, #0
 8008546:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008548:	9308      	str	r3, [sp, #32]
 800854a:	9b00      	ldr	r3, [sp, #0]
 800854c:	4413      	add	r3, r2
 800854e:	9302      	str	r3, [sp, #8]
 8008550:	3301      	adds	r3, #1
 8008552:	2b01      	cmp	r3, #1
 8008554:	9303      	str	r3, [sp, #12]
 8008556:	bfb8      	it	lt
 8008558:	2301      	movlt	r3, #1
 800855a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800855c:	2200      	movs	r2, #0
 800855e:	6042      	str	r2, [r0, #4]
 8008560:	2204      	movs	r2, #4
 8008562:	f102 0614 	add.w	r6, r2, #20
 8008566:	429e      	cmp	r6, r3
 8008568:	6841      	ldr	r1, [r0, #4]
 800856a:	d93d      	bls.n	80085e8 <_dtoa_r+0x318>
 800856c:	4620      	mov	r0, r4
 800856e:	f001 fa4d 	bl	8009a0c <_Balloc>
 8008572:	9001      	str	r0, [sp, #4]
 8008574:	2800      	cmp	r0, #0
 8008576:	d13b      	bne.n	80085f0 <_dtoa_r+0x320>
 8008578:	4b11      	ldr	r3, [pc, #68]	; (80085c0 <_dtoa_r+0x2f0>)
 800857a:	4602      	mov	r2, r0
 800857c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008580:	e6c0      	b.n	8008304 <_dtoa_r+0x34>
 8008582:	2301      	movs	r3, #1
 8008584:	e7df      	b.n	8008546 <_dtoa_r+0x276>
 8008586:	bf00      	nop
 8008588:	636f4361 	.word	0x636f4361
 800858c:	3fd287a7 	.word	0x3fd287a7
 8008590:	8b60c8b3 	.word	0x8b60c8b3
 8008594:	3fc68a28 	.word	0x3fc68a28
 8008598:	509f79fb 	.word	0x509f79fb
 800859c:	3fd34413 	.word	0x3fd34413
 80085a0:	0800b6a6 	.word	0x0800b6a6
 80085a4:	0800b6bd 	.word	0x0800b6bd
 80085a8:	7ff00000 	.word	0x7ff00000
 80085ac:	0800b6a2 	.word	0x0800b6a2
 80085b0:	0800b699 	.word	0x0800b699
 80085b4:	0800b519 	.word	0x0800b519
 80085b8:	3ff80000 	.word	0x3ff80000
 80085bc:	0800b890 	.word	0x0800b890
 80085c0:	0800b718 	.word	0x0800b718
 80085c4:	2501      	movs	r5, #1
 80085c6:	2300      	movs	r3, #0
 80085c8:	9306      	str	r3, [sp, #24]
 80085ca:	9508      	str	r5, [sp, #32]
 80085cc:	f04f 33ff 	mov.w	r3, #4294967295
 80085d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80085d4:	2200      	movs	r2, #0
 80085d6:	2312      	movs	r3, #18
 80085d8:	e7b0      	b.n	800853c <_dtoa_r+0x26c>
 80085da:	2301      	movs	r3, #1
 80085dc:	9308      	str	r3, [sp, #32]
 80085de:	e7f5      	b.n	80085cc <_dtoa_r+0x2fc>
 80085e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80085e6:	e7b8      	b.n	800855a <_dtoa_r+0x28a>
 80085e8:	3101      	adds	r1, #1
 80085ea:	6041      	str	r1, [r0, #4]
 80085ec:	0052      	lsls	r2, r2, #1
 80085ee:	e7b8      	b.n	8008562 <_dtoa_r+0x292>
 80085f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085f2:	9a01      	ldr	r2, [sp, #4]
 80085f4:	601a      	str	r2, [r3, #0]
 80085f6:	9b03      	ldr	r3, [sp, #12]
 80085f8:	2b0e      	cmp	r3, #14
 80085fa:	f200 809d 	bhi.w	8008738 <_dtoa_r+0x468>
 80085fe:	2d00      	cmp	r5, #0
 8008600:	f000 809a 	beq.w	8008738 <_dtoa_r+0x468>
 8008604:	9b00      	ldr	r3, [sp, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	dd32      	ble.n	8008670 <_dtoa_r+0x3a0>
 800860a:	4ab7      	ldr	r2, [pc, #732]	; (80088e8 <_dtoa_r+0x618>)
 800860c:	f003 030f 	and.w	r3, r3, #15
 8008610:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008614:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008618:	9b00      	ldr	r3, [sp, #0]
 800861a:	05d8      	lsls	r0, r3, #23
 800861c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008620:	d516      	bpl.n	8008650 <_dtoa_r+0x380>
 8008622:	4bb2      	ldr	r3, [pc, #712]	; (80088ec <_dtoa_r+0x61c>)
 8008624:	ec51 0b19 	vmov	r0, r1, d9
 8008628:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800862c:	f7f8 f90e 	bl	800084c <__aeabi_ddiv>
 8008630:	f007 070f 	and.w	r7, r7, #15
 8008634:	4682      	mov	sl, r0
 8008636:	468b      	mov	fp, r1
 8008638:	2503      	movs	r5, #3
 800863a:	4eac      	ldr	r6, [pc, #688]	; (80088ec <_dtoa_r+0x61c>)
 800863c:	b957      	cbnz	r7, 8008654 <_dtoa_r+0x384>
 800863e:	4642      	mov	r2, r8
 8008640:	464b      	mov	r3, r9
 8008642:	4650      	mov	r0, sl
 8008644:	4659      	mov	r1, fp
 8008646:	f7f8 f901 	bl	800084c <__aeabi_ddiv>
 800864a:	4682      	mov	sl, r0
 800864c:	468b      	mov	fp, r1
 800864e:	e028      	b.n	80086a2 <_dtoa_r+0x3d2>
 8008650:	2502      	movs	r5, #2
 8008652:	e7f2      	b.n	800863a <_dtoa_r+0x36a>
 8008654:	07f9      	lsls	r1, r7, #31
 8008656:	d508      	bpl.n	800866a <_dtoa_r+0x39a>
 8008658:	4640      	mov	r0, r8
 800865a:	4649      	mov	r1, r9
 800865c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008660:	f7f7 ffca 	bl	80005f8 <__aeabi_dmul>
 8008664:	3501      	adds	r5, #1
 8008666:	4680      	mov	r8, r0
 8008668:	4689      	mov	r9, r1
 800866a:	107f      	asrs	r7, r7, #1
 800866c:	3608      	adds	r6, #8
 800866e:	e7e5      	b.n	800863c <_dtoa_r+0x36c>
 8008670:	f000 809b 	beq.w	80087aa <_dtoa_r+0x4da>
 8008674:	9b00      	ldr	r3, [sp, #0]
 8008676:	4f9d      	ldr	r7, [pc, #628]	; (80088ec <_dtoa_r+0x61c>)
 8008678:	425e      	negs	r6, r3
 800867a:	4b9b      	ldr	r3, [pc, #620]	; (80088e8 <_dtoa_r+0x618>)
 800867c:	f006 020f 	and.w	r2, r6, #15
 8008680:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008688:	ec51 0b19 	vmov	r0, r1, d9
 800868c:	f7f7 ffb4 	bl	80005f8 <__aeabi_dmul>
 8008690:	1136      	asrs	r6, r6, #4
 8008692:	4682      	mov	sl, r0
 8008694:	468b      	mov	fp, r1
 8008696:	2300      	movs	r3, #0
 8008698:	2502      	movs	r5, #2
 800869a:	2e00      	cmp	r6, #0
 800869c:	d17a      	bne.n	8008794 <_dtoa_r+0x4c4>
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1d3      	bne.n	800864a <_dtoa_r+0x37a>
 80086a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	f000 8082 	beq.w	80087ae <_dtoa_r+0x4de>
 80086aa:	4b91      	ldr	r3, [pc, #580]	; (80088f0 <_dtoa_r+0x620>)
 80086ac:	2200      	movs	r2, #0
 80086ae:	4650      	mov	r0, sl
 80086b0:	4659      	mov	r1, fp
 80086b2:	f7f8 fa13 	bl	8000adc <__aeabi_dcmplt>
 80086b6:	2800      	cmp	r0, #0
 80086b8:	d079      	beq.n	80087ae <_dtoa_r+0x4de>
 80086ba:	9b03      	ldr	r3, [sp, #12]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d076      	beq.n	80087ae <_dtoa_r+0x4de>
 80086c0:	9b02      	ldr	r3, [sp, #8]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	dd36      	ble.n	8008734 <_dtoa_r+0x464>
 80086c6:	9b00      	ldr	r3, [sp, #0]
 80086c8:	4650      	mov	r0, sl
 80086ca:	4659      	mov	r1, fp
 80086cc:	1e5f      	subs	r7, r3, #1
 80086ce:	2200      	movs	r2, #0
 80086d0:	4b88      	ldr	r3, [pc, #544]	; (80088f4 <_dtoa_r+0x624>)
 80086d2:	f7f7 ff91 	bl	80005f8 <__aeabi_dmul>
 80086d6:	9e02      	ldr	r6, [sp, #8]
 80086d8:	4682      	mov	sl, r0
 80086da:	468b      	mov	fp, r1
 80086dc:	3501      	adds	r5, #1
 80086de:	4628      	mov	r0, r5
 80086e0:	f7f7 ff20 	bl	8000524 <__aeabi_i2d>
 80086e4:	4652      	mov	r2, sl
 80086e6:	465b      	mov	r3, fp
 80086e8:	f7f7 ff86 	bl	80005f8 <__aeabi_dmul>
 80086ec:	4b82      	ldr	r3, [pc, #520]	; (80088f8 <_dtoa_r+0x628>)
 80086ee:	2200      	movs	r2, #0
 80086f0:	f7f7 fdcc 	bl	800028c <__adddf3>
 80086f4:	46d0      	mov	r8, sl
 80086f6:	46d9      	mov	r9, fp
 80086f8:	4682      	mov	sl, r0
 80086fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80086fe:	2e00      	cmp	r6, #0
 8008700:	d158      	bne.n	80087b4 <_dtoa_r+0x4e4>
 8008702:	4b7e      	ldr	r3, [pc, #504]	; (80088fc <_dtoa_r+0x62c>)
 8008704:	2200      	movs	r2, #0
 8008706:	4640      	mov	r0, r8
 8008708:	4649      	mov	r1, r9
 800870a:	f7f7 fdbd 	bl	8000288 <__aeabi_dsub>
 800870e:	4652      	mov	r2, sl
 8008710:	465b      	mov	r3, fp
 8008712:	4680      	mov	r8, r0
 8008714:	4689      	mov	r9, r1
 8008716:	f7f8 f9ff 	bl	8000b18 <__aeabi_dcmpgt>
 800871a:	2800      	cmp	r0, #0
 800871c:	f040 8295 	bne.w	8008c4a <_dtoa_r+0x97a>
 8008720:	4652      	mov	r2, sl
 8008722:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008726:	4640      	mov	r0, r8
 8008728:	4649      	mov	r1, r9
 800872a:	f7f8 f9d7 	bl	8000adc <__aeabi_dcmplt>
 800872e:	2800      	cmp	r0, #0
 8008730:	f040 8289 	bne.w	8008c46 <_dtoa_r+0x976>
 8008734:	ec5b ab19 	vmov	sl, fp, d9
 8008738:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800873a:	2b00      	cmp	r3, #0
 800873c:	f2c0 8148 	blt.w	80089d0 <_dtoa_r+0x700>
 8008740:	9a00      	ldr	r2, [sp, #0]
 8008742:	2a0e      	cmp	r2, #14
 8008744:	f300 8144 	bgt.w	80089d0 <_dtoa_r+0x700>
 8008748:	4b67      	ldr	r3, [pc, #412]	; (80088e8 <_dtoa_r+0x618>)
 800874a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800874e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008754:	2b00      	cmp	r3, #0
 8008756:	f280 80d5 	bge.w	8008904 <_dtoa_r+0x634>
 800875a:	9b03      	ldr	r3, [sp, #12]
 800875c:	2b00      	cmp	r3, #0
 800875e:	f300 80d1 	bgt.w	8008904 <_dtoa_r+0x634>
 8008762:	f040 826f 	bne.w	8008c44 <_dtoa_r+0x974>
 8008766:	4b65      	ldr	r3, [pc, #404]	; (80088fc <_dtoa_r+0x62c>)
 8008768:	2200      	movs	r2, #0
 800876a:	4640      	mov	r0, r8
 800876c:	4649      	mov	r1, r9
 800876e:	f7f7 ff43 	bl	80005f8 <__aeabi_dmul>
 8008772:	4652      	mov	r2, sl
 8008774:	465b      	mov	r3, fp
 8008776:	f7f8 f9c5 	bl	8000b04 <__aeabi_dcmpge>
 800877a:	9e03      	ldr	r6, [sp, #12]
 800877c:	4637      	mov	r7, r6
 800877e:	2800      	cmp	r0, #0
 8008780:	f040 8245 	bne.w	8008c0e <_dtoa_r+0x93e>
 8008784:	9d01      	ldr	r5, [sp, #4]
 8008786:	2331      	movs	r3, #49	; 0x31
 8008788:	f805 3b01 	strb.w	r3, [r5], #1
 800878c:	9b00      	ldr	r3, [sp, #0]
 800878e:	3301      	adds	r3, #1
 8008790:	9300      	str	r3, [sp, #0]
 8008792:	e240      	b.n	8008c16 <_dtoa_r+0x946>
 8008794:	07f2      	lsls	r2, r6, #31
 8008796:	d505      	bpl.n	80087a4 <_dtoa_r+0x4d4>
 8008798:	e9d7 2300 	ldrd	r2, r3, [r7]
 800879c:	f7f7 ff2c 	bl	80005f8 <__aeabi_dmul>
 80087a0:	3501      	adds	r5, #1
 80087a2:	2301      	movs	r3, #1
 80087a4:	1076      	asrs	r6, r6, #1
 80087a6:	3708      	adds	r7, #8
 80087a8:	e777      	b.n	800869a <_dtoa_r+0x3ca>
 80087aa:	2502      	movs	r5, #2
 80087ac:	e779      	b.n	80086a2 <_dtoa_r+0x3d2>
 80087ae:	9f00      	ldr	r7, [sp, #0]
 80087b0:	9e03      	ldr	r6, [sp, #12]
 80087b2:	e794      	b.n	80086de <_dtoa_r+0x40e>
 80087b4:	9901      	ldr	r1, [sp, #4]
 80087b6:	4b4c      	ldr	r3, [pc, #304]	; (80088e8 <_dtoa_r+0x618>)
 80087b8:	4431      	add	r1, r6
 80087ba:	910d      	str	r1, [sp, #52]	; 0x34
 80087bc:	9908      	ldr	r1, [sp, #32]
 80087be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80087c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80087c6:	2900      	cmp	r1, #0
 80087c8:	d043      	beq.n	8008852 <_dtoa_r+0x582>
 80087ca:	494d      	ldr	r1, [pc, #308]	; (8008900 <_dtoa_r+0x630>)
 80087cc:	2000      	movs	r0, #0
 80087ce:	f7f8 f83d 	bl	800084c <__aeabi_ddiv>
 80087d2:	4652      	mov	r2, sl
 80087d4:	465b      	mov	r3, fp
 80087d6:	f7f7 fd57 	bl	8000288 <__aeabi_dsub>
 80087da:	9d01      	ldr	r5, [sp, #4]
 80087dc:	4682      	mov	sl, r0
 80087de:	468b      	mov	fp, r1
 80087e0:	4649      	mov	r1, r9
 80087e2:	4640      	mov	r0, r8
 80087e4:	f7f8 f9b8 	bl	8000b58 <__aeabi_d2iz>
 80087e8:	4606      	mov	r6, r0
 80087ea:	f7f7 fe9b 	bl	8000524 <__aeabi_i2d>
 80087ee:	4602      	mov	r2, r0
 80087f0:	460b      	mov	r3, r1
 80087f2:	4640      	mov	r0, r8
 80087f4:	4649      	mov	r1, r9
 80087f6:	f7f7 fd47 	bl	8000288 <__aeabi_dsub>
 80087fa:	3630      	adds	r6, #48	; 0x30
 80087fc:	f805 6b01 	strb.w	r6, [r5], #1
 8008800:	4652      	mov	r2, sl
 8008802:	465b      	mov	r3, fp
 8008804:	4680      	mov	r8, r0
 8008806:	4689      	mov	r9, r1
 8008808:	f7f8 f968 	bl	8000adc <__aeabi_dcmplt>
 800880c:	2800      	cmp	r0, #0
 800880e:	d163      	bne.n	80088d8 <_dtoa_r+0x608>
 8008810:	4642      	mov	r2, r8
 8008812:	464b      	mov	r3, r9
 8008814:	4936      	ldr	r1, [pc, #216]	; (80088f0 <_dtoa_r+0x620>)
 8008816:	2000      	movs	r0, #0
 8008818:	f7f7 fd36 	bl	8000288 <__aeabi_dsub>
 800881c:	4652      	mov	r2, sl
 800881e:	465b      	mov	r3, fp
 8008820:	f7f8 f95c 	bl	8000adc <__aeabi_dcmplt>
 8008824:	2800      	cmp	r0, #0
 8008826:	f040 80b5 	bne.w	8008994 <_dtoa_r+0x6c4>
 800882a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800882c:	429d      	cmp	r5, r3
 800882e:	d081      	beq.n	8008734 <_dtoa_r+0x464>
 8008830:	4b30      	ldr	r3, [pc, #192]	; (80088f4 <_dtoa_r+0x624>)
 8008832:	2200      	movs	r2, #0
 8008834:	4650      	mov	r0, sl
 8008836:	4659      	mov	r1, fp
 8008838:	f7f7 fede 	bl	80005f8 <__aeabi_dmul>
 800883c:	4b2d      	ldr	r3, [pc, #180]	; (80088f4 <_dtoa_r+0x624>)
 800883e:	4682      	mov	sl, r0
 8008840:	468b      	mov	fp, r1
 8008842:	4640      	mov	r0, r8
 8008844:	4649      	mov	r1, r9
 8008846:	2200      	movs	r2, #0
 8008848:	f7f7 fed6 	bl	80005f8 <__aeabi_dmul>
 800884c:	4680      	mov	r8, r0
 800884e:	4689      	mov	r9, r1
 8008850:	e7c6      	b.n	80087e0 <_dtoa_r+0x510>
 8008852:	4650      	mov	r0, sl
 8008854:	4659      	mov	r1, fp
 8008856:	f7f7 fecf 	bl	80005f8 <__aeabi_dmul>
 800885a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800885c:	9d01      	ldr	r5, [sp, #4]
 800885e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008860:	4682      	mov	sl, r0
 8008862:	468b      	mov	fp, r1
 8008864:	4649      	mov	r1, r9
 8008866:	4640      	mov	r0, r8
 8008868:	f7f8 f976 	bl	8000b58 <__aeabi_d2iz>
 800886c:	4606      	mov	r6, r0
 800886e:	f7f7 fe59 	bl	8000524 <__aeabi_i2d>
 8008872:	3630      	adds	r6, #48	; 0x30
 8008874:	4602      	mov	r2, r0
 8008876:	460b      	mov	r3, r1
 8008878:	4640      	mov	r0, r8
 800887a:	4649      	mov	r1, r9
 800887c:	f7f7 fd04 	bl	8000288 <__aeabi_dsub>
 8008880:	f805 6b01 	strb.w	r6, [r5], #1
 8008884:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008886:	429d      	cmp	r5, r3
 8008888:	4680      	mov	r8, r0
 800888a:	4689      	mov	r9, r1
 800888c:	f04f 0200 	mov.w	r2, #0
 8008890:	d124      	bne.n	80088dc <_dtoa_r+0x60c>
 8008892:	4b1b      	ldr	r3, [pc, #108]	; (8008900 <_dtoa_r+0x630>)
 8008894:	4650      	mov	r0, sl
 8008896:	4659      	mov	r1, fp
 8008898:	f7f7 fcf8 	bl	800028c <__adddf3>
 800889c:	4602      	mov	r2, r0
 800889e:	460b      	mov	r3, r1
 80088a0:	4640      	mov	r0, r8
 80088a2:	4649      	mov	r1, r9
 80088a4:	f7f8 f938 	bl	8000b18 <__aeabi_dcmpgt>
 80088a8:	2800      	cmp	r0, #0
 80088aa:	d173      	bne.n	8008994 <_dtoa_r+0x6c4>
 80088ac:	4652      	mov	r2, sl
 80088ae:	465b      	mov	r3, fp
 80088b0:	4913      	ldr	r1, [pc, #76]	; (8008900 <_dtoa_r+0x630>)
 80088b2:	2000      	movs	r0, #0
 80088b4:	f7f7 fce8 	bl	8000288 <__aeabi_dsub>
 80088b8:	4602      	mov	r2, r0
 80088ba:	460b      	mov	r3, r1
 80088bc:	4640      	mov	r0, r8
 80088be:	4649      	mov	r1, r9
 80088c0:	f7f8 f90c 	bl	8000adc <__aeabi_dcmplt>
 80088c4:	2800      	cmp	r0, #0
 80088c6:	f43f af35 	beq.w	8008734 <_dtoa_r+0x464>
 80088ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80088cc:	1e6b      	subs	r3, r5, #1
 80088ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80088d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80088d4:	2b30      	cmp	r3, #48	; 0x30
 80088d6:	d0f8      	beq.n	80088ca <_dtoa_r+0x5fa>
 80088d8:	9700      	str	r7, [sp, #0]
 80088da:	e049      	b.n	8008970 <_dtoa_r+0x6a0>
 80088dc:	4b05      	ldr	r3, [pc, #20]	; (80088f4 <_dtoa_r+0x624>)
 80088de:	f7f7 fe8b 	bl	80005f8 <__aeabi_dmul>
 80088e2:	4680      	mov	r8, r0
 80088e4:	4689      	mov	r9, r1
 80088e6:	e7bd      	b.n	8008864 <_dtoa_r+0x594>
 80088e8:	0800b890 	.word	0x0800b890
 80088ec:	0800b868 	.word	0x0800b868
 80088f0:	3ff00000 	.word	0x3ff00000
 80088f4:	40240000 	.word	0x40240000
 80088f8:	401c0000 	.word	0x401c0000
 80088fc:	40140000 	.word	0x40140000
 8008900:	3fe00000 	.word	0x3fe00000
 8008904:	9d01      	ldr	r5, [sp, #4]
 8008906:	4656      	mov	r6, sl
 8008908:	465f      	mov	r7, fp
 800890a:	4642      	mov	r2, r8
 800890c:	464b      	mov	r3, r9
 800890e:	4630      	mov	r0, r6
 8008910:	4639      	mov	r1, r7
 8008912:	f7f7 ff9b 	bl	800084c <__aeabi_ddiv>
 8008916:	f7f8 f91f 	bl	8000b58 <__aeabi_d2iz>
 800891a:	4682      	mov	sl, r0
 800891c:	f7f7 fe02 	bl	8000524 <__aeabi_i2d>
 8008920:	4642      	mov	r2, r8
 8008922:	464b      	mov	r3, r9
 8008924:	f7f7 fe68 	bl	80005f8 <__aeabi_dmul>
 8008928:	4602      	mov	r2, r0
 800892a:	460b      	mov	r3, r1
 800892c:	4630      	mov	r0, r6
 800892e:	4639      	mov	r1, r7
 8008930:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008934:	f7f7 fca8 	bl	8000288 <__aeabi_dsub>
 8008938:	f805 6b01 	strb.w	r6, [r5], #1
 800893c:	9e01      	ldr	r6, [sp, #4]
 800893e:	9f03      	ldr	r7, [sp, #12]
 8008940:	1bae      	subs	r6, r5, r6
 8008942:	42b7      	cmp	r7, r6
 8008944:	4602      	mov	r2, r0
 8008946:	460b      	mov	r3, r1
 8008948:	d135      	bne.n	80089b6 <_dtoa_r+0x6e6>
 800894a:	f7f7 fc9f 	bl	800028c <__adddf3>
 800894e:	4642      	mov	r2, r8
 8008950:	464b      	mov	r3, r9
 8008952:	4606      	mov	r6, r0
 8008954:	460f      	mov	r7, r1
 8008956:	f7f8 f8df 	bl	8000b18 <__aeabi_dcmpgt>
 800895a:	b9d0      	cbnz	r0, 8008992 <_dtoa_r+0x6c2>
 800895c:	4642      	mov	r2, r8
 800895e:	464b      	mov	r3, r9
 8008960:	4630      	mov	r0, r6
 8008962:	4639      	mov	r1, r7
 8008964:	f7f8 f8b0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008968:	b110      	cbz	r0, 8008970 <_dtoa_r+0x6a0>
 800896a:	f01a 0f01 	tst.w	sl, #1
 800896e:	d110      	bne.n	8008992 <_dtoa_r+0x6c2>
 8008970:	4620      	mov	r0, r4
 8008972:	ee18 1a10 	vmov	r1, s16
 8008976:	f001 f889 	bl	8009a8c <_Bfree>
 800897a:	2300      	movs	r3, #0
 800897c:	9800      	ldr	r0, [sp, #0]
 800897e:	702b      	strb	r3, [r5, #0]
 8008980:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008982:	3001      	adds	r0, #1
 8008984:	6018      	str	r0, [r3, #0]
 8008986:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008988:	2b00      	cmp	r3, #0
 800898a:	f43f acf1 	beq.w	8008370 <_dtoa_r+0xa0>
 800898e:	601d      	str	r5, [r3, #0]
 8008990:	e4ee      	b.n	8008370 <_dtoa_r+0xa0>
 8008992:	9f00      	ldr	r7, [sp, #0]
 8008994:	462b      	mov	r3, r5
 8008996:	461d      	mov	r5, r3
 8008998:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800899c:	2a39      	cmp	r2, #57	; 0x39
 800899e:	d106      	bne.n	80089ae <_dtoa_r+0x6de>
 80089a0:	9a01      	ldr	r2, [sp, #4]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d1f7      	bne.n	8008996 <_dtoa_r+0x6c6>
 80089a6:	9901      	ldr	r1, [sp, #4]
 80089a8:	2230      	movs	r2, #48	; 0x30
 80089aa:	3701      	adds	r7, #1
 80089ac:	700a      	strb	r2, [r1, #0]
 80089ae:	781a      	ldrb	r2, [r3, #0]
 80089b0:	3201      	adds	r2, #1
 80089b2:	701a      	strb	r2, [r3, #0]
 80089b4:	e790      	b.n	80088d8 <_dtoa_r+0x608>
 80089b6:	4ba6      	ldr	r3, [pc, #664]	; (8008c50 <_dtoa_r+0x980>)
 80089b8:	2200      	movs	r2, #0
 80089ba:	f7f7 fe1d 	bl	80005f8 <__aeabi_dmul>
 80089be:	2200      	movs	r2, #0
 80089c0:	2300      	movs	r3, #0
 80089c2:	4606      	mov	r6, r0
 80089c4:	460f      	mov	r7, r1
 80089c6:	f7f8 f87f 	bl	8000ac8 <__aeabi_dcmpeq>
 80089ca:	2800      	cmp	r0, #0
 80089cc:	d09d      	beq.n	800890a <_dtoa_r+0x63a>
 80089ce:	e7cf      	b.n	8008970 <_dtoa_r+0x6a0>
 80089d0:	9a08      	ldr	r2, [sp, #32]
 80089d2:	2a00      	cmp	r2, #0
 80089d4:	f000 80d7 	beq.w	8008b86 <_dtoa_r+0x8b6>
 80089d8:	9a06      	ldr	r2, [sp, #24]
 80089da:	2a01      	cmp	r2, #1
 80089dc:	f300 80ba 	bgt.w	8008b54 <_dtoa_r+0x884>
 80089e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089e2:	2a00      	cmp	r2, #0
 80089e4:	f000 80b2 	beq.w	8008b4c <_dtoa_r+0x87c>
 80089e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80089ec:	9e07      	ldr	r6, [sp, #28]
 80089ee:	9d04      	ldr	r5, [sp, #16]
 80089f0:	9a04      	ldr	r2, [sp, #16]
 80089f2:	441a      	add	r2, r3
 80089f4:	9204      	str	r2, [sp, #16]
 80089f6:	9a05      	ldr	r2, [sp, #20]
 80089f8:	2101      	movs	r1, #1
 80089fa:	441a      	add	r2, r3
 80089fc:	4620      	mov	r0, r4
 80089fe:	9205      	str	r2, [sp, #20]
 8008a00:	f001 f946 	bl	8009c90 <__i2b>
 8008a04:	4607      	mov	r7, r0
 8008a06:	2d00      	cmp	r5, #0
 8008a08:	dd0c      	ble.n	8008a24 <_dtoa_r+0x754>
 8008a0a:	9b05      	ldr	r3, [sp, #20]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	dd09      	ble.n	8008a24 <_dtoa_r+0x754>
 8008a10:	42ab      	cmp	r3, r5
 8008a12:	9a04      	ldr	r2, [sp, #16]
 8008a14:	bfa8      	it	ge
 8008a16:	462b      	movge	r3, r5
 8008a18:	1ad2      	subs	r2, r2, r3
 8008a1a:	9204      	str	r2, [sp, #16]
 8008a1c:	9a05      	ldr	r2, [sp, #20]
 8008a1e:	1aed      	subs	r5, r5, r3
 8008a20:	1ad3      	subs	r3, r2, r3
 8008a22:	9305      	str	r3, [sp, #20]
 8008a24:	9b07      	ldr	r3, [sp, #28]
 8008a26:	b31b      	cbz	r3, 8008a70 <_dtoa_r+0x7a0>
 8008a28:	9b08      	ldr	r3, [sp, #32]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	f000 80af 	beq.w	8008b8e <_dtoa_r+0x8be>
 8008a30:	2e00      	cmp	r6, #0
 8008a32:	dd13      	ble.n	8008a5c <_dtoa_r+0x78c>
 8008a34:	4639      	mov	r1, r7
 8008a36:	4632      	mov	r2, r6
 8008a38:	4620      	mov	r0, r4
 8008a3a:	f001 f9e9 	bl	8009e10 <__pow5mult>
 8008a3e:	ee18 2a10 	vmov	r2, s16
 8008a42:	4601      	mov	r1, r0
 8008a44:	4607      	mov	r7, r0
 8008a46:	4620      	mov	r0, r4
 8008a48:	f001 f938 	bl	8009cbc <__multiply>
 8008a4c:	ee18 1a10 	vmov	r1, s16
 8008a50:	4680      	mov	r8, r0
 8008a52:	4620      	mov	r0, r4
 8008a54:	f001 f81a 	bl	8009a8c <_Bfree>
 8008a58:	ee08 8a10 	vmov	s16, r8
 8008a5c:	9b07      	ldr	r3, [sp, #28]
 8008a5e:	1b9a      	subs	r2, r3, r6
 8008a60:	d006      	beq.n	8008a70 <_dtoa_r+0x7a0>
 8008a62:	ee18 1a10 	vmov	r1, s16
 8008a66:	4620      	mov	r0, r4
 8008a68:	f001 f9d2 	bl	8009e10 <__pow5mult>
 8008a6c:	ee08 0a10 	vmov	s16, r0
 8008a70:	2101      	movs	r1, #1
 8008a72:	4620      	mov	r0, r4
 8008a74:	f001 f90c 	bl	8009c90 <__i2b>
 8008a78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	4606      	mov	r6, r0
 8008a7e:	f340 8088 	ble.w	8008b92 <_dtoa_r+0x8c2>
 8008a82:	461a      	mov	r2, r3
 8008a84:	4601      	mov	r1, r0
 8008a86:	4620      	mov	r0, r4
 8008a88:	f001 f9c2 	bl	8009e10 <__pow5mult>
 8008a8c:	9b06      	ldr	r3, [sp, #24]
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	4606      	mov	r6, r0
 8008a92:	f340 8081 	ble.w	8008b98 <_dtoa_r+0x8c8>
 8008a96:	f04f 0800 	mov.w	r8, #0
 8008a9a:	6933      	ldr	r3, [r6, #16]
 8008a9c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008aa0:	6918      	ldr	r0, [r3, #16]
 8008aa2:	f001 f8a5 	bl	8009bf0 <__hi0bits>
 8008aa6:	f1c0 0020 	rsb	r0, r0, #32
 8008aaa:	9b05      	ldr	r3, [sp, #20]
 8008aac:	4418      	add	r0, r3
 8008aae:	f010 001f 	ands.w	r0, r0, #31
 8008ab2:	f000 8092 	beq.w	8008bda <_dtoa_r+0x90a>
 8008ab6:	f1c0 0320 	rsb	r3, r0, #32
 8008aba:	2b04      	cmp	r3, #4
 8008abc:	f340 808a 	ble.w	8008bd4 <_dtoa_r+0x904>
 8008ac0:	f1c0 001c 	rsb	r0, r0, #28
 8008ac4:	9b04      	ldr	r3, [sp, #16]
 8008ac6:	4403      	add	r3, r0
 8008ac8:	9304      	str	r3, [sp, #16]
 8008aca:	9b05      	ldr	r3, [sp, #20]
 8008acc:	4403      	add	r3, r0
 8008ace:	4405      	add	r5, r0
 8008ad0:	9305      	str	r3, [sp, #20]
 8008ad2:	9b04      	ldr	r3, [sp, #16]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	dd07      	ble.n	8008ae8 <_dtoa_r+0x818>
 8008ad8:	ee18 1a10 	vmov	r1, s16
 8008adc:	461a      	mov	r2, r3
 8008ade:	4620      	mov	r0, r4
 8008ae0:	f001 f9f0 	bl	8009ec4 <__lshift>
 8008ae4:	ee08 0a10 	vmov	s16, r0
 8008ae8:	9b05      	ldr	r3, [sp, #20]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	dd05      	ble.n	8008afa <_dtoa_r+0x82a>
 8008aee:	4631      	mov	r1, r6
 8008af0:	461a      	mov	r2, r3
 8008af2:	4620      	mov	r0, r4
 8008af4:	f001 f9e6 	bl	8009ec4 <__lshift>
 8008af8:	4606      	mov	r6, r0
 8008afa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d06e      	beq.n	8008bde <_dtoa_r+0x90e>
 8008b00:	ee18 0a10 	vmov	r0, s16
 8008b04:	4631      	mov	r1, r6
 8008b06:	f001 fa4d 	bl	8009fa4 <__mcmp>
 8008b0a:	2800      	cmp	r0, #0
 8008b0c:	da67      	bge.n	8008bde <_dtoa_r+0x90e>
 8008b0e:	9b00      	ldr	r3, [sp, #0]
 8008b10:	3b01      	subs	r3, #1
 8008b12:	ee18 1a10 	vmov	r1, s16
 8008b16:	9300      	str	r3, [sp, #0]
 8008b18:	220a      	movs	r2, #10
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	f000 ffd7 	bl	8009ad0 <__multadd>
 8008b22:	9b08      	ldr	r3, [sp, #32]
 8008b24:	ee08 0a10 	vmov	s16, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	f000 81b1 	beq.w	8008e90 <_dtoa_r+0xbc0>
 8008b2e:	2300      	movs	r3, #0
 8008b30:	4639      	mov	r1, r7
 8008b32:	220a      	movs	r2, #10
 8008b34:	4620      	mov	r0, r4
 8008b36:	f000 ffcb 	bl	8009ad0 <__multadd>
 8008b3a:	9b02      	ldr	r3, [sp, #8]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	4607      	mov	r7, r0
 8008b40:	f300 808e 	bgt.w	8008c60 <_dtoa_r+0x990>
 8008b44:	9b06      	ldr	r3, [sp, #24]
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	dc51      	bgt.n	8008bee <_dtoa_r+0x91e>
 8008b4a:	e089      	b.n	8008c60 <_dtoa_r+0x990>
 8008b4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008b52:	e74b      	b.n	80089ec <_dtoa_r+0x71c>
 8008b54:	9b03      	ldr	r3, [sp, #12]
 8008b56:	1e5e      	subs	r6, r3, #1
 8008b58:	9b07      	ldr	r3, [sp, #28]
 8008b5a:	42b3      	cmp	r3, r6
 8008b5c:	bfbf      	itttt	lt
 8008b5e:	9b07      	ldrlt	r3, [sp, #28]
 8008b60:	9607      	strlt	r6, [sp, #28]
 8008b62:	1af2      	sublt	r2, r6, r3
 8008b64:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008b66:	bfb6      	itet	lt
 8008b68:	189b      	addlt	r3, r3, r2
 8008b6a:	1b9e      	subge	r6, r3, r6
 8008b6c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008b6e:	9b03      	ldr	r3, [sp, #12]
 8008b70:	bfb8      	it	lt
 8008b72:	2600      	movlt	r6, #0
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	bfb7      	itett	lt
 8008b78:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008b7c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008b80:	1a9d      	sublt	r5, r3, r2
 8008b82:	2300      	movlt	r3, #0
 8008b84:	e734      	b.n	80089f0 <_dtoa_r+0x720>
 8008b86:	9e07      	ldr	r6, [sp, #28]
 8008b88:	9d04      	ldr	r5, [sp, #16]
 8008b8a:	9f08      	ldr	r7, [sp, #32]
 8008b8c:	e73b      	b.n	8008a06 <_dtoa_r+0x736>
 8008b8e:	9a07      	ldr	r2, [sp, #28]
 8008b90:	e767      	b.n	8008a62 <_dtoa_r+0x792>
 8008b92:	9b06      	ldr	r3, [sp, #24]
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	dc18      	bgt.n	8008bca <_dtoa_r+0x8fa>
 8008b98:	f1ba 0f00 	cmp.w	sl, #0
 8008b9c:	d115      	bne.n	8008bca <_dtoa_r+0x8fa>
 8008b9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008ba2:	b993      	cbnz	r3, 8008bca <_dtoa_r+0x8fa>
 8008ba4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008ba8:	0d1b      	lsrs	r3, r3, #20
 8008baa:	051b      	lsls	r3, r3, #20
 8008bac:	b183      	cbz	r3, 8008bd0 <_dtoa_r+0x900>
 8008bae:	9b04      	ldr	r3, [sp, #16]
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	9304      	str	r3, [sp, #16]
 8008bb4:	9b05      	ldr	r3, [sp, #20]
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	9305      	str	r3, [sp, #20]
 8008bba:	f04f 0801 	mov.w	r8, #1
 8008bbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	f47f af6a 	bne.w	8008a9a <_dtoa_r+0x7ca>
 8008bc6:	2001      	movs	r0, #1
 8008bc8:	e76f      	b.n	8008aaa <_dtoa_r+0x7da>
 8008bca:	f04f 0800 	mov.w	r8, #0
 8008bce:	e7f6      	b.n	8008bbe <_dtoa_r+0x8ee>
 8008bd0:	4698      	mov	r8, r3
 8008bd2:	e7f4      	b.n	8008bbe <_dtoa_r+0x8ee>
 8008bd4:	f43f af7d 	beq.w	8008ad2 <_dtoa_r+0x802>
 8008bd8:	4618      	mov	r0, r3
 8008bda:	301c      	adds	r0, #28
 8008bdc:	e772      	b.n	8008ac4 <_dtoa_r+0x7f4>
 8008bde:	9b03      	ldr	r3, [sp, #12]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	dc37      	bgt.n	8008c54 <_dtoa_r+0x984>
 8008be4:	9b06      	ldr	r3, [sp, #24]
 8008be6:	2b02      	cmp	r3, #2
 8008be8:	dd34      	ble.n	8008c54 <_dtoa_r+0x984>
 8008bea:	9b03      	ldr	r3, [sp, #12]
 8008bec:	9302      	str	r3, [sp, #8]
 8008bee:	9b02      	ldr	r3, [sp, #8]
 8008bf0:	b96b      	cbnz	r3, 8008c0e <_dtoa_r+0x93e>
 8008bf2:	4631      	mov	r1, r6
 8008bf4:	2205      	movs	r2, #5
 8008bf6:	4620      	mov	r0, r4
 8008bf8:	f000 ff6a 	bl	8009ad0 <__multadd>
 8008bfc:	4601      	mov	r1, r0
 8008bfe:	4606      	mov	r6, r0
 8008c00:	ee18 0a10 	vmov	r0, s16
 8008c04:	f001 f9ce 	bl	8009fa4 <__mcmp>
 8008c08:	2800      	cmp	r0, #0
 8008c0a:	f73f adbb 	bgt.w	8008784 <_dtoa_r+0x4b4>
 8008c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c10:	9d01      	ldr	r5, [sp, #4]
 8008c12:	43db      	mvns	r3, r3
 8008c14:	9300      	str	r3, [sp, #0]
 8008c16:	f04f 0800 	mov.w	r8, #0
 8008c1a:	4631      	mov	r1, r6
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	f000 ff35 	bl	8009a8c <_Bfree>
 8008c22:	2f00      	cmp	r7, #0
 8008c24:	f43f aea4 	beq.w	8008970 <_dtoa_r+0x6a0>
 8008c28:	f1b8 0f00 	cmp.w	r8, #0
 8008c2c:	d005      	beq.n	8008c3a <_dtoa_r+0x96a>
 8008c2e:	45b8      	cmp	r8, r7
 8008c30:	d003      	beq.n	8008c3a <_dtoa_r+0x96a>
 8008c32:	4641      	mov	r1, r8
 8008c34:	4620      	mov	r0, r4
 8008c36:	f000 ff29 	bl	8009a8c <_Bfree>
 8008c3a:	4639      	mov	r1, r7
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	f000 ff25 	bl	8009a8c <_Bfree>
 8008c42:	e695      	b.n	8008970 <_dtoa_r+0x6a0>
 8008c44:	2600      	movs	r6, #0
 8008c46:	4637      	mov	r7, r6
 8008c48:	e7e1      	b.n	8008c0e <_dtoa_r+0x93e>
 8008c4a:	9700      	str	r7, [sp, #0]
 8008c4c:	4637      	mov	r7, r6
 8008c4e:	e599      	b.n	8008784 <_dtoa_r+0x4b4>
 8008c50:	40240000 	.word	0x40240000
 8008c54:	9b08      	ldr	r3, [sp, #32]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	f000 80ca 	beq.w	8008df0 <_dtoa_r+0xb20>
 8008c5c:	9b03      	ldr	r3, [sp, #12]
 8008c5e:	9302      	str	r3, [sp, #8]
 8008c60:	2d00      	cmp	r5, #0
 8008c62:	dd05      	ble.n	8008c70 <_dtoa_r+0x9a0>
 8008c64:	4639      	mov	r1, r7
 8008c66:	462a      	mov	r2, r5
 8008c68:	4620      	mov	r0, r4
 8008c6a:	f001 f92b 	bl	8009ec4 <__lshift>
 8008c6e:	4607      	mov	r7, r0
 8008c70:	f1b8 0f00 	cmp.w	r8, #0
 8008c74:	d05b      	beq.n	8008d2e <_dtoa_r+0xa5e>
 8008c76:	6879      	ldr	r1, [r7, #4]
 8008c78:	4620      	mov	r0, r4
 8008c7a:	f000 fec7 	bl	8009a0c <_Balloc>
 8008c7e:	4605      	mov	r5, r0
 8008c80:	b928      	cbnz	r0, 8008c8e <_dtoa_r+0x9be>
 8008c82:	4b87      	ldr	r3, [pc, #540]	; (8008ea0 <_dtoa_r+0xbd0>)
 8008c84:	4602      	mov	r2, r0
 8008c86:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008c8a:	f7ff bb3b 	b.w	8008304 <_dtoa_r+0x34>
 8008c8e:	693a      	ldr	r2, [r7, #16]
 8008c90:	3202      	adds	r2, #2
 8008c92:	0092      	lsls	r2, r2, #2
 8008c94:	f107 010c 	add.w	r1, r7, #12
 8008c98:	300c      	adds	r0, #12
 8008c9a:	f7fd fa07 	bl	80060ac <memcpy>
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	4629      	mov	r1, r5
 8008ca2:	4620      	mov	r0, r4
 8008ca4:	f001 f90e 	bl	8009ec4 <__lshift>
 8008ca8:	9b01      	ldr	r3, [sp, #4]
 8008caa:	f103 0901 	add.w	r9, r3, #1
 8008cae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008cb2:	4413      	add	r3, r2
 8008cb4:	9305      	str	r3, [sp, #20]
 8008cb6:	f00a 0301 	and.w	r3, sl, #1
 8008cba:	46b8      	mov	r8, r7
 8008cbc:	9304      	str	r3, [sp, #16]
 8008cbe:	4607      	mov	r7, r0
 8008cc0:	4631      	mov	r1, r6
 8008cc2:	ee18 0a10 	vmov	r0, s16
 8008cc6:	f7ff fa77 	bl	80081b8 <quorem>
 8008cca:	4641      	mov	r1, r8
 8008ccc:	9002      	str	r0, [sp, #8]
 8008cce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008cd2:	ee18 0a10 	vmov	r0, s16
 8008cd6:	f001 f965 	bl	8009fa4 <__mcmp>
 8008cda:	463a      	mov	r2, r7
 8008cdc:	9003      	str	r0, [sp, #12]
 8008cde:	4631      	mov	r1, r6
 8008ce0:	4620      	mov	r0, r4
 8008ce2:	f001 f97b 	bl	8009fdc <__mdiff>
 8008ce6:	68c2      	ldr	r2, [r0, #12]
 8008ce8:	f109 3bff 	add.w	fp, r9, #4294967295
 8008cec:	4605      	mov	r5, r0
 8008cee:	bb02      	cbnz	r2, 8008d32 <_dtoa_r+0xa62>
 8008cf0:	4601      	mov	r1, r0
 8008cf2:	ee18 0a10 	vmov	r0, s16
 8008cf6:	f001 f955 	bl	8009fa4 <__mcmp>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	4629      	mov	r1, r5
 8008cfe:	4620      	mov	r0, r4
 8008d00:	9207      	str	r2, [sp, #28]
 8008d02:	f000 fec3 	bl	8009a8c <_Bfree>
 8008d06:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008d0a:	ea43 0102 	orr.w	r1, r3, r2
 8008d0e:	9b04      	ldr	r3, [sp, #16]
 8008d10:	430b      	orrs	r3, r1
 8008d12:	464d      	mov	r5, r9
 8008d14:	d10f      	bne.n	8008d36 <_dtoa_r+0xa66>
 8008d16:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d1a:	d02a      	beq.n	8008d72 <_dtoa_r+0xaa2>
 8008d1c:	9b03      	ldr	r3, [sp, #12]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	dd02      	ble.n	8008d28 <_dtoa_r+0xa58>
 8008d22:	9b02      	ldr	r3, [sp, #8]
 8008d24:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008d28:	f88b a000 	strb.w	sl, [fp]
 8008d2c:	e775      	b.n	8008c1a <_dtoa_r+0x94a>
 8008d2e:	4638      	mov	r0, r7
 8008d30:	e7ba      	b.n	8008ca8 <_dtoa_r+0x9d8>
 8008d32:	2201      	movs	r2, #1
 8008d34:	e7e2      	b.n	8008cfc <_dtoa_r+0xa2c>
 8008d36:	9b03      	ldr	r3, [sp, #12]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	db04      	blt.n	8008d46 <_dtoa_r+0xa76>
 8008d3c:	9906      	ldr	r1, [sp, #24]
 8008d3e:	430b      	orrs	r3, r1
 8008d40:	9904      	ldr	r1, [sp, #16]
 8008d42:	430b      	orrs	r3, r1
 8008d44:	d122      	bne.n	8008d8c <_dtoa_r+0xabc>
 8008d46:	2a00      	cmp	r2, #0
 8008d48:	ddee      	ble.n	8008d28 <_dtoa_r+0xa58>
 8008d4a:	ee18 1a10 	vmov	r1, s16
 8008d4e:	2201      	movs	r2, #1
 8008d50:	4620      	mov	r0, r4
 8008d52:	f001 f8b7 	bl	8009ec4 <__lshift>
 8008d56:	4631      	mov	r1, r6
 8008d58:	ee08 0a10 	vmov	s16, r0
 8008d5c:	f001 f922 	bl	8009fa4 <__mcmp>
 8008d60:	2800      	cmp	r0, #0
 8008d62:	dc03      	bgt.n	8008d6c <_dtoa_r+0xa9c>
 8008d64:	d1e0      	bne.n	8008d28 <_dtoa_r+0xa58>
 8008d66:	f01a 0f01 	tst.w	sl, #1
 8008d6a:	d0dd      	beq.n	8008d28 <_dtoa_r+0xa58>
 8008d6c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d70:	d1d7      	bne.n	8008d22 <_dtoa_r+0xa52>
 8008d72:	2339      	movs	r3, #57	; 0x39
 8008d74:	f88b 3000 	strb.w	r3, [fp]
 8008d78:	462b      	mov	r3, r5
 8008d7a:	461d      	mov	r5, r3
 8008d7c:	3b01      	subs	r3, #1
 8008d7e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008d82:	2a39      	cmp	r2, #57	; 0x39
 8008d84:	d071      	beq.n	8008e6a <_dtoa_r+0xb9a>
 8008d86:	3201      	adds	r2, #1
 8008d88:	701a      	strb	r2, [r3, #0]
 8008d8a:	e746      	b.n	8008c1a <_dtoa_r+0x94a>
 8008d8c:	2a00      	cmp	r2, #0
 8008d8e:	dd07      	ble.n	8008da0 <_dtoa_r+0xad0>
 8008d90:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d94:	d0ed      	beq.n	8008d72 <_dtoa_r+0xaa2>
 8008d96:	f10a 0301 	add.w	r3, sl, #1
 8008d9a:	f88b 3000 	strb.w	r3, [fp]
 8008d9e:	e73c      	b.n	8008c1a <_dtoa_r+0x94a>
 8008da0:	9b05      	ldr	r3, [sp, #20]
 8008da2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008da6:	4599      	cmp	r9, r3
 8008da8:	d047      	beq.n	8008e3a <_dtoa_r+0xb6a>
 8008daa:	ee18 1a10 	vmov	r1, s16
 8008dae:	2300      	movs	r3, #0
 8008db0:	220a      	movs	r2, #10
 8008db2:	4620      	mov	r0, r4
 8008db4:	f000 fe8c 	bl	8009ad0 <__multadd>
 8008db8:	45b8      	cmp	r8, r7
 8008dba:	ee08 0a10 	vmov	s16, r0
 8008dbe:	f04f 0300 	mov.w	r3, #0
 8008dc2:	f04f 020a 	mov.w	r2, #10
 8008dc6:	4641      	mov	r1, r8
 8008dc8:	4620      	mov	r0, r4
 8008dca:	d106      	bne.n	8008dda <_dtoa_r+0xb0a>
 8008dcc:	f000 fe80 	bl	8009ad0 <__multadd>
 8008dd0:	4680      	mov	r8, r0
 8008dd2:	4607      	mov	r7, r0
 8008dd4:	f109 0901 	add.w	r9, r9, #1
 8008dd8:	e772      	b.n	8008cc0 <_dtoa_r+0x9f0>
 8008dda:	f000 fe79 	bl	8009ad0 <__multadd>
 8008dde:	4639      	mov	r1, r7
 8008de0:	4680      	mov	r8, r0
 8008de2:	2300      	movs	r3, #0
 8008de4:	220a      	movs	r2, #10
 8008de6:	4620      	mov	r0, r4
 8008de8:	f000 fe72 	bl	8009ad0 <__multadd>
 8008dec:	4607      	mov	r7, r0
 8008dee:	e7f1      	b.n	8008dd4 <_dtoa_r+0xb04>
 8008df0:	9b03      	ldr	r3, [sp, #12]
 8008df2:	9302      	str	r3, [sp, #8]
 8008df4:	9d01      	ldr	r5, [sp, #4]
 8008df6:	ee18 0a10 	vmov	r0, s16
 8008dfa:	4631      	mov	r1, r6
 8008dfc:	f7ff f9dc 	bl	80081b8 <quorem>
 8008e00:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008e04:	9b01      	ldr	r3, [sp, #4]
 8008e06:	f805 ab01 	strb.w	sl, [r5], #1
 8008e0a:	1aea      	subs	r2, r5, r3
 8008e0c:	9b02      	ldr	r3, [sp, #8]
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	dd09      	ble.n	8008e26 <_dtoa_r+0xb56>
 8008e12:	ee18 1a10 	vmov	r1, s16
 8008e16:	2300      	movs	r3, #0
 8008e18:	220a      	movs	r2, #10
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	f000 fe58 	bl	8009ad0 <__multadd>
 8008e20:	ee08 0a10 	vmov	s16, r0
 8008e24:	e7e7      	b.n	8008df6 <_dtoa_r+0xb26>
 8008e26:	9b02      	ldr	r3, [sp, #8]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	bfc8      	it	gt
 8008e2c:	461d      	movgt	r5, r3
 8008e2e:	9b01      	ldr	r3, [sp, #4]
 8008e30:	bfd8      	it	le
 8008e32:	2501      	movle	r5, #1
 8008e34:	441d      	add	r5, r3
 8008e36:	f04f 0800 	mov.w	r8, #0
 8008e3a:	ee18 1a10 	vmov	r1, s16
 8008e3e:	2201      	movs	r2, #1
 8008e40:	4620      	mov	r0, r4
 8008e42:	f001 f83f 	bl	8009ec4 <__lshift>
 8008e46:	4631      	mov	r1, r6
 8008e48:	ee08 0a10 	vmov	s16, r0
 8008e4c:	f001 f8aa 	bl	8009fa4 <__mcmp>
 8008e50:	2800      	cmp	r0, #0
 8008e52:	dc91      	bgt.n	8008d78 <_dtoa_r+0xaa8>
 8008e54:	d102      	bne.n	8008e5c <_dtoa_r+0xb8c>
 8008e56:	f01a 0f01 	tst.w	sl, #1
 8008e5a:	d18d      	bne.n	8008d78 <_dtoa_r+0xaa8>
 8008e5c:	462b      	mov	r3, r5
 8008e5e:	461d      	mov	r5, r3
 8008e60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e64:	2a30      	cmp	r2, #48	; 0x30
 8008e66:	d0fa      	beq.n	8008e5e <_dtoa_r+0xb8e>
 8008e68:	e6d7      	b.n	8008c1a <_dtoa_r+0x94a>
 8008e6a:	9a01      	ldr	r2, [sp, #4]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d184      	bne.n	8008d7a <_dtoa_r+0xaaa>
 8008e70:	9b00      	ldr	r3, [sp, #0]
 8008e72:	3301      	adds	r3, #1
 8008e74:	9300      	str	r3, [sp, #0]
 8008e76:	2331      	movs	r3, #49	; 0x31
 8008e78:	7013      	strb	r3, [r2, #0]
 8008e7a:	e6ce      	b.n	8008c1a <_dtoa_r+0x94a>
 8008e7c:	4b09      	ldr	r3, [pc, #36]	; (8008ea4 <_dtoa_r+0xbd4>)
 8008e7e:	f7ff ba95 	b.w	80083ac <_dtoa_r+0xdc>
 8008e82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	f47f aa6e 	bne.w	8008366 <_dtoa_r+0x96>
 8008e8a:	4b07      	ldr	r3, [pc, #28]	; (8008ea8 <_dtoa_r+0xbd8>)
 8008e8c:	f7ff ba8e 	b.w	80083ac <_dtoa_r+0xdc>
 8008e90:	9b02      	ldr	r3, [sp, #8]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	dcae      	bgt.n	8008df4 <_dtoa_r+0xb24>
 8008e96:	9b06      	ldr	r3, [sp, #24]
 8008e98:	2b02      	cmp	r3, #2
 8008e9a:	f73f aea8 	bgt.w	8008bee <_dtoa_r+0x91e>
 8008e9e:	e7a9      	b.n	8008df4 <_dtoa_r+0xb24>
 8008ea0:	0800b718 	.word	0x0800b718
 8008ea4:	0800b518 	.word	0x0800b518
 8008ea8:	0800b699 	.word	0x0800b699

08008eac <__sflush_r>:
 8008eac:	898a      	ldrh	r2, [r1, #12]
 8008eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eb2:	4605      	mov	r5, r0
 8008eb4:	0710      	lsls	r0, r2, #28
 8008eb6:	460c      	mov	r4, r1
 8008eb8:	d458      	bmi.n	8008f6c <__sflush_r+0xc0>
 8008eba:	684b      	ldr	r3, [r1, #4]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	dc05      	bgt.n	8008ecc <__sflush_r+0x20>
 8008ec0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	dc02      	bgt.n	8008ecc <__sflush_r+0x20>
 8008ec6:	2000      	movs	r0, #0
 8008ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ecc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ece:	2e00      	cmp	r6, #0
 8008ed0:	d0f9      	beq.n	8008ec6 <__sflush_r+0x1a>
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ed8:	682f      	ldr	r7, [r5, #0]
 8008eda:	602b      	str	r3, [r5, #0]
 8008edc:	d032      	beq.n	8008f44 <__sflush_r+0x98>
 8008ede:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ee0:	89a3      	ldrh	r3, [r4, #12]
 8008ee2:	075a      	lsls	r2, r3, #29
 8008ee4:	d505      	bpl.n	8008ef2 <__sflush_r+0x46>
 8008ee6:	6863      	ldr	r3, [r4, #4]
 8008ee8:	1ac0      	subs	r0, r0, r3
 8008eea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008eec:	b10b      	cbz	r3, 8008ef2 <__sflush_r+0x46>
 8008eee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ef0:	1ac0      	subs	r0, r0, r3
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ef8:	6a21      	ldr	r1, [r4, #32]
 8008efa:	4628      	mov	r0, r5
 8008efc:	47b0      	blx	r6
 8008efe:	1c43      	adds	r3, r0, #1
 8008f00:	89a3      	ldrh	r3, [r4, #12]
 8008f02:	d106      	bne.n	8008f12 <__sflush_r+0x66>
 8008f04:	6829      	ldr	r1, [r5, #0]
 8008f06:	291d      	cmp	r1, #29
 8008f08:	d82c      	bhi.n	8008f64 <__sflush_r+0xb8>
 8008f0a:	4a2a      	ldr	r2, [pc, #168]	; (8008fb4 <__sflush_r+0x108>)
 8008f0c:	40ca      	lsrs	r2, r1
 8008f0e:	07d6      	lsls	r6, r2, #31
 8008f10:	d528      	bpl.n	8008f64 <__sflush_r+0xb8>
 8008f12:	2200      	movs	r2, #0
 8008f14:	6062      	str	r2, [r4, #4]
 8008f16:	04d9      	lsls	r1, r3, #19
 8008f18:	6922      	ldr	r2, [r4, #16]
 8008f1a:	6022      	str	r2, [r4, #0]
 8008f1c:	d504      	bpl.n	8008f28 <__sflush_r+0x7c>
 8008f1e:	1c42      	adds	r2, r0, #1
 8008f20:	d101      	bne.n	8008f26 <__sflush_r+0x7a>
 8008f22:	682b      	ldr	r3, [r5, #0]
 8008f24:	b903      	cbnz	r3, 8008f28 <__sflush_r+0x7c>
 8008f26:	6560      	str	r0, [r4, #84]	; 0x54
 8008f28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f2a:	602f      	str	r7, [r5, #0]
 8008f2c:	2900      	cmp	r1, #0
 8008f2e:	d0ca      	beq.n	8008ec6 <__sflush_r+0x1a>
 8008f30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f34:	4299      	cmp	r1, r3
 8008f36:	d002      	beq.n	8008f3e <__sflush_r+0x92>
 8008f38:	4628      	mov	r0, r5
 8008f3a:	f7fd f8e3 	bl	8006104 <_free_r>
 8008f3e:	2000      	movs	r0, #0
 8008f40:	6360      	str	r0, [r4, #52]	; 0x34
 8008f42:	e7c1      	b.n	8008ec8 <__sflush_r+0x1c>
 8008f44:	6a21      	ldr	r1, [r4, #32]
 8008f46:	2301      	movs	r3, #1
 8008f48:	4628      	mov	r0, r5
 8008f4a:	47b0      	blx	r6
 8008f4c:	1c41      	adds	r1, r0, #1
 8008f4e:	d1c7      	bne.n	8008ee0 <__sflush_r+0x34>
 8008f50:	682b      	ldr	r3, [r5, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d0c4      	beq.n	8008ee0 <__sflush_r+0x34>
 8008f56:	2b1d      	cmp	r3, #29
 8008f58:	d001      	beq.n	8008f5e <__sflush_r+0xb2>
 8008f5a:	2b16      	cmp	r3, #22
 8008f5c:	d101      	bne.n	8008f62 <__sflush_r+0xb6>
 8008f5e:	602f      	str	r7, [r5, #0]
 8008f60:	e7b1      	b.n	8008ec6 <__sflush_r+0x1a>
 8008f62:	89a3      	ldrh	r3, [r4, #12]
 8008f64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f68:	81a3      	strh	r3, [r4, #12]
 8008f6a:	e7ad      	b.n	8008ec8 <__sflush_r+0x1c>
 8008f6c:	690f      	ldr	r7, [r1, #16]
 8008f6e:	2f00      	cmp	r7, #0
 8008f70:	d0a9      	beq.n	8008ec6 <__sflush_r+0x1a>
 8008f72:	0793      	lsls	r3, r2, #30
 8008f74:	680e      	ldr	r6, [r1, #0]
 8008f76:	bf08      	it	eq
 8008f78:	694b      	ldreq	r3, [r1, #20]
 8008f7a:	600f      	str	r7, [r1, #0]
 8008f7c:	bf18      	it	ne
 8008f7e:	2300      	movne	r3, #0
 8008f80:	eba6 0807 	sub.w	r8, r6, r7
 8008f84:	608b      	str	r3, [r1, #8]
 8008f86:	f1b8 0f00 	cmp.w	r8, #0
 8008f8a:	dd9c      	ble.n	8008ec6 <__sflush_r+0x1a>
 8008f8c:	6a21      	ldr	r1, [r4, #32]
 8008f8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008f90:	4643      	mov	r3, r8
 8008f92:	463a      	mov	r2, r7
 8008f94:	4628      	mov	r0, r5
 8008f96:	47b0      	blx	r6
 8008f98:	2800      	cmp	r0, #0
 8008f9a:	dc06      	bgt.n	8008faa <__sflush_r+0xfe>
 8008f9c:	89a3      	ldrh	r3, [r4, #12]
 8008f9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fa2:	81a3      	strh	r3, [r4, #12]
 8008fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fa8:	e78e      	b.n	8008ec8 <__sflush_r+0x1c>
 8008faa:	4407      	add	r7, r0
 8008fac:	eba8 0800 	sub.w	r8, r8, r0
 8008fb0:	e7e9      	b.n	8008f86 <__sflush_r+0xda>
 8008fb2:	bf00      	nop
 8008fb4:	20400001 	.word	0x20400001

08008fb8 <_fflush_r>:
 8008fb8:	b538      	push	{r3, r4, r5, lr}
 8008fba:	690b      	ldr	r3, [r1, #16]
 8008fbc:	4605      	mov	r5, r0
 8008fbe:	460c      	mov	r4, r1
 8008fc0:	b913      	cbnz	r3, 8008fc8 <_fflush_r+0x10>
 8008fc2:	2500      	movs	r5, #0
 8008fc4:	4628      	mov	r0, r5
 8008fc6:	bd38      	pop	{r3, r4, r5, pc}
 8008fc8:	b118      	cbz	r0, 8008fd2 <_fflush_r+0x1a>
 8008fca:	6983      	ldr	r3, [r0, #24]
 8008fcc:	b90b      	cbnz	r3, 8008fd2 <_fflush_r+0x1a>
 8008fce:	f000 f887 	bl	80090e0 <__sinit>
 8008fd2:	4b14      	ldr	r3, [pc, #80]	; (8009024 <_fflush_r+0x6c>)
 8008fd4:	429c      	cmp	r4, r3
 8008fd6:	d11b      	bne.n	8009010 <_fflush_r+0x58>
 8008fd8:	686c      	ldr	r4, [r5, #4]
 8008fda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d0ef      	beq.n	8008fc2 <_fflush_r+0xa>
 8008fe2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008fe4:	07d0      	lsls	r0, r2, #31
 8008fe6:	d404      	bmi.n	8008ff2 <_fflush_r+0x3a>
 8008fe8:	0599      	lsls	r1, r3, #22
 8008fea:	d402      	bmi.n	8008ff2 <_fflush_r+0x3a>
 8008fec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fee:	f000 fc88 	bl	8009902 <__retarget_lock_acquire_recursive>
 8008ff2:	4628      	mov	r0, r5
 8008ff4:	4621      	mov	r1, r4
 8008ff6:	f7ff ff59 	bl	8008eac <__sflush_r>
 8008ffa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ffc:	07da      	lsls	r2, r3, #31
 8008ffe:	4605      	mov	r5, r0
 8009000:	d4e0      	bmi.n	8008fc4 <_fflush_r+0xc>
 8009002:	89a3      	ldrh	r3, [r4, #12]
 8009004:	059b      	lsls	r3, r3, #22
 8009006:	d4dd      	bmi.n	8008fc4 <_fflush_r+0xc>
 8009008:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800900a:	f000 fc7b 	bl	8009904 <__retarget_lock_release_recursive>
 800900e:	e7d9      	b.n	8008fc4 <_fflush_r+0xc>
 8009010:	4b05      	ldr	r3, [pc, #20]	; (8009028 <_fflush_r+0x70>)
 8009012:	429c      	cmp	r4, r3
 8009014:	d101      	bne.n	800901a <_fflush_r+0x62>
 8009016:	68ac      	ldr	r4, [r5, #8]
 8009018:	e7df      	b.n	8008fda <_fflush_r+0x22>
 800901a:	4b04      	ldr	r3, [pc, #16]	; (800902c <_fflush_r+0x74>)
 800901c:	429c      	cmp	r4, r3
 800901e:	bf08      	it	eq
 8009020:	68ec      	ldreq	r4, [r5, #12]
 8009022:	e7da      	b.n	8008fda <_fflush_r+0x22>
 8009024:	0800b74c 	.word	0x0800b74c
 8009028:	0800b76c 	.word	0x0800b76c
 800902c:	0800b72c 	.word	0x0800b72c

08009030 <std>:
 8009030:	2300      	movs	r3, #0
 8009032:	b510      	push	{r4, lr}
 8009034:	4604      	mov	r4, r0
 8009036:	e9c0 3300 	strd	r3, r3, [r0]
 800903a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800903e:	6083      	str	r3, [r0, #8]
 8009040:	8181      	strh	r1, [r0, #12]
 8009042:	6643      	str	r3, [r0, #100]	; 0x64
 8009044:	81c2      	strh	r2, [r0, #14]
 8009046:	6183      	str	r3, [r0, #24]
 8009048:	4619      	mov	r1, r3
 800904a:	2208      	movs	r2, #8
 800904c:	305c      	adds	r0, #92	; 0x5c
 800904e:	f7fd f83b 	bl	80060c8 <memset>
 8009052:	4b05      	ldr	r3, [pc, #20]	; (8009068 <std+0x38>)
 8009054:	6263      	str	r3, [r4, #36]	; 0x24
 8009056:	4b05      	ldr	r3, [pc, #20]	; (800906c <std+0x3c>)
 8009058:	62a3      	str	r3, [r4, #40]	; 0x28
 800905a:	4b05      	ldr	r3, [pc, #20]	; (8009070 <std+0x40>)
 800905c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800905e:	4b05      	ldr	r3, [pc, #20]	; (8009074 <std+0x44>)
 8009060:	6224      	str	r4, [r4, #32]
 8009062:	6323      	str	r3, [r4, #48]	; 0x30
 8009064:	bd10      	pop	{r4, pc}
 8009066:	bf00      	nop
 8009068:	0800a909 	.word	0x0800a909
 800906c:	0800a92b 	.word	0x0800a92b
 8009070:	0800a963 	.word	0x0800a963
 8009074:	0800a987 	.word	0x0800a987

08009078 <_cleanup_r>:
 8009078:	4901      	ldr	r1, [pc, #4]	; (8009080 <_cleanup_r+0x8>)
 800907a:	f000 b8af 	b.w	80091dc <_fwalk_reent>
 800907e:	bf00      	nop
 8009080:	08008fb9 	.word	0x08008fb9

08009084 <__sfmoreglue>:
 8009084:	b570      	push	{r4, r5, r6, lr}
 8009086:	2268      	movs	r2, #104	; 0x68
 8009088:	1e4d      	subs	r5, r1, #1
 800908a:	4355      	muls	r5, r2
 800908c:	460e      	mov	r6, r1
 800908e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009092:	f7fd f8a3 	bl	80061dc <_malloc_r>
 8009096:	4604      	mov	r4, r0
 8009098:	b140      	cbz	r0, 80090ac <__sfmoreglue+0x28>
 800909a:	2100      	movs	r1, #0
 800909c:	e9c0 1600 	strd	r1, r6, [r0]
 80090a0:	300c      	adds	r0, #12
 80090a2:	60a0      	str	r0, [r4, #8]
 80090a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80090a8:	f7fd f80e 	bl	80060c8 <memset>
 80090ac:	4620      	mov	r0, r4
 80090ae:	bd70      	pop	{r4, r5, r6, pc}

080090b0 <__sfp_lock_acquire>:
 80090b0:	4801      	ldr	r0, [pc, #4]	; (80090b8 <__sfp_lock_acquire+0x8>)
 80090b2:	f000 bc26 	b.w	8009902 <__retarget_lock_acquire_recursive>
 80090b6:	bf00      	nop
 80090b8:	20001369 	.word	0x20001369

080090bc <__sfp_lock_release>:
 80090bc:	4801      	ldr	r0, [pc, #4]	; (80090c4 <__sfp_lock_release+0x8>)
 80090be:	f000 bc21 	b.w	8009904 <__retarget_lock_release_recursive>
 80090c2:	bf00      	nop
 80090c4:	20001369 	.word	0x20001369

080090c8 <__sinit_lock_acquire>:
 80090c8:	4801      	ldr	r0, [pc, #4]	; (80090d0 <__sinit_lock_acquire+0x8>)
 80090ca:	f000 bc1a 	b.w	8009902 <__retarget_lock_acquire_recursive>
 80090ce:	bf00      	nop
 80090d0:	2000136a 	.word	0x2000136a

080090d4 <__sinit_lock_release>:
 80090d4:	4801      	ldr	r0, [pc, #4]	; (80090dc <__sinit_lock_release+0x8>)
 80090d6:	f000 bc15 	b.w	8009904 <__retarget_lock_release_recursive>
 80090da:	bf00      	nop
 80090dc:	2000136a 	.word	0x2000136a

080090e0 <__sinit>:
 80090e0:	b510      	push	{r4, lr}
 80090e2:	4604      	mov	r4, r0
 80090e4:	f7ff fff0 	bl	80090c8 <__sinit_lock_acquire>
 80090e8:	69a3      	ldr	r3, [r4, #24]
 80090ea:	b11b      	cbz	r3, 80090f4 <__sinit+0x14>
 80090ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090f0:	f7ff bff0 	b.w	80090d4 <__sinit_lock_release>
 80090f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80090f8:	6523      	str	r3, [r4, #80]	; 0x50
 80090fa:	4b13      	ldr	r3, [pc, #76]	; (8009148 <__sinit+0x68>)
 80090fc:	4a13      	ldr	r2, [pc, #76]	; (800914c <__sinit+0x6c>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	62a2      	str	r2, [r4, #40]	; 0x28
 8009102:	42a3      	cmp	r3, r4
 8009104:	bf04      	itt	eq
 8009106:	2301      	moveq	r3, #1
 8009108:	61a3      	streq	r3, [r4, #24]
 800910a:	4620      	mov	r0, r4
 800910c:	f000 f820 	bl	8009150 <__sfp>
 8009110:	6060      	str	r0, [r4, #4]
 8009112:	4620      	mov	r0, r4
 8009114:	f000 f81c 	bl	8009150 <__sfp>
 8009118:	60a0      	str	r0, [r4, #8]
 800911a:	4620      	mov	r0, r4
 800911c:	f000 f818 	bl	8009150 <__sfp>
 8009120:	2200      	movs	r2, #0
 8009122:	60e0      	str	r0, [r4, #12]
 8009124:	2104      	movs	r1, #4
 8009126:	6860      	ldr	r0, [r4, #4]
 8009128:	f7ff ff82 	bl	8009030 <std>
 800912c:	68a0      	ldr	r0, [r4, #8]
 800912e:	2201      	movs	r2, #1
 8009130:	2109      	movs	r1, #9
 8009132:	f7ff ff7d 	bl	8009030 <std>
 8009136:	68e0      	ldr	r0, [r4, #12]
 8009138:	2202      	movs	r2, #2
 800913a:	2112      	movs	r1, #18
 800913c:	f7ff ff78 	bl	8009030 <std>
 8009140:	2301      	movs	r3, #1
 8009142:	61a3      	str	r3, [r4, #24]
 8009144:	e7d2      	b.n	80090ec <__sinit+0xc>
 8009146:	bf00      	nop
 8009148:	0800b504 	.word	0x0800b504
 800914c:	08009079 	.word	0x08009079

08009150 <__sfp>:
 8009150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009152:	4607      	mov	r7, r0
 8009154:	f7ff ffac 	bl	80090b0 <__sfp_lock_acquire>
 8009158:	4b1e      	ldr	r3, [pc, #120]	; (80091d4 <__sfp+0x84>)
 800915a:	681e      	ldr	r6, [r3, #0]
 800915c:	69b3      	ldr	r3, [r6, #24]
 800915e:	b913      	cbnz	r3, 8009166 <__sfp+0x16>
 8009160:	4630      	mov	r0, r6
 8009162:	f7ff ffbd 	bl	80090e0 <__sinit>
 8009166:	3648      	adds	r6, #72	; 0x48
 8009168:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800916c:	3b01      	subs	r3, #1
 800916e:	d503      	bpl.n	8009178 <__sfp+0x28>
 8009170:	6833      	ldr	r3, [r6, #0]
 8009172:	b30b      	cbz	r3, 80091b8 <__sfp+0x68>
 8009174:	6836      	ldr	r6, [r6, #0]
 8009176:	e7f7      	b.n	8009168 <__sfp+0x18>
 8009178:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800917c:	b9d5      	cbnz	r5, 80091b4 <__sfp+0x64>
 800917e:	4b16      	ldr	r3, [pc, #88]	; (80091d8 <__sfp+0x88>)
 8009180:	60e3      	str	r3, [r4, #12]
 8009182:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009186:	6665      	str	r5, [r4, #100]	; 0x64
 8009188:	f000 fbba 	bl	8009900 <__retarget_lock_init_recursive>
 800918c:	f7ff ff96 	bl	80090bc <__sfp_lock_release>
 8009190:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009194:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009198:	6025      	str	r5, [r4, #0]
 800919a:	61a5      	str	r5, [r4, #24]
 800919c:	2208      	movs	r2, #8
 800919e:	4629      	mov	r1, r5
 80091a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80091a4:	f7fc ff90 	bl	80060c8 <memset>
 80091a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80091ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80091b0:	4620      	mov	r0, r4
 80091b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091b4:	3468      	adds	r4, #104	; 0x68
 80091b6:	e7d9      	b.n	800916c <__sfp+0x1c>
 80091b8:	2104      	movs	r1, #4
 80091ba:	4638      	mov	r0, r7
 80091bc:	f7ff ff62 	bl	8009084 <__sfmoreglue>
 80091c0:	4604      	mov	r4, r0
 80091c2:	6030      	str	r0, [r6, #0]
 80091c4:	2800      	cmp	r0, #0
 80091c6:	d1d5      	bne.n	8009174 <__sfp+0x24>
 80091c8:	f7ff ff78 	bl	80090bc <__sfp_lock_release>
 80091cc:	230c      	movs	r3, #12
 80091ce:	603b      	str	r3, [r7, #0]
 80091d0:	e7ee      	b.n	80091b0 <__sfp+0x60>
 80091d2:	bf00      	nop
 80091d4:	0800b504 	.word	0x0800b504
 80091d8:	ffff0001 	.word	0xffff0001

080091dc <_fwalk_reent>:
 80091dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091e0:	4606      	mov	r6, r0
 80091e2:	4688      	mov	r8, r1
 80091e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80091e8:	2700      	movs	r7, #0
 80091ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80091ee:	f1b9 0901 	subs.w	r9, r9, #1
 80091f2:	d505      	bpl.n	8009200 <_fwalk_reent+0x24>
 80091f4:	6824      	ldr	r4, [r4, #0]
 80091f6:	2c00      	cmp	r4, #0
 80091f8:	d1f7      	bne.n	80091ea <_fwalk_reent+0xe>
 80091fa:	4638      	mov	r0, r7
 80091fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009200:	89ab      	ldrh	r3, [r5, #12]
 8009202:	2b01      	cmp	r3, #1
 8009204:	d907      	bls.n	8009216 <_fwalk_reent+0x3a>
 8009206:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800920a:	3301      	adds	r3, #1
 800920c:	d003      	beq.n	8009216 <_fwalk_reent+0x3a>
 800920e:	4629      	mov	r1, r5
 8009210:	4630      	mov	r0, r6
 8009212:	47c0      	blx	r8
 8009214:	4307      	orrs	r7, r0
 8009216:	3568      	adds	r5, #104	; 0x68
 8009218:	e7e9      	b.n	80091ee <_fwalk_reent+0x12>

0800921a <rshift>:
 800921a:	6903      	ldr	r3, [r0, #16]
 800921c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009220:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009224:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009228:	f100 0414 	add.w	r4, r0, #20
 800922c:	dd45      	ble.n	80092ba <rshift+0xa0>
 800922e:	f011 011f 	ands.w	r1, r1, #31
 8009232:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009236:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800923a:	d10c      	bne.n	8009256 <rshift+0x3c>
 800923c:	f100 0710 	add.w	r7, r0, #16
 8009240:	4629      	mov	r1, r5
 8009242:	42b1      	cmp	r1, r6
 8009244:	d334      	bcc.n	80092b0 <rshift+0x96>
 8009246:	1a9b      	subs	r3, r3, r2
 8009248:	009b      	lsls	r3, r3, #2
 800924a:	1eea      	subs	r2, r5, #3
 800924c:	4296      	cmp	r6, r2
 800924e:	bf38      	it	cc
 8009250:	2300      	movcc	r3, #0
 8009252:	4423      	add	r3, r4
 8009254:	e015      	b.n	8009282 <rshift+0x68>
 8009256:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800925a:	f1c1 0820 	rsb	r8, r1, #32
 800925e:	40cf      	lsrs	r7, r1
 8009260:	f105 0e04 	add.w	lr, r5, #4
 8009264:	46a1      	mov	r9, r4
 8009266:	4576      	cmp	r6, lr
 8009268:	46f4      	mov	ip, lr
 800926a:	d815      	bhi.n	8009298 <rshift+0x7e>
 800926c:	1a9a      	subs	r2, r3, r2
 800926e:	0092      	lsls	r2, r2, #2
 8009270:	3a04      	subs	r2, #4
 8009272:	3501      	adds	r5, #1
 8009274:	42ae      	cmp	r6, r5
 8009276:	bf38      	it	cc
 8009278:	2200      	movcc	r2, #0
 800927a:	18a3      	adds	r3, r4, r2
 800927c:	50a7      	str	r7, [r4, r2]
 800927e:	b107      	cbz	r7, 8009282 <rshift+0x68>
 8009280:	3304      	adds	r3, #4
 8009282:	1b1a      	subs	r2, r3, r4
 8009284:	42a3      	cmp	r3, r4
 8009286:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800928a:	bf08      	it	eq
 800928c:	2300      	moveq	r3, #0
 800928e:	6102      	str	r2, [r0, #16]
 8009290:	bf08      	it	eq
 8009292:	6143      	streq	r3, [r0, #20]
 8009294:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009298:	f8dc c000 	ldr.w	ip, [ip]
 800929c:	fa0c fc08 	lsl.w	ip, ip, r8
 80092a0:	ea4c 0707 	orr.w	r7, ip, r7
 80092a4:	f849 7b04 	str.w	r7, [r9], #4
 80092a8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80092ac:	40cf      	lsrs	r7, r1
 80092ae:	e7da      	b.n	8009266 <rshift+0x4c>
 80092b0:	f851 cb04 	ldr.w	ip, [r1], #4
 80092b4:	f847 cf04 	str.w	ip, [r7, #4]!
 80092b8:	e7c3      	b.n	8009242 <rshift+0x28>
 80092ba:	4623      	mov	r3, r4
 80092bc:	e7e1      	b.n	8009282 <rshift+0x68>

080092be <__hexdig_fun>:
 80092be:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80092c2:	2b09      	cmp	r3, #9
 80092c4:	d802      	bhi.n	80092cc <__hexdig_fun+0xe>
 80092c6:	3820      	subs	r0, #32
 80092c8:	b2c0      	uxtb	r0, r0
 80092ca:	4770      	bx	lr
 80092cc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80092d0:	2b05      	cmp	r3, #5
 80092d2:	d801      	bhi.n	80092d8 <__hexdig_fun+0x1a>
 80092d4:	3847      	subs	r0, #71	; 0x47
 80092d6:	e7f7      	b.n	80092c8 <__hexdig_fun+0xa>
 80092d8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80092dc:	2b05      	cmp	r3, #5
 80092de:	d801      	bhi.n	80092e4 <__hexdig_fun+0x26>
 80092e0:	3827      	subs	r0, #39	; 0x27
 80092e2:	e7f1      	b.n	80092c8 <__hexdig_fun+0xa>
 80092e4:	2000      	movs	r0, #0
 80092e6:	4770      	bx	lr

080092e8 <__gethex>:
 80092e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ec:	ed2d 8b02 	vpush	{d8}
 80092f0:	b089      	sub	sp, #36	; 0x24
 80092f2:	ee08 0a10 	vmov	s16, r0
 80092f6:	9304      	str	r3, [sp, #16]
 80092f8:	4bb4      	ldr	r3, [pc, #720]	; (80095cc <__gethex+0x2e4>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	9301      	str	r3, [sp, #4]
 80092fe:	4618      	mov	r0, r3
 8009300:	468b      	mov	fp, r1
 8009302:	4690      	mov	r8, r2
 8009304:	f7f6 ff64 	bl	80001d0 <strlen>
 8009308:	9b01      	ldr	r3, [sp, #4]
 800930a:	f8db 2000 	ldr.w	r2, [fp]
 800930e:	4403      	add	r3, r0
 8009310:	4682      	mov	sl, r0
 8009312:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009316:	9305      	str	r3, [sp, #20]
 8009318:	1c93      	adds	r3, r2, #2
 800931a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800931e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009322:	32fe      	adds	r2, #254	; 0xfe
 8009324:	18d1      	adds	r1, r2, r3
 8009326:	461f      	mov	r7, r3
 8009328:	f813 0b01 	ldrb.w	r0, [r3], #1
 800932c:	9100      	str	r1, [sp, #0]
 800932e:	2830      	cmp	r0, #48	; 0x30
 8009330:	d0f8      	beq.n	8009324 <__gethex+0x3c>
 8009332:	f7ff ffc4 	bl	80092be <__hexdig_fun>
 8009336:	4604      	mov	r4, r0
 8009338:	2800      	cmp	r0, #0
 800933a:	d13a      	bne.n	80093b2 <__gethex+0xca>
 800933c:	9901      	ldr	r1, [sp, #4]
 800933e:	4652      	mov	r2, sl
 8009340:	4638      	mov	r0, r7
 8009342:	f001 fb24 	bl	800a98e <strncmp>
 8009346:	4605      	mov	r5, r0
 8009348:	2800      	cmp	r0, #0
 800934a:	d168      	bne.n	800941e <__gethex+0x136>
 800934c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009350:	eb07 060a 	add.w	r6, r7, sl
 8009354:	f7ff ffb3 	bl	80092be <__hexdig_fun>
 8009358:	2800      	cmp	r0, #0
 800935a:	d062      	beq.n	8009422 <__gethex+0x13a>
 800935c:	4633      	mov	r3, r6
 800935e:	7818      	ldrb	r0, [r3, #0]
 8009360:	2830      	cmp	r0, #48	; 0x30
 8009362:	461f      	mov	r7, r3
 8009364:	f103 0301 	add.w	r3, r3, #1
 8009368:	d0f9      	beq.n	800935e <__gethex+0x76>
 800936a:	f7ff ffa8 	bl	80092be <__hexdig_fun>
 800936e:	2301      	movs	r3, #1
 8009370:	fab0 f480 	clz	r4, r0
 8009374:	0964      	lsrs	r4, r4, #5
 8009376:	4635      	mov	r5, r6
 8009378:	9300      	str	r3, [sp, #0]
 800937a:	463a      	mov	r2, r7
 800937c:	4616      	mov	r6, r2
 800937e:	3201      	adds	r2, #1
 8009380:	7830      	ldrb	r0, [r6, #0]
 8009382:	f7ff ff9c 	bl	80092be <__hexdig_fun>
 8009386:	2800      	cmp	r0, #0
 8009388:	d1f8      	bne.n	800937c <__gethex+0x94>
 800938a:	9901      	ldr	r1, [sp, #4]
 800938c:	4652      	mov	r2, sl
 800938e:	4630      	mov	r0, r6
 8009390:	f001 fafd 	bl	800a98e <strncmp>
 8009394:	b980      	cbnz	r0, 80093b8 <__gethex+0xd0>
 8009396:	b94d      	cbnz	r5, 80093ac <__gethex+0xc4>
 8009398:	eb06 050a 	add.w	r5, r6, sl
 800939c:	462a      	mov	r2, r5
 800939e:	4616      	mov	r6, r2
 80093a0:	3201      	adds	r2, #1
 80093a2:	7830      	ldrb	r0, [r6, #0]
 80093a4:	f7ff ff8b 	bl	80092be <__hexdig_fun>
 80093a8:	2800      	cmp	r0, #0
 80093aa:	d1f8      	bne.n	800939e <__gethex+0xb6>
 80093ac:	1bad      	subs	r5, r5, r6
 80093ae:	00ad      	lsls	r5, r5, #2
 80093b0:	e004      	b.n	80093bc <__gethex+0xd4>
 80093b2:	2400      	movs	r4, #0
 80093b4:	4625      	mov	r5, r4
 80093b6:	e7e0      	b.n	800937a <__gethex+0x92>
 80093b8:	2d00      	cmp	r5, #0
 80093ba:	d1f7      	bne.n	80093ac <__gethex+0xc4>
 80093bc:	7833      	ldrb	r3, [r6, #0]
 80093be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80093c2:	2b50      	cmp	r3, #80	; 0x50
 80093c4:	d13b      	bne.n	800943e <__gethex+0x156>
 80093c6:	7873      	ldrb	r3, [r6, #1]
 80093c8:	2b2b      	cmp	r3, #43	; 0x2b
 80093ca:	d02c      	beq.n	8009426 <__gethex+0x13e>
 80093cc:	2b2d      	cmp	r3, #45	; 0x2d
 80093ce:	d02e      	beq.n	800942e <__gethex+0x146>
 80093d0:	1c71      	adds	r1, r6, #1
 80093d2:	f04f 0900 	mov.w	r9, #0
 80093d6:	7808      	ldrb	r0, [r1, #0]
 80093d8:	f7ff ff71 	bl	80092be <__hexdig_fun>
 80093dc:	1e43      	subs	r3, r0, #1
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	2b18      	cmp	r3, #24
 80093e2:	d82c      	bhi.n	800943e <__gethex+0x156>
 80093e4:	f1a0 0210 	sub.w	r2, r0, #16
 80093e8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80093ec:	f7ff ff67 	bl	80092be <__hexdig_fun>
 80093f0:	1e43      	subs	r3, r0, #1
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	2b18      	cmp	r3, #24
 80093f6:	d91d      	bls.n	8009434 <__gethex+0x14c>
 80093f8:	f1b9 0f00 	cmp.w	r9, #0
 80093fc:	d000      	beq.n	8009400 <__gethex+0x118>
 80093fe:	4252      	negs	r2, r2
 8009400:	4415      	add	r5, r2
 8009402:	f8cb 1000 	str.w	r1, [fp]
 8009406:	b1e4      	cbz	r4, 8009442 <__gethex+0x15a>
 8009408:	9b00      	ldr	r3, [sp, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	bf14      	ite	ne
 800940e:	2700      	movne	r7, #0
 8009410:	2706      	moveq	r7, #6
 8009412:	4638      	mov	r0, r7
 8009414:	b009      	add	sp, #36	; 0x24
 8009416:	ecbd 8b02 	vpop	{d8}
 800941a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800941e:	463e      	mov	r6, r7
 8009420:	4625      	mov	r5, r4
 8009422:	2401      	movs	r4, #1
 8009424:	e7ca      	b.n	80093bc <__gethex+0xd4>
 8009426:	f04f 0900 	mov.w	r9, #0
 800942a:	1cb1      	adds	r1, r6, #2
 800942c:	e7d3      	b.n	80093d6 <__gethex+0xee>
 800942e:	f04f 0901 	mov.w	r9, #1
 8009432:	e7fa      	b.n	800942a <__gethex+0x142>
 8009434:	230a      	movs	r3, #10
 8009436:	fb03 0202 	mla	r2, r3, r2, r0
 800943a:	3a10      	subs	r2, #16
 800943c:	e7d4      	b.n	80093e8 <__gethex+0x100>
 800943e:	4631      	mov	r1, r6
 8009440:	e7df      	b.n	8009402 <__gethex+0x11a>
 8009442:	1bf3      	subs	r3, r6, r7
 8009444:	3b01      	subs	r3, #1
 8009446:	4621      	mov	r1, r4
 8009448:	2b07      	cmp	r3, #7
 800944a:	dc0b      	bgt.n	8009464 <__gethex+0x17c>
 800944c:	ee18 0a10 	vmov	r0, s16
 8009450:	f000 fadc 	bl	8009a0c <_Balloc>
 8009454:	4604      	mov	r4, r0
 8009456:	b940      	cbnz	r0, 800946a <__gethex+0x182>
 8009458:	4b5d      	ldr	r3, [pc, #372]	; (80095d0 <__gethex+0x2e8>)
 800945a:	4602      	mov	r2, r0
 800945c:	21de      	movs	r1, #222	; 0xde
 800945e:	485d      	ldr	r0, [pc, #372]	; (80095d4 <__gethex+0x2ec>)
 8009460:	f001 fac8 	bl	800a9f4 <__assert_func>
 8009464:	3101      	adds	r1, #1
 8009466:	105b      	asrs	r3, r3, #1
 8009468:	e7ee      	b.n	8009448 <__gethex+0x160>
 800946a:	f100 0914 	add.w	r9, r0, #20
 800946e:	f04f 0b00 	mov.w	fp, #0
 8009472:	f1ca 0301 	rsb	r3, sl, #1
 8009476:	f8cd 9008 	str.w	r9, [sp, #8]
 800947a:	f8cd b000 	str.w	fp, [sp]
 800947e:	9306      	str	r3, [sp, #24]
 8009480:	42b7      	cmp	r7, r6
 8009482:	d340      	bcc.n	8009506 <__gethex+0x21e>
 8009484:	9802      	ldr	r0, [sp, #8]
 8009486:	9b00      	ldr	r3, [sp, #0]
 8009488:	f840 3b04 	str.w	r3, [r0], #4
 800948c:	eba0 0009 	sub.w	r0, r0, r9
 8009490:	1080      	asrs	r0, r0, #2
 8009492:	0146      	lsls	r6, r0, #5
 8009494:	6120      	str	r0, [r4, #16]
 8009496:	4618      	mov	r0, r3
 8009498:	f000 fbaa 	bl	8009bf0 <__hi0bits>
 800949c:	1a30      	subs	r0, r6, r0
 800949e:	f8d8 6000 	ldr.w	r6, [r8]
 80094a2:	42b0      	cmp	r0, r6
 80094a4:	dd63      	ble.n	800956e <__gethex+0x286>
 80094a6:	1b87      	subs	r7, r0, r6
 80094a8:	4639      	mov	r1, r7
 80094aa:	4620      	mov	r0, r4
 80094ac:	f000 ff4e 	bl	800a34c <__any_on>
 80094b0:	4682      	mov	sl, r0
 80094b2:	b1a8      	cbz	r0, 80094e0 <__gethex+0x1f8>
 80094b4:	1e7b      	subs	r3, r7, #1
 80094b6:	1159      	asrs	r1, r3, #5
 80094b8:	f003 021f 	and.w	r2, r3, #31
 80094bc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80094c0:	f04f 0a01 	mov.w	sl, #1
 80094c4:	fa0a f202 	lsl.w	r2, sl, r2
 80094c8:	420a      	tst	r2, r1
 80094ca:	d009      	beq.n	80094e0 <__gethex+0x1f8>
 80094cc:	4553      	cmp	r3, sl
 80094ce:	dd05      	ble.n	80094dc <__gethex+0x1f4>
 80094d0:	1eb9      	subs	r1, r7, #2
 80094d2:	4620      	mov	r0, r4
 80094d4:	f000 ff3a 	bl	800a34c <__any_on>
 80094d8:	2800      	cmp	r0, #0
 80094da:	d145      	bne.n	8009568 <__gethex+0x280>
 80094dc:	f04f 0a02 	mov.w	sl, #2
 80094e0:	4639      	mov	r1, r7
 80094e2:	4620      	mov	r0, r4
 80094e4:	f7ff fe99 	bl	800921a <rshift>
 80094e8:	443d      	add	r5, r7
 80094ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80094ee:	42ab      	cmp	r3, r5
 80094f0:	da4c      	bge.n	800958c <__gethex+0x2a4>
 80094f2:	ee18 0a10 	vmov	r0, s16
 80094f6:	4621      	mov	r1, r4
 80094f8:	f000 fac8 	bl	8009a8c <_Bfree>
 80094fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80094fe:	2300      	movs	r3, #0
 8009500:	6013      	str	r3, [r2, #0]
 8009502:	27a3      	movs	r7, #163	; 0xa3
 8009504:	e785      	b.n	8009412 <__gethex+0x12a>
 8009506:	1e73      	subs	r3, r6, #1
 8009508:	9a05      	ldr	r2, [sp, #20]
 800950a:	9303      	str	r3, [sp, #12]
 800950c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009510:	4293      	cmp	r3, r2
 8009512:	d019      	beq.n	8009548 <__gethex+0x260>
 8009514:	f1bb 0f20 	cmp.w	fp, #32
 8009518:	d107      	bne.n	800952a <__gethex+0x242>
 800951a:	9b02      	ldr	r3, [sp, #8]
 800951c:	9a00      	ldr	r2, [sp, #0]
 800951e:	f843 2b04 	str.w	r2, [r3], #4
 8009522:	9302      	str	r3, [sp, #8]
 8009524:	2300      	movs	r3, #0
 8009526:	9300      	str	r3, [sp, #0]
 8009528:	469b      	mov	fp, r3
 800952a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800952e:	f7ff fec6 	bl	80092be <__hexdig_fun>
 8009532:	9b00      	ldr	r3, [sp, #0]
 8009534:	f000 000f 	and.w	r0, r0, #15
 8009538:	fa00 f00b 	lsl.w	r0, r0, fp
 800953c:	4303      	orrs	r3, r0
 800953e:	9300      	str	r3, [sp, #0]
 8009540:	f10b 0b04 	add.w	fp, fp, #4
 8009544:	9b03      	ldr	r3, [sp, #12]
 8009546:	e00d      	b.n	8009564 <__gethex+0x27c>
 8009548:	9b03      	ldr	r3, [sp, #12]
 800954a:	9a06      	ldr	r2, [sp, #24]
 800954c:	4413      	add	r3, r2
 800954e:	42bb      	cmp	r3, r7
 8009550:	d3e0      	bcc.n	8009514 <__gethex+0x22c>
 8009552:	4618      	mov	r0, r3
 8009554:	9901      	ldr	r1, [sp, #4]
 8009556:	9307      	str	r3, [sp, #28]
 8009558:	4652      	mov	r2, sl
 800955a:	f001 fa18 	bl	800a98e <strncmp>
 800955e:	9b07      	ldr	r3, [sp, #28]
 8009560:	2800      	cmp	r0, #0
 8009562:	d1d7      	bne.n	8009514 <__gethex+0x22c>
 8009564:	461e      	mov	r6, r3
 8009566:	e78b      	b.n	8009480 <__gethex+0x198>
 8009568:	f04f 0a03 	mov.w	sl, #3
 800956c:	e7b8      	b.n	80094e0 <__gethex+0x1f8>
 800956e:	da0a      	bge.n	8009586 <__gethex+0x29e>
 8009570:	1a37      	subs	r7, r6, r0
 8009572:	4621      	mov	r1, r4
 8009574:	ee18 0a10 	vmov	r0, s16
 8009578:	463a      	mov	r2, r7
 800957a:	f000 fca3 	bl	8009ec4 <__lshift>
 800957e:	1bed      	subs	r5, r5, r7
 8009580:	4604      	mov	r4, r0
 8009582:	f100 0914 	add.w	r9, r0, #20
 8009586:	f04f 0a00 	mov.w	sl, #0
 800958a:	e7ae      	b.n	80094ea <__gethex+0x202>
 800958c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009590:	42a8      	cmp	r0, r5
 8009592:	dd72      	ble.n	800967a <__gethex+0x392>
 8009594:	1b45      	subs	r5, r0, r5
 8009596:	42ae      	cmp	r6, r5
 8009598:	dc36      	bgt.n	8009608 <__gethex+0x320>
 800959a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800959e:	2b02      	cmp	r3, #2
 80095a0:	d02a      	beq.n	80095f8 <__gethex+0x310>
 80095a2:	2b03      	cmp	r3, #3
 80095a4:	d02c      	beq.n	8009600 <__gethex+0x318>
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d11c      	bne.n	80095e4 <__gethex+0x2fc>
 80095aa:	42ae      	cmp	r6, r5
 80095ac:	d11a      	bne.n	80095e4 <__gethex+0x2fc>
 80095ae:	2e01      	cmp	r6, #1
 80095b0:	d112      	bne.n	80095d8 <__gethex+0x2f0>
 80095b2:	9a04      	ldr	r2, [sp, #16]
 80095b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80095b8:	6013      	str	r3, [r2, #0]
 80095ba:	2301      	movs	r3, #1
 80095bc:	6123      	str	r3, [r4, #16]
 80095be:	f8c9 3000 	str.w	r3, [r9]
 80095c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80095c4:	2762      	movs	r7, #98	; 0x62
 80095c6:	601c      	str	r4, [r3, #0]
 80095c8:	e723      	b.n	8009412 <__gethex+0x12a>
 80095ca:	bf00      	nop
 80095cc:	0800b7f4 	.word	0x0800b7f4
 80095d0:	0800b718 	.word	0x0800b718
 80095d4:	0800b78c 	.word	0x0800b78c
 80095d8:	1e71      	subs	r1, r6, #1
 80095da:	4620      	mov	r0, r4
 80095dc:	f000 feb6 	bl	800a34c <__any_on>
 80095e0:	2800      	cmp	r0, #0
 80095e2:	d1e6      	bne.n	80095b2 <__gethex+0x2ca>
 80095e4:	ee18 0a10 	vmov	r0, s16
 80095e8:	4621      	mov	r1, r4
 80095ea:	f000 fa4f 	bl	8009a8c <_Bfree>
 80095ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80095f0:	2300      	movs	r3, #0
 80095f2:	6013      	str	r3, [r2, #0]
 80095f4:	2750      	movs	r7, #80	; 0x50
 80095f6:	e70c      	b.n	8009412 <__gethex+0x12a>
 80095f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d1f2      	bne.n	80095e4 <__gethex+0x2fc>
 80095fe:	e7d8      	b.n	80095b2 <__gethex+0x2ca>
 8009600:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009602:	2b00      	cmp	r3, #0
 8009604:	d1d5      	bne.n	80095b2 <__gethex+0x2ca>
 8009606:	e7ed      	b.n	80095e4 <__gethex+0x2fc>
 8009608:	1e6f      	subs	r7, r5, #1
 800960a:	f1ba 0f00 	cmp.w	sl, #0
 800960e:	d131      	bne.n	8009674 <__gethex+0x38c>
 8009610:	b127      	cbz	r7, 800961c <__gethex+0x334>
 8009612:	4639      	mov	r1, r7
 8009614:	4620      	mov	r0, r4
 8009616:	f000 fe99 	bl	800a34c <__any_on>
 800961a:	4682      	mov	sl, r0
 800961c:	117b      	asrs	r3, r7, #5
 800961e:	2101      	movs	r1, #1
 8009620:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009624:	f007 071f 	and.w	r7, r7, #31
 8009628:	fa01 f707 	lsl.w	r7, r1, r7
 800962c:	421f      	tst	r7, r3
 800962e:	4629      	mov	r1, r5
 8009630:	4620      	mov	r0, r4
 8009632:	bf18      	it	ne
 8009634:	f04a 0a02 	orrne.w	sl, sl, #2
 8009638:	1b76      	subs	r6, r6, r5
 800963a:	f7ff fdee 	bl	800921a <rshift>
 800963e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009642:	2702      	movs	r7, #2
 8009644:	f1ba 0f00 	cmp.w	sl, #0
 8009648:	d048      	beq.n	80096dc <__gethex+0x3f4>
 800964a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800964e:	2b02      	cmp	r3, #2
 8009650:	d015      	beq.n	800967e <__gethex+0x396>
 8009652:	2b03      	cmp	r3, #3
 8009654:	d017      	beq.n	8009686 <__gethex+0x39e>
 8009656:	2b01      	cmp	r3, #1
 8009658:	d109      	bne.n	800966e <__gethex+0x386>
 800965a:	f01a 0f02 	tst.w	sl, #2
 800965e:	d006      	beq.n	800966e <__gethex+0x386>
 8009660:	f8d9 0000 	ldr.w	r0, [r9]
 8009664:	ea4a 0a00 	orr.w	sl, sl, r0
 8009668:	f01a 0f01 	tst.w	sl, #1
 800966c:	d10e      	bne.n	800968c <__gethex+0x3a4>
 800966e:	f047 0710 	orr.w	r7, r7, #16
 8009672:	e033      	b.n	80096dc <__gethex+0x3f4>
 8009674:	f04f 0a01 	mov.w	sl, #1
 8009678:	e7d0      	b.n	800961c <__gethex+0x334>
 800967a:	2701      	movs	r7, #1
 800967c:	e7e2      	b.n	8009644 <__gethex+0x35c>
 800967e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009680:	f1c3 0301 	rsb	r3, r3, #1
 8009684:	9315      	str	r3, [sp, #84]	; 0x54
 8009686:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009688:	2b00      	cmp	r3, #0
 800968a:	d0f0      	beq.n	800966e <__gethex+0x386>
 800968c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009690:	f104 0314 	add.w	r3, r4, #20
 8009694:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009698:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800969c:	f04f 0c00 	mov.w	ip, #0
 80096a0:	4618      	mov	r0, r3
 80096a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80096a6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80096aa:	d01c      	beq.n	80096e6 <__gethex+0x3fe>
 80096ac:	3201      	adds	r2, #1
 80096ae:	6002      	str	r2, [r0, #0]
 80096b0:	2f02      	cmp	r7, #2
 80096b2:	f104 0314 	add.w	r3, r4, #20
 80096b6:	d13f      	bne.n	8009738 <__gethex+0x450>
 80096b8:	f8d8 2000 	ldr.w	r2, [r8]
 80096bc:	3a01      	subs	r2, #1
 80096be:	42b2      	cmp	r2, r6
 80096c0:	d10a      	bne.n	80096d8 <__gethex+0x3f0>
 80096c2:	1171      	asrs	r1, r6, #5
 80096c4:	2201      	movs	r2, #1
 80096c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80096ca:	f006 061f 	and.w	r6, r6, #31
 80096ce:	fa02 f606 	lsl.w	r6, r2, r6
 80096d2:	421e      	tst	r6, r3
 80096d4:	bf18      	it	ne
 80096d6:	4617      	movne	r7, r2
 80096d8:	f047 0720 	orr.w	r7, r7, #32
 80096dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80096de:	601c      	str	r4, [r3, #0]
 80096e0:	9b04      	ldr	r3, [sp, #16]
 80096e2:	601d      	str	r5, [r3, #0]
 80096e4:	e695      	b.n	8009412 <__gethex+0x12a>
 80096e6:	4299      	cmp	r1, r3
 80096e8:	f843 cc04 	str.w	ip, [r3, #-4]
 80096ec:	d8d8      	bhi.n	80096a0 <__gethex+0x3b8>
 80096ee:	68a3      	ldr	r3, [r4, #8]
 80096f0:	459b      	cmp	fp, r3
 80096f2:	db19      	blt.n	8009728 <__gethex+0x440>
 80096f4:	6861      	ldr	r1, [r4, #4]
 80096f6:	ee18 0a10 	vmov	r0, s16
 80096fa:	3101      	adds	r1, #1
 80096fc:	f000 f986 	bl	8009a0c <_Balloc>
 8009700:	4681      	mov	r9, r0
 8009702:	b918      	cbnz	r0, 800970c <__gethex+0x424>
 8009704:	4b1a      	ldr	r3, [pc, #104]	; (8009770 <__gethex+0x488>)
 8009706:	4602      	mov	r2, r0
 8009708:	2184      	movs	r1, #132	; 0x84
 800970a:	e6a8      	b.n	800945e <__gethex+0x176>
 800970c:	6922      	ldr	r2, [r4, #16]
 800970e:	3202      	adds	r2, #2
 8009710:	f104 010c 	add.w	r1, r4, #12
 8009714:	0092      	lsls	r2, r2, #2
 8009716:	300c      	adds	r0, #12
 8009718:	f7fc fcc8 	bl	80060ac <memcpy>
 800971c:	4621      	mov	r1, r4
 800971e:	ee18 0a10 	vmov	r0, s16
 8009722:	f000 f9b3 	bl	8009a8c <_Bfree>
 8009726:	464c      	mov	r4, r9
 8009728:	6923      	ldr	r3, [r4, #16]
 800972a:	1c5a      	adds	r2, r3, #1
 800972c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009730:	6122      	str	r2, [r4, #16]
 8009732:	2201      	movs	r2, #1
 8009734:	615a      	str	r2, [r3, #20]
 8009736:	e7bb      	b.n	80096b0 <__gethex+0x3c8>
 8009738:	6922      	ldr	r2, [r4, #16]
 800973a:	455a      	cmp	r2, fp
 800973c:	dd0b      	ble.n	8009756 <__gethex+0x46e>
 800973e:	2101      	movs	r1, #1
 8009740:	4620      	mov	r0, r4
 8009742:	f7ff fd6a 	bl	800921a <rshift>
 8009746:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800974a:	3501      	adds	r5, #1
 800974c:	42ab      	cmp	r3, r5
 800974e:	f6ff aed0 	blt.w	80094f2 <__gethex+0x20a>
 8009752:	2701      	movs	r7, #1
 8009754:	e7c0      	b.n	80096d8 <__gethex+0x3f0>
 8009756:	f016 061f 	ands.w	r6, r6, #31
 800975a:	d0fa      	beq.n	8009752 <__gethex+0x46a>
 800975c:	4453      	add	r3, sl
 800975e:	f1c6 0620 	rsb	r6, r6, #32
 8009762:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009766:	f000 fa43 	bl	8009bf0 <__hi0bits>
 800976a:	42b0      	cmp	r0, r6
 800976c:	dbe7      	blt.n	800973e <__gethex+0x456>
 800976e:	e7f0      	b.n	8009752 <__gethex+0x46a>
 8009770:	0800b718 	.word	0x0800b718

08009774 <L_shift>:
 8009774:	f1c2 0208 	rsb	r2, r2, #8
 8009778:	0092      	lsls	r2, r2, #2
 800977a:	b570      	push	{r4, r5, r6, lr}
 800977c:	f1c2 0620 	rsb	r6, r2, #32
 8009780:	6843      	ldr	r3, [r0, #4]
 8009782:	6804      	ldr	r4, [r0, #0]
 8009784:	fa03 f506 	lsl.w	r5, r3, r6
 8009788:	432c      	orrs	r4, r5
 800978a:	40d3      	lsrs	r3, r2
 800978c:	6004      	str	r4, [r0, #0]
 800978e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009792:	4288      	cmp	r0, r1
 8009794:	d3f4      	bcc.n	8009780 <L_shift+0xc>
 8009796:	bd70      	pop	{r4, r5, r6, pc}

08009798 <__match>:
 8009798:	b530      	push	{r4, r5, lr}
 800979a:	6803      	ldr	r3, [r0, #0]
 800979c:	3301      	adds	r3, #1
 800979e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097a2:	b914      	cbnz	r4, 80097aa <__match+0x12>
 80097a4:	6003      	str	r3, [r0, #0]
 80097a6:	2001      	movs	r0, #1
 80097a8:	bd30      	pop	{r4, r5, pc}
 80097aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80097b2:	2d19      	cmp	r5, #25
 80097b4:	bf98      	it	ls
 80097b6:	3220      	addls	r2, #32
 80097b8:	42a2      	cmp	r2, r4
 80097ba:	d0f0      	beq.n	800979e <__match+0x6>
 80097bc:	2000      	movs	r0, #0
 80097be:	e7f3      	b.n	80097a8 <__match+0x10>

080097c0 <__hexnan>:
 80097c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097c4:	680b      	ldr	r3, [r1, #0]
 80097c6:	115e      	asrs	r6, r3, #5
 80097c8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80097cc:	f013 031f 	ands.w	r3, r3, #31
 80097d0:	b087      	sub	sp, #28
 80097d2:	bf18      	it	ne
 80097d4:	3604      	addne	r6, #4
 80097d6:	2500      	movs	r5, #0
 80097d8:	1f37      	subs	r7, r6, #4
 80097da:	4690      	mov	r8, r2
 80097dc:	6802      	ldr	r2, [r0, #0]
 80097de:	9301      	str	r3, [sp, #4]
 80097e0:	4682      	mov	sl, r0
 80097e2:	f846 5c04 	str.w	r5, [r6, #-4]
 80097e6:	46b9      	mov	r9, r7
 80097e8:	463c      	mov	r4, r7
 80097ea:	9502      	str	r5, [sp, #8]
 80097ec:	46ab      	mov	fp, r5
 80097ee:	7851      	ldrb	r1, [r2, #1]
 80097f0:	1c53      	adds	r3, r2, #1
 80097f2:	9303      	str	r3, [sp, #12]
 80097f4:	b341      	cbz	r1, 8009848 <__hexnan+0x88>
 80097f6:	4608      	mov	r0, r1
 80097f8:	9205      	str	r2, [sp, #20]
 80097fa:	9104      	str	r1, [sp, #16]
 80097fc:	f7ff fd5f 	bl	80092be <__hexdig_fun>
 8009800:	2800      	cmp	r0, #0
 8009802:	d14f      	bne.n	80098a4 <__hexnan+0xe4>
 8009804:	9904      	ldr	r1, [sp, #16]
 8009806:	9a05      	ldr	r2, [sp, #20]
 8009808:	2920      	cmp	r1, #32
 800980a:	d818      	bhi.n	800983e <__hexnan+0x7e>
 800980c:	9b02      	ldr	r3, [sp, #8]
 800980e:	459b      	cmp	fp, r3
 8009810:	dd13      	ble.n	800983a <__hexnan+0x7a>
 8009812:	454c      	cmp	r4, r9
 8009814:	d206      	bcs.n	8009824 <__hexnan+0x64>
 8009816:	2d07      	cmp	r5, #7
 8009818:	dc04      	bgt.n	8009824 <__hexnan+0x64>
 800981a:	462a      	mov	r2, r5
 800981c:	4649      	mov	r1, r9
 800981e:	4620      	mov	r0, r4
 8009820:	f7ff ffa8 	bl	8009774 <L_shift>
 8009824:	4544      	cmp	r4, r8
 8009826:	d950      	bls.n	80098ca <__hexnan+0x10a>
 8009828:	2300      	movs	r3, #0
 800982a:	f1a4 0904 	sub.w	r9, r4, #4
 800982e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009832:	f8cd b008 	str.w	fp, [sp, #8]
 8009836:	464c      	mov	r4, r9
 8009838:	461d      	mov	r5, r3
 800983a:	9a03      	ldr	r2, [sp, #12]
 800983c:	e7d7      	b.n	80097ee <__hexnan+0x2e>
 800983e:	2929      	cmp	r1, #41	; 0x29
 8009840:	d156      	bne.n	80098f0 <__hexnan+0x130>
 8009842:	3202      	adds	r2, #2
 8009844:	f8ca 2000 	str.w	r2, [sl]
 8009848:	f1bb 0f00 	cmp.w	fp, #0
 800984c:	d050      	beq.n	80098f0 <__hexnan+0x130>
 800984e:	454c      	cmp	r4, r9
 8009850:	d206      	bcs.n	8009860 <__hexnan+0xa0>
 8009852:	2d07      	cmp	r5, #7
 8009854:	dc04      	bgt.n	8009860 <__hexnan+0xa0>
 8009856:	462a      	mov	r2, r5
 8009858:	4649      	mov	r1, r9
 800985a:	4620      	mov	r0, r4
 800985c:	f7ff ff8a 	bl	8009774 <L_shift>
 8009860:	4544      	cmp	r4, r8
 8009862:	d934      	bls.n	80098ce <__hexnan+0x10e>
 8009864:	f1a8 0204 	sub.w	r2, r8, #4
 8009868:	4623      	mov	r3, r4
 800986a:	f853 1b04 	ldr.w	r1, [r3], #4
 800986e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009872:	429f      	cmp	r7, r3
 8009874:	d2f9      	bcs.n	800986a <__hexnan+0xaa>
 8009876:	1b3b      	subs	r3, r7, r4
 8009878:	f023 0303 	bic.w	r3, r3, #3
 800987c:	3304      	adds	r3, #4
 800987e:	3401      	adds	r4, #1
 8009880:	3e03      	subs	r6, #3
 8009882:	42b4      	cmp	r4, r6
 8009884:	bf88      	it	hi
 8009886:	2304      	movhi	r3, #4
 8009888:	4443      	add	r3, r8
 800988a:	2200      	movs	r2, #0
 800988c:	f843 2b04 	str.w	r2, [r3], #4
 8009890:	429f      	cmp	r7, r3
 8009892:	d2fb      	bcs.n	800988c <__hexnan+0xcc>
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	b91b      	cbnz	r3, 80098a0 <__hexnan+0xe0>
 8009898:	4547      	cmp	r7, r8
 800989a:	d127      	bne.n	80098ec <__hexnan+0x12c>
 800989c:	2301      	movs	r3, #1
 800989e:	603b      	str	r3, [r7, #0]
 80098a0:	2005      	movs	r0, #5
 80098a2:	e026      	b.n	80098f2 <__hexnan+0x132>
 80098a4:	3501      	adds	r5, #1
 80098a6:	2d08      	cmp	r5, #8
 80098a8:	f10b 0b01 	add.w	fp, fp, #1
 80098ac:	dd06      	ble.n	80098bc <__hexnan+0xfc>
 80098ae:	4544      	cmp	r4, r8
 80098b0:	d9c3      	bls.n	800983a <__hexnan+0x7a>
 80098b2:	2300      	movs	r3, #0
 80098b4:	f844 3c04 	str.w	r3, [r4, #-4]
 80098b8:	2501      	movs	r5, #1
 80098ba:	3c04      	subs	r4, #4
 80098bc:	6822      	ldr	r2, [r4, #0]
 80098be:	f000 000f 	and.w	r0, r0, #15
 80098c2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80098c6:	6022      	str	r2, [r4, #0]
 80098c8:	e7b7      	b.n	800983a <__hexnan+0x7a>
 80098ca:	2508      	movs	r5, #8
 80098cc:	e7b5      	b.n	800983a <__hexnan+0x7a>
 80098ce:	9b01      	ldr	r3, [sp, #4]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d0df      	beq.n	8009894 <__hexnan+0xd4>
 80098d4:	f04f 32ff 	mov.w	r2, #4294967295
 80098d8:	f1c3 0320 	rsb	r3, r3, #32
 80098dc:	fa22 f303 	lsr.w	r3, r2, r3
 80098e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80098e4:	401a      	ands	r2, r3
 80098e6:	f846 2c04 	str.w	r2, [r6, #-4]
 80098ea:	e7d3      	b.n	8009894 <__hexnan+0xd4>
 80098ec:	3f04      	subs	r7, #4
 80098ee:	e7d1      	b.n	8009894 <__hexnan+0xd4>
 80098f0:	2004      	movs	r0, #4
 80098f2:	b007      	add	sp, #28
 80098f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080098f8 <_localeconv_r>:
 80098f8:	4800      	ldr	r0, [pc, #0]	; (80098fc <_localeconv_r+0x4>)
 80098fa:	4770      	bx	lr
 80098fc:	20000164 	.word	0x20000164

08009900 <__retarget_lock_init_recursive>:
 8009900:	4770      	bx	lr

08009902 <__retarget_lock_acquire_recursive>:
 8009902:	4770      	bx	lr

08009904 <__retarget_lock_release_recursive>:
 8009904:	4770      	bx	lr

08009906 <__swhatbuf_r>:
 8009906:	b570      	push	{r4, r5, r6, lr}
 8009908:	460e      	mov	r6, r1
 800990a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800990e:	2900      	cmp	r1, #0
 8009910:	b096      	sub	sp, #88	; 0x58
 8009912:	4614      	mov	r4, r2
 8009914:	461d      	mov	r5, r3
 8009916:	da08      	bge.n	800992a <__swhatbuf_r+0x24>
 8009918:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800991c:	2200      	movs	r2, #0
 800991e:	602a      	str	r2, [r5, #0]
 8009920:	061a      	lsls	r2, r3, #24
 8009922:	d410      	bmi.n	8009946 <__swhatbuf_r+0x40>
 8009924:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009928:	e00e      	b.n	8009948 <__swhatbuf_r+0x42>
 800992a:	466a      	mov	r2, sp
 800992c:	f001 f8a2 	bl	800aa74 <_fstat_r>
 8009930:	2800      	cmp	r0, #0
 8009932:	dbf1      	blt.n	8009918 <__swhatbuf_r+0x12>
 8009934:	9a01      	ldr	r2, [sp, #4]
 8009936:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800993a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800993e:	425a      	negs	r2, r3
 8009940:	415a      	adcs	r2, r3
 8009942:	602a      	str	r2, [r5, #0]
 8009944:	e7ee      	b.n	8009924 <__swhatbuf_r+0x1e>
 8009946:	2340      	movs	r3, #64	; 0x40
 8009948:	2000      	movs	r0, #0
 800994a:	6023      	str	r3, [r4, #0]
 800994c:	b016      	add	sp, #88	; 0x58
 800994e:	bd70      	pop	{r4, r5, r6, pc}

08009950 <__smakebuf_r>:
 8009950:	898b      	ldrh	r3, [r1, #12]
 8009952:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009954:	079d      	lsls	r5, r3, #30
 8009956:	4606      	mov	r6, r0
 8009958:	460c      	mov	r4, r1
 800995a:	d507      	bpl.n	800996c <__smakebuf_r+0x1c>
 800995c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009960:	6023      	str	r3, [r4, #0]
 8009962:	6123      	str	r3, [r4, #16]
 8009964:	2301      	movs	r3, #1
 8009966:	6163      	str	r3, [r4, #20]
 8009968:	b002      	add	sp, #8
 800996a:	bd70      	pop	{r4, r5, r6, pc}
 800996c:	ab01      	add	r3, sp, #4
 800996e:	466a      	mov	r2, sp
 8009970:	f7ff ffc9 	bl	8009906 <__swhatbuf_r>
 8009974:	9900      	ldr	r1, [sp, #0]
 8009976:	4605      	mov	r5, r0
 8009978:	4630      	mov	r0, r6
 800997a:	f7fc fc2f 	bl	80061dc <_malloc_r>
 800997e:	b948      	cbnz	r0, 8009994 <__smakebuf_r+0x44>
 8009980:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009984:	059a      	lsls	r2, r3, #22
 8009986:	d4ef      	bmi.n	8009968 <__smakebuf_r+0x18>
 8009988:	f023 0303 	bic.w	r3, r3, #3
 800998c:	f043 0302 	orr.w	r3, r3, #2
 8009990:	81a3      	strh	r3, [r4, #12]
 8009992:	e7e3      	b.n	800995c <__smakebuf_r+0xc>
 8009994:	4b0d      	ldr	r3, [pc, #52]	; (80099cc <__smakebuf_r+0x7c>)
 8009996:	62b3      	str	r3, [r6, #40]	; 0x28
 8009998:	89a3      	ldrh	r3, [r4, #12]
 800999a:	6020      	str	r0, [r4, #0]
 800999c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099a0:	81a3      	strh	r3, [r4, #12]
 80099a2:	9b00      	ldr	r3, [sp, #0]
 80099a4:	6163      	str	r3, [r4, #20]
 80099a6:	9b01      	ldr	r3, [sp, #4]
 80099a8:	6120      	str	r0, [r4, #16]
 80099aa:	b15b      	cbz	r3, 80099c4 <__smakebuf_r+0x74>
 80099ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099b0:	4630      	mov	r0, r6
 80099b2:	f001 f871 	bl	800aa98 <_isatty_r>
 80099b6:	b128      	cbz	r0, 80099c4 <__smakebuf_r+0x74>
 80099b8:	89a3      	ldrh	r3, [r4, #12]
 80099ba:	f023 0303 	bic.w	r3, r3, #3
 80099be:	f043 0301 	orr.w	r3, r3, #1
 80099c2:	81a3      	strh	r3, [r4, #12]
 80099c4:	89a0      	ldrh	r0, [r4, #12]
 80099c6:	4305      	orrs	r5, r0
 80099c8:	81a5      	strh	r5, [r4, #12]
 80099ca:	e7cd      	b.n	8009968 <__smakebuf_r+0x18>
 80099cc:	08009079 	.word	0x08009079

080099d0 <__ascii_mbtowc>:
 80099d0:	b082      	sub	sp, #8
 80099d2:	b901      	cbnz	r1, 80099d6 <__ascii_mbtowc+0x6>
 80099d4:	a901      	add	r1, sp, #4
 80099d6:	b142      	cbz	r2, 80099ea <__ascii_mbtowc+0x1a>
 80099d8:	b14b      	cbz	r3, 80099ee <__ascii_mbtowc+0x1e>
 80099da:	7813      	ldrb	r3, [r2, #0]
 80099dc:	600b      	str	r3, [r1, #0]
 80099de:	7812      	ldrb	r2, [r2, #0]
 80099e0:	1e10      	subs	r0, r2, #0
 80099e2:	bf18      	it	ne
 80099e4:	2001      	movne	r0, #1
 80099e6:	b002      	add	sp, #8
 80099e8:	4770      	bx	lr
 80099ea:	4610      	mov	r0, r2
 80099ec:	e7fb      	b.n	80099e6 <__ascii_mbtowc+0x16>
 80099ee:	f06f 0001 	mvn.w	r0, #1
 80099f2:	e7f8      	b.n	80099e6 <__ascii_mbtowc+0x16>

080099f4 <__malloc_lock>:
 80099f4:	4801      	ldr	r0, [pc, #4]	; (80099fc <__malloc_lock+0x8>)
 80099f6:	f7ff bf84 	b.w	8009902 <__retarget_lock_acquire_recursive>
 80099fa:	bf00      	nop
 80099fc:	20001368 	.word	0x20001368

08009a00 <__malloc_unlock>:
 8009a00:	4801      	ldr	r0, [pc, #4]	; (8009a08 <__malloc_unlock+0x8>)
 8009a02:	f7ff bf7f 	b.w	8009904 <__retarget_lock_release_recursive>
 8009a06:	bf00      	nop
 8009a08:	20001368 	.word	0x20001368

08009a0c <_Balloc>:
 8009a0c:	b570      	push	{r4, r5, r6, lr}
 8009a0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009a10:	4604      	mov	r4, r0
 8009a12:	460d      	mov	r5, r1
 8009a14:	b976      	cbnz	r6, 8009a34 <_Balloc+0x28>
 8009a16:	2010      	movs	r0, #16
 8009a18:	f7fc fb40 	bl	800609c <malloc>
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	6260      	str	r0, [r4, #36]	; 0x24
 8009a20:	b920      	cbnz	r0, 8009a2c <_Balloc+0x20>
 8009a22:	4b18      	ldr	r3, [pc, #96]	; (8009a84 <_Balloc+0x78>)
 8009a24:	4818      	ldr	r0, [pc, #96]	; (8009a88 <_Balloc+0x7c>)
 8009a26:	2166      	movs	r1, #102	; 0x66
 8009a28:	f000 ffe4 	bl	800a9f4 <__assert_func>
 8009a2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a30:	6006      	str	r6, [r0, #0]
 8009a32:	60c6      	str	r6, [r0, #12]
 8009a34:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009a36:	68f3      	ldr	r3, [r6, #12]
 8009a38:	b183      	cbz	r3, 8009a5c <_Balloc+0x50>
 8009a3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a3c:	68db      	ldr	r3, [r3, #12]
 8009a3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009a42:	b9b8      	cbnz	r0, 8009a74 <_Balloc+0x68>
 8009a44:	2101      	movs	r1, #1
 8009a46:	fa01 f605 	lsl.w	r6, r1, r5
 8009a4a:	1d72      	adds	r2, r6, #5
 8009a4c:	0092      	lsls	r2, r2, #2
 8009a4e:	4620      	mov	r0, r4
 8009a50:	f7fc fb42 	bl	80060d8 <_calloc_r>
 8009a54:	b160      	cbz	r0, 8009a70 <_Balloc+0x64>
 8009a56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a5a:	e00e      	b.n	8009a7a <_Balloc+0x6e>
 8009a5c:	2221      	movs	r2, #33	; 0x21
 8009a5e:	2104      	movs	r1, #4
 8009a60:	4620      	mov	r0, r4
 8009a62:	f7fc fb39 	bl	80060d8 <_calloc_r>
 8009a66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a68:	60f0      	str	r0, [r6, #12]
 8009a6a:	68db      	ldr	r3, [r3, #12]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d1e4      	bne.n	8009a3a <_Balloc+0x2e>
 8009a70:	2000      	movs	r0, #0
 8009a72:	bd70      	pop	{r4, r5, r6, pc}
 8009a74:	6802      	ldr	r2, [r0, #0]
 8009a76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a80:	e7f7      	b.n	8009a72 <_Balloc+0x66>
 8009a82:	bf00      	nop
 8009a84:	0800b6a6 	.word	0x0800b6a6
 8009a88:	0800b808 	.word	0x0800b808

08009a8c <_Bfree>:
 8009a8c:	b570      	push	{r4, r5, r6, lr}
 8009a8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009a90:	4605      	mov	r5, r0
 8009a92:	460c      	mov	r4, r1
 8009a94:	b976      	cbnz	r6, 8009ab4 <_Bfree+0x28>
 8009a96:	2010      	movs	r0, #16
 8009a98:	f7fc fb00 	bl	800609c <malloc>
 8009a9c:	4602      	mov	r2, r0
 8009a9e:	6268      	str	r0, [r5, #36]	; 0x24
 8009aa0:	b920      	cbnz	r0, 8009aac <_Bfree+0x20>
 8009aa2:	4b09      	ldr	r3, [pc, #36]	; (8009ac8 <_Bfree+0x3c>)
 8009aa4:	4809      	ldr	r0, [pc, #36]	; (8009acc <_Bfree+0x40>)
 8009aa6:	218a      	movs	r1, #138	; 0x8a
 8009aa8:	f000 ffa4 	bl	800a9f4 <__assert_func>
 8009aac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ab0:	6006      	str	r6, [r0, #0]
 8009ab2:	60c6      	str	r6, [r0, #12]
 8009ab4:	b13c      	cbz	r4, 8009ac6 <_Bfree+0x3a>
 8009ab6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009ab8:	6862      	ldr	r2, [r4, #4]
 8009aba:	68db      	ldr	r3, [r3, #12]
 8009abc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009ac0:	6021      	str	r1, [r4, #0]
 8009ac2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009ac6:	bd70      	pop	{r4, r5, r6, pc}
 8009ac8:	0800b6a6 	.word	0x0800b6a6
 8009acc:	0800b808 	.word	0x0800b808

08009ad0 <__multadd>:
 8009ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ad4:	690d      	ldr	r5, [r1, #16]
 8009ad6:	4607      	mov	r7, r0
 8009ad8:	460c      	mov	r4, r1
 8009ada:	461e      	mov	r6, r3
 8009adc:	f101 0c14 	add.w	ip, r1, #20
 8009ae0:	2000      	movs	r0, #0
 8009ae2:	f8dc 3000 	ldr.w	r3, [ip]
 8009ae6:	b299      	uxth	r1, r3
 8009ae8:	fb02 6101 	mla	r1, r2, r1, r6
 8009aec:	0c1e      	lsrs	r6, r3, #16
 8009aee:	0c0b      	lsrs	r3, r1, #16
 8009af0:	fb02 3306 	mla	r3, r2, r6, r3
 8009af4:	b289      	uxth	r1, r1
 8009af6:	3001      	adds	r0, #1
 8009af8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009afc:	4285      	cmp	r5, r0
 8009afe:	f84c 1b04 	str.w	r1, [ip], #4
 8009b02:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009b06:	dcec      	bgt.n	8009ae2 <__multadd+0x12>
 8009b08:	b30e      	cbz	r6, 8009b4e <__multadd+0x7e>
 8009b0a:	68a3      	ldr	r3, [r4, #8]
 8009b0c:	42ab      	cmp	r3, r5
 8009b0e:	dc19      	bgt.n	8009b44 <__multadd+0x74>
 8009b10:	6861      	ldr	r1, [r4, #4]
 8009b12:	4638      	mov	r0, r7
 8009b14:	3101      	adds	r1, #1
 8009b16:	f7ff ff79 	bl	8009a0c <_Balloc>
 8009b1a:	4680      	mov	r8, r0
 8009b1c:	b928      	cbnz	r0, 8009b2a <__multadd+0x5a>
 8009b1e:	4602      	mov	r2, r0
 8009b20:	4b0c      	ldr	r3, [pc, #48]	; (8009b54 <__multadd+0x84>)
 8009b22:	480d      	ldr	r0, [pc, #52]	; (8009b58 <__multadd+0x88>)
 8009b24:	21b5      	movs	r1, #181	; 0xb5
 8009b26:	f000 ff65 	bl	800a9f4 <__assert_func>
 8009b2a:	6922      	ldr	r2, [r4, #16]
 8009b2c:	3202      	adds	r2, #2
 8009b2e:	f104 010c 	add.w	r1, r4, #12
 8009b32:	0092      	lsls	r2, r2, #2
 8009b34:	300c      	adds	r0, #12
 8009b36:	f7fc fab9 	bl	80060ac <memcpy>
 8009b3a:	4621      	mov	r1, r4
 8009b3c:	4638      	mov	r0, r7
 8009b3e:	f7ff ffa5 	bl	8009a8c <_Bfree>
 8009b42:	4644      	mov	r4, r8
 8009b44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009b48:	3501      	adds	r5, #1
 8009b4a:	615e      	str	r6, [r3, #20]
 8009b4c:	6125      	str	r5, [r4, #16]
 8009b4e:	4620      	mov	r0, r4
 8009b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b54:	0800b718 	.word	0x0800b718
 8009b58:	0800b808 	.word	0x0800b808

08009b5c <__s2b>:
 8009b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b60:	460c      	mov	r4, r1
 8009b62:	4615      	mov	r5, r2
 8009b64:	461f      	mov	r7, r3
 8009b66:	2209      	movs	r2, #9
 8009b68:	3308      	adds	r3, #8
 8009b6a:	4606      	mov	r6, r0
 8009b6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b70:	2100      	movs	r1, #0
 8009b72:	2201      	movs	r2, #1
 8009b74:	429a      	cmp	r2, r3
 8009b76:	db09      	blt.n	8009b8c <__s2b+0x30>
 8009b78:	4630      	mov	r0, r6
 8009b7a:	f7ff ff47 	bl	8009a0c <_Balloc>
 8009b7e:	b940      	cbnz	r0, 8009b92 <__s2b+0x36>
 8009b80:	4602      	mov	r2, r0
 8009b82:	4b19      	ldr	r3, [pc, #100]	; (8009be8 <__s2b+0x8c>)
 8009b84:	4819      	ldr	r0, [pc, #100]	; (8009bec <__s2b+0x90>)
 8009b86:	21ce      	movs	r1, #206	; 0xce
 8009b88:	f000 ff34 	bl	800a9f4 <__assert_func>
 8009b8c:	0052      	lsls	r2, r2, #1
 8009b8e:	3101      	adds	r1, #1
 8009b90:	e7f0      	b.n	8009b74 <__s2b+0x18>
 8009b92:	9b08      	ldr	r3, [sp, #32]
 8009b94:	6143      	str	r3, [r0, #20]
 8009b96:	2d09      	cmp	r5, #9
 8009b98:	f04f 0301 	mov.w	r3, #1
 8009b9c:	6103      	str	r3, [r0, #16]
 8009b9e:	dd16      	ble.n	8009bce <__s2b+0x72>
 8009ba0:	f104 0909 	add.w	r9, r4, #9
 8009ba4:	46c8      	mov	r8, r9
 8009ba6:	442c      	add	r4, r5
 8009ba8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009bac:	4601      	mov	r1, r0
 8009bae:	3b30      	subs	r3, #48	; 0x30
 8009bb0:	220a      	movs	r2, #10
 8009bb2:	4630      	mov	r0, r6
 8009bb4:	f7ff ff8c 	bl	8009ad0 <__multadd>
 8009bb8:	45a0      	cmp	r8, r4
 8009bba:	d1f5      	bne.n	8009ba8 <__s2b+0x4c>
 8009bbc:	f1a5 0408 	sub.w	r4, r5, #8
 8009bc0:	444c      	add	r4, r9
 8009bc2:	1b2d      	subs	r5, r5, r4
 8009bc4:	1963      	adds	r3, r4, r5
 8009bc6:	42bb      	cmp	r3, r7
 8009bc8:	db04      	blt.n	8009bd4 <__s2b+0x78>
 8009bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bce:	340a      	adds	r4, #10
 8009bd0:	2509      	movs	r5, #9
 8009bd2:	e7f6      	b.n	8009bc2 <__s2b+0x66>
 8009bd4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009bd8:	4601      	mov	r1, r0
 8009bda:	3b30      	subs	r3, #48	; 0x30
 8009bdc:	220a      	movs	r2, #10
 8009bde:	4630      	mov	r0, r6
 8009be0:	f7ff ff76 	bl	8009ad0 <__multadd>
 8009be4:	e7ee      	b.n	8009bc4 <__s2b+0x68>
 8009be6:	bf00      	nop
 8009be8:	0800b718 	.word	0x0800b718
 8009bec:	0800b808 	.word	0x0800b808

08009bf0 <__hi0bits>:
 8009bf0:	0c03      	lsrs	r3, r0, #16
 8009bf2:	041b      	lsls	r3, r3, #16
 8009bf4:	b9d3      	cbnz	r3, 8009c2c <__hi0bits+0x3c>
 8009bf6:	0400      	lsls	r0, r0, #16
 8009bf8:	2310      	movs	r3, #16
 8009bfa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009bfe:	bf04      	itt	eq
 8009c00:	0200      	lsleq	r0, r0, #8
 8009c02:	3308      	addeq	r3, #8
 8009c04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009c08:	bf04      	itt	eq
 8009c0a:	0100      	lsleq	r0, r0, #4
 8009c0c:	3304      	addeq	r3, #4
 8009c0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009c12:	bf04      	itt	eq
 8009c14:	0080      	lsleq	r0, r0, #2
 8009c16:	3302      	addeq	r3, #2
 8009c18:	2800      	cmp	r0, #0
 8009c1a:	db05      	blt.n	8009c28 <__hi0bits+0x38>
 8009c1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009c20:	f103 0301 	add.w	r3, r3, #1
 8009c24:	bf08      	it	eq
 8009c26:	2320      	moveq	r3, #32
 8009c28:	4618      	mov	r0, r3
 8009c2a:	4770      	bx	lr
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	e7e4      	b.n	8009bfa <__hi0bits+0xa>

08009c30 <__lo0bits>:
 8009c30:	6803      	ldr	r3, [r0, #0]
 8009c32:	f013 0207 	ands.w	r2, r3, #7
 8009c36:	4601      	mov	r1, r0
 8009c38:	d00b      	beq.n	8009c52 <__lo0bits+0x22>
 8009c3a:	07da      	lsls	r2, r3, #31
 8009c3c:	d423      	bmi.n	8009c86 <__lo0bits+0x56>
 8009c3e:	0798      	lsls	r0, r3, #30
 8009c40:	bf49      	itett	mi
 8009c42:	085b      	lsrmi	r3, r3, #1
 8009c44:	089b      	lsrpl	r3, r3, #2
 8009c46:	2001      	movmi	r0, #1
 8009c48:	600b      	strmi	r3, [r1, #0]
 8009c4a:	bf5c      	itt	pl
 8009c4c:	600b      	strpl	r3, [r1, #0]
 8009c4e:	2002      	movpl	r0, #2
 8009c50:	4770      	bx	lr
 8009c52:	b298      	uxth	r0, r3
 8009c54:	b9a8      	cbnz	r0, 8009c82 <__lo0bits+0x52>
 8009c56:	0c1b      	lsrs	r3, r3, #16
 8009c58:	2010      	movs	r0, #16
 8009c5a:	b2da      	uxtb	r2, r3
 8009c5c:	b90a      	cbnz	r2, 8009c62 <__lo0bits+0x32>
 8009c5e:	3008      	adds	r0, #8
 8009c60:	0a1b      	lsrs	r3, r3, #8
 8009c62:	071a      	lsls	r2, r3, #28
 8009c64:	bf04      	itt	eq
 8009c66:	091b      	lsreq	r3, r3, #4
 8009c68:	3004      	addeq	r0, #4
 8009c6a:	079a      	lsls	r2, r3, #30
 8009c6c:	bf04      	itt	eq
 8009c6e:	089b      	lsreq	r3, r3, #2
 8009c70:	3002      	addeq	r0, #2
 8009c72:	07da      	lsls	r2, r3, #31
 8009c74:	d403      	bmi.n	8009c7e <__lo0bits+0x4e>
 8009c76:	085b      	lsrs	r3, r3, #1
 8009c78:	f100 0001 	add.w	r0, r0, #1
 8009c7c:	d005      	beq.n	8009c8a <__lo0bits+0x5a>
 8009c7e:	600b      	str	r3, [r1, #0]
 8009c80:	4770      	bx	lr
 8009c82:	4610      	mov	r0, r2
 8009c84:	e7e9      	b.n	8009c5a <__lo0bits+0x2a>
 8009c86:	2000      	movs	r0, #0
 8009c88:	4770      	bx	lr
 8009c8a:	2020      	movs	r0, #32
 8009c8c:	4770      	bx	lr
	...

08009c90 <__i2b>:
 8009c90:	b510      	push	{r4, lr}
 8009c92:	460c      	mov	r4, r1
 8009c94:	2101      	movs	r1, #1
 8009c96:	f7ff feb9 	bl	8009a0c <_Balloc>
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	b928      	cbnz	r0, 8009caa <__i2b+0x1a>
 8009c9e:	4b05      	ldr	r3, [pc, #20]	; (8009cb4 <__i2b+0x24>)
 8009ca0:	4805      	ldr	r0, [pc, #20]	; (8009cb8 <__i2b+0x28>)
 8009ca2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009ca6:	f000 fea5 	bl	800a9f4 <__assert_func>
 8009caa:	2301      	movs	r3, #1
 8009cac:	6144      	str	r4, [r0, #20]
 8009cae:	6103      	str	r3, [r0, #16]
 8009cb0:	bd10      	pop	{r4, pc}
 8009cb2:	bf00      	nop
 8009cb4:	0800b718 	.word	0x0800b718
 8009cb8:	0800b808 	.word	0x0800b808

08009cbc <__multiply>:
 8009cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cc0:	4691      	mov	r9, r2
 8009cc2:	690a      	ldr	r2, [r1, #16]
 8009cc4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	bfb8      	it	lt
 8009ccc:	460b      	movlt	r3, r1
 8009cce:	460c      	mov	r4, r1
 8009cd0:	bfbc      	itt	lt
 8009cd2:	464c      	movlt	r4, r9
 8009cd4:	4699      	movlt	r9, r3
 8009cd6:	6927      	ldr	r7, [r4, #16]
 8009cd8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009cdc:	68a3      	ldr	r3, [r4, #8]
 8009cde:	6861      	ldr	r1, [r4, #4]
 8009ce0:	eb07 060a 	add.w	r6, r7, sl
 8009ce4:	42b3      	cmp	r3, r6
 8009ce6:	b085      	sub	sp, #20
 8009ce8:	bfb8      	it	lt
 8009cea:	3101      	addlt	r1, #1
 8009cec:	f7ff fe8e 	bl	8009a0c <_Balloc>
 8009cf0:	b930      	cbnz	r0, 8009d00 <__multiply+0x44>
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	4b44      	ldr	r3, [pc, #272]	; (8009e08 <__multiply+0x14c>)
 8009cf6:	4845      	ldr	r0, [pc, #276]	; (8009e0c <__multiply+0x150>)
 8009cf8:	f240 115d 	movw	r1, #349	; 0x15d
 8009cfc:	f000 fe7a 	bl	800a9f4 <__assert_func>
 8009d00:	f100 0514 	add.w	r5, r0, #20
 8009d04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009d08:	462b      	mov	r3, r5
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	4543      	cmp	r3, r8
 8009d0e:	d321      	bcc.n	8009d54 <__multiply+0x98>
 8009d10:	f104 0314 	add.w	r3, r4, #20
 8009d14:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009d18:	f109 0314 	add.w	r3, r9, #20
 8009d1c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009d20:	9202      	str	r2, [sp, #8]
 8009d22:	1b3a      	subs	r2, r7, r4
 8009d24:	3a15      	subs	r2, #21
 8009d26:	f022 0203 	bic.w	r2, r2, #3
 8009d2a:	3204      	adds	r2, #4
 8009d2c:	f104 0115 	add.w	r1, r4, #21
 8009d30:	428f      	cmp	r7, r1
 8009d32:	bf38      	it	cc
 8009d34:	2204      	movcc	r2, #4
 8009d36:	9201      	str	r2, [sp, #4]
 8009d38:	9a02      	ldr	r2, [sp, #8]
 8009d3a:	9303      	str	r3, [sp, #12]
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d80c      	bhi.n	8009d5a <__multiply+0x9e>
 8009d40:	2e00      	cmp	r6, #0
 8009d42:	dd03      	ble.n	8009d4c <__multiply+0x90>
 8009d44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d05a      	beq.n	8009e02 <__multiply+0x146>
 8009d4c:	6106      	str	r6, [r0, #16]
 8009d4e:	b005      	add	sp, #20
 8009d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d54:	f843 2b04 	str.w	r2, [r3], #4
 8009d58:	e7d8      	b.n	8009d0c <__multiply+0x50>
 8009d5a:	f8b3 a000 	ldrh.w	sl, [r3]
 8009d5e:	f1ba 0f00 	cmp.w	sl, #0
 8009d62:	d024      	beq.n	8009dae <__multiply+0xf2>
 8009d64:	f104 0e14 	add.w	lr, r4, #20
 8009d68:	46a9      	mov	r9, r5
 8009d6a:	f04f 0c00 	mov.w	ip, #0
 8009d6e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009d72:	f8d9 1000 	ldr.w	r1, [r9]
 8009d76:	fa1f fb82 	uxth.w	fp, r2
 8009d7a:	b289      	uxth	r1, r1
 8009d7c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009d80:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009d84:	f8d9 2000 	ldr.w	r2, [r9]
 8009d88:	4461      	add	r1, ip
 8009d8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009d8e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009d92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009d96:	b289      	uxth	r1, r1
 8009d98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009d9c:	4577      	cmp	r7, lr
 8009d9e:	f849 1b04 	str.w	r1, [r9], #4
 8009da2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009da6:	d8e2      	bhi.n	8009d6e <__multiply+0xb2>
 8009da8:	9a01      	ldr	r2, [sp, #4]
 8009daa:	f845 c002 	str.w	ip, [r5, r2]
 8009dae:	9a03      	ldr	r2, [sp, #12]
 8009db0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009db4:	3304      	adds	r3, #4
 8009db6:	f1b9 0f00 	cmp.w	r9, #0
 8009dba:	d020      	beq.n	8009dfe <__multiply+0x142>
 8009dbc:	6829      	ldr	r1, [r5, #0]
 8009dbe:	f104 0c14 	add.w	ip, r4, #20
 8009dc2:	46ae      	mov	lr, r5
 8009dc4:	f04f 0a00 	mov.w	sl, #0
 8009dc8:	f8bc b000 	ldrh.w	fp, [ip]
 8009dcc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009dd0:	fb09 220b 	mla	r2, r9, fp, r2
 8009dd4:	4492      	add	sl, r2
 8009dd6:	b289      	uxth	r1, r1
 8009dd8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009ddc:	f84e 1b04 	str.w	r1, [lr], #4
 8009de0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009de4:	f8be 1000 	ldrh.w	r1, [lr]
 8009de8:	0c12      	lsrs	r2, r2, #16
 8009dea:	fb09 1102 	mla	r1, r9, r2, r1
 8009dee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009df2:	4567      	cmp	r7, ip
 8009df4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009df8:	d8e6      	bhi.n	8009dc8 <__multiply+0x10c>
 8009dfa:	9a01      	ldr	r2, [sp, #4]
 8009dfc:	50a9      	str	r1, [r5, r2]
 8009dfe:	3504      	adds	r5, #4
 8009e00:	e79a      	b.n	8009d38 <__multiply+0x7c>
 8009e02:	3e01      	subs	r6, #1
 8009e04:	e79c      	b.n	8009d40 <__multiply+0x84>
 8009e06:	bf00      	nop
 8009e08:	0800b718 	.word	0x0800b718
 8009e0c:	0800b808 	.word	0x0800b808

08009e10 <__pow5mult>:
 8009e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e14:	4615      	mov	r5, r2
 8009e16:	f012 0203 	ands.w	r2, r2, #3
 8009e1a:	4606      	mov	r6, r0
 8009e1c:	460f      	mov	r7, r1
 8009e1e:	d007      	beq.n	8009e30 <__pow5mult+0x20>
 8009e20:	4c25      	ldr	r4, [pc, #148]	; (8009eb8 <__pow5mult+0xa8>)
 8009e22:	3a01      	subs	r2, #1
 8009e24:	2300      	movs	r3, #0
 8009e26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009e2a:	f7ff fe51 	bl	8009ad0 <__multadd>
 8009e2e:	4607      	mov	r7, r0
 8009e30:	10ad      	asrs	r5, r5, #2
 8009e32:	d03d      	beq.n	8009eb0 <__pow5mult+0xa0>
 8009e34:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009e36:	b97c      	cbnz	r4, 8009e58 <__pow5mult+0x48>
 8009e38:	2010      	movs	r0, #16
 8009e3a:	f7fc f92f 	bl	800609c <malloc>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	6270      	str	r0, [r6, #36]	; 0x24
 8009e42:	b928      	cbnz	r0, 8009e50 <__pow5mult+0x40>
 8009e44:	4b1d      	ldr	r3, [pc, #116]	; (8009ebc <__pow5mult+0xac>)
 8009e46:	481e      	ldr	r0, [pc, #120]	; (8009ec0 <__pow5mult+0xb0>)
 8009e48:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009e4c:	f000 fdd2 	bl	800a9f4 <__assert_func>
 8009e50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009e54:	6004      	str	r4, [r0, #0]
 8009e56:	60c4      	str	r4, [r0, #12]
 8009e58:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009e5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009e60:	b94c      	cbnz	r4, 8009e76 <__pow5mult+0x66>
 8009e62:	f240 2171 	movw	r1, #625	; 0x271
 8009e66:	4630      	mov	r0, r6
 8009e68:	f7ff ff12 	bl	8009c90 <__i2b>
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009e72:	4604      	mov	r4, r0
 8009e74:	6003      	str	r3, [r0, #0]
 8009e76:	f04f 0900 	mov.w	r9, #0
 8009e7a:	07eb      	lsls	r3, r5, #31
 8009e7c:	d50a      	bpl.n	8009e94 <__pow5mult+0x84>
 8009e7e:	4639      	mov	r1, r7
 8009e80:	4622      	mov	r2, r4
 8009e82:	4630      	mov	r0, r6
 8009e84:	f7ff ff1a 	bl	8009cbc <__multiply>
 8009e88:	4639      	mov	r1, r7
 8009e8a:	4680      	mov	r8, r0
 8009e8c:	4630      	mov	r0, r6
 8009e8e:	f7ff fdfd 	bl	8009a8c <_Bfree>
 8009e92:	4647      	mov	r7, r8
 8009e94:	106d      	asrs	r5, r5, #1
 8009e96:	d00b      	beq.n	8009eb0 <__pow5mult+0xa0>
 8009e98:	6820      	ldr	r0, [r4, #0]
 8009e9a:	b938      	cbnz	r0, 8009eac <__pow5mult+0x9c>
 8009e9c:	4622      	mov	r2, r4
 8009e9e:	4621      	mov	r1, r4
 8009ea0:	4630      	mov	r0, r6
 8009ea2:	f7ff ff0b 	bl	8009cbc <__multiply>
 8009ea6:	6020      	str	r0, [r4, #0]
 8009ea8:	f8c0 9000 	str.w	r9, [r0]
 8009eac:	4604      	mov	r4, r0
 8009eae:	e7e4      	b.n	8009e7a <__pow5mult+0x6a>
 8009eb0:	4638      	mov	r0, r7
 8009eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009eb6:	bf00      	nop
 8009eb8:	0800b958 	.word	0x0800b958
 8009ebc:	0800b6a6 	.word	0x0800b6a6
 8009ec0:	0800b808 	.word	0x0800b808

08009ec4 <__lshift>:
 8009ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ec8:	460c      	mov	r4, r1
 8009eca:	6849      	ldr	r1, [r1, #4]
 8009ecc:	6923      	ldr	r3, [r4, #16]
 8009ece:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009ed2:	68a3      	ldr	r3, [r4, #8]
 8009ed4:	4607      	mov	r7, r0
 8009ed6:	4691      	mov	r9, r2
 8009ed8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009edc:	f108 0601 	add.w	r6, r8, #1
 8009ee0:	42b3      	cmp	r3, r6
 8009ee2:	db0b      	blt.n	8009efc <__lshift+0x38>
 8009ee4:	4638      	mov	r0, r7
 8009ee6:	f7ff fd91 	bl	8009a0c <_Balloc>
 8009eea:	4605      	mov	r5, r0
 8009eec:	b948      	cbnz	r0, 8009f02 <__lshift+0x3e>
 8009eee:	4602      	mov	r2, r0
 8009ef0:	4b2a      	ldr	r3, [pc, #168]	; (8009f9c <__lshift+0xd8>)
 8009ef2:	482b      	ldr	r0, [pc, #172]	; (8009fa0 <__lshift+0xdc>)
 8009ef4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009ef8:	f000 fd7c 	bl	800a9f4 <__assert_func>
 8009efc:	3101      	adds	r1, #1
 8009efe:	005b      	lsls	r3, r3, #1
 8009f00:	e7ee      	b.n	8009ee0 <__lshift+0x1c>
 8009f02:	2300      	movs	r3, #0
 8009f04:	f100 0114 	add.w	r1, r0, #20
 8009f08:	f100 0210 	add.w	r2, r0, #16
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	4553      	cmp	r3, sl
 8009f10:	db37      	blt.n	8009f82 <__lshift+0xbe>
 8009f12:	6920      	ldr	r0, [r4, #16]
 8009f14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f18:	f104 0314 	add.w	r3, r4, #20
 8009f1c:	f019 091f 	ands.w	r9, r9, #31
 8009f20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009f24:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009f28:	d02f      	beq.n	8009f8a <__lshift+0xc6>
 8009f2a:	f1c9 0e20 	rsb	lr, r9, #32
 8009f2e:	468a      	mov	sl, r1
 8009f30:	f04f 0c00 	mov.w	ip, #0
 8009f34:	681a      	ldr	r2, [r3, #0]
 8009f36:	fa02 f209 	lsl.w	r2, r2, r9
 8009f3a:	ea42 020c 	orr.w	r2, r2, ip
 8009f3e:	f84a 2b04 	str.w	r2, [sl], #4
 8009f42:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f46:	4298      	cmp	r0, r3
 8009f48:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009f4c:	d8f2      	bhi.n	8009f34 <__lshift+0x70>
 8009f4e:	1b03      	subs	r3, r0, r4
 8009f50:	3b15      	subs	r3, #21
 8009f52:	f023 0303 	bic.w	r3, r3, #3
 8009f56:	3304      	adds	r3, #4
 8009f58:	f104 0215 	add.w	r2, r4, #21
 8009f5c:	4290      	cmp	r0, r2
 8009f5e:	bf38      	it	cc
 8009f60:	2304      	movcc	r3, #4
 8009f62:	f841 c003 	str.w	ip, [r1, r3]
 8009f66:	f1bc 0f00 	cmp.w	ip, #0
 8009f6a:	d001      	beq.n	8009f70 <__lshift+0xac>
 8009f6c:	f108 0602 	add.w	r6, r8, #2
 8009f70:	3e01      	subs	r6, #1
 8009f72:	4638      	mov	r0, r7
 8009f74:	612e      	str	r6, [r5, #16]
 8009f76:	4621      	mov	r1, r4
 8009f78:	f7ff fd88 	bl	8009a8c <_Bfree>
 8009f7c:	4628      	mov	r0, r5
 8009f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f82:	f842 0f04 	str.w	r0, [r2, #4]!
 8009f86:	3301      	adds	r3, #1
 8009f88:	e7c1      	b.n	8009f0e <__lshift+0x4a>
 8009f8a:	3904      	subs	r1, #4
 8009f8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f90:	f841 2f04 	str.w	r2, [r1, #4]!
 8009f94:	4298      	cmp	r0, r3
 8009f96:	d8f9      	bhi.n	8009f8c <__lshift+0xc8>
 8009f98:	e7ea      	b.n	8009f70 <__lshift+0xac>
 8009f9a:	bf00      	nop
 8009f9c:	0800b718 	.word	0x0800b718
 8009fa0:	0800b808 	.word	0x0800b808

08009fa4 <__mcmp>:
 8009fa4:	b530      	push	{r4, r5, lr}
 8009fa6:	6902      	ldr	r2, [r0, #16]
 8009fa8:	690c      	ldr	r4, [r1, #16]
 8009faa:	1b12      	subs	r2, r2, r4
 8009fac:	d10e      	bne.n	8009fcc <__mcmp+0x28>
 8009fae:	f100 0314 	add.w	r3, r0, #20
 8009fb2:	3114      	adds	r1, #20
 8009fb4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009fb8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009fbc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009fc0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009fc4:	42a5      	cmp	r5, r4
 8009fc6:	d003      	beq.n	8009fd0 <__mcmp+0x2c>
 8009fc8:	d305      	bcc.n	8009fd6 <__mcmp+0x32>
 8009fca:	2201      	movs	r2, #1
 8009fcc:	4610      	mov	r0, r2
 8009fce:	bd30      	pop	{r4, r5, pc}
 8009fd0:	4283      	cmp	r3, r0
 8009fd2:	d3f3      	bcc.n	8009fbc <__mcmp+0x18>
 8009fd4:	e7fa      	b.n	8009fcc <__mcmp+0x28>
 8009fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8009fda:	e7f7      	b.n	8009fcc <__mcmp+0x28>

08009fdc <__mdiff>:
 8009fdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fe0:	460c      	mov	r4, r1
 8009fe2:	4606      	mov	r6, r0
 8009fe4:	4611      	mov	r1, r2
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	4690      	mov	r8, r2
 8009fea:	f7ff ffdb 	bl	8009fa4 <__mcmp>
 8009fee:	1e05      	subs	r5, r0, #0
 8009ff0:	d110      	bne.n	800a014 <__mdiff+0x38>
 8009ff2:	4629      	mov	r1, r5
 8009ff4:	4630      	mov	r0, r6
 8009ff6:	f7ff fd09 	bl	8009a0c <_Balloc>
 8009ffa:	b930      	cbnz	r0, 800a00a <__mdiff+0x2e>
 8009ffc:	4b3a      	ldr	r3, [pc, #232]	; (800a0e8 <__mdiff+0x10c>)
 8009ffe:	4602      	mov	r2, r0
 800a000:	f240 2132 	movw	r1, #562	; 0x232
 800a004:	4839      	ldr	r0, [pc, #228]	; (800a0ec <__mdiff+0x110>)
 800a006:	f000 fcf5 	bl	800a9f4 <__assert_func>
 800a00a:	2301      	movs	r3, #1
 800a00c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a010:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a014:	bfa4      	itt	ge
 800a016:	4643      	movge	r3, r8
 800a018:	46a0      	movge	r8, r4
 800a01a:	4630      	mov	r0, r6
 800a01c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a020:	bfa6      	itte	ge
 800a022:	461c      	movge	r4, r3
 800a024:	2500      	movge	r5, #0
 800a026:	2501      	movlt	r5, #1
 800a028:	f7ff fcf0 	bl	8009a0c <_Balloc>
 800a02c:	b920      	cbnz	r0, 800a038 <__mdiff+0x5c>
 800a02e:	4b2e      	ldr	r3, [pc, #184]	; (800a0e8 <__mdiff+0x10c>)
 800a030:	4602      	mov	r2, r0
 800a032:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a036:	e7e5      	b.n	800a004 <__mdiff+0x28>
 800a038:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a03c:	6926      	ldr	r6, [r4, #16]
 800a03e:	60c5      	str	r5, [r0, #12]
 800a040:	f104 0914 	add.w	r9, r4, #20
 800a044:	f108 0514 	add.w	r5, r8, #20
 800a048:	f100 0e14 	add.w	lr, r0, #20
 800a04c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a050:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a054:	f108 0210 	add.w	r2, r8, #16
 800a058:	46f2      	mov	sl, lr
 800a05a:	2100      	movs	r1, #0
 800a05c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a060:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a064:	fa1f f883 	uxth.w	r8, r3
 800a068:	fa11 f18b 	uxtah	r1, r1, fp
 800a06c:	0c1b      	lsrs	r3, r3, #16
 800a06e:	eba1 0808 	sub.w	r8, r1, r8
 800a072:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a076:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a07a:	fa1f f888 	uxth.w	r8, r8
 800a07e:	1419      	asrs	r1, r3, #16
 800a080:	454e      	cmp	r6, r9
 800a082:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a086:	f84a 3b04 	str.w	r3, [sl], #4
 800a08a:	d8e7      	bhi.n	800a05c <__mdiff+0x80>
 800a08c:	1b33      	subs	r3, r6, r4
 800a08e:	3b15      	subs	r3, #21
 800a090:	f023 0303 	bic.w	r3, r3, #3
 800a094:	3304      	adds	r3, #4
 800a096:	3415      	adds	r4, #21
 800a098:	42a6      	cmp	r6, r4
 800a09a:	bf38      	it	cc
 800a09c:	2304      	movcc	r3, #4
 800a09e:	441d      	add	r5, r3
 800a0a0:	4473      	add	r3, lr
 800a0a2:	469e      	mov	lr, r3
 800a0a4:	462e      	mov	r6, r5
 800a0a6:	4566      	cmp	r6, ip
 800a0a8:	d30e      	bcc.n	800a0c8 <__mdiff+0xec>
 800a0aa:	f10c 0203 	add.w	r2, ip, #3
 800a0ae:	1b52      	subs	r2, r2, r5
 800a0b0:	f022 0203 	bic.w	r2, r2, #3
 800a0b4:	3d03      	subs	r5, #3
 800a0b6:	45ac      	cmp	ip, r5
 800a0b8:	bf38      	it	cc
 800a0ba:	2200      	movcc	r2, #0
 800a0bc:	441a      	add	r2, r3
 800a0be:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a0c2:	b17b      	cbz	r3, 800a0e4 <__mdiff+0x108>
 800a0c4:	6107      	str	r7, [r0, #16]
 800a0c6:	e7a3      	b.n	800a010 <__mdiff+0x34>
 800a0c8:	f856 8b04 	ldr.w	r8, [r6], #4
 800a0cc:	fa11 f288 	uxtah	r2, r1, r8
 800a0d0:	1414      	asrs	r4, r2, #16
 800a0d2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a0d6:	b292      	uxth	r2, r2
 800a0d8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a0dc:	f84e 2b04 	str.w	r2, [lr], #4
 800a0e0:	1421      	asrs	r1, r4, #16
 800a0e2:	e7e0      	b.n	800a0a6 <__mdiff+0xca>
 800a0e4:	3f01      	subs	r7, #1
 800a0e6:	e7ea      	b.n	800a0be <__mdiff+0xe2>
 800a0e8:	0800b718 	.word	0x0800b718
 800a0ec:	0800b808 	.word	0x0800b808

0800a0f0 <__ulp>:
 800a0f0:	b082      	sub	sp, #8
 800a0f2:	ed8d 0b00 	vstr	d0, [sp]
 800a0f6:	9b01      	ldr	r3, [sp, #4]
 800a0f8:	4912      	ldr	r1, [pc, #72]	; (800a144 <__ulp+0x54>)
 800a0fa:	4019      	ands	r1, r3
 800a0fc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a100:	2900      	cmp	r1, #0
 800a102:	dd05      	ble.n	800a110 <__ulp+0x20>
 800a104:	2200      	movs	r2, #0
 800a106:	460b      	mov	r3, r1
 800a108:	ec43 2b10 	vmov	d0, r2, r3
 800a10c:	b002      	add	sp, #8
 800a10e:	4770      	bx	lr
 800a110:	4249      	negs	r1, r1
 800a112:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a116:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a11a:	f04f 0200 	mov.w	r2, #0
 800a11e:	f04f 0300 	mov.w	r3, #0
 800a122:	da04      	bge.n	800a12e <__ulp+0x3e>
 800a124:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a128:	fa41 f300 	asr.w	r3, r1, r0
 800a12c:	e7ec      	b.n	800a108 <__ulp+0x18>
 800a12e:	f1a0 0114 	sub.w	r1, r0, #20
 800a132:	291e      	cmp	r1, #30
 800a134:	bfda      	itte	le
 800a136:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a13a:	fa20 f101 	lsrle.w	r1, r0, r1
 800a13e:	2101      	movgt	r1, #1
 800a140:	460a      	mov	r2, r1
 800a142:	e7e1      	b.n	800a108 <__ulp+0x18>
 800a144:	7ff00000 	.word	0x7ff00000

0800a148 <__b2d>:
 800a148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a14a:	6905      	ldr	r5, [r0, #16]
 800a14c:	f100 0714 	add.w	r7, r0, #20
 800a150:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a154:	1f2e      	subs	r6, r5, #4
 800a156:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a15a:	4620      	mov	r0, r4
 800a15c:	f7ff fd48 	bl	8009bf0 <__hi0bits>
 800a160:	f1c0 0320 	rsb	r3, r0, #32
 800a164:	280a      	cmp	r0, #10
 800a166:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a1e4 <__b2d+0x9c>
 800a16a:	600b      	str	r3, [r1, #0]
 800a16c:	dc14      	bgt.n	800a198 <__b2d+0x50>
 800a16e:	f1c0 0e0b 	rsb	lr, r0, #11
 800a172:	fa24 f10e 	lsr.w	r1, r4, lr
 800a176:	42b7      	cmp	r7, r6
 800a178:	ea41 030c 	orr.w	r3, r1, ip
 800a17c:	bf34      	ite	cc
 800a17e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a182:	2100      	movcs	r1, #0
 800a184:	3015      	adds	r0, #21
 800a186:	fa04 f000 	lsl.w	r0, r4, r0
 800a18a:	fa21 f10e 	lsr.w	r1, r1, lr
 800a18e:	ea40 0201 	orr.w	r2, r0, r1
 800a192:	ec43 2b10 	vmov	d0, r2, r3
 800a196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a198:	42b7      	cmp	r7, r6
 800a19a:	bf3a      	itte	cc
 800a19c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a1a0:	f1a5 0608 	subcc.w	r6, r5, #8
 800a1a4:	2100      	movcs	r1, #0
 800a1a6:	380b      	subs	r0, #11
 800a1a8:	d017      	beq.n	800a1da <__b2d+0x92>
 800a1aa:	f1c0 0c20 	rsb	ip, r0, #32
 800a1ae:	fa04 f500 	lsl.w	r5, r4, r0
 800a1b2:	42be      	cmp	r6, r7
 800a1b4:	fa21 f40c 	lsr.w	r4, r1, ip
 800a1b8:	ea45 0504 	orr.w	r5, r5, r4
 800a1bc:	bf8c      	ite	hi
 800a1be:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a1c2:	2400      	movls	r4, #0
 800a1c4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a1c8:	fa01 f000 	lsl.w	r0, r1, r0
 800a1cc:	fa24 f40c 	lsr.w	r4, r4, ip
 800a1d0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a1d4:	ea40 0204 	orr.w	r2, r0, r4
 800a1d8:	e7db      	b.n	800a192 <__b2d+0x4a>
 800a1da:	ea44 030c 	orr.w	r3, r4, ip
 800a1de:	460a      	mov	r2, r1
 800a1e0:	e7d7      	b.n	800a192 <__b2d+0x4a>
 800a1e2:	bf00      	nop
 800a1e4:	3ff00000 	.word	0x3ff00000

0800a1e8 <__d2b>:
 800a1e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a1ec:	4689      	mov	r9, r1
 800a1ee:	2101      	movs	r1, #1
 800a1f0:	ec57 6b10 	vmov	r6, r7, d0
 800a1f4:	4690      	mov	r8, r2
 800a1f6:	f7ff fc09 	bl	8009a0c <_Balloc>
 800a1fa:	4604      	mov	r4, r0
 800a1fc:	b930      	cbnz	r0, 800a20c <__d2b+0x24>
 800a1fe:	4602      	mov	r2, r0
 800a200:	4b25      	ldr	r3, [pc, #148]	; (800a298 <__d2b+0xb0>)
 800a202:	4826      	ldr	r0, [pc, #152]	; (800a29c <__d2b+0xb4>)
 800a204:	f240 310a 	movw	r1, #778	; 0x30a
 800a208:	f000 fbf4 	bl	800a9f4 <__assert_func>
 800a20c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a210:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a214:	bb35      	cbnz	r5, 800a264 <__d2b+0x7c>
 800a216:	2e00      	cmp	r6, #0
 800a218:	9301      	str	r3, [sp, #4]
 800a21a:	d028      	beq.n	800a26e <__d2b+0x86>
 800a21c:	4668      	mov	r0, sp
 800a21e:	9600      	str	r6, [sp, #0]
 800a220:	f7ff fd06 	bl	8009c30 <__lo0bits>
 800a224:	9900      	ldr	r1, [sp, #0]
 800a226:	b300      	cbz	r0, 800a26a <__d2b+0x82>
 800a228:	9a01      	ldr	r2, [sp, #4]
 800a22a:	f1c0 0320 	rsb	r3, r0, #32
 800a22e:	fa02 f303 	lsl.w	r3, r2, r3
 800a232:	430b      	orrs	r3, r1
 800a234:	40c2      	lsrs	r2, r0
 800a236:	6163      	str	r3, [r4, #20]
 800a238:	9201      	str	r2, [sp, #4]
 800a23a:	9b01      	ldr	r3, [sp, #4]
 800a23c:	61a3      	str	r3, [r4, #24]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	bf14      	ite	ne
 800a242:	2202      	movne	r2, #2
 800a244:	2201      	moveq	r2, #1
 800a246:	6122      	str	r2, [r4, #16]
 800a248:	b1d5      	cbz	r5, 800a280 <__d2b+0x98>
 800a24a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a24e:	4405      	add	r5, r0
 800a250:	f8c9 5000 	str.w	r5, [r9]
 800a254:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a258:	f8c8 0000 	str.w	r0, [r8]
 800a25c:	4620      	mov	r0, r4
 800a25e:	b003      	add	sp, #12
 800a260:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a264:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a268:	e7d5      	b.n	800a216 <__d2b+0x2e>
 800a26a:	6161      	str	r1, [r4, #20]
 800a26c:	e7e5      	b.n	800a23a <__d2b+0x52>
 800a26e:	a801      	add	r0, sp, #4
 800a270:	f7ff fcde 	bl	8009c30 <__lo0bits>
 800a274:	9b01      	ldr	r3, [sp, #4]
 800a276:	6163      	str	r3, [r4, #20]
 800a278:	2201      	movs	r2, #1
 800a27a:	6122      	str	r2, [r4, #16]
 800a27c:	3020      	adds	r0, #32
 800a27e:	e7e3      	b.n	800a248 <__d2b+0x60>
 800a280:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a284:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a288:	f8c9 0000 	str.w	r0, [r9]
 800a28c:	6918      	ldr	r0, [r3, #16]
 800a28e:	f7ff fcaf 	bl	8009bf0 <__hi0bits>
 800a292:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a296:	e7df      	b.n	800a258 <__d2b+0x70>
 800a298:	0800b718 	.word	0x0800b718
 800a29c:	0800b808 	.word	0x0800b808

0800a2a0 <__ratio>:
 800a2a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2a4:	4688      	mov	r8, r1
 800a2a6:	4669      	mov	r1, sp
 800a2a8:	4681      	mov	r9, r0
 800a2aa:	f7ff ff4d 	bl	800a148 <__b2d>
 800a2ae:	a901      	add	r1, sp, #4
 800a2b0:	4640      	mov	r0, r8
 800a2b2:	ec55 4b10 	vmov	r4, r5, d0
 800a2b6:	f7ff ff47 	bl	800a148 <__b2d>
 800a2ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a2be:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a2c2:	eba3 0c02 	sub.w	ip, r3, r2
 800a2c6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a2ca:	1a9b      	subs	r3, r3, r2
 800a2cc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a2d0:	ec51 0b10 	vmov	r0, r1, d0
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	bfd6      	itet	le
 800a2d8:	460a      	movle	r2, r1
 800a2da:	462a      	movgt	r2, r5
 800a2dc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a2e0:	468b      	mov	fp, r1
 800a2e2:	462f      	mov	r7, r5
 800a2e4:	bfd4      	ite	le
 800a2e6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a2ea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a2ee:	4620      	mov	r0, r4
 800a2f0:	ee10 2a10 	vmov	r2, s0
 800a2f4:	465b      	mov	r3, fp
 800a2f6:	4639      	mov	r1, r7
 800a2f8:	f7f6 faa8 	bl	800084c <__aeabi_ddiv>
 800a2fc:	ec41 0b10 	vmov	d0, r0, r1
 800a300:	b003      	add	sp, #12
 800a302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a306 <__copybits>:
 800a306:	3901      	subs	r1, #1
 800a308:	b570      	push	{r4, r5, r6, lr}
 800a30a:	1149      	asrs	r1, r1, #5
 800a30c:	6914      	ldr	r4, [r2, #16]
 800a30e:	3101      	adds	r1, #1
 800a310:	f102 0314 	add.w	r3, r2, #20
 800a314:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a318:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a31c:	1f05      	subs	r5, r0, #4
 800a31e:	42a3      	cmp	r3, r4
 800a320:	d30c      	bcc.n	800a33c <__copybits+0x36>
 800a322:	1aa3      	subs	r3, r4, r2
 800a324:	3b11      	subs	r3, #17
 800a326:	f023 0303 	bic.w	r3, r3, #3
 800a32a:	3211      	adds	r2, #17
 800a32c:	42a2      	cmp	r2, r4
 800a32e:	bf88      	it	hi
 800a330:	2300      	movhi	r3, #0
 800a332:	4418      	add	r0, r3
 800a334:	2300      	movs	r3, #0
 800a336:	4288      	cmp	r0, r1
 800a338:	d305      	bcc.n	800a346 <__copybits+0x40>
 800a33a:	bd70      	pop	{r4, r5, r6, pc}
 800a33c:	f853 6b04 	ldr.w	r6, [r3], #4
 800a340:	f845 6f04 	str.w	r6, [r5, #4]!
 800a344:	e7eb      	b.n	800a31e <__copybits+0x18>
 800a346:	f840 3b04 	str.w	r3, [r0], #4
 800a34a:	e7f4      	b.n	800a336 <__copybits+0x30>

0800a34c <__any_on>:
 800a34c:	f100 0214 	add.w	r2, r0, #20
 800a350:	6900      	ldr	r0, [r0, #16]
 800a352:	114b      	asrs	r3, r1, #5
 800a354:	4298      	cmp	r0, r3
 800a356:	b510      	push	{r4, lr}
 800a358:	db11      	blt.n	800a37e <__any_on+0x32>
 800a35a:	dd0a      	ble.n	800a372 <__any_on+0x26>
 800a35c:	f011 011f 	ands.w	r1, r1, #31
 800a360:	d007      	beq.n	800a372 <__any_on+0x26>
 800a362:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a366:	fa24 f001 	lsr.w	r0, r4, r1
 800a36a:	fa00 f101 	lsl.w	r1, r0, r1
 800a36e:	428c      	cmp	r4, r1
 800a370:	d10b      	bne.n	800a38a <__any_on+0x3e>
 800a372:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a376:	4293      	cmp	r3, r2
 800a378:	d803      	bhi.n	800a382 <__any_on+0x36>
 800a37a:	2000      	movs	r0, #0
 800a37c:	bd10      	pop	{r4, pc}
 800a37e:	4603      	mov	r3, r0
 800a380:	e7f7      	b.n	800a372 <__any_on+0x26>
 800a382:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a386:	2900      	cmp	r1, #0
 800a388:	d0f5      	beq.n	800a376 <__any_on+0x2a>
 800a38a:	2001      	movs	r0, #1
 800a38c:	e7f6      	b.n	800a37c <__any_on+0x30>

0800a38e <__ssputs_r>:
 800a38e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a392:	688e      	ldr	r6, [r1, #8]
 800a394:	429e      	cmp	r6, r3
 800a396:	4682      	mov	sl, r0
 800a398:	460c      	mov	r4, r1
 800a39a:	4690      	mov	r8, r2
 800a39c:	461f      	mov	r7, r3
 800a39e:	d838      	bhi.n	800a412 <__ssputs_r+0x84>
 800a3a0:	898a      	ldrh	r2, [r1, #12]
 800a3a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a3a6:	d032      	beq.n	800a40e <__ssputs_r+0x80>
 800a3a8:	6825      	ldr	r5, [r4, #0]
 800a3aa:	6909      	ldr	r1, [r1, #16]
 800a3ac:	eba5 0901 	sub.w	r9, r5, r1
 800a3b0:	6965      	ldr	r5, [r4, #20]
 800a3b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a3b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a3ba:	3301      	adds	r3, #1
 800a3bc:	444b      	add	r3, r9
 800a3be:	106d      	asrs	r5, r5, #1
 800a3c0:	429d      	cmp	r5, r3
 800a3c2:	bf38      	it	cc
 800a3c4:	461d      	movcc	r5, r3
 800a3c6:	0553      	lsls	r3, r2, #21
 800a3c8:	d531      	bpl.n	800a42e <__ssputs_r+0xa0>
 800a3ca:	4629      	mov	r1, r5
 800a3cc:	f7fb ff06 	bl	80061dc <_malloc_r>
 800a3d0:	4606      	mov	r6, r0
 800a3d2:	b950      	cbnz	r0, 800a3ea <__ssputs_r+0x5c>
 800a3d4:	230c      	movs	r3, #12
 800a3d6:	f8ca 3000 	str.w	r3, [sl]
 800a3da:	89a3      	ldrh	r3, [r4, #12]
 800a3dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3e0:	81a3      	strh	r3, [r4, #12]
 800a3e2:	f04f 30ff 	mov.w	r0, #4294967295
 800a3e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3ea:	6921      	ldr	r1, [r4, #16]
 800a3ec:	464a      	mov	r2, r9
 800a3ee:	f7fb fe5d 	bl	80060ac <memcpy>
 800a3f2:	89a3      	ldrh	r3, [r4, #12]
 800a3f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a3f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3fc:	81a3      	strh	r3, [r4, #12]
 800a3fe:	6126      	str	r6, [r4, #16]
 800a400:	6165      	str	r5, [r4, #20]
 800a402:	444e      	add	r6, r9
 800a404:	eba5 0509 	sub.w	r5, r5, r9
 800a408:	6026      	str	r6, [r4, #0]
 800a40a:	60a5      	str	r5, [r4, #8]
 800a40c:	463e      	mov	r6, r7
 800a40e:	42be      	cmp	r6, r7
 800a410:	d900      	bls.n	800a414 <__ssputs_r+0x86>
 800a412:	463e      	mov	r6, r7
 800a414:	6820      	ldr	r0, [r4, #0]
 800a416:	4632      	mov	r2, r6
 800a418:	4641      	mov	r1, r8
 800a41a:	f000 fb5f 	bl	800aadc <memmove>
 800a41e:	68a3      	ldr	r3, [r4, #8]
 800a420:	1b9b      	subs	r3, r3, r6
 800a422:	60a3      	str	r3, [r4, #8]
 800a424:	6823      	ldr	r3, [r4, #0]
 800a426:	4433      	add	r3, r6
 800a428:	6023      	str	r3, [r4, #0]
 800a42a:	2000      	movs	r0, #0
 800a42c:	e7db      	b.n	800a3e6 <__ssputs_r+0x58>
 800a42e:	462a      	mov	r2, r5
 800a430:	f000 fb6e 	bl	800ab10 <_realloc_r>
 800a434:	4606      	mov	r6, r0
 800a436:	2800      	cmp	r0, #0
 800a438:	d1e1      	bne.n	800a3fe <__ssputs_r+0x70>
 800a43a:	6921      	ldr	r1, [r4, #16]
 800a43c:	4650      	mov	r0, sl
 800a43e:	f7fb fe61 	bl	8006104 <_free_r>
 800a442:	e7c7      	b.n	800a3d4 <__ssputs_r+0x46>

0800a444 <_svfiprintf_r>:
 800a444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a448:	4698      	mov	r8, r3
 800a44a:	898b      	ldrh	r3, [r1, #12]
 800a44c:	061b      	lsls	r3, r3, #24
 800a44e:	b09d      	sub	sp, #116	; 0x74
 800a450:	4607      	mov	r7, r0
 800a452:	460d      	mov	r5, r1
 800a454:	4614      	mov	r4, r2
 800a456:	d50e      	bpl.n	800a476 <_svfiprintf_r+0x32>
 800a458:	690b      	ldr	r3, [r1, #16]
 800a45a:	b963      	cbnz	r3, 800a476 <_svfiprintf_r+0x32>
 800a45c:	2140      	movs	r1, #64	; 0x40
 800a45e:	f7fb febd 	bl	80061dc <_malloc_r>
 800a462:	6028      	str	r0, [r5, #0]
 800a464:	6128      	str	r0, [r5, #16]
 800a466:	b920      	cbnz	r0, 800a472 <_svfiprintf_r+0x2e>
 800a468:	230c      	movs	r3, #12
 800a46a:	603b      	str	r3, [r7, #0]
 800a46c:	f04f 30ff 	mov.w	r0, #4294967295
 800a470:	e0d1      	b.n	800a616 <_svfiprintf_r+0x1d2>
 800a472:	2340      	movs	r3, #64	; 0x40
 800a474:	616b      	str	r3, [r5, #20]
 800a476:	2300      	movs	r3, #0
 800a478:	9309      	str	r3, [sp, #36]	; 0x24
 800a47a:	2320      	movs	r3, #32
 800a47c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a480:	f8cd 800c 	str.w	r8, [sp, #12]
 800a484:	2330      	movs	r3, #48	; 0x30
 800a486:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a630 <_svfiprintf_r+0x1ec>
 800a48a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a48e:	f04f 0901 	mov.w	r9, #1
 800a492:	4623      	mov	r3, r4
 800a494:	469a      	mov	sl, r3
 800a496:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a49a:	b10a      	cbz	r2, 800a4a0 <_svfiprintf_r+0x5c>
 800a49c:	2a25      	cmp	r2, #37	; 0x25
 800a49e:	d1f9      	bne.n	800a494 <_svfiprintf_r+0x50>
 800a4a0:	ebba 0b04 	subs.w	fp, sl, r4
 800a4a4:	d00b      	beq.n	800a4be <_svfiprintf_r+0x7a>
 800a4a6:	465b      	mov	r3, fp
 800a4a8:	4622      	mov	r2, r4
 800a4aa:	4629      	mov	r1, r5
 800a4ac:	4638      	mov	r0, r7
 800a4ae:	f7ff ff6e 	bl	800a38e <__ssputs_r>
 800a4b2:	3001      	adds	r0, #1
 800a4b4:	f000 80aa 	beq.w	800a60c <_svfiprintf_r+0x1c8>
 800a4b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4ba:	445a      	add	r2, fp
 800a4bc:	9209      	str	r2, [sp, #36]	; 0x24
 800a4be:	f89a 3000 	ldrb.w	r3, [sl]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	f000 80a2 	beq.w	800a60c <_svfiprintf_r+0x1c8>
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a4ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4d2:	f10a 0a01 	add.w	sl, sl, #1
 800a4d6:	9304      	str	r3, [sp, #16]
 800a4d8:	9307      	str	r3, [sp, #28]
 800a4da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4de:	931a      	str	r3, [sp, #104]	; 0x68
 800a4e0:	4654      	mov	r4, sl
 800a4e2:	2205      	movs	r2, #5
 800a4e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4e8:	4851      	ldr	r0, [pc, #324]	; (800a630 <_svfiprintf_r+0x1ec>)
 800a4ea:	f7f5 fe79 	bl	80001e0 <memchr>
 800a4ee:	9a04      	ldr	r2, [sp, #16]
 800a4f0:	b9d8      	cbnz	r0, 800a52a <_svfiprintf_r+0xe6>
 800a4f2:	06d0      	lsls	r0, r2, #27
 800a4f4:	bf44      	itt	mi
 800a4f6:	2320      	movmi	r3, #32
 800a4f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4fc:	0711      	lsls	r1, r2, #28
 800a4fe:	bf44      	itt	mi
 800a500:	232b      	movmi	r3, #43	; 0x2b
 800a502:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a506:	f89a 3000 	ldrb.w	r3, [sl]
 800a50a:	2b2a      	cmp	r3, #42	; 0x2a
 800a50c:	d015      	beq.n	800a53a <_svfiprintf_r+0xf6>
 800a50e:	9a07      	ldr	r2, [sp, #28]
 800a510:	4654      	mov	r4, sl
 800a512:	2000      	movs	r0, #0
 800a514:	f04f 0c0a 	mov.w	ip, #10
 800a518:	4621      	mov	r1, r4
 800a51a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a51e:	3b30      	subs	r3, #48	; 0x30
 800a520:	2b09      	cmp	r3, #9
 800a522:	d94e      	bls.n	800a5c2 <_svfiprintf_r+0x17e>
 800a524:	b1b0      	cbz	r0, 800a554 <_svfiprintf_r+0x110>
 800a526:	9207      	str	r2, [sp, #28]
 800a528:	e014      	b.n	800a554 <_svfiprintf_r+0x110>
 800a52a:	eba0 0308 	sub.w	r3, r0, r8
 800a52e:	fa09 f303 	lsl.w	r3, r9, r3
 800a532:	4313      	orrs	r3, r2
 800a534:	9304      	str	r3, [sp, #16]
 800a536:	46a2      	mov	sl, r4
 800a538:	e7d2      	b.n	800a4e0 <_svfiprintf_r+0x9c>
 800a53a:	9b03      	ldr	r3, [sp, #12]
 800a53c:	1d19      	adds	r1, r3, #4
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	9103      	str	r1, [sp, #12]
 800a542:	2b00      	cmp	r3, #0
 800a544:	bfbb      	ittet	lt
 800a546:	425b      	neglt	r3, r3
 800a548:	f042 0202 	orrlt.w	r2, r2, #2
 800a54c:	9307      	strge	r3, [sp, #28]
 800a54e:	9307      	strlt	r3, [sp, #28]
 800a550:	bfb8      	it	lt
 800a552:	9204      	strlt	r2, [sp, #16]
 800a554:	7823      	ldrb	r3, [r4, #0]
 800a556:	2b2e      	cmp	r3, #46	; 0x2e
 800a558:	d10c      	bne.n	800a574 <_svfiprintf_r+0x130>
 800a55a:	7863      	ldrb	r3, [r4, #1]
 800a55c:	2b2a      	cmp	r3, #42	; 0x2a
 800a55e:	d135      	bne.n	800a5cc <_svfiprintf_r+0x188>
 800a560:	9b03      	ldr	r3, [sp, #12]
 800a562:	1d1a      	adds	r2, r3, #4
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	9203      	str	r2, [sp, #12]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	bfb8      	it	lt
 800a56c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a570:	3402      	adds	r4, #2
 800a572:	9305      	str	r3, [sp, #20]
 800a574:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a640 <_svfiprintf_r+0x1fc>
 800a578:	7821      	ldrb	r1, [r4, #0]
 800a57a:	2203      	movs	r2, #3
 800a57c:	4650      	mov	r0, sl
 800a57e:	f7f5 fe2f 	bl	80001e0 <memchr>
 800a582:	b140      	cbz	r0, 800a596 <_svfiprintf_r+0x152>
 800a584:	2340      	movs	r3, #64	; 0x40
 800a586:	eba0 000a 	sub.w	r0, r0, sl
 800a58a:	fa03 f000 	lsl.w	r0, r3, r0
 800a58e:	9b04      	ldr	r3, [sp, #16]
 800a590:	4303      	orrs	r3, r0
 800a592:	3401      	adds	r4, #1
 800a594:	9304      	str	r3, [sp, #16]
 800a596:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a59a:	4826      	ldr	r0, [pc, #152]	; (800a634 <_svfiprintf_r+0x1f0>)
 800a59c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5a0:	2206      	movs	r2, #6
 800a5a2:	f7f5 fe1d 	bl	80001e0 <memchr>
 800a5a6:	2800      	cmp	r0, #0
 800a5a8:	d038      	beq.n	800a61c <_svfiprintf_r+0x1d8>
 800a5aa:	4b23      	ldr	r3, [pc, #140]	; (800a638 <_svfiprintf_r+0x1f4>)
 800a5ac:	bb1b      	cbnz	r3, 800a5f6 <_svfiprintf_r+0x1b2>
 800a5ae:	9b03      	ldr	r3, [sp, #12]
 800a5b0:	3307      	adds	r3, #7
 800a5b2:	f023 0307 	bic.w	r3, r3, #7
 800a5b6:	3308      	adds	r3, #8
 800a5b8:	9303      	str	r3, [sp, #12]
 800a5ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5bc:	4433      	add	r3, r6
 800a5be:	9309      	str	r3, [sp, #36]	; 0x24
 800a5c0:	e767      	b.n	800a492 <_svfiprintf_r+0x4e>
 800a5c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5c6:	460c      	mov	r4, r1
 800a5c8:	2001      	movs	r0, #1
 800a5ca:	e7a5      	b.n	800a518 <_svfiprintf_r+0xd4>
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	3401      	adds	r4, #1
 800a5d0:	9305      	str	r3, [sp, #20]
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	f04f 0c0a 	mov.w	ip, #10
 800a5d8:	4620      	mov	r0, r4
 800a5da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5de:	3a30      	subs	r2, #48	; 0x30
 800a5e0:	2a09      	cmp	r2, #9
 800a5e2:	d903      	bls.n	800a5ec <_svfiprintf_r+0x1a8>
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d0c5      	beq.n	800a574 <_svfiprintf_r+0x130>
 800a5e8:	9105      	str	r1, [sp, #20]
 800a5ea:	e7c3      	b.n	800a574 <_svfiprintf_r+0x130>
 800a5ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5f0:	4604      	mov	r4, r0
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	e7f0      	b.n	800a5d8 <_svfiprintf_r+0x194>
 800a5f6:	ab03      	add	r3, sp, #12
 800a5f8:	9300      	str	r3, [sp, #0]
 800a5fa:	462a      	mov	r2, r5
 800a5fc:	4b0f      	ldr	r3, [pc, #60]	; (800a63c <_svfiprintf_r+0x1f8>)
 800a5fe:	a904      	add	r1, sp, #16
 800a600:	4638      	mov	r0, r7
 800a602:	f7fb feff 	bl	8006404 <_printf_float>
 800a606:	1c42      	adds	r2, r0, #1
 800a608:	4606      	mov	r6, r0
 800a60a:	d1d6      	bne.n	800a5ba <_svfiprintf_r+0x176>
 800a60c:	89ab      	ldrh	r3, [r5, #12]
 800a60e:	065b      	lsls	r3, r3, #25
 800a610:	f53f af2c 	bmi.w	800a46c <_svfiprintf_r+0x28>
 800a614:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a616:	b01d      	add	sp, #116	; 0x74
 800a618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a61c:	ab03      	add	r3, sp, #12
 800a61e:	9300      	str	r3, [sp, #0]
 800a620:	462a      	mov	r2, r5
 800a622:	4b06      	ldr	r3, [pc, #24]	; (800a63c <_svfiprintf_r+0x1f8>)
 800a624:	a904      	add	r1, sp, #16
 800a626:	4638      	mov	r0, r7
 800a628:	f7fc f990 	bl	800694c <_printf_i>
 800a62c:	e7eb      	b.n	800a606 <_svfiprintf_r+0x1c2>
 800a62e:	bf00      	nop
 800a630:	0800b964 	.word	0x0800b964
 800a634:	0800b96e 	.word	0x0800b96e
 800a638:	08006405 	.word	0x08006405
 800a63c:	0800a38f 	.word	0x0800a38f
 800a640:	0800b96a 	.word	0x0800b96a

0800a644 <__sfputc_r>:
 800a644:	6893      	ldr	r3, [r2, #8]
 800a646:	3b01      	subs	r3, #1
 800a648:	2b00      	cmp	r3, #0
 800a64a:	b410      	push	{r4}
 800a64c:	6093      	str	r3, [r2, #8]
 800a64e:	da08      	bge.n	800a662 <__sfputc_r+0x1e>
 800a650:	6994      	ldr	r4, [r2, #24]
 800a652:	42a3      	cmp	r3, r4
 800a654:	db01      	blt.n	800a65a <__sfputc_r+0x16>
 800a656:	290a      	cmp	r1, #10
 800a658:	d103      	bne.n	800a662 <__sfputc_r+0x1e>
 800a65a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a65e:	f7fd bceb 	b.w	8008038 <__swbuf_r>
 800a662:	6813      	ldr	r3, [r2, #0]
 800a664:	1c58      	adds	r0, r3, #1
 800a666:	6010      	str	r0, [r2, #0]
 800a668:	7019      	strb	r1, [r3, #0]
 800a66a:	4608      	mov	r0, r1
 800a66c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a670:	4770      	bx	lr

0800a672 <__sfputs_r>:
 800a672:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a674:	4606      	mov	r6, r0
 800a676:	460f      	mov	r7, r1
 800a678:	4614      	mov	r4, r2
 800a67a:	18d5      	adds	r5, r2, r3
 800a67c:	42ac      	cmp	r4, r5
 800a67e:	d101      	bne.n	800a684 <__sfputs_r+0x12>
 800a680:	2000      	movs	r0, #0
 800a682:	e007      	b.n	800a694 <__sfputs_r+0x22>
 800a684:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a688:	463a      	mov	r2, r7
 800a68a:	4630      	mov	r0, r6
 800a68c:	f7ff ffda 	bl	800a644 <__sfputc_r>
 800a690:	1c43      	adds	r3, r0, #1
 800a692:	d1f3      	bne.n	800a67c <__sfputs_r+0xa>
 800a694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a698 <_vfiprintf_r>:
 800a698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a69c:	460d      	mov	r5, r1
 800a69e:	b09d      	sub	sp, #116	; 0x74
 800a6a0:	4614      	mov	r4, r2
 800a6a2:	4698      	mov	r8, r3
 800a6a4:	4606      	mov	r6, r0
 800a6a6:	b118      	cbz	r0, 800a6b0 <_vfiprintf_r+0x18>
 800a6a8:	6983      	ldr	r3, [r0, #24]
 800a6aa:	b90b      	cbnz	r3, 800a6b0 <_vfiprintf_r+0x18>
 800a6ac:	f7fe fd18 	bl	80090e0 <__sinit>
 800a6b0:	4b89      	ldr	r3, [pc, #548]	; (800a8d8 <_vfiprintf_r+0x240>)
 800a6b2:	429d      	cmp	r5, r3
 800a6b4:	d11b      	bne.n	800a6ee <_vfiprintf_r+0x56>
 800a6b6:	6875      	ldr	r5, [r6, #4]
 800a6b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6ba:	07d9      	lsls	r1, r3, #31
 800a6bc:	d405      	bmi.n	800a6ca <_vfiprintf_r+0x32>
 800a6be:	89ab      	ldrh	r3, [r5, #12]
 800a6c0:	059a      	lsls	r2, r3, #22
 800a6c2:	d402      	bmi.n	800a6ca <_vfiprintf_r+0x32>
 800a6c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6c6:	f7ff f91c 	bl	8009902 <__retarget_lock_acquire_recursive>
 800a6ca:	89ab      	ldrh	r3, [r5, #12]
 800a6cc:	071b      	lsls	r3, r3, #28
 800a6ce:	d501      	bpl.n	800a6d4 <_vfiprintf_r+0x3c>
 800a6d0:	692b      	ldr	r3, [r5, #16]
 800a6d2:	b9eb      	cbnz	r3, 800a710 <_vfiprintf_r+0x78>
 800a6d4:	4629      	mov	r1, r5
 800a6d6:	4630      	mov	r0, r6
 800a6d8:	f7fd fd00 	bl	80080dc <__swsetup_r>
 800a6dc:	b1c0      	cbz	r0, 800a710 <_vfiprintf_r+0x78>
 800a6de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6e0:	07dc      	lsls	r4, r3, #31
 800a6e2:	d50e      	bpl.n	800a702 <_vfiprintf_r+0x6a>
 800a6e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6e8:	b01d      	add	sp, #116	; 0x74
 800a6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ee:	4b7b      	ldr	r3, [pc, #492]	; (800a8dc <_vfiprintf_r+0x244>)
 800a6f0:	429d      	cmp	r5, r3
 800a6f2:	d101      	bne.n	800a6f8 <_vfiprintf_r+0x60>
 800a6f4:	68b5      	ldr	r5, [r6, #8]
 800a6f6:	e7df      	b.n	800a6b8 <_vfiprintf_r+0x20>
 800a6f8:	4b79      	ldr	r3, [pc, #484]	; (800a8e0 <_vfiprintf_r+0x248>)
 800a6fa:	429d      	cmp	r5, r3
 800a6fc:	bf08      	it	eq
 800a6fe:	68f5      	ldreq	r5, [r6, #12]
 800a700:	e7da      	b.n	800a6b8 <_vfiprintf_r+0x20>
 800a702:	89ab      	ldrh	r3, [r5, #12]
 800a704:	0598      	lsls	r0, r3, #22
 800a706:	d4ed      	bmi.n	800a6e4 <_vfiprintf_r+0x4c>
 800a708:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a70a:	f7ff f8fb 	bl	8009904 <__retarget_lock_release_recursive>
 800a70e:	e7e9      	b.n	800a6e4 <_vfiprintf_r+0x4c>
 800a710:	2300      	movs	r3, #0
 800a712:	9309      	str	r3, [sp, #36]	; 0x24
 800a714:	2320      	movs	r3, #32
 800a716:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a71a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a71e:	2330      	movs	r3, #48	; 0x30
 800a720:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a8e4 <_vfiprintf_r+0x24c>
 800a724:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a728:	f04f 0901 	mov.w	r9, #1
 800a72c:	4623      	mov	r3, r4
 800a72e:	469a      	mov	sl, r3
 800a730:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a734:	b10a      	cbz	r2, 800a73a <_vfiprintf_r+0xa2>
 800a736:	2a25      	cmp	r2, #37	; 0x25
 800a738:	d1f9      	bne.n	800a72e <_vfiprintf_r+0x96>
 800a73a:	ebba 0b04 	subs.w	fp, sl, r4
 800a73e:	d00b      	beq.n	800a758 <_vfiprintf_r+0xc0>
 800a740:	465b      	mov	r3, fp
 800a742:	4622      	mov	r2, r4
 800a744:	4629      	mov	r1, r5
 800a746:	4630      	mov	r0, r6
 800a748:	f7ff ff93 	bl	800a672 <__sfputs_r>
 800a74c:	3001      	adds	r0, #1
 800a74e:	f000 80aa 	beq.w	800a8a6 <_vfiprintf_r+0x20e>
 800a752:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a754:	445a      	add	r2, fp
 800a756:	9209      	str	r2, [sp, #36]	; 0x24
 800a758:	f89a 3000 	ldrb.w	r3, [sl]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	f000 80a2 	beq.w	800a8a6 <_vfiprintf_r+0x20e>
 800a762:	2300      	movs	r3, #0
 800a764:	f04f 32ff 	mov.w	r2, #4294967295
 800a768:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a76c:	f10a 0a01 	add.w	sl, sl, #1
 800a770:	9304      	str	r3, [sp, #16]
 800a772:	9307      	str	r3, [sp, #28]
 800a774:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a778:	931a      	str	r3, [sp, #104]	; 0x68
 800a77a:	4654      	mov	r4, sl
 800a77c:	2205      	movs	r2, #5
 800a77e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a782:	4858      	ldr	r0, [pc, #352]	; (800a8e4 <_vfiprintf_r+0x24c>)
 800a784:	f7f5 fd2c 	bl	80001e0 <memchr>
 800a788:	9a04      	ldr	r2, [sp, #16]
 800a78a:	b9d8      	cbnz	r0, 800a7c4 <_vfiprintf_r+0x12c>
 800a78c:	06d1      	lsls	r1, r2, #27
 800a78e:	bf44      	itt	mi
 800a790:	2320      	movmi	r3, #32
 800a792:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a796:	0713      	lsls	r3, r2, #28
 800a798:	bf44      	itt	mi
 800a79a:	232b      	movmi	r3, #43	; 0x2b
 800a79c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7a0:	f89a 3000 	ldrb.w	r3, [sl]
 800a7a4:	2b2a      	cmp	r3, #42	; 0x2a
 800a7a6:	d015      	beq.n	800a7d4 <_vfiprintf_r+0x13c>
 800a7a8:	9a07      	ldr	r2, [sp, #28]
 800a7aa:	4654      	mov	r4, sl
 800a7ac:	2000      	movs	r0, #0
 800a7ae:	f04f 0c0a 	mov.w	ip, #10
 800a7b2:	4621      	mov	r1, r4
 800a7b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7b8:	3b30      	subs	r3, #48	; 0x30
 800a7ba:	2b09      	cmp	r3, #9
 800a7bc:	d94e      	bls.n	800a85c <_vfiprintf_r+0x1c4>
 800a7be:	b1b0      	cbz	r0, 800a7ee <_vfiprintf_r+0x156>
 800a7c0:	9207      	str	r2, [sp, #28]
 800a7c2:	e014      	b.n	800a7ee <_vfiprintf_r+0x156>
 800a7c4:	eba0 0308 	sub.w	r3, r0, r8
 800a7c8:	fa09 f303 	lsl.w	r3, r9, r3
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	9304      	str	r3, [sp, #16]
 800a7d0:	46a2      	mov	sl, r4
 800a7d2:	e7d2      	b.n	800a77a <_vfiprintf_r+0xe2>
 800a7d4:	9b03      	ldr	r3, [sp, #12]
 800a7d6:	1d19      	adds	r1, r3, #4
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	9103      	str	r1, [sp, #12]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	bfbb      	ittet	lt
 800a7e0:	425b      	neglt	r3, r3
 800a7e2:	f042 0202 	orrlt.w	r2, r2, #2
 800a7e6:	9307      	strge	r3, [sp, #28]
 800a7e8:	9307      	strlt	r3, [sp, #28]
 800a7ea:	bfb8      	it	lt
 800a7ec:	9204      	strlt	r2, [sp, #16]
 800a7ee:	7823      	ldrb	r3, [r4, #0]
 800a7f0:	2b2e      	cmp	r3, #46	; 0x2e
 800a7f2:	d10c      	bne.n	800a80e <_vfiprintf_r+0x176>
 800a7f4:	7863      	ldrb	r3, [r4, #1]
 800a7f6:	2b2a      	cmp	r3, #42	; 0x2a
 800a7f8:	d135      	bne.n	800a866 <_vfiprintf_r+0x1ce>
 800a7fa:	9b03      	ldr	r3, [sp, #12]
 800a7fc:	1d1a      	adds	r2, r3, #4
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	9203      	str	r2, [sp, #12]
 800a802:	2b00      	cmp	r3, #0
 800a804:	bfb8      	it	lt
 800a806:	f04f 33ff 	movlt.w	r3, #4294967295
 800a80a:	3402      	adds	r4, #2
 800a80c:	9305      	str	r3, [sp, #20]
 800a80e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a8f4 <_vfiprintf_r+0x25c>
 800a812:	7821      	ldrb	r1, [r4, #0]
 800a814:	2203      	movs	r2, #3
 800a816:	4650      	mov	r0, sl
 800a818:	f7f5 fce2 	bl	80001e0 <memchr>
 800a81c:	b140      	cbz	r0, 800a830 <_vfiprintf_r+0x198>
 800a81e:	2340      	movs	r3, #64	; 0x40
 800a820:	eba0 000a 	sub.w	r0, r0, sl
 800a824:	fa03 f000 	lsl.w	r0, r3, r0
 800a828:	9b04      	ldr	r3, [sp, #16]
 800a82a:	4303      	orrs	r3, r0
 800a82c:	3401      	adds	r4, #1
 800a82e:	9304      	str	r3, [sp, #16]
 800a830:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a834:	482c      	ldr	r0, [pc, #176]	; (800a8e8 <_vfiprintf_r+0x250>)
 800a836:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a83a:	2206      	movs	r2, #6
 800a83c:	f7f5 fcd0 	bl	80001e0 <memchr>
 800a840:	2800      	cmp	r0, #0
 800a842:	d03f      	beq.n	800a8c4 <_vfiprintf_r+0x22c>
 800a844:	4b29      	ldr	r3, [pc, #164]	; (800a8ec <_vfiprintf_r+0x254>)
 800a846:	bb1b      	cbnz	r3, 800a890 <_vfiprintf_r+0x1f8>
 800a848:	9b03      	ldr	r3, [sp, #12]
 800a84a:	3307      	adds	r3, #7
 800a84c:	f023 0307 	bic.w	r3, r3, #7
 800a850:	3308      	adds	r3, #8
 800a852:	9303      	str	r3, [sp, #12]
 800a854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a856:	443b      	add	r3, r7
 800a858:	9309      	str	r3, [sp, #36]	; 0x24
 800a85a:	e767      	b.n	800a72c <_vfiprintf_r+0x94>
 800a85c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a860:	460c      	mov	r4, r1
 800a862:	2001      	movs	r0, #1
 800a864:	e7a5      	b.n	800a7b2 <_vfiprintf_r+0x11a>
 800a866:	2300      	movs	r3, #0
 800a868:	3401      	adds	r4, #1
 800a86a:	9305      	str	r3, [sp, #20]
 800a86c:	4619      	mov	r1, r3
 800a86e:	f04f 0c0a 	mov.w	ip, #10
 800a872:	4620      	mov	r0, r4
 800a874:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a878:	3a30      	subs	r2, #48	; 0x30
 800a87a:	2a09      	cmp	r2, #9
 800a87c:	d903      	bls.n	800a886 <_vfiprintf_r+0x1ee>
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d0c5      	beq.n	800a80e <_vfiprintf_r+0x176>
 800a882:	9105      	str	r1, [sp, #20]
 800a884:	e7c3      	b.n	800a80e <_vfiprintf_r+0x176>
 800a886:	fb0c 2101 	mla	r1, ip, r1, r2
 800a88a:	4604      	mov	r4, r0
 800a88c:	2301      	movs	r3, #1
 800a88e:	e7f0      	b.n	800a872 <_vfiprintf_r+0x1da>
 800a890:	ab03      	add	r3, sp, #12
 800a892:	9300      	str	r3, [sp, #0]
 800a894:	462a      	mov	r2, r5
 800a896:	4b16      	ldr	r3, [pc, #88]	; (800a8f0 <_vfiprintf_r+0x258>)
 800a898:	a904      	add	r1, sp, #16
 800a89a:	4630      	mov	r0, r6
 800a89c:	f7fb fdb2 	bl	8006404 <_printf_float>
 800a8a0:	4607      	mov	r7, r0
 800a8a2:	1c78      	adds	r0, r7, #1
 800a8a4:	d1d6      	bne.n	800a854 <_vfiprintf_r+0x1bc>
 800a8a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8a8:	07d9      	lsls	r1, r3, #31
 800a8aa:	d405      	bmi.n	800a8b8 <_vfiprintf_r+0x220>
 800a8ac:	89ab      	ldrh	r3, [r5, #12]
 800a8ae:	059a      	lsls	r2, r3, #22
 800a8b0:	d402      	bmi.n	800a8b8 <_vfiprintf_r+0x220>
 800a8b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8b4:	f7ff f826 	bl	8009904 <__retarget_lock_release_recursive>
 800a8b8:	89ab      	ldrh	r3, [r5, #12]
 800a8ba:	065b      	lsls	r3, r3, #25
 800a8bc:	f53f af12 	bmi.w	800a6e4 <_vfiprintf_r+0x4c>
 800a8c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8c2:	e711      	b.n	800a6e8 <_vfiprintf_r+0x50>
 800a8c4:	ab03      	add	r3, sp, #12
 800a8c6:	9300      	str	r3, [sp, #0]
 800a8c8:	462a      	mov	r2, r5
 800a8ca:	4b09      	ldr	r3, [pc, #36]	; (800a8f0 <_vfiprintf_r+0x258>)
 800a8cc:	a904      	add	r1, sp, #16
 800a8ce:	4630      	mov	r0, r6
 800a8d0:	f7fc f83c 	bl	800694c <_printf_i>
 800a8d4:	e7e4      	b.n	800a8a0 <_vfiprintf_r+0x208>
 800a8d6:	bf00      	nop
 800a8d8:	0800b74c 	.word	0x0800b74c
 800a8dc:	0800b76c 	.word	0x0800b76c
 800a8e0:	0800b72c 	.word	0x0800b72c
 800a8e4:	0800b964 	.word	0x0800b964
 800a8e8:	0800b96e 	.word	0x0800b96e
 800a8ec:	08006405 	.word	0x08006405
 800a8f0:	0800a673 	.word	0x0800a673
 800a8f4:	0800b96a 	.word	0x0800b96a

0800a8f8 <nan>:
 800a8f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a900 <nan+0x8>
 800a8fc:	4770      	bx	lr
 800a8fe:	bf00      	nop
 800a900:	00000000 	.word	0x00000000
 800a904:	7ff80000 	.word	0x7ff80000

0800a908 <__sread>:
 800a908:	b510      	push	{r4, lr}
 800a90a:	460c      	mov	r4, r1
 800a90c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a910:	f000 f92e 	bl	800ab70 <_read_r>
 800a914:	2800      	cmp	r0, #0
 800a916:	bfab      	itete	ge
 800a918:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a91a:	89a3      	ldrhlt	r3, [r4, #12]
 800a91c:	181b      	addge	r3, r3, r0
 800a91e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a922:	bfac      	ite	ge
 800a924:	6563      	strge	r3, [r4, #84]	; 0x54
 800a926:	81a3      	strhlt	r3, [r4, #12]
 800a928:	bd10      	pop	{r4, pc}

0800a92a <__swrite>:
 800a92a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a92e:	461f      	mov	r7, r3
 800a930:	898b      	ldrh	r3, [r1, #12]
 800a932:	05db      	lsls	r3, r3, #23
 800a934:	4605      	mov	r5, r0
 800a936:	460c      	mov	r4, r1
 800a938:	4616      	mov	r6, r2
 800a93a:	d505      	bpl.n	800a948 <__swrite+0x1e>
 800a93c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a940:	2302      	movs	r3, #2
 800a942:	2200      	movs	r2, #0
 800a944:	f000 f8b8 	bl	800aab8 <_lseek_r>
 800a948:	89a3      	ldrh	r3, [r4, #12]
 800a94a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a94e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a952:	81a3      	strh	r3, [r4, #12]
 800a954:	4632      	mov	r2, r6
 800a956:	463b      	mov	r3, r7
 800a958:	4628      	mov	r0, r5
 800a95a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a95e:	f000 b837 	b.w	800a9d0 <_write_r>

0800a962 <__sseek>:
 800a962:	b510      	push	{r4, lr}
 800a964:	460c      	mov	r4, r1
 800a966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a96a:	f000 f8a5 	bl	800aab8 <_lseek_r>
 800a96e:	1c43      	adds	r3, r0, #1
 800a970:	89a3      	ldrh	r3, [r4, #12]
 800a972:	bf15      	itete	ne
 800a974:	6560      	strne	r0, [r4, #84]	; 0x54
 800a976:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a97a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a97e:	81a3      	strheq	r3, [r4, #12]
 800a980:	bf18      	it	ne
 800a982:	81a3      	strhne	r3, [r4, #12]
 800a984:	bd10      	pop	{r4, pc}

0800a986 <__sclose>:
 800a986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a98a:	f000 b851 	b.w	800aa30 <_close_r>

0800a98e <strncmp>:
 800a98e:	b510      	push	{r4, lr}
 800a990:	b17a      	cbz	r2, 800a9b2 <strncmp+0x24>
 800a992:	4603      	mov	r3, r0
 800a994:	3901      	subs	r1, #1
 800a996:	1884      	adds	r4, r0, r2
 800a998:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a99c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a9a0:	4290      	cmp	r0, r2
 800a9a2:	d101      	bne.n	800a9a8 <strncmp+0x1a>
 800a9a4:	42a3      	cmp	r3, r4
 800a9a6:	d101      	bne.n	800a9ac <strncmp+0x1e>
 800a9a8:	1a80      	subs	r0, r0, r2
 800a9aa:	bd10      	pop	{r4, pc}
 800a9ac:	2800      	cmp	r0, #0
 800a9ae:	d1f3      	bne.n	800a998 <strncmp+0xa>
 800a9b0:	e7fa      	b.n	800a9a8 <strncmp+0x1a>
 800a9b2:	4610      	mov	r0, r2
 800a9b4:	e7f9      	b.n	800a9aa <strncmp+0x1c>

0800a9b6 <__ascii_wctomb>:
 800a9b6:	b149      	cbz	r1, 800a9cc <__ascii_wctomb+0x16>
 800a9b8:	2aff      	cmp	r2, #255	; 0xff
 800a9ba:	bf85      	ittet	hi
 800a9bc:	238a      	movhi	r3, #138	; 0x8a
 800a9be:	6003      	strhi	r3, [r0, #0]
 800a9c0:	700a      	strbls	r2, [r1, #0]
 800a9c2:	f04f 30ff 	movhi.w	r0, #4294967295
 800a9c6:	bf98      	it	ls
 800a9c8:	2001      	movls	r0, #1
 800a9ca:	4770      	bx	lr
 800a9cc:	4608      	mov	r0, r1
 800a9ce:	4770      	bx	lr

0800a9d0 <_write_r>:
 800a9d0:	b538      	push	{r3, r4, r5, lr}
 800a9d2:	4d07      	ldr	r5, [pc, #28]	; (800a9f0 <_write_r+0x20>)
 800a9d4:	4604      	mov	r4, r0
 800a9d6:	4608      	mov	r0, r1
 800a9d8:	4611      	mov	r1, r2
 800a9da:	2200      	movs	r2, #0
 800a9dc:	602a      	str	r2, [r5, #0]
 800a9de:	461a      	mov	r2, r3
 800a9e0:	f7f6 fb0a 	bl	8000ff8 <_write>
 800a9e4:	1c43      	adds	r3, r0, #1
 800a9e6:	d102      	bne.n	800a9ee <_write_r+0x1e>
 800a9e8:	682b      	ldr	r3, [r5, #0]
 800a9ea:	b103      	cbz	r3, 800a9ee <_write_r+0x1e>
 800a9ec:	6023      	str	r3, [r4, #0]
 800a9ee:	bd38      	pop	{r3, r4, r5, pc}
 800a9f0:	2000136c 	.word	0x2000136c

0800a9f4 <__assert_func>:
 800a9f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a9f6:	4614      	mov	r4, r2
 800a9f8:	461a      	mov	r2, r3
 800a9fa:	4b09      	ldr	r3, [pc, #36]	; (800aa20 <__assert_func+0x2c>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	4605      	mov	r5, r0
 800aa00:	68d8      	ldr	r0, [r3, #12]
 800aa02:	b14c      	cbz	r4, 800aa18 <__assert_func+0x24>
 800aa04:	4b07      	ldr	r3, [pc, #28]	; (800aa24 <__assert_func+0x30>)
 800aa06:	9100      	str	r1, [sp, #0]
 800aa08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aa0c:	4906      	ldr	r1, [pc, #24]	; (800aa28 <__assert_func+0x34>)
 800aa0e:	462b      	mov	r3, r5
 800aa10:	f000 f81e 	bl	800aa50 <fiprintf>
 800aa14:	f000 f8be 	bl	800ab94 <abort>
 800aa18:	4b04      	ldr	r3, [pc, #16]	; (800aa2c <__assert_func+0x38>)
 800aa1a:	461c      	mov	r4, r3
 800aa1c:	e7f3      	b.n	800aa06 <__assert_func+0x12>
 800aa1e:	bf00      	nop
 800aa20:	2000000c 	.word	0x2000000c
 800aa24:	0800b975 	.word	0x0800b975
 800aa28:	0800b982 	.word	0x0800b982
 800aa2c:	0800b9b0 	.word	0x0800b9b0

0800aa30 <_close_r>:
 800aa30:	b538      	push	{r3, r4, r5, lr}
 800aa32:	4d06      	ldr	r5, [pc, #24]	; (800aa4c <_close_r+0x1c>)
 800aa34:	2300      	movs	r3, #0
 800aa36:	4604      	mov	r4, r0
 800aa38:	4608      	mov	r0, r1
 800aa3a:	602b      	str	r3, [r5, #0]
 800aa3c:	f7f7 f80f 	bl	8001a5e <_close>
 800aa40:	1c43      	adds	r3, r0, #1
 800aa42:	d102      	bne.n	800aa4a <_close_r+0x1a>
 800aa44:	682b      	ldr	r3, [r5, #0]
 800aa46:	b103      	cbz	r3, 800aa4a <_close_r+0x1a>
 800aa48:	6023      	str	r3, [r4, #0]
 800aa4a:	bd38      	pop	{r3, r4, r5, pc}
 800aa4c:	2000136c 	.word	0x2000136c

0800aa50 <fiprintf>:
 800aa50:	b40e      	push	{r1, r2, r3}
 800aa52:	b503      	push	{r0, r1, lr}
 800aa54:	4601      	mov	r1, r0
 800aa56:	ab03      	add	r3, sp, #12
 800aa58:	4805      	ldr	r0, [pc, #20]	; (800aa70 <fiprintf+0x20>)
 800aa5a:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa5e:	6800      	ldr	r0, [r0, #0]
 800aa60:	9301      	str	r3, [sp, #4]
 800aa62:	f7ff fe19 	bl	800a698 <_vfiprintf_r>
 800aa66:	b002      	add	sp, #8
 800aa68:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa6c:	b003      	add	sp, #12
 800aa6e:	4770      	bx	lr
 800aa70:	2000000c 	.word	0x2000000c

0800aa74 <_fstat_r>:
 800aa74:	b538      	push	{r3, r4, r5, lr}
 800aa76:	4d07      	ldr	r5, [pc, #28]	; (800aa94 <_fstat_r+0x20>)
 800aa78:	2300      	movs	r3, #0
 800aa7a:	4604      	mov	r4, r0
 800aa7c:	4608      	mov	r0, r1
 800aa7e:	4611      	mov	r1, r2
 800aa80:	602b      	str	r3, [r5, #0]
 800aa82:	f7f6 fff8 	bl	8001a76 <_fstat>
 800aa86:	1c43      	adds	r3, r0, #1
 800aa88:	d102      	bne.n	800aa90 <_fstat_r+0x1c>
 800aa8a:	682b      	ldr	r3, [r5, #0]
 800aa8c:	b103      	cbz	r3, 800aa90 <_fstat_r+0x1c>
 800aa8e:	6023      	str	r3, [r4, #0]
 800aa90:	bd38      	pop	{r3, r4, r5, pc}
 800aa92:	bf00      	nop
 800aa94:	2000136c 	.word	0x2000136c

0800aa98 <_isatty_r>:
 800aa98:	b538      	push	{r3, r4, r5, lr}
 800aa9a:	4d06      	ldr	r5, [pc, #24]	; (800aab4 <_isatty_r+0x1c>)
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	4604      	mov	r4, r0
 800aaa0:	4608      	mov	r0, r1
 800aaa2:	602b      	str	r3, [r5, #0]
 800aaa4:	f7f6 fff7 	bl	8001a96 <_isatty>
 800aaa8:	1c43      	adds	r3, r0, #1
 800aaaa:	d102      	bne.n	800aab2 <_isatty_r+0x1a>
 800aaac:	682b      	ldr	r3, [r5, #0]
 800aaae:	b103      	cbz	r3, 800aab2 <_isatty_r+0x1a>
 800aab0:	6023      	str	r3, [r4, #0]
 800aab2:	bd38      	pop	{r3, r4, r5, pc}
 800aab4:	2000136c 	.word	0x2000136c

0800aab8 <_lseek_r>:
 800aab8:	b538      	push	{r3, r4, r5, lr}
 800aaba:	4d07      	ldr	r5, [pc, #28]	; (800aad8 <_lseek_r+0x20>)
 800aabc:	4604      	mov	r4, r0
 800aabe:	4608      	mov	r0, r1
 800aac0:	4611      	mov	r1, r2
 800aac2:	2200      	movs	r2, #0
 800aac4:	602a      	str	r2, [r5, #0]
 800aac6:	461a      	mov	r2, r3
 800aac8:	f7f6 fff0 	bl	8001aac <_lseek>
 800aacc:	1c43      	adds	r3, r0, #1
 800aace:	d102      	bne.n	800aad6 <_lseek_r+0x1e>
 800aad0:	682b      	ldr	r3, [r5, #0]
 800aad2:	b103      	cbz	r3, 800aad6 <_lseek_r+0x1e>
 800aad4:	6023      	str	r3, [r4, #0]
 800aad6:	bd38      	pop	{r3, r4, r5, pc}
 800aad8:	2000136c 	.word	0x2000136c

0800aadc <memmove>:
 800aadc:	4288      	cmp	r0, r1
 800aade:	b510      	push	{r4, lr}
 800aae0:	eb01 0402 	add.w	r4, r1, r2
 800aae4:	d902      	bls.n	800aaec <memmove+0x10>
 800aae6:	4284      	cmp	r4, r0
 800aae8:	4623      	mov	r3, r4
 800aaea:	d807      	bhi.n	800aafc <memmove+0x20>
 800aaec:	1e43      	subs	r3, r0, #1
 800aaee:	42a1      	cmp	r1, r4
 800aaf0:	d008      	beq.n	800ab04 <memmove+0x28>
 800aaf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aaf6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aafa:	e7f8      	b.n	800aaee <memmove+0x12>
 800aafc:	4402      	add	r2, r0
 800aafe:	4601      	mov	r1, r0
 800ab00:	428a      	cmp	r2, r1
 800ab02:	d100      	bne.n	800ab06 <memmove+0x2a>
 800ab04:	bd10      	pop	{r4, pc}
 800ab06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ab0e:	e7f7      	b.n	800ab00 <memmove+0x24>

0800ab10 <_realloc_r>:
 800ab10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab14:	4680      	mov	r8, r0
 800ab16:	4614      	mov	r4, r2
 800ab18:	460e      	mov	r6, r1
 800ab1a:	b921      	cbnz	r1, 800ab26 <_realloc_r+0x16>
 800ab1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab20:	4611      	mov	r1, r2
 800ab22:	f7fb bb5b 	b.w	80061dc <_malloc_r>
 800ab26:	b92a      	cbnz	r2, 800ab34 <_realloc_r+0x24>
 800ab28:	f7fb faec 	bl	8006104 <_free_r>
 800ab2c:	4625      	mov	r5, r4
 800ab2e:	4628      	mov	r0, r5
 800ab30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab34:	f000 f835 	bl	800aba2 <_malloc_usable_size_r>
 800ab38:	4284      	cmp	r4, r0
 800ab3a:	4607      	mov	r7, r0
 800ab3c:	d802      	bhi.n	800ab44 <_realloc_r+0x34>
 800ab3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ab42:	d812      	bhi.n	800ab6a <_realloc_r+0x5a>
 800ab44:	4621      	mov	r1, r4
 800ab46:	4640      	mov	r0, r8
 800ab48:	f7fb fb48 	bl	80061dc <_malloc_r>
 800ab4c:	4605      	mov	r5, r0
 800ab4e:	2800      	cmp	r0, #0
 800ab50:	d0ed      	beq.n	800ab2e <_realloc_r+0x1e>
 800ab52:	42bc      	cmp	r4, r7
 800ab54:	4622      	mov	r2, r4
 800ab56:	4631      	mov	r1, r6
 800ab58:	bf28      	it	cs
 800ab5a:	463a      	movcs	r2, r7
 800ab5c:	f7fb faa6 	bl	80060ac <memcpy>
 800ab60:	4631      	mov	r1, r6
 800ab62:	4640      	mov	r0, r8
 800ab64:	f7fb face 	bl	8006104 <_free_r>
 800ab68:	e7e1      	b.n	800ab2e <_realloc_r+0x1e>
 800ab6a:	4635      	mov	r5, r6
 800ab6c:	e7df      	b.n	800ab2e <_realloc_r+0x1e>
	...

0800ab70 <_read_r>:
 800ab70:	b538      	push	{r3, r4, r5, lr}
 800ab72:	4d07      	ldr	r5, [pc, #28]	; (800ab90 <_read_r+0x20>)
 800ab74:	4604      	mov	r4, r0
 800ab76:	4608      	mov	r0, r1
 800ab78:	4611      	mov	r1, r2
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	602a      	str	r2, [r5, #0]
 800ab7e:	461a      	mov	r2, r3
 800ab80:	f7f6 ff50 	bl	8001a24 <_read>
 800ab84:	1c43      	adds	r3, r0, #1
 800ab86:	d102      	bne.n	800ab8e <_read_r+0x1e>
 800ab88:	682b      	ldr	r3, [r5, #0]
 800ab8a:	b103      	cbz	r3, 800ab8e <_read_r+0x1e>
 800ab8c:	6023      	str	r3, [r4, #0]
 800ab8e:	bd38      	pop	{r3, r4, r5, pc}
 800ab90:	2000136c 	.word	0x2000136c

0800ab94 <abort>:
 800ab94:	b508      	push	{r3, lr}
 800ab96:	2006      	movs	r0, #6
 800ab98:	f000 f834 	bl	800ac04 <raise>
 800ab9c:	2001      	movs	r0, #1
 800ab9e:	f7f6 ff37 	bl	8001a10 <_exit>

0800aba2 <_malloc_usable_size_r>:
 800aba2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aba6:	1f18      	subs	r0, r3, #4
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	bfbc      	itt	lt
 800abac:	580b      	ldrlt	r3, [r1, r0]
 800abae:	18c0      	addlt	r0, r0, r3
 800abb0:	4770      	bx	lr

0800abb2 <_raise_r>:
 800abb2:	291f      	cmp	r1, #31
 800abb4:	b538      	push	{r3, r4, r5, lr}
 800abb6:	4604      	mov	r4, r0
 800abb8:	460d      	mov	r5, r1
 800abba:	d904      	bls.n	800abc6 <_raise_r+0x14>
 800abbc:	2316      	movs	r3, #22
 800abbe:	6003      	str	r3, [r0, #0]
 800abc0:	f04f 30ff 	mov.w	r0, #4294967295
 800abc4:	bd38      	pop	{r3, r4, r5, pc}
 800abc6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800abc8:	b112      	cbz	r2, 800abd0 <_raise_r+0x1e>
 800abca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800abce:	b94b      	cbnz	r3, 800abe4 <_raise_r+0x32>
 800abd0:	4620      	mov	r0, r4
 800abd2:	f000 f831 	bl	800ac38 <_getpid_r>
 800abd6:	462a      	mov	r2, r5
 800abd8:	4601      	mov	r1, r0
 800abda:	4620      	mov	r0, r4
 800abdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abe0:	f000 b818 	b.w	800ac14 <_kill_r>
 800abe4:	2b01      	cmp	r3, #1
 800abe6:	d00a      	beq.n	800abfe <_raise_r+0x4c>
 800abe8:	1c59      	adds	r1, r3, #1
 800abea:	d103      	bne.n	800abf4 <_raise_r+0x42>
 800abec:	2316      	movs	r3, #22
 800abee:	6003      	str	r3, [r0, #0]
 800abf0:	2001      	movs	r0, #1
 800abf2:	e7e7      	b.n	800abc4 <_raise_r+0x12>
 800abf4:	2400      	movs	r4, #0
 800abf6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800abfa:	4628      	mov	r0, r5
 800abfc:	4798      	blx	r3
 800abfe:	2000      	movs	r0, #0
 800ac00:	e7e0      	b.n	800abc4 <_raise_r+0x12>
	...

0800ac04 <raise>:
 800ac04:	4b02      	ldr	r3, [pc, #8]	; (800ac10 <raise+0xc>)
 800ac06:	4601      	mov	r1, r0
 800ac08:	6818      	ldr	r0, [r3, #0]
 800ac0a:	f7ff bfd2 	b.w	800abb2 <_raise_r>
 800ac0e:	bf00      	nop
 800ac10:	2000000c 	.word	0x2000000c

0800ac14 <_kill_r>:
 800ac14:	b538      	push	{r3, r4, r5, lr}
 800ac16:	4d07      	ldr	r5, [pc, #28]	; (800ac34 <_kill_r+0x20>)
 800ac18:	2300      	movs	r3, #0
 800ac1a:	4604      	mov	r4, r0
 800ac1c:	4608      	mov	r0, r1
 800ac1e:	4611      	mov	r1, r2
 800ac20:	602b      	str	r3, [r5, #0]
 800ac22:	f7f6 fee5 	bl	80019f0 <_kill>
 800ac26:	1c43      	adds	r3, r0, #1
 800ac28:	d102      	bne.n	800ac30 <_kill_r+0x1c>
 800ac2a:	682b      	ldr	r3, [r5, #0]
 800ac2c:	b103      	cbz	r3, 800ac30 <_kill_r+0x1c>
 800ac2e:	6023      	str	r3, [r4, #0]
 800ac30:	bd38      	pop	{r3, r4, r5, pc}
 800ac32:	bf00      	nop
 800ac34:	2000136c 	.word	0x2000136c

0800ac38 <_getpid_r>:
 800ac38:	f7f6 bed2 	b.w	80019e0 <_getpid>

0800ac3c <_init>:
 800ac3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac3e:	bf00      	nop
 800ac40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac42:	bc08      	pop	{r3}
 800ac44:	469e      	mov	lr, r3
 800ac46:	4770      	bx	lr

0800ac48 <_fini>:
 800ac48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac4a:	bf00      	nop
 800ac4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac4e:	bc08      	pop	{r3}
 800ac50:	469e      	mov	lr, r3
 800ac52:	4770      	bx	lr
