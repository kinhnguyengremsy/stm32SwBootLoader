
stm32SwBootLoader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa6c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000106c  0800ac00  0800ac00  0001ac00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc6c  0800bc6c  00020240  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc6c  0800bc6c  0001bc6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc74  0800bc74  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc74  0800bc74  0001bc74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc78  0800bc78  0001bc78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800bc7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020240  2**0
                  CONTENTS
 10 .bss          00001a88  20000240  20000240  00020240  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001cc8  20001cc8  00020240  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014e3f  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003137  00000000  00000000  000350af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c68  00000000  00000000  000381e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bb0  00000000  00000000  00038e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002181f  00000000  00000000  00039a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010b3d  00000000  00000000  0005b21f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7379  00000000  00000000  0006bd5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001330d5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004730  00000000  00000000  00133128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000240 	.word	0x20000240
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800abe4 	.word	0x0800abe4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000244 	.word	0x20000244
 80001cc:	0800abe4 	.word	0x0800abe4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, 10);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	230a      	movs	r3, #10
 8000ffe:	68b9      	ldr	r1, [r7, #8]
 8001000:	4803      	ldr	r0, [pc, #12]	; (8001010 <_write+0x24>)
 8001002:	f002 fd7c 	bl	8003afe <HAL_UART_Transmit>
  return len;
 8001006:	687b      	ldr	r3, [r7, #4]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000474 	.word	0x20000474

08001014 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <main+0x38>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f006 f847 	bl	80070b4 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001026:	f000 fd49 	bl	8001abc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800102a:	f000 f811 	bl	8001050 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102e:	f000 f94d 	bl	80012cc <MX_GPIO_Init>
  MX_DMA_Init();
 8001032:	f000 f8f5 	bl	8001220 <MX_DMA_Init>
  MX_UART4_Init();
 8001036:	f000 f875 	bl	8001124 <MX_UART4_Init>
  MX_USART2_UART_Init();
 800103a:	f000 f8c7 	bl	80011cc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800103e:	f000 f89b 	bl	8001178 <MX_USART1_UART_Init>

#if (USE_HOST_BOOTLOADER == 1)
  hostUartBootLoaderConfiguration();
#endif
#if (USE_DEVICE_BOOTLOADER == 1)
  uartBootLoaderConfiguration();
 8001042:	f004 f8ff 	bl	8005244 <uartBootLoaderConfiguration>

#if (USE_HOST_BOOTLOADER == 1)
	  hostUartBootLoaderProcess();
#endif
#if (USE_DEVICE_BOOTLOADER == 1)
	  uartBootLoaderProcess();
 8001046:	f004 ffbb 	bl	8005fc0 <uartBootLoaderProcess>
 800104a:	e7fc      	b.n	8001046 <main+0x32>
 800104c:	2000006c 	.word	0x2000006c

08001050 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b094      	sub	sp, #80	; 0x50
 8001054:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001056:	f107 0320 	add.w	r3, r7, #32
 800105a:	2230      	movs	r2, #48	; 0x30
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f005 f84e 	bl	8006100 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001074:	2300      	movs	r3, #0
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	4b28      	ldr	r3, [pc, #160]	; (800111c <SystemClock_Config+0xcc>)
 800107a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107c:	4a27      	ldr	r2, [pc, #156]	; (800111c <SystemClock_Config+0xcc>)
 800107e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001082:	6413      	str	r3, [r2, #64]	; 0x40
 8001084:	4b25      	ldr	r3, [pc, #148]	; (800111c <SystemClock_Config+0xcc>)
 8001086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001090:	2300      	movs	r3, #0
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	4b22      	ldr	r3, [pc, #136]	; (8001120 <SystemClock_Config+0xd0>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a21      	ldr	r2, [pc, #132]	; (8001120 <SystemClock_Config+0xd0>)
 800109a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800109e:	6013      	str	r3, [r2, #0]
 80010a0:	4b1f      	ldr	r3, [pc, #124]	; (8001120 <SystemClock_Config+0xd0>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010ac:	2301      	movs	r3, #1
 80010ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b6:	2302      	movs	r3, #2
 80010b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010c0:	2304      	movs	r3, #4
 80010c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010c4:	23a8      	movs	r3, #168	; 0xa8
 80010c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010c8:	2302      	movs	r3, #2
 80010ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010cc:	2304      	movs	r3, #4
 80010ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d0:	f107 0320 	add.w	r3, r7, #32
 80010d4:	4618      	mov	r0, r3
 80010d6:	f001 ff83 	bl	8002fe0 <HAL_RCC_OscConfig>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010e0:	f000 f946 	bl	8001370 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e4:	230f      	movs	r3, #15
 80010e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e8:	2302      	movs	r3, #2
 80010ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010fc:	f107 030c 	add.w	r3, r7, #12
 8001100:	2105      	movs	r1, #5
 8001102:	4618      	mov	r0, r3
 8001104:	f002 f9e4 	bl	80034d0 <HAL_RCC_ClockConfig>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800110e:	f000 f92f 	bl	8001370 <Error_Handler>
  }
}
 8001112:	bf00      	nop
 8001114:	3750      	adds	r7, #80	; 0x50
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40023800 	.word	0x40023800
 8001120:	40007000 	.word	0x40007000

08001124 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001128:	4b11      	ldr	r3, [pc, #68]	; (8001170 <MX_UART4_Init+0x4c>)
 800112a:	4a12      	ldr	r2, [pc, #72]	; (8001174 <MX_UART4_Init+0x50>)
 800112c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800112e:	4b10      	ldr	r3, [pc, #64]	; (8001170 <MX_UART4_Init+0x4c>)
 8001130:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001134:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <MX_UART4_Init+0x4c>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <MX_UART4_Init+0x4c>)
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <MX_UART4_Init+0x4c>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <MX_UART4_Init+0x4c>)
 800114a:	220c      	movs	r2, #12
 800114c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114e:	4b08      	ldr	r3, [pc, #32]	; (8001170 <MX_UART4_Init+0x4c>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <MX_UART4_Init+0x4c>)
 8001156:	2200      	movs	r2, #0
 8001158:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800115a:	4805      	ldr	r0, [pc, #20]	; (8001170 <MX_UART4_Init+0x4c>)
 800115c:	f002 fc82 	bl	8003a64 <HAL_UART_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001166:	f000 f903 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200004b8 	.word	0x200004b8
 8001174:	40004c00 	.word	0x40004c00

08001178 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <MX_USART1_UART_Init+0x4c>)
 800117e:	4a12      	ldr	r2, [pc, #72]	; (80011c8 <MX_USART1_UART_Init+0x50>)
 8001180:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001182:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <MX_USART1_UART_Init+0x4c>)
 8001184:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001188:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800118a:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <MX_USART1_UART_Init+0x4c>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <MX_USART1_UART_Init+0x4c>)
 8001192:	2200      	movs	r2, #0
 8001194:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001196:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <MX_USART1_UART_Init+0x4c>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800119c:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <MX_USART1_UART_Init+0x4c>)
 800119e:	220c      	movs	r2, #12
 80011a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011a2:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <MX_USART1_UART_Init+0x4c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <MX_USART1_UART_Init+0x4c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011ae:	4805      	ldr	r0, [pc, #20]	; (80011c4 <MX_USART1_UART_Init+0x4c>)
 80011b0:	f002 fc58 	bl	8003a64 <HAL_UART_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011ba:	f000 f8d9 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000474 	.word	0x20000474
 80011c8:	40011000 	.word	0x40011000

080011cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011d2:	4a12      	ldr	r2, [pc, #72]	; (800121c <MX_USART2_UART_Init+0x50>)
 80011d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011ea:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011f0:	4b09      	ldr	r3, [pc, #36]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011f2:	220c      	movs	r2, #12
 80011f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f6:	4b08      	ldr	r3, [pc, #32]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001202:	4805      	ldr	r0, [pc, #20]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 8001204:	f002 fc2e 	bl	8003a64 <HAL_UART_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800120e:	f000 f8af 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	200004fc 	.word	0x200004fc
 800121c:	40004400 	.word	0x40004400

08001220 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	4b27      	ldr	r3, [pc, #156]	; (80012c8 <MX_DMA_Init+0xa8>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a26      	ldr	r2, [pc, #152]	; (80012c8 <MX_DMA_Init+0xa8>)
 8001230:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b24      	ldr	r3, [pc, #144]	; (80012c8 <MX_DMA_Init+0xa8>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	603b      	str	r3, [r7, #0]
 8001246:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <MX_DMA_Init+0xa8>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a1f      	ldr	r2, [pc, #124]	; (80012c8 <MX_DMA_Init+0xa8>)
 800124c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <MX_DMA_Init+0xa8>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800125a:	603b      	str	r3, [r7, #0]
 800125c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2100      	movs	r1, #0
 8001262:	200d      	movs	r0, #13
 8001264:	f000 fdcf 	bl	8001e06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001268:	200d      	movs	r0, #13
 800126a:	f000 fde8 	bl	8001e3e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800126e:	2200      	movs	r2, #0
 8001270:	2100      	movs	r1, #0
 8001272:	200f      	movs	r0, #15
 8001274:	f000 fdc7 	bl	8001e06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001278:	200f      	movs	r0, #15
 800127a:	f000 fde0 	bl	8001e3e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	2100      	movs	r1, #0
 8001282:	2010      	movs	r0, #16
 8001284:	f000 fdbf 	bl	8001e06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001288:	2010      	movs	r0, #16
 800128a:	f000 fdd8 	bl	8001e3e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	2100      	movs	r1, #0
 8001292:	2011      	movs	r0, #17
 8001294:	f000 fdb7 	bl	8001e06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001298:	2011      	movs	r0, #17
 800129a:	f000 fdd0 	bl	8001e3e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800129e:	2200      	movs	r2, #0
 80012a0:	2100      	movs	r1, #0
 80012a2:	203a      	movs	r0, #58	; 0x3a
 80012a4:	f000 fdaf 	bl	8001e06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80012a8:	203a      	movs	r0, #58	; 0x3a
 80012aa:	f000 fdc8 	bl	8001e3e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2100      	movs	r1, #0
 80012b2:	2046      	movs	r0, #70	; 0x46
 80012b4:	f000 fda7 	bl	8001e06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80012b8:	2046      	movs	r0, #70	; 0x46
 80012ba:	f000 fdc0 	bl	8001e3e <HAL_NVIC_EnableIRQ>

}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40023800 	.word	0x40023800

080012cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b088      	sub	sp, #32
 80012d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d2:	f107 030c 	add.w	r3, r7, #12
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
 80012e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	4b20      	ldr	r3, [pc, #128]	; (8001368 <MX_GPIO_Init+0x9c>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a1f      	ldr	r2, [pc, #124]	; (8001368 <MX_GPIO_Init+0x9c>)
 80012ec:	f043 0304 	orr.w	r3, r3, #4
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <MX_GPIO_Init+0x9c>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0304 	and.w	r3, r3, #4
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	4b19      	ldr	r3, [pc, #100]	; (8001368 <MX_GPIO_Init+0x9c>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a18      	ldr	r2, [pc, #96]	; (8001368 <MX_GPIO_Init+0x9c>)
 8001308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b16      	ldr	r3, [pc, #88]	; (8001368 <MX_GPIO_Init+0x9c>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	603b      	str	r3, [r7, #0]
 800131e:	4b12      	ldr	r3, [pc, #72]	; (8001368 <MX_GPIO_Init+0x9c>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a11      	ldr	r2, [pc, #68]	; (8001368 <MX_GPIO_Init+0x9c>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <MX_GPIO_Init+0x9c>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	603b      	str	r3, [r7, #0]
 8001334:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 8001336:	2201      	movs	r2, #1
 8001338:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800133c:	480b      	ldr	r0, [pc, #44]	; (800136c <MX_GPIO_Init+0xa0>)
 800133e:	f001 fe1b 	bl	8002f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001342:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001346:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001348:	2301      	movs	r3, #1
 800134a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001350:	2300      	movs	r3, #0
 8001352:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001354:	f107 030c 	add.w	r3, r7, #12
 8001358:	4619      	mov	r1, r3
 800135a:	4804      	ldr	r0, [pc, #16]	; (800136c <MX_GPIO_Init+0xa0>)
 800135c:	f001 fc70 	bl	8002c40 <HAL_GPIO_Init>

}
 8001360:	bf00      	nop
 8001362:	3720      	adds	r7, #32
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40023800 	.word	0x40023800
 800136c:	40020800 	.word	0x40020800

08001370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001374:	b672      	cpsid	i
}
 8001376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("\n[Error_Handler] ......\n");
 8001378:	4803      	ldr	r0, [pc, #12]	; (8001388 <Error_Handler+0x18>)
 800137a:	f005 fe83 	bl	8007084 <puts>
	  HAL_Delay(1000);
 800137e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001382:	f000 fc41 	bl	8001c08 <HAL_Delay>
	  printf("\n[Error_Handler] ......\n");
 8001386:	e7f7      	b.n	8001378 <Error_Handler+0x8>
 8001388:	0800ac00 	.word	0x0800ac00

0800138c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <HAL_MspInit+0x4c>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	4a0f      	ldr	r2, [pc, #60]	; (80013d8 <HAL_MspInit+0x4c>)
 800139c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a0:	6453      	str	r3, [r2, #68]	; 0x44
 80013a2:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <HAL_MspInit+0x4c>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	603b      	str	r3, [r7, #0]
 80013b2:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <HAL_MspInit+0x4c>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	4a08      	ldr	r2, [pc, #32]	; (80013d8 <HAL_MspInit+0x4c>)
 80013b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013bc:	6413      	str	r3, [r2, #64]	; 0x40
 80013be:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <HAL_MspInit+0x4c>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c6:	603b      	str	r3, [r7, #0]
 80013c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	40023800 	.word	0x40023800

080013dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08e      	sub	sp, #56	; 0x38
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a98      	ldr	r2, [pc, #608]	; (800165c <HAL_UART_MspInit+0x280>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	f040 8095 	bne.w	800152a <HAL_UART_MspInit+0x14e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001400:	2300      	movs	r3, #0
 8001402:	623b      	str	r3, [r7, #32]
 8001404:	4b96      	ldr	r3, [pc, #600]	; (8001660 <HAL_UART_MspInit+0x284>)
 8001406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001408:	4a95      	ldr	r2, [pc, #596]	; (8001660 <HAL_UART_MspInit+0x284>)
 800140a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800140e:	6413      	str	r3, [r2, #64]	; 0x40
 8001410:	4b93      	ldr	r3, [pc, #588]	; (8001660 <HAL_UART_MspInit+0x284>)
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001418:	623b      	str	r3, [r7, #32]
 800141a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800141c:	2300      	movs	r3, #0
 800141e:	61fb      	str	r3, [r7, #28]
 8001420:	4b8f      	ldr	r3, [pc, #572]	; (8001660 <HAL_UART_MspInit+0x284>)
 8001422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001424:	4a8e      	ldr	r2, [pc, #568]	; (8001660 <HAL_UART_MspInit+0x284>)
 8001426:	f043 0304 	orr.w	r3, r3, #4
 800142a:	6313      	str	r3, [r2, #48]	; 0x30
 800142c:	4b8c      	ldr	r3, [pc, #560]	; (8001660 <HAL_UART_MspInit+0x284>)
 800142e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	61fb      	str	r3, [r7, #28]
 8001436:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001438:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143e:	2302      	movs	r3, #2
 8001440:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001446:	2303      	movs	r3, #3
 8001448:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800144a:	2308      	movs	r3, #8
 800144c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800144e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001452:	4619      	mov	r1, r3
 8001454:	4883      	ldr	r0, [pc, #524]	; (8001664 <HAL_UART_MspInit+0x288>)
 8001456:	f001 fbf3 	bl	8002c40 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800145a:	4b83      	ldr	r3, [pc, #524]	; (8001668 <HAL_UART_MspInit+0x28c>)
 800145c:	4a83      	ldr	r2, [pc, #524]	; (800166c <HAL_UART_MspInit+0x290>)
 800145e:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8001460:	4b81      	ldr	r3, [pc, #516]	; (8001668 <HAL_UART_MspInit+0x28c>)
 8001462:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001466:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001468:	4b7f      	ldr	r3, [pc, #508]	; (8001668 <HAL_UART_MspInit+0x28c>)
 800146a:	2240      	movs	r2, #64	; 0x40
 800146c:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800146e:	4b7e      	ldr	r3, [pc, #504]	; (8001668 <HAL_UART_MspInit+0x28c>)
 8001470:	2200      	movs	r2, #0
 8001472:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001474:	4b7c      	ldr	r3, [pc, #496]	; (8001668 <HAL_UART_MspInit+0x28c>)
 8001476:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800147a:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800147c:	4b7a      	ldr	r3, [pc, #488]	; (8001668 <HAL_UART_MspInit+0x28c>)
 800147e:	2200      	movs	r2, #0
 8001480:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001482:	4b79      	ldr	r3, [pc, #484]	; (8001668 <HAL_UART_MspInit+0x28c>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001488:	4b77      	ldr	r3, [pc, #476]	; (8001668 <HAL_UART_MspInit+0x28c>)
 800148a:	2200      	movs	r2, #0
 800148c:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800148e:	4b76      	ldr	r3, [pc, #472]	; (8001668 <HAL_UART_MspInit+0x28c>)
 8001490:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001494:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001496:	4b74      	ldr	r3, [pc, #464]	; (8001668 <HAL_UART_MspInit+0x28c>)
 8001498:	2200      	movs	r2, #0
 800149a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800149c:	4872      	ldr	r0, [pc, #456]	; (8001668 <HAL_UART_MspInit+0x28c>)
 800149e:	f000 fce9 	bl	8001e74 <HAL_DMA_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80014a8:	f7ff ff62 	bl	8001370 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4a6e      	ldr	r2, [pc, #440]	; (8001668 <HAL_UART_MspInit+0x28c>)
 80014b0:	635a      	str	r2, [r3, #52]	; 0x34
 80014b2:	4a6d      	ldr	r2, [pc, #436]	; (8001668 <HAL_UART_MspInit+0x28c>)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80014b8:	4b6d      	ldr	r3, [pc, #436]	; (8001670 <HAL_UART_MspInit+0x294>)
 80014ba:	4a6e      	ldr	r2, [pc, #440]	; (8001674 <HAL_UART_MspInit+0x298>)
 80014bc:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80014be:	4b6c      	ldr	r3, [pc, #432]	; (8001670 <HAL_UART_MspInit+0x294>)
 80014c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014c4:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014c6:	4b6a      	ldr	r3, [pc, #424]	; (8001670 <HAL_UART_MspInit+0x294>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014cc:	4b68      	ldr	r3, [pc, #416]	; (8001670 <HAL_UART_MspInit+0x294>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014d2:	4b67      	ldr	r3, [pc, #412]	; (8001670 <HAL_UART_MspInit+0x294>)
 80014d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014d8:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014da:	4b65      	ldr	r3, [pc, #404]	; (8001670 <HAL_UART_MspInit+0x294>)
 80014dc:	2200      	movs	r2, #0
 80014de:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014e0:	4b63      	ldr	r3, [pc, #396]	; (8001670 <HAL_UART_MspInit+0x294>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80014e6:	4b62      	ldr	r3, [pc, #392]	; (8001670 <HAL_UART_MspInit+0x294>)
 80014e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014ec:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80014ee:	4b60      	ldr	r3, [pc, #384]	; (8001670 <HAL_UART_MspInit+0x294>)
 80014f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014f4:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014f6:	4b5e      	ldr	r3, [pc, #376]	; (8001670 <HAL_UART_MspInit+0x294>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80014fc:	485c      	ldr	r0, [pc, #368]	; (8001670 <HAL_UART_MspInit+0x294>)
 80014fe:	f000 fcb9 	bl	8001e74 <HAL_DMA_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 8001508:	f7ff ff32 	bl	8001370 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a58      	ldr	r2, [pc, #352]	; (8001670 <HAL_UART_MspInit+0x294>)
 8001510:	639a      	str	r2, [r3, #56]	; 0x38
 8001512:	4a57      	ldr	r2, [pc, #348]	; (8001670 <HAL_UART_MspInit+0x294>)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001518:	2200      	movs	r2, #0
 800151a:	2100      	movs	r1, #0
 800151c:	2034      	movs	r0, #52	; 0x34
 800151e:	f000 fc72 	bl	8001e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001522:	2034      	movs	r0, #52	; 0x34
 8001524:	f000 fc8b 	bl	8001e3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001528:	e14b      	b.n	80017c2 <HAL_UART_MspInit+0x3e6>
  else if(huart->Instance==USART1)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a52      	ldr	r2, [pc, #328]	; (8001678 <HAL_UART_MspInit+0x29c>)
 8001530:	4293      	cmp	r3, r2
 8001532:	f040 80ad 	bne.w	8001690 <HAL_UART_MspInit+0x2b4>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	61bb      	str	r3, [r7, #24]
 800153a:	4b49      	ldr	r3, [pc, #292]	; (8001660 <HAL_UART_MspInit+0x284>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153e:	4a48      	ldr	r2, [pc, #288]	; (8001660 <HAL_UART_MspInit+0x284>)
 8001540:	f043 0310 	orr.w	r3, r3, #16
 8001544:	6453      	str	r3, [r2, #68]	; 0x44
 8001546:	4b46      	ldr	r3, [pc, #280]	; (8001660 <HAL_UART_MspInit+0x284>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	f003 0310 	and.w	r3, r3, #16
 800154e:	61bb      	str	r3, [r7, #24]
 8001550:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	4b42      	ldr	r3, [pc, #264]	; (8001660 <HAL_UART_MspInit+0x284>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a41      	ldr	r2, [pc, #260]	; (8001660 <HAL_UART_MspInit+0x284>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b3f      	ldr	r3, [pc, #252]	; (8001660 <HAL_UART_MspInit+0x284>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800156e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001574:	2302      	movs	r3, #2
 8001576:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157c:	2303      	movs	r3, #3
 800157e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001580:	2307      	movs	r3, #7
 8001582:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001584:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001588:	4619      	mov	r1, r3
 800158a:	483c      	ldr	r0, [pc, #240]	; (800167c <HAL_UART_MspInit+0x2a0>)
 800158c:	f001 fb58 	bl	8002c40 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001590:	4b3b      	ldr	r3, [pc, #236]	; (8001680 <HAL_UART_MspInit+0x2a4>)
 8001592:	4a3c      	ldr	r2, [pc, #240]	; (8001684 <HAL_UART_MspInit+0x2a8>)
 8001594:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001596:	4b3a      	ldr	r3, [pc, #232]	; (8001680 <HAL_UART_MspInit+0x2a4>)
 8001598:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800159c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800159e:	4b38      	ldr	r3, [pc, #224]	; (8001680 <HAL_UART_MspInit+0x2a4>)
 80015a0:	2240      	movs	r2, #64	; 0x40
 80015a2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015a4:	4b36      	ldr	r3, [pc, #216]	; (8001680 <HAL_UART_MspInit+0x2a4>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015aa:	4b35      	ldr	r3, [pc, #212]	; (8001680 <HAL_UART_MspInit+0x2a4>)
 80015ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015b0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015b2:	4b33      	ldr	r3, [pc, #204]	; (8001680 <HAL_UART_MspInit+0x2a4>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015b8:	4b31      	ldr	r3, [pc, #196]	; (8001680 <HAL_UART_MspInit+0x2a4>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80015be:	4b30      	ldr	r3, [pc, #192]	; (8001680 <HAL_UART_MspInit+0x2a4>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015c4:	4b2e      	ldr	r3, [pc, #184]	; (8001680 <HAL_UART_MspInit+0x2a4>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015ca:	4b2d      	ldr	r3, [pc, #180]	; (8001680 <HAL_UART_MspInit+0x2a4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80015d0:	482b      	ldr	r0, [pc, #172]	; (8001680 <HAL_UART_MspInit+0x2a4>)
 80015d2:	f000 fc4f 	bl	8001e74 <HAL_DMA_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <HAL_UART_MspInit+0x204>
      Error_Handler();
 80015dc:	f7ff fec8 	bl	8001370 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a27      	ldr	r2, [pc, #156]	; (8001680 <HAL_UART_MspInit+0x2a4>)
 80015e4:	635a      	str	r2, [r3, #52]	; 0x34
 80015e6:	4a26      	ldr	r2, [pc, #152]	; (8001680 <HAL_UART_MspInit+0x2a4>)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80015ec:	4b26      	ldr	r3, [pc, #152]	; (8001688 <HAL_UART_MspInit+0x2ac>)
 80015ee:	4a27      	ldr	r2, [pc, #156]	; (800168c <HAL_UART_MspInit+0x2b0>)
 80015f0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80015f2:	4b25      	ldr	r3, [pc, #148]	; (8001688 <HAL_UART_MspInit+0x2ac>)
 80015f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015f8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015fa:	4b23      	ldr	r3, [pc, #140]	; (8001688 <HAL_UART_MspInit+0x2ac>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001600:	4b21      	ldr	r3, [pc, #132]	; (8001688 <HAL_UART_MspInit+0x2ac>)
 8001602:	2200      	movs	r2, #0
 8001604:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001606:	4b20      	ldr	r3, [pc, #128]	; (8001688 <HAL_UART_MspInit+0x2ac>)
 8001608:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800160c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800160e:	4b1e      	ldr	r3, [pc, #120]	; (8001688 <HAL_UART_MspInit+0x2ac>)
 8001610:	2200      	movs	r2, #0
 8001612:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001614:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <HAL_UART_MspInit+0x2ac>)
 8001616:	2200      	movs	r2, #0
 8001618:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800161a:	4b1b      	ldr	r3, [pc, #108]	; (8001688 <HAL_UART_MspInit+0x2ac>)
 800161c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001620:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001622:	4b19      	ldr	r3, [pc, #100]	; (8001688 <HAL_UART_MspInit+0x2ac>)
 8001624:	2200      	movs	r2, #0
 8001626:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001628:	4b17      	ldr	r3, [pc, #92]	; (8001688 <HAL_UART_MspInit+0x2ac>)
 800162a:	2200      	movs	r2, #0
 800162c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800162e:	4816      	ldr	r0, [pc, #88]	; (8001688 <HAL_UART_MspInit+0x2ac>)
 8001630:	f000 fc20 	bl	8001e74 <HAL_DMA_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_UART_MspInit+0x262>
      Error_Handler();
 800163a:	f7ff fe99 	bl	8001370 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a11      	ldr	r2, [pc, #68]	; (8001688 <HAL_UART_MspInit+0x2ac>)
 8001642:	639a      	str	r2, [r3, #56]	; 0x38
 8001644:	4a10      	ldr	r2, [pc, #64]	; (8001688 <HAL_UART_MspInit+0x2ac>)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800164a:	2200      	movs	r2, #0
 800164c:	2100      	movs	r1, #0
 800164e:	2025      	movs	r0, #37	; 0x25
 8001650:	f000 fbd9 	bl	8001e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001654:	2025      	movs	r0, #37	; 0x25
 8001656:	f000 fbf2 	bl	8001e3e <HAL_NVIC_EnableIRQ>
}
 800165a:	e0b2      	b.n	80017c2 <HAL_UART_MspInit+0x3e6>
 800165c:	40004c00 	.word	0x40004c00
 8001660:	40023800 	.word	0x40023800
 8001664:	40020800 	.word	0x40020800
 8001668:	20000540 	.word	0x20000540
 800166c:	40026070 	.word	0x40026070
 8001670:	20000294 	.word	0x20000294
 8001674:	40026040 	.word	0x40026040
 8001678:	40011000 	.word	0x40011000
 800167c:	40020000 	.word	0x40020000
 8001680:	20000354 	.word	0x20000354
 8001684:	400264b8 	.word	0x400264b8
 8001688:	200003b4 	.word	0x200003b4
 800168c:	40026440 	.word	0x40026440
  else if(huart->Instance==USART2)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a4d      	ldr	r2, [pc, #308]	; (80017cc <HAL_UART_MspInit+0x3f0>)
 8001696:	4293      	cmp	r3, r2
 8001698:	f040 8093 	bne.w	80017c2 <HAL_UART_MspInit+0x3e6>
    __HAL_RCC_USART2_CLK_ENABLE();
 800169c:	2300      	movs	r3, #0
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	4b4b      	ldr	r3, [pc, #300]	; (80017d0 <HAL_UART_MspInit+0x3f4>)
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a4:	4a4a      	ldr	r2, [pc, #296]	; (80017d0 <HAL_UART_MspInit+0x3f4>)
 80016a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016aa:	6413      	str	r3, [r2, #64]	; 0x40
 80016ac:	4b48      	ldr	r3, [pc, #288]	; (80017d0 <HAL_UART_MspInit+0x3f4>)
 80016ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b4:	613b      	str	r3, [r7, #16]
 80016b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b8:	2300      	movs	r3, #0
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	4b44      	ldr	r3, [pc, #272]	; (80017d0 <HAL_UART_MspInit+0x3f4>)
 80016be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c0:	4a43      	ldr	r2, [pc, #268]	; (80017d0 <HAL_UART_MspInit+0x3f4>)
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	6313      	str	r3, [r2, #48]	; 0x30
 80016c8:	4b41      	ldr	r3, [pc, #260]	; (80017d0 <HAL_UART_MspInit+0x3f4>)
 80016ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016d4:	230c      	movs	r3, #12
 80016d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e0:	2303      	movs	r3, #3
 80016e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016e4:	2307      	movs	r3, #7
 80016e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ec:	4619      	mov	r1, r3
 80016ee:	4839      	ldr	r0, [pc, #228]	; (80017d4 <HAL_UART_MspInit+0x3f8>)
 80016f0:	f001 faa6 	bl	8002c40 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80016f4:	4b38      	ldr	r3, [pc, #224]	; (80017d8 <HAL_UART_MspInit+0x3fc>)
 80016f6:	4a39      	ldr	r2, [pc, #228]	; (80017dc <HAL_UART_MspInit+0x400>)
 80016f8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80016fa:	4b37      	ldr	r3, [pc, #220]	; (80017d8 <HAL_UART_MspInit+0x3fc>)
 80016fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001700:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001702:	4b35      	ldr	r3, [pc, #212]	; (80017d8 <HAL_UART_MspInit+0x3fc>)
 8001704:	2240      	movs	r2, #64	; 0x40
 8001706:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001708:	4b33      	ldr	r3, [pc, #204]	; (80017d8 <HAL_UART_MspInit+0x3fc>)
 800170a:	2200      	movs	r2, #0
 800170c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800170e:	4b32      	ldr	r3, [pc, #200]	; (80017d8 <HAL_UART_MspInit+0x3fc>)
 8001710:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001714:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001716:	4b30      	ldr	r3, [pc, #192]	; (80017d8 <HAL_UART_MspInit+0x3fc>)
 8001718:	2200      	movs	r2, #0
 800171a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800171c:	4b2e      	ldr	r3, [pc, #184]	; (80017d8 <HAL_UART_MspInit+0x3fc>)
 800171e:	2200      	movs	r2, #0
 8001720:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001722:	4b2d      	ldr	r3, [pc, #180]	; (80017d8 <HAL_UART_MspInit+0x3fc>)
 8001724:	2200      	movs	r2, #0
 8001726:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001728:	4b2b      	ldr	r3, [pc, #172]	; (80017d8 <HAL_UART_MspInit+0x3fc>)
 800172a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800172e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001730:	4b29      	ldr	r3, [pc, #164]	; (80017d8 <HAL_UART_MspInit+0x3fc>)
 8001732:	2200      	movs	r2, #0
 8001734:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001736:	4828      	ldr	r0, [pc, #160]	; (80017d8 <HAL_UART_MspInit+0x3fc>)
 8001738:	f000 fb9c 	bl	8001e74 <HAL_DMA_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <HAL_UART_MspInit+0x36a>
      Error_Handler();
 8001742:	f7ff fe15 	bl	8001370 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a23      	ldr	r2, [pc, #140]	; (80017d8 <HAL_UART_MspInit+0x3fc>)
 800174a:	635a      	str	r2, [r3, #52]	; 0x34
 800174c:	4a22      	ldr	r2, [pc, #136]	; (80017d8 <HAL_UART_MspInit+0x3fc>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001752:	4b23      	ldr	r3, [pc, #140]	; (80017e0 <HAL_UART_MspInit+0x404>)
 8001754:	4a23      	ldr	r2, [pc, #140]	; (80017e4 <HAL_UART_MspInit+0x408>)
 8001756:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001758:	4b21      	ldr	r3, [pc, #132]	; (80017e0 <HAL_UART_MspInit+0x404>)
 800175a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800175e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001760:	4b1f      	ldr	r3, [pc, #124]	; (80017e0 <HAL_UART_MspInit+0x404>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001766:	4b1e      	ldr	r3, [pc, #120]	; (80017e0 <HAL_UART_MspInit+0x404>)
 8001768:	2200      	movs	r2, #0
 800176a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800176c:	4b1c      	ldr	r3, [pc, #112]	; (80017e0 <HAL_UART_MspInit+0x404>)
 800176e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001772:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001774:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <HAL_UART_MspInit+0x404>)
 8001776:	2200      	movs	r2, #0
 8001778:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800177a:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <HAL_UART_MspInit+0x404>)
 800177c:	2200      	movs	r2, #0
 800177e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001780:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <HAL_UART_MspInit+0x404>)
 8001782:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001786:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001788:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <HAL_UART_MspInit+0x404>)
 800178a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800178e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001790:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <HAL_UART_MspInit+0x404>)
 8001792:	2200      	movs	r2, #0
 8001794:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001796:	4812      	ldr	r0, [pc, #72]	; (80017e0 <HAL_UART_MspInit+0x404>)
 8001798:	f000 fb6c 	bl	8001e74 <HAL_DMA_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <HAL_UART_MspInit+0x3ca>
      Error_Handler();
 80017a2:	f7ff fde5 	bl	8001370 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a0d      	ldr	r2, [pc, #52]	; (80017e0 <HAL_UART_MspInit+0x404>)
 80017aa:	639a      	str	r2, [r3, #56]	; 0x38
 80017ac:	4a0c      	ldr	r2, [pc, #48]	; (80017e0 <HAL_UART_MspInit+0x404>)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2100      	movs	r1, #0
 80017b6:	2026      	movs	r0, #38	; 0x26
 80017b8:	f000 fb25 	bl	8001e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017bc:	2026      	movs	r0, #38	; 0x26
 80017be:	f000 fb3e 	bl	8001e3e <HAL_NVIC_EnableIRQ>
}
 80017c2:	bf00      	nop
 80017c4:	3738      	adds	r7, #56	; 0x38
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40004400 	.word	0x40004400
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40020000 	.word	0x40020000
 80017d8:	20000414 	.word	0x20000414
 80017dc:	400260a0 	.word	0x400260a0
 80017e0:	200002f4 	.word	0x200002f4
 80017e4:	40026088 	.word	0x40026088

080017e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017ec:	e7fe      	b.n	80017ec <NMI_Handler+0x4>

080017ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f2:	e7fe      	b.n	80017f2 <HardFault_Handler+0x4>

080017f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <MemManage_Handler+0x4>

080017fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017fe:	e7fe      	b.n	80017fe <BusFault_Handler+0x4>

08001800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001804:	e7fe      	b.n	8001804 <UsageFault_Handler+0x4>

08001806 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001834:	f000 f9c8 	bl	8001bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}

0800183c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001840:	4802      	ldr	r0, [pc, #8]	; (800184c <DMA1_Stream2_IRQHandler+0x10>)
 8001842:	f000 fcaf 	bl	80021a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000294 	.word	0x20000294

08001850 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001854:	4802      	ldr	r0, [pc, #8]	; (8001860 <DMA1_Stream4_IRQHandler+0x10>)
 8001856:	f000 fca5 	bl	80021a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000540 	.word	0x20000540

08001864 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001868:	4802      	ldr	r0, [pc, #8]	; (8001874 <DMA1_Stream5_IRQHandler+0x10>)
 800186a:	f000 fc9b 	bl	80021a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	200002f4 	.word	0x200002f4

08001878 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800187c:	4802      	ldr	r0, [pc, #8]	; (8001888 <DMA1_Stream6_IRQHandler+0x10>)
 800187e:	f000 fc91 	bl	80021a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000414 	.word	0x20000414

0800188c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001890:	4802      	ldr	r0, [pc, #8]	; (800189c <USART1_IRQHandler+0x10>)
 8001892:	f002 fa75 	bl	8003d80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000474 	.word	0x20000474

080018a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018a4:	4802      	ldr	r0, [pc, #8]	; (80018b0 <USART2_IRQHandler+0x10>)
 80018a6:	f002 fa6b 	bl	8003d80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	200004fc 	.word	0x200004fc

080018b4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80018b8:	4802      	ldr	r0, [pc, #8]	; (80018c4 <UART4_IRQHandler+0x10>)
 80018ba:	f002 fa61 	bl	8003d80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	200004b8 	.word	0x200004b8

080018c8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80018cc:	4802      	ldr	r0, [pc, #8]	; (80018d8 <DMA2_Stream2_IRQHandler+0x10>)
 80018ce:	f000 fc69 	bl	80021a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	200003b4 	.word	0x200003b4

080018dc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80018e0:	4802      	ldr	r0, [pc, #8]	; (80018ec <DMA2_Stream7_IRQHandler+0x10>)
 80018e2:	f000 fc5f 	bl	80021a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000354 	.word	0x20000354

080018f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
	return 1;
 80018f4:	2301      	movs	r3, #1
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <_kill>:

int _kill(int pid, int sig)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800190a:	f004 fbb9 	bl	8006080 <__errno>
 800190e:	4603      	mov	r3, r0
 8001910:	2216      	movs	r2, #22
 8001912:	601a      	str	r2, [r3, #0]
	return -1;
 8001914:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001918:	4618      	mov	r0, r3
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <_exit>:

void _exit (int status)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001928:	f04f 31ff 	mov.w	r1, #4294967295
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff ffe7 	bl	8001900 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001932:	e7fe      	b.n	8001932 <_exit+0x12>

08001934 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	e00a      	b.n	800195c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001946:	f3af 8000 	nop.w
 800194a:	4601      	mov	r1, r0
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	1c5a      	adds	r2, r3, #1
 8001950:	60ba      	str	r2, [r7, #8]
 8001952:	b2ca      	uxtb	r2, r1
 8001954:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	3301      	adds	r3, #1
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	429a      	cmp	r2, r3
 8001962:	dbf0      	blt.n	8001946 <_read+0x12>
	}

return len;
 8001964:	687b      	ldr	r3, [r7, #4]
}
 8001966:	4618      	mov	r0, r3
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <_close>:
	}
	return len;
}

int _close(int file)
{
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
	return -1;
 8001976:	f04f 33ff 	mov.w	r3, #4294967295
}
 800197a:	4618      	mov	r0, r3
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
 800198e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001996:	605a      	str	r2, [r3, #4]
	return 0;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <_isatty>:

int _isatty(int file)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
	return 1;
 80019ae:	2301      	movs	r3, #1
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
	return 0;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
	...

080019d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019e0:	4a14      	ldr	r2, [pc, #80]	; (8001a34 <_sbrk+0x5c>)
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <_sbrk+0x60>)
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019ec:	4b13      	ldr	r3, [pc, #76]	; (8001a3c <_sbrk+0x64>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d102      	bne.n	80019fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019f4:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <_sbrk+0x64>)
 80019f6:	4a12      	ldr	r2, [pc, #72]	; (8001a40 <_sbrk+0x68>)
 80019f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019fa:	4b10      	ldr	r3, [pc, #64]	; (8001a3c <_sbrk+0x64>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d207      	bcs.n	8001a18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a08:	f004 fb3a 	bl	8006080 <__errno>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	220c      	movs	r2, #12
 8001a10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a12:	f04f 33ff 	mov.w	r3, #4294967295
 8001a16:	e009      	b.n	8001a2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a18:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <_sbrk+0x64>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a1e:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <_sbrk+0x64>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4413      	add	r3, r2
 8001a26:	4a05      	ldr	r2, [pc, #20]	; (8001a3c <_sbrk+0x64>)
 8001a28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20020000 	.word	0x20020000
 8001a38:	00000400 	.word	0x00000400
 8001a3c:	2000025c 	.word	0x2000025c
 8001a40:	20001cc8 	.word	0x20001cc8

08001a44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a48:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <SystemInit+0x20>)
 8001a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a4e:	4a05      	ldr	r2, [pc, #20]	; (8001a64 <SystemInit+0x20>)
 8001a50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001aa0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a6c:	480d      	ldr	r0, [pc, #52]	; (8001aa4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a6e:	490e      	ldr	r1, [pc, #56]	; (8001aa8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a70:	4a0e      	ldr	r2, [pc, #56]	; (8001aac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a74:	e002      	b.n	8001a7c <LoopCopyDataInit>

08001a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a7a:	3304      	adds	r3, #4

08001a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a80:	d3f9      	bcc.n	8001a76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a82:	4a0b      	ldr	r2, [pc, #44]	; (8001ab0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a84:	4c0b      	ldr	r4, [pc, #44]	; (8001ab4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a88:	e001      	b.n	8001a8e <LoopFillZerobss>

08001a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a8c:	3204      	adds	r2, #4

08001a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a90:	d3fb      	bcc.n	8001a8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a92:	f7ff ffd7 	bl	8001a44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a96:	f004 faf9 	bl	800608c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a9a:	f7ff fabb 	bl	8001014 <main>
  bx  lr    
 8001a9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001aa0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aa8:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 8001aac:	0800bc7c 	.word	0x0800bc7c
  ldr r2, =_sbss
 8001ab0:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8001ab4:	20001cc8 	.word	0x20001cc8

08001ab8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ab8:	e7fe      	b.n	8001ab8 <ADC_IRQHandler>
	...

08001abc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ac0:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <HAL_Init+0x40>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a0d      	ldr	r2, [pc, #52]	; (8001afc <HAL_Init+0x40>)
 8001ac6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001acc:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <HAL_Init+0x40>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a0a      	ldr	r2, [pc, #40]	; (8001afc <HAL_Init+0x40>)
 8001ad2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ad6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ad8:	4b08      	ldr	r3, [pc, #32]	; (8001afc <HAL_Init+0x40>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a07      	ldr	r2, [pc, #28]	; (8001afc <HAL_Init+0x40>)
 8001ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae4:	2003      	movs	r0, #3
 8001ae6:	f000 f983 	bl	8001df0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aea:	200f      	movs	r0, #15
 8001aec:	f000 f83c 	bl	8001b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001af0:	f7ff fc4c 	bl	800138c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40023c00 	.word	0x40023c00

08001b00 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001b04:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <HAL_DeInit+0x54>)
 8001b06:	f04f 32ff 	mov.w	r2, #4294967295
 8001b0a:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <HAL_DeInit+0x54>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8001b12:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <HAL_DeInit+0x54>)
 8001b14:	f04f 32ff 	mov.w	r2, #4294967295
 8001b18:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <HAL_DeInit+0x54>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8001b20:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <HAL_DeInit+0x54>)
 8001b22:	f04f 32ff 	mov.w	r2, #4294967295
 8001b26:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8001b28:	4b0a      	ldr	r3, [pc, #40]	; (8001b54 <HAL_DeInit+0x54>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8001b2e:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <HAL_DeInit+0x54>)
 8001b30:	f04f 32ff 	mov.w	r2, #4294967295
 8001b34:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8001b36:	4b07      	ldr	r3, [pc, #28]	; (8001b54 <HAL_DeInit+0x54>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8001b3c:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <HAL_DeInit+0x54>)
 8001b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8001b42:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8001b44:	4b03      	ldr	r3, [pc, #12]	; (8001b54 <HAL_DeInit+0x54>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001b4a:	f000 f805 	bl	8001b58 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40023800 	.word	0x40023800

08001b58 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
	...

08001b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b70:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <HAL_InitTick+0x54>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <HAL_InitTick+0x58>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b86:	4618      	mov	r0, r3
 8001b88:	f000 f967 	bl	8001e5a <HAL_SYSTICK_Config>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e00e      	b.n	8001bb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b0f      	cmp	r3, #15
 8001b9a:	d80a      	bhi.n	8001bb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba4:	f000 f92f 	bl	8001e06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ba8:	4a06      	ldr	r2, [pc, #24]	; (8001bc4 <HAL_InitTick+0x5c>)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	e000      	b.n	8001bb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20000000 	.word	0x20000000
 8001bc0:	20000008 	.word	0x20000008
 8001bc4:	20000004 	.word	0x20000004

08001bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bcc:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <HAL_IncTick+0x20>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <HAL_IncTick+0x24>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	4a04      	ldr	r2, [pc, #16]	; (8001bec <HAL_IncTick+0x24>)
 8001bda:	6013      	str	r3, [r2, #0]
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	20000008 	.word	0x20000008
 8001bec:	200005a0 	.word	0x200005a0

08001bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf4:	4b03      	ldr	r3, [pc, #12]	; (8001c04 <HAL_GetTick+0x14>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	200005a0 	.word	0x200005a0

08001c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c10:	f7ff ffee 	bl	8001bf0 <HAL_GetTick>
 8001c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c20:	d005      	beq.n	8001c2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c22:	4b0a      	ldr	r3, [pc, #40]	; (8001c4c <HAL_Delay+0x44>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	461a      	mov	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c2e:	bf00      	nop
 8001c30:	f7ff ffde 	bl	8001bf0 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d8f7      	bhi.n	8001c30 <HAL_Delay+0x28>
  {
  }
}
 8001c40:	bf00      	nop
 8001c42:	bf00      	nop
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000008 	.word	0x20000008

08001c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c60:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c82:	4a04      	ldr	r2, [pc, #16]	; (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	60d3      	str	r3, [r2, #12]
}
 8001c88:	bf00      	nop
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c9c:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	0a1b      	lsrs	r3, r3, #8
 8001ca2:	f003 0307 	and.w	r3, r3, #7
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	db0b      	blt.n	8001cde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	f003 021f 	and.w	r2, r3, #31
 8001ccc:	4907      	ldr	r1, [pc, #28]	; (8001cec <__NVIC_EnableIRQ+0x38>)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	095b      	lsrs	r3, r3, #5
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	e000e100 	.word	0xe000e100

08001cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	6039      	str	r1, [r7, #0]
 8001cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	db0a      	blt.n	8001d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	490c      	ldr	r1, [pc, #48]	; (8001d3c <__NVIC_SetPriority+0x4c>)
 8001d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0e:	0112      	lsls	r2, r2, #4
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	440b      	add	r3, r1
 8001d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d18:	e00a      	b.n	8001d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	4908      	ldr	r1, [pc, #32]	; (8001d40 <__NVIC_SetPriority+0x50>)
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	3b04      	subs	r3, #4
 8001d28:	0112      	lsls	r2, r2, #4
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	761a      	strb	r2, [r3, #24]
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	e000e100 	.word	0xe000e100
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b089      	sub	sp, #36	; 0x24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f1c3 0307 	rsb	r3, r3, #7
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	bf28      	it	cs
 8001d62:	2304      	movcs	r3, #4
 8001d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	2b06      	cmp	r3, #6
 8001d6c:	d902      	bls.n	8001d74 <NVIC_EncodePriority+0x30>
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3b03      	subs	r3, #3
 8001d72:	e000      	b.n	8001d76 <NVIC_EncodePriority+0x32>
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d78:	f04f 32ff 	mov.w	r2, #4294967295
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43da      	mvns	r2, r3
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	401a      	ands	r2, r3
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	fa01 f303 	lsl.w	r3, r1, r3
 8001d96:	43d9      	mvns	r1, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d9c:	4313      	orrs	r3, r2
         );
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3724      	adds	r7, #36	; 0x24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
	...

08001dac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dbc:	d301      	bcc.n	8001dc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e00f      	b.n	8001de2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dc2:	4a0a      	ldr	r2, [pc, #40]	; (8001dec <SysTick_Config+0x40>)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dca:	210f      	movs	r1, #15
 8001dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd0:	f7ff ff8e 	bl	8001cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dd4:	4b05      	ldr	r3, [pc, #20]	; (8001dec <SysTick_Config+0x40>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dda:	4b04      	ldr	r3, [pc, #16]	; (8001dec <SysTick_Config+0x40>)
 8001ddc:	2207      	movs	r2, #7
 8001dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	e000e010 	.word	0xe000e010

08001df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f7ff ff29 	bl	8001c50 <__NVIC_SetPriorityGrouping>
}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b086      	sub	sp, #24
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	60b9      	str	r1, [r7, #8]
 8001e10:	607a      	str	r2, [r7, #4]
 8001e12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e18:	f7ff ff3e 	bl	8001c98 <__NVIC_GetPriorityGrouping>
 8001e1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	68b9      	ldr	r1, [r7, #8]
 8001e22:	6978      	ldr	r0, [r7, #20]
 8001e24:	f7ff ff8e 	bl	8001d44 <NVIC_EncodePriority>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e2e:	4611      	mov	r1, r2
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ff5d 	bl	8001cf0 <__NVIC_SetPriority>
}
 8001e36:	bf00      	nop
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	4603      	mov	r3, r0
 8001e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff ff31 	bl	8001cb4 <__NVIC_EnableIRQ>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff ffa2 	bl	8001dac <SysTick_Config>
 8001e68:	4603      	mov	r3, r0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e80:	f7ff feb6 	bl	8001bf0 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e099      	b.n	8001fc4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2202      	movs	r2, #2
 8001e94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f022 0201 	bic.w	r2, r2, #1
 8001eae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eb0:	e00f      	b.n	8001ed2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eb2:	f7ff fe9d 	bl	8001bf0 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b05      	cmp	r3, #5
 8001ebe:	d908      	bls.n	8001ed2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2203      	movs	r2, #3
 8001eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e078      	b.n	8001fc4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1e8      	bne.n	8001eb2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	4b38      	ldr	r3, [pc, #224]	; (8001fcc <HAL_DMA_Init+0x158>)
 8001eec:	4013      	ands	r3, r2
 8001eee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001efe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f28:	2b04      	cmp	r3, #4
 8001f2a:	d107      	bne.n	8001f3c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f34:	4313      	orrs	r3, r2
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	f023 0307 	bic.w	r3, r3, #7
 8001f52:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	d117      	bne.n	8001f96 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00e      	beq.n	8001f96 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 fb01 	bl	8002580 <DMA_CheckFifoParam>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d008      	beq.n	8001f96 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2240      	movs	r2, #64	; 0x40
 8001f88:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f92:	2301      	movs	r3, #1
 8001f94:	e016      	b.n	8001fc4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 fab8 	bl	8002514 <DMA_CalcBaseAndBitshift>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fac:	223f      	movs	r2, #63	; 0x3f
 8001fae:	409a      	lsls	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	f010803f 	.word	0xf010803f

08001fd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
 8001fdc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d101      	bne.n	8001ff6 <HAL_DMA_Start_IT+0x26>
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	e040      	b.n	8002078 <HAL_DMA_Start_IT+0xa8>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b01      	cmp	r3, #1
 8002008:	d12f      	bne.n	800206a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2202      	movs	r2, #2
 800200e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2200      	movs	r2, #0
 8002016:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	68b9      	ldr	r1, [r7, #8]
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f000 fa4a 	bl	80024b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002028:	223f      	movs	r2, #63	; 0x3f
 800202a:	409a      	lsls	r2, r3
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 0216 	orr.w	r2, r2, #22
 800203e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002044:	2b00      	cmp	r3, #0
 8002046:	d007      	beq.n	8002058 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 0208 	orr.w	r2, r2, #8
 8002056:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f042 0201 	orr.w	r2, r2, #1
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	e005      	b.n	8002076 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002072:	2302      	movs	r3, #2
 8002074:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002076:	7dfb      	ldrb	r3, [r7, #23]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800208e:	f7ff fdaf 	bl	8001bf0 <HAL_GetTick>
 8002092:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d008      	beq.n	80020b2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2280      	movs	r2, #128	; 0x80
 80020a4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e052      	b.n	8002158 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 0216 	bic.w	r2, r2, #22
 80020c0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	695a      	ldr	r2, [r3, #20]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020d0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d103      	bne.n	80020e2 <HAL_DMA_Abort+0x62>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d007      	beq.n	80020f2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 0208 	bic.w	r2, r2, #8
 80020f0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0201 	bic.w	r2, r2, #1
 8002100:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002102:	e013      	b.n	800212c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002104:	f7ff fd74 	bl	8001bf0 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b05      	cmp	r3, #5
 8002110:	d90c      	bls.n	800212c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2220      	movs	r2, #32
 8002116:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2203      	movs	r2, #3
 800211c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e015      	b.n	8002158 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1e4      	bne.n	8002104 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213e:	223f      	movs	r2, #63	; 0x3f
 8002140:	409a      	lsls	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d004      	beq.n	800217e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2280      	movs	r2, #128	; 0x80
 8002178:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e00c      	b.n	8002198 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2205      	movs	r2, #5
 8002182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 0201 	bic.w	r2, r2, #1
 8002194:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80021ac:	2300      	movs	r3, #0
 80021ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80021b0:	4b92      	ldr	r3, [pc, #584]	; (80023fc <HAL_DMA_IRQHandler+0x258>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a92      	ldr	r2, [pc, #584]	; (8002400 <HAL_DMA_IRQHandler+0x25c>)
 80021b6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ba:	0a9b      	lsrs	r3, r3, #10
 80021bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ce:	2208      	movs	r2, #8
 80021d0:	409a      	lsls	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	4013      	ands	r3, r2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d01a      	beq.n	8002210 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d013      	beq.n	8002210 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 0204 	bic.w	r2, r2, #4
 80021f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fc:	2208      	movs	r2, #8
 80021fe:	409a      	lsls	r2, r3
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002208:	f043 0201 	orr.w	r2, r3, #1
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002214:	2201      	movs	r2, #1
 8002216:	409a      	lsls	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	4013      	ands	r3, r2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d012      	beq.n	8002246 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00b      	beq.n	8002246 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002232:	2201      	movs	r2, #1
 8002234:	409a      	lsls	r2, r3
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223e:	f043 0202 	orr.w	r2, r3, #2
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224a:	2204      	movs	r2, #4
 800224c:	409a      	lsls	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	4013      	ands	r3, r2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d012      	beq.n	800227c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00b      	beq.n	800227c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002268:	2204      	movs	r2, #4
 800226a:	409a      	lsls	r2, r3
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002274:	f043 0204 	orr.w	r2, r3, #4
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002280:	2210      	movs	r2, #16
 8002282:	409a      	lsls	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4013      	ands	r3, r2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d043      	beq.n	8002314 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0308 	and.w	r3, r3, #8
 8002296:	2b00      	cmp	r3, #0
 8002298:	d03c      	beq.n	8002314 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229e:	2210      	movs	r2, #16
 80022a0:	409a      	lsls	r2, r3
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d018      	beq.n	80022e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d108      	bne.n	80022d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d024      	beq.n	8002314 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	4798      	blx	r3
 80022d2:	e01f      	b.n	8002314 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d01b      	beq.n	8002314 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	4798      	blx	r3
 80022e4:	e016      	b.n	8002314 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d107      	bne.n	8002304 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0208 	bic.w	r2, r2, #8
 8002302:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002318:	2220      	movs	r2, #32
 800231a:	409a      	lsls	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4013      	ands	r3, r2
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 808e 	beq.w	8002442 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0310 	and.w	r3, r3, #16
 8002330:	2b00      	cmp	r3, #0
 8002332:	f000 8086 	beq.w	8002442 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800233a:	2220      	movs	r2, #32
 800233c:	409a      	lsls	r2, r3
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b05      	cmp	r3, #5
 800234c:	d136      	bne.n	80023bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 0216 	bic.w	r2, r2, #22
 800235c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	695a      	ldr	r2, [r3, #20]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800236c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	2b00      	cmp	r3, #0
 8002374:	d103      	bne.n	800237e <HAL_DMA_IRQHandler+0x1da>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800237a:	2b00      	cmp	r3, #0
 800237c:	d007      	beq.n	800238e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0208 	bic.w	r2, r2, #8
 800238c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002392:	223f      	movs	r2, #63	; 0x3f
 8002394:	409a      	lsls	r2, r3
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d07d      	beq.n	80024ae <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	4798      	blx	r3
        }
        return;
 80023ba:	e078      	b.n	80024ae <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d01c      	beq.n	8002404 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d108      	bne.n	80023ea <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d030      	beq.n	8002442 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	4798      	blx	r3
 80023e8:	e02b      	b.n	8002442 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d027      	beq.n	8002442 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	4798      	blx	r3
 80023fa:	e022      	b.n	8002442 <HAL_DMA_IRQHandler+0x29e>
 80023fc:	20000000 	.word	0x20000000
 8002400:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10f      	bne.n	8002432 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 0210 	bic.w	r2, r2, #16
 8002420:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002446:	2b00      	cmp	r3, #0
 8002448:	d032      	beq.n	80024b0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d022      	beq.n	800249c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2205      	movs	r2, #5
 800245a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 0201 	bic.w	r2, r2, #1
 800246c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	3301      	adds	r3, #1
 8002472:	60bb      	str	r3, [r7, #8]
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	429a      	cmp	r2, r3
 8002478:	d307      	bcc.n	800248a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1f2      	bne.n	800246e <HAL_DMA_IRQHandler+0x2ca>
 8002488:	e000      	b.n	800248c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800248a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d005      	beq.n	80024b0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	4798      	blx	r3
 80024ac:	e000      	b.n	80024b0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80024ae:	bf00      	nop
    }
  }
}
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop

080024b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
 80024c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80024d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	2b40      	cmp	r3, #64	; 0x40
 80024e4:	d108      	bne.n	80024f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024f6:	e007      	b.n	8002508 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68ba      	ldr	r2, [r7, #8]
 80024fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	60da      	str	r2, [r3, #12]
}
 8002508:	bf00      	nop
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	b2db      	uxtb	r3, r3
 8002522:	3b10      	subs	r3, #16
 8002524:	4a14      	ldr	r2, [pc, #80]	; (8002578 <DMA_CalcBaseAndBitshift+0x64>)
 8002526:	fba2 2303 	umull	r2, r3, r2, r3
 800252a:	091b      	lsrs	r3, r3, #4
 800252c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800252e:	4a13      	ldr	r2, [pc, #76]	; (800257c <DMA_CalcBaseAndBitshift+0x68>)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4413      	add	r3, r2
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	461a      	mov	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2b03      	cmp	r3, #3
 8002540:	d909      	bls.n	8002556 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800254a:	f023 0303 	bic.w	r3, r3, #3
 800254e:	1d1a      	adds	r2, r3, #4
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	659a      	str	r2, [r3, #88]	; 0x58
 8002554:	e007      	b.n	8002566 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800255e:	f023 0303 	bic.w	r3, r3, #3
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800256a:	4618      	mov	r0, r3
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	aaaaaaab 	.word	0xaaaaaaab
 800257c:	0800b7ac 	.word	0x0800b7ac

08002580 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002588:	2300      	movs	r3, #0
 800258a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002590:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d11f      	bne.n	80025da <DMA_CheckFifoParam+0x5a>
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	2b03      	cmp	r3, #3
 800259e:	d856      	bhi.n	800264e <DMA_CheckFifoParam+0xce>
 80025a0:	a201      	add	r2, pc, #4	; (adr r2, 80025a8 <DMA_CheckFifoParam+0x28>)
 80025a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a6:	bf00      	nop
 80025a8:	080025b9 	.word	0x080025b9
 80025ac:	080025cb 	.word	0x080025cb
 80025b0:	080025b9 	.word	0x080025b9
 80025b4:	0800264f 	.word	0x0800264f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d046      	beq.n	8002652 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025c8:	e043      	b.n	8002652 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025d2:	d140      	bne.n	8002656 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025d8:	e03d      	b.n	8002656 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025e2:	d121      	bne.n	8002628 <DMA_CheckFifoParam+0xa8>
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	2b03      	cmp	r3, #3
 80025e8:	d837      	bhi.n	800265a <DMA_CheckFifoParam+0xda>
 80025ea:	a201      	add	r2, pc, #4	; (adr r2, 80025f0 <DMA_CheckFifoParam+0x70>)
 80025ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f0:	08002601 	.word	0x08002601
 80025f4:	08002607 	.word	0x08002607
 80025f8:	08002601 	.word	0x08002601
 80025fc:	08002619 	.word	0x08002619
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	73fb      	strb	r3, [r7, #15]
      break;
 8002604:	e030      	b.n	8002668 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d025      	beq.n	800265e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002616:	e022      	b.n	800265e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002620:	d11f      	bne.n	8002662 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002626:	e01c      	b.n	8002662 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2b02      	cmp	r3, #2
 800262c:	d903      	bls.n	8002636 <DMA_CheckFifoParam+0xb6>
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	2b03      	cmp	r3, #3
 8002632:	d003      	beq.n	800263c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002634:	e018      	b.n	8002668 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	73fb      	strb	r3, [r7, #15]
      break;
 800263a:	e015      	b.n	8002668 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002640:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00e      	beq.n	8002666 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	73fb      	strb	r3, [r7, #15]
      break;
 800264c:	e00b      	b.n	8002666 <DMA_CheckFifoParam+0xe6>
      break;
 800264e:	bf00      	nop
 8002650:	e00a      	b.n	8002668 <DMA_CheckFifoParam+0xe8>
      break;
 8002652:	bf00      	nop
 8002654:	e008      	b.n	8002668 <DMA_CheckFifoParam+0xe8>
      break;
 8002656:	bf00      	nop
 8002658:	e006      	b.n	8002668 <DMA_CheckFifoParam+0xe8>
      break;
 800265a:	bf00      	nop
 800265c:	e004      	b.n	8002668 <DMA_CheckFifoParam+0xe8>
      break;
 800265e:	bf00      	nop
 8002660:	e002      	b.n	8002668 <DMA_CheckFifoParam+0xe8>
      break;   
 8002662:	bf00      	nop
 8002664:	e000      	b.n	8002668 <DMA_CheckFifoParam+0xe8>
      break;
 8002666:	bf00      	nop
    }
  } 
  
  return status; 
 8002668:	7bfb      	ldrb	r3, [r7, #15]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop

08002678 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800268a:	4b23      	ldr	r3, [pc, #140]	; (8002718 <HAL_FLASH_Program+0xa0>)
 800268c:	7e1b      	ldrb	r3, [r3, #24]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d101      	bne.n	8002696 <HAL_FLASH_Program+0x1e>
 8002692:	2302      	movs	r3, #2
 8002694:	e03b      	b.n	800270e <HAL_FLASH_Program+0x96>
 8002696:	4b20      	ldr	r3, [pc, #128]	; (8002718 <HAL_FLASH_Program+0xa0>)
 8002698:	2201      	movs	r2, #1
 800269a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800269c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80026a0:	f000 f87c 	bl	800279c <FLASH_WaitForLastOperation>
 80026a4:	4603      	mov	r3, r0
 80026a6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80026a8:	7dfb      	ldrb	r3, [r7, #23]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d12b      	bne.n	8002706 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d105      	bne.n	80026c0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80026b4:	783b      	ldrb	r3, [r7, #0]
 80026b6:	4619      	mov	r1, r3
 80026b8:	68b8      	ldr	r0, [r7, #8]
 80026ba:	f000 f927 	bl	800290c <FLASH_Program_Byte>
 80026be:	e016      	b.n	80026ee <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d105      	bne.n	80026d2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80026c6:	883b      	ldrh	r3, [r7, #0]
 80026c8:	4619      	mov	r1, r3
 80026ca:	68b8      	ldr	r0, [r7, #8]
 80026cc:	f000 f8fa 	bl	80028c4 <FLASH_Program_HalfWord>
 80026d0:	e00d      	b.n	80026ee <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d105      	bne.n	80026e4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	4619      	mov	r1, r3
 80026dc:	68b8      	ldr	r0, [r7, #8]
 80026de:	f000 f8cf 	bl	8002880 <FLASH_Program_Word>
 80026e2:	e004      	b.n	80026ee <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80026e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80026e8:	68b8      	ldr	r0, [r7, #8]
 80026ea:	f000 f897 	bl	800281c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80026ee:	f24c 3050 	movw	r0, #50000	; 0xc350
 80026f2:	f000 f853 	bl	800279c <FLASH_WaitForLastOperation>
 80026f6:	4603      	mov	r3, r0
 80026f8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80026fa:	4b08      	ldr	r3, [pc, #32]	; (800271c <HAL_FLASH_Program+0xa4>)
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	4a07      	ldr	r2, [pc, #28]	; (800271c <HAL_FLASH_Program+0xa4>)
 8002700:	f023 0301 	bic.w	r3, r3, #1
 8002704:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002706:	4b04      	ldr	r3, [pc, #16]	; (8002718 <HAL_FLASH_Program+0xa0>)
 8002708:	2200      	movs	r2, #0
 800270a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800270c:	7dfb      	ldrb	r3, [r7, #23]
}
 800270e:	4618      	mov	r0, r3
 8002710:	3718      	adds	r7, #24
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	200005a4 	.word	0x200005a4
 800271c:	40023c00 	.word	0x40023c00

08002720 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002726:	2300      	movs	r3, #0
 8002728:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800272a:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <HAL_FLASH_Unlock+0x38>)
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	2b00      	cmp	r3, #0
 8002730:	da0b      	bge.n	800274a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002732:	4b09      	ldr	r3, [pc, #36]	; (8002758 <HAL_FLASH_Unlock+0x38>)
 8002734:	4a09      	ldr	r2, [pc, #36]	; (800275c <HAL_FLASH_Unlock+0x3c>)
 8002736:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002738:	4b07      	ldr	r3, [pc, #28]	; (8002758 <HAL_FLASH_Unlock+0x38>)
 800273a:	4a09      	ldr	r2, [pc, #36]	; (8002760 <HAL_FLASH_Unlock+0x40>)
 800273c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800273e:	4b06      	ldr	r3, [pc, #24]	; (8002758 <HAL_FLASH_Unlock+0x38>)
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	2b00      	cmp	r3, #0
 8002744:	da01      	bge.n	800274a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800274a:	79fb      	ldrb	r3, [r7, #7]
}
 800274c:	4618      	mov	r0, r3
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	40023c00 	.word	0x40023c00
 800275c:	45670123 	.word	0x45670123
 8002760:	cdef89ab 	.word	0xcdef89ab

08002764 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002768:	4b05      	ldr	r3, [pc, #20]	; (8002780 <HAL_FLASH_Lock+0x1c>)
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	4a04      	ldr	r2, [pc, #16]	; (8002780 <HAL_FLASH_Lock+0x1c>)
 800276e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002772:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	40023c00 	.word	0x40023c00

08002784 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8002788:	4b03      	ldr	r3, [pc, #12]	; (8002798 <HAL_FLASH_GetError+0x14>)
 800278a:	69db      	ldr	r3, [r3, #28]
}  
 800278c:	4618      	mov	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	200005a4 	.word	0x200005a4

0800279c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80027a8:	4b1a      	ldr	r3, [pc, #104]	; (8002814 <FLASH_WaitForLastOperation+0x78>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80027ae:	f7ff fa1f 	bl	8001bf0 <HAL_GetTick>
 80027b2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80027b4:	e010      	b.n	80027d8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027bc:	d00c      	beq.n	80027d8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d007      	beq.n	80027d4 <FLASH_WaitForLastOperation+0x38>
 80027c4:	f7ff fa14 	bl	8001bf0 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d201      	bcs.n	80027d8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e019      	b.n	800280c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80027d8:	4b0f      	ldr	r3, [pc, #60]	; (8002818 <FLASH_WaitForLastOperation+0x7c>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1e8      	bne.n	80027b6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80027e4:	4b0c      	ldr	r3, [pc, #48]	; (8002818 <FLASH_WaitForLastOperation+0x7c>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d002      	beq.n	80027f6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80027f0:	4b09      	ldr	r3, [pc, #36]	; (8002818 <FLASH_WaitForLastOperation+0x7c>)
 80027f2:	2201      	movs	r2, #1
 80027f4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80027f6:	4b08      	ldr	r3, [pc, #32]	; (8002818 <FLASH_WaitForLastOperation+0x7c>)
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002802:	f000 f8a5 	bl	8002950 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800280a:	2300      	movs	r3, #0
  
}  
 800280c:	4618      	mov	r0, r3
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	200005a4 	.word	0x200005a4
 8002818:	40023c00 	.word	0x40023c00

0800281c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002828:	4b14      	ldr	r3, [pc, #80]	; (800287c <FLASH_Program_DoubleWord+0x60>)
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	4a13      	ldr	r2, [pc, #76]	; (800287c <FLASH_Program_DoubleWord+0x60>)
 800282e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002832:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002834:	4b11      	ldr	r3, [pc, #68]	; (800287c <FLASH_Program_DoubleWord+0x60>)
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	4a10      	ldr	r2, [pc, #64]	; (800287c <FLASH_Program_DoubleWord+0x60>)
 800283a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800283e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002840:	4b0e      	ldr	r3, [pc, #56]	; (800287c <FLASH_Program_DoubleWord+0x60>)
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	4a0d      	ldr	r2, [pc, #52]	; (800287c <FLASH_Program_DoubleWord+0x60>)
 8002846:	f043 0301 	orr.w	r3, r3, #1
 800284a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8002852:	f3bf 8f6f 	isb	sy
}
 8002856:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002858:	e9d7 0100 	ldrd	r0, r1, [r7]
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	000a      	movs	r2, r1
 8002866:	2300      	movs	r3, #0
 8002868:	68f9      	ldr	r1, [r7, #12]
 800286a:	3104      	adds	r1, #4
 800286c:	4613      	mov	r3, r2
 800286e:	600b      	str	r3, [r1, #0]
}
 8002870:	bf00      	nop
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	40023c00 	.word	0x40023c00

08002880 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800288a:	4b0d      	ldr	r3, [pc, #52]	; (80028c0 <FLASH_Program_Word+0x40>)
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	4a0c      	ldr	r2, [pc, #48]	; (80028c0 <FLASH_Program_Word+0x40>)
 8002890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002894:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002896:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <FLASH_Program_Word+0x40>)
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	4a09      	ldr	r2, [pc, #36]	; (80028c0 <FLASH_Program_Word+0x40>)
 800289c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028a0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80028a2:	4b07      	ldr	r3, [pc, #28]	; (80028c0 <FLASH_Program_Word+0x40>)
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	4a06      	ldr	r2, [pc, #24]	; (80028c0 <FLASH_Program_Word+0x40>)
 80028a8:	f043 0301 	orr.w	r3, r3, #1
 80028ac:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	601a      	str	r2, [r3, #0]
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	40023c00 	.word	0x40023c00

080028c4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	460b      	mov	r3, r1
 80028ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80028d0:	4b0d      	ldr	r3, [pc, #52]	; (8002908 <FLASH_Program_HalfWord+0x44>)
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	4a0c      	ldr	r2, [pc, #48]	; (8002908 <FLASH_Program_HalfWord+0x44>)
 80028d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80028dc:	4b0a      	ldr	r3, [pc, #40]	; (8002908 <FLASH_Program_HalfWord+0x44>)
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	4a09      	ldr	r2, [pc, #36]	; (8002908 <FLASH_Program_HalfWord+0x44>)
 80028e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80028e8:	4b07      	ldr	r3, [pc, #28]	; (8002908 <FLASH_Program_HalfWord+0x44>)
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	4a06      	ldr	r2, [pc, #24]	; (8002908 <FLASH_Program_HalfWord+0x44>)
 80028ee:	f043 0301 	orr.w	r3, r3, #1
 80028f2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	887a      	ldrh	r2, [r7, #2]
 80028f8:	801a      	strh	r2, [r3, #0]
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	40023c00 	.word	0x40023c00

0800290c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	460b      	mov	r3, r1
 8002916:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002918:	4b0c      	ldr	r3, [pc, #48]	; (800294c <FLASH_Program_Byte+0x40>)
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	4a0b      	ldr	r2, [pc, #44]	; (800294c <FLASH_Program_Byte+0x40>)
 800291e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002922:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002924:	4b09      	ldr	r3, [pc, #36]	; (800294c <FLASH_Program_Byte+0x40>)
 8002926:	4a09      	ldr	r2, [pc, #36]	; (800294c <FLASH_Program_Byte+0x40>)
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800292c:	4b07      	ldr	r3, [pc, #28]	; (800294c <FLASH_Program_Byte+0x40>)
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	4a06      	ldr	r2, [pc, #24]	; (800294c <FLASH_Program_Byte+0x40>)
 8002932:	f043 0301 	orr.w	r3, r3, #1
 8002936:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	78fa      	ldrb	r2, [r7, #3]
 800293c:	701a      	strb	r2, [r3, #0]
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	40023c00 	.word	0x40023c00

08002950 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002954:	4b27      	ldr	r3, [pc, #156]	; (80029f4 <FLASH_SetErrorCode+0xa4>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	f003 0310 	and.w	r3, r3, #16
 800295c:	2b00      	cmp	r3, #0
 800295e:	d008      	beq.n	8002972 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002960:	4b25      	ldr	r3, [pc, #148]	; (80029f8 <FLASH_SetErrorCode+0xa8>)
 8002962:	69db      	ldr	r3, [r3, #28]
 8002964:	f043 0310 	orr.w	r3, r3, #16
 8002968:	4a23      	ldr	r2, [pc, #140]	; (80029f8 <FLASH_SetErrorCode+0xa8>)
 800296a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800296c:	4b21      	ldr	r3, [pc, #132]	; (80029f4 <FLASH_SetErrorCode+0xa4>)
 800296e:	2210      	movs	r2, #16
 8002970:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002972:	4b20      	ldr	r3, [pc, #128]	; (80029f4 <FLASH_SetErrorCode+0xa4>)
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	f003 0320 	and.w	r3, r3, #32
 800297a:	2b00      	cmp	r3, #0
 800297c:	d008      	beq.n	8002990 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800297e:	4b1e      	ldr	r3, [pc, #120]	; (80029f8 <FLASH_SetErrorCode+0xa8>)
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	f043 0308 	orr.w	r3, r3, #8
 8002986:	4a1c      	ldr	r2, [pc, #112]	; (80029f8 <FLASH_SetErrorCode+0xa8>)
 8002988:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800298a:	4b1a      	ldr	r3, [pc, #104]	; (80029f4 <FLASH_SetErrorCode+0xa4>)
 800298c:	2220      	movs	r2, #32
 800298e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002990:	4b18      	ldr	r3, [pc, #96]	; (80029f4 <FLASH_SetErrorCode+0xa4>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002998:	2b00      	cmp	r3, #0
 800299a:	d008      	beq.n	80029ae <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800299c:	4b16      	ldr	r3, [pc, #88]	; (80029f8 <FLASH_SetErrorCode+0xa8>)
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	f043 0304 	orr.w	r3, r3, #4
 80029a4:	4a14      	ldr	r2, [pc, #80]	; (80029f8 <FLASH_SetErrorCode+0xa8>)
 80029a6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80029a8:	4b12      	ldr	r3, [pc, #72]	; (80029f4 <FLASH_SetErrorCode+0xa4>)
 80029aa:	2240      	movs	r2, #64	; 0x40
 80029ac:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80029ae:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <FLASH_SetErrorCode+0xa4>)
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d008      	beq.n	80029cc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80029ba:	4b0f      	ldr	r3, [pc, #60]	; (80029f8 <FLASH_SetErrorCode+0xa8>)
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	f043 0302 	orr.w	r3, r3, #2
 80029c2:	4a0d      	ldr	r2, [pc, #52]	; (80029f8 <FLASH_SetErrorCode+0xa8>)
 80029c4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80029c6:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <FLASH_SetErrorCode+0xa4>)
 80029c8:	2280      	movs	r2, #128	; 0x80
 80029ca:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80029cc:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <FLASH_SetErrorCode+0xa4>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d008      	beq.n	80029ea <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80029d8:	4b07      	ldr	r3, [pc, #28]	; (80029f8 <FLASH_SetErrorCode+0xa8>)
 80029da:	69db      	ldr	r3, [r3, #28]
 80029dc:	f043 0320 	orr.w	r3, r3, #32
 80029e0:	4a05      	ldr	r2, [pc, #20]	; (80029f8 <FLASH_SetErrorCode+0xa8>)
 80029e2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80029e4:	4b03      	ldr	r3, [pc, #12]	; (80029f4 <FLASH_SetErrorCode+0xa4>)
 80029e6:	2202      	movs	r2, #2
 80029e8:	60da      	str	r2, [r3, #12]
  }
}
 80029ea:	bf00      	nop
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	40023c00 	.word	0x40023c00
 80029f8:	200005a4 	.word	0x200005a4

080029fc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002a0e:	4b31      	ldr	r3, [pc, #196]	; (8002ad4 <HAL_FLASHEx_Erase+0xd8>)
 8002a10:	7e1b      	ldrb	r3, [r3, #24]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d101      	bne.n	8002a1a <HAL_FLASHEx_Erase+0x1e>
 8002a16:	2302      	movs	r3, #2
 8002a18:	e058      	b.n	8002acc <HAL_FLASHEx_Erase+0xd0>
 8002a1a:	4b2e      	ldr	r3, [pc, #184]	; (8002ad4 <HAL_FLASHEx_Erase+0xd8>)
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a20:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a24:	f7ff feba 	bl	800279c <FLASH_WaitForLastOperation>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002a2c:	7bfb      	ldrb	r3, [r7, #15]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d148      	bne.n	8002ac4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	f04f 32ff 	mov.w	r2, #4294967295
 8002a38:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d115      	bne.n	8002a6e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4610      	mov	r0, r2
 8002a50:	f000 f844 	bl	8002adc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a54:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a58:	f7ff fea0 	bl	800279c <FLASH_WaitForLastOperation>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002a60:	4b1d      	ldr	r3, [pc, #116]	; (8002ad8 <HAL_FLASHEx_Erase+0xdc>)
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	4a1c      	ldr	r2, [pc, #112]	; (8002ad8 <HAL_FLASHEx_Erase+0xdc>)
 8002a66:	f023 0304 	bic.w	r3, r3, #4
 8002a6a:	6113      	str	r3, [r2, #16]
 8002a6c:	e028      	b.n	8002ac0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	60bb      	str	r3, [r7, #8]
 8002a74:	e01c      	b.n	8002ab0 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	68b8      	ldr	r0, [r7, #8]
 8002a80:	f000 f850 	bl	8002b24 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a84:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a88:	f7ff fe88 	bl	800279c <FLASH_WaitForLastOperation>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002a90:	4b11      	ldr	r3, [pc, #68]	; (8002ad8 <HAL_FLASHEx_Erase+0xdc>)
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	4a10      	ldr	r2, [pc, #64]	; (8002ad8 <HAL_FLASHEx_Erase+0xdc>)
 8002a96:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8002a9a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	68ba      	ldr	r2, [r7, #8]
 8002aa6:	601a      	str	r2, [r3, #0]
          break;
 8002aa8:	e00a      	b.n	8002ac0 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	3301      	adds	r3, #1
 8002aae:	60bb      	str	r3, [r7, #8]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68da      	ldr	r2, [r3, #12]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	4413      	add	r3, r2
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d3da      	bcc.n	8002a76 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002ac0:	f000 f878 	bl	8002bb4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002ac4:	4b03      	ldr	r3, [pc, #12]	; (8002ad4 <HAL_FLASHEx_Erase+0xd8>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	761a      	strb	r2, [r3, #24]

  return status;
 8002aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	200005a4 	.word	0x200005a4
 8002ad8:	40023c00 	.word	0x40023c00

08002adc <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	6039      	str	r1, [r7, #0]
 8002ae6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002ae8:	4b0d      	ldr	r3, [pc, #52]	; (8002b20 <FLASH_MassErase+0x44>)
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	4a0c      	ldr	r2, [pc, #48]	; (8002b20 <FLASH_MassErase+0x44>)
 8002aee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002af2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002af4:	4b0a      	ldr	r3, [pc, #40]	; (8002b20 <FLASH_MassErase+0x44>)
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	4a09      	ldr	r2, [pc, #36]	; (8002b20 <FLASH_MassErase+0x44>)
 8002afa:	f043 0304 	orr.w	r3, r3, #4
 8002afe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002b00:	4b07      	ldr	r3, [pc, #28]	; (8002b20 <FLASH_MassErase+0x44>)
 8002b02:	691a      	ldr	r2, [r3, #16]
 8002b04:	79fb      	ldrb	r3, [r7, #7]
 8002b06:	021b      	lsls	r3, r3, #8
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	4a05      	ldr	r2, [pc, #20]	; (8002b20 <FLASH_MassErase+0x44>)
 8002b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b10:	6113      	str	r3, [r2, #16]
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	40023c00 	.word	0x40023c00

08002b24 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002b34:	78fb      	ldrb	r3, [r7, #3]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d102      	bne.n	8002b40 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	e010      	b.n	8002b62 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002b40:	78fb      	ldrb	r3, [r7, #3]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d103      	bne.n	8002b4e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002b46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	e009      	b.n	8002b62 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002b4e:	78fb      	ldrb	r3, [r7, #3]
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d103      	bne.n	8002b5c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002b54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	e002      	b.n	8002b62 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002b5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b60:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002b62:	4b13      	ldr	r3, [pc, #76]	; (8002bb0 <FLASH_Erase_Sector+0x8c>)
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	4a12      	ldr	r2, [pc, #72]	; (8002bb0 <FLASH_Erase_Sector+0x8c>)
 8002b68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b6c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002b6e:	4b10      	ldr	r3, [pc, #64]	; (8002bb0 <FLASH_Erase_Sector+0x8c>)
 8002b70:	691a      	ldr	r2, [r3, #16]
 8002b72:	490f      	ldr	r1, [pc, #60]	; (8002bb0 <FLASH_Erase_Sector+0x8c>)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002b7a:	4b0d      	ldr	r3, [pc, #52]	; (8002bb0 <FLASH_Erase_Sector+0x8c>)
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	4a0c      	ldr	r2, [pc, #48]	; (8002bb0 <FLASH_Erase_Sector+0x8c>)
 8002b80:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002b84:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002b86:	4b0a      	ldr	r3, [pc, #40]	; (8002bb0 <FLASH_Erase_Sector+0x8c>)
 8002b88:	691a      	ldr	r2, [r3, #16]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	4a07      	ldr	r2, [pc, #28]	; (8002bb0 <FLASH_Erase_Sector+0x8c>)
 8002b92:	f043 0302 	orr.w	r3, r3, #2
 8002b96:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002b98:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <FLASH_Erase_Sector+0x8c>)
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	4a04      	ldr	r2, [pc, #16]	; (8002bb0 <FLASH_Erase_Sector+0x8c>)
 8002b9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba2:	6113      	str	r3, [r2, #16]
}
 8002ba4:	bf00      	nop
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	40023c00 	.word	0x40023c00

08002bb4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002bb8:	4b20      	ldr	r3, [pc, #128]	; (8002c3c <FLASH_FlushCaches+0x88>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d017      	beq.n	8002bf4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002bc4:	4b1d      	ldr	r3, [pc, #116]	; (8002c3c <FLASH_FlushCaches+0x88>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a1c      	ldr	r2, [pc, #112]	; (8002c3c <FLASH_FlushCaches+0x88>)
 8002bca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002bce:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002bd0:	4b1a      	ldr	r3, [pc, #104]	; (8002c3c <FLASH_FlushCaches+0x88>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a19      	ldr	r2, [pc, #100]	; (8002c3c <FLASH_FlushCaches+0x88>)
 8002bd6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002bda:	6013      	str	r3, [r2, #0]
 8002bdc:	4b17      	ldr	r3, [pc, #92]	; (8002c3c <FLASH_FlushCaches+0x88>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a16      	ldr	r2, [pc, #88]	; (8002c3c <FLASH_FlushCaches+0x88>)
 8002be2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002be6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002be8:	4b14      	ldr	r3, [pc, #80]	; (8002c3c <FLASH_FlushCaches+0x88>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a13      	ldr	r2, [pc, #76]	; (8002c3c <FLASH_FlushCaches+0x88>)
 8002bee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bf2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002bf4:	4b11      	ldr	r3, [pc, #68]	; (8002c3c <FLASH_FlushCaches+0x88>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d017      	beq.n	8002c30 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002c00:	4b0e      	ldr	r3, [pc, #56]	; (8002c3c <FLASH_FlushCaches+0x88>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a0d      	ldr	r2, [pc, #52]	; (8002c3c <FLASH_FlushCaches+0x88>)
 8002c06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c0a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002c0c:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <FLASH_FlushCaches+0x88>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a0a      	ldr	r2, [pc, #40]	; (8002c3c <FLASH_FlushCaches+0x88>)
 8002c12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c16:	6013      	str	r3, [r2, #0]
 8002c18:	4b08      	ldr	r3, [pc, #32]	; (8002c3c <FLASH_FlushCaches+0x88>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a07      	ldr	r2, [pc, #28]	; (8002c3c <FLASH_FlushCaches+0x88>)
 8002c1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c22:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c24:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <FLASH_FlushCaches+0x88>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a04      	ldr	r2, [pc, #16]	; (8002c3c <FLASH_FlushCaches+0x88>)
 8002c2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c2e:	6013      	str	r3, [r2, #0]
  }
}
 8002c30:	bf00      	nop
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	40023c00 	.word	0x40023c00

08002c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b089      	sub	sp, #36	; 0x24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c56:	2300      	movs	r3, #0
 8002c58:	61fb      	str	r3, [r7, #28]
 8002c5a:	e16b      	b.n	8002f34 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	f040 815a 	bne.w	8002f2e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d005      	beq.n	8002c92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d130      	bne.n	8002cf4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	2203      	movs	r2, #3
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	68da      	ldr	r2, [r3, #12]
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cc8:	2201      	movs	r2, #1
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	091b      	lsrs	r3, r3, #4
 8002cde:	f003 0201 	and.w	r2, r3, #1
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 0303 	and.w	r3, r3, #3
 8002cfc:	2b03      	cmp	r3, #3
 8002cfe:	d017      	beq.n	8002d30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	2203      	movs	r2, #3
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	43db      	mvns	r3, r3
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	4013      	ands	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 0303 	and.w	r3, r3, #3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d123      	bne.n	8002d84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	08da      	lsrs	r2, r3, #3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3208      	adds	r2, #8
 8002d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	220f      	movs	r2, #15
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	08da      	lsrs	r2, r3, #3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	3208      	adds	r2, #8
 8002d7e:	69b9      	ldr	r1, [r7, #24]
 8002d80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	2203      	movs	r2, #3
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	43db      	mvns	r3, r3
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f003 0203 	and.w	r2, r3, #3
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 80b4 	beq.w	8002f2e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	4b60      	ldr	r3, [pc, #384]	; (8002f4c <HAL_GPIO_Init+0x30c>)
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dce:	4a5f      	ldr	r2, [pc, #380]	; (8002f4c <HAL_GPIO_Init+0x30c>)
 8002dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8002dd6:	4b5d      	ldr	r3, [pc, #372]	; (8002f4c <HAL_GPIO_Init+0x30c>)
 8002dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002de2:	4a5b      	ldr	r2, [pc, #364]	; (8002f50 <HAL_GPIO_Init+0x310>)
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	089b      	lsrs	r3, r3, #2
 8002de8:	3302      	adds	r3, #2
 8002dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	f003 0303 	and.w	r3, r3, #3
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	220f      	movs	r2, #15
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	4013      	ands	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a52      	ldr	r2, [pc, #328]	; (8002f54 <HAL_GPIO_Init+0x314>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d02b      	beq.n	8002e66 <HAL_GPIO_Init+0x226>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a51      	ldr	r2, [pc, #324]	; (8002f58 <HAL_GPIO_Init+0x318>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d025      	beq.n	8002e62 <HAL_GPIO_Init+0x222>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a50      	ldr	r2, [pc, #320]	; (8002f5c <HAL_GPIO_Init+0x31c>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d01f      	beq.n	8002e5e <HAL_GPIO_Init+0x21e>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a4f      	ldr	r2, [pc, #316]	; (8002f60 <HAL_GPIO_Init+0x320>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d019      	beq.n	8002e5a <HAL_GPIO_Init+0x21a>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a4e      	ldr	r2, [pc, #312]	; (8002f64 <HAL_GPIO_Init+0x324>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d013      	beq.n	8002e56 <HAL_GPIO_Init+0x216>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a4d      	ldr	r2, [pc, #308]	; (8002f68 <HAL_GPIO_Init+0x328>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d00d      	beq.n	8002e52 <HAL_GPIO_Init+0x212>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a4c      	ldr	r2, [pc, #304]	; (8002f6c <HAL_GPIO_Init+0x32c>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d007      	beq.n	8002e4e <HAL_GPIO_Init+0x20e>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a4b      	ldr	r2, [pc, #300]	; (8002f70 <HAL_GPIO_Init+0x330>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d101      	bne.n	8002e4a <HAL_GPIO_Init+0x20a>
 8002e46:	2307      	movs	r3, #7
 8002e48:	e00e      	b.n	8002e68 <HAL_GPIO_Init+0x228>
 8002e4a:	2308      	movs	r3, #8
 8002e4c:	e00c      	b.n	8002e68 <HAL_GPIO_Init+0x228>
 8002e4e:	2306      	movs	r3, #6
 8002e50:	e00a      	b.n	8002e68 <HAL_GPIO_Init+0x228>
 8002e52:	2305      	movs	r3, #5
 8002e54:	e008      	b.n	8002e68 <HAL_GPIO_Init+0x228>
 8002e56:	2304      	movs	r3, #4
 8002e58:	e006      	b.n	8002e68 <HAL_GPIO_Init+0x228>
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e004      	b.n	8002e68 <HAL_GPIO_Init+0x228>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	e002      	b.n	8002e68 <HAL_GPIO_Init+0x228>
 8002e62:	2301      	movs	r3, #1
 8002e64:	e000      	b.n	8002e68 <HAL_GPIO_Init+0x228>
 8002e66:	2300      	movs	r3, #0
 8002e68:	69fa      	ldr	r2, [r7, #28]
 8002e6a:	f002 0203 	and.w	r2, r2, #3
 8002e6e:	0092      	lsls	r2, r2, #2
 8002e70:	4093      	lsls	r3, r2
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e78:	4935      	ldr	r1, [pc, #212]	; (8002f50 <HAL_GPIO_Init+0x310>)
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	089b      	lsrs	r3, r3, #2
 8002e7e:	3302      	adds	r3, #2
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e86:	4b3b      	ldr	r3, [pc, #236]	; (8002f74 <HAL_GPIO_Init+0x334>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4013      	ands	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002eaa:	4a32      	ldr	r2, [pc, #200]	; (8002f74 <HAL_GPIO_Init+0x334>)
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002eb0:	4b30      	ldr	r3, [pc, #192]	; (8002f74 <HAL_GPIO_Init+0x334>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ed4:	4a27      	ldr	r2, [pc, #156]	; (8002f74 <HAL_GPIO_Init+0x334>)
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002eda:	4b26      	ldr	r3, [pc, #152]	; (8002f74 <HAL_GPIO_Init+0x334>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002efe:	4a1d      	ldr	r2, [pc, #116]	; (8002f74 <HAL_GPIO_Init+0x334>)
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f04:	4b1b      	ldr	r3, [pc, #108]	; (8002f74 <HAL_GPIO_Init+0x334>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4013      	ands	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d003      	beq.n	8002f28 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f28:	4a12      	ldr	r2, [pc, #72]	; (8002f74 <HAL_GPIO_Init+0x334>)
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	3301      	adds	r3, #1
 8002f32:	61fb      	str	r3, [r7, #28]
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	2b0f      	cmp	r3, #15
 8002f38:	f67f ae90 	bls.w	8002c5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f3c:	bf00      	nop
 8002f3e:	bf00      	nop
 8002f40:	3724      	adds	r7, #36	; 0x24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	40023800 	.word	0x40023800
 8002f50:	40013800 	.word	0x40013800
 8002f54:	40020000 	.word	0x40020000
 8002f58:	40020400 	.word	0x40020400
 8002f5c:	40020800 	.word	0x40020800
 8002f60:	40020c00 	.word	0x40020c00
 8002f64:	40021000 	.word	0x40021000
 8002f68:	40021400 	.word	0x40021400
 8002f6c:	40021800 	.word	0x40021800
 8002f70:	40021c00 	.word	0x40021c00
 8002f74:	40013c00 	.word	0x40013c00

08002f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	807b      	strh	r3, [r7, #2]
 8002f84:	4613      	mov	r3, r2
 8002f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f88:	787b      	ldrb	r3, [r7, #1]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f8e:	887a      	ldrh	r2, [r7, #2]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f94:	e003      	b.n	8002f9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f96:	887b      	ldrh	r3, [r7, #2]
 8002f98:	041a      	lsls	r2, r3, #16
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	619a      	str	r2, [r3, #24]
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b085      	sub	sp, #20
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002fbc:	887a      	ldrh	r2, [r7, #2]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	041a      	lsls	r2, r3, #16
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	43d9      	mvns	r1, r3
 8002fc8:	887b      	ldrh	r3, [r7, #2]
 8002fca:	400b      	ands	r3, r1
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	619a      	str	r2, [r3, #24]
}
 8002fd2:	bf00      	nop
 8002fd4:	3714      	adds	r7, #20
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
	...

08002fe0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e264      	b.n	80034bc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d075      	beq.n	80030ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ffe:	4ba3      	ldr	r3, [pc, #652]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 030c 	and.w	r3, r3, #12
 8003006:	2b04      	cmp	r3, #4
 8003008:	d00c      	beq.n	8003024 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800300a:	4ba0      	ldr	r3, [pc, #640]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003012:	2b08      	cmp	r3, #8
 8003014:	d112      	bne.n	800303c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003016:	4b9d      	ldr	r3, [pc, #628]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800301e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003022:	d10b      	bne.n	800303c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003024:	4b99      	ldr	r3, [pc, #612]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d05b      	beq.n	80030e8 <HAL_RCC_OscConfig+0x108>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d157      	bne.n	80030e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e23f      	b.n	80034bc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003044:	d106      	bne.n	8003054 <HAL_RCC_OscConfig+0x74>
 8003046:	4b91      	ldr	r3, [pc, #580]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a90      	ldr	r2, [pc, #576]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 800304c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003050:	6013      	str	r3, [r2, #0]
 8003052:	e01d      	b.n	8003090 <HAL_RCC_OscConfig+0xb0>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800305c:	d10c      	bne.n	8003078 <HAL_RCC_OscConfig+0x98>
 800305e:	4b8b      	ldr	r3, [pc, #556]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a8a      	ldr	r2, [pc, #552]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003064:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003068:	6013      	str	r3, [r2, #0]
 800306a:	4b88      	ldr	r3, [pc, #544]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a87      	ldr	r2, [pc, #540]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003074:	6013      	str	r3, [r2, #0]
 8003076:	e00b      	b.n	8003090 <HAL_RCC_OscConfig+0xb0>
 8003078:	4b84      	ldr	r3, [pc, #528]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a83      	ldr	r2, [pc, #524]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 800307e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003082:	6013      	str	r3, [r2, #0]
 8003084:	4b81      	ldr	r3, [pc, #516]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a80      	ldr	r2, [pc, #512]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 800308a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800308e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d013      	beq.n	80030c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003098:	f7fe fdaa 	bl	8001bf0 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030a0:	f7fe fda6 	bl	8001bf0 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b64      	cmp	r3, #100	; 0x64
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e204      	b.n	80034bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b2:	4b76      	ldr	r3, [pc, #472]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0f0      	beq.n	80030a0 <HAL_RCC_OscConfig+0xc0>
 80030be:	e014      	b.n	80030ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c0:	f7fe fd96 	bl	8001bf0 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030c8:	f7fe fd92 	bl	8001bf0 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b64      	cmp	r3, #100	; 0x64
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e1f0      	b.n	80034bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030da:	4b6c      	ldr	r3, [pc, #432]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f0      	bne.n	80030c8 <HAL_RCC_OscConfig+0xe8>
 80030e6:	e000      	b.n	80030ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d063      	beq.n	80031be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030f6:	4b65      	ldr	r3, [pc, #404]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 030c 	and.w	r3, r3, #12
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00b      	beq.n	800311a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003102:	4b62      	ldr	r3, [pc, #392]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800310a:	2b08      	cmp	r3, #8
 800310c:	d11c      	bne.n	8003148 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800310e:	4b5f      	ldr	r3, [pc, #380]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d116      	bne.n	8003148 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800311a:	4b5c      	ldr	r3, [pc, #368]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d005      	beq.n	8003132 <HAL_RCC_OscConfig+0x152>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d001      	beq.n	8003132 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e1c4      	b.n	80034bc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003132:	4b56      	ldr	r3, [pc, #344]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	4952      	ldr	r1, [pc, #328]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003142:	4313      	orrs	r3, r2
 8003144:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003146:	e03a      	b.n	80031be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d020      	beq.n	8003192 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003150:	4b4f      	ldr	r3, [pc, #316]	; (8003290 <HAL_RCC_OscConfig+0x2b0>)
 8003152:	2201      	movs	r2, #1
 8003154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003156:	f7fe fd4b 	bl	8001bf0 <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800315c:	e008      	b.n	8003170 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800315e:	f7fe fd47 	bl	8001bf0 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e1a5      	b.n	80034bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003170:	4b46      	ldr	r3, [pc, #280]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0f0      	beq.n	800315e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800317c:	4b43      	ldr	r3, [pc, #268]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	4940      	ldr	r1, [pc, #256]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 800318c:	4313      	orrs	r3, r2
 800318e:	600b      	str	r3, [r1, #0]
 8003190:	e015      	b.n	80031be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003192:	4b3f      	ldr	r3, [pc, #252]	; (8003290 <HAL_RCC_OscConfig+0x2b0>)
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003198:	f7fe fd2a 	bl	8001bf0 <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031a0:	f7fe fd26 	bl	8001bf0 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e184      	b.n	80034bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031b2:	4b36      	ldr	r3, [pc, #216]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1f0      	bne.n	80031a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0308 	and.w	r3, r3, #8
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d030      	beq.n	800322c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d016      	beq.n	8003200 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031d2:	4b30      	ldr	r3, [pc, #192]	; (8003294 <HAL_RCC_OscConfig+0x2b4>)
 80031d4:	2201      	movs	r2, #1
 80031d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d8:	f7fe fd0a 	bl	8001bf0 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031e0:	f7fe fd06 	bl	8001bf0 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e164      	b.n	80034bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031f2:	4b26      	ldr	r3, [pc, #152]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 80031f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d0f0      	beq.n	80031e0 <HAL_RCC_OscConfig+0x200>
 80031fe:	e015      	b.n	800322c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003200:	4b24      	ldr	r3, [pc, #144]	; (8003294 <HAL_RCC_OscConfig+0x2b4>)
 8003202:	2200      	movs	r2, #0
 8003204:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003206:	f7fe fcf3 	bl	8001bf0 <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800320c:	e008      	b.n	8003220 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800320e:	f7fe fcef 	bl	8001bf0 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d901      	bls.n	8003220 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e14d      	b.n	80034bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003220:	4b1a      	ldr	r3, [pc, #104]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1f0      	bne.n	800320e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 80a0 	beq.w	800337a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800323a:	2300      	movs	r3, #0
 800323c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800323e:	4b13      	ldr	r3, [pc, #76]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10f      	bne.n	800326a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800324a:	2300      	movs	r3, #0
 800324c:	60bb      	str	r3, [r7, #8]
 800324e:	4b0f      	ldr	r3, [pc, #60]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	4a0e      	ldr	r2, [pc, #56]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003258:	6413      	str	r3, [r2, #64]	; 0x40
 800325a:	4b0c      	ldr	r3, [pc, #48]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003262:	60bb      	str	r3, [r7, #8]
 8003264:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003266:	2301      	movs	r3, #1
 8003268:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800326a:	4b0b      	ldr	r3, [pc, #44]	; (8003298 <HAL_RCC_OscConfig+0x2b8>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003272:	2b00      	cmp	r3, #0
 8003274:	d121      	bne.n	80032ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003276:	4b08      	ldr	r3, [pc, #32]	; (8003298 <HAL_RCC_OscConfig+0x2b8>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a07      	ldr	r2, [pc, #28]	; (8003298 <HAL_RCC_OscConfig+0x2b8>)
 800327c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003280:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003282:	f7fe fcb5 	bl	8001bf0 <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003288:	e011      	b.n	80032ae <HAL_RCC_OscConfig+0x2ce>
 800328a:	bf00      	nop
 800328c:	40023800 	.word	0x40023800
 8003290:	42470000 	.word	0x42470000
 8003294:	42470e80 	.word	0x42470e80
 8003298:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800329c:	f7fe fca8 	bl	8001bf0 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e106      	b.n	80034bc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ae:	4b85      	ldr	r3, [pc, #532]	; (80034c4 <HAL_RCC_OscConfig+0x4e4>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d0f0      	beq.n	800329c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d106      	bne.n	80032d0 <HAL_RCC_OscConfig+0x2f0>
 80032c2:	4b81      	ldr	r3, [pc, #516]	; (80034c8 <HAL_RCC_OscConfig+0x4e8>)
 80032c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c6:	4a80      	ldr	r2, [pc, #512]	; (80034c8 <HAL_RCC_OscConfig+0x4e8>)
 80032c8:	f043 0301 	orr.w	r3, r3, #1
 80032cc:	6713      	str	r3, [r2, #112]	; 0x70
 80032ce:	e01c      	b.n	800330a <HAL_RCC_OscConfig+0x32a>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	2b05      	cmp	r3, #5
 80032d6:	d10c      	bne.n	80032f2 <HAL_RCC_OscConfig+0x312>
 80032d8:	4b7b      	ldr	r3, [pc, #492]	; (80034c8 <HAL_RCC_OscConfig+0x4e8>)
 80032da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032dc:	4a7a      	ldr	r2, [pc, #488]	; (80034c8 <HAL_RCC_OscConfig+0x4e8>)
 80032de:	f043 0304 	orr.w	r3, r3, #4
 80032e2:	6713      	str	r3, [r2, #112]	; 0x70
 80032e4:	4b78      	ldr	r3, [pc, #480]	; (80034c8 <HAL_RCC_OscConfig+0x4e8>)
 80032e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e8:	4a77      	ldr	r2, [pc, #476]	; (80034c8 <HAL_RCC_OscConfig+0x4e8>)
 80032ea:	f043 0301 	orr.w	r3, r3, #1
 80032ee:	6713      	str	r3, [r2, #112]	; 0x70
 80032f0:	e00b      	b.n	800330a <HAL_RCC_OscConfig+0x32a>
 80032f2:	4b75      	ldr	r3, [pc, #468]	; (80034c8 <HAL_RCC_OscConfig+0x4e8>)
 80032f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f6:	4a74      	ldr	r2, [pc, #464]	; (80034c8 <HAL_RCC_OscConfig+0x4e8>)
 80032f8:	f023 0301 	bic.w	r3, r3, #1
 80032fc:	6713      	str	r3, [r2, #112]	; 0x70
 80032fe:	4b72      	ldr	r3, [pc, #456]	; (80034c8 <HAL_RCC_OscConfig+0x4e8>)
 8003300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003302:	4a71      	ldr	r2, [pc, #452]	; (80034c8 <HAL_RCC_OscConfig+0x4e8>)
 8003304:	f023 0304 	bic.w	r3, r3, #4
 8003308:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d015      	beq.n	800333e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003312:	f7fe fc6d 	bl	8001bf0 <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003318:	e00a      	b.n	8003330 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800331a:	f7fe fc69 	bl	8001bf0 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	f241 3288 	movw	r2, #5000	; 0x1388
 8003328:	4293      	cmp	r3, r2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e0c5      	b.n	80034bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003330:	4b65      	ldr	r3, [pc, #404]	; (80034c8 <HAL_RCC_OscConfig+0x4e8>)
 8003332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0ee      	beq.n	800331a <HAL_RCC_OscConfig+0x33a>
 800333c:	e014      	b.n	8003368 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800333e:	f7fe fc57 	bl	8001bf0 <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003344:	e00a      	b.n	800335c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003346:	f7fe fc53 	bl	8001bf0 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	f241 3288 	movw	r2, #5000	; 0x1388
 8003354:	4293      	cmp	r3, r2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e0af      	b.n	80034bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800335c:	4b5a      	ldr	r3, [pc, #360]	; (80034c8 <HAL_RCC_OscConfig+0x4e8>)
 800335e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1ee      	bne.n	8003346 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003368:	7dfb      	ldrb	r3, [r7, #23]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d105      	bne.n	800337a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800336e:	4b56      	ldr	r3, [pc, #344]	; (80034c8 <HAL_RCC_OscConfig+0x4e8>)
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	4a55      	ldr	r2, [pc, #340]	; (80034c8 <HAL_RCC_OscConfig+0x4e8>)
 8003374:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003378:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	2b00      	cmp	r3, #0
 8003380:	f000 809b 	beq.w	80034ba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003384:	4b50      	ldr	r3, [pc, #320]	; (80034c8 <HAL_RCC_OscConfig+0x4e8>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f003 030c 	and.w	r3, r3, #12
 800338c:	2b08      	cmp	r3, #8
 800338e:	d05c      	beq.n	800344a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	2b02      	cmp	r3, #2
 8003396:	d141      	bne.n	800341c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003398:	4b4c      	ldr	r3, [pc, #304]	; (80034cc <HAL_RCC_OscConfig+0x4ec>)
 800339a:	2200      	movs	r2, #0
 800339c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339e:	f7fe fc27 	bl	8001bf0 <HAL_GetTick>
 80033a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033a4:	e008      	b.n	80033b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033a6:	f7fe fc23 	bl	8001bf0 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e081      	b.n	80034bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b8:	4b43      	ldr	r3, [pc, #268]	; (80034c8 <HAL_RCC_OscConfig+0x4e8>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1f0      	bne.n	80033a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	69da      	ldr	r2, [r3, #28]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	431a      	orrs	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	019b      	lsls	r3, r3, #6
 80033d4:	431a      	orrs	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033da:	085b      	lsrs	r3, r3, #1
 80033dc:	3b01      	subs	r3, #1
 80033de:	041b      	lsls	r3, r3, #16
 80033e0:	431a      	orrs	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e6:	061b      	lsls	r3, r3, #24
 80033e8:	4937      	ldr	r1, [pc, #220]	; (80034c8 <HAL_RCC_OscConfig+0x4e8>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033ee:	4b37      	ldr	r3, [pc, #220]	; (80034cc <HAL_RCC_OscConfig+0x4ec>)
 80033f0:	2201      	movs	r2, #1
 80033f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f4:	f7fe fbfc 	bl	8001bf0 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033fc:	f7fe fbf8 	bl	8001bf0 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e056      	b.n	80034bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800340e:	4b2e      	ldr	r3, [pc, #184]	; (80034c8 <HAL_RCC_OscConfig+0x4e8>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0f0      	beq.n	80033fc <HAL_RCC_OscConfig+0x41c>
 800341a:	e04e      	b.n	80034ba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800341c:	4b2b      	ldr	r3, [pc, #172]	; (80034cc <HAL_RCC_OscConfig+0x4ec>)
 800341e:	2200      	movs	r2, #0
 8003420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003422:	f7fe fbe5 	bl	8001bf0 <HAL_GetTick>
 8003426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003428:	e008      	b.n	800343c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800342a:	f7fe fbe1 	bl	8001bf0 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d901      	bls.n	800343c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e03f      	b.n	80034bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800343c:	4b22      	ldr	r3, [pc, #136]	; (80034c8 <HAL_RCC_OscConfig+0x4e8>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1f0      	bne.n	800342a <HAL_RCC_OscConfig+0x44a>
 8003448:	e037      	b.n	80034ba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d101      	bne.n	8003456 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e032      	b.n	80034bc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003456:	4b1c      	ldr	r3, [pc, #112]	; (80034c8 <HAL_RCC_OscConfig+0x4e8>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d028      	beq.n	80034b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800346e:	429a      	cmp	r2, r3
 8003470:	d121      	bne.n	80034b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800347c:	429a      	cmp	r2, r3
 800347e:	d11a      	bne.n	80034b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003486:	4013      	ands	r3, r2
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800348c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800348e:	4293      	cmp	r3, r2
 8003490:	d111      	bne.n	80034b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349c:	085b      	lsrs	r3, r3, #1
 800349e:	3b01      	subs	r3, #1
 80034a0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d107      	bne.n	80034b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d001      	beq.n	80034ba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e000      	b.n	80034bc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3718      	adds	r7, #24
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40007000 	.word	0x40007000
 80034c8:	40023800 	.word	0x40023800
 80034cc:	42470060 	.word	0x42470060

080034d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e0cc      	b.n	800367e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034e4:	4b68      	ldr	r3, [pc, #416]	; (8003688 <HAL_RCC_ClockConfig+0x1b8>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0307 	and.w	r3, r3, #7
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d90c      	bls.n	800350c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f2:	4b65      	ldr	r3, [pc, #404]	; (8003688 <HAL_RCC_ClockConfig+0x1b8>)
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034fa:	4b63      	ldr	r3, [pc, #396]	; (8003688 <HAL_RCC_ClockConfig+0x1b8>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	429a      	cmp	r2, r3
 8003506:	d001      	beq.n	800350c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e0b8      	b.n	800367e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d020      	beq.n	800355a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b00      	cmp	r3, #0
 8003522:	d005      	beq.n	8003530 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003524:	4b59      	ldr	r3, [pc, #356]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	4a58      	ldr	r2, [pc, #352]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 800352a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800352e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0308 	and.w	r3, r3, #8
 8003538:	2b00      	cmp	r3, #0
 800353a:	d005      	beq.n	8003548 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800353c:	4b53      	ldr	r3, [pc, #332]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	4a52      	ldr	r2, [pc, #328]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003542:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003546:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003548:	4b50      	ldr	r3, [pc, #320]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	494d      	ldr	r1, [pc, #308]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003556:	4313      	orrs	r3, r2
 8003558:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d044      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d107      	bne.n	800357e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800356e:	4b47      	ldr	r3, [pc, #284]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d119      	bne.n	80035ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e07f      	b.n	800367e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2b02      	cmp	r3, #2
 8003584:	d003      	beq.n	800358e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800358a:	2b03      	cmp	r3, #3
 800358c:	d107      	bne.n	800359e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800358e:	4b3f      	ldr	r3, [pc, #252]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d109      	bne.n	80035ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e06f      	b.n	800367e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800359e:	4b3b      	ldr	r3, [pc, #236]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e067      	b.n	800367e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ae:	4b37      	ldr	r3, [pc, #220]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f023 0203 	bic.w	r2, r3, #3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	4934      	ldr	r1, [pc, #208]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035c0:	f7fe fb16 	bl	8001bf0 <HAL_GetTick>
 80035c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035c6:	e00a      	b.n	80035de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035c8:	f7fe fb12 	bl	8001bf0 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e04f      	b.n	800367e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035de:	4b2b      	ldr	r3, [pc, #172]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 020c 	and.w	r2, r3, #12
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d1eb      	bne.n	80035c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035f0:	4b25      	ldr	r3, [pc, #148]	; (8003688 <HAL_RCC_ClockConfig+0x1b8>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d20c      	bcs.n	8003618 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035fe:	4b22      	ldr	r3, [pc, #136]	; (8003688 <HAL_RCC_ClockConfig+0x1b8>)
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	b2d2      	uxtb	r2, r2
 8003604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003606:	4b20      	ldr	r3, [pc, #128]	; (8003688 <HAL_RCC_ClockConfig+0x1b8>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	429a      	cmp	r2, r3
 8003612:	d001      	beq.n	8003618 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e032      	b.n	800367e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b00      	cmp	r3, #0
 8003622:	d008      	beq.n	8003636 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003624:	4b19      	ldr	r3, [pc, #100]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	4916      	ldr	r1, [pc, #88]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003632:	4313      	orrs	r3, r2
 8003634:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0308 	and.w	r3, r3, #8
 800363e:	2b00      	cmp	r3, #0
 8003640:	d009      	beq.n	8003656 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003642:	4b12      	ldr	r3, [pc, #72]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	490e      	ldr	r1, [pc, #56]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003652:	4313      	orrs	r3, r2
 8003654:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003656:	f000 f821 	bl	800369c <HAL_RCC_GetSysClockFreq>
 800365a:	4602      	mov	r2, r0
 800365c:	4b0b      	ldr	r3, [pc, #44]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	091b      	lsrs	r3, r3, #4
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	490a      	ldr	r1, [pc, #40]	; (8003690 <HAL_RCC_ClockConfig+0x1c0>)
 8003668:	5ccb      	ldrb	r3, [r1, r3]
 800366a:	fa22 f303 	lsr.w	r3, r2, r3
 800366e:	4a09      	ldr	r2, [pc, #36]	; (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 8003670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003672:	4b09      	ldr	r3, [pc, #36]	; (8003698 <HAL_RCC_ClockConfig+0x1c8>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f7fe fa76 	bl	8001b68 <HAL_InitTick>

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	40023c00 	.word	0x40023c00
 800368c:	40023800 	.word	0x40023800
 8003690:	0800b794 	.word	0x0800b794
 8003694:	20000000 	.word	0x20000000
 8003698:	20000004 	.word	0x20000004

0800369c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800369c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80036a0:	b084      	sub	sp, #16
 80036a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036a4:	2300      	movs	r3, #0
 80036a6:	607b      	str	r3, [r7, #4]
 80036a8:	2300      	movs	r3, #0
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	2300      	movs	r3, #0
 80036ae:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80036b0:	2300      	movs	r3, #0
 80036b2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036b4:	4b67      	ldr	r3, [pc, #412]	; (8003854 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f003 030c 	and.w	r3, r3, #12
 80036bc:	2b08      	cmp	r3, #8
 80036be:	d00d      	beq.n	80036dc <HAL_RCC_GetSysClockFreq+0x40>
 80036c0:	2b08      	cmp	r3, #8
 80036c2:	f200 80bd 	bhi.w	8003840 <HAL_RCC_GetSysClockFreq+0x1a4>
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d002      	beq.n	80036d0 <HAL_RCC_GetSysClockFreq+0x34>
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d003      	beq.n	80036d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80036ce:	e0b7      	b.n	8003840 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036d0:	4b61      	ldr	r3, [pc, #388]	; (8003858 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80036d2:	60bb      	str	r3, [r7, #8]
       break;
 80036d4:	e0b7      	b.n	8003846 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036d6:	4b61      	ldr	r3, [pc, #388]	; (800385c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80036d8:	60bb      	str	r3, [r7, #8]
      break;
 80036da:	e0b4      	b.n	8003846 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036dc:	4b5d      	ldr	r3, [pc, #372]	; (8003854 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036e6:	4b5b      	ldr	r3, [pc, #364]	; (8003854 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d04d      	beq.n	800378e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036f2:	4b58      	ldr	r3, [pc, #352]	; (8003854 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	099b      	lsrs	r3, r3, #6
 80036f8:	461a      	mov	r2, r3
 80036fa:	f04f 0300 	mov.w	r3, #0
 80036fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003702:	f04f 0100 	mov.w	r1, #0
 8003706:	ea02 0800 	and.w	r8, r2, r0
 800370a:	ea03 0901 	and.w	r9, r3, r1
 800370e:	4640      	mov	r0, r8
 8003710:	4649      	mov	r1, r9
 8003712:	f04f 0200 	mov.w	r2, #0
 8003716:	f04f 0300 	mov.w	r3, #0
 800371a:	014b      	lsls	r3, r1, #5
 800371c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003720:	0142      	lsls	r2, r0, #5
 8003722:	4610      	mov	r0, r2
 8003724:	4619      	mov	r1, r3
 8003726:	ebb0 0008 	subs.w	r0, r0, r8
 800372a:	eb61 0109 	sbc.w	r1, r1, r9
 800372e:	f04f 0200 	mov.w	r2, #0
 8003732:	f04f 0300 	mov.w	r3, #0
 8003736:	018b      	lsls	r3, r1, #6
 8003738:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800373c:	0182      	lsls	r2, r0, #6
 800373e:	1a12      	subs	r2, r2, r0
 8003740:	eb63 0301 	sbc.w	r3, r3, r1
 8003744:	f04f 0000 	mov.w	r0, #0
 8003748:	f04f 0100 	mov.w	r1, #0
 800374c:	00d9      	lsls	r1, r3, #3
 800374e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003752:	00d0      	lsls	r0, r2, #3
 8003754:	4602      	mov	r2, r0
 8003756:	460b      	mov	r3, r1
 8003758:	eb12 0208 	adds.w	r2, r2, r8
 800375c:	eb43 0309 	adc.w	r3, r3, r9
 8003760:	f04f 0000 	mov.w	r0, #0
 8003764:	f04f 0100 	mov.w	r1, #0
 8003768:	0259      	lsls	r1, r3, #9
 800376a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800376e:	0250      	lsls	r0, r2, #9
 8003770:	4602      	mov	r2, r0
 8003772:	460b      	mov	r3, r1
 8003774:	4610      	mov	r0, r2
 8003776:	4619      	mov	r1, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	461a      	mov	r2, r3
 800377c:	f04f 0300 	mov.w	r3, #0
 8003780:	f7fd fa82 	bl	8000c88 <__aeabi_uldivmod>
 8003784:	4602      	mov	r2, r0
 8003786:	460b      	mov	r3, r1
 8003788:	4613      	mov	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]
 800378c:	e04a      	b.n	8003824 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800378e:	4b31      	ldr	r3, [pc, #196]	; (8003854 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	099b      	lsrs	r3, r3, #6
 8003794:	461a      	mov	r2, r3
 8003796:	f04f 0300 	mov.w	r3, #0
 800379a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800379e:	f04f 0100 	mov.w	r1, #0
 80037a2:	ea02 0400 	and.w	r4, r2, r0
 80037a6:	ea03 0501 	and.w	r5, r3, r1
 80037aa:	4620      	mov	r0, r4
 80037ac:	4629      	mov	r1, r5
 80037ae:	f04f 0200 	mov.w	r2, #0
 80037b2:	f04f 0300 	mov.w	r3, #0
 80037b6:	014b      	lsls	r3, r1, #5
 80037b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80037bc:	0142      	lsls	r2, r0, #5
 80037be:	4610      	mov	r0, r2
 80037c0:	4619      	mov	r1, r3
 80037c2:	1b00      	subs	r0, r0, r4
 80037c4:	eb61 0105 	sbc.w	r1, r1, r5
 80037c8:	f04f 0200 	mov.w	r2, #0
 80037cc:	f04f 0300 	mov.w	r3, #0
 80037d0:	018b      	lsls	r3, r1, #6
 80037d2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80037d6:	0182      	lsls	r2, r0, #6
 80037d8:	1a12      	subs	r2, r2, r0
 80037da:	eb63 0301 	sbc.w	r3, r3, r1
 80037de:	f04f 0000 	mov.w	r0, #0
 80037e2:	f04f 0100 	mov.w	r1, #0
 80037e6:	00d9      	lsls	r1, r3, #3
 80037e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037ec:	00d0      	lsls	r0, r2, #3
 80037ee:	4602      	mov	r2, r0
 80037f0:	460b      	mov	r3, r1
 80037f2:	1912      	adds	r2, r2, r4
 80037f4:	eb45 0303 	adc.w	r3, r5, r3
 80037f8:	f04f 0000 	mov.w	r0, #0
 80037fc:	f04f 0100 	mov.w	r1, #0
 8003800:	0299      	lsls	r1, r3, #10
 8003802:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003806:	0290      	lsls	r0, r2, #10
 8003808:	4602      	mov	r2, r0
 800380a:	460b      	mov	r3, r1
 800380c:	4610      	mov	r0, r2
 800380e:	4619      	mov	r1, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	461a      	mov	r2, r3
 8003814:	f04f 0300 	mov.w	r3, #0
 8003818:	f7fd fa36 	bl	8000c88 <__aeabi_uldivmod>
 800381c:	4602      	mov	r2, r0
 800381e:	460b      	mov	r3, r1
 8003820:	4613      	mov	r3, r2
 8003822:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003824:	4b0b      	ldr	r3, [pc, #44]	; (8003854 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	0c1b      	lsrs	r3, r3, #16
 800382a:	f003 0303 	and.w	r3, r3, #3
 800382e:	3301      	adds	r3, #1
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	fbb2 f3f3 	udiv	r3, r2, r3
 800383c:	60bb      	str	r3, [r7, #8]
      break;
 800383e:	e002      	b.n	8003846 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003840:	4b05      	ldr	r3, [pc, #20]	; (8003858 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003842:	60bb      	str	r3, [r7, #8]
      break;
 8003844:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003846:	68bb      	ldr	r3, [r7, #8]
}
 8003848:	4618      	mov	r0, r3
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003852:	bf00      	nop
 8003854:	40023800 	.word	0x40023800
 8003858:	00f42400 	.word	0x00f42400
 800385c:	007a1200 	.word	0x007a1200

08003860 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003864:	4b03      	ldr	r3, [pc, #12]	; (8003874 <HAL_RCC_GetHCLKFreq+0x14>)
 8003866:	681b      	ldr	r3, [r3, #0]
}
 8003868:	4618      	mov	r0, r3
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	20000000 	.word	0x20000000

08003878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800387c:	f7ff fff0 	bl	8003860 <HAL_RCC_GetHCLKFreq>
 8003880:	4602      	mov	r2, r0
 8003882:	4b05      	ldr	r3, [pc, #20]	; (8003898 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	0a9b      	lsrs	r3, r3, #10
 8003888:	f003 0307 	and.w	r3, r3, #7
 800388c:	4903      	ldr	r1, [pc, #12]	; (800389c <HAL_RCC_GetPCLK1Freq+0x24>)
 800388e:	5ccb      	ldrb	r3, [r1, r3]
 8003890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003894:	4618      	mov	r0, r3
 8003896:	bd80      	pop	{r7, pc}
 8003898:	40023800 	.word	0x40023800
 800389c:	0800b7a4 	.word	0x0800b7a4

080038a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038a4:	f7ff ffdc 	bl	8003860 <HAL_RCC_GetHCLKFreq>
 80038a8:	4602      	mov	r2, r0
 80038aa:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	0b5b      	lsrs	r3, r3, #13
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	4903      	ldr	r1, [pc, #12]	; (80038c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038b6:	5ccb      	ldrb	r3, [r1, r3]
 80038b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038bc:	4618      	mov	r0, r3
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40023800 	.word	0x40023800
 80038c4:	0800b7a4 	.word	0x0800b7a4

080038c8 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80038ce:	f7fe f98f 	bl	8001bf0 <HAL_GetTick>
 80038d2:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80038d4:	4b5d      	ldr	r3, [pc, #372]	; (8003a4c <HAL_RCC_DeInit+0x184>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a5c      	ldr	r2, [pc, #368]	; (8003a4c <HAL_RCC_DeInit+0x184>)
 80038da:	f043 0301 	orr.w	r3, r3, #1
 80038de:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80038e0:	e008      	b.n	80038f4 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038e2:	f7fe f985 	bl	8001bf0 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e0a7      	b.n	8003a44 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80038f4:	4b55      	ldr	r3, [pc, #340]	; (8003a4c <HAL_RCC_DeInit+0x184>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0f0      	beq.n	80038e2 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8003900:	4b52      	ldr	r3, [pc, #328]	; (8003a4c <HAL_RCC_DeInit+0x184>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a51      	ldr	r2, [pc, #324]	; (8003a4c <HAL_RCC_DeInit+0x184>)
 8003906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800390a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800390c:	f7fe f970 	bl	8001bf0 <HAL_GetTick>
 8003910:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8003912:	4b4e      	ldr	r3, [pc, #312]	; (8003a4c <HAL_RCC_DeInit+0x184>)
 8003914:	2200      	movs	r2, #0
 8003916:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003918:	e00a      	b.n	8003930 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800391a:	f7fe f969 	bl	8001bf0 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	f241 3288 	movw	r2, #5000	; 0x1388
 8003928:	4293      	cmp	r3, r2
 800392a:	d901      	bls.n	8003930 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e089      	b.n	8003a44 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003930:	4b46      	ldr	r3, [pc, #280]	; (8003a4c <HAL_RCC_DeInit+0x184>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f003 030c 	and.w	r3, r3, #12
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1ee      	bne.n	800391a <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800393c:	f7fe f958 	bl	8001bf0 <HAL_GetTick>
 8003940:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8003942:	4b42      	ldr	r3, [pc, #264]	; (8003a4c <HAL_RCC_DeInit+0x184>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a41      	ldr	r2, [pc, #260]	; (8003a4c <HAL_RCC_DeInit+0x184>)
 8003948:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 800394c:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800394e:	e008      	b.n	8003962 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003950:	f7fe f94e 	bl	8001bf0 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b64      	cmp	r3, #100	; 0x64
 800395c:	d901      	bls.n	8003962 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e070      	b.n	8003a44 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003962:	4b3a      	ldr	r3, [pc, #232]	; (8003a4c <HAL_RCC_DeInit+0x184>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1f0      	bne.n	8003950 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800396e:	f7fe f93f 	bl	8001bf0 <HAL_GetTick>
 8003972:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003974:	4b35      	ldr	r3, [pc, #212]	; (8003a4c <HAL_RCC_DeInit+0x184>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a34      	ldr	r2, [pc, #208]	; (8003a4c <HAL_RCC_DeInit+0x184>)
 800397a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800397e:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003980:	e008      	b.n	8003994 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003982:	f7fe f935 	bl	8001bf0 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d901      	bls.n	8003994 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e057      	b.n	8003a44 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003994:	4b2d      	ldr	r3, [pc, #180]	; (8003a4c <HAL_RCC_DeInit+0x184>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1f0      	bne.n	8003982 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80039a0:	f7fe f926 	bl	8001bf0 <HAL_GetTick>
 80039a4:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 80039a6:	4b29      	ldr	r3, [pc, #164]	; (8003a4c <HAL_RCC_DeInit+0x184>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a28      	ldr	r2, [pc, #160]	; (8003a4c <HAL_RCC_DeInit+0x184>)
 80039ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039b0:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039b4:	f7fe f91c 	bl	8001bf0 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e03e      	b.n	8003a44 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80039c6:	4b21      	ldr	r3, [pc, #132]	; (8003a4c <HAL_RCC_DeInit+0x184>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1f0      	bne.n	80039b4 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 80039d2:	4b1e      	ldr	r3, [pc, #120]	; (8003a4c <HAL_RCC_DeInit+0x184>)
 80039d4:	4a1e      	ldr	r2, [pc, #120]	; (8003a50 <HAL_RCC_DeInit+0x188>)
 80039d6:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 80039d8:	4b1c      	ldr	r3, [pc, #112]	; (8003a4c <HAL_RCC_DeInit+0x184>)
 80039da:	4a1e      	ldr	r2, [pc, #120]	; (8003a54 <HAL_RCC_DeInit+0x18c>)
 80039dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 80039e0:	4b1a      	ldr	r3, [pc, #104]	; (8003a4c <HAL_RCC_DeInit+0x184>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	4a19      	ldr	r2, [pc, #100]	; (8003a4c <HAL_RCC_DeInit+0x184>)
 80039e6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80039ea:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 80039ec:	4b17      	ldr	r3, [pc, #92]	; (8003a4c <HAL_RCC_DeInit+0x184>)
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	4a16      	ldr	r2, [pc, #88]	; (8003a4c <HAL_RCC_DeInit+0x184>)
 80039f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039f6:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 80039f8:	4b14      	ldr	r3, [pc, #80]	; (8003a4c <HAL_RCC_DeInit+0x184>)
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	4a13      	ldr	r2, [pc, #76]	; (8003a4c <HAL_RCC_DeInit+0x184>)
 80039fe:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8003a02:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8003a04:	4b11      	ldr	r3, [pc, #68]	; (8003a4c <HAL_RCC_DeInit+0x184>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	4a10      	ldr	r2, [pc, #64]	; (8003a4c <HAL_RCC_DeInit+0x184>)
 8003a0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a0e:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003a10:	4b0e      	ldr	r3, [pc, #56]	; (8003a4c <HAL_RCC_DeInit+0x184>)
 8003a12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a14:	4a0d      	ldr	r2, [pc, #52]	; (8003a4c <HAL_RCC_DeInit+0x184>)
 8003a16:	f023 0301 	bic.w	r3, r3, #1
 8003a1a:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8003a1c:	4b0b      	ldr	r3, [pc, #44]	; (8003a4c <HAL_RCC_DeInit+0x184>)
 8003a1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a20:	4a0a      	ldr	r2, [pc, #40]	; (8003a4c <HAL_RCC_DeInit+0x184>)
 8003a22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a26:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8003a28:	4b0b      	ldr	r3, [pc, #44]	; (8003a58 <HAL_RCC_DeInit+0x190>)
 8003a2a:	4a0c      	ldr	r2, [pc, #48]	; (8003a5c <HAL_RCC_DeInit+0x194>)
 8003a2c:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8003a2e:	4b0c      	ldr	r3, [pc, #48]	; (8003a60 <HAL_RCC_DeInit+0x198>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fe f898 	bl	8001b68 <HAL_InitTick>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e000      	b.n	8003a44 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8003a42:	2300      	movs	r3, #0
  }
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3708      	adds	r7, #8
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40023800 	.word	0x40023800
 8003a50:	04003010 	.word	0x04003010
 8003a54:	20003000 	.word	0x20003000
 8003a58:	20000000 	.word	0x20000000
 8003a5c:	00f42400 	.word	0x00f42400
 8003a60:	20000004 	.word	0x20000004

08003a64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e03f      	b.n	8003af6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d106      	bne.n	8003a90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7fd fca6 	bl	80013dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2224      	movs	r2, #36	; 0x24
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68da      	ldr	r2, [r3, #12]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003aa6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f001 f83f 	bl	8004b2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	691a      	ldr	r2, [r3, #16]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003abc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	695a      	ldr	r2, [r3, #20]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003acc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68da      	ldr	r2, [r3, #12]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003adc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b08a      	sub	sp, #40	; 0x28
 8003b02:	af02      	add	r7, sp, #8
 8003b04:	60f8      	str	r0, [r7, #12]
 8003b06:	60b9      	str	r1, [r7, #8]
 8003b08:	603b      	str	r3, [r7, #0]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b20      	cmp	r3, #32
 8003b1c:	d17c      	bne.n	8003c18 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d002      	beq.n	8003b2a <HAL_UART_Transmit+0x2c>
 8003b24:	88fb      	ldrh	r3, [r7, #6]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e075      	b.n	8003c1a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d101      	bne.n	8003b3c <HAL_UART_Transmit+0x3e>
 8003b38:	2302      	movs	r3, #2
 8003b3a:	e06e      	b.n	8003c1a <HAL_UART_Transmit+0x11c>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2221      	movs	r2, #33	; 0x21
 8003b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b52:	f7fe f84d 	bl	8001bf0 <HAL_GetTick>
 8003b56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	88fa      	ldrh	r2, [r7, #6]
 8003b5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	88fa      	ldrh	r2, [r7, #6]
 8003b62:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b6c:	d108      	bne.n	8003b80 <HAL_UART_Transmit+0x82>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d104      	bne.n	8003b80 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003b76:	2300      	movs	r3, #0
 8003b78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	61bb      	str	r3, [r7, #24]
 8003b7e:	e003      	b.n	8003b88 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b84:	2300      	movs	r3, #0
 8003b86:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003b90:	e02a      	b.n	8003be8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	2180      	movs	r1, #128	; 0x80
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 fcfa 	bl	8004596 <UART_WaitOnFlagUntilTimeout>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e036      	b.n	8003c1a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10b      	bne.n	8003bca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	881b      	ldrh	r3, [r3, #0]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	3302      	adds	r3, #2
 8003bc6:	61bb      	str	r3, [r7, #24]
 8003bc8:	e007      	b.n	8003bda <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	781a      	ldrb	r2, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	3b01      	subs	r3, #1
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1cf      	bne.n	8003b92 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	2140      	movs	r1, #64	; 0x40
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f000 fcca 	bl	8004596 <UART_WaitOnFlagUntilTimeout>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e006      	b.n	8003c1a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c14:	2300      	movs	r3, #0
 8003c16:	e000      	b.n	8003c1a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c18:	2302      	movs	r3, #2
  }
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3720      	adds	r7, #32
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
	...

08003c24 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b08c      	sub	sp, #48	; 0x30
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b20      	cmp	r3, #32
 8003c3c:	d165      	bne.n	8003d0a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d002      	beq.n	8003c4a <HAL_UART_Transmit_DMA+0x26>
 8003c44:	88fb      	ldrh	r3, [r7, #6]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e05e      	b.n	8003d0c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d101      	bne.n	8003c5c <HAL_UART_Transmit_DMA+0x38>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	e057      	b.n	8003d0c <HAL_UART_Transmit_DMA+0xe8>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	88fa      	ldrh	r2, [r7, #6]
 8003c6e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	88fa      	ldrh	r2, [r7, #6]
 8003c74:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2221      	movs	r2, #33	; 0x21
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c88:	4a22      	ldr	r2, [pc, #136]	; (8003d14 <HAL_UART_Transmit_DMA+0xf0>)
 8003c8a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c90:	4a21      	ldr	r2, [pc, #132]	; (8003d18 <HAL_UART_Transmit_DMA+0xf4>)
 8003c92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c98:	4a20      	ldr	r2, [pc, #128]	; (8003d1c <HAL_UART_Transmit_DMA+0xf8>)
 8003c9a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8003ca4:	f107 0308 	add.w	r3, r7, #8
 8003ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb0:	6819      	ldr	r1, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	461a      	mov	r2, r3
 8003cba:	88fb      	ldrh	r3, [r7, #6]
 8003cbc:	f7fe f988 	bl	8001fd0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cc8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	3314      	adds	r3, #20
 8003cd8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	e853 3f00 	ldrex	r3, [r3]
 8003ce0:	617b      	str	r3, [r7, #20]
   return(result);
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ce8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	3314      	adds	r3, #20
 8003cf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cf2:	627a      	str	r2, [r7, #36]	; 0x24
 8003cf4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf6:	6a39      	ldr	r1, [r7, #32]
 8003cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cfa:	e841 2300 	strex	r3, r2, [r1]
 8003cfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1e5      	bne.n	8003cd2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8003d06:	2300      	movs	r3, #0
 8003d08:	e000      	b.n	8003d0c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8003d0a:	2302      	movs	r3, #2
  }
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3730      	adds	r7, #48	; 0x30
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	080042f1 	.word	0x080042f1
 8003d18:	0800438b 	.word	0x0800438b
 8003d1c:	08004503 	.word	0x08004503

08003d20 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b20      	cmp	r3, #32
 8003d38:	d11d      	bne.n	8003d76 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d002      	beq.n	8003d46 <HAL_UART_Receive_DMA+0x26>
 8003d40:	88fb      	ldrh	r3, [r7, #6]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e016      	b.n	8003d78 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d101      	bne.n	8003d58 <HAL_UART_Receive_DMA+0x38>
 8003d54:	2302      	movs	r3, #2
 8003d56:	e00f      	b.n	8003d78 <HAL_UART_Receive_DMA+0x58>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003d66:	88fb      	ldrh	r3, [r7, #6]
 8003d68:	461a      	mov	r2, r3
 8003d6a:	68b9      	ldr	r1, [r7, #8]
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f000 fc81 	bl	8004674 <UART_Start_Receive_DMA>
 8003d72:	4603      	mov	r3, r0
 8003d74:	e000      	b.n	8003d78 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003d76:	2302      	movs	r3, #2
  }
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3710      	adds	r7, #16
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b0ba      	sub	sp, #232	; 0xe8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003da6:	2300      	movs	r3, #0
 8003da8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003dac:	2300      	movs	r3, #0
 8003dae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003dbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10f      	bne.n	8003de6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dca:	f003 0320 	and.w	r3, r3, #32
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d009      	beq.n	8003de6 <HAL_UART_IRQHandler+0x66>
 8003dd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dd6:	f003 0320 	and.w	r3, r3, #32
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 fde9 	bl	80049b6 <UART_Receive_IT>
      return;
 8003de4:	e256      	b.n	8004294 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003de6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 80de 	beq.w	8003fac <HAL_UART_IRQHandler+0x22c>
 8003df0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d106      	bne.n	8003e0a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e00:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f000 80d1 	beq.w	8003fac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00b      	beq.n	8003e2e <HAL_UART_IRQHandler+0xae>
 8003e16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d005      	beq.n	8003e2e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	f043 0201 	orr.w	r2, r3, #1
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e32:	f003 0304 	and.w	r3, r3, #4
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00b      	beq.n	8003e52 <HAL_UART_IRQHandler+0xd2>
 8003e3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d005      	beq.n	8003e52 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	f043 0202 	orr.w	r2, r3, #2
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00b      	beq.n	8003e76 <HAL_UART_IRQHandler+0xf6>
 8003e5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d005      	beq.n	8003e76 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	f043 0204 	orr.w	r2, r3, #4
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e7a:	f003 0308 	and.w	r3, r3, #8
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d011      	beq.n	8003ea6 <HAL_UART_IRQHandler+0x126>
 8003e82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e86:	f003 0320 	and.w	r3, r3, #32
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d105      	bne.n	8003e9a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d005      	beq.n	8003ea6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	f043 0208 	orr.w	r2, r3, #8
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f000 81ed 	beq.w	800428a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eb4:	f003 0320 	and.w	r3, r3, #32
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d008      	beq.n	8003ece <HAL_UART_IRQHandler+0x14e>
 8003ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ec0:	f003 0320 	and.w	r3, r3, #32
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d002      	beq.n	8003ece <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 fd74 	bl	80049b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed8:	2b40      	cmp	r3, #64	; 0x40
 8003eda:	bf0c      	ite	eq
 8003edc:	2301      	moveq	r3, #1
 8003ede:	2300      	movne	r3, #0
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	f003 0308 	and.w	r3, r3, #8
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d103      	bne.n	8003efa <HAL_UART_IRQHandler+0x17a>
 8003ef2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d04f      	beq.n	8003f9a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 fc7c 	bl	80047f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0a:	2b40      	cmp	r3, #64	; 0x40
 8003f0c:	d141      	bne.n	8003f92 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	3314      	adds	r3, #20
 8003f14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f1c:	e853 3f00 	ldrex	r3, [r3]
 8003f20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003f24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	3314      	adds	r3, #20
 8003f36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f3a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f4a:	e841 2300 	strex	r3, r2, [r1]
 8003f4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003f52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1d9      	bne.n	8003f0e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d013      	beq.n	8003f8a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f66:	4a7d      	ldr	r2, [pc, #500]	; (800415c <HAL_UART_IRQHandler+0x3dc>)
 8003f68:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7fe f8f6 	bl	8002160 <HAL_DMA_Abort_IT>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d016      	beq.n	8003fa8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f84:	4610      	mov	r0, r2
 8003f86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f88:	e00e      	b.n	8003fa8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 f99a 	bl	80042c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f90:	e00a      	b.n	8003fa8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f996 	bl	80042c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f98:	e006      	b.n	8003fa8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f992 	bl	80042c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003fa6:	e170      	b.n	800428a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa8:	bf00      	nop
    return;
 8003faa:	e16e      	b.n	800428a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	f040 814a 	bne.w	800424a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fba:	f003 0310 	and.w	r3, r3, #16
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	f000 8143 	beq.w	800424a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fc8:	f003 0310 	and.w	r3, r3, #16
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f000 813c 	beq.w	800424a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60bb      	str	r3, [r7, #8]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	60bb      	str	r3, [r7, #8]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	60bb      	str	r3, [r7, #8]
 8003fe6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff2:	2b40      	cmp	r3, #64	; 0x40
 8003ff4:	f040 80b4 	bne.w	8004160 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004004:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004008:	2b00      	cmp	r3, #0
 800400a:	f000 8140 	beq.w	800428e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004012:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004016:	429a      	cmp	r2, r3
 8004018:	f080 8139 	bcs.w	800428e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004022:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800402e:	f000 8088 	beq.w	8004142 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	330c      	adds	r3, #12
 8004038:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004040:	e853 3f00 	ldrex	r3, [r3]
 8004044:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004048:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800404c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004050:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	330c      	adds	r3, #12
 800405a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800405e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004062:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004066:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800406a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800406e:	e841 2300 	strex	r3, r2, [r1]
 8004072:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004076:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1d9      	bne.n	8004032 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	3314      	adds	r3, #20
 8004084:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004086:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004088:	e853 3f00 	ldrex	r3, [r3]
 800408c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800408e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004090:	f023 0301 	bic.w	r3, r3, #1
 8004094:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	3314      	adds	r3, #20
 800409e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80040a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80040a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80040aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80040ae:	e841 2300 	strex	r3, r2, [r1]
 80040b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80040b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1e1      	bne.n	800407e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	3314      	adds	r3, #20
 80040c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040c4:	e853 3f00 	ldrex	r3, [r3]
 80040c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80040ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	3314      	adds	r3, #20
 80040da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80040de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80040e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80040e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80040e6:	e841 2300 	strex	r3, r2, [r1]
 80040ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80040ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1e3      	bne.n	80040ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2220      	movs	r2, #32
 80040f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	330c      	adds	r3, #12
 8004106:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800410a:	e853 3f00 	ldrex	r3, [r3]
 800410e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004110:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004112:	f023 0310 	bic.w	r3, r3, #16
 8004116:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	330c      	adds	r3, #12
 8004120:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004124:	65ba      	str	r2, [r7, #88]	; 0x58
 8004126:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004128:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800412a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800412c:	e841 2300 	strex	r3, r2, [r1]
 8004130:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1e3      	bne.n	8004100 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413c:	4618      	mov	r0, r3
 800413e:	f7fd ff9f 	bl	8002080 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800414a:	b29b      	uxth	r3, r3
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	b29b      	uxth	r3, r3
 8004150:	4619      	mov	r1, r3
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f8c0 	bl	80042d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004158:	e099      	b.n	800428e <HAL_UART_IRQHandler+0x50e>
 800415a:	bf00      	nop
 800415c:	080048bf 	.word	0x080048bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004168:	b29b      	uxth	r3, r3
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004174:	b29b      	uxth	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	f000 808b 	beq.w	8004292 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800417c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004180:	2b00      	cmp	r3, #0
 8004182:	f000 8086 	beq.w	8004292 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	330c      	adds	r3, #12
 800418c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004190:	e853 3f00 	ldrex	r3, [r3]
 8004194:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004198:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800419c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	330c      	adds	r3, #12
 80041a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80041aa:	647a      	str	r2, [r7, #68]	; 0x44
 80041ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041b2:	e841 2300 	strex	r3, r2, [r1]
 80041b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80041b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1e3      	bne.n	8004186 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	3314      	adds	r3, #20
 80041c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c8:	e853 3f00 	ldrex	r3, [r3]
 80041cc:	623b      	str	r3, [r7, #32]
   return(result);
 80041ce:	6a3b      	ldr	r3, [r7, #32]
 80041d0:	f023 0301 	bic.w	r3, r3, #1
 80041d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	3314      	adds	r3, #20
 80041de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80041e2:	633a      	str	r2, [r7, #48]	; 0x30
 80041e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ea:	e841 2300 	strex	r3, r2, [r1]
 80041ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1e3      	bne.n	80041be <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2220      	movs	r2, #32
 80041fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	330c      	adds	r3, #12
 800420a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	e853 3f00 	ldrex	r3, [r3]
 8004212:	60fb      	str	r3, [r7, #12]
   return(result);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f023 0310 	bic.w	r3, r3, #16
 800421a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	330c      	adds	r3, #12
 8004224:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004228:	61fa      	str	r2, [r7, #28]
 800422a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422c:	69b9      	ldr	r1, [r7, #24]
 800422e:	69fa      	ldr	r2, [r7, #28]
 8004230:	e841 2300 	strex	r3, r2, [r1]
 8004234:	617b      	str	r3, [r7, #20]
   return(result);
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1e3      	bne.n	8004204 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800423c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004240:	4619      	mov	r1, r3
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f848 	bl	80042d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004248:	e023      	b.n	8004292 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800424a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800424e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004252:	2b00      	cmp	r3, #0
 8004254:	d009      	beq.n	800426a <HAL_UART_IRQHandler+0x4ea>
 8004256:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800425a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 fb3f 	bl	80048e6 <UART_Transmit_IT>
    return;
 8004268:	e014      	b.n	8004294 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800426a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800426e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00e      	beq.n	8004294 <HAL_UART_IRQHandler+0x514>
 8004276:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800427a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800427e:	2b00      	cmp	r3, #0
 8004280:	d008      	beq.n	8004294 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 fb7f 	bl	8004986 <UART_EndTransmit_IT>
    return;
 8004288:	e004      	b.n	8004294 <HAL_UART_IRQHandler+0x514>
    return;
 800428a:	bf00      	nop
 800428c:	e002      	b.n	8004294 <HAL_UART_IRQHandler+0x514>
      return;
 800428e:	bf00      	nop
 8004290:	e000      	b.n	8004294 <HAL_UART_IRQHandler+0x514>
      return;
 8004292:	bf00      	nop
  }
}
 8004294:	37e8      	adds	r7, #232	; 0xe8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop

0800429c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	460b      	mov	r3, r1
 80042e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b090      	sub	sp, #64	; 0x40
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004308:	2b00      	cmp	r3, #0
 800430a:	d137      	bne.n	800437c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800430c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800430e:	2200      	movs	r2, #0
 8004310:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	3314      	adds	r3, #20
 8004318:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	e853 3f00 	ldrex	r3, [r3]
 8004320:	623b      	str	r3, [r7, #32]
   return(result);
 8004322:	6a3b      	ldr	r3, [r7, #32]
 8004324:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004328:	63bb      	str	r3, [r7, #56]	; 0x38
 800432a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	3314      	adds	r3, #20
 8004330:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004332:	633a      	str	r2, [r7, #48]	; 0x30
 8004334:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004336:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800433a:	e841 2300 	strex	r3, r2, [r1]
 800433e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1e5      	bne.n	8004312 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	330c      	adds	r3, #12
 800434c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	e853 3f00 	ldrex	r3, [r3]
 8004354:	60fb      	str	r3, [r7, #12]
   return(result);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800435c:	637b      	str	r3, [r7, #52]	; 0x34
 800435e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	330c      	adds	r3, #12
 8004364:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004366:	61fa      	str	r2, [r7, #28]
 8004368:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436a:	69b9      	ldr	r1, [r7, #24]
 800436c:	69fa      	ldr	r2, [r7, #28]
 800436e:	e841 2300 	strex	r3, r2, [r1]
 8004372:	617b      	str	r3, [r7, #20]
   return(result);
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1e5      	bne.n	8004346 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800437a:	e002      	b.n	8004382 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800437c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800437e:	f001 fe4d 	bl	800601c <HAL_UART_TxCpltCallback>
}
 8004382:	bf00      	nop
 8004384:	3740      	adds	r7, #64	; 0x40
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b084      	sub	sp, #16
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004396:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f7ff ff7f 	bl	800429c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800439e:	bf00      	nop
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b09c      	sub	sp, #112	; 0x70
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d172      	bne.n	80044a8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80043c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043c4:	2200      	movs	r2, #0
 80043c6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	330c      	adds	r3, #12
 80043ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043d2:	e853 3f00 	ldrex	r3, [r3]
 80043d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80043d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043de:	66bb      	str	r3, [r7, #104]	; 0x68
 80043e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	330c      	adds	r3, #12
 80043e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80043e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80043ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80043ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043f0:	e841 2300 	strex	r3, r2, [r1]
 80043f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80043f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1e5      	bne.n	80043c8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	3314      	adds	r3, #20
 8004402:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004406:	e853 3f00 	ldrex	r3, [r3]
 800440a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800440c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800440e:	f023 0301 	bic.w	r3, r3, #1
 8004412:	667b      	str	r3, [r7, #100]	; 0x64
 8004414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	3314      	adds	r3, #20
 800441a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800441c:	647a      	str	r2, [r7, #68]	; 0x44
 800441e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004420:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004422:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004424:	e841 2300 	strex	r3, r2, [r1]
 8004428:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800442a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1e5      	bne.n	80043fc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	3314      	adds	r3, #20
 8004436:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443a:	e853 3f00 	ldrex	r3, [r3]
 800443e:	623b      	str	r3, [r7, #32]
   return(result);
 8004440:	6a3b      	ldr	r3, [r7, #32]
 8004442:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004446:	663b      	str	r3, [r7, #96]	; 0x60
 8004448:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	3314      	adds	r3, #20
 800444e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004450:	633a      	str	r2, [r7, #48]	; 0x30
 8004452:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004454:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004456:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004458:	e841 2300 	strex	r3, r2, [r1]
 800445c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800445e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1e5      	bne.n	8004430 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004464:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004466:	2220      	movs	r2, #32
 8004468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800446c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800446e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004470:	2b01      	cmp	r3, #1
 8004472:	d119      	bne.n	80044a8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	330c      	adds	r3, #12
 800447a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	e853 3f00 	ldrex	r3, [r3]
 8004482:	60fb      	str	r3, [r7, #12]
   return(result);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f023 0310 	bic.w	r3, r3, #16
 800448a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800448c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	330c      	adds	r3, #12
 8004492:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004494:	61fa      	str	r2, [r7, #28]
 8004496:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004498:	69b9      	ldr	r1, [r7, #24]
 800449a:	69fa      	ldr	r2, [r7, #28]
 800449c:	e841 2300 	strex	r3, r2, [r1]
 80044a0:	617b      	str	r3, [r7, #20]
   return(result);
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1e5      	bne.n	8004474 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d106      	bne.n	80044be <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80044b4:	4619      	mov	r1, r3
 80044b6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80044b8:	f7ff ff0e 	bl	80042d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80044bc:	e002      	b.n	80044c4 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80044be:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80044c0:	f001 fdc4 	bl	800604c <HAL_UART_RxCpltCallback>
}
 80044c4:	bf00      	nop
 80044c6:	3770      	adds	r7, #112	; 0x70
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d108      	bne.n	80044f4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80044e6:	085b      	lsrs	r3, r3, #1
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	4619      	mov	r1, r3
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f7ff fef3 	bl	80042d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80044f2:	e002      	b.n	80044fa <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f7ff fedb 	bl	80042b0 <HAL_UART_RxHalfCpltCallback>
}
 80044fa:	bf00      	nop
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b084      	sub	sp, #16
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800450a:	2300      	movs	r3, #0
 800450c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004512:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800451e:	2b80      	cmp	r3, #128	; 0x80
 8004520:	bf0c      	ite	eq
 8004522:	2301      	moveq	r3, #1
 8004524:	2300      	movne	r3, #0
 8004526:	b2db      	uxtb	r3, r3
 8004528:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b21      	cmp	r3, #33	; 0x21
 8004534:	d108      	bne.n	8004548 <UART_DMAError+0x46>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d005      	beq.n	8004548 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	2200      	movs	r2, #0
 8004540:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004542:	68b8      	ldr	r0, [r7, #8]
 8004544:	f000 f930 	bl	80047a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004552:	2b40      	cmp	r3, #64	; 0x40
 8004554:	bf0c      	ite	eq
 8004556:	2301      	moveq	r3, #1
 8004558:	2300      	movne	r3, #0
 800455a:	b2db      	uxtb	r3, r3
 800455c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b22      	cmp	r3, #34	; 0x22
 8004568:	d108      	bne.n	800457c <UART_DMAError+0x7a>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d005      	beq.n	800457c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	2200      	movs	r2, #0
 8004574:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004576:	68b8      	ldr	r0, [r7, #8]
 8004578:	f000 f93e 	bl	80047f8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004580:	f043 0210 	orr.w	r2, r3, #16
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004588:	68b8      	ldr	r0, [r7, #8]
 800458a:	f7ff fe9b 	bl	80042c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800458e:	bf00      	nop
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004596:	b580      	push	{r7, lr}
 8004598:	b090      	sub	sp, #64	; 0x40
 800459a:	af00      	add	r7, sp, #0
 800459c:	60f8      	str	r0, [r7, #12]
 800459e:	60b9      	str	r1, [r7, #8]
 80045a0:	603b      	str	r3, [r7, #0]
 80045a2:	4613      	mov	r3, r2
 80045a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045a6:	e050      	b.n	800464a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ae:	d04c      	beq.n	800464a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80045b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d007      	beq.n	80045c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80045b6:	f7fd fb1b 	bl	8001bf0 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d241      	bcs.n	800464a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	330c      	adds	r3, #12
 80045cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d0:	e853 3f00 	ldrex	r3, [r3]
 80045d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	330c      	adds	r3, #12
 80045e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045e6:	637a      	str	r2, [r7, #52]	; 0x34
 80045e8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045ee:	e841 2300 	strex	r3, r2, [r1]
 80045f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80045f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1e5      	bne.n	80045c6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	3314      	adds	r3, #20
 8004600:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	e853 3f00 	ldrex	r3, [r3]
 8004608:	613b      	str	r3, [r7, #16]
   return(result);
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	f023 0301 	bic.w	r3, r3, #1
 8004610:	63bb      	str	r3, [r7, #56]	; 0x38
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	3314      	adds	r3, #20
 8004618:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800461a:	623a      	str	r2, [r7, #32]
 800461c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461e:	69f9      	ldr	r1, [r7, #28]
 8004620:	6a3a      	ldr	r2, [r7, #32]
 8004622:	e841 2300 	strex	r3, r2, [r1]
 8004626:	61bb      	str	r3, [r7, #24]
   return(result);
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1e5      	bne.n	80045fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2220      	movs	r2, #32
 8004632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2220      	movs	r2, #32
 800463a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e00f      	b.n	800466a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	4013      	ands	r3, r2
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	429a      	cmp	r2, r3
 8004658:	bf0c      	ite	eq
 800465a:	2301      	moveq	r3, #1
 800465c:	2300      	movne	r3, #0
 800465e:	b2db      	uxtb	r3, r3
 8004660:	461a      	mov	r2, r3
 8004662:	79fb      	ldrb	r3, [r7, #7]
 8004664:	429a      	cmp	r2, r3
 8004666:	d09f      	beq.n	80045a8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3740      	adds	r7, #64	; 0x40
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
	...

08004674 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b098      	sub	sp, #96	; 0x60
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	4613      	mov	r3, r2
 8004680:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004682:	68ba      	ldr	r2, [r7, #8]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	88fa      	ldrh	r2, [r7, #6]
 800468c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2222      	movs	r2, #34	; 0x22
 8004698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a0:	4a3e      	ldr	r2, [pc, #248]	; (800479c <UART_Start_Receive_DMA+0x128>)
 80046a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a8:	4a3d      	ldr	r2, [pc, #244]	; (80047a0 <UART_Start_Receive_DMA+0x12c>)
 80046aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b0:	4a3c      	ldr	r2, [pc, #240]	; (80047a4 <UART_Start_Receive_DMA+0x130>)
 80046b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b8:	2200      	movs	r2, #0
 80046ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80046bc:	f107 0308 	add.w	r3, r7, #8
 80046c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	3304      	adds	r3, #4
 80046cc:	4619      	mov	r1, r3
 80046ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	88fb      	ldrh	r3, [r7, #6]
 80046d4:	f7fd fc7c 	bl	8001fd0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80046d8:	2300      	movs	r3, #0
 80046da:	613b      	str	r3, [r7, #16]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	613b      	str	r3, [r7, #16]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	613b      	str	r3, [r7, #16]
 80046ec:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	330c      	adds	r3, #12
 80046fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004700:	e853 3f00 	ldrex	r3, [r3]
 8004704:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800470c:	65bb      	str	r3, [r7, #88]	; 0x58
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	330c      	adds	r3, #12
 8004714:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004716:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004718:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800471c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800471e:	e841 2300 	strex	r3, r2, [r1]
 8004722:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1e5      	bne.n	80046f6 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	3314      	adds	r3, #20
 8004730:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004734:	e853 3f00 	ldrex	r3, [r3]
 8004738:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800473a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473c:	f043 0301 	orr.w	r3, r3, #1
 8004740:	657b      	str	r3, [r7, #84]	; 0x54
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	3314      	adds	r3, #20
 8004748:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800474a:	63ba      	str	r2, [r7, #56]	; 0x38
 800474c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004750:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004752:	e841 2300 	strex	r3, r2, [r1]
 8004756:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1e5      	bne.n	800472a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	3314      	adds	r3, #20
 8004764:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	e853 3f00 	ldrex	r3, [r3]
 800476c:	617b      	str	r3, [r7, #20]
   return(result);
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004774:	653b      	str	r3, [r7, #80]	; 0x50
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	3314      	adds	r3, #20
 800477c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800477e:	627a      	str	r2, [r7, #36]	; 0x24
 8004780:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004782:	6a39      	ldr	r1, [r7, #32]
 8004784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004786:	e841 2300 	strex	r3, r2, [r1]
 800478a:	61fb      	str	r3, [r7, #28]
   return(result);
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1e5      	bne.n	800475e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3760      	adds	r7, #96	; 0x60
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	080043a7 	.word	0x080043a7
 80047a0:	080044cd 	.word	0x080044cd
 80047a4:	08004503 	.word	0x08004503

080047a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b089      	sub	sp, #36	; 0x24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	330c      	adds	r3, #12
 80047b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	e853 3f00 	ldrex	r3, [r3]
 80047be:	60bb      	str	r3, [r7, #8]
   return(result);
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80047c6:	61fb      	str	r3, [r7, #28]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	330c      	adds	r3, #12
 80047ce:	69fa      	ldr	r2, [r7, #28]
 80047d0:	61ba      	str	r2, [r7, #24]
 80047d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d4:	6979      	ldr	r1, [r7, #20]
 80047d6:	69ba      	ldr	r2, [r7, #24]
 80047d8:	e841 2300 	strex	r3, r2, [r1]
 80047dc:	613b      	str	r3, [r7, #16]
   return(result);
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1e5      	bne.n	80047b0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2220      	movs	r2, #32
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80047ec:	bf00      	nop
 80047ee:	3724      	adds	r7, #36	; 0x24
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b095      	sub	sp, #84	; 0x54
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	330c      	adds	r3, #12
 8004806:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800480a:	e853 3f00 	ldrex	r3, [r3]
 800480e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004812:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004816:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	330c      	adds	r3, #12
 800481e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004820:	643a      	str	r2, [r7, #64]	; 0x40
 8004822:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004824:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004826:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004828:	e841 2300 	strex	r3, r2, [r1]
 800482c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800482e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1e5      	bne.n	8004800 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	3314      	adds	r3, #20
 800483a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	e853 3f00 	ldrex	r3, [r3]
 8004842:	61fb      	str	r3, [r7, #28]
   return(result);
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	f023 0301 	bic.w	r3, r3, #1
 800484a:	64bb      	str	r3, [r7, #72]	; 0x48
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	3314      	adds	r3, #20
 8004852:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004854:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004856:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004858:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800485a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800485c:	e841 2300 	strex	r3, r2, [r1]
 8004860:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1e5      	bne.n	8004834 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486c:	2b01      	cmp	r3, #1
 800486e:	d119      	bne.n	80048a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	330c      	adds	r3, #12
 8004876:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	e853 3f00 	ldrex	r3, [r3]
 800487e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	f023 0310 	bic.w	r3, r3, #16
 8004886:	647b      	str	r3, [r7, #68]	; 0x44
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	330c      	adds	r3, #12
 800488e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004890:	61ba      	str	r2, [r7, #24]
 8004892:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004894:	6979      	ldr	r1, [r7, #20]
 8004896:	69ba      	ldr	r2, [r7, #24]
 8004898:	e841 2300 	strex	r3, r2, [r1]
 800489c:	613b      	str	r3, [r7, #16]
   return(result);
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1e5      	bne.n	8004870 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2220      	movs	r2, #32
 80048a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80048b2:	bf00      	nop
 80048b4:	3754      	adds	r7, #84	; 0x54
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b084      	sub	sp, #16
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f7ff fcf3 	bl	80042c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048de:	bf00      	nop
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b085      	sub	sp, #20
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b21      	cmp	r3, #33	; 0x21
 80048f8:	d13e      	bne.n	8004978 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004902:	d114      	bne.n	800492e <UART_Transmit_IT+0x48>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d110      	bne.n	800492e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	881b      	ldrh	r3, [r3, #0]
 8004916:	461a      	mov	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004920:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	1c9a      	adds	r2, r3, #2
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	621a      	str	r2, [r3, #32]
 800492c:	e008      	b.n	8004940 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	1c59      	adds	r1, r3, #1
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	6211      	str	r1, [r2, #32]
 8004938:	781a      	ldrb	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004944:	b29b      	uxth	r3, r3
 8004946:	3b01      	subs	r3, #1
 8004948:	b29b      	uxth	r3, r3
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	4619      	mov	r1, r3
 800494e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10f      	bne.n	8004974 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68da      	ldr	r2, [r3, #12]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004962:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68da      	ldr	r2, [r3, #12]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004972:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004974:	2300      	movs	r3, #0
 8004976:	e000      	b.n	800497a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004978:	2302      	movs	r3, #2
  }
}
 800497a:	4618      	mov	r0, r3
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004986:	b580      	push	{r7, lr}
 8004988:	b082      	sub	sp, #8
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68da      	ldr	r2, [r3, #12]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800499c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2220      	movs	r2, #32
 80049a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f001 fb38 	bl	800601c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b08c      	sub	sp, #48	; 0x30
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b22      	cmp	r3, #34	; 0x22
 80049c8:	f040 80ab 	bne.w	8004b22 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049d4:	d117      	bne.n	8004a06 <UART_Receive_IT+0x50>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d113      	bne.n	8004a06 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80049de:	2300      	movs	r3, #0
 80049e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fe:	1c9a      	adds	r2, r3, #2
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	629a      	str	r2, [r3, #40]	; 0x28
 8004a04:	e026      	b.n	8004a54 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a18:	d007      	beq.n	8004a2a <UART_Receive_IT+0x74>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10a      	bne.n	8004a38 <UART_Receive_IT+0x82>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d106      	bne.n	8004a38 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	b2da      	uxtb	r2, r3
 8004a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a34:	701a      	strb	r2, [r3, #0]
 8004a36:	e008      	b.n	8004a4a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a44:	b2da      	uxtb	r2, r3
 8004a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a48:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4e:	1c5a      	adds	r2, r3, #1
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	4619      	mov	r1, r3
 8004a62:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d15a      	bne.n	8004b1e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68da      	ldr	r2, [r3, #12]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 0220 	bic.w	r2, r2, #32
 8004a76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68da      	ldr	r2, [r3, #12]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	695a      	ldr	r2, [r3, #20]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 0201 	bic.w	r2, r2, #1
 8004a96:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d135      	bne.n	8004b14 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	330c      	adds	r3, #12
 8004ab4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	e853 3f00 	ldrex	r3, [r3]
 8004abc:	613b      	str	r3, [r7, #16]
   return(result);
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	f023 0310 	bic.w	r3, r3, #16
 8004ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	330c      	adds	r3, #12
 8004acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ace:	623a      	str	r2, [r7, #32]
 8004ad0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad2:	69f9      	ldr	r1, [r7, #28]
 8004ad4:	6a3a      	ldr	r2, [r7, #32]
 8004ad6:	e841 2300 	strex	r3, r2, [r1]
 8004ada:	61bb      	str	r3, [r7, #24]
   return(result);
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1e5      	bne.n	8004aae <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0310 	and.w	r3, r3, #16
 8004aec:	2b10      	cmp	r3, #16
 8004aee:	d10a      	bne.n	8004b06 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004af0:	2300      	movs	r3, #0
 8004af2:	60fb      	str	r3, [r7, #12]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	60fb      	str	r3, [r7, #12]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	60fb      	str	r3, [r7, #12]
 8004b04:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f7ff fbe3 	bl	80042d8 <HAL_UARTEx_RxEventCallback>
 8004b12:	e002      	b.n	8004b1a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f001 fa99 	bl	800604c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	e002      	b.n	8004b24 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	e000      	b.n	8004b24 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004b22:	2302      	movs	r3, #2
  }
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3730      	adds	r7, #48	; 0x30
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b30:	b09f      	sub	sp, #124	; 0x7c
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b42:	68d9      	ldr	r1, [r3, #12]
 8004b44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	ea40 0301 	orr.w	r3, r0, r1
 8004b4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b50:	689a      	ldr	r2, [r3, #8]
 8004b52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	431a      	orrs	r2, r3
 8004b58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	431a      	orrs	r2, r3
 8004b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b70:	f021 010c 	bic.w	r1, r1, #12
 8004b74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b7a:	430b      	orrs	r3, r1
 8004b7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b8a:	6999      	ldr	r1, [r3, #24]
 8004b8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	ea40 0301 	orr.w	r3, r0, r1
 8004b94:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	4bc5      	ldr	r3, [pc, #788]	; (8004eb0 <UART_SetConfig+0x384>)
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d004      	beq.n	8004baa <UART_SetConfig+0x7e>
 8004ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	4bc3      	ldr	r3, [pc, #780]	; (8004eb4 <UART_SetConfig+0x388>)
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d103      	bne.n	8004bb2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004baa:	f7fe fe79 	bl	80038a0 <HAL_RCC_GetPCLK2Freq>
 8004bae:	6778      	str	r0, [r7, #116]	; 0x74
 8004bb0:	e002      	b.n	8004bb8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bb2:	f7fe fe61 	bl	8003878 <HAL_RCC_GetPCLK1Freq>
 8004bb6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bc0:	f040 80b6 	bne.w	8004d30 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004bc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bc6:	461c      	mov	r4, r3
 8004bc8:	f04f 0500 	mov.w	r5, #0
 8004bcc:	4622      	mov	r2, r4
 8004bce:	462b      	mov	r3, r5
 8004bd0:	1891      	adds	r1, r2, r2
 8004bd2:	6439      	str	r1, [r7, #64]	; 0x40
 8004bd4:	415b      	adcs	r3, r3
 8004bd6:	647b      	str	r3, [r7, #68]	; 0x44
 8004bd8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004bdc:	1912      	adds	r2, r2, r4
 8004bde:	eb45 0303 	adc.w	r3, r5, r3
 8004be2:	f04f 0000 	mov.w	r0, #0
 8004be6:	f04f 0100 	mov.w	r1, #0
 8004bea:	00d9      	lsls	r1, r3, #3
 8004bec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004bf0:	00d0      	lsls	r0, r2, #3
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	1911      	adds	r1, r2, r4
 8004bf8:	6639      	str	r1, [r7, #96]	; 0x60
 8004bfa:	416b      	adcs	r3, r5
 8004bfc:	667b      	str	r3, [r7, #100]	; 0x64
 8004bfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	461a      	mov	r2, r3
 8004c04:	f04f 0300 	mov.w	r3, #0
 8004c08:	1891      	adds	r1, r2, r2
 8004c0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c0c:	415b      	adcs	r3, r3
 8004c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c14:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004c18:	f7fc f836 	bl	8000c88 <__aeabi_uldivmod>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	460b      	mov	r3, r1
 8004c20:	4ba5      	ldr	r3, [pc, #660]	; (8004eb8 <UART_SetConfig+0x38c>)
 8004c22:	fba3 2302 	umull	r2, r3, r3, r2
 8004c26:	095b      	lsrs	r3, r3, #5
 8004c28:	011e      	lsls	r6, r3, #4
 8004c2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c2c:	461c      	mov	r4, r3
 8004c2e:	f04f 0500 	mov.w	r5, #0
 8004c32:	4622      	mov	r2, r4
 8004c34:	462b      	mov	r3, r5
 8004c36:	1891      	adds	r1, r2, r2
 8004c38:	6339      	str	r1, [r7, #48]	; 0x30
 8004c3a:	415b      	adcs	r3, r3
 8004c3c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c3e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004c42:	1912      	adds	r2, r2, r4
 8004c44:	eb45 0303 	adc.w	r3, r5, r3
 8004c48:	f04f 0000 	mov.w	r0, #0
 8004c4c:	f04f 0100 	mov.w	r1, #0
 8004c50:	00d9      	lsls	r1, r3, #3
 8004c52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c56:	00d0      	lsls	r0, r2, #3
 8004c58:	4602      	mov	r2, r0
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	1911      	adds	r1, r2, r4
 8004c5e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c60:	416b      	adcs	r3, r5
 8004c62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	461a      	mov	r2, r3
 8004c6a:	f04f 0300 	mov.w	r3, #0
 8004c6e:	1891      	adds	r1, r2, r2
 8004c70:	62b9      	str	r1, [r7, #40]	; 0x28
 8004c72:	415b      	adcs	r3, r3
 8004c74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c7a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004c7e:	f7fc f803 	bl	8000c88 <__aeabi_uldivmod>
 8004c82:	4602      	mov	r2, r0
 8004c84:	460b      	mov	r3, r1
 8004c86:	4b8c      	ldr	r3, [pc, #560]	; (8004eb8 <UART_SetConfig+0x38c>)
 8004c88:	fba3 1302 	umull	r1, r3, r3, r2
 8004c8c:	095b      	lsrs	r3, r3, #5
 8004c8e:	2164      	movs	r1, #100	; 0x64
 8004c90:	fb01 f303 	mul.w	r3, r1, r3
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	00db      	lsls	r3, r3, #3
 8004c98:	3332      	adds	r3, #50	; 0x32
 8004c9a:	4a87      	ldr	r2, [pc, #540]	; (8004eb8 <UART_SetConfig+0x38c>)
 8004c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca0:	095b      	lsrs	r3, r3, #5
 8004ca2:	005b      	lsls	r3, r3, #1
 8004ca4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ca8:	441e      	add	r6, r3
 8004caa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cac:	4618      	mov	r0, r3
 8004cae:	f04f 0100 	mov.w	r1, #0
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	1894      	adds	r4, r2, r2
 8004cb8:	623c      	str	r4, [r7, #32]
 8004cba:	415b      	adcs	r3, r3
 8004cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8004cbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cc2:	1812      	adds	r2, r2, r0
 8004cc4:	eb41 0303 	adc.w	r3, r1, r3
 8004cc8:	f04f 0400 	mov.w	r4, #0
 8004ccc:	f04f 0500 	mov.w	r5, #0
 8004cd0:	00dd      	lsls	r5, r3, #3
 8004cd2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004cd6:	00d4      	lsls	r4, r2, #3
 8004cd8:	4622      	mov	r2, r4
 8004cda:	462b      	mov	r3, r5
 8004cdc:	1814      	adds	r4, r2, r0
 8004cde:	653c      	str	r4, [r7, #80]	; 0x50
 8004ce0:	414b      	adcs	r3, r1
 8004ce2:	657b      	str	r3, [r7, #84]	; 0x54
 8004ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	461a      	mov	r2, r3
 8004cea:	f04f 0300 	mov.w	r3, #0
 8004cee:	1891      	adds	r1, r2, r2
 8004cf0:	61b9      	str	r1, [r7, #24]
 8004cf2:	415b      	adcs	r3, r3
 8004cf4:	61fb      	str	r3, [r7, #28]
 8004cf6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cfa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004cfe:	f7fb ffc3 	bl	8000c88 <__aeabi_uldivmod>
 8004d02:	4602      	mov	r2, r0
 8004d04:	460b      	mov	r3, r1
 8004d06:	4b6c      	ldr	r3, [pc, #432]	; (8004eb8 <UART_SetConfig+0x38c>)
 8004d08:	fba3 1302 	umull	r1, r3, r3, r2
 8004d0c:	095b      	lsrs	r3, r3, #5
 8004d0e:	2164      	movs	r1, #100	; 0x64
 8004d10:	fb01 f303 	mul.w	r3, r1, r3
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	3332      	adds	r3, #50	; 0x32
 8004d1a:	4a67      	ldr	r2, [pc, #412]	; (8004eb8 <UART_SetConfig+0x38c>)
 8004d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d20:	095b      	lsrs	r3, r3, #5
 8004d22:	f003 0207 	and.w	r2, r3, #7
 8004d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4432      	add	r2, r6
 8004d2c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d2e:	e0b9      	b.n	8004ea4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d32:	461c      	mov	r4, r3
 8004d34:	f04f 0500 	mov.w	r5, #0
 8004d38:	4622      	mov	r2, r4
 8004d3a:	462b      	mov	r3, r5
 8004d3c:	1891      	adds	r1, r2, r2
 8004d3e:	6139      	str	r1, [r7, #16]
 8004d40:	415b      	adcs	r3, r3
 8004d42:	617b      	str	r3, [r7, #20]
 8004d44:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004d48:	1912      	adds	r2, r2, r4
 8004d4a:	eb45 0303 	adc.w	r3, r5, r3
 8004d4e:	f04f 0000 	mov.w	r0, #0
 8004d52:	f04f 0100 	mov.w	r1, #0
 8004d56:	00d9      	lsls	r1, r3, #3
 8004d58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d5c:	00d0      	lsls	r0, r2, #3
 8004d5e:	4602      	mov	r2, r0
 8004d60:	460b      	mov	r3, r1
 8004d62:	eb12 0804 	adds.w	r8, r2, r4
 8004d66:	eb43 0905 	adc.w	r9, r3, r5
 8004d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f04f 0100 	mov.w	r1, #0
 8004d74:	f04f 0200 	mov.w	r2, #0
 8004d78:	f04f 0300 	mov.w	r3, #0
 8004d7c:	008b      	lsls	r3, r1, #2
 8004d7e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004d82:	0082      	lsls	r2, r0, #2
 8004d84:	4640      	mov	r0, r8
 8004d86:	4649      	mov	r1, r9
 8004d88:	f7fb ff7e 	bl	8000c88 <__aeabi_uldivmod>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	460b      	mov	r3, r1
 8004d90:	4b49      	ldr	r3, [pc, #292]	; (8004eb8 <UART_SetConfig+0x38c>)
 8004d92:	fba3 2302 	umull	r2, r3, r3, r2
 8004d96:	095b      	lsrs	r3, r3, #5
 8004d98:	011e      	lsls	r6, r3, #4
 8004d9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f04f 0100 	mov.w	r1, #0
 8004da2:	4602      	mov	r2, r0
 8004da4:	460b      	mov	r3, r1
 8004da6:	1894      	adds	r4, r2, r2
 8004da8:	60bc      	str	r4, [r7, #8]
 8004daa:	415b      	adcs	r3, r3
 8004dac:	60fb      	str	r3, [r7, #12]
 8004dae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004db2:	1812      	adds	r2, r2, r0
 8004db4:	eb41 0303 	adc.w	r3, r1, r3
 8004db8:	f04f 0400 	mov.w	r4, #0
 8004dbc:	f04f 0500 	mov.w	r5, #0
 8004dc0:	00dd      	lsls	r5, r3, #3
 8004dc2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004dc6:	00d4      	lsls	r4, r2, #3
 8004dc8:	4622      	mov	r2, r4
 8004dca:	462b      	mov	r3, r5
 8004dcc:	1814      	adds	r4, r2, r0
 8004dce:	64bc      	str	r4, [r7, #72]	; 0x48
 8004dd0:	414b      	adcs	r3, r1
 8004dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f04f 0100 	mov.w	r1, #0
 8004dde:	f04f 0200 	mov.w	r2, #0
 8004de2:	f04f 0300 	mov.w	r3, #0
 8004de6:	008b      	lsls	r3, r1, #2
 8004de8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004dec:	0082      	lsls	r2, r0, #2
 8004dee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004df2:	f7fb ff49 	bl	8000c88 <__aeabi_uldivmod>
 8004df6:	4602      	mov	r2, r0
 8004df8:	460b      	mov	r3, r1
 8004dfa:	4b2f      	ldr	r3, [pc, #188]	; (8004eb8 <UART_SetConfig+0x38c>)
 8004dfc:	fba3 1302 	umull	r1, r3, r3, r2
 8004e00:	095b      	lsrs	r3, r3, #5
 8004e02:	2164      	movs	r1, #100	; 0x64
 8004e04:	fb01 f303 	mul.w	r3, r1, r3
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	011b      	lsls	r3, r3, #4
 8004e0c:	3332      	adds	r3, #50	; 0x32
 8004e0e:	4a2a      	ldr	r2, [pc, #168]	; (8004eb8 <UART_SetConfig+0x38c>)
 8004e10:	fba2 2303 	umull	r2, r3, r2, r3
 8004e14:	095b      	lsrs	r3, r3, #5
 8004e16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e1a:	441e      	add	r6, r3
 8004e1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f04f 0100 	mov.w	r1, #0
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	1894      	adds	r4, r2, r2
 8004e2a:	603c      	str	r4, [r7, #0]
 8004e2c:	415b      	adcs	r3, r3
 8004e2e:	607b      	str	r3, [r7, #4]
 8004e30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e34:	1812      	adds	r2, r2, r0
 8004e36:	eb41 0303 	adc.w	r3, r1, r3
 8004e3a:	f04f 0400 	mov.w	r4, #0
 8004e3e:	f04f 0500 	mov.w	r5, #0
 8004e42:	00dd      	lsls	r5, r3, #3
 8004e44:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e48:	00d4      	lsls	r4, r2, #3
 8004e4a:	4622      	mov	r2, r4
 8004e4c:	462b      	mov	r3, r5
 8004e4e:	eb12 0a00 	adds.w	sl, r2, r0
 8004e52:	eb43 0b01 	adc.w	fp, r3, r1
 8004e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f04f 0100 	mov.w	r1, #0
 8004e60:	f04f 0200 	mov.w	r2, #0
 8004e64:	f04f 0300 	mov.w	r3, #0
 8004e68:	008b      	lsls	r3, r1, #2
 8004e6a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004e6e:	0082      	lsls	r2, r0, #2
 8004e70:	4650      	mov	r0, sl
 8004e72:	4659      	mov	r1, fp
 8004e74:	f7fb ff08 	bl	8000c88 <__aeabi_uldivmod>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	4b0e      	ldr	r3, [pc, #56]	; (8004eb8 <UART_SetConfig+0x38c>)
 8004e7e:	fba3 1302 	umull	r1, r3, r3, r2
 8004e82:	095b      	lsrs	r3, r3, #5
 8004e84:	2164      	movs	r1, #100	; 0x64
 8004e86:	fb01 f303 	mul.w	r3, r1, r3
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	011b      	lsls	r3, r3, #4
 8004e8e:	3332      	adds	r3, #50	; 0x32
 8004e90:	4a09      	ldr	r2, [pc, #36]	; (8004eb8 <UART_SetConfig+0x38c>)
 8004e92:	fba2 2303 	umull	r2, r3, r2, r3
 8004e96:	095b      	lsrs	r3, r3, #5
 8004e98:	f003 020f 	and.w	r2, r3, #15
 8004e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4432      	add	r2, r6
 8004ea2:	609a      	str	r2, [r3, #8]
}
 8004ea4:	bf00      	nop
 8004ea6:	377c      	adds	r7, #124	; 0x7c
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eae:	bf00      	nop
 8004eb0:	40011000 	.word	0x40011000
 8004eb4:	40011400 	.word	0x40011400
 8004eb8:	51eb851f 	.word	0x51eb851f

08004ebc <ringBufferInit>:
#define __RING_BUFFER_CONFIGURATION
/** @brief  ringBufferInit
    @return none
*/
void ringBufferInit(ringBuffer_t *rBuff)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
	rBuff->head = 0;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	801a      	strh	r2, [r3, #0]
	rBuff->tail = 0;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	805a      	strh	r2, [r3, #2]
	rBuff->len = 0;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	809a      	strh	r2, [r3, #4]
}
 8004ed6:	bf00      	nop
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
	...

08004ee4 <ringBufferWrite>:
#define __RING_BUFFER_FUNCTION
/** @brief  ringBufferWrite
    @return ringBufferState_t
*/
ringBufferState_t ringBufferWrite(ringBuffer_t *rBuff, uint8_t wData)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	460b      	mov	r3, r1
 8004eee:	70fb      	strb	r3, [r7, #3]
	if(rBuff->len >= RING_BUFFER_LEN)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	889b      	ldrh	r3, [r3, #4]
 8004ef4:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8004ef8:	d301      	bcc.n	8004efe <ringBufferWrite+0x1a>
	{
		return RING_BUFFER_ERROR;
 8004efa:	2300      	movs	r3, #0
 8004efc:	e01f      	b.n	8004f3e <ringBufferWrite+0x5a>
	}

	rBuff->buffer[rBuff->tail] = wData;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	885b      	ldrh	r3, [r3, #2]
 8004f02:	461a      	mov	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4413      	add	r3, r2
 8004f08:	78fa      	ldrb	r2, [r7, #3]
 8004f0a:	719a      	strb	r2, [r3, #6]
	rBuff->tail = (rBuff->tail + 1) % RING_BUFFER_LEN;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	885b      	ldrh	r3, [r3, #2]
 8004f10:	3301      	adds	r3, #1
 8004f12:	4a0e      	ldr	r2, [pc, #56]	; (8004f4c <ringBufferWrite+0x68>)
 8004f14:	fb82 1203 	smull	r1, r2, r2, r3
 8004f18:	441a      	add	r2, r3
 8004f1a:	1211      	asrs	r1, r2, #8
 8004f1c:	17da      	asrs	r2, r3, #31
 8004f1e:	1a8a      	subs	r2, r1, r2
 8004f20:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8004f24:	fb01 f202 	mul.w	r2, r1, r2
 8004f28:	1a9a      	subs	r2, r3, r2
 8004f2a:	b292      	uxth	r2, r2
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	805a      	strh	r2, [r3, #2]
	rBuff->len++;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	889b      	ldrh	r3, [r3, #4]
 8004f34:	3301      	adds	r3, #1
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	809a      	strh	r2, [r3, #4]

	return RING_BUFFER_OK;
 8004f3c:	2301      	movs	r3, #1
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	f2b9d649 	.word	0xf2b9d649

08004f50 <ringBufferRead>:

/** @brief  ringBufferRead
    @return ringBufferState_t
*/
ringBufferState_t ringBufferRead(ringBuffer_t *rBuff, uint8_t *rData)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
	if(rBuff->len == 0)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	889b      	ldrh	r3, [r3, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <ringBufferRead+0x16>
	{
		return RING_BUFFER_ERROR;
 8004f62:	2300      	movs	r3, #0
 8004f64:	e020      	b.n	8004fa8 <ringBufferRead+0x58>
	}

	*rData = rBuff->buffer[rBuff->head];
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	881b      	ldrh	r3, [r3, #0]
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4413      	add	r3, r2
 8004f70:	799a      	ldrb	r2, [r3, #6]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	701a      	strb	r2, [r3, #0]

	rBuff->head = (rBuff->head + 1) % RING_BUFFER_LEN;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	881b      	ldrh	r3, [r3, #0]
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	4a0d      	ldr	r2, [pc, #52]	; (8004fb4 <ringBufferRead+0x64>)
 8004f7e:	fb82 1203 	smull	r1, r2, r2, r3
 8004f82:	441a      	add	r2, r3
 8004f84:	1211      	asrs	r1, r2, #8
 8004f86:	17da      	asrs	r2, r3, #31
 8004f88:	1a8a      	subs	r2, r1, r2
 8004f8a:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8004f8e:	fb01 f202 	mul.w	r2, r1, r2
 8004f92:	1a9a      	subs	r2, r3, r2
 8004f94:	b292      	uxth	r2, r2
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	801a      	strh	r2, [r3, #0]
	rBuff->len--;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	889b      	ldrh	r3, [r3, #4]
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	809a      	strh	r2, [r3, #4]

	return RING_BUFFER_OK;
 8004fa6:	2301      	movs	r3, #1
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr
 8004fb4:	f2b9d649 	.word	0xf2b9d649

08004fb8 <storageFlash_GetSector>:

/** @brief  storageFlash_GetSector
    @return uint32_t
*/
static uint32_t storageFlash_GetSector(uint32_t Address)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
	uint32_t sector = 0;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	60fb      	str	r3, [r7, #12]

	if((Address < 0x08003FFF) && (Address >= 0x08000000))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a44      	ldr	r2, [pc, #272]	; (80050d8 <storageFlash_GetSector+0x120>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d806      	bhi.n	8004fda <storageFlash_GetSector+0x22>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fd2:	d302      	bcc.n	8004fda <storageFlash_GetSector+0x22>
	{
		sector = FLASH_SECTOR_0;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	e077      	b.n	80050ca <storageFlash_GetSector+0x112>
	}
	else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a3f      	ldr	r2, [pc, #252]	; (80050dc <storageFlash_GetSector+0x124>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d806      	bhi.n	8004ff0 <storageFlash_GetSector+0x38>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a3e      	ldr	r2, [pc, #248]	; (80050e0 <storageFlash_GetSector+0x128>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d302      	bcc.n	8004ff0 <storageFlash_GetSector+0x38>
	{
		sector = FLASH_SECTOR_1;
 8004fea:	2301      	movs	r3, #1
 8004fec:	60fb      	str	r3, [r7, #12]
 8004fee:	e06c      	b.n	80050ca <storageFlash_GetSector+0x112>
	}
	else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a3c      	ldr	r2, [pc, #240]	; (80050e4 <storageFlash_GetSector+0x12c>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d806      	bhi.n	8005006 <storageFlash_GetSector+0x4e>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a3b      	ldr	r2, [pc, #236]	; (80050e8 <storageFlash_GetSector+0x130>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d302      	bcc.n	8005006 <storageFlash_GetSector+0x4e>
	{
		sector = FLASH_SECTOR_2;
 8005000:	2302      	movs	r3, #2
 8005002:	60fb      	str	r3, [r7, #12]
 8005004:	e061      	b.n	80050ca <storageFlash_GetSector+0x112>
	}
	else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a38      	ldr	r2, [pc, #224]	; (80050ec <storageFlash_GetSector+0x134>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d206      	bcs.n	800501c <storageFlash_GetSector+0x64>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a37      	ldr	r2, [pc, #220]	; (80050f0 <storageFlash_GetSector+0x138>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d302      	bcc.n	800501c <storageFlash_GetSector+0x64>
	{
		sector = FLASH_SECTOR_3;
 8005016:	2303      	movs	r3, #3
 8005018:	60fb      	str	r3, [r7, #12]
 800501a:	e056      	b.n	80050ca <storageFlash_GetSector+0x112>
	}
	else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a35      	ldr	r2, [pc, #212]	; (80050f4 <storageFlash_GetSector+0x13c>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d206      	bcs.n	8005032 <storageFlash_GetSector+0x7a>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a31      	ldr	r2, [pc, #196]	; (80050ec <storageFlash_GetSector+0x134>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d902      	bls.n	8005032 <storageFlash_GetSector+0x7a>
	{
		sector = FLASH_SECTOR_4;
 800502c:	2304      	movs	r3, #4
 800502e:	60fb      	str	r3, [r7, #12]
 8005030:	e04b      	b.n	80050ca <storageFlash_GetSector+0x112>
	}
	else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a30      	ldr	r2, [pc, #192]	; (80050f8 <storageFlash_GetSector+0x140>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d206      	bcs.n	8005048 <storageFlash_GetSector+0x90>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a2d      	ldr	r2, [pc, #180]	; (80050f4 <storageFlash_GetSector+0x13c>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d902      	bls.n	8005048 <storageFlash_GetSector+0x90>
	{
		sector = FLASH_SECTOR_5;
 8005042:	2305      	movs	r3, #5
 8005044:	60fb      	str	r3, [r7, #12]
 8005046:	e040      	b.n	80050ca <storageFlash_GetSector+0x112>
	}
	else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a2c      	ldr	r2, [pc, #176]	; (80050fc <storageFlash_GetSector+0x144>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d206      	bcs.n	800505e <storageFlash_GetSector+0xa6>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a29      	ldr	r2, [pc, #164]	; (80050f8 <storageFlash_GetSector+0x140>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d902      	bls.n	800505e <storageFlash_GetSector+0xa6>
	{
		sector = FLASH_SECTOR_6;
 8005058:	2306      	movs	r3, #6
 800505a:	60fb      	str	r3, [r7, #12]
 800505c:	e035      	b.n	80050ca <storageFlash_GetSector+0x112>
	}
	else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a27      	ldr	r2, [pc, #156]	; (8005100 <storageFlash_GetSector+0x148>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d206      	bcs.n	8005074 <storageFlash_GetSector+0xbc>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a24      	ldr	r2, [pc, #144]	; (80050fc <storageFlash_GetSector+0x144>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d902      	bls.n	8005074 <storageFlash_GetSector+0xbc>
	{
		sector = FLASH_SECTOR_7;
 800506e:	2307      	movs	r3, #7
 8005070:	60fb      	str	r3, [r7, #12]
 8005072:	e02a      	b.n	80050ca <storageFlash_GetSector+0x112>
	}
	else if((Address < 0x0809FFFF) && (Address >= 0x08080000))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a23      	ldr	r2, [pc, #140]	; (8005104 <storageFlash_GetSector+0x14c>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d206      	bcs.n	800508a <storageFlash_GetSector+0xd2>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a20      	ldr	r2, [pc, #128]	; (8005100 <storageFlash_GetSector+0x148>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d902      	bls.n	800508a <storageFlash_GetSector+0xd2>
	{
		sector = FLASH_SECTOR_8;
 8005084:	2308      	movs	r3, #8
 8005086:	60fb      	str	r3, [r7, #12]
 8005088:	e01f      	b.n	80050ca <storageFlash_GetSector+0x112>
	}
	else if((Address < 0x080BFFFF) && (Address >= 0x080A0000))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a1e      	ldr	r2, [pc, #120]	; (8005108 <storageFlash_GetSector+0x150>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d206      	bcs.n	80050a0 <storageFlash_GetSector+0xe8>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a1b      	ldr	r2, [pc, #108]	; (8005104 <storageFlash_GetSector+0x14c>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d902      	bls.n	80050a0 <storageFlash_GetSector+0xe8>
	{
		sector = FLASH_SECTOR_9;
 800509a:	2309      	movs	r3, #9
 800509c:	60fb      	str	r3, [r7, #12]
 800509e:	e014      	b.n	80050ca <storageFlash_GetSector+0x112>
	}
	else if((Address < 0x080DFFFF) && (Address >= 0x080C0000))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a1a      	ldr	r2, [pc, #104]	; (800510c <storageFlash_GetSector+0x154>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d806      	bhi.n	80050b6 <storageFlash_GetSector+0xfe>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a17      	ldr	r2, [pc, #92]	; (8005108 <storageFlash_GetSector+0x150>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d902      	bls.n	80050b6 <storageFlash_GetSector+0xfe>
	{
		sector = FLASH_SECTOR_10;
 80050b0:	230a      	movs	r3, #10
 80050b2:	60fb      	str	r3, [r7, #12]
 80050b4:	e009      	b.n	80050ca <storageFlash_GetSector+0x112>
	}
	else if((Address < 0x080FFFFF) && (Address >= 0x080E0000))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a15      	ldr	r2, [pc, #84]	; (8005110 <storageFlash_GetSector+0x158>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d805      	bhi.n	80050ca <storageFlash_GetSector+0x112>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a14      	ldr	r2, [pc, #80]	; (8005114 <storageFlash_GetSector+0x15c>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d901      	bls.n	80050ca <storageFlash_GetSector+0x112>
	{
		sector = FLASH_SECTOR_11;
 80050c6:	230b      	movs	r3, #11
 80050c8:	60fb      	str	r3, [r7, #12]
	}

	return sector;
 80050ca:	68fb      	ldr	r3, [r7, #12]
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3714      	adds	r7, #20
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr
 80050d8:	08003ffe 	.word	0x08003ffe
 80050dc:	08007ffe 	.word	0x08007ffe
 80050e0:	08004000 	.word	0x08004000
 80050e4:	0800bffe 	.word	0x0800bffe
 80050e8:	08008000 	.word	0x08008000
 80050ec:	0800ffff 	.word	0x0800ffff
 80050f0:	0800c000 	.word	0x0800c000
 80050f4:	0801ffff 	.word	0x0801ffff
 80050f8:	0803ffff 	.word	0x0803ffff
 80050fc:	0805ffff 	.word	0x0805ffff
 8005100:	0807ffff 	.word	0x0807ffff
 8005104:	0809ffff 	.word	0x0809ffff
 8005108:	080bffff 	.word	0x080bffff
 800510c:	080dfffe 	.word	0x080dfffe
 8005110:	080ffffe 	.word	0x080ffffe
 8005114:	080dffff 	.word	0x080dffff

08005118 <storageFlash_readData>:

/** @brief  storageFlash_readData
    @return uint32_t
*/
void storageFlash_readData(uint32_t address, uint8_t *buffer, uint16_t numberOfWords)
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	4613      	mov	r3, r2
 8005124:	80fb      	strh	r3, [r7, #6]
	do
	{
//		printf("\n[storageFlash_readData] read from address 0x%x\n", (int)address);

		*buffer = *(uint8_t *)address;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	781a      	ldrb	r2, [r3, #0]
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	701a      	strb	r2, [r3, #0]
		address ++;//= 4;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	3301      	adds	r3, #1
 8005132:	60fb      	str	r3, [r7, #12]
		buffer ++;
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	3301      	adds	r3, #1
 8005138:	60bb      	str	r3, [r7, #8]
	}
	while((numberOfWords--) != 0);
 800513a:	88fb      	ldrh	r3, [r7, #6]
 800513c:	1e5a      	subs	r2, r3, #1
 800513e:	80fa      	strh	r2, [r7, #6]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1f0      	bne.n	8005126 <storageFlash_readData+0xe>
}
 8005144:	bf00      	nop
 8005146:	bf00      	nop
 8005148:	3714      	adds	r7, #20
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
	...

08005154 <storageFlash_EraseSector>:

/** @brief  storageFlash_EraseSector
    @return bool
*/
uint32_t storageFlash_EraseSector(uint32_t startSectorAddress, uint32_t offsets)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b086      	sub	sp, #24
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;

	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 800515e:	f7fd fadf 	bl	8002720 <HAL_FLASH_Unlock>

	/* Get the number of sector to erase from 1st sector */

	uint32_t StartSector = storageFlash_GetSector(startSectorAddress);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f7ff ff28 	bl	8004fb8 <storageFlash_GetSector>
 8005168:	6178      	str	r0, [r7, #20]
	uint32_t EndSectorAddress = startSectorAddress + offsets;
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	4413      	add	r3, r2
 8005170:	613b      	str	r3, [r7, #16]
	uint32_t EndSector = storageFlash_GetSector(EndSectorAddress);
 8005172:	6938      	ldr	r0, [r7, #16]
 8005174:	f7ff ff20 	bl	8004fb8 <storageFlash_GetSector>
 8005178:	60f8      	str	r0, [r7, #12]

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800517a:	4b14      	ldr	r3, [pc, #80]	; (80051cc <storageFlash_EraseSector+0x78>)
 800517c:	2200      	movs	r2, #0
 800517e:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8005180:	4b12      	ldr	r3, [pc, #72]	; (80051cc <storageFlash_EraseSector+0x78>)
 8005182:	2202      	movs	r2, #2
 8005184:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector        = StartSector;
 8005186:	4a11      	ldr	r2, [pc, #68]	; (80051cc <storageFlash_EraseSector+0x78>)
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	3301      	adds	r3, #1
 8005194:	4a0d      	ldr	r2, [pc, #52]	; (80051cc <storageFlash_EraseSector+0x78>)
 8005196:	60d3      	str	r3, [r2, #12]

	printf("\n[storageFlash_EraseSector] StartSector : 0x%x - EndSector 0x%x\n", (int)startSectorAddress, (int)EndSectorAddress);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	4619      	mov	r1, r3
 800519e:	480c      	ldr	r0, [pc, #48]	; (80051d0 <storageFlash_EraseSector+0x7c>)
 80051a0:	f001 feea 	bl	8006f78 <iprintf>

	/* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	 you have to make sure that these data are rewritten before they are accessed during code
	 execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	 DCRST and ICRST bits in the FLASH_CR register. */
	if (HAL_FLASHEx_Erase(&EraseInitStruct, & SECTORError) != HAL_OK)
 80051a4:	f107 0308 	add.w	r3, r7, #8
 80051a8:	4619      	mov	r1, r3
 80051aa:	4808      	ldr	r0, [pc, #32]	; (80051cc <storageFlash_EraseSector+0x78>)
 80051ac:	f7fd fc26 	bl	80029fc <HAL_FLASHEx_Erase>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <storageFlash_EraseSector+0x6a>
	{
		return HAL_FLASH_GetError();
 80051b6:	f7fd fae5 	bl	8002784 <HAL_FLASH_GetError>
 80051ba:	4603      	mov	r3, r0
 80051bc:	e002      	b.n	80051c4 <storageFlash_EraseSector+0x70>
	}

	/* Lock the Flash to disable the flash control register access (recommended
	 to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 80051be:	f7fd fad1 	bl	8002764 <HAL_FLASH_Lock>

	return 0;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3718      	adds	r7, #24
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	20000260 	.word	0x20000260
 80051d0:	0800aca0 	.word	0x0800aca0

080051d4 <storageFlash_writeData>:
/** @brief  storageFlash_writeData
    @return bool
*/
//bool storageFlash_writeData(uint32_t startSectorAddress, uint32_t *Data, uint16_t numberOfWords)
uint32_t storageFlash_writeData(uint32_t startSectorAddress, uint8_t *Data, uint16_t numberOfWords)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b086      	sub	sp, #24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	4613      	mov	r3, r2
 80051e0:	80fb      	strh	r3, [r7, #6]
//	static FLASH_EraseInitTypeDef EraseInitStruct;
//	uint32_t SECTORError;
	int sofar = 0;
 80051e2:	2300      	movs	r3, #0
 80051e4:	617b      	str	r3, [r7, #20]


	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 80051e6:	f7fd fa9b 	bl	8002720 <HAL_FLASH_Unlock>
	/* Program the user Flash area word by word
	(area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

//	printf("\n[storageFlash_writeData] start write flash data\n");

	while (sofar < numberOfWords)
 80051ea:	e01d      	b.n	8005228 <storageFlash_writeData+0x54>
	{
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, startSectorAddress, Data[sofar]) == HAL_OK)
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	4413      	add	r3, r2
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	b2da      	uxtb	r2, r3
 80051f6:	f04f 0300 	mov.w	r3, #0
 80051fa:	68f9      	ldr	r1, [r7, #12]
 80051fc:	2000      	movs	r0, #0
 80051fe:	f7fd fa3b 	bl	8002678 <HAL_FLASH_Program>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10b      	bne.n	8005220 <storageFlash_writeData+0x4c>
		{
//			printf("\n[storageFlash_writeData] write to address 0x%x value = 0x%x\n", (int)startSectorAddress, (int)Data[sofar]);
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
 8005208:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800520c:	480c      	ldr	r0, [pc, #48]	; (8005240 <storageFlash_writeData+0x6c>)
 800520e:	f7fd fecc 	bl	8002faa <HAL_GPIO_TogglePin>

			startSectorAddress ++;//= 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	3301      	adds	r3, #1
 8005216:	60fb      	str	r3, [r7, #12]
			sofar++;
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	3301      	adds	r3, #1
 800521c:	617b      	str	r3, [r7, #20]
 800521e:	e003      	b.n	8005228 <storageFlash_writeData+0x54>
		}
		else
		{
			/* Error occurred while writing data in Flash memory*/
			return HAL_FLASH_GetError();
 8005220:	f7fd fab0 	bl	8002784 <HAL_FLASH_GetError>
 8005224:	4603      	mov	r3, r0
 8005226:	e006      	b.n	8005236 <storageFlash_writeData+0x62>
	while (sofar < numberOfWords)
 8005228:	88fb      	ldrh	r3, [r7, #6]
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	429a      	cmp	r2, r3
 800522e:	dbdd      	blt.n	80051ec <storageFlash_writeData+0x18>
		}
	}

	/* Lock the Flash to disable the flash control register access (recommended
	 to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 8005230:	f7fd fa98 	bl	8002764 <HAL_FLASH_Lock>

	return 0;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3718      	adds	r7, #24
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	40020800 	.word	0x40020800

08005244 <uartBootLoaderConfiguration>:
#define __UART_BOOTLOADER_CONFIGURATION
/** @brief  uartBootLoaderConfiguration
    @return none
*/
void uartBootLoaderConfiguration(void)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	af00      	add	r7, sp, #0
	huart2.Instance 				= USART2;
 8005248:	4b20      	ldr	r3, [pc, #128]	; (80052cc <uartBootLoaderConfiguration+0x88>)
 800524a:	4a21      	ldr	r2, [pc, #132]	; (80052d0 <uartBootLoaderConfiguration+0x8c>)
 800524c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate 			= 115200 ;
 800524e:	4b1f      	ldr	r3, [pc, #124]	; (80052cc <uartBootLoaderConfiguration+0x88>)
 8005250:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005254:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength 			= UART_WORDLENGTH_9B;
 8005256:	4b1d      	ldr	r3, [pc, #116]	; (80052cc <uartBootLoaderConfiguration+0x88>)
 8005258:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800525c:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits 			= UART_STOPBITS_1;
 800525e:	4b1b      	ldr	r3, [pc, #108]	; (80052cc <uartBootLoaderConfiguration+0x88>)
 8005260:	2200      	movs	r2, #0
 8005262:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity 				= UART_PARITY_EVEN;
 8005264:	4b19      	ldr	r3, [pc, #100]	; (80052cc <uartBootLoaderConfiguration+0x88>)
 8005266:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800526a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode 				= UART_MODE_TX_RX;
 800526c:	4b17      	ldr	r3, [pc, #92]	; (80052cc <uartBootLoaderConfiguration+0x88>)
 800526e:	220c      	movs	r2, #12
 8005270:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl 			= UART_HWCONTROL_NONE;
 8005272:	4b16      	ldr	r3, [pc, #88]	; (80052cc <uartBootLoaderConfiguration+0x88>)
 8005274:	2200      	movs	r2, #0
 8005276:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling 		= UART_OVERSAMPLING_16;
 8005278:	4b14      	ldr	r3, [pc, #80]	; (80052cc <uartBootLoaderConfiguration+0x88>)
 800527a:	2200      	movs	r2, #0
 800527c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800527e:	4813      	ldr	r0, [pc, #76]	; (80052cc <uartBootLoaderConfiguration+0x88>)
 8005280:	f7fe fbf0 	bl	8003a64 <HAL_UART_Init>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <uartBootLoaderConfiguration+0x4a>
	{
		Error_Handler();
 800528a:	f7fc f871 	bl	8001370 <Error_Handler>
	}

    /// xoa bo dem uart truoc khi truyen
    __HAL_UART_FLUSH_DRREGISTER(&huart2);
 800528e:	4b0f      	ldr	r3, [pc, #60]	; (80052cc <uartBootLoaderConfiguration+0x88>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	685b      	ldr	r3, [r3, #4]

    /// init serialPort library
    serial_port2.zPrivate.uartHandle.hdmarx = &hdma_usart2_rx;
 8005294:	4b0f      	ldr	r3, [pc, #60]	; (80052d4 <uartBootLoaderConfiguration+0x90>)
 8005296:	4a10      	ldr	r2, [pc, #64]	; (80052d8 <uartBootLoaderConfiguration+0x94>)
 8005298:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    serial_port2.zPrivate.uartHandle.Instance = USART2;
 800529c:	4b0d      	ldr	r3, [pc, #52]	; (80052d4 <uartBootLoaderConfiguration+0x90>)
 800529e:	4a0c      	ldr	r2, [pc, #48]	; (80052d0 <uartBootLoaderConfiguration+0x8c>)
 80052a0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    serial_port2.isWriteFinish = true;
 80052a4:	4b0b      	ldr	r3, [pc, #44]	; (80052d4 <uartBootLoaderConfiguration+0x90>)
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

	ringBufferInit(&rBufferRxU2);
 80052ac:	480b      	ldr	r0, [pc, #44]	; (80052dc <uartBootLoaderConfiguration+0x98>)
 80052ae:	f7ff fe05 	bl	8004ebc <ringBufferInit>

	if(HAL_UART_Receive_DMA(&huart2, &usart2WData, 1) != HAL_OK)
 80052b2:	2201      	movs	r2, #1
 80052b4:	490a      	ldr	r1, [pc, #40]	; (80052e0 <uartBootLoaderConfiguration+0x9c>)
 80052b6:	4805      	ldr	r0, [pc, #20]	; (80052cc <uartBootLoaderConfiguration+0x88>)
 80052b8:	f7fe fd32 	bl	8003d20 <HAL_UART_Receive_DMA>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <uartBootLoaderConfiguration+0x82>
	{
		Error_Handler();
 80052c2:	f7fc f855 	bl	8001370 <Error_Handler>
	}
}
 80052c6:	bf00      	nop
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	200004fc 	.word	0x200004fc
 80052d0:	40004400 	.word	0x40004400
 80052d4:	200010a4 	.word	0x200010a4
 80052d8:	200002f4 	.word	0x200002f4
 80052dc:	20001ba4 	.word	0x20001ba4
 80052e0:	20001cb9 	.word	0x20001cb9

080052e4 <uartBootLoaderSendAck>:
#define __UART_BOOTLOADER_SEND_FUNCTION
/** @brief	uartBootLoaderSendAck
    @return	none
*/
static void uartBootLoaderSendAck(void)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
	uint8_t buffer[2] = {UART_BOOTLOADER_ACK, 0};
 80052ea:	2379      	movs	r3, #121	; 0x79
 80052ec:	80bb      	strh	r3, [r7, #4]

	HAL_UART_Transmit_DMA(&huart2, buffer, 1);
 80052ee:	1d3b      	adds	r3, r7, #4
 80052f0:	2201      	movs	r2, #1
 80052f2:	4619      	mov	r1, r3
 80052f4:	4808      	ldr	r0, [pc, #32]	; (8005318 <uartBootLoaderSendAck+0x34>)
 80052f6:	f7fe fc95 	bl	8003c24 <HAL_UART_Transmit_DMA>
	while(txComplete == false)
 80052fa:	bf00      	nop
 80052fc:	4b07      	ldr	r3, [pc, #28]	; (800531c <uartBootLoaderSendAck+0x38>)
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	f083 0301 	eor.w	r3, r3, #1
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1f8      	bne.n	80052fc <uartBootLoaderSendAck+0x18>
	{

	}
	txComplete = false;
 800530a:	4b04      	ldr	r3, [pc, #16]	; (800531c <uartBootLoaderSendAck+0x38>)
 800530c:	2200      	movs	r2, #0
 800530e:	701a      	strb	r2, [r3, #0]

//	serialPort_write(&serial_port2, buffer, 1);
}
 8005310:	bf00      	nop
 8005312:	3708      	adds	r7, #8
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	200004fc 	.word	0x200004fc
 800531c:	20001cb8 	.word	0x20001cb8

08005320 <uartBootLoaderSendNack>:

/** @brief	uartBootLoaderSendAck
    @return	none
*/
static void uartBootLoaderSendNack(void)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
	uint8_t buffer[2] = {UART_BOOTLOADER_NACK, 0};
 8005326:	231f      	movs	r3, #31
 8005328:	80bb      	strh	r3, [r7, #4]

	HAL_UART_Transmit_DMA(&huart2, buffer, 1);
 800532a:	1d3b      	adds	r3, r7, #4
 800532c:	2201      	movs	r2, #1
 800532e:	4619      	mov	r1, r3
 8005330:	4808      	ldr	r0, [pc, #32]	; (8005354 <uartBootLoaderSendNack+0x34>)
 8005332:	f7fe fc77 	bl	8003c24 <HAL_UART_Transmit_DMA>
	while(txComplete == false)
 8005336:	bf00      	nop
 8005338:	4b07      	ldr	r3, [pc, #28]	; (8005358 <uartBootLoaderSendNack+0x38>)
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	f083 0301 	eor.w	r3, r3, #1
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1f8      	bne.n	8005338 <uartBootLoaderSendNack+0x18>
	{

	}
	txComplete = false;
 8005346:	4b04      	ldr	r3, [pc, #16]	; (8005358 <uartBootLoaderSendNack+0x38>)
 8005348:	2200      	movs	r2, #0
 800534a:	701a      	strb	r2, [r3, #0]

//	serialPort_write(&serial_port2, buffer, 1);
}
 800534c:	bf00      	nop
 800534e:	3708      	adds	r7, #8
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	200004fc 	.word	0x200004fc
 8005358:	20001cb8 	.word	0x20001cb8

0800535c <uartBootLoaderSendMoreByte>:

/** @brief	uartBootLoaderSendMoreByte
    @return	none
*/
static void uartBootLoaderSendMoreByte(uint8_t *buffer, uint16_t len)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	460b      	mov	r3, r1
 8005366:	807b      	strh	r3, [r7, #2]
//	serialPort_write(&serial_port2, buffer, len);
	HAL_UART_Transmit_DMA(&huart2, buffer, len);
 8005368:	887b      	ldrh	r3, [r7, #2]
 800536a:	461a      	mov	r2, r3
 800536c:	6879      	ldr	r1, [r7, #4]
 800536e:	4809      	ldr	r0, [pc, #36]	; (8005394 <uartBootLoaderSendMoreByte+0x38>)
 8005370:	f7fe fc58 	bl	8003c24 <HAL_UART_Transmit_DMA>
	while(txComplete == false)
 8005374:	bf00      	nop
 8005376:	4b08      	ldr	r3, [pc, #32]	; (8005398 <uartBootLoaderSendMoreByte+0x3c>)
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	f083 0301 	eor.w	r3, r3, #1
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1f8      	bne.n	8005376 <uartBootLoaderSendMoreByte+0x1a>
	{

	}
	txComplete = false;
 8005384:	4b04      	ldr	r3, [pc, #16]	; (8005398 <uartBootLoaderSendMoreByte+0x3c>)
 8005386:	2200      	movs	r2, #0
 8005388:	701a      	strb	r2, [r3, #0]
}
 800538a:	bf00      	nop
 800538c:	3708      	adds	r7, #8
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	200004fc 	.word	0x200004fc
 8005398:	20001cb8 	.word	0x20001cb8

0800539c <uartBootLoaderChecksumCalculator>:
 *  @param[in] buffer : mang can tinh checksum
 *  @param[in] len : do dai cua mang tinh checksum
    @return	none
*/
uint8_t uartBootLoaderChecksumCalculator(uint8_t beginChecksum, uint8_t *buffer, uint16_t len)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	4603      	mov	r3, r0
 80053a4:	6039      	str	r1, [r7, #0]
 80053a6:	71fb      	strb	r3, [r7, #7]
 80053a8:	4613      	mov	r3, r2
 80053aa:	80bb      	strh	r3, [r7, #4]
	uint8_t checksum = beginChecksum;
 80053ac:	79fb      	ldrb	r3, [r7, #7]
 80053ae:	73fb      	strb	r3, [r7, #15]

	for(uint16_t i = 0 ; i < len; i++)
 80053b0:	2300      	movs	r3, #0
 80053b2:	81bb      	strh	r3, [r7, #12]
 80053b4:	e009      	b.n	80053ca <uartBootLoaderChecksumCalculator+0x2e>
	{
		checksum ^= buffer[i];
 80053b6:	89bb      	ldrh	r3, [r7, #12]
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	4413      	add	r3, r2
 80053bc:	781a      	ldrb	r2, [r3, #0]
 80053be:	7bfb      	ldrb	r3, [r7, #15]
 80053c0:	4053      	eors	r3, r2
 80053c2:	73fb      	strb	r3, [r7, #15]
	for(uint16_t i = 0 ; i < len; i++)
 80053c4:	89bb      	ldrh	r3, [r7, #12]
 80053c6:	3301      	adds	r3, #1
 80053c8:	81bb      	strh	r3, [r7, #12]
 80053ca:	89ba      	ldrh	r2, [r7, #12]
 80053cc:	88bb      	ldrh	r3, [r7, #4]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d3f1      	bcc.n	80053b6 <uartBootLoaderChecksumCalculator+0x1a>
	}

	return checksum;
 80053d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3714      	adds	r7, #20
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <uartBootLoaderRecieverCmdConnect>:

/** @brief  uartBootLoaderRecieverCmdConnect
    @return 
*/
static bool uartBootLoaderRecieverCmdConnect(uartBootLoader_t *boot)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
	uint8_t rData = 0;
 80053e8:	2300      	movs	r3, #0
 80053ea:	73fb      	strb	r3, [r7, #15]
	static uint32_t timePrintDebug = 0;

	if(rBufferRxU2.len == 1)
 80053ec:	4b1d      	ldr	r3, [pc, #116]	; (8005464 <uartBootLoaderRecieverCmdConnect+0x84>)
 80053ee:	889b      	ldrh	r3, [r3, #4]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d120      	bne.n	8005436 <uartBootLoaderRecieverCmdConnect+0x56>
	{
		if(ringBufferRead(&rBufferRxU2, &rData) == RING_BUFFER_OK)
 80053f4:	f107 030f 	add.w	r3, r7, #15
 80053f8:	4619      	mov	r1, r3
 80053fa:	481a      	ldr	r0, [pc, #104]	; (8005464 <uartBootLoaderRecieverCmdConnect+0x84>)
 80053fc:	f7ff fda8 	bl	8004f50 <ringBufferRead>
 8005400:	4603      	mov	r3, r0
 8005402:	2b01      	cmp	r3, #1
 8005404:	d117      	bne.n	8005436 <uartBootLoaderRecieverCmdConnect+0x56>
		{
			if(rData == UART_BOOTLOADER_CMD_CONNECT)
 8005406:	7bfb      	ldrb	r3, [r7, #15]
 8005408:	2b7f      	cmp	r3, #127	; 0x7f
 800540a:	d10c      	bne.n	8005426 <uartBootLoaderRecieverCmdConnect+0x46>
			{
				uartBootLoaderSendAck();
 800540c:	f7ff ff6a 	bl	80052e4 <uartBootLoaderSendAck>
				timePrintDebug = 0;
 8005410:	4b15      	ldr	r3, [pc, #84]	; (8005468 <uartBootLoaderRecieverCmdConnect+0x88>)
 8005412:	2200      	movs	r2, #0
 8005414:	601a      	str	r2, [r3, #0]
				printf("\n[uartBootLoaderRecieverCmdConnect] boot connected !@! len = %d\n", rBufferRxU2.len);
 8005416:	4b13      	ldr	r3, [pc, #76]	; (8005464 <uartBootLoaderRecieverCmdConnect+0x84>)
 8005418:	889b      	ldrh	r3, [r3, #4]
 800541a:	4619      	mov	r1, r3
 800541c:	4813      	ldr	r0, [pc, #76]	; (800546c <uartBootLoaderRecieverCmdConnect+0x8c>)
 800541e:	f001 fdab 	bl	8006f78 <iprintf>

				return true;
 8005422:	2301      	movs	r3, #1
 8005424:	e019      	b.n	800545a <uartBootLoaderRecieverCmdConnect+0x7a>
			}
			else
			{
				uartBootLoaderSendNack();
 8005426:	f7ff ff7b 	bl	8005320 <uartBootLoaderSendNack>
				printf("\n[uartBootLoaderRecieverCmdConnect] non valid byte !@! len = %d\n", rBufferRxU2.len);
 800542a:	4b0e      	ldr	r3, [pc, #56]	; (8005464 <uartBootLoaderRecieverCmdConnect+0x84>)
 800542c:	889b      	ldrh	r3, [r3, #4]
 800542e:	4619      	mov	r1, r3
 8005430:	480f      	ldr	r0, [pc, #60]	; (8005470 <uartBootLoaderRecieverCmdConnect+0x90>)
 8005432:	f001 fda1 	bl	8006f78 <iprintf>
			}
		}
	}


	if(HAL_GetTick() - timePrintDebug > 1000)
 8005436:	f7fc fbdb 	bl	8001bf0 <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	4b0a      	ldr	r3, [pc, #40]	; (8005468 <uartBootLoaderRecieverCmdConnect+0x88>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005446:	d907      	bls.n	8005458 <uartBootLoaderRecieverCmdConnect+0x78>
	{
		timePrintDebug = HAL_GetTick();
 8005448:	f7fc fbd2 	bl	8001bf0 <HAL_GetTick>
 800544c:	4603      	mov	r3, r0
 800544e:	4a06      	ldr	r2, [pc, #24]	; (8005468 <uartBootLoaderRecieverCmdConnect+0x88>)
 8005450:	6013      	str	r3, [r2, #0]
		printf("\n[uartBootLoaderRecieverCmdConnect] waitting cmd connect ...\n");
 8005452:	4808      	ldr	r0, [pc, #32]	; (8005474 <uartBootLoaderRecieverCmdConnect+0x94>)
 8005454:	f001 fe16 	bl	8007084 <puts>
	}

	return false;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	20001ba4 	.word	0x20001ba4
 8005468:	20000274 	.word	0x20000274
 800546c:	0800af20 	.word	0x0800af20
 8005470:	0800af64 	.word	0x0800af64
 8005474:	0800afa8 	.word	0x0800afa8

08005478 <uartBootLoaderReadCmd>:

/** @brief  uartBootLoaderStateConnected
    @return none
*/
static bootLoaderCmd_t uartBootLoaderReadCmd(void)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
	uint8_t rData = 0;
 800547e:	2300      	movs	r3, #0
 8005480:	717b      	strb	r3, [r7, #5]
	uint8_t cmdBuffer[2] = {0, 0};
 8005482:	2300      	movs	r3, #0
 8005484:	803b      	strh	r3, [r7, #0]
	uint8_t trueCmdCount = 0;
 8005486:	2300      	movs	r3, #0
 8005488:	71fb      	strb	r3, [r7, #7]

	if(rBufferRxU2.len == BOOTLOADER_CMD_LEN)
 800548a:	4b2b      	ldr	r3, [pc, #172]	; (8005538 <uartBootLoaderReadCmd+0xc0>)
 800548c:	889b      	ldrh	r3, [r3, #4]
 800548e:	2b02      	cmp	r3, #2
 8005490:	d14c      	bne.n	800552c <uartBootLoaderReadCmd+0xb4>
	{
		/// lay header byte
		if(ringBufferRead(&rBufferRxU2, &rData) == RING_BUFFER_OK)
 8005492:	1d7b      	adds	r3, r7, #5
 8005494:	4619      	mov	r1, r3
 8005496:	4828      	ldr	r0, [pc, #160]	; (8005538 <uartBootLoaderReadCmd+0xc0>)
 8005498:	f7ff fd5a 	bl	8004f50 <ringBufferRead>
 800549c:	4603      	mov	r3, r0
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d101      	bne.n	80054a6 <uartBootLoaderReadCmd+0x2e>
		{
			cmdBuffer[0] = rData;
 80054a2:	797b      	ldrb	r3, [r7, #5]
 80054a4:	703b      	strb	r3, [r7, #0]
		}

		/// lay footer byte
		if(ringBufferRead(&rBufferRxU2, &rData) == RING_BUFFER_OK)
 80054a6:	1d7b      	adds	r3, r7, #5
 80054a8:	4619      	mov	r1, r3
 80054aa:	4823      	ldr	r0, [pc, #140]	; (8005538 <uartBootLoaderReadCmd+0xc0>)
 80054ac:	f7ff fd50 	bl	8004f50 <ringBufferRead>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d101      	bne.n	80054ba <uartBootLoaderReadCmd+0x42>
		{
			cmdBuffer[1] = rData;
 80054b6:	797b      	ldrb	r3, [r7, #5]
 80054b8:	707b      	strb	r3, [r7, #1]
		}

		for(uint8_t i = 0; i < BOOTLOADER_CMD_GET_TOTAL; i++)
 80054ba:	2300      	movs	r3, #0
 80054bc:	71bb      	strb	r3, [r7, #6]
 80054be:	e026      	b.n	800550e <uartBootLoaderReadCmd+0x96>
		{
			/// compare cmd header
			if(cmdBuffer[0] == bootLoaderCmdList[i].cmdHeader)
 80054c0:	783a      	ldrb	r2, [r7, #0]
 80054c2:	79bb      	ldrb	r3, [r7, #6]
 80054c4:	491d      	ldr	r1, [pc, #116]	; (800553c <uartBootLoaderReadCmd+0xc4>)
 80054c6:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d102      	bne.n	80054d4 <uartBootLoaderReadCmd+0x5c>
			{
				trueCmdCount++;
 80054ce:	79fb      	ldrb	r3, [r7, #7]
 80054d0:	3301      	adds	r3, #1
 80054d2:	71fb      	strb	r3, [r7, #7]
			}

			/// compare cmd header
			if(cmdBuffer[1] == bootLoaderCmdList[i].cmdFooter)
 80054d4:	787a      	ldrb	r2, [r7, #1]
 80054d6:	79bb      	ldrb	r3, [r7, #6]
 80054d8:	4918      	ldr	r1, [pc, #96]	; (800553c <uartBootLoaderReadCmd+0xc4>)
 80054da:	005b      	lsls	r3, r3, #1
 80054dc:	440b      	add	r3, r1
 80054de:	785b      	ldrb	r3, [r3, #1]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d102      	bne.n	80054ea <uartBootLoaderReadCmd+0x72>
			{
				trueCmdCount++;
 80054e4:	79fb      	ldrb	r3, [r7, #7]
 80054e6:	3301      	adds	r3, #1
 80054e8:	71fb      	strb	r3, [r7, #7]
			}

			/// compare true
			if(trueCmdCount == BOOTLOADER_CMD_LEN)
 80054ea:	79fb      	ldrb	r3, [r7, #7]
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d109      	bne.n	8005504 <uartBootLoaderReadCmd+0x8c>
			{
				printf("\n[uartBootLoaderReadCmd] found %s\n", bootLoaderCmdStr_t[i].str);
 80054f0:	79bb      	ldrb	r3, [r7, #6]
 80054f2:	4a13      	ldr	r2, [pc, #76]	; (8005540 <uartBootLoaderReadCmd+0xc8>)
 80054f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054f8:	4619      	mov	r1, r3
 80054fa:	4812      	ldr	r0, [pc, #72]	; (8005544 <uartBootLoaderReadCmd+0xcc>)
 80054fc:	f001 fd3c 	bl	8006f78 <iprintf>
				return (bootLoaderCmd_t)i;
 8005500:	79bb      	ldrb	r3, [r7, #6]
 8005502:	e014      	b.n	800552e <uartBootLoaderReadCmd+0xb6>
			}
			else
			{
				trueCmdCount = 0;
 8005504:	2300      	movs	r3, #0
 8005506:	71fb      	strb	r3, [r7, #7]
		for(uint8_t i = 0; i < BOOTLOADER_CMD_GET_TOTAL; i++)
 8005508:	79bb      	ldrb	r3, [r7, #6]
 800550a:	3301      	adds	r3, #1
 800550c:	71bb      	strb	r3, [r7, #6]
 800550e:	79bb      	ldrb	r3, [r7, #6]
 8005510:	2b0c      	cmp	r3, #12
 8005512:	d9d5      	bls.n	80054c0 <uartBootLoaderReadCmd+0x48>
			}
		}

		printf("\n[uartBootLoaderReadCmd] not found cmd | byte1 = 0x%x byte2 = 0x%x\n", cmdBuffer[0], cmdBuffer[1]);
 8005514:	783b      	ldrb	r3, [r7, #0]
 8005516:	4619      	mov	r1, r3
 8005518:	787b      	ldrb	r3, [r7, #1]
 800551a:	461a      	mov	r2, r3
 800551c:	480a      	ldr	r0, [pc, #40]	; (8005548 <uartBootLoaderReadCmd+0xd0>)
 800551e:	f001 fd2b 	bl	8006f78 <iprintf>

		uartBootLoaderSendNack();
 8005522:	f7ff fefd 	bl	8005320 <uartBootLoaderSendNack>

		printf("\n[uartBootLoaderReadCmd] send Nack byte ...\n");
 8005526:	4809      	ldr	r0, [pc, #36]	; (800554c <uartBootLoaderReadCmd+0xd4>)
 8005528:	f001 fdac 	bl	8007084 <puts>
	}

	return BOOTLOADER_CMD_NONE;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3708      	adds	r7, #8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	20001ba4 	.word	0x20001ba4
 800553c:	2000000c 	.word	0x2000000c
 8005540:	20000028 	.word	0x20000028
 8005544:	0800afe8 	.word	0x0800afe8
 8005548:	0800b00c 	.word	0x0800b00c
 800554c:	0800b050 	.word	0x0800b050

08005550 <uartBootLoaderResponseCmdGet>:

/** @brief  uartBootLoaderResponseCmdGet
    @return bool
*/
static bool uartBootLoaderResponseCmdGet(void)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b088      	sub	sp, #32
 8005554:	af00      	add	r7, sp, #0
	bootLoaderGetCmd_t cmd;

	cmd.numberOfbyte 			= 11;
 8005556:	230b      	movs	r3, #11
 8005558:	743b      	strb	r3, [r7, #16]
	cmd.version 				= BOOTLOADER_VERSION;
 800555a:	2331      	movs	r3, #49	; 0x31
 800555c:	747b      	strb	r3, [r7, #17]
	cmd.getCmd 					= UART_BOOTLOADER_CMD_GET;
 800555e:	2300      	movs	r3, #0
 8005560:	74bb      	strb	r3, [r7, #18]
	cmd.getVerAndRPStatus 		= UART_BOOTLOADER_CMD_GET_VER;
 8005562:	2301      	movs	r3, #1
 8005564:	74fb      	strb	r3, [r7, #19]
	cmd.getId 					= UART_BOOTLOADER_CMD_GET_ID;
 8005566:	2302      	movs	r3, #2
 8005568:	753b      	strb	r3, [r7, #20]
	cmd.readMemoryCmd 			= UART_BOOTLOADER_CMD_READ_MEMORY;
 800556a:	2311      	movs	r3, #17
 800556c:	757b      	strb	r3, [r7, #21]
	cmd.goCmd 					= UART_BOOTLOADER_CMD_GO;
 800556e:	2321      	movs	r3, #33	; 0x21
 8005570:	75bb      	strb	r3, [r7, #22]
	cmd.writeMemoryCmd 			= UART_BOOTLOADER_CMD_WRITE_MEMORY;
 8005572:	2331      	movs	r3, #49	; 0x31
 8005574:	75fb      	strb	r3, [r7, #23]
	cmd.EraseCmd 				= UART_BOOTLOADER_CMD_ERASE; /*Erase command or Extended Erase command (exclusive commands)*/
 8005576:	2344      	movs	r3, #68	; 0x44
 8005578:	763b      	strb	r3, [r7, #24]
	cmd.writeProtectCmd 		= UART_BOOTLOADER_CMD_WRITE_PROTECT;
 800557a:	2363      	movs	r3, #99	; 0x63
 800557c:	767b      	strb	r3, [r7, #25]
	cmd.writeUnProtectCmd 		= UART_BOOTLOADER_CMD_WRITE_UNPROTECT;
 800557e:	2373      	movs	r3, #115	; 0x73
 8005580:	76bb      	strb	r3, [r7, #26]
	cmd.readOutProtectCmd 		= UART_BOOTLOADER_CMD_READ_PROTECT;
 8005582:	2382      	movs	r3, #130	; 0x82
 8005584:	76fb      	strb	r3, [r7, #27]
	cmd.readOutUnProtectCmd 	= UART_BOOTLOADER_CMD_READ_UNPROTECT;
 8005586:	2392      	movs	r3, #146	; 0x92
 8005588:	773b      	strb	r3, [r7, #28]
	cmd.getChecksumCmd 			= UART_BOOTLOADER_CMD_GET_CHECKSUM;
 800558a:	23a1      	movs	r3, #161	; 0xa1
 800558c:	777b      	strb	r3, [r7, #29]

	uint8_t buffer[BOOTLOADER_CMD_GET_LEN] = {	UART_BOOTLOADER_ACK
 800558e:	2379      	movs	r3, #121	; 0x79
 8005590:	703b      	strb	r3, [r7, #0]
												, cmd.numberOfbyte
 8005592:	7c3b      	ldrb	r3, [r7, #16]
	uint8_t buffer[BOOTLOADER_CMD_GET_LEN] = {	UART_BOOTLOADER_ACK
 8005594:	707b      	strb	r3, [r7, #1]
												, cmd.version
 8005596:	7c7b      	ldrb	r3, [r7, #17]
	uint8_t buffer[BOOTLOADER_CMD_GET_LEN] = {	UART_BOOTLOADER_ACK
 8005598:	70bb      	strb	r3, [r7, #2]
												, cmd.getCmd
 800559a:	7cbb      	ldrb	r3, [r7, #18]
	uint8_t buffer[BOOTLOADER_CMD_GET_LEN] = {	UART_BOOTLOADER_ACK
 800559c:	70fb      	strb	r3, [r7, #3]
												, cmd.getVerAndRPStatus
 800559e:	7cfb      	ldrb	r3, [r7, #19]
	uint8_t buffer[BOOTLOADER_CMD_GET_LEN] = {	UART_BOOTLOADER_ACK
 80055a0:	713b      	strb	r3, [r7, #4]
												, cmd.getId
 80055a2:	7d3b      	ldrb	r3, [r7, #20]
	uint8_t buffer[BOOTLOADER_CMD_GET_LEN] = {	UART_BOOTLOADER_ACK
 80055a4:	717b      	strb	r3, [r7, #5]
												, cmd.readMemoryCmd
 80055a6:	7d7b      	ldrb	r3, [r7, #21]
	uint8_t buffer[BOOTLOADER_CMD_GET_LEN] = {	UART_BOOTLOADER_ACK
 80055a8:	71bb      	strb	r3, [r7, #6]
												, cmd.goCmd
 80055aa:	7dbb      	ldrb	r3, [r7, #22]
	uint8_t buffer[BOOTLOADER_CMD_GET_LEN] = {	UART_BOOTLOADER_ACK
 80055ac:	71fb      	strb	r3, [r7, #7]
												, cmd.writeMemoryCmd
 80055ae:	7dfb      	ldrb	r3, [r7, #23]
	uint8_t buffer[BOOTLOADER_CMD_GET_LEN] = {	UART_BOOTLOADER_ACK
 80055b0:	723b      	strb	r3, [r7, #8]
												, cmd.EraseCmd
 80055b2:	7e3b      	ldrb	r3, [r7, #24]
	uint8_t buffer[BOOTLOADER_CMD_GET_LEN] = {	UART_BOOTLOADER_ACK
 80055b4:	727b      	strb	r3, [r7, #9]
												, cmd.writeProtectCmd
 80055b6:	7e7b      	ldrb	r3, [r7, #25]
	uint8_t buffer[BOOTLOADER_CMD_GET_LEN] = {	UART_BOOTLOADER_ACK
 80055b8:	72bb      	strb	r3, [r7, #10]
												, cmd.writeUnProtectCmd
 80055ba:	7ebb      	ldrb	r3, [r7, #26]
	uint8_t buffer[BOOTLOADER_CMD_GET_LEN] = {	UART_BOOTLOADER_ACK
 80055bc:	72fb      	strb	r3, [r7, #11]
												, cmd.readOutProtectCmd
 80055be:	7efb      	ldrb	r3, [r7, #27]
	uint8_t buffer[BOOTLOADER_CMD_GET_LEN] = {	UART_BOOTLOADER_ACK
 80055c0:	733b      	strb	r3, [r7, #12]
												, cmd.readOutUnProtectCmd
 80055c2:	7f3b      	ldrb	r3, [r7, #28]
	uint8_t buffer[BOOTLOADER_CMD_GET_LEN] = {	UART_BOOTLOADER_ACK
 80055c4:	737b      	strb	r3, [r7, #13]
 80055c6:	2379      	movs	r3, #121	; 0x79
 80055c8:	73bb      	strb	r3, [r7, #14]
//												, cmd.getChecksumCmd
												, UART_BOOTLOADER_ACK};

	uartBootLoaderSendMoreByte(buffer, BOOTLOADER_CMD_GET_LEN);
 80055ca:	463b      	mov	r3, r7
 80055cc:	210f      	movs	r1, #15
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7ff fec4 	bl	800535c <uartBootLoaderSendMoreByte>

	printf("\n[uartBootLoaderRecieverCmdGet] send Ack byte , data of cmd get , ack byte end...\n");
 80055d4:	4803      	ldr	r0, [pc, #12]	; (80055e4 <uartBootLoaderResponseCmdGet+0x94>)
 80055d6:	f001 fd55 	bl	8007084 <puts>

	return true;
 80055da:	2301      	movs	r3, #1
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3720      	adds	r7, #32
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	0800b07c 	.word	0x0800b07c

080055e8 <uartBootLoaderResponseCmdGetVer>:

/** @brief  uartBootLoaderResponseCmdGetVer
    @return bool
*/
static bool uartBootLoaderResponseCmdGetVer(void)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
	bootLoaderGetVerCmd_t cmd;

	cmd.version = BOOTLOADER_VERSION;
 80055ee:	2331      	movs	r3, #49	; 0x31
 80055f0:	733b      	strb	r3, [r7, #12]
	cmd.optionByte1 = 0x0a;
 80055f2:	230a      	movs	r3, #10
 80055f4:	737b      	strb	r3, [r7, #13]
	cmd.optionByte2 = 0x0a;
 80055f6:	230a      	movs	r3, #10
 80055f8:	73bb      	strb	r3, [r7, #14]

	uint8_t buffer[BOOTLOADER_CMD_GET_VER_LEN] = {	UART_BOOTLOADER_ACK
 80055fa:	2379      	movs	r3, #121	; 0x79
 80055fc:	713b      	strb	r3, [r7, #4]
													, cmd.version
 80055fe:	7b3b      	ldrb	r3, [r7, #12]
	uint8_t buffer[BOOTLOADER_CMD_GET_VER_LEN] = {	UART_BOOTLOADER_ACK
 8005600:	717b      	strb	r3, [r7, #5]
													, cmd.optionByte1
 8005602:	7b7b      	ldrb	r3, [r7, #13]
	uint8_t buffer[BOOTLOADER_CMD_GET_VER_LEN] = {	UART_BOOTLOADER_ACK
 8005604:	71bb      	strb	r3, [r7, #6]
													, cmd.optionByte2
 8005606:	7bbb      	ldrb	r3, [r7, #14]
	uint8_t buffer[BOOTLOADER_CMD_GET_VER_LEN] = {	UART_BOOTLOADER_ACK
 8005608:	71fb      	strb	r3, [r7, #7]
 800560a:	2379      	movs	r3, #121	; 0x79
 800560c:	723b      	strb	r3, [r7, #8]
													, UART_BOOTLOADER_ACK};

	uartBootLoaderSendMoreByte(buffer, BOOTLOADER_CMD_GET_VER_LEN);
 800560e:	1d3b      	adds	r3, r7, #4
 8005610:	2105      	movs	r1, #5
 8005612:	4618      	mov	r0, r3
 8005614:	f7ff fea2 	bl	800535c <uartBootLoaderSendMoreByte>

	printf("\n[uartBootLoaderResponseCmdGetVer] send Ack byte, data of cmd get ver and ack byte end...\n");
 8005618:	4803      	ldr	r0, [pc, #12]	; (8005628 <uartBootLoaderResponseCmdGetVer+0x40>)
 800561a:	f001 fd33 	bl	8007084 <puts>

	return true;
 800561e:	2301      	movs	r3, #1
}
 8005620:	4618      	mov	r0, r3
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	0800b0d0 	.word	0x0800b0d0

0800562c <uartBootLoaderResponseCmdGetId>:

/** @brief  uartBootLoaderResponseCmdGetId
    @return bool
*/
static bool uartBootLoaderResponseCmdGetId(void)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
	bootLoaderGetIdCmd_t cmd;

	cmd.numberOfbyte = 1;
 8005632:	2301      	movs	r3, #1
 8005634:	723b      	strb	r3, [r7, #8]
	cmd.byte3 = 0x04;
 8005636:	2304      	movs	r3, #4
 8005638:	727b      	strb	r3, [r7, #9]
	cmd.byte4 = 0x13;
 800563a:	2313      	movs	r3, #19
 800563c:	72bb      	strb	r3, [r7, #10]

	uint8_t buffer[BOOTLOADER_CMD_GET_ID_LEN] = {	UART_BOOTLOADER_ACK
 800563e:	2379      	movs	r3, #121	; 0x79
 8005640:	703b      	strb	r3, [r7, #0]
													, cmd.numberOfbyte
 8005642:	7a3b      	ldrb	r3, [r7, #8]
	uint8_t buffer[BOOTLOADER_CMD_GET_ID_LEN] = {	UART_BOOTLOADER_ACK
 8005644:	707b      	strb	r3, [r7, #1]
													, cmd.byte3
 8005646:	7a7b      	ldrb	r3, [r7, #9]
	uint8_t buffer[BOOTLOADER_CMD_GET_ID_LEN] = {	UART_BOOTLOADER_ACK
 8005648:	70bb      	strb	r3, [r7, #2]
													, cmd.byte4
 800564a:	7abb      	ldrb	r3, [r7, #10]
	uint8_t buffer[BOOTLOADER_CMD_GET_ID_LEN] = {	UART_BOOTLOADER_ACK
 800564c:	70fb      	strb	r3, [r7, #3]
 800564e:	2379      	movs	r3, #121	; 0x79
 8005650:	713b      	strb	r3, [r7, #4]
													, UART_BOOTLOADER_ACK};

	uartBootLoaderSendMoreByte(buffer, BOOTLOADER_CMD_GET_ID_LEN);
 8005652:	463b      	mov	r3, r7
 8005654:	2105      	movs	r1, #5
 8005656:	4618      	mov	r0, r3
 8005658:	f7ff fe80 	bl	800535c <uartBootLoaderSendMoreByte>

	printf("\n[uartBootLoaderResponseCmdGetId] send Ack byte, data of cmd get id and ack byte end...\n");
 800565c:	4803      	ldr	r0, [pc, #12]	; (800566c <uartBootLoaderResponseCmdGetId+0x40>)
 800565e:	f001 fd11 	bl	8007084 <puts>

	return true;
 8005662:	2301      	movs	r3, #1
}
 8005664:	4618      	mov	r0, r3
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	0800b12c 	.word	0x0800b12c

08005670 <uartBootLoaderResponseCmdReadMem>:

/** @brief  uartBootLoaderResponseCmdReadMem
    @return bool
*/
static bool uartBootLoaderResponseCmdReadMem(void)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b0c6      	sub	sp, #280	; 0x118
 8005674:	af00      	add	r7, sp, #0
	uint8_t rData = 0;
 8005676:	2300      	movs	r3, #0
 8005678:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
	uint8_t addressBuffer[5] = {0, 0, 0, 0, 0};
 800567c:	4aa2      	ldr	r2, [pc, #648]	; (8005908 <uartBootLoaderResponseCmdReadMem+0x298>)
 800567e:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8005682:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005686:	6018      	str	r0, [r3, #0]
 8005688:	3304      	adds	r3, #4
 800568a:	7019      	strb	r1, [r3, #0]
	static uint32_t rAddress = 0;
	static uint32_t oldRaddress = 0x08000000;
	static uint32_t realAddress = ADDRESS_START_APPLICATION;
	uint8_t nBuffer[2] = {0, 0};
 800568c:	2300      	movs	r3, #0
 800568e:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
	static uint8_t state = 0;

	switch(state)
 8005692:	4b9e      	ldr	r3, [pc, #632]	; (800590c <uartBootLoaderResponseCmdReadMem+0x29c>)
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	2b03      	cmp	r3, #3
 8005698:	f200 8130 	bhi.w	80058fc <uartBootLoaderResponseCmdReadMem+0x28c>
 800569c:	a201      	add	r2, pc, #4	; (adr r2, 80056a4 <uartBootLoaderResponseCmdReadMem+0x34>)
 800569e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a2:	bf00      	nop
 80056a4:	080056b5 	.word	0x080056b5
 80056a8:	080056c7 	.word	0x080056c7
 80056ac:	080057c1 	.word	0x080057c1
 80056b0:	0800587b 	.word	0x0800587b
	{
		case 0:
		{
			uartBootLoaderSendAck();
 80056b4:	f7ff fe16 	bl	80052e4 <uartBootLoaderSendAck>

			printf("\n[uartBootLoaderResponseCmdReadMem] send Ack byte 1...\n");
 80056b8:	4895      	ldr	r0, [pc, #596]	; (8005910 <uartBootLoaderResponseCmdReadMem+0x2a0>)
 80056ba:	f001 fce3 	bl	8007084 <puts>

			state = 1;
 80056be:	4b93      	ldr	r3, [pc, #588]	; (800590c <uartBootLoaderResponseCmdReadMem+0x29c>)
 80056c0:	2201      	movs	r2, #1
 80056c2:	701a      	strb	r2, [r3, #0]
		}break;
 80056c4:	e11a      	b.n	80058fc <uartBootLoaderResponseCmdReadMem+0x28c>
		case 1:
		{
			if(rBufferRxU2.len == 5)
 80056c6:	4b93      	ldr	r3, [pc, #588]	; (8005914 <uartBootLoaderResponseCmdReadMem+0x2a4>)
 80056c8:	889b      	ldrh	r3, [r3, #4]
 80056ca:	2b05      	cmp	r3, #5
 80056cc:	f040 8113 	bne.w	80058f6 <uartBootLoaderResponseCmdReadMem+0x286>
			{
				for(uint8_t i = 0; i < 5;i++)
 80056d0:	2300      	movs	r3, #0
 80056d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80056d6:	e01f      	b.n	8005718 <uartBootLoaderResponseCmdReadMem+0xa8>
				if(ringBufferRead(&rBufferRxU2, &rData) == RING_BUFFER_OK)
 80056d8:	f207 130b 	addw	r3, r7, #267	; 0x10b
 80056dc:	4619      	mov	r1, r3
 80056de:	488d      	ldr	r0, [pc, #564]	; (8005914 <uartBootLoaderResponseCmdReadMem+0x2a4>)
 80056e0:	f7ff fc36 	bl	8004f50 <ringBufferRead>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d111      	bne.n	800570e <uartBootLoaderResponseCmdReadMem+0x9e>
				{
					printf("\n[uartBootLoaderResponseCmdReadMem] reciever byte = 0x%x | len = %d\n", rData, rBufferRxU2.len);
 80056ea:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80056ee:	4619      	mov	r1, r3
 80056f0:	4b88      	ldr	r3, [pc, #544]	; (8005914 <uartBootLoaderResponseCmdReadMem+0x2a4>)
 80056f2:	889b      	ldrh	r3, [r3, #4]
 80056f4:	461a      	mov	r2, r3
 80056f6:	4888      	ldr	r0, [pc, #544]	; (8005918 <uartBootLoaderResponseCmdReadMem+0x2a8>)
 80056f8:	f001 fc3e 	bl	8006f78 <iprintf>
					addressBuffer[i] = rData;
 80056fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005700:	f897 210b 	ldrb.w	r2, [r7, #267]	; 0x10b
 8005704:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8005708:	440b      	add	r3, r1
 800570a:	f803 2c14 	strb.w	r2, [r3, #-20]
				for(uint8_t i = 0; i < 5;i++)
 800570e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005712:	3301      	adds	r3, #1
 8005714:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8005718:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800571c:	2b04      	cmp	r3, #4
 800571e:	d9db      	bls.n	80056d8 <uartBootLoaderResponseCmdReadMem+0x68>
				}

				rAddress = addressBuffer[3];
 8005720:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8005724:	461a      	mov	r2, r3
 8005726:	4b7d      	ldr	r3, [pc, #500]	; (800591c <uartBootLoaderResponseCmdReadMem+0x2ac>)
 8005728:	601a      	str	r2, [r3, #0]
				rAddress |= addressBuffer[2] << 8;
 800572a:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800572e:	021b      	lsls	r3, r3, #8
 8005730:	461a      	mov	r2, r3
 8005732:	4b7a      	ldr	r3, [pc, #488]	; (800591c <uartBootLoaderResponseCmdReadMem+0x2ac>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4313      	orrs	r3, r2
 8005738:	4a78      	ldr	r2, [pc, #480]	; (800591c <uartBootLoaderResponseCmdReadMem+0x2ac>)
 800573a:	6013      	str	r3, [r2, #0]
				rAddress |= addressBuffer[1] << 16;
 800573c:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8005740:	041b      	lsls	r3, r3, #16
 8005742:	461a      	mov	r2, r3
 8005744:	4b75      	ldr	r3, [pc, #468]	; (800591c <uartBootLoaderResponseCmdReadMem+0x2ac>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4313      	orrs	r3, r2
 800574a:	4a74      	ldr	r2, [pc, #464]	; (800591c <uartBootLoaderResponseCmdReadMem+0x2ac>)
 800574c:	6013      	str	r3, [r2, #0]
				rAddress |= addressBuffer[0] << 24;
 800574e:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8005752:	061b      	lsls	r3, r3, #24
 8005754:	461a      	mov	r2, r3
 8005756:	4b71      	ldr	r3, [pc, #452]	; (800591c <uartBootLoaderResponseCmdReadMem+0x2ac>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4313      	orrs	r3, r2
 800575c:	4a6f      	ldr	r2, [pc, #444]	; (800591c <uartBootLoaderResponseCmdReadMem+0x2ac>)
 800575e:	6013      	str	r3, [r2, #0]

				uint8_t checksum = uartBootLoaderChecksumCalculator(0, addressBuffer, 4);
 8005760:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8005764:	2204      	movs	r2, #4
 8005766:	4619      	mov	r1, r3
 8005768:	2000      	movs	r0, #0
 800576a:	f7ff fe17 	bl	800539c <uartBootLoaderChecksumCalculator>
 800576e:	4603      	mov	r3, r0
 8005770:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
				uint8_t rChecksum = addressBuffer[4];
 8005774:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8005778:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
				printf("\n[uartBootLoaderResponseCmdReadMem] address = 0x%x | checksum = 0x%x | rChecksum = 0x%x\n", (int)rAddress, (int)checksum, (int)rChecksum);
 800577c:	4b67      	ldr	r3, [pc, #412]	; (800591c <uartBootLoaderResponseCmdReadMem+0x2ac>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4619      	mov	r1, r3
 8005782:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8005786:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 800578a:	4865      	ldr	r0, [pc, #404]	; (8005920 <uartBootLoaderResponseCmdReadMem+0x2b0>)
 800578c:	f001 fbf4 	bl	8006f78 <iprintf>

				if(checksum == rChecksum)
 8005790:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8005794:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8005798:	429a      	cmp	r2, r3
 800579a:	d108      	bne.n	80057ae <uartBootLoaderResponseCmdReadMem+0x13e>
				{
					uartBootLoaderSendAck();
 800579c:	f7ff fda2 	bl	80052e4 <uartBootLoaderSendAck>

					printf("\n[uartBootLoaderResponseCmdReadMem] send Ack byte 2...\n");
 80057a0:	4860      	ldr	r0, [pc, #384]	; (8005924 <uartBootLoaderResponseCmdReadMem+0x2b4>)
 80057a2:	f001 fc6f 	bl	8007084 <puts>

					state = 2;
 80057a6:	4b59      	ldr	r3, [pc, #356]	; (800590c <uartBootLoaderResponseCmdReadMem+0x29c>)
 80057a8:	2202      	movs	r2, #2
 80057aa:	701a      	strb	r2, [r3, #0]
					printf("\n[uartBootLoaderResponseCmdReadMem] send nack byte 2...\n");
					state = 10;
				}

			}
		}break;
 80057ac:	e0a3      	b.n	80058f6 <uartBootLoaderResponseCmdReadMem+0x286>
					uartBootLoaderSendNack();
 80057ae:	f7ff fdb7 	bl	8005320 <uartBootLoaderSendNack>
					printf("\n[uartBootLoaderResponseCmdReadMem] send nack byte 2...\n");
 80057b2:	485d      	ldr	r0, [pc, #372]	; (8005928 <uartBootLoaderResponseCmdReadMem+0x2b8>)
 80057b4:	f001 fc66 	bl	8007084 <puts>
					state = 10;
 80057b8:	4b54      	ldr	r3, [pc, #336]	; (800590c <uartBootLoaderResponseCmdReadMem+0x29c>)
 80057ba:	220a      	movs	r2, #10
 80057bc:	701a      	strb	r2, [r3, #0]
		}break;
 80057be:	e09a      	b.n	80058f6 <uartBootLoaderResponseCmdReadMem+0x286>
		case 2:
		{
			if(rBufferRxU2.len == 2)
 80057c0:	4b54      	ldr	r3, [pc, #336]	; (8005914 <uartBootLoaderResponseCmdReadMem+0x2a4>)
 80057c2:	889b      	ldrh	r3, [r3, #4]
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	f040 8098 	bne.w	80058fa <uartBootLoaderResponseCmdReadMem+0x28a>
			{
				for(uint8_t i = 0 ; i < 2; i++)
 80057ca:	2300      	movs	r3, #0
 80057cc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80057d0:	e01f      	b.n	8005812 <uartBootLoaderResponseCmdReadMem+0x1a2>
				if(ringBufferRead(&rBufferRxU2, &rData) == RING_BUFFER_OK)
 80057d2:	f207 130b 	addw	r3, r7, #267	; 0x10b
 80057d6:	4619      	mov	r1, r3
 80057d8:	484e      	ldr	r0, [pc, #312]	; (8005914 <uartBootLoaderResponseCmdReadMem+0x2a4>)
 80057da:	f7ff fbb9 	bl	8004f50 <ringBufferRead>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d111      	bne.n	8005808 <uartBootLoaderResponseCmdReadMem+0x198>
				{
					printf("\n[uartBootLoaderResponseCmdReadMem] reciever byte = 0x%x | len = %d\n", rData, rBufferRxU2.len);
 80057e4:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80057e8:	4619      	mov	r1, r3
 80057ea:	4b4a      	ldr	r3, [pc, #296]	; (8005914 <uartBootLoaderResponseCmdReadMem+0x2a4>)
 80057ec:	889b      	ldrh	r3, [r3, #4]
 80057ee:	461a      	mov	r2, r3
 80057f0:	4849      	ldr	r0, [pc, #292]	; (8005918 <uartBootLoaderResponseCmdReadMem+0x2a8>)
 80057f2:	f001 fbc1 	bl	8006f78 <iprintf>
					nBuffer[i] = rData;
 80057f6:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80057fa:	f897 210b 	ldrb.w	r2, [r7, #267]	; 0x10b
 80057fe:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8005802:	440b      	add	r3, r1
 8005804:	f803 2c18 	strb.w	r2, [r3, #-24]
				for(uint8_t i = 0 ; i < 2; i++)
 8005808:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800580c:	3301      	adds	r3, #1
 800580e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8005812:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8005816:	2b01      	cmp	r3, #1
 8005818:	d9db      	bls.n	80057d2 <uartBootLoaderResponseCmdReadMem+0x162>
				}

				uint8_t checksum = 0;
 800581a:	2300      	movs	r3, #0
 800581c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
				checksum = nBuffer[0];
 8005820:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
 8005824:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
				checksum ^= 0xff;
 8005828:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800582c:	43db      	mvns	r3, r3
 800582e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

				uint8_t rChecksum = nBuffer[1];
 8005832:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8005836:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e

				printf("\n[uartBootLoaderResponseCmdReadMem] checksum = 0x%x | rChecksum = %d\n", checksum, rChecksum);
 800583a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800583e:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 8005842:	4619      	mov	r1, r3
 8005844:	4839      	ldr	r0, [pc, #228]	; (800592c <uartBootLoaderResponseCmdReadMem+0x2bc>)
 8005846:	f001 fb97 	bl	8006f78 <iprintf>

				if(checksum != rChecksum)
 800584a:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 800584e:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8005852:	429a      	cmp	r2, r3
 8005854:	d008      	beq.n	8005868 <uartBootLoaderResponseCmdReadMem+0x1f8>
				{
					uartBootLoaderSendNack();
 8005856:	f7ff fd63 	bl	8005320 <uartBootLoaderSendNack>

					printf("\n[uartBootLoaderResponseCmdReadMem] send nack byte 3...\n");
 800585a:	4835      	ldr	r0, [pc, #212]	; (8005930 <uartBootLoaderResponseCmdReadMem+0x2c0>)
 800585c:	f001 fc12 	bl	8007084 <puts>
					state = 10;
 8005860:	4b2a      	ldr	r3, [pc, #168]	; (800590c <uartBootLoaderResponseCmdReadMem+0x29c>)
 8005862:	220a      	movs	r2, #10
 8005864:	701a      	strb	r2, [r3, #0]
 8005866:	e004      	b.n	8005872 <uartBootLoaderResponseCmdReadMem+0x202>
				}
				else
				{
					uartBootLoaderSendAck();
 8005868:	f7ff fd3c 	bl	80052e4 <uartBootLoaderSendAck>

					printf("\n[uartBootLoaderResponseCmdReadMem] send Ack byte 2...\n");
 800586c:	482d      	ldr	r0, [pc, #180]	; (8005924 <uartBootLoaderResponseCmdReadMem+0x2b4>)
 800586e:	f001 fc09 	bl	8007084 <puts>
				}

				state = 3;
 8005872:	4b26      	ldr	r3, [pc, #152]	; (800590c <uartBootLoaderResponseCmdReadMem+0x29c>)
 8005874:	2203      	movs	r2, #3
 8005876:	701a      	strb	r2, [r3, #0]
			}
		}break;
 8005878:	e03f      	b.n	80058fa <uartBootLoaderResponseCmdReadMem+0x28a>
		case 3:
		{
			uint8_t buffer[STM32_MAX_FRAME - 1];

			uint32_t addressOffset = rAddress - oldRaddress;
 800587a:	4b28      	ldr	r3, [pc, #160]	; (800591c <uartBootLoaderResponseCmdReadMem+0x2ac>)
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	4b2d      	ldr	r3, [pc, #180]	; (8005934 <uartBootLoaderResponseCmdReadMem+0x2c4>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
			oldRaddress = rAddress;
 8005888:	4b24      	ldr	r3, [pc, #144]	; (800591c <uartBootLoaderResponseCmdReadMem+0x2ac>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a29      	ldr	r2, [pc, #164]	; (8005934 <uartBootLoaderResponseCmdReadMem+0x2c4>)
 800588e:	6013      	str	r3, [r2, #0]
			realAddress += addressOffset;
 8005890:	4b29      	ldr	r3, [pc, #164]	; (8005938 <uartBootLoaderResponseCmdReadMem+0x2c8>)
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005898:	4413      	add	r3, r2
 800589a:	4a27      	ldr	r2, [pc, #156]	; (8005938 <uartBootLoaderResponseCmdReadMem+0x2c8>)
 800589c:	6013      	str	r3, [r2, #0]

			printf("\n[uartBootLoaderResponseCmdReadMem] addressOffset = 0x%x | realAddress = 0x%x\n", (int)addressOffset, (int)realAddress);
 800589e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80058a2:	4a25      	ldr	r2, [pc, #148]	; (8005938 <uartBootLoaderResponseCmdReadMem+0x2c8>)
 80058a4:	6812      	ldr	r2, [r2, #0]
 80058a6:	4619      	mov	r1, r3
 80058a8:	4824      	ldr	r0, [pc, #144]	; (800593c <uartBootLoaderResponseCmdReadMem+0x2cc>)
 80058aa:	f001 fb65 	bl	8006f78 <iprintf>

			storageFlash_readData(realAddress, buffer, STM32_MAX_FRAME - 1);
 80058ae:	4b22      	ldr	r3, [pc, #136]	; (8005938 <uartBootLoaderResponseCmdReadMem+0x2c8>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4639      	mov	r1, r7
 80058b4:	22ff      	movs	r2, #255	; 0xff
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7ff fc2e 	bl	8005118 <storageFlash_readData>

			HAL_UART_Transmit_DMA(&huart2, buffer, STM32_MAX_FRAME - 1);
 80058bc:	463b      	mov	r3, r7
 80058be:	22ff      	movs	r2, #255	; 0xff
 80058c0:	4619      	mov	r1, r3
 80058c2:	481f      	ldr	r0, [pc, #124]	; (8005940 <uartBootLoaderResponseCmdReadMem+0x2d0>)
 80058c4:	f7fe f9ae 	bl	8003c24 <HAL_UART_Transmit_DMA>
			while(txComplete == false)
 80058c8:	bf00      	nop
 80058ca:	4b1e      	ldr	r3, [pc, #120]	; (8005944 <uartBootLoaderResponseCmdReadMem+0x2d4>)
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	f083 0301 	eor.w	r3, r3, #1
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1f8      	bne.n	80058ca <uartBootLoaderResponseCmdReadMem+0x25a>
			{

			}
			txComplete = false;
 80058d8:	4b1a      	ldr	r3, [pc, #104]	; (8005944 <uartBootLoaderResponseCmdReadMem+0x2d4>)
 80058da:	2200      	movs	r2, #0
 80058dc:	701a      	strb	r2, [r3, #0]

			printf("\n[uartBootLoaderResponseCmdReadMem] send %d successful\n", STM32_MAX_FRAME - 1);
 80058de:	21ff      	movs	r1, #255	; 0xff
 80058e0:	4819      	ldr	r0, [pc, #100]	; (8005948 <uartBootLoaderResponseCmdReadMem+0x2d8>)
 80058e2:	f001 fb49 	bl	8006f78 <iprintf>

			state = 0;
 80058e6:	4b09      	ldr	r3, [pc, #36]	; (800590c <uartBootLoaderResponseCmdReadMem+0x29c>)
 80058e8:	2200      	movs	r2, #0
 80058ea:	701a      	strb	r2, [r3, #0]
			rAddress = 0;
 80058ec:	4b0b      	ldr	r3, [pc, #44]	; (800591c <uartBootLoaderResponseCmdReadMem+0x2ac>)
 80058ee:	2200      	movs	r2, #0
 80058f0:	601a      	str	r2, [r3, #0]

			return true;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e003      	b.n	80058fe <uartBootLoaderResponseCmdReadMem+0x28e>
		}break;
 80058f6:	bf00      	nop
 80058f8:	e000      	b.n	80058fc <uartBootLoaderResponseCmdReadMem+0x28c>
		}break;
 80058fa:	bf00      	nop
		}break;
	}

	return false;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	0800b3d8 	.word	0x0800b3d8
 800590c:	20000278 	.word	0x20000278
 8005910:	0800b184 	.word	0x0800b184
 8005914:	20001ba4 	.word	0x20001ba4
 8005918:	0800b1bc 	.word	0x0800b1bc
 800591c:	2000027c 	.word	0x2000027c
 8005920:	0800b204 	.word	0x0800b204
 8005924:	0800b260 	.word	0x0800b260
 8005928:	0800b298 	.word	0x0800b298
 800592c:	0800b2d0 	.word	0x0800b2d0
 8005930:	0800b318 	.word	0x0800b318
 8005934:	2000005c 	.word	0x2000005c
 8005938:	20000060 	.word	0x20000060
 800593c:	0800b350 	.word	0x0800b350
 8005940:	200004fc 	.word	0x200004fc
 8005944:	20001cb8 	.word	0x20001cb8
 8005948:	0800b3a0 	.word	0x0800b3a0

0800594c <uartBootLoaderResponseCmdReadOP>:

/** @brief  uartBootLoaderResponseCmdReadOP
    @return bool
*/
static bool uartBootLoaderResponseCmdReadOP(void)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	af00      	add	r7, sp, #0
	uartBootLoaderSendNack();
 8005950:	f7ff fce6 	bl	8005320 <uartBootLoaderSendNack>

	printf("\n[uartBootLoaderResponseCmdReadOP] send nack byte ...\n");
 8005954:	4802      	ldr	r0, [pc, #8]	; (8005960 <uartBootLoaderResponseCmdReadOP+0x14>)
 8005956:	f001 fb95 	bl	8007084 <puts>

	return true;
 800595a:	2301      	movs	r3, #1
}
 800595c:	4618      	mov	r0, r3
 800595e:	bd80      	pop	{r7, pc}
 8005960:	0800b3e0 	.word	0x0800b3e0

08005964 <uartBootLoaderResponseCmdReadOUP>:

/** @brief  uartBootLoaderResponseCmdReadOUP
    @return bool
*/
static bool uartBootLoaderResponseCmdReadOUP(void)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	af00      	add	r7, sp, #0
	uartBootLoaderSendAck();
 8005968:	f7ff fcbc 	bl	80052e4 <uartBootLoaderSendAck>
	uartBootLoaderSendAck();
 800596c:	f7ff fcba 	bl	80052e4 <uartBootLoaderSendAck>
	printf("\n[uartBootLoaderResponseCmdGetId] send Ack 2 byte...\n");
 8005970:	4802      	ldr	r0, [pc, #8]	; (800597c <uartBootLoaderResponseCmdReadOUP+0x18>)
 8005972:	f001 fb87 	bl	8007084 <puts>

	return true;
 8005976:	2301      	movs	r3, #1
}
 8005978:	4618      	mov	r0, r3
 800597a:	bd80      	pop	{r7, pc}
 800597c:	0800b418 	.word	0x0800b418

08005980 <uartBootLoaderResponseCmdErase>:

/** @brief  uartBootLoaderResponseCmdErase
    @return bool
*/
static bool uartBootLoaderResponseCmdErase(void)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
	static uint8_t state = 0;
	uint8_t rData = 0;
 8005986:	2300      	movs	r3, #0
 8005988:	70fb      	strb	r3, [r7, #3]
	uint8_t massEraseBuffer[3] = {0xff, 0xff, 0x00};
 800598a:	4a33      	ldr	r2, [pc, #204]	; (8005a58 <uartBootLoaderResponseCmdErase+0xd8>)
 800598c:	463b      	mov	r3, r7
 800598e:	6812      	ldr	r2, [r2, #0]
 8005990:	4611      	mov	r1, r2
 8005992:	8019      	strh	r1, [r3, #0]
 8005994:	3302      	adds	r3, #2
 8005996:	0c12      	lsrs	r2, r2, #16
 8005998:	701a      	strb	r2, [r3, #0]
	uint8_t trueDataCount = 0;
 800599a:	2300      	movs	r3, #0
 800599c:	73fb      	strb	r3, [r7, #15]
	uint32_t startSectorAddress = ADDRESS_START_APPLICATION;
 800599e:	4b2f      	ldr	r3, [pc, #188]	; (8005a5c <uartBootLoaderResponseCmdErase+0xdc>)
 80059a0:	60bb      	str	r3, [r7, #8]
	uint32_t offsets = 0x00020000;
 80059a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059a6:	607b      	str	r3, [r7, #4]

	switch(state)
 80059a8:	4b2d      	ldr	r3, [pc, #180]	; (8005a60 <uartBootLoaderResponseCmdErase+0xe0>)
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d047      	beq.n	8005a40 <uartBootLoaderResponseCmdErase+0xc0>
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	dc4b      	bgt.n	8005a4c <uartBootLoaderResponseCmdErase+0xcc>
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d002      	beq.n	80059be <uartBootLoaderResponseCmdErase+0x3e>
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d009      	beq.n	80059d0 <uartBootLoaderResponseCmdErase+0x50>
 80059bc:	e046      	b.n	8005a4c <uartBootLoaderResponseCmdErase+0xcc>
	{
		case 0:
		{
			/// response ack to host
			uartBootLoaderSendAck();
 80059be:	f7ff fc91 	bl	80052e4 <uartBootLoaderSendAck>
			printf("\n[uartBootLoaderResponseCmdErase] send Ack byte ...\n");
 80059c2:	4828      	ldr	r0, [pc, #160]	; (8005a64 <uartBootLoaderResponseCmdErase+0xe4>)
 80059c4:	f001 fb5e 	bl	8007084 <puts>

			state = 1;
 80059c8:	4b25      	ldr	r3, [pc, #148]	; (8005a60 <uartBootLoaderResponseCmdErase+0xe0>)
 80059ca:	2201      	movs	r2, #1
 80059cc:	701a      	strb	r2, [r3, #0]
		}break;
 80059ce:	e03d      	b.n	8005a4c <uartBootLoaderResponseCmdErase+0xcc>
		case 1:
		{
			if(rBufferRxU2.len == 3)
 80059d0:	4b25      	ldr	r3, [pc, #148]	; (8005a68 <uartBootLoaderResponseCmdErase+0xe8>)
 80059d2:	889b      	ldrh	r3, [r3, #4]
 80059d4:	2b03      	cmp	r3, #3
 80059d6:	d138      	bne.n	8005a4a <uartBootLoaderResponseCmdErase+0xca>
			{
				for(uint8_t i = 0; i < 3; i++)
 80059d8:	2300      	movs	r3, #0
 80059da:	73bb      	strb	r3, [r7, #14]
 80059dc:	e016      	b.n	8005a0c <uartBootLoaderResponseCmdErase+0x8c>
				{
					if(ringBufferRead(&rBufferRxU2, &rData) == RING_BUFFER_OK)
 80059de:	1cfb      	adds	r3, r7, #3
 80059e0:	4619      	mov	r1, r3
 80059e2:	4821      	ldr	r0, [pc, #132]	; (8005a68 <uartBootLoaderResponseCmdErase+0xe8>)
 80059e4:	f7ff fab4 	bl	8004f50 <ringBufferRead>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d10b      	bne.n	8005a06 <uartBootLoaderResponseCmdErase+0x86>
					{
						if(rData == massEraseBuffer[i])
 80059ee:	7bbb      	ldrb	r3, [r7, #14]
 80059f0:	f107 0210 	add.w	r2, r7, #16
 80059f4:	4413      	add	r3, r2
 80059f6:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80059fa:	78fb      	ldrb	r3, [r7, #3]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d102      	bne.n	8005a06 <uartBootLoaderResponseCmdErase+0x86>
						{
							trueDataCount++;
 8005a00:	7bfb      	ldrb	r3, [r7, #15]
 8005a02:	3301      	adds	r3, #1
 8005a04:	73fb      	strb	r3, [r7, #15]
				for(uint8_t i = 0; i < 3; i++)
 8005a06:	7bbb      	ldrb	r3, [r7, #14]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	73bb      	strb	r3, [r7, #14]
 8005a0c:	7bbb      	ldrb	r3, [r7, #14]
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d9e5      	bls.n	80059de <uartBootLoaderResponseCmdErase+0x5e>
						}
					}
				}

				storageFlash_EraseSector(startSectorAddress, offsets);
 8005a12:	6879      	ldr	r1, [r7, #4]
 8005a14:	68b8      	ldr	r0, [r7, #8]
 8005a16:	f7ff fb9d 	bl	8005154 <storageFlash_EraseSector>
				storageFlash_EraseSector(startSectorAddress + offsets, offsets);
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4413      	add	r3, r2
 8005a20:	6879      	ldr	r1, [r7, #4]
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7ff fb96 	bl	8005154 <storageFlash_EraseSector>

				if(trueDataCount == 3)
 8005a28:	7bfb      	ldrb	r3, [r7, #15]
 8005a2a:	2b03      	cmp	r3, #3
 8005a2c:	d104      	bne.n	8005a38 <uartBootLoaderResponseCmdErase+0xb8>
				{
					/// response ack to host
					uartBootLoaderSendAck();
 8005a2e:	f7ff fc59 	bl	80052e4 <uartBootLoaderSendAck>
					printf("\n[uartBootLoaderResponseCmdErase] send Ack byte ...\n");
 8005a32:	480c      	ldr	r0, [pc, #48]	; (8005a64 <uartBootLoaderResponseCmdErase+0xe4>)
 8005a34:	f001 fb26 	bl	8007084 <puts>
				}

				state = 2;
 8005a38:	4b09      	ldr	r3, [pc, #36]	; (8005a60 <uartBootLoaderResponseCmdErase+0xe0>)
 8005a3a:	2202      	movs	r2, #2
 8005a3c:	701a      	strb	r2, [r3, #0]
			}
		}break;
 8005a3e:	e004      	b.n	8005a4a <uartBootLoaderResponseCmdErase+0xca>
		case 2:
		{
			state = 0;
 8005a40:	4b07      	ldr	r3, [pc, #28]	; (8005a60 <uartBootLoaderResponseCmdErase+0xe0>)
 8005a42:	2200      	movs	r2, #0
 8005a44:	701a      	strb	r2, [r3, #0]

			return true;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e001      	b.n	8005a4e <uartBootLoaderResponseCmdErase+0xce>
		}break;
 8005a4a:	bf00      	nop
		}break;
	}

	return false;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	0800b484 	.word	0x0800b484
 8005a5c:	08020000 	.word	0x08020000
 8005a60:	20000280 	.word	0x20000280
 8005a64:	0800b450 	.word	0x0800b450
 8005a68:	20001ba4 	.word	0x20001ba4

08005a6c <uartBootLoaderResponseCmdWriteMem>:

/** @brief  uartBootLoaderResponseCmdWriteMem
    @return bool
*/
static bool uartBootLoaderResponseCmdWriteMem(void)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b0c6      	sub	sp, #280	; 0x118
 8005a70:	af00      	add	r7, sp, #0
	static uint8_t state = 0;
	uint8_t rData = 0;
 8005a72:	2300      	movs	r3, #0
 8005a74:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
	uint8_t addressBuffer[5] = {0, 0, 0, 0, 0};
 8005a78:	4a97      	ldr	r2, [pc, #604]	; (8005cd8 <uartBootLoaderResponseCmdWriteMem+0x26c>)
 8005a7a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8005a7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005a82:	6018      	str	r0, [r3, #0]
 8005a84:	3304      	adds	r3, #4
 8005a86:	7019      	strb	r1, [r3, #0]
	static uint32_t rAddress = 0;
	static uint32_t oldRaddress = 0x08000000;
	static uint32_t realAddress = ADDRESS_START_APPLICATION;
	uint8_t checksum = 0;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113

	switch(state)
 8005a8e:	4b93      	ldr	r3, [pc, #588]	; (8005cdc <uartBootLoaderResponseCmdWriteMem+0x270>)
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	2b04      	cmp	r3, #4
 8005a94:	f200 8119 	bhi.w	8005cca <uartBootLoaderResponseCmdWriteMem+0x25e>
 8005a98:	a201      	add	r2, pc, #4	; (adr r2, 8005aa0 <uartBootLoaderResponseCmdWriteMem+0x34>)
 8005a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9e:	bf00      	nop
 8005aa0:	08005ab5 	.word	0x08005ab5
 8005aa4:	08005ac7 	.word	0x08005ac7
 8005aa8:	08005bb7 	.word	0x08005bb7
 8005aac:	08005bbf 	.word	0x08005bbf
 8005ab0:	08005cb5 	.word	0x08005cb5
	{
		case 0:
		{
			/// response ack to host
			uartBootLoaderSendAck();
 8005ab4:	f7ff fc16 	bl	80052e4 <uartBootLoaderSendAck>
			printf("\n[uartBootLoaderResponseCmdWriteMem] send Ack byte...\n");
 8005ab8:	4889      	ldr	r0, [pc, #548]	; (8005ce0 <uartBootLoaderResponseCmdWriteMem+0x274>)
 8005aba:	f001 fae3 	bl	8007084 <puts>

			state = 1;
 8005abe:	4b87      	ldr	r3, [pc, #540]	; (8005cdc <uartBootLoaderResponseCmdWriteMem+0x270>)
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	701a      	strb	r2, [r3, #0]
		}break;
 8005ac4:	e101      	b.n	8005cca <uartBootLoaderResponseCmdWriteMem+0x25e>
		case 1:
		{
			/// read address and checksum
			if(rBufferRxU2.len == 5)
 8005ac6:	4b87      	ldr	r3, [pc, #540]	; (8005ce4 <uartBootLoaderResponseCmdWriteMem+0x278>)
 8005ac8:	889b      	ldrh	r3, [r3, #4]
 8005aca:	2b05      	cmp	r3, #5
 8005acc:	f040 80fa 	bne.w	8005cc4 <uartBootLoaderResponseCmdWriteMem+0x258>
			{
				for(uint8_t i = 0; i < 5; i++)
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8005ad6:	e01f      	b.n	8005b18 <uartBootLoaderResponseCmdWriteMem+0xac>
				{
					if(ringBufferRead(&rBufferRxU2, &rData) == RING_BUFFER_OK)
 8005ad8:	f207 130b 	addw	r3, r7, #267	; 0x10b
 8005adc:	4619      	mov	r1, r3
 8005ade:	4881      	ldr	r0, [pc, #516]	; (8005ce4 <uartBootLoaderResponseCmdWriteMem+0x278>)
 8005ae0:	f7ff fa36 	bl	8004f50 <ringBufferRead>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d111      	bne.n	8005b0e <uartBootLoaderResponseCmdWriteMem+0xa2>
					{
						addressBuffer[i] = rData;
 8005aea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005aee:	f897 210b 	ldrb.w	r2, [r7, #267]	; 0x10b
 8005af2:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8005af6:	440b      	add	r3, r1
 8005af8:	f803 2c14 	strb.w	r2, [r3, #-20]
						printf("\n[uartBootLoaderResponseCmdWriteMem] reciever byte = 0x%x | len = %d\n", rData, rBufferRxU2.len);
 8005afc:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8005b00:	4619      	mov	r1, r3
 8005b02:	4b78      	ldr	r3, [pc, #480]	; (8005ce4 <uartBootLoaderResponseCmdWriteMem+0x278>)
 8005b04:	889b      	ldrh	r3, [r3, #4]
 8005b06:	461a      	mov	r2, r3
 8005b08:	4877      	ldr	r0, [pc, #476]	; (8005ce8 <uartBootLoaderResponseCmdWriteMem+0x27c>)
 8005b0a:	f001 fa35 	bl	8006f78 <iprintf>
				for(uint8_t i = 0; i < 5; i++)
 8005b0e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005b12:	3301      	adds	r3, #1
 8005b14:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8005b18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005b1c:	2b04      	cmp	r3, #4
 8005b1e:	d9db      	bls.n	8005ad8 <uartBootLoaderResponseCmdWriteMem+0x6c>
					}
				}

				rAddress = addressBuffer[3];
 8005b20:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8005b24:	461a      	mov	r2, r3
 8005b26:	4b71      	ldr	r3, [pc, #452]	; (8005cec <uartBootLoaderResponseCmdWriteMem+0x280>)
 8005b28:	601a      	str	r2, [r3, #0]
				rAddress |= addressBuffer[2] << 8;
 8005b2a:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8005b2e:	021b      	lsls	r3, r3, #8
 8005b30:	461a      	mov	r2, r3
 8005b32:	4b6e      	ldr	r3, [pc, #440]	; (8005cec <uartBootLoaderResponseCmdWriteMem+0x280>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	4a6c      	ldr	r2, [pc, #432]	; (8005cec <uartBootLoaderResponseCmdWriteMem+0x280>)
 8005b3a:	6013      	str	r3, [r2, #0]
				rAddress |= addressBuffer[1] << 16;
 8005b3c:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8005b40:	041b      	lsls	r3, r3, #16
 8005b42:	461a      	mov	r2, r3
 8005b44:	4b69      	ldr	r3, [pc, #420]	; (8005cec <uartBootLoaderResponseCmdWriteMem+0x280>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	4a68      	ldr	r2, [pc, #416]	; (8005cec <uartBootLoaderResponseCmdWriteMem+0x280>)
 8005b4c:	6013      	str	r3, [r2, #0]
				rAddress |= addressBuffer[0] << 24;
 8005b4e:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8005b52:	061b      	lsls	r3, r3, #24
 8005b54:	461a      	mov	r2, r3
 8005b56:	4b65      	ldr	r3, [pc, #404]	; (8005cec <uartBootLoaderResponseCmdWriteMem+0x280>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	4a63      	ldr	r2, [pc, #396]	; (8005cec <uartBootLoaderResponseCmdWriteMem+0x280>)
 8005b5e:	6013      	str	r3, [r2, #0]

				checksum = uartBootLoaderChecksumCalculator(0, addressBuffer, 4);
 8005b60:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8005b64:	2204      	movs	r2, #4
 8005b66:	4619      	mov	r1, r3
 8005b68:	2000      	movs	r0, #0
 8005b6a:	f7ff fc17 	bl	800539c <uartBootLoaderChecksumCalculator>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113

				printf("\n[uartBootLoaderResponseCmdWriteMem] reciever address = 0x%x | checksum = %d\n", (int)rAddress, (int)checksum);
 8005b74:	4b5d      	ldr	r3, [pc, #372]	; (8005cec <uartBootLoaderResponseCmdWriteMem+0x280>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4619      	mov	r1, r3
 8005b7a:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8005b7e:	461a      	mov	r2, r3
 8005b80:	485b      	ldr	r0, [pc, #364]	; (8005cf0 <uartBootLoaderResponseCmdWriteMem+0x284>)
 8005b82:	f001 f9f9 	bl	8006f78 <iprintf>

				if(checksum == addressBuffer[4])
 8005b86:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8005b8a:	f897 2113 	ldrb.w	r2, [r7, #275]	; 0x113
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d108      	bne.n	8005ba4 <uartBootLoaderResponseCmdWriteMem+0x138>
				{
					uartBootLoaderSendAck();
 8005b92:	f7ff fba7 	bl	80052e4 <uartBootLoaderSendAck>

					printf("\n[uartBootLoaderResponseCmdWriteMem] send Ack byte...\n");
 8005b96:	4852      	ldr	r0, [pc, #328]	; (8005ce0 <uartBootLoaderResponseCmdWriteMem+0x274>)
 8005b98:	f001 fa74 	bl	8007084 <puts>
					state = 2;
 8005b9c:	4b4f      	ldr	r3, [pc, #316]	; (8005cdc <uartBootLoaderResponseCmdWriteMem+0x270>)
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	701a      	strb	r2, [r3, #0]

					printf("\n[uartBootLoaderResponseCmdWriteMem] state 1 send nack byte...\n");
					state = 10;
				}
			}
		}break;
 8005ba2:	e08f      	b.n	8005cc4 <uartBootLoaderResponseCmdWriteMem+0x258>
					uartBootLoaderSendNack();
 8005ba4:	f7ff fbbc 	bl	8005320 <uartBootLoaderSendNack>
					printf("\n[uartBootLoaderResponseCmdWriteMem] state 1 send nack byte...\n");
 8005ba8:	4852      	ldr	r0, [pc, #328]	; (8005cf4 <uartBootLoaderResponseCmdWriteMem+0x288>)
 8005baa:	f001 fa6b 	bl	8007084 <puts>
					state = 10;
 8005bae:	4b4b      	ldr	r3, [pc, #300]	; (8005cdc <uartBootLoaderResponseCmdWriteMem+0x270>)
 8005bb0:	220a      	movs	r2, #10
 8005bb2:	701a      	strb	r2, [r3, #0]
		}break;
 8005bb4:	e086      	b.n	8005cc4 <uartBootLoaderResponseCmdWriteMem+0x258>
		case 2:
		{
			state = 3;
 8005bb6:	4b49      	ldr	r3, [pc, #292]	; (8005cdc <uartBootLoaderResponseCmdWriteMem+0x270>)
 8005bb8:	2203      	movs	r2, #3
 8005bba:	701a      	strb	r2, [r3, #0]
		}break;
 8005bbc:	e085      	b.n	8005cca <uartBootLoaderResponseCmdWriteMem+0x25e>
		case 3:
		{
			uint8_t data[STM32_MAX_FRAME + 2];
			uint8_t rChecksum = 0;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112

			if(rBufferRxU2.len == STM32_MAX_FRAME + 2)
 8005bc4:	4b47      	ldr	r3, [pc, #284]	; (8005ce4 <uartBootLoaderResponseCmdWriteMem+0x278>)
 8005bc6:	889b      	ldrh	r3, [r3, #4]
 8005bc8:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8005bcc:	d17c      	bne.n	8005cc8 <uartBootLoaderResponseCmdWriteMem+0x25c>
			{
				for(uint16_t i = 0; i < STM32_MAX_FRAME + 2; i++)
 8005bce:	2300      	movs	r3, #0
 8005bd0:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
 8005bd4:	e013      	b.n	8005bfe <uartBootLoaderResponseCmdWriteMem+0x192>
				{
					if(ringBufferRead(&rBufferRxU2, &rData) == RING_BUFFER_OK)
 8005bd6:	f207 130b 	addw	r3, r7, #267	; 0x10b
 8005bda:	4619      	mov	r1, r3
 8005bdc:	4841      	ldr	r0, [pc, #260]	; (8005ce4 <uartBootLoaderResponseCmdWriteMem+0x278>)
 8005bde:	f7ff f9b7 	bl	8004f50 <ringBufferRead>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d105      	bne.n	8005bf4 <uartBootLoaderResponseCmdWriteMem+0x188>
					{
						data[i] = rData;
 8005be8:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8005bec:	f897 110b 	ldrb.w	r1, [r7, #267]	; 0x10b
 8005bf0:	463a      	mov	r2, r7
 8005bf2:	54d1      	strb	r1, [r2, r3]
				for(uint16_t i = 0; i < STM32_MAX_FRAME + 2; i++)
 8005bf4:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
 8005bfe:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8005c02:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8005c06:	d3e6      	bcc.n	8005bd6 <uartBootLoaderResponseCmdWriteMem+0x16a>
					}
				}
				/*data[0] : number of bytes
				data[1 - 256] : 256 byte data
				data[257] : checksum*/
				checksum = uartBootLoaderChecksumCalculator(0, data + 1, 256);
 8005c08:	463b      	mov	r3, r7
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c10:	4619      	mov	r1, r3
 8005c12:	2000      	movs	r0, #0
 8005c14:	f7ff fbc2 	bl	800539c <uartBootLoaderChecksumCalculator>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
				checksum ^= data[0];
 8005c1e:	463b      	mov	r3, r7
 8005c20:	781a      	ldrb	r2, [r3, #0]
 8005c22:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8005c26:	4053      	eors	r3, r2
 8005c28:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113

				rChecksum = data[STM32_MAX_FRAME + 1];
 8005c2c:	463b      	mov	r3, r7
 8005c2e:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8005c32:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112

				printf("\n[uartBootLoaderResponseCmdWriteMem] checksum = %d | rChecksum = %d\n", checksum, rChecksum);
 8005c36:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8005c3a:	f897 2112 	ldrb.w	r2, [r7, #274]	; 0x112
 8005c3e:	4619      	mov	r1, r3
 8005c40:	482d      	ldr	r0, [pc, #180]	; (8005cf8 <uartBootLoaderResponseCmdWriteMem+0x28c>)
 8005c42:	f001 f999 	bl	8006f78 <iprintf>

				if(checksum == rChecksum)
 8005c46:	f897 2113 	ldrb.w	r2, [r7, #275]	; 0x113
 8005c4a:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d12a      	bne.n	8005ca8 <uartBootLoaderResponseCmdWriteMem+0x23c>
				{
					uint32_t addressOffset = rAddress - oldRaddress;
 8005c52:	4b26      	ldr	r3, [pc, #152]	; (8005cec <uartBootLoaderResponseCmdWriteMem+0x280>)
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	4b29      	ldr	r3, [pc, #164]	; (8005cfc <uartBootLoaderResponseCmdWriteMem+0x290>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
					oldRaddress = rAddress;
 8005c60:	4b22      	ldr	r3, [pc, #136]	; (8005cec <uartBootLoaderResponseCmdWriteMem+0x280>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a25      	ldr	r2, [pc, #148]	; (8005cfc <uartBootLoaderResponseCmdWriteMem+0x290>)
 8005c66:	6013      	str	r3, [r2, #0]
					realAddress += addressOffset;
 8005c68:	4b25      	ldr	r3, [pc, #148]	; (8005d00 <uartBootLoaderResponseCmdWriteMem+0x294>)
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c70:	4413      	add	r3, r2
 8005c72:	4a23      	ldr	r2, [pc, #140]	; (8005d00 <uartBootLoaderResponseCmdWriteMem+0x294>)
 8005c74:	6013      	str	r3, [r2, #0]

					printf("\n[uartBootLoaderResponseCmdWriteMem] addressOffset = 0x%x | realAddress = 0x%x\n", (int)addressOffset, (int)realAddress);
 8005c76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c7a:	4a21      	ldr	r2, [pc, #132]	; (8005d00 <uartBootLoaderResponseCmdWriteMem+0x294>)
 8005c7c:	6812      	ldr	r2, [r2, #0]
 8005c7e:	4619      	mov	r1, r3
 8005c80:	4820      	ldr	r0, [pc, #128]	; (8005d04 <uartBootLoaderResponseCmdWriteMem+0x298>)
 8005c82:	f001 f979 	bl	8006f78 <iprintf>

					/// write to flash
					storageFlash_writeData(realAddress, data + 1, 255);
 8005c86:	4b1e      	ldr	r3, [pc, #120]	; (8005d00 <uartBootLoaderResponseCmdWriteMem+0x294>)
 8005c88:	6818      	ldr	r0, [r3, #0]
 8005c8a:	463b      	mov	r3, r7
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	22ff      	movs	r2, #255	; 0xff
 8005c90:	4619      	mov	r1, r3
 8005c92:	f7ff fa9f 	bl	80051d4 <storageFlash_writeData>

					/// send ack
					uartBootLoaderSendAck();
 8005c96:	f7ff fb25 	bl	80052e4 <uartBootLoaderSendAck>

					printf("\n[uartBootLoaderResponseCmdWriteMem] send Ack byte...\n");
 8005c9a:	4811      	ldr	r0, [pc, #68]	; (8005ce0 <uartBootLoaderResponseCmdWriteMem+0x274>)
 8005c9c:	f001 f9f2 	bl	8007084 <puts>
					state = 4;
 8005ca0:	4b0e      	ldr	r3, [pc, #56]	; (8005cdc <uartBootLoaderResponseCmdWriteMem+0x270>)
 8005ca2:	2204      	movs	r2, #4
 8005ca4:	701a      	strb	r2, [r3, #0]
					uartBootLoaderSendNack();

					printf("\n[uartBootLoaderResponseCmdWriteMem] state 3 send nack byte...\n");
				}
			}
		}break;
 8005ca6:	e00f      	b.n	8005cc8 <uartBootLoaderResponseCmdWriteMem+0x25c>
					uartBootLoaderSendNack();
 8005ca8:	f7ff fb3a 	bl	8005320 <uartBootLoaderSendNack>
					printf("\n[uartBootLoaderResponseCmdWriteMem] state 3 send nack byte...\n");
 8005cac:	4816      	ldr	r0, [pc, #88]	; (8005d08 <uartBootLoaderResponseCmdWriteMem+0x29c>)
 8005cae:	f001 f9e9 	bl	8007084 <puts>
		}break;
 8005cb2:	e009      	b.n	8005cc8 <uartBootLoaderResponseCmdWriteMem+0x25c>
		case 4:
		{
			state = 0;
 8005cb4:	4b09      	ldr	r3, [pc, #36]	; (8005cdc <uartBootLoaderResponseCmdWriteMem+0x270>)
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	701a      	strb	r2, [r3, #0]
			rAddress = 0;
 8005cba:	4b0c      	ldr	r3, [pc, #48]	; (8005cec <uartBootLoaderResponseCmdWriteMem+0x280>)
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	601a      	str	r2, [r3, #0]

			return true;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e003      	b.n	8005ccc <uartBootLoaderResponseCmdWriteMem+0x260>
		}break;
 8005cc4:	bf00      	nop
 8005cc6:	e000      	b.n	8005cca <uartBootLoaderResponseCmdWriteMem+0x25e>
		}break;
 8005cc8:	bf00      	nop
		}break;
	}

	return false;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	0800b3d8 	.word	0x0800b3d8
 8005cdc:	20000281 	.word	0x20000281
 8005ce0:	0800b488 	.word	0x0800b488
 8005ce4:	20001ba4 	.word	0x20001ba4
 8005ce8:	0800b4c0 	.word	0x0800b4c0
 8005cec:	20000284 	.word	0x20000284
 8005cf0:	0800b508 	.word	0x0800b508
 8005cf4:	0800b558 	.word	0x0800b558
 8005cf8:	0800b598 	.word	0x0800b598
 8005cfc:	20000064 	.word	0x20000064
 8005d00:	20000068 	.word	0x20000068
 8005d04:	0800b5e0 	.word	0x0800b5e0
 8005d08:	0800b630 	.word	0x0800b630

08005d0c <uartBootLoaderResponseCmdGo>:

/** @brief  uartBootLoaderResponseCmdGo
    @return bool
*/
static bool uartBootLoaderResponseCmdGo(void)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
	static uint8_t state = 0;
	uint8_t rData = 0;
 8005d12:	2300      	movs	r3, #0
 8005d14:	717b      	strb	r3, [r7, #5]
	uint8_t addressBuffer[5] = {0, 0, 0, 0, 0};
 8005d16:	4a43      	ldr	r2, [pc, #268]	; (8005e24 <uartBootLoaderResponseCmdGo+0x118>)
 8005d18:	463b      	mov	r3, r7
 8005d1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005d1e:	6018      	str	r0, [r3, #0]
 8005d20:	3304      	adds	r3, #4
 8005d22:	7019      	strb	r1, [r3, #0]
	uint32_t rAddress = 0;
 8005d24:	2300      	movs	r3, #0
 8005d26:	60bb      	str	r3, [r7, #8]

	switch(state)
 8005d28:	4b3f      	ldr	r3, [pc, #252]	; (8005e28 <uartBootLoaderResponseCmdGo+0x11c>)
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d06d      	beq.n	8005e0c <uartBootLoaderResponseCmdGo+0x100>
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	dc71      	bgt.n	8005e18 <uartBootLoaderResponseCmdGo+0x10c>
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d002      	beq.n	8005d3e <uartBootLoaderResponseCmdGo+0x32>
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d009      	beq.n	8005d50 <uartBootLoaderResponseCmdGo+0x44>
 8005d3c:	e06c      	b.n	8005e18 <uartBootLoaderResponseCmdGo+0x10c>
	{
		case 0:
		{
			/// response ack to host
			uartBootLoaderSendAck();
 8005d3e:	f7ff fad1 	bl	80052e4 <uartBootLoaderSendAck>
			printf("\n[uartBootLoaderResponseCmdGo] send Ack byte...\n");
 8005d42:	483a      	ldr	r0, [pc, #232]	; (8005e2c <uartBootLoaderResponseCmdGo+0x120>)
 8005d44:	f001 f99e 	bl	8007084 <puts>

			state = 1;
 8005d48:	4b37      	ldr	r3, [pc, #220]	; (8005e28 <uartBootLoaderResponseCmdGo+0x11c>)
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	701a      	strb	r2, [r3, #0]
		}break;
 8005d4e:	e063      	b.n	8005e18 <uartBootLoaderResponseCmdGo+0x10c>
		case 1:
		{
			if(rBufferRxU2.len == 5)
 8005d50:	4b37      	ldr	r3, [pc, #220]	; (8005e30 <uartBootLoaderResponseCmdGo+0x124>)
 8005d52:	889b      	ldrh	r3, [r3, #4]
 8005d54:	2b05      	cmp	r3, #5
 8005d56:	d15e      	bne.n	8005e16 <uartBootLoaderResponseCmdGo+0x10a>
			{
				for(uint8_t i = 0; i < 5; i++)
 8005d58:	2300      	movs	r3, #0
 8005d5a:	73fb      	strb	r3, [r7, #15]
 8005d5c:	e019      	b.n	8005d92 <uartBootLoaderResponseCmdGo+0x86>
				{
					if(ringBufferRead(&rBufferRxU2, &rData) == RING_BUFFER_OK)
 8005d5e:	1d7b      	adds	r3, r7, #5
 8005d60:	4619      	mov	r1, r3
 8005d62:	4833      	ldr	r0, [pc, #204]	; (8005e30 <uartBootLoaderResponseCmdGo+0x124>)
 8005d64:	f7ff f8f4 	bl	8004f50 <ringBufferRead>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d10e      	bne.n	8005d8c <uartBootLoaderResponseCmdGo+0x80>
					{
						addressBuffer[i] = rData;
 8005d6e:	7bfb      	ldrb	r3, [r7, #15]
 8005d70:	797a      	ldrb	r2, [r7, #5]
 8005d72:	f107 0110 	add.w	r1, r7, #16
 8005d76:	440b      	add	r3, r1
 8005d78:	f803 2c10 	strb.w	r2, [r3, #-16]
						printf("\n[uartBootLoaderResponseCmdGo] reciever byte = 0x%x | len = %d\n", rData, rBufferRxU2.len);
 8005d7c:	797b      	ldrb	r3, [r7, #5]
 8005d7e:	4619      	mov	r1, r3
 8005d80:	4b2b      	ldr	r3, [pc, #172]	; (8005e30 <uartBootLoaderResponseCmdGo+0x124>)
 8005d82:	889b      	ldrh	r3, [r3, #4]
 8005d84:	461a      	mov	r2, r3
 8005d86:	482b      	ldr	r0, [pc, #172]	; (8005e34 <uartBootLoaderResponseCmdGo+0x128>)
 8005d88:	f001 f8f6 	bl	8006f78 <iprintf>
				for(uint8_t i = 0; i < 5; i++)
 8005d8c:	7bfb      	ldrb	r3, [r7, #15]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	73fb      	strb	r3, [r7, #15]
 8005d92:	7bfb      	ldrb	r3, [r7, #15]
 8005d94:	2b04      	cmp	r3, #4
 8005d96:	d9e2      	bls.n	8005d5e <uartBootLoaderResponseCmdGo+0x52>
					}
				}

				rAddress = addressBuffer[0];
 8005d98:	783b      	ldrb	r3, [r7, #0]
 8005d9a:	60bb      	str	r3, [r7, #8]
				rAddress |= addressBuffer[1] << 8  ;
 8005d9c:	787b      	ldrb	r3, [r7, #1]
 8005d9e:	021b      	lsls	r3, r3, #8
 8005da0:	461a      	mov	r2, r3
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	60bb      	str	r3, [r7, #8]
				rAddress |= addressBuffer[2] << 16 ;
 8005da8:	78bb      	ldrb	r3, [r7, #2]
 8005daa:	041b      	lsls	r3, r3, #16
 8005dac:	461a      	mov	r2, r3
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	60bb      	str	r3, [r7, #8]
				rAddress |= addressBuffer[3] << 24 ;
 8005db4:	78fb      	ldrb	r3, [r7, #3]
 8005db6:	061b      	lsls	r3, r3, #24
 8005db8:	461a      	mov	r2, r3
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	60bb      	str	r3, [r7, #8]

				uint8_t checksum = uartBootLoaderChecksumCalculator(0, addressBuffer, 4);
 8005dc0:	463b      	mov	r3, r7
 8005dc2:	2204      	movs	r2, #4
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	2000      	movs	r0, #0
 8005dc8:	f7ff fae8 	bl	800539c <uartBootLoaderChecksumCalculator>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	71fb      	strb	r3, [r7, #7]
				uint8_t rChecksum = addressBuffer[4];
 8005dd0:	793b      	ldrb	r3, [r7, #4]
 8005dd2:	71bb      	strb	r3, [r7, #6]

				printf("\n[uartBootLoaderResponseCmdGo] checksum = 0x%x | rChecksum = %d\n", checksum, rChecksum);
 8005dd4:	79fb      	ldrb	r3, [r7, #7]
 8005dd6:	79ba      	ldrb	r2, [r7, #6]
 8005dd8:	4619      	mov	r1, r3
 8005dda:	4817      	ldr	r0, [pc, #92]	; (8005e38 <uartBootLoaderResponseCmdGo+0x12c>)
 8005ddc:	f001 f8cc 	bl	8006f78 <iprintf>

				if(checksum == rChecksum)
 8005de0:	79fa      	ldrb	r2, [r7, #7]
 8005de2:	79bb      	ldrb	r3, [r7, #6]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d108      	bne.n	8005dfa <uartBootLoaderResponseCmdGo+0xee>
				{
					/// send ack to host
					uartBootLoaderSendAck();
 8005de8:	f7ff fa7c 	bl	80052e4 <uartBootLoaderSendAck>
					printf("\n[uartBootLoaderResponseCmdGo] send Ack byte...\n");
 8005dec:	480f      	ldr	r0, [pc, #60]	; (8005e2c <uartBootLoaderResponseCmdGo+0x120>)
 8005dee:	f001 f949 	bl	8007084 <puts>

					state = 2;
 8005df2:	4b0d      	ldr	r3, [pc, #52]	; (8005e28 <uartBootLoaderResponseCmdGo+0x11c>)
 8005df4:	2202      	movs	r2, #2
 8005df6:	701a      	strb	r2, [r3, #0]

					printf("\n[uartBootLoaderResponseCmdGo] state 1 send nack byte...\n");
					state = 10;
				}
			}
		}break;
 8005df8:	e00d      	b.n	8005e16 <uartBootLoaderResponseCmdGo+0x10a>
					uartBootLoaderSendNack();
 8005dfa:	f7ff fa91 	bl	8005320 <uartBootLoaderSendNack>
					printf("\n[uartBootLoaderResponseCmdGo] state 1 send nack byte...\n");
 8005dfe:	480f      	ldr	r0, [pc, #60]	; (8005e3c <uartBootLoaderResponseCmdGo+0x130>)
 8005e00:	f001 f940 	bl	8007084 <puts>
					state = 10;
 8005e04:	4b08      	ldr	r3, [pc, #32]	; (8005e28 <uartBootLoaderResponseCmdGo+0x11c>)
 8005e06:	220a      	movs	r2, #10
 8005e08:	701a      	strb	r2, [r3, #0]
		}break;
 8005e0a:	e004      	b.n	8005e16 <uartBootLoaderResponseCmdGo+0x10a>
		case 2:
		{
			state = 0;
 8005e0c:	4b06      	ldr	r3, [pc, #24]	; (8005e28 <uartBootLoaderResponseCmdGo+0x11c>)
 8005e0e:	2200      	movs	r2, #0
 8005e10:	701a      	strb	r2, [r3, #0]

			return true;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e001      	b.n	8005e1a <uartBootLoaderResponseCmdGo+0x10e>
		}break;
 8005e16:	bf00      	nop
		}break;
	}

	return false;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	0800b3d8 	.word	0x0800b3d8
 8005e28:	20000288 	.word	0x20000288
 8005e2c:	0800b670 	.word	0x0800b670
 8005e30:	20001ba4 	.word	0x20001ba4
 8005e34:	0800b6a0 	.word	0x0800b6a0
 8005e38:	0800b6e0 	.word	0x0800b6e0
 8005e3c:	0800b724 	.word	0x0800b724

08005e40 <uartBootLoaderStateConnected>:

/** @brief  uartBootLoaderStateConnected
    @return bool
*/
static void uartBootLoaderStateConnected(uartBootLoader_t *boot)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]

	switch((uint8_t)boot->rCmd)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	789b      	ldrb	r3, [r3, #2]
 8005e4c:	2b0c      	cmp	r3, #12
 8005e4e:	f200 808b 	bhi.w	8005f68 <uartBootLoaderStateConnected+0x128>
 8005e52:	a201      	add	r2, pc, #4	; (adr r2, 8005e58 <uartBootLoaderStateConnected+0x18>)
 8005e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e58:	08005e8d 	.word	0x08005e8d
 8005e5c:	08005e9b 	.word	0x08005e9b
 8005e60:	08005ead 	.word	0x08005ead
 8005e64:	08005ebf 	.word	0x08005ebf
 8005e68:	08005ed1 	.word	0x08005ed1
 8005e6c:	08005ee3 	.word	0x08005ee3
 8005e70:	08005efb 	.word	0x08005efb
 8005e74:	08005f0d 	.word	0x08005f0d
 8005e78:	08005f43 	.word	0x08005f43
 8005e7c:	08005f43 	.word	0x08005f43
 8005e80:	08005f1f 	.word	0x08005f1f
 8005e84:	08005f31 	.word	0x08005f31
 8005e88:	08005f43 	.word	0x08005f43
	{
		case BOOTLOADER_CMD_NONE:
		{
			/// waitting cmd
			boot->rCmd = uartBootLoaderReadCmd();
 8005e8c:	f7ff faf4 	bl	8005478 <uartBootLoaderReadCmd>
 8005e90:	4603      	mov	r3, r0
 8005e92:	461a      	mov	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	709a      	strb	r2, [r3, #2]
		}break;
 8005e98:	e066      	b.n	8005f68 <uartBootLoaderStateConnected+0x128>
		case BOOTLOADER_CMD_GET:
		{
			if(uartBootLoaderResponseCmdGet() == true)
 8005e9a:	f7ff fb59 	bl	8005550 <uartBootLoaderResponseCmdGet>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d050      	beq.n	8005f46 <uartBootLoaderStateConnected+0x106>
			{
				boot->rCmd = BOOTLOADER_CMD_NONE;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	709a      	strb	r2, [r3, #2]
			}
		}break;
 8005eaa:	e04c      	b.n	8005f46 <uartBootLoaderStateConnected+0x106>
		case BOOTLOADER_CMD_GET_VER:
		{
			if(uartBootLoaderResponseCmdGetVer() == true)
 8005eac:	f7ff fb9c 	bl	80055e8 <uartBootLoaderResponseCmdGetVer>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d049      	beq.n	8005f4a <uartBootLoaderStateConnected+0x10a>
			{
				boot->rCmd = BOOTLOADER_CMD_NONE;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	709a      	strb	r2, [r3, #2]
			}
		}break;
 8005ebc:	e045      	b.n	8005f4a <uartBootLoaderStateConnected+0x10a>
		case BOOTLOADER_CMD_GET_ID:
		{
			if(uartBootLoaderResponseCmdGetId() == true)
 8005ebe:	f7ff fbb5 	bl	800562c <uartBootLoaderResponseCmdGetId>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d042      	beq.n	8005f4e <uartBootLoaderStateConnected+0x10e>
			{
				boot->rCmd = BOOTLOADER_CMD_NONE;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	709a      	strb	r2, [r3, #2]
			}
		}break;
 8005ece:	e03e      	b.n	8005f4e <uartBootLoaderStateConnected+0x10e>
		case BOOTLOADER_CMD_READ_MEMORY:
		{
			if(uartBootLoaderResponseCmdReadMem() == true)
 8005ed0:	f7ff fbce 	bl	8005670 <uartBootLoaderResponseCmdReadMem>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d03b      	beq.n	8005f52 <uartBootLoaderStateConnected+0x112>
			{
				boot->rCmd = BOOTLOADER_CMD_NONE;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	709a      	strb	r2, [r3, #2]
			}
		}break;
 8005ee0:	e037      	b.n	8005f52 <uartBootLoaderStateConnected+0x112>
		case BOOTLOADER_CMD_GO:
		{
			if(uartBootLoaderResponseCmdGo() == true)
 8005ee2:	f7ff ff13 	bl	8005d0c <uartBootLoaderResponseCmdGo>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d034      	beq.n	8005f56 <uartBootLoaderStateConnected+0x116>
			{
				boot->state = BOOTLOADER_STATE_DONE;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2204      	movs	r2, #4
 8005ef0:	705a      	strb	r2, [r3, #1]
				printf("\n[uartBootLoaderStateConnected] jum to application\n");
 8005ef2:	481f      	ldr	r0, [pc, #124]	; (8005f70 <uartBootLoaderStateConnected+0x130>)
 8005ef4:	f001 f8c6 	bl	8007084 <puts>
			}
		}break;
 8005ef8:	e02d      	b.n	8005f56 <uartBootLoaderStateConnected+0x116>
		case BOOTLOADER_CMD_WRITE_MEMORY:
		{
			if(uartBootLoaderResponseCmdWriteMem() == true)
 8005efa:	f7ff fdb7 	bl	8005a6c <uartBootLoaderResponseCmdWriteMem>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d02a      	beq.n	8005f5a <uartBootLoaderStateConnected+0x11a>
			{
				boot->rCmd = BOOTLOADER_CMD_NONE;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	709a      	strb	r2, [r3, #2]
			}
		}break;
 8005f0a:	e026      	b.n	8005f5a <uartBootLoaderStateConnected+0x11a>
		case BOOTLOADER_CMD_ERASE:
		{
			if(uartBootLoaderResponseCmdErase() == true)
 8005f0c:	f7ff fd38 	bl	8005980 <uartBootLoaderResponseCmdErase>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d023      	beq.n	8005f5e <uartBootLoaderStateConnected+0x11e>
			{
				boot->rCmd = BOOTLOADER_CMD_NONE;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	709a      	strb	r2, [r3, #2]
			}
		}break;
 8005f1c:	e01f      	b.n	8005f5e <uartBootLoaderStateConnected+0x11e>
		{

		}break;
		case BOOTLOADER_CMD_READ_PROTECT:
		{
			if(uartBootLoaderResponseCmdReadOP() == true)
 8005f1e:	f7ff fd15 	bl	800594c <uartBootLoaderResponseCmdReadOP>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d01c      	beq.n	8005f62 <uartBootLoaderStateConnected+0x122>
			{
				boot->rCmd = BOOTLOADER_CMD_NONE;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	709a      	strb	r2, [r3, #2]
			}
		}break;
 8005f2e:	e018      	b.n	8005f62 <uartBootLoaderStateConnected+0x122>
		case BOOTLOADER_CMD_READ_UNPROTECT:
		{
			if(uartBootLoaderResponseCmdReadOUP() == true)
 8005f30:	f7ff fd18 	bl	8005964 <uartBootLoaderResponseCmdReadOUP>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d015      	beq.n	8005f66 <uartBootLoaderStateConnected+0x126>
			{
				boot->rCmd = BOOTLOADER_CMD_NONE;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	709a      	strb	r2, [r3, #2]
			}
		}break;
 8005f40:	e011      	b.n	8005f66 <uartBootLoaderStateConnected+0x126>
		}break;
 8005f42:	bf00      	nop
 8005f44:	e010      	b.n	8005f68 <uartBootLoaderStateConnected+0x128>
		}break;
 8005f46:	bf00      	nop
 8005f48:	e00e      	b.n	8005f68 <uartBootLoaderStateConnected+0x128>
		}break;
 8005f4a:	bf00      	nop
 8005f4c:	e00c      	b.n	8005f68 <uartBootLoaderStateConnected+0x128>
		}break;
 8005f4e:	bf00      	nop
 8005f50:	e00a      	b.n	8005f68 <uartBootLoaderStateConnected+0x128>
		}break;
 8005f52:	bf00      	nop
 8005f54:	e008      	b.n	8005f68 <uartBootLoaderStateConnected+0x128>
		}break;
 8005f56:	bf00      	nop
 8005f58:	e006      	b.n	8005f68 <uartBootLoaderStateConnected+0x128>
		}break;
 8005f5a:	bf00      	nop
 8005f5c:	e004      	b.n	8005f68 <uartBootLoaderStateConnected+0x128>
		}break;
 8005f5e:	bf00      	nop
 8005f60:	e002      	b.n	8005f68 <uartBootLoaderStateConnected+0x128>
		}break;
 8005f62:	bf00      	nop
 8005f64:	e000      	b.n	8005f68 <uartBootLoaderStateConnected+0x128>
		}break;
 8005f66:	bf00      	nop
		case BOOTLOADER_CMD_GET_CHECKSUM:
		{

		}break;
	}
}
 8005f68:	bf00      	nop
 8005f6a:	3708      	adds	r7, #8
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	0800b760 	.word	0x0800b760

08005f74 <uartBootLoaderJumToApplication>:

/** @brief	uartBootLoaderJumToApplication
    @return none
*/
static void uartBootLoaderJumToApplication(void)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
	/* Turn off Peripheral, Clear Interrupt Flag*/
	HAL_RCC_DeInit();
 8005f7a:	f7fd fca5 	bl	80038c8 <HAL_RCC_DeInit>

	/* Clear Pending Interrupt Request, turn  off System Tick*/
	HAL_DeInit();
 8005f7e:	f7fb fdbf 	bl	8001b00 <HAL_DeInit>

	/* Turn off fault harder*/
	SCB->SHCSR &= ~( SCB_SHCSR_USGFAULTENA_Msk |\
 8005f82:	4b0c      	ldr	r3, [pc, #48]	; (8005fb4 <uartBootLoaderJumToApplication+0x40>)
 8005f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f86:	4a0b      	ldr	r2, [pc, #44]	; (8005fb4 <uartBootLoaderJumToApplication+0x40>)
 8005f88:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8005f8c:	6253      	str	r3, [r2, #36]	; 0x24
	SCB_SHCSR_BUSFAULTENA_Msk | \
	SCB_SHCSR_MEMFAULTENA_Msk ) ;

	/* Set Main Stack Pointer*/
	__set_MSP(*((volatile uint32_t*) ADDRESS_START_APPLICATION));
 8005f8e:	4b0a      	ldr	r3, [pc, #40]	; (8005fb8 <uartBootLoaderJumToApplication+0x44>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f383 8808 	msr	MSP, r3
}
 8005f9a:	bf00      	nop

	uint32_t JumpAddress = *((volatile uint32_t*) (ADDRESS_START_APPLICATION + 4));
 8005f9c:	4b07      	ldr	r3, [pc, #28]	; (8005fbc <uartBootLoaderJumToApplication+0x48>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	60fb      	str	r3, [r7, #12]

	/* Set Program Counter to Blink LED Apptication Address*/
	void (*reset_handler)(void) = (void*)JumpAddress;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	60bb      	str	r3, [r7, #8]
	reset_handler();
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	4798      	blx	r3
}
 8005faa:	bf00      	nop
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	e000ed00 	.word	0xe000ed00
 8005fb8:	08020000 	.word	0x08020000
 8005fbc:	08020004 	.word	0x08020004

08005fc0 <uartBootLoaderProcess>:

/** @brief  uartBootLoaderProcess
    @return none
*/
void uartBootLoaderProcess(void)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	af00      	add	r7, sp, #0

	switch(boot.state)
 8005fc4:	4b14      	ldr	r3, [pc, #80]	; (8006018 <uartBootLoaderProcess+0x58>)
 8005fc6:	785b      	ldrb	r3, [r3, #1]
 8005fc8:	2b05      	cmp	r3, #5
 8005fca:	d823      	bhi.n	8006014 <uartBootLoaderProcess+0x54>
 8005fcc:	a201      	add	r2, pc, #4	; (adr r2, 8005fd4 <uartBootLoaderProcess+0x14>)
 8005fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd2:	bf00      	nop
 8005fd4:	08005fed 	.word	0x08005fed
 8005fd8:	08006001 	.word	0x08006001
 8005fdc:	0800600f 	.word	0x0800600f
 8005fe0:	0800600f 	.word	0x0800600f
 8005fe4:	08006009 	.word	0x08006009
 8005fe8:	0800600f 	.word	0x0800600f
	{
		case BOOTLOADER_STATE_IDLE:
		{
			if(uartBootLoaderRecieverCmdConnect(&boot) == true)
 8005fec:	480a      	ldr	r0, [pc, #40]	; (8006018 <uartBootLoaderProcess+0x58>)
 8005fee:	f7ff f9f7 	bl	80053e0 <uartBootLoaderRecieverCmdConnect>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d00c      	beq.n	8006012 <uartBootLoaderProcess+0x52>
			{
				boot.state = BOOTLOADER_STATE_CONNECTED;
 8005ff8:	4b07      	ldr	r3, [pc, #28]	; (8006018 <uartBootLoaderProcess+0x58>)
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	705a      	strb	r2, [r3, #1]
			}
		}break;
 8005ffe:	e008      	b.n	8006012 <uartBootLoaderProcess+0x52>
		case BOOTLOADER_STATE_CONNECTED:
		{
			uartBootLoaderStateConnected(&boot);
 8006000:	4805      	ldr	r0, [pc, #20]	; (8006018 <uartBootLoaderProcess+0x58>)
 8006002:	f7ff ff1d 	bl	8005e40 <uartBootLoaderStateConnected>
		}break;
 8006006:	e005      	b.n	8006014 <uartBootLoaderProcess+0x54>
		{

		}break;
		case BOOTLOADER_STATE_DONE:
		{
			uartBootLoaderJumToApplication();
 8006008:	f7ff ffb4 	bl	8005f74 <uartBootLoaderJumToApplication>
		}break;
 800600c:	e002      	b.n	8006014 <uartBootLoaderProcess+0x54>
		}break;
 800600e:	bf00      	nop
 8006010:	e000      	b.n	8006014 <uartBootLoaderProcess+0x54>
		}break;
 8006012:	bf00      	nop
		case BOOTLOADER_STATE_ERROR:
		{

		}break;
	}
}
 8006014:	bf00      	nop
 8006016:	bd80      	pop	{r7, pc}
 8006018:	20001b84 	.word	0x20001b84

0800601c <HAL_UART_TxCpltCallback>:
#define __UART_TX_CALLBACK
/** @brief
    @return
*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
//
//    if(serial_port4.zPrivate.uartHandle.Instance == UART4)
//    {
//        serialPort_tx_finish(&serial_port4);
//    }
	if(huart->Instance == huart2.Instance)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	4b06      	ldr	r3, [pc, #24]	; (8006044 <HAL_UART_TxCpltCallback+0x28>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	429a      	cmp	r2, r3
 800602e:	d102      	bne.n	8006036 <HAL_UART_TxCpltCallback+0x1a>
	{
//		serialPort_tx_finish(&serial_port2);
		txComplete = true;
 8006030:	4b05      	ldr	r3, [pc, #20]	; (8006048 <HAL_UART_TxCpltCallback+0x2c>)
 8006032:	2201      	movs	r2, #1
 8006034:	701a      	strb	r2, [r3, #0]
	else if(huart->Instance == UART4)
	{
		serialPort_tx_finish(&serial_port4);
	}
#endif
}
 8006036:	bf00      	nop
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	200004fc 	.word	0x200004fc
 8006048:	20001cb8 	.word	0x20001cb8

0800604c <HAL_UART_RxCpltCallback>:
#define __UART_RX_CALLBACK
/** @brief
    @return
*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart2.Instance)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	4b06      	ldr	r3, [pc, #24]	; (8006074 <HAL_UART_RxCpltCallback+0x28>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	429a      	cmp	r2, r3
 800605e:	d105      	bne.n	800606c <HAL_UART_RxCpltCallback+0x20>
	{
		ringBufferWrite(&rBufferRxU2, usart2WData);
 8006060:	4b05      	ldr	r3, [pc, #20]	; (8006078 <HAL_UART_RxCpltCallback+0x2c>)
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	4619      	mov	r1, r3
 8006066:	4805      	ldr	r0, [pc, #20]	; (800607c <HAL_UART_RxCpltCallback+0x30>)
 8006068:	f7fe ff3c 	bl	8004ee4 <ringBufferWrite>
	else if(huart->Instance == huart4.Instance)
	{
		ringBufferWrite(&rBufferRxU4, wData);
	}
#endif
}
 800606c:	bf00      	nop
 800606e:	3708      	adds	r7, #8
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	200004fc 	.word	0x200004fc
 8006078:	20001cb9 	.word	0x20001cb9
 800607c:	20001ba4 	.word	0x20001ba4

08006080 <__errno>:
 8006080:	4b01      	ldr	r3, [pc, #4]	; (8006088 <__errno+0x8>)
 8006082:	6818      	ldr	r0, [r3, #0]
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	2000006c 	.word	0x2000006c

0800608c <__libc_init_array>:
 800608c:	b570      	push	{r4, r5, r6, lr}
 800608e:	4d0d      	ldr	r5, [pc, #52]	; (80060c4 <__libc_init_array+0x38>)
 8006090:	4c0d      	ldr	r4, [pc, #52]	; (80060c8 <__libc_init_array+0x3c>)
 8006092:	1b64      	subs	r4, r4, r5
 8006094:	10a4      	asrs	r4, r4, #2
 8006096:	2600      	movs	r6, #0
 8006098:	42a6      	cmp	r6, r4
 800609a:	d109      	bne.n	80060b0 <__libc_init_array+0x24>
 800609c:	4d0b      	ldr	r5, [pc, #44]	; (80060cc <__libc_init_array+0x40>)
 800609e:	4c0c      	ldr	r4, [pc, #48]	; (80060d0 <__libc_init_array+0x44>)
 80060a0:	f004 fda0 	bl	800abe4 <_init>
 80060a4:	1b64      	subs	r4, r4, r5
 80060a6:	10a4      	asrs	r4, r4, #2
 80060a8:	2600      	movs	r6, #0
 80060aa:	42a6      	cmp	r6, r4
 80060ac:	d105      	bne.n	80060ba <__libc_init_array+0x2e>
 80060ae:	bd70      	pop	{r4, r5, r6, pc}
 80060b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80060b4:	4798      	blx	r3
 80060b6:	3601      	adds	r6, #1
 80060b8:	e7ee      	b.n	8006098 <__libc_init_array+0xc>
 80060ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80060be:	4798      	blx	r3
 80060c0:	3601      	adds	r6, #1
 80060c2:	e7f2      	b.n	80060aa <__libc_init_array+0x1e>
 80060c4:	0800bc74 	.word	0x0800bc74
 80060c8:	0800bc74 	.word	0x0800bc74
 80060cc:	0800bc74 	.word	0x0800bc74
 80060d0:	0800bc78 	.word	0x0800bc78

080060d4 <malloc>:
 80060d4:	4b02      	ldr	r3, [pc, #8]	; (80060e0 <malloc+0xc>)
 80060d6:	4601      	mov	r1, r0
 80060d8:	6818      	ldr	r0, [r3, #0]
 80060da:	f000 b879 	b.w	80061d0 <_malloc_r>
 80060de:	bf00      	nop
 80060e0:	2000006c 	.word	0x2000006c

080060e4 <memcpy>:
 80060e4:	440a      	add	r2, r1
 80060e6:	4291      	cmp	r1, r2
 80060e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80060ec:	d100      	bne.n	80060f0 <memcpy+0xc>
 80060ee:	4770      	bx	lr
 80060f0:	b510      	push	{r4, lr}
 80060f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060fa:	4291      	cmp	r1, r2
 80060fc:	d1f9      	bne.n	80060f2 <memcpy+0xe>
 80060fe:	bd10      	pop	{r4, pc}

08006100 <memset>:
 8006100:	4402      	add	r2, r0
 8006102:	4603      	mov	r3, r0
 8006104:	4293      	cmp	r3, r2
 8006106:	d100      	bne.n	800610a <memset+0xa>
 8006108:	4770      	bx	lr
 800610a:	f803 1b01 	strb.w	r1, [r3], #1
 800610e:	e7f9      	b.n	8006104 <memset+0x4>

08006110 <_calloc_r>:
 8006110:	b513      	push	{r0, r1, r4, lr}
 8006112:	434a      	muls	r2, r1
 8006114:	4611      	mov	r1, r2
 8006116:	9201      	str	r2, [sp, #4]
 8006118:	f000 f85a 	bl	80061d0 <_malloc_r>
 800611c:	4604      	mov	r4, r0
 800611e:	b118      	cbz	r0, 8006128 <_calloc_r+0x18>
 8006120:	9a01      	ldr	r2, [sp, #4]
 8006122:	2100      	movs	r1, #0
 8006124:	f7ff ffec 	bl	8006100 <memset>
 8006128:	4620      	mov	r0, r4
 800612a:	b002      	add	sp, #8
 800612c:	bd10      	pop	{r4, pc}
	...

08006130 <_free_r>:
 8006130:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006132:	2900      	cmp	r1, #0
 8006134:	d048      	beq.n	80061c8 <_free_r+0x98>
 8006136:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800613a:	9001      	str	r0, [sp, #4]
 800613c:	2b00      	cmp	r3, #0
 800613e:	f1a1 0404 	sub.w	r4, r1, #4
 8006142:	bfb8      	it	lt
 8006144:	18e4      	addlt	r4, r4, r3
 8006146:	f003 fc3b 	bl	80099c0 <__malloc_lock>
 800614a:	4a20      	ldr	r2, [pc, #128]	; (80061cc <_free_r+0x9c>)
 800614c:	9801      	ldr	r0, [sp, #4]
 800614e:	6813      	ldr	r3, [r2, #0]
 8006150:	4615      	mov	r5, r2
 8006152:	b933      	cbnz	r3, 8006162 <_free_r+0x32>
 8006154:	6063      	str	r3, [r4, #4]
 8006156:	6014      	str	r4, [r2, #0]
 8006158:	b003      	add	sp, #12
 800615a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800615e:	f003 bc35 	b.w	80099cc <__malloc_unlock>
 8006162:	42a3      	cmp	r3, r4
 8006164:	d90b      	bls.n	800617e <_free_r+0x4e>
 8006166:	6821      	ldr	r1, [r4, #0]
 8006168:	1862      	adds	r2, r4, r1
 800616a:	4293      	cmp	r3, r2
 800616c:	bf04      	itt	eq
 800616e:	681a      	ldreq	r2, [r3, #0]
 8006170:	685b      	ldreq	r3, [r3, #4]
 8006172:	6063      	str	r3, [r4, #4]
 8006174:	bf04      	itt	eq
 8006176:	1852      	addeq	r2, r2, r1
 8006178:	6022      	streq	r2, [r4, #0]
 800617a:	602c      	str	r4, [r5, #0]
 800617c:	e7ec      	b.n	8006158 <_free_r+0x28>
 800617e:	461a      	mov	r2, r3
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	b10b      	cbz	r3, 8006188 <_free_r+0x58>
 8006184:	42a3      	cmp	r3, r4
 8006186:	d9fa      	bls.n	800617e <_free_r+0x4e>
 8006188:	6811      	ldr	r1, [r2, #0]
 800618a:	1855      	adds	r5, r2, r1
 800618c:	42a5      	cmp	r5, r4
 800618e:	d10b      	bne.n	80061a8 <_free_r+0x78>
 8006190:	6824      	ldr	r4, [r4, #0]
 8006192:	4421      	add	r1, r4
 8006194:	1854      	adds	r4, r2, r1
 8006196:	42a3      	cmp	r3, r4
 8006198:	6011      	str	r1, [r2, #0]
 800619a:	d1dd      	bne.n	8006158 <_free_r+0x28>
 800619c:	681c      	ldr	r4, [r3, #0]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	6053      	str	r3, [r2, #4]
 80061a2:	4421      	add	r1, r4
 80061a4:	6011      	str	r1, [r2, #0]
 80061a6:	e7d7      	b.n	8006158 <_free_r+0x28>
 80061a8:	d902      	bls.n	80061b0 <_free_r+0x80>
 80061aa:	230c      	movs	r3, #12
 80061ac:	6003      	str	r3, [r0, #0]
 80061ae:	e7d3      	b.n	8006158 <_free_r+0x28>
 80061b0:	6825      	ldr	r5, [r4, #0]
 80061b2:	1961      	adds	r1, r4, r5
 80061b4:	428b      	cmp	r3, r1
 80061b6:	bf04      	itt	eq
 80061b8:	6819      	ldreq	r1, [r3, #0]
 80061ba:	685b      	ldreq	r3, [r3, #4]
 80061bc:	6063      	str	r3, [r4, #4]
 80061be:	bf04      	itt	eq
 80061c0:	1949      	addeq	r1, r1, r5
 80061c2:	6021      	streq	r1, [r4, #0]
 80061c4:	6054      	str	r4, [r2, #4]
 80061c6:	e7c7      	b.n	8006158 <_free_r+0x28>
 80061c8:	b003      	add	sp, #12
 80061ca:	bd30      	pop	{r4, r5, pc}
 80061cc:	2000028c 	.word	0x2000028c

080061d0 <_malloc_r>:
 80061d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061d2:	1ccd      	adds	r5, r1, #3
 80061d4:	f025 0503 	bic.w	r5, r5, #3
 80061d8:	3508      	adds	r5, #8
 80061da:	2d0c      	cmp	r5, #12
 80061dc:	bf38      	it	cc
 80061de:	250c      	movcc	r5, #12
 80061e0:	2d00      	cmp	r5, #0
 80061e2:	4606      	mov	r6, r0
 80061e4:	db01      	blt.n	80061ea <_malloc_r+0x1a>
 80061e6:	42a9      	cmp	r1, r5
 80061e8:	d903      	bls.n	80061f2 <_malloc_r+0x22>
 80061ea:	230c      	movs	r3, #12
 80061ec:	6033      	str	r3, [r6, #0]
 80061ee:	2000      	movs	r0, #0
 80061f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061f2:	f003 fbe5 	bl	80099c0 <__malloc_lock>
 80061f6:	4921      	ldr	r1, [pc, #132]	; (800627c <_malloc_r+0xac>)
 80061f8:	680a      	ldr	r2, [r1, #0]
 80061fa:	4614      	mov	r4, r2
 80061fc:	b99c      	cbnz	r4, 8006226 <_malloc_r+0x56>
 80061fe:	4f20      	ldr	r7, [pc, #128]	; (8006280 <_malloc_r+0xb0>)
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	b923      	cbnz	r3, 800620e <_malloc_r+0x3e>
 8006204:	4621      	mov	r1, r4
 8006206:	4630      	mov	r0, r6
 8006208:	f000 ff44 	bl	8007094 <_sbrk_r>
 800620c:	6038      	str	r0, [r7, #0]
 800620e:	4629      	mov	r1, r5
 8006210:	4630      	mov	r0, r6
 8006212:	f000 ff3f 	bl	8007094 <_sbrk_r>
 8006216:	1c43      	adds	r3, r0, #1
 8006218:	d123      	bne.n	8006262 <_malloc_r+0x92>
 800621a:	230c      	movs	r3, #12
 800621c:	6033      	str	r3, [r6, #0]
 800621e:	4630      	mov	r0, r6
 8006220:	f003 fbd4 	bl	80099cc <__malloc_unlock>
 8006224:	e7e3      	b.n	80061ee <_malloc_r+0x1e>
 8006226:	6823      	ldr	r3, [r4, #0]
 8006228:	1b5b      	subs	r3, r3, r5
 800622a:	d417      	bmi.n	800625c <_malloc_r+0x8c>
 800622c:	2b0b      	cmp	r3, #11
 800622e:	d903      	bls.n	8006238 <_malloc_r+0x68>
 8006230:	6023      	str	r3, [r4, #0]
 8006232:	441c      	add	r4, r3
 8006234:	6025      	str	r5, [r4, #0]
 8006236:	e004      	b.n	8006242 <_malloc_r+0x72>
 8006238:	6863      	ldr	r3, [r4, #4]
 800623a:	42a2      	cmp	r2, r4
 800623c:	bf0c      	ite	eq
 800623e:	600b      	streq	r3, [r1, #0]
 8006240:	6053      	strne	r3, [r2, #4]
 8006242:	4630      	mov	r0, r6
 8006244:	f003 fbc2 	bl	80099cc <__malloc_unlock>
 8006248:	f104 000b 	add.w	r0, r4, #11
 800624c:	1d23      	adds	r3, r4, #4
 800624e:	f020 0007 	bic.w	r0, r0, #7
 8006252:	1ac2      	subs	r2, r0, r3
 8006254:	d0cc      	beq.n	80061f0 <_malloc_r+0x20>
 8006256:	1a1b      	subs	r3, r3, r0
 8006258:	50a3      	str	r3, [r4, r2]
 800625a:	e7c9      	b.n	80061f0 <_malloc_r+0x20>
 800625c:	4622      	mov	r2, r4
 800625e:	6864      	ldr	r4, [r4, #4]
 8006260:	e7cc      	b.n	80061fc <_malloc_r+0x2c>
 8006262:	1cc4      	adds	r4, r0, #3
 8006264:	f024 0403 	bic.w	r4, r4, #3
 8006268:	42a0      	cmp	r0, r4
 800626a:	d0e3      	beq.n	8006234 <_malloc_r+0x64>
 800626c:	1a21      	subs	r1, r4, r0
 800626e:	4630      	mov	r0, r6
 8006270:	f000 ff10 	bl	8007094 <_sbrk_r>
 8006274:	3001      	adds	r0, #1
 8006276:	d1dd      	bne.n	8006234 <_malloc_r+0x64>
 8006278:	e7cf      	b.n	800621a <_malloc_r+0x4a>
 800627a:	bf00      	nop
 800627c:	2000028c 	.word	0x2000028c
 8006280:	20000290 	.word	0x20000290

08006284 <__cvt>:
 8006284:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006288:	ec55 4b10 	vmov	r4, r5, d0
 800628c:	2d00      	cmp	r5, #0
 800628e:	460e      	mov	r6, r1
 8006290:	4619      	mov	r1, r3
 8006292:	462b      	mov	r3, r5
 8006294:	bfbb      	ittet	lt
 8006296:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800629a:	461d      	movlt	r5, r3
 800629c:	2300      	movge	r3, #0
 800629e:	232d      	movlt	r3, #45	; 0x2d
 80062a0:	700b      	strb	r3, [r1, #0]
 80062a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062a4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80062a8:	4691      	mov	r9, r2
 80062aa:	f023 0820 	bic.w	r8, r3, #32
 80062ae:	bfbc      	itt	lt
 80062b0:	4622      	movlt	r2, r4
 80062b2:	4614      	movlt	r4, r2
 80062b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80062b8:	d005      	beq.n	80062c6 <__cvt+0x42>
 80062ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80062be:	d100      	bne.n	80062c2 <__cvt+0x3e>
 80062c0:	3601      	adds	r6, #1
 80062c2:	2102      	movs	r1, #2
 80062c4:	e000      	b.n	80062c8 <__cvt+0x44>
 80062c6:	2103      	movs	r1, #3
 80062c8:	ab03      	add	r3, sp, #12
 80062ca:	9301      	str	r3, [sp, #4]
 80062cc:	ab02      	add	r3, sp, #8
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	ec45 4b10 	vmov	d0, r4, r5
 80062d4:	4653      	mov	r3, sl
 80062d6:	4632      	mov	r2, r6
 80062d8:	f001 ffe2 	bl	80082a0 <_dtoa_r>
 80062dc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80062e0:	4607      	mov	r7, r0
 80062e2:	d102      	bne.n	80062ea <__cvt+0x66>
 80062e4:	f019 0f01 	tst.w	r9, #1
 80062e8:	d022      	beq.n	8006330 <__cvt+0xac>
 80062ea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80062ee:	eb07 0906 	add.w	r9, r7, r6
 80062f2:	d110      	bne.n	8006316 <__cvt+0x92>
 80062f4:	783b      	ldrb	r3, [r7, #0]
 80062f6:	2b30      	cmp	r3, #48	; 0x30
 80062f8:	d10a      	bne.n	8006310 <__cvt+0x8c>
 80062fa:	2200      	movs	r2, #0
 80062fc:	2300      	movs	r3, #0
 80062fe:	4620      	mov	r0, r4
 8006300:	4629      	mov	r1, r5
 8006302:	f7fa fbe1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006306:	b918      	cbnz	r0, 8006310 <__cvt+0x8c>
 8006308:	f1c6 0601 	rsb	r6, r6, #1
 800630c:	f8ca 6000 	str.w	r6, [sl]
 8006310:	f8da 3000 	ldr.w	r3, [sl]
 8006314:	4499      	add	r9, r3
 8006316:	2200      	movs	r2, #0
 8006318:	2300      	movs	r3, #0
 800631a:	4620      	mov	r0, r4
 800631c:	4629      	mov	r1, r5
 800631e:	f7fa fbd3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006322:	b108      	cbz	r0, 8006328 <__cvt+0xa4>
 8006324:	f8cd 900c 	str.w	r9, [sp, #12]
 8006328:	2230      	movs	r2, #48	; 0x30
 800632a:	9b03      	ldr	r3, [sp, #12]
 800632c:	454b      	cmp	r3, r9
 800632e:	d307      	bcc.n	8006340 <__cvt+0xbc>
 8006330:	9b03      	ldr	r3, [sp, #12]
 8006332:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006334:	1bdb      	subs	r3, r3, r7
 8006336:	4638      	mov	r0, r7
 8006338:	6013      	str	r3, [r2, #0]
 800633a:	b004      	add	sp, #16
 800633c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006340:	1c59      	adds	r1, r3, #1
 8006342:	9103      	str	r1, [sp, #12]
 8006344:	701a      	strb	r2, [r3, #0]
 8006346:	e7f0      	b.n	800632a <__cvt+0xa6>

08006348 <__exponent>:
 8006348:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800634a:	4603      	mov	r3, r0
 800634c:	2900      	cmp	r1, #0
 800634e:	bfb8      	it	lt
 8006350:	4249      	neglt	r1, r1
 8006352:	f803 2b02 	strb.w	r2, [r3], #2
 8006356:	bfb4      	ite	lt
 8006358:	222d      	movlt	r2, #45	; 0x2d
 800635a:	222b      	movge	r2, #43	; 0x2b
 800635c:	2909      	cmp	r1, #9
 800635e:	7042      	strb	r2, [r0, #1]
 8006360:	dd2a      	ble.n	80063b8 <__exponent+0x70>
 8006362:	f10d 0407 	add.w	r4, sp, #7
 8006366:	46a4      	mov	ip, r4
 8006368:	270a      	movs	r7, #10
 800636a:	46a6      	mov	lr, r4
 800636c:	460a      	mov	r2, r1
 800636e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006372:	fb07 1516 	mls	r5, r7, r6, r1
 8006376:	3530      	adds	r5, #48	; 0x30
 8006378:	2a63      	cmp	r2, #99	; 0x63
 800637a:	f104 34ff 	add.w	r4, r4, #4294967295
 800637e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006382:	4631      	mov	r1, r6
 8006384:	dcf1      	bgt.n	800636a <__exponent+0x22>
 8006386:	3130      	adds	r1, #48	; 0x30
 8006388:	f1ae 0502 	sub.w	r5, lr, #2
 800638c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006390:	1c44      	adds	r4, r0, #1
 8006392:	4629      	mov	r1, r5
 8006394:	4561      	cmp	r1, ip
 8006396:	d30a      	bcc.n	80063ae <__exponent+0x66>
 8006398:	f10d 0209 	add.w	r2, sp, #9
 800639c:	eba2 020e 	sub.w	r2, r2, lr
 80063a0:	4565      	cmp	r5, ip
 80063a2:	bf88      	it	hi
 80063a4:	2200      	movhi	r2, #0
 80063a6:	4413      	add	r3, r2
 80063a8:	1a18      	subs	r0, r3, r0
 80063aa:	b003      	add	sp, #12
 80063ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063b2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80063b6:	e7ed      	b.n	8006394 <__exponent+0x4c>
 80063b8:	2330      	movs	r3, #48	; 0x30
 80063ba:	3130      	adds	r1, #48	; 0x30
 80063bc:	7083      	strb	r3, [r0, #2]
 80063be:	70c1      	strb	r1, [r0, #3]
 80063c0:	1d03      	adds	r3, r0, #4
 80063c2:	e7f1      	b.n	80063a8 <__exponent+0x60>

080063c4 <_printf_float>:
 80063c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c8:	ed2d 8b02 	vpush	{d8}
 80063cc:	b08d      	sub	sp, #52	; 0x34
 80063ce:	460c      	mov	r4, r1
 80063d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80063d4:	4616      	mov	r6, r2
 80063d6:	461f      	mov	r7, r3
 80063d8:	4605      	mov	r5, r0
 80063da:	f003 fa73 	bl	80098c4 <_localeconv_r>
 80063de:	f8d0 a000 	ldr.w	sl, [r0]
 80063e2:	4650      	mov	r0, sl
 80063e4:	f7f9 fef4 	bl	80001d0 <strlen>
 80063e8:	2300      	movs	r3, #0
 80063ea:	930a      	str	r3, [sp, #40]	; 0x28
 80063ec:	6823      	ldr	r3, [r4, #0]
 80063ee:	9305      	str	r3, [sp, #20]
 80063f0:	f8d8 3000 	ldr.w	r3, [r8]
 80063f4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80063f8:	3307      	adds	r3, #7
 80063fa:	f023 0307 	bic.w	r3, r3, #7
 80063fe:	f103 0208 	add.w	r2, r3, #8
 8006402:	f8c8 2000 	str.w	r2, [r8]
 8006406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800640e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006412:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006416:	9307      	str	r3, [sp, #28]
 8006418:	f8cd 8018 	str.w	r8, [sp, #24]
 800641c:	ee08 0a10 	vmov	s16, r0
 8006420:	4b9f      	ldr	r3, [pc, #636]	; (80066a0 <_printf_float+0x2dc>)
 8006422:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006426:	f04f 32ff 	mov.w	r2, #4294967295
 800642a:	f7fa fb7f 	bl	8000b2c <__aeabi_dcmpun>
 800642e:	bb88      	cbnz	r0, 8006494 <_printf_float+0xd0>
 8006430:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006434:	4b9a      	ldr	r3, [pc, #616]	; (80066a0 <_printf_float+0x2dc>)
 8006436:	f04f 32ff 	mov.w	r2, #4294967295
 800643a:	f7fa fb59 	bl	8000af0 <__aeabi_dcmple>
 800643e:	bb48      	cbnz	r0, 8006494 <_printf_float+0xd0>
 8006440:	2200      	movs	r2, #0
 8006442:	2300      	movs	r3, #0
 8006444:	4640      	mov	r0, r8
 8006446:	4649      	mov	r1, r9
 8006448:	f7fa fb48 	bl	8000adc <__aeabi_dcmplt>
 800644c:	b110      	cbz	r0, 8006454 <_printf_float+0x90>
 800644e:	232d      	movs	r3, #45	; 0x2d
 8006450:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006454:	4b93      	ldr	r3, [pc, #588]	; (80066a4 <_printf_float+0x2e0>)
 8006456:	4894      	ldr	r0, [pc, #592]	; (80066a8 <_printf_float+0x2e4>)
 8006458:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800645c:	bf94      	ite	ls
 800645e:	4698      	movls	r8, r3
 8006460:	4680      	movhi	r8, r0
 8006462:	2303      	movs	r3, #3
 8006464:	6123      	str	r3, [r4, #16]
 8006466:	9b05      	ldr	r3, [sp, #20]
 8006468:	f023 0204 	bic.w	r2, r3, #4
 800646c:	6022      	str	r2, [r4, #0]
 800646e:	f04f 0900 	mov.w	r9, #0
 8006472:	9700      	str	r7, [sp, #0]
 8006474:	4633      	mov	r3, r6
 8006476:	aa0b      	add	r2, sp, #44	; 0x2c
 8006478:	4621      	mov	r1, r4
 800647a:	4628      	mov	r0, r5
 800647c:	f000 f9d8 	bl	8006830 <_printf_common>
 8006480:	3001      	adds	r0, #1
 8006482:	f040 8090 	bne.w	80065a6 <_printf_float+0x1e2>
 8006486:	f04f 30ff 	mov.w	r0, #4294967295
 800648a:	b00d      	add	sp, #52	; 0x34
 800648c:	ecbd 8b02 	vpop	{d8}
 8006490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006494:	4642      	mov	r2, r8
 8006496:	464b      	mov	r3, r9
 8006498:	4640      	mov	r0, r8
 800649a:	4649      	mov	r1, r9
 800649c:	f7fa fb46 	bl	8000b2c <__aeabi_dcmpun>
 80064a0:	b140      	cbz	r0, 80064b4 <_printf_float+0xf0>
 80064a2:	464b      	mov	r3, r9
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	bfbc      	itt	lt
 80064a8:	232d      	movlt	r3, #45	; 0x2d
 80064aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80064ae:	487f      	ldr	r0, [pc, #508]	; (80066ac <_printf_float+0x2e8>)
 80064b0:	4b7f      	ldr	r3, [pc, #508]	; (80066b0 <_printf_float+0x2ec>)
 80064b2:	e7d1      	b.n	8006458 <_printf_float+0x94>
 80064b4:	6863      	ldr	r3, [r4, #4]
 80064b6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80064ba:	9206      	str	r2, [sp, #24]
 80064bc:	1c5a      	adds	r2, r3, #1
 80064be:	d13f      	bne.n	8006540 <_printf_float+0x17c>
 80064c0:	2306      	movs	r3, #6
 80064c2:	6063      	str	r3, [r4, #4]
 80064c4:	9b05      	ldr	r3, [sp, #20]
 80064c6:	6861      	ldr	r1, [r4, #4]
 80064c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80064cc:	2300      	movs	r3, #0
 80064ce:	9303      	str	r3, [sp, #12]
 80064d0:	ab0a      	add	r3, sp, #40	; 0x28
 80064d2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80064d6:	ab09      	add	r3, sp, #36	; 0x24
 80064d8:	ec49 8b10 	vmov	d0, r8, r9
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	6022      	str	r2, [r4, #0]
 80064e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80064e4:	4628      	mov	r0, r5
 80064e6:	f7ff fecd 	bl	8006284 <__cvt>
 80064ea:	9b06      	ldr	r3, [sp, #24]
 80064ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80064ee:	2b47      	cmp	r3, #71	; 0x47
 80064f0:	4680      	mov	r8, r0
 80064f2:	d108      	bne.n	8006506 <_printf_float+0x142>
 80064f4:	1cc8      	adds	r0, r1, #3
 80064f6:	db02      	blt.n	80064fe <_printf_float+0x13a>
 80064f8:	6863      	ldr	r3, [r4, #4]
 80064fa:	4299      	cmp	r1, r3
 80064fc:	dd41      	ble.n	8006582 <_printf_float+0x1be>
 80064fe:	f1ab 0b02 	sub.w	fp, fp, #2
 8006502:	fa5f fb8b 	uxtb.w	fp, fp
 8006506:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800650a:	d820      	bhi.n	800654e <_printf_float+0x18a>
 800650c:	3901      	subs	r1, #1
 800650e:	465a      	mov	r2, fp
 8006510:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006514:	9109      	str	r1, [sp, #36]	; 0x24
 8006516:	f7ff ff17 	bl	8006348 <__exponent>
 800651a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800651c:	1813      	adds	r3, r2, r0
 800651e:	2a01      	cmp	r2, #1
 8006520:	4681      	mov	r9, r0
 8006522:	6123      	str	r3, [r4, #16]
 8006524:	dc02      	bgt.n	800652c <_printf_float+0x168>
 8006526:	6822      	ldr	r2, [r4, #0]
 8006528:	07d2      	lsls	r2, r2, #31
 800652a:	d501      	bpl.n	8006530 <_printf_float+0x16c>
 800652c:	3301      	adds	r3, #1
 800652e:	6123      	str	r3, [r4, #16]
 8006530:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006534:	2b00      	cmp	r3, #0
 8006536:	d09c      	beq.n	8006472 <_printf_float+0xae>
 8006538:	232d      	movs	r3, #45	; 0x2d
 800653a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800653e:	e798      	b.n	8006472 <_printf_float+0xae>
 8006540:	9a06      	ldr	r2, [sp, #24]
 8006542:	2a47      	cmp	r2, #71	; 0x47
 8006544:	d1be      	bne.n	80064c4 <_printf_float+0x100>
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1bc      	bne.n	80064c4 <_printf_float+0x100>
 800654a:	2301      	movs	r3, #1
 800654c:	e7b9      	b.n	80064c2 <_printf_float+0xfe>
 800654e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006552:	d118      	bne.n	8006586 <_printf_float+0x1c2>
 8006554:	2900      	cmp	r1, #0
 8006556:	6863      	ldr	r3, [r4, #4]
 8006558:	dd0b      	ble.n	8006572 <_printf_float+0x1ae>
 800655a:	6121      	str	r1, [r4, #16]
 800655c:	b913      	cbnz	r3, 8006564 <_printf_float+0x1a0>
 800655e:	6822      	ldr	r2, [r4, #0]
 8006560:	07d0      	lsls	r0, r2, #31
 8006562:	d502      	bpl.n	800656a <_printf_float+0x1a6>
 8006564:	3301      	adds	r3, #1
 8006566:	440b      	add	r3, r1
 8006568:	6123      	str	r3, [r4, #16]
 800656a:	65a1      	str	r1, [r4, #88]	; 0x58
 800656c:	f04f 0900 	mov.w	r9, #0
 8006570:	e7de      	b.n	8006530 <_printf_float+0x16c>
 8006572:	b913      	cbnz	r3, 800657a <_printf_float+0x1b6>
 8006574:	6822      	ldr	r2, [r4, #0]
 8006576:	07d2      	lsls	r2, r2, #31
 8006578:	d501      	bpl.n	800657e <_printf_float+0x1ba>
 800657a:	3302      	adds	r3, #2
 800657c:	e7f4      	b.n	8006568 <_printf_float+0x1a4>
 800657e:	2301      	movs	r3, #1
 8006580:	e7f2      	b.n	8006568 <_printf_float+0x1a4>
 8006582:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006588:	4299      	cmp	r1, r3
 800658a:	db05      	blt.n	8006598 <_printf_float+0x1d4>
 800658c:	6823      	ldr	r3, [r4, #0]
 800658e:	6121      	str	r1, [r4, #16]
 8006590:	07d8      	lsls	r0, r3, #31
 8006592:	d5ea      	bpl.n	800656a <_printf_float+0x1a6>
 8006594:	1c4b      	adds	r3, r1, #1
 8006596:	e7e7      	b.n	8006568 <_printf_float+0x1a4>
 8006598:	2900      	cmp	r1, #0
 800659a:	bfd4      	ite	le
 800659c:	f1c1 0202 	rsble	r2, r1, #2
 80065a0:	2201      	movgt	r2, #1
 80065a2:	4413      	add	r3, r2
 80065a4:	e7e0      	b.n	8006568 <_printf_float+0x1a4>
 80065a6:	6823      	ldr	r3, [r4, #0]
 80065a8:	055a      	lsls	r2, r3, #21
 80065aa:	d407      	bmi.n	80065bc <_printf_float+0x1f8>
 80065ac:	6923      	ldr	r3, [r4, #16]
 80065ae:	4642      	mov	r2, r8
 80065b0:	4631      	mov	r1, r6
 80065b2:	4628      	mov	r0, r5
 80065b4:	47b8      	blx	r7
 80065b6:	3001      	adds	r0, #1
 80065b8:	d12c      	bne.n	8006614 <_printf_float+0x250>
 80065ba:	e764      	b.n	8006486 <_printf_float+0xc2>
 80065bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80065c0:	f240 80e0 	bls.w	8006784 <_printf_float+0x3c0>
 80065c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80065c8:	2200      	movs	r2, #0
 80065ca:	2300      	movs	r3, #0
 80065cc:	f7fa fa7c 	bl	8000ac8 <__aeabi_dcmpeq>
 80065d0:	2800      	cmp	r0, #0
 80065d2:	d034      	beq.n	800663e <_printf_float+0x27a>
 80065d4:	4a37      	ldr	r2, [pc, #220]	; (80066b4 <_printf_float+0x2f0>)
 80065d6:	2301      	movs	r3, #1
 80065d8:	4631      	mov	r1, r6
 80065da:	4628      	mov	r0, r5
 80065dc:	47b8      	blx	r7
 80065de:	3001      	adds	r0, #1
 80065e0:	f43f af51 	beq.w	8006486 <_printf_float+0xc2>
 80065e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065e8:	429a      	cmp	r2, r3
 80065ea:	db02      	blt.n	80065f2 <_printf_float+0x22e>
 80065ec:	6823      	ldr	r3, [r4, #0]
 80065ee:	07d8      	lsls	r0, r3, #31
 80065f0:	d510      	bpl.n	8006614 <_printf_float+0x250>
 80065f2:	ee18 3a10 	vmov	r3, s16
 80065f6:	4652      	mov	r2, sl
 80065f8:	4631      	mov	r1, r6
 80065fa:	4628      	mov	r0, r5
 80065fc:	47b8      	blx	r7
 80065fe:	3001      	adds	r0, #1
 8006600:	f43f af41 	beq.w	8006486 <_printf_float+0xc2>
 8006604:	f04f 0800 	mov.w	r8, #0
 8006608:	f104 091a 	add.w	r9, r4, #26
 800660c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800660e:	3b01      	subs	r3, #1
 8006610:	4543      	cmp	r3, r8
 8006612:	dc09      	bgt.n	8006628 <_printf_float+0x264>
 8006614:	6823      	ldr	r3, [r4, #0]
 8006616:	079b      	lsls	r3, r3, #30
 8006618:	f100 8105 	bmi.w	8006826 <_printf_float+0x462>
 800661c:	68e0      	ldr	r0, [r4, #12]
 800661e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006620:	4298      	cmp	r0, r3
 8006622:	bfb8      	it	lt
 8006624:	4618      	movlt	r0, r3
 8006626:	e730      	b.n	800648a <_printf_float+0xc6>
 8006628:	2301      	movs	r3, #1
 800662a:	464a      	mov	r2, r9
 800662c:	4631      	mov	r1, r6
 800662e:	4628      	mov	r0, r5
 8006630:	47b8      	blx	r7
 8006632:	3001      	adds	r0, #1
 8006634:	f43f af27 	beq.w	8006486 <_printf_float+0xc2>
 8006638:	f108 0801 	add.w	r8, r8, #1
 800663c:	e7e6      	b.n	800660c <_printf_float+0x248>
 800663e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006640:	2b00      	cmp	r3, #0
 8006642:	dc39      	bgt.n	80066b8 <_printf_float+0x2f4>
 8006644:	4a1b      	ldr	r2, [pc, #108]	; (80066b4 <_printf_float+0x2f0>)
 8006646:	2301      	movs	r3, #1
 8006648:	4631      	mov	r1, r6
 800664a:	4628      	mov	r0, r5
 800664c:	47b8      	blx	r7
 800664e:	3001      	adds	r0, #1
 8006650:	f43f af19 	beq.w	8006486 <_printf_float+0xc2>
 8006654:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006658:	4313      	orrs	r3, r2
 800665a:	d102      	bne.n	8006662 <_printf_float+0x29e>
 800665c:	6823      	ldr	r3, [r4, #0]
 800665e:	07d9      	lsls	r1, r3, #31
 8006660:	d5d8      	bpl.n	8006614 <_printf_float+0x250>
 8006662:	ee18 3a10 	vmov	r3, s16
 8006666:	4652      	mov	r2, sl
 8006668:	4631      	mov	r1, r6
 800666a:	4628      	mov	r0, r5
 800666c:	47b8      	blx	r7
 800666e:	3001      	adds	r0, #1
 8006670:	f43f af09 	beq.w	8006486 <_printf_float+0xc2>
 8006674:	f04f 0900 	mov.w	r9, #0
 8006678:	f104 0a1a 	add.w	sl, r4, #26
 800667c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800667e:	425b      	negs	r3, r3
 8006680:	454b      	cmp	r3, r9
 8006682:	dc01      	bgt.n	8006688 <_printf_float+0x2c4>
 8006684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006686:	e792      	b.n	80065ae <_printf_float+0x1ea>
 8006688:	2301      	movs	r3, #1
 800668a:	4652      	mov	r2, sl
 800668c:	4631      	mov	r1, r6
 800668e:	4628      	mov	r0, r5
 8006690:	47b8      	blx	r7
 8006692:	3001      	adds	r0, #1
 8006694:	f43f aef7 	beq.w	8006486 <_printf_float+0xc2>
 8006698:	f109 0901 	add.w	r9, r9, #1
 800669c:	e7ee      	b.n	800667c <_printf_float+0x2b8>
 800669e:	bf00      	nop
 80066a0:	7fefffff 	.word	0x7fefffff
 80066a4:	0800b7b8 	.word	0x0800b7b8
 80066a8:	0800b7bc 	.word	0x0800b7bc
 80066ac:	0800b7c4 	.word	0x0800b7c4
 80066b0:	0800b7c0 	.word	0x0800b7c0
 80066b4:	0800b7c8 	.word	0x0800b7c8
 80066b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80066bc:	429a      	cmp	r2, r3
 80066be:	bfa8      	it	ge
 80066c0:	461a      	movge	r2, r3
 80066c2:	2a00      	cmp	r2, #0
 80066c4:	4691      	mov	r9, r2
 80066c6:	dc37      	bgt.n	8006738 <_printf_float+0x374>
 80066c8:	f04f 0b00 	mov.w	fp, #0
 80066cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066d0:	f104 021a 	add.w	r2, r4, #26
 80066d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80066d6:	9305      	str	r3, [sp, #20]
 80066d8:	eba3 0309 	sub.w	r3, r3, r9
 80066dc:	455b      	cmp	r3, fp
 80066de:	dc33      	bgt.n	8006748 <_printf_float+0x384>
 80066e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066e4:	429a      	cmp	r2, r3
 80066e6:	db3b      	blt.n	8006760 <_printf_float+0x39c>
 80066e8:	6823      	ldr	r3, [r4, #0]
 80066ea:	07da      	lsls	r2, r3, #31
 80066ec:	d438      	bmi.n	8006760 <_printf_float+0x39c>
 80066ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066f0:	9b05      	ldr	r3, [sp, #20]
 80066f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	eba2 0901 	sub.w	r9, r2, r1
 80066fa:	4599      	cmp	r9, r3
 80066fc:	bfa8      	it	ge
 80066fe:	4699      	movge	r9, r3
 8006700:	f1b9 0f00 	cmp.w	r9, #0
 8006704:	dc35      	bgt.n	8006772 <_printf_float+0x3ae>
 8006706:	f04f 0800 	mov.w	r8, #0
 800670a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800670e:	f104 0a1a 	add.w	sl, r4, #26
 8006712:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006716:	1a9b      	subs	r3, r3, r2
 8006718:	eba3 0309 	sub.w	r3, r3, r9
 800671c:	4543      	cmp	r3, r8
 800671e:	f77f af79 	ble.w	8006614 <_printf_float+0x250>
 8006722:	2301      	movs	r3, #1
 8006724:	4652      	mov	r2, sl
 8006726:	4631      	mov	r1, r6
 8006728:	4628      	mov	r0, r5
 800672a:	47b8      	blx	r7
 800672c:	3001      	adds	r0, #1
 800672e:	f43f aeaa 	beq.w	8006486 <_printf_float+0xc2>
 8006732:	f108 0801 	add.w	r8, r8, #1
 8006736:	e7ec      	b.n	8006712 <_printf_float+0x34e>
 8006738:	4613      	mov	r3, r2
 800673a:	4631      	mov	r1, r6
 800673c:	4642      	mov	r2, r8
 800673e:	4628      	mov	r0, r5
 8006740:	47b8      	blx	r7
 8006742:	3001      	adds	r0, #1
 8006744:	d1c0      	bne.n	80066c8 <_printf_float+0x304>
 8006746:	e69e      	b.n	8006486 <_printf_float+0xc2>
 8006748:	2301      	movs	r3, #1
 800674a:	4631      	mov	r1, r6
 800674c:	4628      	mov	r0, r5
 800674e:	9205      	str	r2, [sp, #20]
 8006750:	47b8      	blx	r7
 8006752:	3001      	adds	r0, #1
 8006754:	f43f ae97 	beq.w	8006486 <_printf_float+0xc2>
 8006758:	9a05      	ldr	r2, [sp, #20]
 800675a:	f10b 0b01 	add.w	fp, fp, #1
 800675e:	e7b9      	b.n	80066d4 <_printf_float+0x310>
 8006760:	ee18 3a10 	vmov	r3, s16
 8006764:	4652      	mov	r2, sl
 8006766:	4631      	mov	r1, r6
 8006768:	4628      	mov	r0, r5
 800676a:	47b8      	blx	r7
 800676c:	3001      	adds	r0, #1
 800676e:	d1be      	bne.n	80066ee <_printf_float+0x32a>
 8006770:	e689      	b.n	8006486 <_printf_float+0xc2>
 8006772:	9a05      	ldr	r2, [sp, #20]
 8006774:	464b      	mov	r3, r9
 8006776:	4442      	add	r2, r8
 8006778:	4631      	mov	r1, r6
 800677a:	4628      	mov	r0, r5
 800677c:	47b8      	blx	r7
 800677e:	3001      	adds	r0, #1
 8006780:	d1c1      	bne.n	8006706 <_printf_float+0x342>
 8006782:	e680      	b.n	8006486 <_printf_float+0xc2>
 8006784:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006786:	2a01      	cmp	r2, #1
 8006788:	dc01      	bgt.n	800678e <_printf_float+0x3ca>
 800678a:	07db      	lsls	r3, r3, #31
 800678c:	d538      	bpl.n	8006800 <_printf_float+0x43c>
 800678e:	2301      	movs	r3, #1
 8006790:	4642      	mov	r2, r8
 8006792:	4631      	mov	r1, r6
 8006794:	4628      	mov	r0, r5
 8006796:	47b8      	blx	r7
 8006798:	3001      	adds	r0, #1
 800679a:	f43f ae74 	beq.w	8006486 <_printf_float+0xc2>
 800679e:	ee18 3a10 	vmov	r3, s16
 80067a2:	4652      	mov	r2, sl
 80067a4:	4631      	mov	r1, r6
 80067a6:	4628      	mov	r0, r5
 80067a8:	47b8      	blx	r7
 80067aa:	3001      	adds	r0, #1
 80067ac:	f43f ae6b 	beq.w	8006486 <_printf_float+0xc2>
 80067b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067b4:	2200      	movs	r2, #0
 80067b6:	2300      	movs	r3, #0
 80067b8:	f7fa f986 	bl	8000ac8 <__aeabi_dcmpeq>
 80067bc:	b9d8      	cbnz	r0, 80067f6 <_printf_float+0x432>
 80067be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067c0:	f108 0201 	add.w	r2, r8, #1
 80067c4:	3b01      	subs	r3, #1
 80067c6:	4631      	mov	r1, r6
 80067c8:	4628      	mov	r0, r5
 80067ca:	47b8      	blx	r7
 80067cc:	3001      	adds	r0, #1
 80067ce:	d10e      	bne.n	80067ee <_printf_float+0x42a>
 80067d0:	e659      	b.n	8006486 <_printf_float+0xc2>
 80067d2:	2301      	movs	r3, #1
 80067d4:	4652      	mov	r2, sl
 80067d6:	4631      	mov	r1, r6
 80067d8:	4628      	mov	r0, r5
 80067da:	47b8      	blx	r7
 80067dc:	3001      	adds	r0, #1
 80067de:	f43f ae52 	beq.w	8006486 <_printf_float+0xc2>
 80067e2:	f108 0801 	add.w	r8, r8, #1
 80067e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067e8:	3b01      	subs	r3, #1
 80067ea:	4543      	cmp	r3, r8
 80067ec:	dcf1      	bgt.n	80067d2 <_printf_float+0x40e>
 80067ee:	464b      	mov	r3, r9
 80067f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80067f4:	e6dc      	b.n	80065b0 <_printf_float+0x1ec>
 80067f6:	f04f 0800 	mov.w	r8, #0
 80067fa:	f104 0a1a 	add.w	sl, r4, #26
 80067fe:	e7f2      	b.n	80067e6 <_printf_float+0x422>
 8006800:	2301      	movs	r3, #1
 8006802:	4642      	mov	r2, r8
 8006804:	e7df      	b.n	80067c6 <_printf_float+0x402>
 8006806:	2301      	movs	r3, #1
 8006808:	464a      	mov	r2, r9
 800680a:	4631      	mov	r1, r6
 800680c:	4628      	mov	r0, r5
 800680e:	47b8      	blx	r7
 8006810:	3001      	adds	r0, #1
 8006812:	f43f ae38 	beq.w	8006486 <_printf_float+0xc2>
 8006816:	f108 0801 	add.w	r8, r8, #1
 800681a:	68e3      	ldr	r3, [r4, #12]
 800681c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800681e:	1a5b      	subs	r3, r3, r1
 8006820:	4543      	cmp	r3, r8
 8006822:	dcf0      	bgt.n	8006806 <_printf_float+0x442>
 8006824:	e6fa      	b.n	800661c <_printf_float+0x258>
 8006826:	f04f 0800 	mov.w	r8, #0
 800682a:	f104 0919 	add.w	r9, r4, #25
 800682e:	e7f4      	b.n	800681a <_printf_float+0x456>

08006830 <_printf_common>:
 8006830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006834:	4616      	mov	r6, r2
 8006836:	4699      	mov	r9, r3
 8006838:	688a      	ldr	r2, [r1, #8]
 800683a:	690b      	ldr	r3, [r1, #16]
 800683c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006840:	4293      	cmp	r3, r2
 8006842:	bfb8      	it	lt
 8006844:	4613      	movlt	r3, r2
 8006846:	6033      	str	r3, [r6, #0]
 8006848:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800684c:	4607      	mov	r7, r0
 800684e:	460c      	mov	r4, r1
 8006850:	b10a      	cbz	r2, 8006856 <_printf_common+0x26>
 8006852:	3301      	adds	r3, #1
 8006854:	6033      	str	r3, [r6, #0]
 8006856:	6823      	ldr	r3, [r4, #0]
 8006858:	0699      	lsls	r1, r3, #26
 800685a:	bf42      	ittt	mi
 800685c:	6833      	ldrmi	r3, [r6, #0]
 800685e:	3302      	addmi	r3, #2
 8006860:	6033      	strmi	r3, [r6, #0]
 8006862:	6825      	ldr	r5, [r4, #0]
 8006864:	f015 0506 	ands.w	r5, r5, #6
 8006868:	d106      	bne.n	8006878 <_printf_common+0x48>
 800686a:	f104 0a19 	add.w	sl, r4, #25
 800686e:	68e3      	ldr	r3, [r4, #12]
 8006870:	6832      	ldr	r2, [r6, #0]
 8006872:	1a9b      	subs	r3, r3, r2
 8006874:	42ab      	cmp	r3, r5
 8006876:	dc26      	bgt.n	80068c6 <_printf_common+0x96>
 8006878:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800687c:	1e13      	subs	r3, r2, #0
 800687e:	6822      	ldr	r2, [r4, #0]
 8006880:	bf18      	it	ne
 8006882:	2301      	movne	r3, #1
 8006884:	0692      	lsls	r2, r2, #26
 8006886:	d42b      	bmi.n	80068e0 <_printf_common+0xb0>
 8006888:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800688c:	4649      	mov	r1, r9
 800688e:	4638      	mov	r0, r7
 8006890:	47c0      	blx	r8
 8006892:	3001      	adds	r0, #1
 8006894:	d01e      	beq.n	80068d4 <_printf_common+0xa4>
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	68e5      	ldr	r5, [r4, #12]
 800689a:	6832      	ldr	r2, [r6, #0]
 800689c:	f003 0306 	and.w	r3, r3, #6
 80068a0:	2b04      	cmp	r3, #4
 80068a2:	bf08      	it	eq
 80068a4:	1aad      	subeq	r5, r5, r2
 80068a6:	68a3      	ldr	r3, [r4, #8]
 80068a8:	6922      	ldr	r2, [r4, #16]
 80068aa:	bf0c      	ite	eq
 80068ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068b0:	2500      	movne	r5, #0
 80068b2:	4293      	cmp	r3, r2
 80068b4:	bfc4      	itt	gt
 80068b6:	1a9b      	subgt	r3, r3, r2
 80068b8:	18ed      	addgt	r5, r5, r3
 80068ba:	2600      	movs	r6, #0
 80068bc:	341a      	adds	r4, #26
 80068be:	42b5      	cmp	r5, r6
 80068c0:	d11a      	bne.n	80068f8 <_printf_common+0xc8>
 80068c2:	2000      	movs	r0, #0
 80068c4:	e008      	b.n	80068d8 <_printf_common+0xa8>
 80068c6:	2301      	movs	r3, #1
 80068c8:	4652      	mov	r2, sl
 80068ca:	4649      	mov	r1, r9
 80068cc:	4638      	mov	r0, r7
 80068ce:	47c0      	blx	r8
 80068d0:	3001      	adds	r0, #1
 80068d2:	d103      	bne.n	80068dc <_printf_common+0xac>
 80068d4:	f04f 30ff 	mov.w	r0, #4294967295
 80068d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068dc:	3501      	adds	r5, #1
 80068de:	e7c6      	b.n	800686e <_printf_common+0x3e>
 80068e0:	18e1      	adds	r1, r4, r3
 80068e2:	1c5a      	adds	r2, r3, #1
 80068e4:	2030      	movs	r0, #48	; 0x30
 80068e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068ea:	4422      	add	r2, r4
 80068ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068f4:	3302      	adds	r3, #2
 80068f6:	e7c7      	b.n	8006888 <_printf_common+0x58>
 80068f8:	2301      	movs	r3, #1
 80068fa:	4622      	mov	r2, r4
 80068fc:	4649      	mov	r1, r9
 80068fe:	4638      	mov	r0, r7
 8006900:	47c0      	blx	r8
 8006902:	3001      	adds	r0, #1
 8006904:	d0e6      	beq.n	80068d4 <_printf_common+0xa4>
 8006906:	3601      	adds	r6, #1
 8006908:	e7d9      	b.n	80068be <_printf_common+0x8e>
	...

0800690c <_printf_i>:
 800690c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006910:	460c      	mov	r4, r1
 8006912:	4691      	mov	r9, r2
 8006914:	7e27      	ldrb	r7, [r4, #24]
 8006916:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006918:	2f78      	cmp	r7, #120	; 0x78
 800691a:	4680      	mov	r8, r0
 800691c:	469a      	mov	sl, r3
 800691e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006922:	d807      	bhi.n	8006934 <_printf_i+0x28>
 8006924:	2f62      	cmp	r7, #98	; 0x62
 8006926:	d80a      	bhi.n	800693e <_printf_i+0x32>
 8006928:	2f00      	cmp	r7, #0
 800692a:	f000 80d8 	beq.w	8006ade <_printf_i+0x1d2>
 800692e:	2f58      	cmp	r7, #88	; 0x58
 8006930:	f000 80a3 	beq.w	8006a7a <_printf_i+0x16e>
 8006934:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006938:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800693c:	e03a      	b.n	80069b4 <_printf_i+0xa8>
 800693e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006942:	2b15      	cmp	r3, #21
 8006944:	d8f6      	bhi.n	8006934 <_printf_i+0x28>
 8006946:	a001      	add	r0, pc, #4	; (adr r0, 800694c <_printf_i+0x40>)
 8006948:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800694c:	080069a5 	.word	0x080069a5
 8006950:	080069b9 	.word	0x080069b9
 8006954:	08006935 	.word	0x08006935
 8006958:	08006935 	.word	0x08006935
 800695c:	08006935 	.word	0x08006935
 8006960:	08006935 	.word	0x08006935
 8006964:	080069b9 	.word	0x080069b9
 8006968:	08006935 	.word	0x08006935
 800696c:	08006935 	.word	0x08006935
 8006970:	08006935 	.word	0x08006935
 8006974:	08006935 	.word	0x08006935
 8006978:	08006ac5 	.word	0x08006ac5
 800697c:	080069e9 	.word	0x080069e9
 8006980:	08006aa7 	.word	0x08006aa7
 8006984:	08006935 	.word	0x08006935
 8006988:	08006935 	.word	0x08006935
 800698c:	08006ae7 	.word	0x08006ae7
 8006990:	08006935 	.word	0x08006935
 8006994:	080069e9 	.word	0x080069e9
 8006998:	08006935 	.word	0x08006935
 800699c:	08006935 	.word	0x08006935
 80069a0:	08006aaf 	.word	0x08006aaf
 80069a4:	680b      	ldr	r3, [r1, #0]
 80069a6:	1d1a      	adds	r2, r3, #4
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	600a      	str	r2, [r1, #0]
 80069ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80069b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069b4:	2301      	movs	r3, #1
 80069b6:	e0a3      	b.n	8006b00 <_printf_i+0x1f4>
 80069b8:	6825      	ldr	r5, [r4, #0]
 80069ba:	6808      	ldr	r0, [r1, #0]
 80069bc:	062e      	lsls	r6, r5, #24
 80069be:	f100 0304 	add.w	r3, r0, #4
 80069c2:	d50a      	bpl.n	80069da <_printf_i+0xce>
 80069c4:	6805      	ldr	r5, [r0, #0]
 80069c6:	600b      	str	r3, [r1, #0]
 80069c8:	2d00      	cmp	r5, #0
 80069ca:	da03      	bge.n	80069d4 <_printf_i+0xc8>
 80069cc:	232d      	movs	r3, #45	; 0x2d
 80069ce:	426d      	negs	r5, r5
 80069d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069d4:	485e      	ldr	r0, [pc, #376]	; (8006b50 <_printf_i+0x244>)
 80069d6:	230a      	movs	r3, #10
 80069d8:	e019      	b.n	8006a0e <_printf_i+0x102>
 80069da:	f015 0f40 	tst.w	r5, #64	; 0x40
 80069de:	6805      	ldr	r5, [r0, #0]
 80069e0:	600b      	str	r3, [r1, #0]
 80069e2:	bf18      	it	ne
 80069e4:	b22d      	sxthne	r5, r5
 80069e6:	e7ef      	b.n	80069c8 <_printf_i+0xbc>
 80069e8:	680b      	ldr	r3, [r1, #0]
 80069ea:	6825      	ldr	r5, [r4, #0]
 80069ec:	1d18      	adds	r0, r3, #4
 80069ee:	6008      	str	r0, [r1, #0]
 80069f0:	0628      	lsls	r0, r5, #24
 80069f2:	d501      	bpl.n	80069f8 <_printf_i+0xec>
 80069f4:	681d      	ldr	r5, [r3, #0]
 80069f6:	e002      	b.n	80069fe <_printf_i+0xf2>
 80069f8:	0669      	lsls	r1, r5, #25
 80069fa:	d5fb      	bpl.n	80069f4 <_printf_i+0xe8>
 80069fc:	881d      	ldrh	r5, [r3, #0]
 80069fe:	4854      	ldr	r0, [pc, #336]	; (8006b50 <_printf_i+0x244>)
 8006a00:	2f6f      	cmp	r7, #111	; 0x6f
 8006a02:	bf0c      	ite	eq
 8006a04:	2308      	moveq	r3, #8
 8006a06:	230a      	movne	r3, #10
 8006a08:	2100      	movs	r1, #0
 8006a0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a0e:	6866      	ldr	r6, [r4, #4]
 8006a10:	60a6      	str	r6, [r4, #8]
 8006a12:	2e00      	cmp	r6, #0
 8006a14:	bfa2      	ittt	ge
 8006a16:	6821      	ldrge	r1, [r4, #0]
 8006a18:	f021 0104 	bicge.w	r1, r1, #4
 8006a1c:	6021      	strge	r1, [r4, #0]
 8006a1e:	b90d      	cbnz	r5, 8006a24 <_printf_i+0x118>
 8006a20:	2e00      	cmp	r6, #0
 8006a22:	d04d      	beq.n	8006ac0 <_printf_i+0x1b4>
 8006a24:	4616      	mov	r6, r2
 8006a26:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a2a:	fb03 5711 	mls	r7, r3, r1, r5
 8006a2e:	5dc7      	ldrb	r7, [r0, r7]
 8006a30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a34:	462f      	mov	r7, r5
 8006a36:	42bb      	cmp	r3, r7
 8006a38:	460d      	mov	r5, r1
 8006a3a:	d9f4      	bls.n	8006a26 <_printf_i+0x11a>
 8006a3c:	2b08      	cmp	r3, #8
 8006a3e:	d10b      	bne.n	8006a58 <_printf_i+0x14c>
 8006a40:	6823      	ldr	r3, [r4, #0]
 8006a42:	07df      	lsls	r7, r3, #31
 8006a44:	d508      	bpl.n	8006a58 <_printf_i+0x14c>
 8006a46:	6923      	ldr	r3, [r4, #16]
 8006a48:	6861      	ldr	r1, [r4, #4]
 8006a4a:	4299      	cmp	r1, r3
 8006a4c:	bfde      	ittt	le
 8006a4e:	2330      	movle	r3, #48	; 0x30
 8006a50:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a54:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a58:	1b92      	subs	r2, r2, r6
 8006a5a:	6122      	str	r2, [r4, #16]
 8006a5c:	f8cd a000 	str.w	sl, [sp]
 8006a60:	464b      	mov	r3, r9
 8006a62:	aa03      	add	r2, sp, #12
 8006a64:	4621      	mov	r1, r4
 8006a66:	4640      	mov	r0, r8
 8006a68:	f7ff fee2 	bl	8006830 <_printf_common>
 8006a6c:	3001      	adds	r0, #1
 8006a6e:	d14c      	bne.n	8006b0a <_printf_i+0x1fe>
 8006a70:	f04f 30ff 	mov.w	r0, #4294967295
 8006a74:	b004      	add	sp, #16
 8006a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a7a:	4835      	ldr	r0, [pc, #212]	; (8006b50 <_printf_i+0x244>)
 8006a7c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006a80:	6823      	ldr	r3, [r4, #0]
 8006a82:	680e      	ldr	r6, [r1, #0]
 8006a84:	061f      	lsls	r7, r3, #24
 8006a86:	f856 5b04 	ldr.w	r5, [r6], #4
 8006a8a:	600e      	str	r6, [r1, #0]
 8006a8c:	d514      	bpl.n	8006ab8 <_printf_i+0x1ac>
 8006a8e:	07d9      	lsls	r1, r3, #31
 8006a90:	bf44      	itt	mi
 8006a92:	f043 0320 	orrmi.w	r3, r3, #32
 8006a96:	6023      	strmi	r3, [r4, #0]
 8006a98:	b91d      	cbnz	r5, 8006aa2 <_printf_i+0x196>
 8006a9a:	6823      	ldr	r3, [r4, #0]
 8006a9c:	f023 0320 	bic.w	r3, r3, #32
 8006aa0:	6023      	str	r3, [r4, #0]
 8006aa2:	2310      	movs	r3, #16
 8006aa4:	e7b0      	b.n	8006a08 <_printf_i+0xfc>
 8006aa6:	6823      	ldr	r3, [r4, #0]
 8006aa8:	f043 0320 	orr.w	r3, r3, #32
 8006aac:	6023      	str	r3, [r4, #0]
 8006aae:	2378      	movs	r3, #120	; 0x78
 8006ab0:	4828      	ldr	r0, [pc, #160]	; (8006b54 <_printf_i+0x248>)
 8006ab2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ab6:	e7e3      	b.n	8006a80 <_printf_i+0x174>
 8006ab8:	065e      	lsls	r6, r3, #25
 8006aba:	bf48      	it	mi
 8006abc:	b2ad      	uxthmi	r5, r5
 8006abe:	e7e6      	b.n	8006a8e <_printf_i+0x182>
 8006ac0:	4616      	mov	r6, r2
 8006ac2:	e7bb      	b.n	8006a3c <_printf_i+0x130>
 8006ac4:	680b      	ldr	r3, [r1, #0]
 8006ac6:	6826      	ldr	r6, [r4, #0]
 8006ac8:	6960      	ldr	r0, [r4, #20]
 8006aca:	1d1d      	adds	r5, r3, #4
 8006acc:	600d      	str	r5, [r1, #0]
 8006ace:	0635      	lsls	r5, r6, #24
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	d501      	bpl.n	8006ad8 <_printf_i+0x1cc>
 8006ad4:	6018      	str	r0, [r3, #0]
 8006ad6:	e002      	b.n	8006ade <_printf_i+0x1d2>
 8006ad8:	0671      	lsls	r1, r6, #25
 8006ada:	d5fb      	bpl.n	8006ad4 <_printf_i+0x1c8>
 8006adc:	8018      	strh	r0, [r3, #0]
 8006ade:	2300      	movs	r3, #0
 8006ae0:	6123      	str	r3, [r4, #16]
 8006ae2:	4616      	mov	r6, r2
 8006ae4:	e7ba      	b.n	8006a5c <_printf_i+0x150>
 8006ae6:	680b      	ldr	r3, [r1, #0]
 8006ae8:	1d1a      	adds	r2, r3, #4
 8006aea:	600a      	str	r2, [r1, #0]
 8006aec:	681e      	ldr	r6, [r3, #0]
 8006aee:	6862      	ldr	r2, [r4, #4]
 8006af0:	2100      	movs	r1, #0
 8006af2:	4630      	mov	r0, r6
 8006af4:	f7f9 fb74 	bl	80001e0 <memchr>
 8006af8:	b108      	cbz	r0, 8006afe <_printf_i+0x1f2>
 8006afa:	1b80      	subs	r0, r0, r6
 8006afc:	6060      	str	r0, [r4, #4]
 8006afe:	6863      	ldr	r3, [r4, #4]
 8006b00:	6123      	str	r3, [r4, #16]
 8006b02:	2300      	movs	r3, #0
 8006b04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b08:	e7a8      	b.n	8006a5c <_printf_i+0x150>
 8006b0a:	6923      	ldr	r3, [r4, #16]
 8006b0c:	4632      	mov	r2, r6
 8006b0e:	4649      	mov	r1, r9
 8006b10:	4640      	mov	r0, r8
 8006b12:	47d0      	blx	sl
 8006b14:	3001      	adds	r0, #1
 8006b16:	d0ab      	beq.n	8006a70 <_printf_i+0x164>
 8006b18:	6823      	ldr	r3, [r4, #0]
 8006b1a:	079b      	lsls	r3, r3, #30
 8006b1c:	d413      	bmi.n	8006b46 <_printf_i+0x23a>
 8006b1e:	68e0      	ldr	r0, [r4, #12]
 8006b20:	9b03      	ldr	r3, [sp, #12]
 8006b22:	4298      	cmp	r0, r3
 8006b24:	bfb8      	it	lt
 8006b26:	4618      	movlt	r0, r3
 8006b28:	e7a4      	b.n	8006a74 <_printf_i+0x168>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	4632      	mov	r2, r6
 8006b2e:	4649      	mov	r1, r9
 8006b30:	4640      	mov	r0, r8
 8006b32:	47d0      	blx	sl
 8006b34:	3001      	adds	r0, #1
 8006b36:	d09b      	beq.n	8006a70 <_printf_i+0x164>
 8006b38:	3501      	adds	r5, #1
 8006b3a:	68e3      	ldr	r3, [r4, #12]
 8006b3c:	9903      	ldr	r1, [sp, #12]
 8006b3e:	1a5b      	subs	r3, r3, r1
 8006b40:	42ab      	cmp	r3, r5
 8006b42:	dcf2      	bgt.n	8006b2a <_printf_i+0x21e>
 8006b44:	e7eb      	b.n	8006b1e <_printf_i+0x212>
 8006b46:	2500      	movs	r5, #0
 8006b48:	f104 0619 	add.w	r6, r4, #25
 8006b4c:	e7f5      	b.n	8006b3a <_printf_i+0x22e>
 8006b4e:	bf00      	nop
 8006b50:	0800b7ca 	.word	0x0800b7ca
 8006b54:	0800b7db 	.word	0x0800b7db

08006b58 <_scanf_float>:
 8006b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b5c:	b087      	sub	sp, #28
 8006b5e:	4617      	mov	r7, r2
 8006b60:	9303      	str	r3, [sp, #12]
 8006b62:	688b      	ldr	r3, [r1, #8]
 8006b64:	1e5a      	subs	r2, r3, #1
 8006b66:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006b6a:	bf83      	ittte	hi
 8006b6c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006b70:	195b      	addhi	r3, r3, r5
 8006b72:	9302      	strhi	r3, [sp, #8]
 8006b74:	2300      	movls	r3, #0
 8006b76:	bf86      	itte	hi
 8006b78:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006b7c:	608b      	strhi	r3, [r1, #8]
 8006b7e:	9302      	strls	r3, [sp, #8]
 8006b80:	680b      	ldr	r3, [r1, #0]
 8006b82:	468b      	mov	fp, r1
 8006b84:	2500      	movs	r5, #0
 8006b86:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006b8a:	f84b 3b1c 	str.w	r3, [fp], #28
 8006b8e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006b92:	4680      	mov	r8, r0
 8006b94:	460c      	mov	r4, r1
 8006b96:	465e      	mov	r6, fp
 8006b98:	46aa      	mov	sl, r5
 8006b9a:	46a9      	mov	r9, r5
 8006b9c:	9501      	str	r5, [sp, #4]
 8006b9e:	68a2      	ldr	r2, [r4, #8]
 8006ba0:	b152      	cbz	r2, 8006bb8 <_scanf_float+0x60>
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	2b4e      	cmp	r3, #78	; 0x4e
 8006ba8:	d864      	bhi.n	8006c74 <_scanf_float+0x11c>
 8006baa:	2b40      	cmp	r3, #64	; 0x40
 8006bac:	d83c      	bhi.n	8006c28 <_scanf_float+0xd0>
 8006bae:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006bb2:	b2c8      	uxtb	r0, r1
 8006bb4:	280e      	cmp	r0, #14
 8006bb6:	d93a      	bls.n	8006c2e <_scanf_float+0xd6>
 8006bb8:	f1b9 0f00 	cmp.w	r9, #0
 8006bbc:	d003      	beq.n	8006bc6 <_scanf_float+0x6e>
 8006bbe:	6823      	ldr	r3, [r4, #0]
 8006bc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bc4:	6023      	str	r3, [r4, #0]
 8006bc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006bca:	f1ba 0f01 	cmp.w	sl, #1
 8006bce:	f200 8113 	bhi.w	8006df8 <_scanf_float+0x2a0>
 8006bd2:	455e      	cmp	r6, fp
 8006bd4:	f200 8105 	bhi.w	8006de2 <_scanf_float+0x28a>
 8006bd8:	2501      	movs	r5, #1
 8006bda:	4628      	mov	r0, r5
 8006bdc:	b007      	add	sp, #28
 8006bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006be2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006be6:	2a0d      	cmp	r2, #13
 8006be8:	d8e6      	bhi.n	8006bb8 <_scanf_float+0x60>
 8006bea:	a101      	add	r1, pc, #4	; (adr r1, 8006bf0 <_scanf_float+0x98>)
 8006bec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006bf0:	08006d2f 	.word	0x08006d2f
 8006bf4:	08006bb9 	.word	0x08006bb9
 8006bf8:	08006bb9 	.word	0x08006bb9
 8006bfc:	08006bb9 	.word	0x08006bb9
 8006c00:	08006d8f 	.word	0x08006d8f
 8006c04:	08006d67 	.word	0x08006d67
 8006c08:	08006bb9 	.word	0x08006bb9
 8006c0c:	08006bb9 	.word	0x08006bb9
 8006c10:	08006d3d 	.word	0x08006d3d
 8006c14:	08006bb9 	.word	0x08006bb9
 8006c18:	08006bb9 	.word	0x08006bb9
 8006c1c:	08006bb9 	.word	0x08006bb9
 8006c20:	08006bb9 	.word	0x08006bb9
 8006c24:	08006cf5 	.word	0x08006cf5
 8006c28:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006c2c:	e7db      	b.n	8006be6 <_scanf_float+0x8e>
 8006c2e:	290e      	cmp	r1, #14
 8006c30:	d8c2      	bhi.n	8006bb8 <_scanf_float+0x60>
 8006c32:	a001      	add	r0, pc, #4	; (adr r0, 8006c38 <_scanf_float+0xe0>)
 8006c34:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006c38:	08006ce7 	.word	0x08006ce7
 8006c3c:	08006bb9 	.word	0x08006bb9
 8006c40:	08006ce7 	.word	0x08006ce7
 8006c44:	08006d7b 	.word	0x08006d7b
 8006c48:	08006bb9 	.word	0x08006bb9
 8006c4c:	08006c95 	.word	0x08006c95
 8006c50:	08006cd1 	.word	0x08006cd1
 8006c54:	08006cd1 	.word	0x08006cd1
 8006c58:	08006cd1 	.word	0x08006cd1
 8006c5c:	08006cd1 	.word	0x08006cd1
 8006c60:	08006cd1 	.word	0x08006cd1
 8006c64:	08006cd1 	.word	0x08006cd1
 8006c68:	08006cd1 	.word	0x08006cd1
 8006c6c:	08006cd1 	.word	0x08006cd1
 8006c70:	08006cd1 	.word	0x08006cd1
 8006c74:	2b6e      	cmp	r3, #110	; 0x6e
 8006c76:	d809      	bhi.n	8006c8c <_scanf_float+0x134>
 8006c78:	2b60      	cmp	r3, #96	; 0x60
 8006c7a:	d8b2      	bhi.n	8006be2 <_scanf_float+0x8a>
 8006c7c:	2b54      	cmp	r3, #84	; 0x54
 8006c7e:	d077      	beq.n	8006d70 <_scanf_float+0x218>
 8006c80:	2b59      	cmp	r3, #89	; 0x59
 8006c82:	d199      	bne.n	8006bb8 <_scanf_float+0x60>
 8006c84:	2d07      	cmp	r5, #7
 8006c86:	d197      	bne.n	8006bb8 <_scanf_float+0x60>
 8006c88:	2508      	movs	r5, #8
 8006c8a:	e029      	b.n	8006ce0 <_scanf_float+0x188>
 8006c8c:	2b74      	cmp	r3, #116	; 0x74
 8006c8e:	d06f      	beq.n	8006d70 <_scanf_float+0x218>
 8006c90:	2b79      	cmp	r3, #121	; 0x79
 8006c92:	e7f6      	b.n	8006c82 <_scanf_float+0x12a>
 8006c94:	6821      	ldr	r1, [r4, #0]
 8006c96:	05c8      	lsls	r0, r1, #23
 8006c98:	d51a      	bpl.n	8006cd0 <_scanf_float+0x178>
 8006c9a:	9b02      	ldr	r3, [sp, #8]
 8006c9c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006ca0:	6021      	str	r1, [r4, #0]
 8006ca2:	f109 0901 	add.w	r9, r9, #1
 8006ca6:	b11b      	cbz	r3, 8006cb0 <_scanf_float+0x158>
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	3201      	adds	r2, #1
 8006cac:	9302      	str	r3, [sp, #8]
 8006cae:	60a2      	str	r2, [r4, #8]
 8006cb0:	68a3      	ldr	r3, [r4, #8]
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	60a3      	str	r3, [r4, #8]
 8006cb6:	6923      	ldr	r3, [r4, #16]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	6123      	str	r3, [r4, #16]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	607b      	str	r3, [r7, #4]
 8006cc4:	f340 8084 	ble.w	8006dd0 <_scanf_float+0x278>
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	603b      	str	r3, [r7, #0]
 8006cce:	e766      	b.n	8006b9e <_scanf_float+0x46>
 8006cd0:	eb1a 0f05 	cmn.w	sl, r5
 8006cd4:	f47f af70 	bne.w	8006bb8 <_scanf_float+0x60>
 8006cd8:	6822      	ldr	r2, [r4, #0]
 8006cda:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006cde:	6022      	str	r2, [r4, #0]
 8006ce0:	f806 3b01 	strb.w	r3, [r6], #1
 8006ce4:	e7e4      	b.n	8006cb0 <_scanf_float+0x158>
 8006ce6:	6822      	ldr	r2, [r4, #0]
 8006ce8:	0610      	lsls	r0, r2, #24
 8006cea:	f57f af65 	bpl.w	8006bb8 <_scanf_float+0x60>
 8006cee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006cf2:	e7f4      	b.n	8006cde <_scanf_float+0x186>
 8006cf4:	f1ba 0f00 	cmp.w	sl, #0
 8006cf8:	d10e      	bne.n	8006d18 <_scanf_float+0x1c0>
 8006cfa:	f1b9 0f00 	cmp.w	r9, #0
 8006cfe:	d10e      	bne.n	8006d1e <_scanf_float+0x1c6>
 8006d00:	6822      	ldr	r2, [r4, #0]
 8006d02:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006d06:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006d0a:	d108      	bne.n	8006d1e <_scanf_float+0x1c6>
 8006d0c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006d10:	6022      	str	r2, [r4, #0]
 8006d12:	f04f 0a01 	mov.w	sl, #1
 8006d16:	e7e3      	b.n	8006ce0 <_scanf_float+0x188>
 8006d18:	f1ba 0f02 	cmp.w	sl, #2
 8006d1c:	d055      	beq.n	8006dca <_scanf_float+0x272>
 8006d1e:	2d01      	cmp	r5, #1
 8006d20:	d002      	beq.n	8006d28 <_scanf_float+0x1d0>
 8006d22:	2d04      	cmp	r5, #4
 8006d24:	f47f af48 	bne.w	8006bb8 <_scanf_float+0x60>
 8006d28:	3501      	adds	r5, #1
 8006d2a:	b2ed      	uxtb	r5, r5
 8006d2c:	e7d8      	b.n	8006ce0 <_scanf_float+0x188>
 8006d2e:	f1ba 0f01 	cmp.w	sl, #1
 8006d32:	f47f af41 	bne.w	8006bb8 <_scanf_float+0x60>
 8006d36:	f04f 0a02 	mov.w	sl, #2
 8006d3a:	e7d1      	b.n	8006ce0 <_scanf_float+0x188>
 8006d3c:	b97d      	cbnz	r5, 8006d5e <_scanf_float+0x206>
 8006d3e:	f1b9 0f00 	cmp.w	r9, #0
 8006d42:	f47f af3c 	bne.w	8006bbe <_scanf_float+0x66>
 8006d46:	6822      	ldr	r2, [r4, #0]
 8006d48:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006d4c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006d50:	f47f af39 	bne.w	8006bc6 <_scanf_float+0x6e>
 8006d54:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006d58:	6022      	str	r2, [r4, #0]
 8006d5a:	2501      	movs	r5, #1
 8006d5c:	e7c0      	b.n	8006ce0 <_scanf_float+0x188>
 8006d5e:	2d03      	cmp	r5, #3
 8006d60:	d0e2      	beq.n	8006d28 <_scanf_float+0x1d0>
 8006d62:	2d05      	cmp	r5, #5
 8006d64:	e7de      	b.n	8006d24 <_scanf_float+0x1cc>
 8006d66:	2d02      	cmp	r5, #2
 8006d68:	f47f af26 	bne.w	8006bb8 <_scanf_float+0x60>
 8006d6c:	2503      	movs	r5, #3
 8006d6e:	e7b7      	b.n	8006ce0 <_scanf_float+0x188>
 8006d70:	2d06      	cmp	r5, #6
 8006d72:	f47f af21 	bne.w	8006bb8 <_scanf_float+0x60>
 8006d76:	2507      	movs	r5, #7
 8006d78:	e7b2      	b.n	8006ce0 <_scanf_float+0x188>
 8006d7a:	6822      	ldr	r2, [r4, #0]
 8006d7c:	0591      	lsls	r1, r2, #22
 8006d7e:	f57f af1b 	bpl.w	8006bb8 <_scanf_float+0x60>
 8006d82:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006d86:	6022      	str	r2, [r4, #0]
 8006d88:	f8cd 9004 	str.w	r9, [sp, #4]
 8006d8c:	e7a8      	b.n	8006ce0 <_scanf_float+0x188>
 8006d8e:	6822      	ldr	r2, [r4, #0]
 8006d90:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006d94:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006d98:	d006      	beq.n	8006da8 <_scanf_float+0x250>
 8006d9a:	0550      	lsls	r0, r2, #21
 8006d9c:	f57f af0c 	bpl.w	8006bb8 <_scanf_float+0x60>
 8006da0:	f1b9 0f00 	cmp.w	r9, #0
 8006da4:	f43f af0f 	beq.w	8006bc6 <_scanf_float+0x6e>
 8006da8:	0591      	lsls	r1, r2, #22
 8006daa:	bf58      	it	pl
 8006dac:	9901      	ldrpl	r1, [sp, #4]
 8006dae:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006db2:	bf58      	it	pl
 8006db4:	eba9 0101 	subpl.w	r1, r9, r1
 8006db8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006dbc:	bf58      	it	pl
 8006dbe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006dc2:	6022      	str	r2, [r4, #0]
 8006dc4:	f04f 0900 	mov.w	r9, #0
 8006dc8:	e78a      	b.n	8006ce0 <_scanf_float+0x188>
 8006dca:	f04f 0a03 	mov.w	sl, #3
 8006dce:	e787      	b.n	8006ce0 <_scanf_float+0x188>
 8006dd0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006dd4:	4639      	mov	r1, r7
 8006dd6:	4640      	mov	r0, r8
 8006dd8:	4798      	blx	r3
 8006dda:	2800      	cmp	r0, #0
 8006ddc:	f43f aedf 	beq.w	8006b9e <_scanf_float+0x46>
 8006de0:	e6ea      	b.n	8006bb8 <_scanf_float+0x60>
 8006de2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006de6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006dea:	463a      	mov	r2, r7
 8006dec:	4640      	mov	r0, r8
 8006dee:	4798      	blx	r3
 8006df0:	6923      	ldr	r3, [r4, #16]
 8006df2:	3b01      	subs	r3, #1
 8006df4:	6123      	str	r3, [r4, #16]
 8006df6:	e6ec      	b.n	8006bd2 <_scanf_float+0x7a>
 8006df8:	1e6b      	subs	r3, r5, #1
 8006dfa:	2b06      	cmp	r3, #6
 8006dfc:	d825      	bhi.n	8006e4a <_scanf_float+0x2f2>
 8006dfe:	2d02      	cmp	r5, #2
 8006e00:	d836      	bhi.n	8006e70 <_scanf_float+0x318>
 8006e02:	455e      	cmp	r6, fp
 8006e04:	f67f aee8 	bls.w	8006bd8 <_scanf_float+0x80>
 8006e08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e0c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006e10:	463a      	mov	r2, r7
 8006e12:	4640      	mov	r0, r8
 8006e14:	4798      	blx	r3
 8006e16:	6923      	ldr	r3, [r4, #16]
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	6123      	str	r3, [r4, #16]
 8006e1c:	e7f1      	b.n	8006e02 <_scanf_float+0x2aa>
 8006e1e:	9802      	ldr	r0, [sp, #8]
 8006e20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e24:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006e28:	9002      	str	r0, [sp, #8]
 8006e2a:	463a      	mov	r2, r7
 8006e2c:	4640      	mov	r0, r8
 8006e2e:	4798      	blx	r3
 8006e30:	6923      	ldr	r3, [r4, #16]
 8006e32:	3b01      	subs	r3, #1
 8006e34:	6123      	str	r3, [r4, #16]
 8006e36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e3a:	fa5f fa8a 	uxtb.w	sl, sl
 8006e3e:	f1ba 0f02 	cmp.w	sl, #2
 8006e42:	d1ec      	bne.n	8006e1e <_scanf_float+0x2c6>
 8006e44:	3d03      	subs	r5, #3
 8006e46:	b2ed      	uxtb	r5, r5
 8006e48:	1b76      	subs	r6, r6, r5
 8006e4a:	6823      	ldr	r3, [r4, #0]
 8006e4c:	05da      	lsls	r2, r3, #23
 8006e4e:	d52f      	bpl.n	8006eb0 <_scanf_float+0x358>
 8006e50:	055b      	lsls	r3, r3, #21
 8006e52:	d510      	bpl.n	8006e76 <_scanf_float+0x31e>
 8006e54:	455e      	cmp	r6, fp
 8006e56:	f67f aebf 	bls.w	8006bd8 <_scanf_float+0x80>
 8006e5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006e62:	463a      	mov	r2, r7
 8006e64:	4640      	mov	r0, r8
 8006e66:	4798      	blx	r3
 8006e68:	6923      	ldr	r3, [r4, #16]
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	6123      	str	r3, [r4, #16]
 8006e6e:	e7f1      	b.n	8006e54 <_scanf_float+0x2fc>
 8006e70:	46aa      	mov	sl, r5
 8006e72:	9602      	str	r6, [sp, #8]
 8006e74:	e7df      	b.n	8006e36 <_scanf_float+0x2de>
 8006e76:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006e7a:	6923      	ldr	r3, [r4, #16]
 8006e7c:	2965      	cmp	r1, #101	; 0x65
 8006e7e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006e82:	f106 35ff 	add.w	r5, r6, #4294967295
 8006e86:	6123      	str	r3, [r4, #16]
 8006e88:	d00c      	beq.n	8006ea4 <_scanf_float+0x34c>
 8006e8a:	2945      	cmp	r1, #69	; 0x45
 8006e8c:	d00a      	beq.n	8006ea4 <_scanf_float+0x34c>
 8006e8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e92:	463a      	mov	r2, r7
 8006e94:	4640      	mov	r0, r8
 8006e96:	4798      	blx	r3
 8006e98:	6923      	ldr	r3, [r4, #16]
 8006e9a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	1eb5      	subs	r5, r6, #2
 8006ea2:	6123      	str	r3, [r4, #16]
 8006ea4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ea8:	463a      	mov	r2, r7
 8006eaa:	4640      	mov	r0, r8
 8006eac:	4798      	blx	r3
 8006eae:	462e      	mov	r6, r5
 8006eb0:	6825      	ldr	r5, [r4, #0]
 8006eb2:	f015 0510 	ands.w	r5, r5, #16
 8006eb6:	d158      	bne.n	8006f6a <_scanf_float+0x412>
 8006eb8:	7035      	strb	r5, [r6, #0]
 8006eba:	6823      	ldr	r3, [r4, #0]
 8006ebc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ec4:	d11c      	bne.n	8006f00 <_scanf_float+0x3a8>
 8006ec6:	9b01      	ldr	r3, [sp, #4]
 8006ec8:	454b      	cmp	r3, r9
 8006eca:	eba3 0209 	sub.w	r2, r3, r9
 8006ece:	d124      	bne.n	8006f1a <_scanf_float+0x3c2>
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	4659      	mov	r1, fp
 8006ed4:	4640      	mov	r0, r8
 8006ed6:	f001 f809 	bl	8007eec <_strtod_r>
 8006eda:	9b03      	ldr	r3, [sp, #12]
 8006edc:	6821      	ldr	r1, [r4, #0]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f011 0f02 	tst.w	r1, #2
 8006ee4:	ec57 6b10 	vmov	r6, r7, d0
 8006ee8:	f103 0204 	add.w	r2, r3, #4
 8006eec:	d020      	beq.n	8006f30 <_scanf_float+0x3d8>
 8006eee:	9903      	ldr	r1, [sp, #12]
 8006ef0:	600a      	str	r2, [r1, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	e9c3 6700 	strd	r6, r7, [r3]
 8006ef8:	68e3      	ldr	r3, [r4, #12]
 8006efa:	3301      	adds	r3, #1
 8006efc:	60e3      	str	r3, [r4, #12]
 8006efe:	e66c      	b.n	8006bda <_scanf_float+0x82>
 8006f00:	9b04      	ldr	r3, [sp, #16]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d0e4      	beq.n	8006ed0 <_scanf_float+0x378>
 8006f06:	9905      	ldr	r1, [sp, #20]
 8006f08:	230a      	movs	r3, #10
 8006f0a:	462a      	mov	r2, r5
 8006f0c:	3101      	adds	r1, #1
 8006f0e:	4640      	mov	r0, r8
 8006f10:	f001 f876 	bl	8008000 <_strtol_r>
 8006f14:	9b04      	ldr	r3, [sp, #16]
 8006f16:	9e05      	ldr	r6, [sp, #20]
 8006f18:	1ac2      	subs	r2, r0, r3
 8006f1a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006f1e:	429e      	cmp	r6, r3
 8006f20:	bf28      	it	cs
 8006f22:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006f26:	4912      	ldr	r1, [pc, #72]	; (8006f70 <_scanf_float+0x418>)
 8006f28:	4630      	mov	r0, r6
 8006f2a:	f000 f997 	bl	800725c <siprintf>
 8006f2e:	e7cf      	b.n	8006ed0 <_scanf_float+0x378>
 8006f30:	f011 0f04 	tst.w	r1, #4
 8006f34:	9903      	ldr	r1, [sp, #12]
 8006f36:	600a      	str	r2, [r1, #0]
 8006f38:	d1db      	bne.n	8006ef2 <_scanf_float+0x39a>
 8006f3a:	f8d3 8000 	ldr.w	r8, [r3]
 8006f3e:	ee10 2a10 	vmov	r2, s0
 8006f42:	ee10 0a10 	vmov	r0, s0
 8006f46:	463b      	mov	r3, r7
 8006f48:	4639      	mov	r1, r7
 8006f4a:	f7f9 fdef 	bl	8000b2c <__aeabi_dcmpun>
 8006f4e:	b128      	cbz	r0, 8006f5c <_scanf_float+0x404>
 8006f50:	4808      	ldr	r0, [pc, #32]	; (8006f74 <_scanf_float+0x41c>)
 8006f52:	f000 f97d 	bl	8007250 <nanf>
 8006f56:	ed88 0a00 	vstr	s0, [r8]
 8006f5a:	e7cd      	b.n	8006ef8 <_scanf_float+0x3a0>
 8006f5c:	4630      	mov	r0, r6
 8006f5e:	4639      	mov	r1, r7
 8006f60:	f7f9 fe42 	bl	8000be8 <__aeabi_d2f>
 8006f64:	f8c8 0000 	str.w	r0, [r8]
 8006f68:	e7c6      	b.n	8006ef8 <_scanf_float+0x3a0>
 8006f6a:	2500      	movs	r5, #0
 8006f6c:	e635      	b.n	8006bda <_scanf_float+0x82>
 8006f6e:	bf00      	nop
 8006f70:	0800b7ec 	.word	0x0800b7ec
 8006f74:	0800bc68 	.word	0x0800bc68

08006f78 <iprintf>:
 8006f78:	b40f      	push	{r0, r1, r2, r3}
 8006f7a:	4b0a      	ldr	r3, [pc, #40]	; (8006fa4 <iprintf+0x2c>)
 8006f7c:	b513      	push	{r0, r1, r4, lr}
 8006f7e:	681c      	ldr	r4, [r3, #0]
 8006f80:	b124      	cbz	r4, 8006f8c <iprintf+0x14>
 8006f82:	69a3      	ldr	r3, [r4, #24]
 8006f84:	b913      	cbnz	r3, 8006f8c <iprintf+0x14>
 8006f86:	4620      	mov	r0, r4
 8006f88:	f002 f890 	bl	80090ac <__sinit>
 8006f8c:	ab05      	add	r3, sp, #20
 8006f8e:	9a04      	ldr	r2, [sp, #16]
 8006f90:	68a1      	ldr	r1, [r4, #8]
 8006f92:	9301      	str	r3, [sp, #4]
 8006f94:	4620      	mov	r0, r4
 8006f96:	f003 fb5f 	bl	800a658 <_vfiprintf_r>
 8006f9a:	b002      	add	sp, #8
 8006f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fa0:	b004      	add	sp, #16
 8006fa2:	4770      	bx	lr
 8006fa4:	2000006c 	.word	0x2000006c

08006fa8 <_puts_r>:
 8006fa8:	b570      	push	{r4, r5, r6, lr}
 8006faa:	460e      	mov	r6, r1
 8006fac:	4605      	mov	r5, r0
 8006fae:	b118      	cbz	r0, 8006fb8 <_puts_r+0x10>
 8006fb0:	6983      	ldr	r3, [r0, #24]
 8006fb2:	b90b      	cbnz	r3, 8006fb8 <_puts_r+0x10>
 8006fb4:	f002 f87a 	bl	80090ac <__sinit>
 8006fb8:	69ab      	ldr	r3, [r5, #24]
 8006fba:	68ac      	ldr	r4, [r5, #8]
 8006fbc:	b913      	cbnz	r3, 8006fc4 <_puts_r+0x1c>
 8006fbe:	4628      	mov	r0, r5
 8006fc0:	f002 f874 	bl	80090ac <__sinit>
 8006fc4:	4b2c      	ldr	r3, [pc, #176]	; (8007078 <_puts_r+0xd0>)
 8006fc6:	429c      	cmp	r4, r3
 8006fc8:	d120      	bne.n	800700c <_puts_r+0x64>
 8006fca:	686c      	ldr	r4, [r5, #4]
 8006fcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006fce:	07db      	lsls	r3, r3, #31
 8006fd0:	d405      	bmi.n	8006fde <_puts_r+0x36>
 8006fd2:	89a3      	ldrh	r3, [r4, #12]
 8006fd4:	0598      	lsls	r0, r3, #22
 8006fd6:	d402      	bmi.n	8006fde <_puts_r+0x36>
 8006fd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fda:	f002 fc78 	bl	80098ce <__retarget_lock_acquire_recursive>
 8006fde:	89a3      	ldrh	r3, [r4, #12]
 8006fe0:	0719      	lsls	r1, r3, #28
 8006fe2:	d51d      	bpl.n	8007020 <_puts_r+0x78>
 8006fe4:	6923      	ldr	r3, [r4, #16]
 8006fe6:	b1db      	cbz	r3, 8007020 <_puts_r+0x78>
 8006fe8:	3e01      	subs	r6, #1
 8006fea:	68a3      	ldr	r3, [r4, #8]
 8006fec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	60a3      	str	r3, [r4, #8]
 8006ff4:	bb39      	cbnz	r1, 8007046 <_puts_r+0x9e>
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	da38      	bge.n	800706c <_puts_r+0xc4>
 8006ffa:	4622      	mov	r2, r4
 8006ffc:	210a      	movs	r1, #10
 8006ffe:	4628      	mov	r0, r5
 8007000:	f001 f800 	bl	8008004 <__swbuf_r>
 8007004:	3001      	adds	r0, #1
 8007006:	d011      	beq.n	800702c <_puts_r+0x84>
 8007008:	250a      	movs	r5, #10
 800700a:	e011      	b.n	8007030 <_puts_r+0x88>
 800700c:	4b1b      	ldr	r3, [pc, #108]	; (800707c <_puts_r+0xd4>)
 800700e:	429c      	cmp	r4, r3
 8007010:	d101      	bne.n	8007016 <_puts_r+0x6e>
 8007012:	68ac      	ldr	r4, [r5, #8]
 8007014:	e7da      	b.n	8006fcc <_puts_r+0x24>
 8007016:	4b1a      	ldr	r3, [pc, #104]	; (8007080 <_puts_r+0xd8>)
 8007018:	429c      	cmp	r4, r3
 800701a:	bf08      	it	eq
 800701c:	68ec      	ldreq	r4, [r5, #12]
 800701e:	e7d5      	b.n	8006fcc <_puts_r+0x24>
 8007020:	4621      	mov	r1, r4
 8007022:	4628      	mov	r0, r5
 8007024:	f001 f840 	bl	80080a8 <__swsetup_r>
 8007028:	2800      	cmp	r0, #0
 800702a:	d0dd      	beq.n	8006fe8 <_puts_r+0x40>
 800702c:	f04f 35ff 	mov.w	r5, #4294967295
 8007030:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007032:	07da      	lsls	r2, r3, #31
 8007034:	d405      	bmi.n	8007042 <_puts_r+0x9a>
 8007036:	89a3      	ldrh	r3, [r4, #12]
 8007038:	059b      	lsls	r3, r3, #22
 800703a:	d402      	bmi.n	8007042 <_puts_r+0x9a>
 800703c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800703e:	f002 fc47 	bl	80098d0 <__retarget_lock_release_recursive>
 8007042:	4628      	mov	r0, r5
 8007044:	bd70      	pop	{r4, r5, r6, pc}
 8007046:	2b00      	cmp	r3, #0
 8007048:	da04      	bge.n	8007054 <_puts_r+0xac>
 800704a:	69a2      	ldr	r2, [r4, #24]
 800704c:	429a      	cmp	r2, r3
 800704e:	dc06      	bgt.n	800705e <_puts_r+0xb6>
 8007050:	290a      	cmp	r1, #10
 8007052:	d004      	beq.n	800705e <_puts_r+0xb6>
 8007054:	6823      	ldr	r3, [r4, #0]
 8007056:	1c5a      	adds	r2, r3, #1
 8007058:	6022      	str	r2, [r4, #0]
 800705a:	7019      	strb	r1, [r3, #0]
 800705c:	e7c5      	b.n	8006fea <_puts_r+0x42>
 800705e:	4622      	mov	r2, r4
 8007060:	4628      	mov	r0, r5
 8007062:	f000 ffcf 	bl	8008004 <__swbuf_r>
 8007066:	3001      	adds	r0, #1
 8007068:	d1bf      	bne.n	8006fea <_puts_r+0x42>
 800706a:	e7df      	b.n	800702c <_puts_r+0x84>
 800706c:	6823      	ldr	r3, [r4, #0]
 800706e:	250a      	movs	r5, #10
 8007070:	1c5a      	adds	r2, r3, #1
 8007072:	6022      	str	r2, [r4, #0]
 8007074:	701d      	strb	r5, [r3, #0]
 8007076:	e7db      	b.n	8007030 <_puts_r+0x88>
 8007078:	0800ba00 	.word	0x0800ba00
 800707c:	0800ba20 	.word	0x0800ba20
 8007080:	0800b9e0 	.word	0x0800b9e0

08007084 <puts>:
 8007084:	4b02      	ldr	r3, [pc, #8]	; (8007090 <puts+0xc>)
 8007086:	4601      	mov	r1, r0
 8007088:	6818      	ldr	r0, [r3, #0]
 800708a:	f7ff bf8d 	b.w	8006fa8 <_puts_r>
 800708e:	bf00      	nop
 8007090:	2000006c 	.word	0x2000006c

08007094 <_sbrk_r>:
 8007094:	b538      	push	{r3, r4, r5, lr}
 8007096:	4d06      	ldr	r5, [pc, #24]	; (80070b0 <_sbrk_r+0x1c>)
 8007098:	2300      	movs	r3, #0
 800709a:	4604      	mov	r4, r0
 800709c:	4608      	mov	r0, r1
 800709e:	602b      	str	r3, [r5, #0]
 80070a0:	f7fa fc9a 	bl	80019d8 <_sbrk>
 80070a4:	1c43      	adds	r3, r0, #1
 80070a6:	d102      	bne.n	80070ae <_sbrk_r+0x1a>
 80070a8:	682b      	ldr	r3, [r5, #0]
 80070aa:	b103      	cbz	r3, 80070ae <_sbrk_r+0x1a>
 80070ac:	6023      	str	r3, [r4, #0]
 80070ae:	bd38      	pop	{r3, r4, r5, pc}
 80070b0:	20001cc4 	.word	0x20001cc4

080070b4 <setbuf>:
 80070b4:	2900      	cmp	r1, #0
 80070b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070ba:	bf0c      	ite	eq
 80070bc:	2202      	moveq	r2, #2
 80070be:	2200      	movne	r2, #0
 80070c0:	f000 b800 	b.w	80070c4 <setvbuf>

080070c4 <setvbuf>:
 80070c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80070c8:	461d      	mov	r5, r3
 80070ca:	4b5d      	ldr	r3, [pc, #372]	; (8007240 <setvbuf+0x17c>)
 80070cc:	681f      	ldr	r7, [r3, #0]
 80070ce:	4604      	mov	r4, r0
 80070d0:	460e      	mov	r6, r1
 80070d2:	4690      	mov	r8, r2
 80070d4:	b127      	cbz	r7, 80070e0 <setvbuf+0x1c>
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	b913      	cbnz	r3, 80070e0 <setvbuf+0x1c>
 80070da:	4638      	mov	r0, r7
 80070dc:	f001 ffe6 	bl	80090ac <__sinit>
 80070e0:	4b58      	ldr	r3, [pc, #352]	; (8007244 <setvbuf+0x180>)
 80070e2:	429c      	cmp	r4, r3
 80070e4:	d167      	bne.n	80071b6 <setvbuf+0xf2>
 80070e6:	687c      	ldr	r4, [r7, #4]
 80070e8:	f1b8 0f02 	cmp.w	r8, #2
 80070ec:	d006      	beq.n	80070fc <setvbuf+0x38>
 80070ee:	f1b8 0f01 	cmp.w	r8, #1
 80070f2:	f200 809f 	bhi.w	8007234 <setvbuf+0x170>
 80070f6:	2d00      	cmp	r5, #0
 80070f8:	f2c0 809c 	blt.w	8007234 <setvbuf+0x170>
 80070fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070fe:	07db      	lsls	r3, r3, #31
 8007100:	d405      	bmi.n	800710e <setvbuf+0x4a>
 8007102:	89a3      	ldrh	r3, [r4, #12]
 8007104:	0598      	lsls	r0, r3, #22
 8007106:	d402      	bmi.n	800710e <setvbuf+0x4a>
 8007108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800710a:	f002 fbe0 	bl	80098ce <__retarget_lock_acquire_recursive>
 800710e:	4621      	mov	r1, r4
 8007110:	4638      	mov	r0, r7
 8007112:	f001 ff37 	bl	8008f84 <_fflush_r>
 8007116:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007118:	b141      	cbz	r1, 800712c <setvbuf+0x68>
 800711a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800711e:	4299      	cmp	r1, r3
 8007120:	d002      	beq.n	8007128 <setvbuf+0x64>
 8007122:	4638      	mov	r0, r7
 8007124:	f7ff f804 	bl	8006130 <_free_r>
 8007128:	2300      	movs	r3, #0
 800712a:	6363      	str	r3, [r4, #52]	; 0x34
 800712c:	2300      	movs	r3, #0
 800712e:	61a3      	str	r3, [r4, #24]
 8007130:	6063      	str	r3, [r4, #4]
 8007132:	89a3      	ldrh	r3, [r4, #12]
 8007134:	0619      	lsls	r1, r3, #24
 8007136:	d503      	bpl.n	8007140 <setvbuf+0x7c>
 8007138:	6921      	ldr	r1, [r4, #16]
 800713a:	4638      	mov	r0, r7
 800713c:	f7fe fff8 	bl	8006130 <_free_r>
 8007140:	89a3      	ldrh	r3, [r4, #12]
 8007142:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8007146:	f023 0303 	bic.w	r3, r3, #3
 800714a:	f1b8 0f02 	cmp.w	r8, #2
 800714e:	81a3      	strh	r3, [r4, #12]
 8007150:	d06c      	beq.n	800722c <setvbuf+0x168>
 8007152:	ab01      	add	r3, sp, #4
 8007154:	466a      	mov	r2, sp
 8007156:	4621      	mov	r1, r4
 8007158:	4638      	mov	r0, r7
 800715a:	f002 fbba 	bl	80098d2 <__swhatbuf_r>
 800715e:	89a3      	ldrh	r3, [r4, #12]
 8007160:	4318      	orrs	r0, r3
 8007162:	81a0      	strh	r0, [r4, #12]
 8007164:	2d00      	cmp	r5, #0
 8007166:	d130      	bne.n	80071ca <setvbuf+0x106>
 8007168:	9d00      	ldr	r5, [sp, #0]
 800716a:	4628      	mov	r0, r5
 800716c:	f7fe ffb2 	bl	80060d4 <malloc>
 8007170:	4606      	mov	r6, r0
 8007172:	2800      	cmp	r0, #0
 8007174:	d155      	bne.n	8007222 <setvbuf+0x15e>
 8007176:	f8dd 9000 	ldr.w	r9, [sp]
 800717a:	45a9      	cmp	r9, r5
 800717c:	d14a      	bne.n	8007214 <setvbuf+0x150>
 800717e:	f04f 35ff 	mov.w	r5, #4294967295
 8007182:	2200      	movs	r2, #0
 8007184:	60a2      	str	r2, [r4, #8]
 8007186:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800718a:	6022      	str	r2, [r4, #0]
 800718c:	6122      	str	r2, [r4, #16]
 800718e:	2201      	movs	r2, #1
 8007190:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007194:	6162      	str	r2, [r4, #20]
 8007196:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007198:	f043 0302 	orr.w	r3, r3, #2
 800719c:	07d2      	lsls	r2, r2, #31
 800719e:	81a3      	strh	r3, [r4, #12]
 80071a0:	d405      	bmi.n	80071ae <setvbuf+0xea>
 80071a2:	f413 7f00 	tst.w	r3, #512	; 0x200
 80071a6:	d102      	bne.n	80071ae <setvbuf+0xea>
 80071a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071aa:	f002 fb91 	bl	80098d0 <__retarget_lock_release_recursive>
 80071ae:	4628      	mov	r0, r5
 80071b0:	b003      	add	sp, #12
 80071b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80071b6:	4b24      	ldr	r3, [pc, #144]	; (8007248 <setvbuf+0x184>)
 80071b8:	429c      	cmp	r4, r3
 80071ba:	d101      	bne.n	80071c0 <setvbuf+0xfc>
 80071bc:	68bc      	ldr	r4, [r7, #8]
 80071be:	e793      	b.n	80070e8 <setvbuf+0x24>
 80071c0:	4b22      	ldr	r3, [pc, #136]	; (800724c <setvbuf+0x188>)
 80071c2:	429c      	cmp	r4, r3
 80071c4:	bf08      	it	eq
 80071c6:	68fc      	ldreq	r4, [r7, #12]
 80071c8:	e78e      	b.n	80070e8 <setvbuf+0x24>
 80071ca:	2e00      	cmp	r6, #0
 80071cc:	d0cd      	beq.n	800716a <setvbuf+0xa6>
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	b913      	cbnz	r3, 80071d8 <setvbuf+0x114>
 80071d2:	4638      	mov	r0, r7
 80071d4:	f001 ff6a 	bl	80090ac <__sinit>
 80071d8:	f1b8 0f01 	cmp.w	r8, #1
 80071dc:	bf08      	it	eq
 80071de:	89a3      	ldrheq	r3, [r4, #12]
 80071e0:	6026      	str	r6, [r4, #0]
 80071e2:	bf04      	itt	eq
 80071e4:	f043 0301 	orreq.w	r3, r3, #1
 80071e8:	81a3      	strheq	r3, [r4, #12]
 80071ea:	89a2      	ldrh	r2, [r4, #12]
 80071ec:	f012 0308 	ands.w	r3, r2, #8
 80071f0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80071f4:	d01c      	beq.n	8007230 <setvbuf+0x16c>
 80071f6:	07d3      	lsls	r3, r2, #31
 80071f8:	bf41      	itttt	mi
 80071fa:	2300      	movmi	r3, #0
 80071fc:	426d      	negmi	r5, r5
 80071fe:	60a3      	strmi	r3, [r4, #8]
 8007200:	61a5      	strmi	r5, [r4, #24]
 8007202:	bf58      	it	pl
 8007204:	60a5      	strpl	r5, [r4, #8]
 8007206:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8007208:	f015 0501 	ands.w	r5, r5, #1
 800720c:	d115      	bne.n	800723a <setvbuf+0x176>
 800720e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8007212:	e7c8      	b.n	80071a6 <setvbuf+0xe2>
 8007214:	4648      	mov	r0, r9
 8007216:	f7fe ff5d 	bl	80060d4 <malloc>
 800721a:	4606      	mov	r6, r0
 800721c:	2800      	cmp	r0, #0
 800721e:	d0ae      	beq.n	800717e <setvbuf+0xba>
 8007220:	464d      	mov	r5, r9
 8007222:	89a3      	ldrh	r3, [r4, #12]
 8007224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007228:	81a3      	strh	r3, [r4, #12]
 800722a:	e7d0      	b.n	80071ce <setvbuf+0x10a>
 800722c:	2500      	movs	r5, #0
 800722e:	e7a8      	b.n	8007182 <setvbuf+0xbe>
 8007230:	60a3      	str	r3, [r4, #8]
 8007232:	e7e8      	b.n	8007206 <setvbuf+0x142>
 8007234:	f04f 35ff 	mov.w	r5, #4294967295
 8007238:	e7b9      	b.n	80071ae <setvbuf+0xea>
 800723a:	2500      	movs	r5, #0
 800723c:	e7b7      	b.n	80071ae <setvbuf+0xea>
 800723e:	bf00      	nop
 8007240:	2000006c 	.word	0x2000006c
 8007244:	0800ba00 	.word	0x0800ba00
 8007248:	0800ba20 	.word	0x0800ba20
 800724c:	0800b9e0 	.word	0x0800b9e0

08007250 <nanf>:
 8007250:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007258 <nanf+0x8>
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop
 8007258:	7fc00000 	.word	0x7fc00000

0800725c <siprintf>:
 800725c:	b40e      	push	{r1, r2, r3}
 800725e:	b500      	push	{lr}
 8007260:	b09c      	sub	sp, #112	; 0x70
 8007262:	ab1d      	add	r3, sp, #116	; 0x74
 8007264:	9002      	str	r0, [sp, #8]
 8007266:	9006      	str	r0, [sp, #24]
 8007268:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800726c:	4809      	ldr	r0, [pc, #36]	; (8007294 <siprintf+0x38>)
 800726e:	9107      	str	r1, [sp, #28]
 8007270:	9104      	str	r1, [sp, #16]
 8007272:	4909      	ldr	r1, [pc, #36]	; (8007298 <siprintf+0x3c>)
 8007274:	f853 2b04 	ldr.w	r2, [r3], #4
 8007278:	9105      	str	r1, [sp, #20]
 800727a:	6800      	ldr	r0, [r0, #0]
 800727c:	9301      	str	r3, [sp, #4]
 800727e:	a902      	add	r1, sp, #8
 8007280:	f003 f8c0 	bl	800a404 <_svfiprintf_r>
 8007284:	9b02      	ldr	r3, [sp, #8]
 8007286:	2200      	movs	r2, #0
 8007288:	701a      	strb	r2, [r3, #0]
 800728a:	b01c      	add	sp, #112	; 0x70
 800728c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007290:	b003      	add	sp, #12
 8007292:	4770      	bx	lr
 8007294:	2000006c 	.word	0x2000006c
 8007298:	ffff0208 	.word	0xffff0208

0800729c <sulp>:
 800729c:	b570      	push	{r4, r5, r6, lr}
 800729e:	4604      	mov	r4, r0
 80072a0:	460d      	mov	r5, r1
 80072a2:	ec45 4b10 	vmov	d0, r4, r5
 80072a6:	4616      	mov	r6, r2
 80072a8:	f002 ff02 	bl	800a0b0 <__ulp>
 80072ac:	ec51 0b10 	vmov	r0, r1, d0
 80072b0:	b17e      	cbz	r6, 80072d2 <sulp+0x36>
 80072b2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80072b6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	dd09      	ble.n	80072d2 <sulp+0x36>
 80072be:	051b      	lsls	r3, r3, #20
 80072c0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80072c4:	2400      	movs	r4, #0
 80072c6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80072ca:	4622      	mov	r2, r4
 80072cc:	462b      	mov	r3, r5
 80072ce:	f7f9 f993 	bl	80005f8 <__aeabi_dmul>
 80072d2:	bd70      	pop	{r4, r5, r6, pc}
 80072d4:	0000      	movs	r0, r0
	...

080072d8 <_strtod_l>:
 80072d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072dc:	b0a3      	sub	sp, #140	; 0x8c
 80072de:	461f      	mov	r7, r3
 80072e0:	2300      	movs	r3, #0
 80072e2:	931e      	str	r3, [sp, #120]	; 0x78
 80072e4:	4ba4      	ldr	r3, [pc, #656]	; (8007578 <_strtod_l+0x2a0>)
 80072e6:	9219      	str	r2, [sp, #100]	; 0x64
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	9307      	str	r3, [sp, #28]
 80072ec:	4604      	mov	r4, r0
 80072ee:	4618      	mov	r0, r3
 80072f0:	4688      	mov	r8, r1
 80072f2:	f7f8 ff6d 	bl	80001d0 <strlen>
 80072f6:	f04f 0a00 	mov.w	sl, #0
 80072fa:	4605      	mov	r5, r0
 80072fc:	f04f 0b00 	mov.w	fp, #0
 8007300:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007304:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007306:	781a      	ldrb	r2, [r3, #0]
 8007308:	2a2b      	cmp	r2, #43	; 0x2b
 800730a:	d04c      	beq.n	80073a6 <_strtod_l+0xce>
 800730c:	d839      	bhi.n	8007382 <_strtod_l+0xaa>
 800730e:	2a0d      	cmp	r2, #13
 8007310:	d832      	bhi.n	8007378 <_strtod_l+0xa0>
 8007312:	2a08      	cmp	r2, #8
 8007314:	d832      	bhi.n	800737c <_strtod_l+0xa4>
 8007316:	2a00      	cmp	r2, #0
 8007318:	d03c      	beq.n	8007394 <_strtod_l+0xbc>
 800731a:	2300      	movs	r3, #0
 800731c:	930e      	str	r3, [sp, #56]	; 0x38
 800731e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007320:	7833      	ldrb	r3, [r6, #0]
 8007322:	2b30      	cmp	r3, #48	; 0x30
 8007324:	f040 80b4 	bne.w	8007490 <_strtod_l+0x1b8>
 8007328:	7873      	ldrb	r3, [r6, #1]
 800732a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800732e:	2b58      	cmp	r3, #88	; 0x58
 8007330:	d16c      	bne.n	800740c <_strtod_l+0x134>
 8007332:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007334:	9301      	str	r3, [sp, #4]
 8007336:	ab1e      	add	r3, sp, #120	; 0x78
 8007338:	9702      	str	r7, [sp, #8]
 800733a:	9300      	str	r3, [sp, #0]
 800733c:	4a8f      	ldr	r2, [pc, #572]	; (800757c <_strtod_l+0x2a4>)
 800733e:	ab1f      	add	r3, sp, #124	; 0x7c
 8007340:	a91d      	add	r1, sp, #116	; 0x74
 8007342:	4620      	mov	r0, r4
 8007344:	f001 ffb6 	bl	80092b4 <__gethex>
 8007348:	f010 0707 	ands.w	r7, r0, #7
 800734c:	4605      	mov	r5, r0
 800734e:	d005      	beq.n	800735c <_strtod_l+0x84>
 8007350:	2f06      	cmp	r7, #6
 8007352:	d12a      	bne.n	80073aa <_strtod_l+0xd2>
 8007354:	3601      	adds	r6, #1
 8007356:	2300      	movs	r3, #0
 8007358:	961d      	str	r6, [sp, #116]	; 0x74
 800735a:	930e      	str	r3, [sp, #56]	; 0x38
 800735c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800735e:	2b00      	cmp	r3, #0
 8007360:	f040 8596 	bne.w	8007e90 <_strtod_l+0xbb8>
 8007364:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007366:	b1db      	cbz	r3, 80073a0 <_strtod_l+0xc8>
 8007368:	4652      	mov	r2, sl
 800736a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800736e:	ec43 2b10 	vmov	d0, r2, r3
 8007372:	b023      	add	sp, #140	; 0x8c
 8007374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007378:	2a20      	cmp	r2, #32
 800737a:	d1ce      	bne.n	800731a <_strtod_l+0x42>
 800737c:	3301      	adds	r3, #1
 800737e:	931d      	str	r3, [sp, #116]	; 0x74
 8007380:	e7c0      	b.n	8007304 <_strtod_l+0x2c>
 8007382:	2a2d      	cmp	r2, #45	; 0x2d
 8007384:	d1c9      	bne.n	800731a <_strtod_l+0x42>
 8007386:	2201      	movs	r2, #1
 8007388:	920e      	str	r2, [sp, #56]	; 0x38
 800738a:	1c5a      	adds	r2, r3, #1
 800738c:	921d      	str	r2, [sp, #116]	; 0x74
 800738e:	785b      	ldrb	r3, [r3, #1]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1c4      	bne.n	800731e <_strtod_l+0x46>
 8007394:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007396:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800739a:	2b00      	cmp	r3, #0
 800739c:	f040 8576 	bne.w	8007e8c <_strtod_l+0xbb4>
 80073a0:	4652      	mov	r2, sl
 80073a2:	465b      	mov	r3, fp
 80073a4:	e7e3      	b.n	800736e <_strtod_l+0x96>
 80073a6:	2200      	movs	r2, #0
 80073a8:	e7ee      	b.n	8007388 <_strtod_l+0xb0>
 80073aa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80073ac:	b13a      	cbz	r2, 80073be <_strtod_l+0xe6>
 80073ae:	2135      	movs	r1, #53	; 0x35
 80073b0:	a820      	add	r0, sp, #128	; 0x80
 80073b2:	f002 ff88 	bl	800a2c6 <__copybits>
 80073b6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80073b8:	4620      	mov	r0, r4
 80073ba:	f002 fb4d 	bl	8009a58 <_Bfree>
 80073be:	3f01      	subs	r7, #1
 80073c0:	2f05      	cmp	r7, #5
 80073c2:	d807      	bhi.n	80073d4 <_strtod_l+0xfc>
 80073c4:	e8df f007 	tbb	[pc, r7]
 80073c8:	1d180b0e 	.word	0x1d180b0e
 80073cc:	030e      	.short	0x030e
 80073ce:	f04f 0b00 	mov.w	fp, #0
 80073d2:	46da      	mov	sl, fp
 80073d4:	0728      	lsls	r0, r5, #28
 80073d6:	d5c1      	bpl.n	800735c <_strtod_l+0x84>
 80073d8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80073dc:	e7be      	b.n	800735c <_strtod_l+0x84>
 80073de:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80073e2:	e7f7      	b.n	80073d4 <_strtod_l+0xfc>
 80073e4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80073e8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80073ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80073ee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80073f2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80073f6:	e7ed      	b.n	80073d4 <_strtod_l+0xfc>
 80073f8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8007580 <_strtod_l+0x2a8>
 80073fc:	f04f 0a00 	mov.w	sl, #0
 8007400:	e7e8      	b.n	80073d4 <_strtod_l+0xfc>
 8007402:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007406:	f04f 3aff 	mov.w	sl, #4294967295
 800740a:	e7e3      	b.n	80073d4 <_strtod_l+0xfc>
 800740c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800740e:	1c5a      	adds	r2, r3, #1
 8007410:	921d      	str	r2, [sp, #116]	; 0x74
 8007412:	785b      	ldrb	r3, [r3, #1]
 8007414:	2b30      	cmp	r3, #48	; 0x30
 8007416:	d0f9      	beq.n	800740c <_strtod_l+0x134>
 8007418:	2b00      	cmp	r3, #0
 800741a:	d09f      	beq.n	800735c <_strtod_l+0x84>
 800741c:	2301      	movs	r3, #1
 800741e:	f04f 0900 	mov.w	r9, #0
 8007422:	9304      	str	r3, [sp, #16]
 8007424:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007426:	930a      	str	r3, [sp, #40]	; 0x28
 8007428:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800742c:	464f      	mov	r7, r9
 800742e:	220a      	movs	r2, #10
 8007430:	981d      	ldr	r0, [sp, #116]	; 0x74
 8007432:	7806      	ldrb	r6, [r0, #0]
 8007434:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007438:	b2d9      	uxtb	r1, r3
 800743a:	2909      	cmp	r1, #9
 800743c:	d92a      	bls.n	8007494 <_strtod_l+0x1bc>
 800743e:	9907      	ldr	r1, [sp, #28]
 8007440:	462a      	mov	r2, r5
 8007442:	f003 fa84 	bl	800a94e <strncmp>
 8007446:	b398      	cbz	r0, 80074b0 <_strtod_l+0x1d8>
 8007448:	2000      	movs	r0, #0
 800744a:	4633      	mov	r3, r6
 800744c:	463d      	mov	r5, r7
 800744e:	9007      	str	r0, [sp, #28]
 8007450:	4602      	mov	r2, r0
 8007452:	2b65      	cmp	r3, #101	; 0x65
 8007454:	d001      	beq.n	800745a <_strtod_l+0x182>
 8007456:	2b45      	cmp	r3, #69	; 0x45
 8007458:	d118      	bne.n	800748c <_strtod_l+0x1b4>
 800745a:	b91d      	cbnz	r5, 8007464 <_strtod_l+0x18c>
 800745c:	9b04      	ldr	r3, [sp, #16]
 800745e:	4303      	orrs	r3, r0
 8007460:	d098      	beq.n	8007394 <_strtod_l+0xbc>
 8007462:	2500      	movs	r5, #0
 8007464:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8007468:	f108 0301 	add.w	r3, r8, #1
 800746c:	931d      	str	r3, [sp, #116]	; 0x74
 800746e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007472:	2b2b      	cmp	r3, #43	; 0x2b
 8007474:	d075      	beq.n	8007562 <_strtod_l+0x28a>
 8007476:	2b2d      	cmp	r3, #45	; 0x2d
 8007478:	d07b      	beq.n	8007572 <_strtod_l+0x29a>
 800747a:	f04f 0c00 	mov.w	ip, #0
 800747e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007482:	2909      	cmp	r1, #9
 8007484:	f240 8082 	bls.w	800758c <_strtod_l+0x2b4>
 8007488:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800748c:	2600      	movs	r6, #0
 800748e:	e09d      	b.n	80075cc <_strtod_l+0x2f4>
 8007490:	2300      	movs	r3, #0
 8007492:	e7c4      	b.n	800741e <_strtod_l+0x146>
 8007494:	2f08      	cmp	r7, #8
 8007496:	bfd8      	it	le
 8007498:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800749a:	f100 0001 	add.w	r0, r0, #1
 800749e:	bfda      	itte	le
 80074a0:	fb02 3301 	mlale	r3, r2, r1, r3
 80074a4:	9309      	strle	r3, [sp, #36]	; 0x24
 80074a6:	fb02 3909 	mlagt	r9, r2, r9, r3
 80074aa:	3701      	adds	r7, #1
 80074ac:	901d      	str	r0, [sp, #116]	; 0x74
 80074ae:	e7bf      	b.n	8007430 <_strtod_l+0x158>
 80074b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80074b2:	195a      	adds	r2, r3, r5
 80074b4:	921d      	str	r2, [sp, #116]	; 0x74
 80074b6:	5d5b      	ldrb	r3, [r3, r5]
 80074b8:	2f00      	cmp	r7, #0
 80074ba:	d037      	beq.n	800752c <_strtod_l+0x254>
 80074bc:	9007      	str	r0, [sp, #28]
 80074be:	463d      	mov	r5, r7
 80074c0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80074c4:	2a09      	cmp	r2, #9
 80074c6:	d912      	bls.n	80074ee <_strtod_l+0x216>
 80074c8:	2201      	movs	r2, #1
 80074ca:	e7c2      	b.n	8007452 <_strtod_l+0x17a>
 80074cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80074ce:	1c5a      	adds	r2, r3, #1
 80074d0:	921d      	str	r2, [sp, #116]	; 0x74
 80074d2:	785b      	ldrb	r3, [r3, #1]
 80074d4:	3001      	adds	r0, #1
 80074d6:	2b30      	cmp	r3, #48	; 0x30
 80074d8:	d0f8      	beq.n	80074cc <_strtod_l+0x1f4>
 80074da:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80074de:	2a08      	cmp	r2, #8
 80074e0:	f200 84db 	bhi.w	8007e9a <_strtod_l+0xbc2>
 80074e4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80074e6:	9007      	str	r0, [sp, #28]
 80074e8:	2000      	movs	r0, #0
 80074ea:	920a      	str	r2, [sp, #40]	; 0x28
 80074ec:	4605      	mov	r5, r0
 80074ee:	3b30      	subs	r3, #48	; 0x30
 80074f0:	f100 0201 	add.w	r2, r0, #1
 80074f4:	d014      	beq.n	8007520 <_strtod_l+0x248>
 80074f6:	9907      	ldr	r1, [sp, #28]
 80074f8:	4411      	add	r1, r2
 80074fa:	9107      	str	r1, [sp, #28]
 80074fc:	462a      	mov	r2, r5
 80074fe:	eb00 0e05 	add.w	lr, r0, r5
 8007502:	210a      	movs	r1, #10
 8007504:	4572      	cmp	r2, lr
 8007506:	d113      	bne.n	8007530 <_strtod_l+0x258>
 8007508:	182a      	adds	r2, r5, r0
 800750a:	2a08      	cmp	r2, #8
 800750c:	f105 0501 	add.w	r5, r5, #1
 8007510:	4405      	add	r5, r0
 8007512:	dc1c      	bgt.n	800754e <_strtod_l+0x276>
 8007514:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007516:	220a      	movs	r2, #10
 8007518:	fb02 3301 	mla	r3, r2, r1, r3
 800751c:	9309      	str	r3, [sp, #36]	; 0x24
 800751e:	2200      	movs	r2, #0
 8007520:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007522:	1c59      	adds	r1, r3, #1
 8007524:	911d      	str	r1, [sp, #116]	; 0x74
 8007526:	785b      	ldrb	r3, [r3, #1]
 8007528:	4610      	mov	r0, r2
 800752a:	e7c9      	b.n	80074c0 <_strtod_l+0x1e8>
 800752c:	4638      	mov	r0, r7
 800752e:	e7d2      	b.n	80074d6 <_strtod_l+0x1fe>
 8007530:	2a08      	cmp	r2, #8
 8007532:	dc04      	bgt.n	800753e <_strtod_l+0x266>
 8007534:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007536:	434e      	muls	r6, r1
 8007538:	9609      	str	r6, [sp, #36]	; 0x24
 800753a:	3201      	adds	r2, #1
 800753c:	e7e2      	b.n	8007504 <_strtod_l+0x22c>
 800753e:	f102 0c01 	add.w	ip, r2, #1
 8007542:	f1bc 0f10 	cmp.w	ip, #16
 8007546:	bfd8      	it	le
 8007548:	fb01 f909 	mulle.w	r9, r1, r9
 800754c:	e7f5      	b.n	800753a <_strtod_l+0x262>
 800754e:	2d10      	cmp	r5, #16
 8007550:	bfdc      	itt	le
 8007552:	220a      	movle	r2, #10
 8007554:	fb02 3909 	mlale	r9, r2, r9, r3
 8007558:	e7e1      	b.n	800751e <_strtod_l+0x246>
 800755a:	2300      	movs	r3, #0
 800755c:	9307      	str	r3, [sp, #28]
 800755e:	2201      	movs	r2, #1
 8007560:	e77c      	b.n	800745c <_strtod_l+0x184>
 8007562:	f04f 0c00 	mov.w	ip, #0
 8007566:	f108 0302 	add.w	r3, r8, #2
 800756a:	931d      	str	r3, [sp, #116]	; 0x74
 800756c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8007570:	e785      	b.n	800747e <_strtod_l+0x1a6>
 8007572:	f04f 0c01 	mov.w	ip, #1
 8007576:	e7f6      	b.n	8007566 <_strtod_l+0x28e>
 8007578:	0800baac 	.word	0x0800baac
 800757c:	0800b7f4 	.word	0x0800b7f4
 8007580:	7ff00000 	.word	0x7ff00000
 8007584:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007586:	1c59      	adds	r1, r3, #1
 8007588:	911d      	str	r1, [sp, #116]	; 0x74
 800758a:	785b      	ldrb	r3, [r3, #1]
 800758c:	2b30      	cmp	r3, #48	; 0x30
 800758e:	d0f9      	beq.n	8007584 <_strtod_l+0x2ac>
 8007590:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8007594:	2908      	cmp	r1, #8
 8007596:	f63f af79 	bhi.w	800748c <_strtod_l+0x1b4>
 800759a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800759e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80075a0:	9308      	str	r3, [sp, #32]
 80075a2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80075a4:	1c59      	adds	r1, r3, #1
 80075a6:	911d      	str	r1, [sp, #116]	; 0x74
 80075a8:	785b      	ldrb	r3, [r3, #1]
 80075aa:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80075ae:	2e09      	cmp	r6, #9
 80075b0:	d937      	bls.n	8007622 <_strtod_l+0x34a>
 80075b2:	9e08      	ldr	r6, [sp, #32]
 80075b4:	1b89      	subs	r1, r1, r6
 80075b6:	2908      	cmp	r1, #8
 80075b8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80075bc:	dc02      	bgt.n	80075c4 <_strtod_l+0x2ec>
 80075be:	4576      	cmp	r6, lr
 80075c0:	bfa8      	it	ge
 80075c2:	4676      	movge	r6, lr
 80075c4:	f1bc 0f00 	cmp.w	ip, #0
 80075c8:	d000      	beq.n	80075cc <_strtod_l+0x2f4>
 80075ca:	4276      	negs	r6, r6
 80075cc:	2d00      	cmp	r5, #0
 80075ce:	d14f      	bne.n	8007670 <_strtod_l+0x398>
 80075d0:	9904      	ldr	r1, [sp, #16]
 80075d2:	4301      	orrs	r1, r0
 80075d4:	f47f aec2 	bne.w	800735c <_strtod_l+0x84>
 80075d8:	2a00      	cmp	r2, #0
 80075da:	f47f aedb 	bne.w	8007394 <_strtod_l+0xbc>
 80075de:	2b69      	cmp	r3, #105	; 0x69
 80075e0:	d027      	beq.n	8007632 <_strtod_l+0x35a>
 80075e2:	dc24      	bgt.n	800762e <_strtod_l+0x356>
 80075e4:	2b49      	cmp	r3, #73	; 0x49
 80075e6:	d024      	beq.n	8007632 <_strtod_l+0x35a>
 80075e8:	2b4e      	cmp	r3, #78	; 0x4e
 80075ea:	f47f aed3 	bne.w	8007394 <_strtod_l+0xbc>
 80075ee:	499e      	ldr	r1, [pc, #632]	; (8007868 <_strtod_l+0x590>)
 80075f0:	a81d      	add	r0, sp, #116	; 0x74
 80075f2:	f002 f8b7 	bl	8009764 <__match>
 80075f6:	2800      	cmp	r0, #0
 80075f8:	f43f aecc 	beq.w	8007394 <_strtod_l+0xbc>
 80075fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	2b28      	cmp	r3, #40	; 0x28
 8007602:	d12d      	bne.n	8007660 <_strtod_l+0x388>
 8007604:	4999      	ldr	r1, [pc, #612]	; (800786c <_strtod_l+0x594>)
 8007606:	aa20      	add	r2, sp, #128	; 0x80
 8007608:	a81d      	add	r0, sp, #116	; 0x74
 800760a:	f002 f8bf 	bl	800978c <__hexnan>
 800760e:	2805      	cmp	r0, #5
 8007610:	d126      	bne.n	8007660 <_strtod_l+0x388>
 8007612:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007614:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8007618:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800761c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007620:	e69c      	b.n	800735c <_strtod_l+0x84>
 8007622:	210a      	movs	r1, #10
 8007624:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007628:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800762c:	e7b9      	b.n	80075a2 <_strtod_l+0x2ca>
 800762e:	2b6e      	cmp	r3, #110	; 0x6e
 8007630:	e7db      	b.n	80075ea <_strtod_l+0x312>
 8007632:	498f      	ldr	r1, [pc, #572]	; (8007870 <_strtod_l+0x598>)
 8007634:	a81d      	add	r0, sp, #116	; 0x74
 8007636:	f002 f895 	bl	8009764 <__match>
 800763a:	2800      	cmp	r0, #0
 800763c:	f43f aeaa 	beq.w	8007394 <_strtod_l+0xbc>
 8007640:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007642:	498c      	ldr	r1, [pc, #560]	; (8007874 <_strtod_l+0x59c>)
 8007644:	3b01      	subs	r3, #1
 8007646:	a81d      	add	r0, sp, #116	; 0x74
 8007648:	931d      	str	r3, [sp, #116]	; 0x74
 800764a:	f002 f88b 	bl	8009764 <__match>
 800764e:	b910      	cbnz	r0, 8007656 <_strtod_l+0x37e>
 8007650:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007652:	3301      	adds	r3, #1
 8007654:	931d      	str	r3, [sp, #116]	; 0x74
 8007656:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8007884 <_strtod_l+0x5ac>
 800765a:	f04f 0a00 	mov.w	sl, #0
 800765e:	e67d      	b.n	800735c <_strtod_l+0x84>
 8007660:	4885      	ldr	r0, [pc, #532]	; (8007878 <_strtod_l+0x5a0>)
 8007662:	f003 f929 	bl	800a8b8 <nan>
 8007666:	ed8d 0b04 	vstr	d0, [sp, #16]
 800766a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800766e:	e675      	b.n	800735c <_strtod_l+0x84>
 8007670:	9b07      	ldr	r3, [sp, #28]
 8007672:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007674:	1af3      	subs	r3, r6, r3
 8007676:	2f00      	cmp	r7, #0
 8007678:	bf08      	it	eq
 800767a:	462f      	moveq	r7, r5
 800767c:	2d10      	cmp	r5, #16
 800767e:	9308      	str	r3, [sp, #32]
 8007680:	46a8      	mov	r8, r5
 8007682:	bfa8      	it	ge
 8007684:	f04f 0810 	movge.w	r8, #16
 8007688:	f7f8 ff3c 	bl	8000504 <__aeabi_ui2d>
 800768c:	2d09      	cmp	r5, #9
 800768e:	4682      	mov	sl, r0
 8007690:	468b      	mov	fp, r1
 8007692:	dd13      	ble.n	80076bc <_strtod_l+0x3e4>
 8007694:	4b79      	ldr	r3, [pc, #484]	; (800787c <_strtod_l+0x5a4>)
 8007696:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800769a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800769e:	f7f8 ffab 	bl	80005f8 <__aeabi_dmul>
 80076a2:	4682      	mov	sl, r0
 80076a4:	4648      	mov	r0, r9
 80076a6:	468b      	mov	fp, r1
 80076a8:	f7f8 ff2c 	bl	8000504 <__aeabi_ui2d>
 80076ac:	4602      	mov	r2, r0
 80076ae:	460b      	mov	r3, r1
 80076b0:	4650      	mov	r0, sl
 80076b2:	4659      	mov	r1, fp
 80076b4:	f7f8 fdea 	bl	800028c <__adddf3>
 80076b8:	4682      	mov	sl, r0
 80076ba:	468b      	mov	fp, r1
 80076bc:	2d0f      	cmp	r5, #15
 80076be:	dc38      	bgt.n	8007732 <_strtod_l+0x45a>
 80076c0:	9b08      	ldr	r3, [sp, #32]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	f43f ae4a 	beq.w	800735c <_strtod_l+0x84>
 80076c8:	dd24      	ble.n	8007714 <_strtod_l+0x43c>
 80076ca:	2b16      	cmp	r3, #22
 80076cc:	dc0b      	bgt.n	80076e6 <_strtod_l+0x40e>
 80076ce:	4d6b      	ldr	r5, [pc, #428]	; (800787c <_strtod_l+0x5a4>)
 80076d0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80076d4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80076d8:	4652      	mov	r2, sl
 80076da:	465b      	mov	r3, fp
 80076dc:	f7f8 ff8c 	bl	80005f8 <__aeabi_dmul>
 80076e0:	4682      	mov	sl, r0
 80076e2:	468b      	mov	fp, r1
 80076e4:	e63a      	b.n	800735c <_strtod_l+0x84>
 80076e6:	9a08      	ldr	r2, [sp, #32]
 80076e8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80076ec:	4293      	cmp	r3, r2
 80076ee:	db20      	blt.n	8007732 <_strtod_l+0x45a>
 80076f0:	4c62      	ldr	r4, [pc, #392]	; (800787c <_strtod_l+0x5a4>)
 80076f2:	f1c5 050f 	rsb	r5, r5, #15
 80076f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80076fa:	4652      	mov	r2, sl
 80076fc:	465b      	mov	r3, fp
 80076fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007702:	f7f8 ff79 	bl	80005f8 <__aeabi_dmul>
 8007706:	9b08      	ldr	r3, [sp, #32]
 8007708:	1b5d      	subs	r5, r3, r5
 800770a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800770e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007712:	e7e3      	b.n	80076dc <_strtod_l+0x404>
 8007714:	9b08      	ldr	r3, [sp, #32]
 8007716:	3316      	adds	r3, #22
 8007718:	db0b      	blt.n	8007732 <_strtod_l+0x45a>
 800771a:	9b07      	ldr	r3, [sp, #28]
 800771c:	4a57      	ldr	r2, [pc, #348]	; (800787c <_strtod_l+0x5a4>)
 800771e:	1b9e      	subs	r6, r3, r6
 8007720:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8007724:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007728:	4650      	mov	r0, sl
 800772a:	4659      	mov	r1, fp
 800772c:	f7f9 f88e 	bl	800084c <__aeabi_ddiv>
 8007730:	e7d6      	b.n	80076e0 <_strtod_l+0x408>
 8007732:	9b08      	ldr	r3, [sp, #32]
 8007734:	eba5 0808 	sub.w	r8, r5, r8
 8007738:	4498      	add	r8, r3
 800773a:	f1b8 0f00 	cmp.w	r8, #0
 800773e:	dd71      	ble.n	8007824 <_strtod_l+0x54c>
 8007740:	f018 030f 	ands.w	r3, r8, #15
 8007744:	d00a      	beq.n	800775c <_strtod_l+0x484>
 8007746:	494d      	ldr	r1, [pc, #308]	; (800787c <_strtod_l+0x5a4>)
 8007748:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800774c:	4652      	mov	r2, sl
 800774e:	465b      	mov	r3, fp
 8007750:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007754:	f7f8 ff50 	bl	80005f8 <__aeabi_dmul>
 8007758:	4682      	mov	sl, r0
 800775a:	468b      	mov	fp, r1
 800775c:	f038 080f 	bics.w	r8, r8, #15
 8007760:	d04d      	beq.n	80077fe <_strtod_l+0x526>
 8007762:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007766:	dd22      	ble.n	80077ae <_strtod_l+0x4d6>
 8007768:	2500      	movs	r5, #0
 800776a:	462e      	mov	r6, r5
 800776c:	9509      	str	r5, [sp, #36]	; 0x24
 800776e:	9507      	str	r5, [sp, #28]
 8007770:	2322      	movs	r3, #34	; 0x22
 8007772:	f8df b110 	ldr.w	fp, [pc, #272]	; 8007884 <_strtod_l+0x5ac>
 8007776:	6023      	str	r3, [r4, #0]
 8007778:	f04f 0a00 	mov.w	sl, #0
 800777c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800777e:	2b00      	cmp	r3, #0
 8007780:	f43f adec 	beq.w	800735c <_strtod_l+0x84>
 8007784:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007786:	4620      	mov	r0, r4
 8007788:	f002 f966 	bl	8009a58 <_Bfree>
 800778c:	9907      	ldr	r1, [sp, #28]
 800778e:	4620      	mov	r0, r4
 8007790:	f002 f962 	bl	8009a58 <_Bfree>
 8007794:	4631      	mov	r1, r6
 8007796:	4620      	mov	r0, r4
 8007798:	f002 f95e 	bl	8009a58 <_Bfree>
 800779c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800779e:	4620      	mov	r0, r4
 80077a0:	f002 f95a 	bl	8009a58 <_Bfree>
 80077a4:	4629      	mov	r1, r5
 80077a6:	4620      	mov	r0, r4
 80077a8:	f002 f956 	bl	8009a58 <_Bfree>
 80077ac:	e5d6      	b.n	800735c <_strtod_l+0x84>
 80077ae:	2300      	movs	r3, #0
 80077b0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80077b4:	4650      	mov	r0, sl
 80077b6:	4659      	mov	r1, fp
 80077b8:	4699      	mov	r9, r3
 80077ba:	f1b8 0f01 	cmp.w	r8, #1
 80077be:	dc21      	bgt.n	8007804 <_strtod_l+0x52c>
 80077c0:	b10b      	cbz	r3, 80077c6 <_strtod_l+0x4ee>
 80077c2:	4682      	mov	sl, r0
 80077c4:	468b      	mov	fp, r1
 80077c6:	4b2e      	ldr	r3, [pc, #184]	; (8007880 <_strtod_l+0x5a8>)
 80077c8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80077cc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80077d0:	4652      	mov	r2, sl
 80077d2:	465b      	mov	r3, fp
 80077d4:	e9d9 0100 	ldrd	r0, r1, [r9]
 80077d8:	f7f8 ff0e 	bl	80005f8 <__aeabi_dmul>
 80077dc:	4b29      	ldr	r3, [pc, #164]	; (8007884 <_strtod_l+0x5ac>)
 80077de:	460a      	mov	r2, r1
 80077e0:	400b      	ands	r3, r1
 80077e2:	4929      	ldr	r1, [pc, #164]	; (8007888 <_strtod_l+0x5b0>)
 80077e4:	428b      	cmp	r3, r1
 80077e6:	4682      	mov	sl, r0
 80077e8:	d8be      	bhi.n	8007768 <_strtod_l+0x490>
 80077ea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80077ee:	428b      	cmp	r3, r1
 80077f0:	bf86      	itte	hi
 80077f2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800788c <_strtod_l+0x5b4>
 80077f6:	f04f 3aff 	movhi.w	sl, #4294967295
 80077fa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80077fe:	2300      	movs	r3, #0
 8007800:	9304      	str	r3, [sp, #16]
 8007802:	e081      	b.n	8007908 <_strtod_l+0x630>
 8007804:	f018 0f01 	tst.w	r8, #1
 8007808:	d007      	beq.n	800781a <_strtod_l+0x542>
 800780a:	4b1d      	ldr	r3, [pc, #116]	; (8007880 <_strtod_l+0x5a8>)
 800780c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007814:	f7f8 fef0 	bl	80005f8 <__aeabi_dmul>
 8007818:	2301      	movs	r3, #1
 800781a:	f109 0901 	add.w	r9, r9, #1
 800781e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007822:	e7ca      	b.n	80077ba <_strtod_l+0x4e2>
 8007824:	d0eb      	beq.n	80077fe <_strtod_l+0x526>
 8007826:	f1c8 0800 	rsb	r8, r8, #0
 800782a:	f018 020f 	ands.w	r2, r8, #15
 800782e:	d00a      	beq.n	8007846 <_strtod_l+0x56e>
 8007830:	4b12      	ldr	r3, [pc, #72]	; (800787c <_strtod_l+0x5a4>)
 8007832:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007836:	4650      	mov	r0, sl
 8007838:	4659      	mov	r1, fp
 800783a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783e:	f7f9 f805 	bl	800084c <__aeabi_ddiv>
 8007842:	4682      	mov	sl, r0
 8007844:	468b      	mov	fp, r1
 8007846:	ea5f 1828 	movs.w	r8, r8, asr #4
 800784a:	d0d8      	beq.n	80077fe <_strtod_l+0x526>
 800784c:	f1b8 0f1f 	cmp.w	r8, #31
 8007850:	dd1e      	ble.n	8007890 <_strtod_l+0x5b8>
 8007852:	2500      	movs	r5, #0
 8007854:	462e      	mov	r6, r5
 8007856:	9509      	str	r5, [sp, #36]	; 0x24
 8007858:	9507      	str	r5, [sp, #28]
 800785a:	2322      	movs	r3, #34	; 0x22
 800785c:	f04f 0a00 	mov.w	sl, #0
 8007860:	f04f 0b00 	mov.w	fp, #0
 8007864:	6023      	str	r3, [r4, #0]
 8007866:	e789      	b.n	800777c <_strtod_l+0x4a4>
 8007868:	0800b7c5 	.word	0x0800b7c5
 800786c:	0800b808 	.word	0x0800b808
 8007870:	0800b7bd 	.word	0x0800b7bd
 8007874:	0800b94c 	.word	0x0800b94c
 8007878:	0800bc68 	.word	0x0800bc68
 800787c:	0800bb48 	.word	0x0800bb48
 8007880:	0800bb20 	.word	0x0800bb20
 8007884:	7ff00000 	.word	0x7ff00000
 8007888:	7ca00000 	.word	0x7ca00000
 800788c:	7fefffff 	.word	0x7fefffff
 8007890:	f018 0310 	ands.w	r3, r8, #16
 8007894:	bf18      	it	ne
 8007896:	236a      	movne	r3, #106	; 0x6a
 8007898:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8007c50 <_strtod_l+0x978>
 800789c:	9304      	str	r3, [sp, #16]
 800789e:	4650      	mov	r0, sl
 80078a0:	4659      	mov	r1, fp
 80078a2:	2300      	movs	r3, #0
 80078a4:	f018 0f01 	tst.w	r8, #1
 80078a8:	d004      	beq.n	80078b4 <_strtod_l+0x5dc>
 80078aa:	e9d9 2300 	ldrd	r2, r3, [r9]
 80078ae:	f7f8 fea3 	bl	80005f8 <__aeabi_dmul>
 80078b2:	2301      	movs	r3, #1
 80078b4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80078b8:	f109 0908 	add.w	r9, r9, #8
 80078bc:	d1f2      	bne.n	80078a4 <_strtod_l+0x5cc>
 80078be:	b10b      	cbz	r3, 80078c4 <_strtod_l+0x5ec>
 80078c0:	4682      	mov	sl, r0
 80078c2:	468b      	mov	fp, r1
 80078c4:	9b04      	ldr	r3, [sp, #16]
 80078c6:	b1bb      	cbz	r3, 80078f8 <_strtod_l+0x620>
 80078c8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80078cc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	4659      	mov	r1, fp
 80078d4:	dd10      	ble.n	80078f8 <_strtod_l+0x620>
 80078d6:	2b1f      	cmp	r3, #31
 80078d8:	f340 8128 	ble.w	8007b2c <_strtod_l+0x854>
 80078dc:	2b34      	cmp	r3, #52	; 0x34
 80078de:	bfde      	ittt	le
 80078e0:	3b20      	suble	r3, #32
 80078e2:	f04f 32ff 	movle.w	r2, #4294967295
 80078e6:	fa02 f303 	lslle.w	r3, r2, r3
 80078ea:	f04f 0a00 	mov.w	sl, #0
 80078ee:	bfcc      	ite	gt
 80078f0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80078f4:	ea03 0b01 	andle.w	fp, r3, r1
 80078f8:	2200      	movs	r2, #0
 80078fa:	2300      	movs	r3, #0
 80078fc:	4650      	mov	r0, sl
 80078fe:	4659      	mov	r1, fp
 8007900:	f7f9 f8e2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007904:	2800      	cmp	r0, #0
 8007906:	d1a4      	bne.n	8007852 <_strtod_l+0x57a>
 8007908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800790a:	9300      	str	r3, [sp, #0]
 800790c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800790e:	462b      	mov	r3, r5
 8007910:	463a      	mov	r2, r7
 8007912:	4620      	mov	r0, r4
 8007914:	f002 f90c 	bl	8009b30 <__s2b>
 8007918:	9009      	str	r0, [sp, #36]	; 0x24
 800791a:	2800      	cmp	r0, #0
 800791c:	f43f af24 	beq.w	8007768 <_strtod_l+0x490>
 8007920:	9b07      	ldr	r3, [sp, #28]
 8007922:	1b9e      	subs	r6, r3, r6
 8007924:	9b08      	ldr	r3, [sp, #32]
 8007926:	2b00      	cmp	r3, #0
 8007928:	bfb4      	ite	lt
 800792a:	4633      	movlt	r3, r6
 800792c:	2300      	movge	r3, #0
 800792e:	9310      	str	r3, [sp, #64]	; 0x40
 8007930:	9b08      	ldr	r3, [sp, #32]
 8007932:	2500      	movs	r5, #0
 8007934:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007938:	9318      	str	r3, [sp, #96]	; 0x60
 800793a:	462e      	mov	r6, r5
 800793c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800793e:	4620      	mov	r0, r4
 8007940:	6859      	ldr	r1, [r3, #4]
 8007942:	f002 f849 	bl	80099d8 <_Balloc>
 8007946:	9007      	str	r0, [sp, #28]
 8007948:	2800      	cmp	r0, #0
 800794a:	f43f af11 	beq.w	8007770 <_strtod_l+0x498>
 800794e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007950:	691a      	ldr	r2, [r3, #16]
 8007952:	3202      	adds	r2, #2
 8007954:	f103 010c 	add.w	r1, r3, #12
 8007958:	0092      	lsls	r2, r2, #2
 800795a:	300c      	adds	r0, #12
 800795c:	f7fe fbc2 	bl	80060e4 <memcpy>
 8007960:	ec4b ab10 	vmov	d0, sl, fp
 8007964:	aa20      	add	r2, sp, #128	; 0x80
 8007966:	a91f      	add	r1, sp, #124	; 0x7c
 8007968:	4620      	mov	r0, r4
 800796a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800796e:	f002 fc1b 	bl	800a1a8 <__d2b>
 8007972:	901e      	str	r0, [sp, #120]	; 0x78
 8007974:	2800      	cmp	r0, #0
 8007976:	f43f aefb 	beq.w	8007770 <_strtod_l+0x498>
 800797a:	2101      	movs	r1, #1
 800797c:	4620      	mov	r0, r4
 800797e:	f002 f971 	bl	8009c64 <__i2b>
 8007982:	4606      	mov	r6, r0
 8007984:	2800      	cmp	r0, #0
 8007986:	f43f aef3 	beq.w	8007770 <_strtod_l+0x498>
 800798a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800798c:	9904      	ldr	r1, [sp, #16]
 800798e:	2b00      	cmp	r3, #0
 8007990:	bfab      	itete	ge
 8007992:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8007994:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8007996:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8007998:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800799c:	bfac      	ite	ge
 800799e:	eb03 0902 	addge.w	r9, r3, r2
 80079a2:	1ad7      	sublt	r7, r2, r3
 80079a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80079a6:	eba3 0801 	sub.w	r8, r3, r1
 80079aa:	4490      	add	r8, r2
 80079ac:	4ba3      	ldr	r3, [pc, #652]	; (8007c3c <_strtod_l+0x964>)
 80079ae:	f108 38ff 	add.w	r8, r8, #4294967295
 80079b2:	4598      	cmp	r8, r3
 80079b4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80079b8:	f280 80cc 	bge.w	8007b54 <_strtod_l+0x87c>
 80079bc:	eba3 0308 	sub.w	r3, r3, r8
 80079c0:	2b1f      	cmp	r3, #31
 80079c2:	eba2 0203 	sub.w	r2, r2, r3
 80079c6:	f04f 0101 	mov.w	r1, #1
 80079ca:	f300 80b6 	bgt.w	8007b3a <_strtod_l+0x862>
 80079ce:	fa01 f303 	lsl.w	r3, r1, r3
 80079d2:	9311      	str	r3, [sp, #68]	; 0x44
 80079d4:	2300      	movs	r3, #0
 80079d6:	930c      	str	r3, [sp, #48]	; 0x30
 80079d8:	eb09 0802 	add.w	r8, r9, r2
 80079dc:	9b04      	ldr	r3, [sp, #16]
 80079de:	45c1      	cmp	r9, r8
 80079e0:	4417      	add	r7, r2
 80079e2:	441f      	add	r7, r3
 80079e4:	464b      	mov	r3, r9
 80079e6:	bfa8      	it	ge
 80079e8:	4643      	movge	r3, r8
 80079ea:	42bb      	cmp	r3, r7
 80079ec:	bfa8      	it	ge
 80079ee:	463b      	movge	r3, r7
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	bfc2      	ittt	gt
 80079f4:	eba8 0803 	subgt.w	r8, r8, r3
 80079f8:	1aff      	subgt	r7, r7, r3
 80079fa:	eba9 0903 	subgt.w	r9, r9, r3
 80079fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	dd17      	ble.n	8007a34 <_strtod_l+0x75c>
 8007a04:	4631      	mov	r1, r6
 8007a06:	461a      	mov	r2, r3
 8007a08:	4620      	mov	r0, r4
 8007a0a:	f002 f9e7 	bl	8009ddc <__pow5mult>
 8007a0e:	4606      	mov	r6, r0
 8007a10:	2800      	cmp	r0, #0
 8007a12:	f43f aead 	beq.w	8007770 <_strtod_l+0x498>
 8007a16:	4601      	mov	r1, r0
 8007a18:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	f002 f938 	bl	8009c90 <__multiply>
 8007a20:	900f      	str	r0, [sp, #60]	; 0x3c
 8007a22:	2800      	cmp	r0, #0
 8007a24:	f43f aea4 	beq.w	8007770 <_strtod_l+0x498>
 8007a28:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	f002 f814 	bl	8009a58 <_Bfree>
 8007a30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a32:	931e      	str	r3, [sp, #120]	; 0x78
 8007a34:	f1b8 0f00 	cmp.w	r8, #0
 8007a38:	f300 8091 	bgt.w	8007b5e <_strtod_l+0x886>
 8007a3c:	9b08      	ldr	r3, [sp, #32]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	dd08      	ble.n	8007a54 <_strtod_l+0x77c>
 8007a42:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007a44:	9907      	ldr	r1, [sp, #28]
 8007a46:	4620      	mov	r0, r4
 8007a48:	f002 f9c8 	bl	8009ddc <__pow5mult>
 8007a4c:	9007      	str	r0, [sp, #28]
 8007a4e:	2800      	cmp	r0, #0
 8007a50:	f43f ae8e 	beq.w	8007770 <_strtod_l+0x498>
 8007a54:	2f00      	cmp	r7, #0
 8007a56:	dd08      	ble.n	8007a6a <_strtod_l+0x792>
 8007a58:	9907      	ldr	r1, [sp, #28]
 8007a5a:	463a      	mov	r2, r7
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	f002 fa17 	bl	8009e90 <__lshift>
 8007a62:	9007      	str	r0, [sp, #28]
 8007a64:	2800      	cmp	r0, #0
 8007a66:	f43f ae83 	beq.w	8007770 <_strtod_l+0x498>
 8007a6a:	f1b9 0f00 	cmp.w	r9, #0
 8007a6e:	dd08      	ble.n	8007a82 <_strtod_l+0x7aa>
 8007a70:	4631      	mov	r1, r6
 8007a72:	464a      	mov	r2, r9
 8007a74:	4620      	mov	r0, r4
 8007a76:	f002 fa0b 	bl	8009e90 <__lshift>
 8007a7a:	4606      	mov	r6, r0
 8007a7c:	2800      	cmp	r0, #0
 8007a7e:	f43f ae77 	beq.w	8007770 <_strtod_l+0x498>
 8007a82:	9a07      	ldr	r2, [sp, #28]
 8007a84:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007a86:	4620      	mov	r0, r4
 8007a88:	f002 fa8a 	bl	8009fa0 <__mdiff>
 8007a8c:	4605      	mov	r5, r0
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	f43f ae6e 	beq.w	8007770 <_strtod_l+0x498>
 8007a94:	68c3      	ldr	r3, [r0, #12]
 8007a96:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a98:	2300      	movs	r3, #0
 8007a9a:	60c3      	str	r3, [r0, #12]
 8007a9c:	4631      	mov	r1, r6
 8007a9e:	f002 fa63 	bl	8009f68 <__mcmp>
 8007aa2:	2800      	cmp	r0, #0
 8007aa4:	da65      	bge.n	8007b72 <_strtod_l+0x89a>
 8007aa6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007aa8:	ea53 030a 	orrs.w	r3, r3, sl
 8007aac:	f040 8087 	bne.w	8007bbe <_strtod_l+0x8e6>
 8007ab0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	f040 8082 	bne.w	8007bbe <_strtod_l+0x8e6>
 8007aba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007abe:	0d1b      	lsrs	r3, r3, #20
 8007ac0:	051b      	lsls	r3, r3, #20
 8007ac2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007ac6:	d97a      	bls.n	8007bbe <_strtod_l+0x8e6>
 8007ac8:	696b      	ldr	r3, [r5, #20]
 8007aca:	b913      	cbnz	r3, 8007ad2 <_strtod_l+0x7fa>
 8007acc:	692b      	ldr	r3, [r5, #16]
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	dd75      	ble.n	8007bbe <_strtod_l+0x8e6>
 8007ad2:	4629      	mov	r1, r5
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	f002 f9da 	bl	8009e90 <__lshift>
 8007adc:	4631      	mov	r1, r6
 8007ade:	4605      	mov	r5, r0
 8007ae0:	f002 fa42 	bl	8009f68 <__mcmp>
 8007ae4:	2800      	cmp	r0, #0
 8007ae6:	dd6a      	ble.n	8007bbe <_strtod_l+0x8e6>
 8007ae8:	9904      	ldr	r1, [sp, #16]
 8007aea:	4a55      	ldr	r2, [pc, #340]	; (8007c40 <_strtod_l+0x968>)
 8007aec:	465b      	mov	r3, fp
 8007aee:	2900      	cmp	r1, #0
 8007af0:	f000 8085 	beq.w	8007bfe <_strtod_l+0x926>
 8007af4:	ea02 010b 	and.w	r1, r2, fp
 8007af8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007afc:	dc7f      	bgt.n	8007bfe <_strtod_l+0x926>
 8007afe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007b02:	f77f aeaa 	ble.w	800785a <_strtod_l+0x582>
 8007b06:	4a4f      	ldr	r2, [pc, #316]	; (8007c44 <_strtod_l+0x96c>)
 8007b08:	2300      	movs	r3, #0
 8007b0a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8007b0e:	4650      	mov	r0, sl
 8007b10:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8007b14:	4659      	mov	r1, fp
 8007b16:	f7f8 fd6f 	bl	80005f8 <__aeabi_dmul>
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	4303      	orrs	r3, r0
 8007b1e:	bf08      	it	eq
 8007b20:	2322      	moveq	r3, #34	; 0x22
 8007b22:	4682      	mov	sl, r0
 8007b24:	468b      	mov	fp, r1
 8007b26:	bf08      	it	eq
 8007b28:	6023      	streq	r3, [r4, #0]
 8007b2a:	e62b      	b.n	8007784 <_strtod_l+0x4ac>
 8007b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b30:	fa02 f303 	lsl.w	r3, r2, r3
 8007b34:	ea03 0a0a 	and.w	sl, r3, sl
 8007b38:	e6de      	b.n	80078f8 <_strtod_l+0x620>
 8007b3a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007b3e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007b42:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007b46:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007b4a:	fa01 f308 	lsl.w	r3, r1, r8
 8007b4e:	930c      	str	r3, [sp, #48]	; 0x30
 8007b50:	9111      	str	r1, [sp, #68]	; 0x44
 8007b52:	e741      	b.n	80079d8 <_strtod_l+0x700>
 8007b54:	2300      	movs	r3, #0
 8007b56:	930c      	str	r3, [sp, #48]	; 0x30
 8007b58:	2301      	movs	r3, #1
 8007b5a:	9311      	str	r3, [sp, #68]	; 0x44
 8007b5c:	e73c      	b.n	80079d8 <_strtod_l+0x700>
 8007b5e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007b60:	4642      	mov	r2, r8
 8007b62:	4620      	mov	r0, r4
 8007b64:	f002 f994 	bl	8009e90 <__lshift>
 8007b68:	901e      	str	r0, [sp, #120]	; 0x78
 8007b6a:	2800      	cmp	r0, #0
 8007b6c:	f47f af66 	bne.w	8007a3c <_strtod_l+0x764>
 8007b70:	e5fe      	b.n	8007770 <_strtod_l+0x498>
 8007b72:	465f      	mov	r7, fp
 8007b74:	d16e      	bne.n	8007c54 <_strtod_l+0x97c>
 8007b76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b7c:	b342      	cbz	r2, 8007bd0 <_strtod_l+0x8f8>
 8007b7e:	4a32      	ldr	r2, [pc, #200]	; (8007c48 <_strtod_l+0x970>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d128      	bne.n	8007bd6 <_strtod_l+0x8fe>
 8007b84:	9b04      	ldr	r3, [sp, #16]
 8007b86:	4650      	mov	r0, sl
 8007b88:	b1eb      	cbz	r3, 8007bc6 <_strtod_l+0x8ee>
 8007b8a:	4a2d      	ldr	r2, [pc, #180]	; (8007c40 <_strtod_l+0x968>)
 8007b8c:	403a      	ands	r2, r7
 8007b8e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007b92:	f04f 31ff 	mov.w	r1, #4294967295
 8007b96:	d819      	bhi.n	8007bcc <_strtod_l+0x8f4>
 8007b98:	0d12      	lsrs	r2, r2, #20
 8007b9a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8007ba2:	4298      	cmp	r0, r3
 8007ba4:	d117      	bne.n	8007bd6 <_strtod_l+0x8fe>
 8007ba6:	4b29      	ldr	r3, [pc, #164]	; (8007c4c <_strtod_l+0x974>)
 8007ba8:	429f      	cmp	r7, r3
 8007baa:	d102      	bne.n	8007bb2 <_strtod_l+0x8da>
 8007bac:	3001      	adds	r0, #1
 8007bae:	f43f addf 	beq.w	8007770 <_strtod_l+0x498>
 8007bb2:	4b23      	ldr	r3, [pc, #140]	; (8007c40 <_strtod_l+0x968>)
 8007bb4:	403b      	ands	r3, r7
 8007bb6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007bba:	f04f 0a00 	mov.w	sl, #0
 8007bbe:	9b04      	ldr	r3, [sp, #16]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1a0      	bne.n	8007b06 <_strtod_l+0x82e>
 8007bc4:	e5de      	b.n	8007784 <_strtod_l+0x4ac>
 8007bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8007bca:	e7ea      	b.n	8007ba2 <_strtod_l+0x8ca>
 8007bcc:	460b      	mov	r3, r1
 8007bce:	e7e8      	b.n	8007ba2 <_strtod_l+0x8ca>
 8007bd0:	ea53 030a 	orrs.w	r3, r3, sl
 8007bd4:	d088      	beq.n	8007ae8 <_strtod_l+0x810>
 8007bd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007bd8:	b1db      	cbz	r3, 8007c12 <_strtod_l+0x93a>
 8007bda:	423b      	tst	r3, r7
 8007bdc:	d0ef      	beq.n	8007bbe <_strtod_l+0x8e6>
 8007bde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007be0:	9a04      	ldr	r2, [sp, #16]
 8007be2:	4650      	mov	r0, sl
 8007be4:	4659      	mov	r1, fp
 8007be6:	b1c3      	cbz	r3, 8007c1a <_strtod_l+0x942>
 8007be8:	f7ff fb58 	bl	800729c <sulp>
 8007bec:	4602      	mov	r2, r0
 8007bee:	460b      	mov	r3, r1
 8007bf0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007bf4:	f7f8 fb4a 	bl	800028c <__adddf3>
 8007bf8:	4682      	mov	sl, r0
 8007bfa:	468b      	mov	fp, r1
 8007bfc:	e7df      	b.n	8007bbe <_strtod_l+0x8e6>
 8007bfe:	4013      	ands	r3, r2
 8007c00:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007c04:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007c08:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007c0c:	f04f 3aff 	mov.w	sl, #4294967295
 8007c10:	e7d5      	b.n	8007bbe <_strtod_l+0x8e6>
 8007c12:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c14:	ea13 0f0a 	tst.w	r3, sl
 8007c18:	e7e0      	b.n	8007bdc <_strtod_l+0x904>
 8007c1a:	f7ff fb3f 	bl	800729c <sulp>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	460b      	mov	r3, r1
 8007c22:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007c26:	f7f8 fb2f 	bl	8000288 <__aeabi_dsub>
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	4682      	mov	sl, r0
 8007c30:	468b      	mov	fp, r1
 8007c32:	f7f8 ff49 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c36:	2800      	cmp	r0, #0
 8007c38:	d0c1      	beq.n	8007bbe <_strtod_l+0x8e6>
 8007c3a:	e60e      	b.n	800785a <_strtod_l+0x582>
 8007c3c:	fffffc02 	.word	0xfffffc02
 8007c40:	7ff00000 	.word	0x7ff00000
 8007c44:	39500000 	.word	0x39500000
 8007c48:	000fffff 	.word	0x000fffff
 8007c4c:	7fefffff 	.word	0x7fefffff
 8007c50:	0800b820 	.word	0x0800b820
 8007c54:	4631      	mov	r1, r6
 8007c56:	4628      	mov	r0, r5
 8007c58:	f002 fb02 	bl	800a260 <__ratio>
 8007c5c:	ec59 8b10 	vmov	r8, r9, d0
 8007c60:	ee10 0a10 	vmov	r0, s0
 8007c64:	2200      	movs	r2, #0
 8007c66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007c6a:	4649      	mov	r1, r9
 8007c6c:	f7f8 ff40 	bl	8000af0 <__aeabi_dcmple>
 8007c70:	2800      	cmp	r0, #0
 8007c72:	d07c      	beq.n	8007d6e <_strtod_l+0xa96>
 8007c74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d04c      	beq.n	8007d14 <_strtod_l+0xa3c>
 8007c7a:	4b95      	ldr	r3, [pc, #596]	; (8007ed0 <_strtod_l+0xbf8>)
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007c82:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007ed0 <_strtod_l+0xbf8>
 8007c86:	f04f 0800 	mov.w	r8, #0
 8007c8a:	4b92      	ldr	r3, [pc, #584]	; (8007ed4 <_strtod_l+0xbfc>)
 8007c8c:	403b      	ands	r3, r7
 8007c8e:	9311      	str	r3, [sp, #68]	; 0x44
 8007c90:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007c92:	4b91      	ldr	r3, [pc, #580]	; (8007ed8 <_strtod_l+0xc00>)
 8007c94:	429a      	cmp	r2, r3
 8007c96:	f040 80b2 	bne.w	8007dfe <_strtod_l+0xb26>
 8007c9a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007c9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007ca2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007ca6:	ec4b ab10 	vmov	d0, sl, fp
 8007caa:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8007cae:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007cb2:	f002 f9fd 	bl	800a0b0 <__ulp>
 8007cb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007cba:	ec53 2b10 	vmov	r2, r3, d0
 8007cbe:	f7f8 fc9b 	bl	80005f8 <__aeabi_dmul>
 8007cc2:	4652      	mov	r2, sl
 8007cc4:	465b      	mov	r3, fp
 8007cc6:	f7f8 fae1 	bl	800028c <__adddf3>
 8007cca:	460b      	mov	r3, r1
 8007ccc:	4981      	ldr	r1, [pc, #516]	; (8007ed4 <_strtod_l+0xbfc>)
 8007cce:	4a83      	ldr	r2, [pc, #524]	; (8007edc <_strtod_l+0xc04>)
 8007cd0:	4019      	ands	r1, r3
 8007cd2:	4291      	cmp	r1, r2
 8007cd4:	4682      	mov	sl, r0
 8007cd6:	d95e      	bls.n	8007d96 <_strtod_l+0xabe>
 8007cd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cda:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d103      	bne.n	8007cea <_strtod_l+0xa12>
 8007ce2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	f43f ad43 	beq.w	8007770 <_strtod_l+0x498>
 8007cea:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8007ee8 <_strtod_l+0xc10>
 8007cee:	f04f 3aff 	mov.w	sl, #4294967295
 8007cf2:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007cf4:	4620      	mov	r0, r4
 8007cf6:	f001 feaf 	bl	8009a58 <_Bfree>
 8007cfa:	9907      	ldr	r1, [sp, #28]
 8007cfc:	4620      	mov	r0, r4
 8007cfe:	f001 feab 	bl	8009a58 <_Bfree>
 8007d02:	4631      	mov	r1, r6
 8007d04:	4620      	mov	r0, r4
 8007d06:	f001 fea7 	bl	8009a58 <_Bfree>
 8007d0a:	4629      	mov	r1, r5
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	f001 fea3 	bl	8009a58 <_Bfree>
 8007d12:	e613      	b.n	800793c <_strtod_l+0x664>
 8007d14:	f1ba 0f00 	cmp.w	sl, #0
 8007d18:	d11b      	bne.n	8007d52 <_strtod_l+0xa7a>
 8007d1a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d1e:	b9f3      	cbnz	r3, 8007d5e <_strtod_l+0xa86>
 8007d20:	4b6b      	ldr	r3, [pc, #428]	; (8007ed0 <_strtod_l+0xbf8>)
 8007d22:	2200      	movs	r2, #0
 8007d24:	4640      	mov	r0, r8
 8007d26:	4649      	mov	r1, r9
 8007d28:	f7f8 fed8 	bl	8000adc <__aeabi_dcmplt>
 8007d2c:	b9d0      	cbnz	r0, 8007d64 <_strtod_l+0xa8c>
 8007d2e:	4640      	mov	r0, r8
 8007d30:	4649      	mov	r1, r9
 8007d32:	4b6b      	ldr	r3, [pc, #428]	; (8007ee0 <_strtod_l+0xc08>)
 8007d34:	2200      	movs	r2, #0
 8007d36:	f7f8 fc5f 	bl	80005f8 <__aeabi_dmul>
 8007d3a:	4680      	mov	r8, r0
 8007d3c:	4689      	mov	r9, r1
 8007d3e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007d42:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8007d46:	931b      	str	r3, [sp, #108]	; 0x6c
 8007d48:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8007d4c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007d50:	e79b      	b.n	8007c8a <_strtod_l+0x9b2>
 8007d52:	f1ba 0f01 	cmp.w	sl, #1
 8007d56:	d102      	bne.n	8007d5e <_strtod_l+0xa86>
 8007d58:	2f00      	cmp	r7, #0
 8007d5a:	f43f ad7e 	beq.w	800785a <_strtod_l+0x582>
 8007d5e:	4b61      	ldr	r3, [pc, #388]	; (8007ee4 <_strtod_l+0xc0c>)
 8007d60:	2200      	movs	r2, #0
 8007d62:	e78c      	b.n	8007c7e <_strtod_l+0x9a6>
 8007d64:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007ee0 <_strtod_l+0xc08>
 8007d68:	f04f 0800 	mov.w	r8, #0
 8007d6c:	e7e7      	b.n	8007d3e <_strtod_l+0xa66>
 8007d6e:	4b5c      	ldr	r3, [pc, #368]	; (8007ee0 <_strtod_l+0xc08>)
 8007d70:	4640      	mov	r0, r8
 8007d72:	4649      	mov	r1, r9
 8007d74:	2200      	movs	r2, #0
 8007d76:	f7f8 fc3f 	bl	80005f8 <__aeabi_dmul>
 8007d7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d7c:	4680      	mov	r8, r0
 8007d7e:	4689      	mov	r9, r1
 8007d80:	b933      	cbnz	r3, 8007d90 <_strtod_l+0xab8>
 8007d82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d86:	9012      	str	r0, [sp, #72]	; 0x48
 8007d88:	9313      	str	r3, [sp, #76]	; 0x4c
 8007d8a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8007d8e:	e7dd      	b.n	8007d4c <_strtod_l+0xa74>
 8007d90:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8007d94:	e7f9      	b.n	8007d8a <_strtod_l+0xab2>
 8007d96:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007d9a:	9b04      	ldr	r3, [sp, #16]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d1a8      	bne.n	8007cf2 <_strtod_l+0xa1a>
 8007da0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007da4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007da6:	0d1b      	lsrs	r3, r3, #20
 8007da8:	051b      	lsls	r3, r3, #20
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d1a1      	bne.n	8007cf2 <_strtod_l+0xa1a>
 8007dae:	4640      	mov	r0, r8
 8007db0:	4649      	mov	r1, r9
 8007db2:	f7f8 ff81 	bl	8000cb8 <__aeabi_d2lz>
 8007db6:	f7f8 fbf1 	bl	800059c <__aeabi_l2d>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	4640      	mov	r0, r8
 8007dc0:	4649      	mov	r1, r9
 8007dc2:	f7f8 fa61 	bl	8000288 <__aeabi_dsub>
 8007dc6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007dc8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007dcc:	ea43 030a 	orr.w	r3, r3, sl
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	4680      	mov	r8, r0
 8007dd4:	4689      	mov	r9, r1
 8007dd6:	d053      	beq.n	8007e80 <_strtod_l+0xba8>
 8007dd8:	a335      	add	r3, pc, #212	; (adr r3, 8007eb0 <_strtod_l+0xbd8>)
 8007dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dde:	f7f8 fe7d 	bl	8000adc <__aeabi_dcmplt>
 8007de2:	2800      	cmp	r0, #0
 8007de4:	f47f acce 	bne.w	8007784 <_strtod_l+0x4ac>
 8007de8:	a333      	add	r3, pc, #204	; (adr r3, 8007eb8 <_strtod_l+0xbe0>)
 8007dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dee:	4640      	mov	r0, r8
 8007df0:	4649      	mov	r1, r9
 8007df2:	f7f8 fe91 	bl	8000b18 <__aeabi_dcmpgt>
 8007df6:	2800      	cmp	r0, #0
 8007df8:	f43f af7b 	beq.w	8007cf2 <_strtod_l+0xa1a>
 8007dfc:	e4c2      	b.n	8007784 <_strtod_l+0x4ac>
 8007dfe:	9b04      	ldr	r3, [sp, #16]
 8007e00:	b333      	cbz	r3, 8007e50 <_strtod_l+0xb78>
 8007e02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e04:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007e08:	d822      	bhi.n	8007e50 <_strtod_l+0xb78>
 8007e0a:	a32d      	add	r3, pc, #180	; (adr r3, 8007ec0 <_strtod_l+0xbe8>)
 8007e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e10:	4640      	mov	r0, r8
 8007e12:	4649      	mov	r1, r9
 8007e14:	f7f8 fe6c 	bl	8000af0 <__aeabi_dcmple>
 8007e18:	b1a0      	cbz	r0, 8007e44 <_strtod_l+0xb6c>
 8007e1a:	4649      	mov	r1, r9
 8007e1c:	4640      	mov	r0, r8
 8007e1e:	f7f8 fec3 	bl	8000ba8 <__aeabi_d2uiz>
 8007e22:	2801      	cmp	r0, #1
 8007e24:	bf38      	it	cc
 8007e26:	2001      	movcc	r0, #1
 8007e28:	f7f8 fb6c 	bl	8000504 <__aeabi_ui2d>
 8007e2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e2e:	4680      	mov	r8, r0
 8007e30:	4689      	mov	r9, r1
 8007e32:	bb13      	cbnz	r3, 8007e7a <_strtod_l+0xba2>
 8007e34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e38:	9014      	str	r0, [sp, #80]	; 0x50
 8007e3a:	9315      	str	r3, [sp, #84]	; 0x54
 8007e3c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007e40:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007e44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e46:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007e48:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007e4c:	1a9b      	subs	r3, r3, r2
 8007e4e:	930d      	str	r3, [sp, #52]	; 0x34
 8007e50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e54:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007e58:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007e5c:	f002 f928 	bl	800a0b0 <__ulp>
 8007e60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e64:	ec53 2b10 	vmov	r2, r3, d0
 8007e68:	f7f8 fbc6 	bl	80005f8 <__aeabi_dmul>
 8007e6c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007e70:	f7f8 fa0c 	bl	800028c <__adddf3>
 8007e74:	4682      	mov	sl, r0
 8007e76:	468b      	mov	fp, r1
 8007e78:	e78f      	b.n	8007d9a <_strtod_l+0xac2>
 8007e7a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8007e7e:	e7dd      	b.n	8007e3c <_strtod_l+0xb64>
 8007e80:	a311      	add	r3, pc, #68	; (adr r3, 8007ec8 <_strtod_l+0xbf0>)
 8007e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e86:	f7f8 fe29 	bl	8000adc <__aeabi_dcmplt>
 8007e8a:	e7b4      	b.n	8007df6 <_strtod_l+0xb1e>
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	930e      	str	r3, [sp, #56]	; 0x38
 8007e90:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007e92:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007e94:	6013      	str	r3, [r2, #0]
 8007e96:	f7ff ba65 	b.w	8007364 <_strtod_l+0x8c>
 8007e9a:	2b65      	cmp	r3, #101	; 0x65
 8007e9c:	f43f ab5d 	beq.w	800755a <_strtod_l+0x282>
 8007ea0:	2b45      	cmp	r3, #69	; 0x45
 8007ea2:	f43f ab5a 	beq.w	800755a <_strtod_l+0x282>
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f7ff bb92 	b.w	80075d0 <_strtod_l+0x2f8>
 8007eac:	f3af 8000 	nop.w
 8007eb0:	94a03595 	.word	0x94a03595
 8007eb4:	3fdfffff 	.word	0x3fdfffff
 8007eb8:	35afe535 	.word	0x35afe535
 8007ebc:	3fe00000 	.word	0x3fe00000
 8007ec0:	ffc00000 	.word	0xffc00000
 8007ec4:	41dfffff 	.word	0x41dfffff
 8007ec8:	94a03595 	.word	0x94a03595
 8007ecc:	3fcfffff 	.word	0x3fcfffff
 8007ed0:	3ff00000 	.word	0x3ff00000
 8007ed4:	7ff00000 	.word	0x7ff00000
 8007ed8:	7fe00000 	.word	0x7fe00000
 8007edc:	7c9fffff 	.word	0x7c9fffff
 8007ee0:	3fe00000 	.word	0x3fe00000
 8007ee4:	bff00000 	.word	0xbff00000
 8007ee8:	7fefffff 	.word	0x7fefffff

08007eec <_strtod_r>:
 8007eec:	4b01      	ldr	r3, [pc, #4]	; (8007ef4 <_strtod_r+0x8>)
 8007eee:	f7ff b9f3 	b.w	80072d8 <_strtod_l>
 8007ef2:	bf00      	nop
 8007ef4:	200000d4 	.word	0x200000d4

08007ef8 <_strtol_l.isra.0>:
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007efe:	d001      	beq.n	8007f04 <_strtol_l.isra.0+0xc>
 8007f00:	2b24      	cmp	r3, #36	; 0x24
 8007f02:	d906      	bls.n	8007f12 <_strtol_l.isra.0+0x1a>
 8007f04:	f7fe f8bc 	bl	8006080 <__errno>
 8007f08:	2316      	movs	r3, #22
 8007f0a:	6003      	str	r3, [r0, #0]
 8007f0c:	2000      	movs	r0, #0
 8007f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f12:	4f3a      	ldr	r7, [pc, #232]	; (8007ffc <_strtol_l.isra.0+0x104>)
 8007f14:	468e      	mov	lr, r1
 8007f16:	4676      	mov	r6, lr
 8007f18:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007f1c:	5de5      	ldrb	r5, [r4, r7]
 8007f1e:	f015 0508 	ands.w	r5, r5, #8
 8007f22:	d1f8      	bne.n	8007f16 <_strtol_l.isra.0+0x1e>
 8007f24:	2c2d      	cmp	r4, #45	; 0x2d
 8007f26:	d134      	bne.n	8007f92 <_strtol_l.isra.0+0x9a>
 8007f28:	f89e 4000 	ldrb.w	r4, [lr]
 8007f2c:	f04f 0801 	mov.w	r8, #1
 8007f30:	f106 0e02 	add.w	lr, r6, #2
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d05c      	beq.n	8007ff2 <_strtol_l.isra.0+0xfa>
 8007f38:	2b10      	cmp	r3, #16
 8007f3a:	d10c      	bne.n	8007f56 <_strtol_l.isra.0+0x5e>
 8007f3c:	2c30      	cmp	r4, #48	; 0x30
 8007f3e:	d10a      	bne.n	8007f56 <_strtol_l.isra.0+0x5e>
 8007f40:	f89e 4000 	ldrb.w	r4, [lr]
 8007f44:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007f48:	2c58      	cmp	r4, #88	; 0x58
 8007f4a:	d14d      	bne.n	8007fe8 <_strtol_l.isra.0+0xf0>
 8007f4c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8007f50:	2310      	movs	r3, #16
 8007f52:	f10e 0e02 	add.w	lr, lr, #2
 8007f56:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8007f5a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007f5e:	2600      	movs	r6, #0
 8007f60:	fbbc f9f3 	udiv	r9, ip, r3
 8007f64:	4635      	mov	r5, r6
 8007f66:	fb03 ca19 	mls	sl, r3, r9, ip
 8007f6a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007f6e:	2f09      	cmp	r7, #9
 8007f70:	d818      	bhi.n	8007fa4 <_strtol_l.isra.0+0xac>
 8007f72:	463c      	mov	r4, r7
 8007f74:	42a3      	cmp	r3, r4
 8007f76:	dd24      	ble.n	8007fc2 <_strtol_l.isra.0+0xca>
 8007f78:	2e00      	cmp	r6, #0
 8007f7a:	db1f      	blt.n	8007fbc <_strtol_l.isra.0+0xc4>
 8007f7c:	45a9      	cmp	r9, r5
 8007f7e:	d31d      	bcc.n	8007fbc <_strtol_l.isra.0+0xc4>
 8007f80:	d101      	bne.n	8007f86 <_strtol_l.isra.0+0x8e>
 8007f82:	45a2      	cmp	sl, r4
 8007f84:	db1a      	blt.n	8007fbc <_strtol_l.isra.0+0xc4>
 8007f86:	fb05 4503 	mla	r5, r5, r3, r4
 8007f8a:	2601      	movs	r6, #1
 8007f8c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007f90:	e7eb      	b.n	8007f6a <_strtol_l.isra.0+0x72>
 8007f92:	2c2b      	cmp	r4, #43	; 0x2b
 8007f94:	bf08      	it	eq
 8007f96:	f89e 4000 	ldrbeq.w	r4, [lr]
 8007f9a:	46a8      	mov	r8, r5
 8007f9c:	bf08      	it	eq
 8007f9e:	f106 0e02 	addeq.w	lr, r6, #2
 8007fa2:	e7c7      	b.n	8007f34 <_strtol_l.isra.0+0x3c>
 8007fa4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007fa8:	2f19      	cmp	r7, #25
 8007faa:	d801      	bhi.n	8007fb0 <_strtol_l.isra.0+0xb8>
 8007fac:	3c37      	subs	r4, #55	; 0x37
 8007fae:	e7e1      	b.n	8007f74 <_strtol_l.isra.0+0x7c>
 8007fb0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007fb4:	2f19      	cmp	r7, #25
 8007fb6:	d804      	bhi.n	8007fc2 <_strtol_l.isra.0+0xca>
 8007fb8:	3c57      	subs	r4, #87	; 0x57
 8007fba:	e7db      	b.n	8007f74 <_strtol_l.isra.0+0x7c>
 8007fbc:	f04f 36ff 	mov.w	r6, #4294967295
 8007fc0:	e7e4      	b.n	8007f8c <_strtol_l.isra.0+0x94>
 8007fc2:	2e00      	cmp	r6, #0
 8007fc4:	da05      	bge.n	8007fd2 <_strtol_l.isra.0+0xda>
 8007fc6:	2322      	movs	r3, #34	; 0x22
 8007fc8:	6003      	str	r3, [r0, #0]
 8007fca:	4665      	mov	r5, ip
 8007fcc:	b942      	cbnz	r2, 8007fe0 <_strtol_l.isra.0+0xe8>
 8007fce:	4628      	mov	r0, r5
 8007fd0:	e79d      	b.n	8007f0e <_strtol_l.isra.0+0x16>
 8007fd2:	f1b8 0f00 	cmp.w	r8, #0
 8007fd6:	d000      	beq.n	8007fda <_strtol_l.isra.0+0xe2>
 8007fd8:	426d      	negs	r5, r5
 8007fda:	2a00      	cmp	r2, #0
 8007fdc:	d0f7      	beq.n	8007fce <_strtol_l.isra.0+0xd6>
 8007fde:	b10e      	cbz	r6, 8007fe4 <_strtol_l.isra.0+0xec>
 8007fe0:	f10e 31ff 	add.w	r1, lr, #4294967295
 8007fe4:	6011      	str	r1, [r2, #0]
 8007fe6:	e7f2      	b.n	8007fce <_strtol_l.isra.0+0xd6>
 8007fe8:	2430      	movs	r4, #48	; 0x30
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d1b3      	bne.n	8007f56 <_strtol_l.isra.0+0x5e>
 8007fee:	2308      	movs	r3, #8
 8007ff0:	e7b1      	b.n	8007f56 <_strtol_l.isra.0+0x5e>
 8007ff2:	2c30      	cmp	r4, #48	; 0x30
 8007ff4:	d0a4      	beq.n	8007f40 <_strtol_l.isra.0+0x48>
 8007ff6:	230a      	movs	r3, #10
 8007ff8:	e7ad      	b.n	8007f56 <_strtol_l.isra.0+0x5e>
 8007ffa:	bf00      	nop
 8007ffc:	0800b849 	.word	0x0800b849

08008000 <_strtol_r>:
 8008000:	f7ff bf7a 	b.w	8007ef8 <_strtol_l.isra.0>

08008004 <__swbuf_r>:
 8008004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008006:	460e      	mov	r6, r1
 8008008:	4614      	mov	r4, r2
 800800a:	4605      	mov	r5, r0
 800800c:	b118      	cbz	r0, 8008016 <__swbuf_r+0x12>
 800800e:	6983      	ldr	r3, [r0, #24]
 8008010:	b90b      	cbnz	r3, 8008016 <__swbuf_r+0x12>
 8008012:	f001 f84b 	bl	80090ac <__sinit>
 8008016:	4b21      	ldr	r3, [pc, #132]	; (800809c <__swbuf_r+0x98>)
 8008018:	429c      	cmp	r4, r3
 800801a:	d12b      	bne.n	8008074 <__swbuf_r+0x70>
 800801c:	686c      	ldr	r4, [r5, #4]
 800801e:	69a3      	ldr	r3, [r4, #24]
 8008020:	60a3      	str	r3, [r4, #8]
 8008022:	89a3      	ldrh	r3, [r4, #12]
 8008024:	071a      	lsls	r2, r3, #28
 8008026:	d52f      	bpl.n	8008088 <__swbuf_r+0x84>
 8008028:	6923      	ldr	r3, [r4, #16]
 800802a:	b36b      	cbz	r3, 8008088 <__swbuf_r+0x84>
 800802c:	6923      	ldr	r3, [r4, #16]
 800802e:	6820      	ldr	r0, [r4, #0]
 8008030:	1ac0      	subs	r0, r0, r3
 8008032:	6963      	ldr	r3, [r4, #20]
 8008034:	b2f6      	uxtb	r6, r6
 8008036:	4283      	cmp	r3, r0
 8008038:	4637      	mov	r7, r6
 800803a:	dc04      	bgt.n	8008046 <__swbuf_r+0x42>
 800803c:	4621      	mov	r1, r4
 800803e:	4628      	mov	r0, r5
 8008040:	f000 ffa0 	bl	8008f84 <_fflush_r>
 8008044:	bb30      	cbnz	r0, 8008094 <__swbuf_r+0x90>
 8008046:	68a3      	ldr	r3, [r4, #8]
 8008048:	3b01      	subs	r3, #1
 800804a:	60a3      	str	r3, [r4, #8]
 800804c:	6823      	ldr	r3, [r4, #0]
 800804e:	1c5a      	adds	r2, r3, #1
 8008050:	6022      	str	r2, [r4, #0]
 8008052:	701e      	strb	r6, [r3, #0]
 8008054:	6963      	ldr	r3, [r4, #20]
 8008056:	3001      	adds	r0, #1
 8008058:	4283      	cmp	r3, r0
 800805a:	d004      	beq.n	8008066 <__swbuf_r+0x62>
 800805c:	89a3      	ldrh	r3, [r4, #12]
 800805e:	07db      	lsls	r3, r3, #31
 8008060:	d506      	bpl.n	8008070 <__swbuf_r+0x6c>
 8008062:	2e0a      	cmp	r6, #10
 8008064:	d104      	bne.n	8008070 <__swbuf_r+0x6c>
 8008066:	4621      	mov	r1, r4
 8008068:	4628      	mov	r0, r5
 800806a:	f000 ff8b 	bl	8008f84 <_fflush_r>
 800806e:	b988      	cbnz	r0, 8008094 <__swbuf_r+0x90>
 8008070:	4638      	mov	r0, r7
 8008072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008074:	4b0a      	ldr	r3, [pc, #40]	; (80080a0 <__swbuf_r+0x9c>)
 8008076:	429c      	cmp	r4, r3
 8008078:	d101      	bne.n	800807e <__swbuf_r+0x7a>
 800807a:	68ac      	ldr	r4, [r5, #8]
 800807c:	e7cf      	b.n	800801e <__swbuf_r+0x1a>
 800807e:	4b09      	ldr	r3, [pc, #36]	; (80080a4 <__swbuf_r+0xa0>)
 8008080:	429c      	cmp	r4, r3
 8008082:	bf08      	it	eq
 8008084:	68ec      	ldreq	r4, [r5, #12]
 8008086:	e7ca      	b.n	800801e <__swbuf_r+0x1a>
 8008088:	4621      	mov	r1, r4
 800808a:	4628      	mov	r0, r5
 800808c:	f000 f80c 	bl	80080a8 <__swsetup_r>
 8008090:	2800      	cmp	r0, #0
 8008092:	d0cb      	beq.n	800802c <__swbuf_r+0x28>
 8008094:	f04f 37ff 	mov.w	r7, #4294967295
 8008098:	e7ea      	b.n	8008070 <__swbuf_r+0x6c>
 800809a:	bf00      	nop
 800809c:	0800ba00 	.word	0x0800ba00
 80080a0:	0800ba20 	.word	0x0800ba20
 80080a4:	0800b9e0 	.word	0x0800b9e0

080080a8 <__swsetup_r>:
 80080a8:	4b32      	ldr	r3, [pc, #200]	; (8008174 <__swsetup_r+0xcc>)
 80080aa:	b570      	push	{r4, r5, r6, lr}
 80080ac:	681d      	ldr	r5, [r3, #0]
 80080ae:	4606      	mov	r6, r0
 80080b0:	460c      	mov	r4, r1
 80080b2:	b125      	cbz	r5, 80080be <__swsetup_r+0x16>
 80080b4:	69ab      	ldr	r3, [r5, #24]
 80080b6:	b913      	cbnz	r3, 80080be <__swsetup_r+0x16>
 80080b8:	4628      	mov	r0, r5
 80080ba:	f000 fff7 	bl	80090ac <__sinit>
 80080be:	4b2e      	ldr	r3, [pc, #184]	; (8008178 <__swsetup_r+0xd0>)
 80080c0:	429c      	cmp	r4, r3
 80080c2:	d10f      	bne.n	80080e4 <__swsetup_r+0x3c>
 80080c4:	686c      	ldr	r4, [r5, #4]
 80080c6:	89a3      	ldrh	r3, [r4, #12]
 80080c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080cc:	0719      	lsls	r1, r3, #28
 80080ce:	d42c      	bmi.n	800812a <__swsetup_r+0x82>
 80080d0:	06dd      	lsls	r5, r3, #27
 80080d2:	d411      	bmi.n	80080f8 <__swsetup_r+0x50>
 80080d4:	2309      	movs	r3, #9
 80080d6:	6033      	str	r3, [r6, #0]
 80080d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80080dc:	81a3      	strh	r3, [r4, #12]
 80080de:	f04f 30ff 	mov.w	r0, #4294967295
 80080e2:	e03e      	b.n	8008162 <__swsetup_r+0xba>
 80080e4:	4b25      	ldr	r3, [pc, #148]	; (800817c <__swsetup_r+0xd4>)
 80080e6:	429c      	cmp	r4, r3
 80080e8:	d101      	bne.n	80080ee <__swsetup_r+0x46>
 80080ea:	68ac      	ldr	r4, [r5, #8]
 80080ec:	e7eb      	b.n	80080c6 <__swsetup_r+0x1e>
 80080ee:	4b24      	ldr	r3, [pc, #144]	; (8008180 <__swsetup_r+0xd8>)
 80080f0:	429c      	cmp	r4, r3
 80080f2:	bf08      	it	eq
 80080f4:	68ec      	ldreq	r4, [r5, #12]
 80080f6:	e7e6      	b.n	80080c6 <__swsetup_r+0x1e>
 80080f8:	0758      	lsls	r0, r3, #29
 80080fa:	d512      	bpl.n	8008122 <__swsetup_r+0x7a>
 80080fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080fe:	b141      	cbz	r1, 8008112 <__swsetup_r+0x6a>
 8008100:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008104:	4299      	cmp	r1, r3
 8008106:	d002      	beq.n	800810e <__swsetup_r+0x66>
 8008108:	4630      	mov	r0, r6
 800810a:	f7fe f811 	bl	8006130 <_free_r>
 800810e:	2300      	movs	r3, #0
 8008110:	6363      	str	r3, [r4, #52]	; 0x34
 8008112:	89a3      	ldrh	r3, [r4, #12]
 8008114:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008118:	81a3      	strh	r3, [r4, #12]
 800811a:	2300      	movs	r3, #0
 800811c:	6063      	str	r3, [r4, #4]
 800811e:	6923      	ldr	r3, [r4, #16]
 8008120:	6023      	str	r3, [r4, #0]
 8008122:	89a3      	ldrh	r3, [r4, #12]
 8008124:	f043 0308 	orr.w	r3, r3, #8
 8008128:	81a3      	strh	r3, [r4, #12]
 800812a:	6923      	ldr	r3, [r4, #16]
 800812c:	b94b      	cbnz	r3, 8008142 <__swsetup_r+0x9a>
 800812e:	89a3      	ldrh	r3, [r4, #12]
 8008130:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008134:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008138:	d003      	beq.n	8008142 <__swsetup_r+0x9a>
 800813a:	4621      	mov	r1, r4
 800813c:	4630      	mov	r0, r6
 800813e:	f001 fbed 	bl	800991c <__smakebuf_r>
 8008142:	89a0      	ldrh	r0, [r4, #12]
 8008144:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008148:	f010 0301 	ands.w	r3, r0, #1
 800814c:	d00a      	beq.n	8008164 <__swsetup_r+0xbc>
 800814e:	2300      	movs	r3, #0
 8008150:	60a3      	str	r3, [r4, #8]
 8008152:	6963      	ldr	r3, [r4, #20]
 8008154:	425b      	negs	r3, r3
 8008156:	61a3      	str	r3, [r4, #24]
 8008158:	6923      	ldr	r3, [r4, #16]
 800815a:	b943      	cbnz	r3, 800816e <__swsetup_r+0xc6>
 800815c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008160:	d1ba      	bne.n	80080d8 <__swsetup_r+0x30>
 8008162:	bd70      	pop	{r4, r5, r6, pc}
 8008164:	0781      	lsls	r1, r0, #30
 8008166:	bf58      	it	pl
 8008168:	6963      	ldrpl	r3, [r4, #20]
 800816a:	60a3      	str	r3, [r4, #8]
 800816c:	e7f4      	b.n	8008158 <__swsetup_r+0xb0>
 800816e:	2000      	movs	r0, #0
 8008170:	e7f7      	b.n	8008162 <__swsetup_r+0xba>
 8008172:	bf00      	nop
 8008174:	2000006c 	.word	0x2000006c
 8008178:	0800ba00 	.word	0x0800ba00
 800817c:	0800ba20 	.word	0x0800ba20
 8008180:	0800b9e0 	.word	0x0800b9e0

08008184 <quorem>:
 8008184:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008188:	6903      	ldr	r3, [r0, #16]
 800818a:	690c      	ldr	r4, [r1, #16]
 800818c:	42a3      	cmp	r3, r4
 800818e:	4607      	mov	r7, r0
 8008190:	f2c0 8081 	blt.w	8008296 <quorem+0x112>
 8008194:	3c01      	subs	r4, #1
 8008196:	f101 0814 	add.w	r8, r1, #20
 800819a:	f100 0514 	add.w	r5, r0, #20
 800819e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081a2:	9301      	str	r3, [sp, #4]
 80081a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80081a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081ac:	3301      	adds	r3, #1
 80081ae:	429a      	cmp	r2, r3
 80081b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80081b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80081b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80081bc:	d331      	bcc.n	8008222 <quorem+0x9e>
 80081be:	f04f 0e00 	mov.w	lr, #0
 80081c2:	4640      	mov	r0, r8
 80081c4:	46ac      	mov	ip, r5
 80081c6:	46f2      	mov	sl, lr
 80081c8:	f850 2b04 	ldr.w	r2, [r0], #4
 80081cc:	b293      	uxth	r3, r2
 80081ce:	fb06 e303 	mla	r3, r6, r3, lr
 80081d2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	ebaa 0303 	sub.w	r3, sl, r3
 80081dc:	0c12      	lsrs	r2, r2, #16
 80081de:	f8dc a000 	ldr.w	sl, [ip]
 80081e2:	fb06 e202 	mla	r2, r6, r2, lr
 80081e6:	fa13 f38a 	uxtah	r3, r3, sl
 80081ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80081ee:	fa1f fa82 	uxth.w	sl, r2
 80081f2:	f8dc 2000 	ldr.w	r2, [ip]
 80081f6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80081fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80081fe:	b29b      	uxth	r3, r3
 8008200:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008204:	4581      	cmp	r9, r0
 8008206:	f84c 3b04 	str.w	r3, [ip], #4
 800820a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800820e:	d2db      	bcs.n	80081c8 <quorem+0x44>
 8008210:	f855 300b 	ldr.w	r3, [r5, fp]
 8008214:	b92b      	cbnz	r3, 8008222 <quorem+0x9e>
 8008216:	9b01      	ldr	r3, [sp, #4]
 8008218:	3b04      	subs	r3, #4
 800821a:	429d      	cmp	r5, r3
 800821c:	461a      	mov	r2, r3
 800821e:	d32e      	bcc.n	800827e <quorem+0xfa>
 8008220:	613c      	str	r4, [r7, #16]
 8008222:	4638      	mov	r0, r7
 8008224:	f001 fea0 	bl	8009f68 <__mcmp>
 8008228:	2800      	cmp	r0, #0
 800822a:	db24      	blt.n	8008276 <quorem+0xf2>
 800822c:	3601      	adds	r6, #1
 800822e:	4628      	mov	r0, r5
 8008230:	f04f 0c00 	mov.w	ip, #0
 8008234:	f858 2b04 	ldr.w	r2, [r8], #4
 8008238:	f8d0 e000 	ldr.w	lr, [r0]
 800823c:	b293      	uxth	r3, r2
 800823e:	ebac 0303 	sub.w	r3, ip, r3
 8008242:	0c12      	lsrs	r2, r2, #16
 8008244:	fa13 f38e 	uxtah	r3, r3, lr
 8008248:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800824c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008250:	b29b      	uxth	r3, r3
 8008252:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008256:	45c1      	cmp	r9, r8
 8008258:	f840 3b04 	str.w	r3, [r0], #4
 800825c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008260:	d2e8      	bcs.n	8008234 <quorem+0xb0>
 8008262:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008266:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800826a:	b922      	cbnz	r2, 8008276 <quorem+0xf2>
 800826c:	3b04      	subs	r3, #4
 800826e:	429d      	cmp	r5, r3
 8008270:	461a      	mov	r2, r3
 8008272:	d30a      	bcc.n	800828a <quorem+0x106>
 8008274:	613c      	str	r4, [r7, #16]
 8008276:	4630      	mov	r0, r6
 8008278:	b003      	add	sp, #12
 800827a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800827e:	6812      	ldr	r2, [r2, #0]
 8008280:	3b04      	subs	r3, #4
 8008282:	2a00      	cmp	r2, #0
 8008284:	d1cc      	bne.n	8008220 <quorem+0x9c>
 8008286:	3c01      	subs	r4, #1
 8008288:	e7c7      	b.n	800821a <quorem+0x96>
 800828a:	6812      	ldr	r2, [r2, #0]
 800828c:	3b04      	subs	r3, #4
 800828e:	2a00      	cmp	r2, #0
 8008290:	d1f0      	bne.n	8008274 <quorem+0xf0>
 8008292:	3c01      	subs	r4, #1
 8008294:	e7eb      	b.n	800826e <quorem+0xea>
 8008296:	2000      	movs	r0, #0
 8008298:	e7ee      	b.n	8008278 <quorem+0xf4>
 800829a:	0000      	movs	r0, r0
 800829c:	0000      	movs	r0, r0
	...

080082a0 <_dtoa_r>:
 80082a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082a4:	ed2d 8b02 	vpush	{d8}
 80082a8:	ec57 6b10 	vmov	r6, r7, d0
 80082ac:	b095      	sub	sp, #84	; 0x54
 80082ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80082b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80082b4:	9105      	str	r1, [sp, #20]
 80082b6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80082ba:	4604      	mov	r4, r0
 80082bc:	9209      	str	r2, [sp, #36]	; 0x24
 80082be:	930f      	str	r3, [sp, #60]	; 0x3c
 80082c0:	b975      	cbnz	r5, 80082e0 <_dtoa_r+0x40>
 80082c2:	2010      	movs	r0, #16
 80082c4:	f7fd ff06 	bl	80060d4 <malloc>
 80082c8:	4602      	mov	r2, r0
 80082ca:	6260      	str	r0, [r4, #36]	; 0x24
 80082cc:	b920      	cbnz	r0, 80082d8 <_dtoa_r+0x38>
 80082ce:	4bb2      	ldr	r3, [pc, #712]	; (8008598 <_dtoa_r+0x2f8>)
 80082d0:	21ea      	movs	r1, #234	; 0xea
 80082d2:	48b2      	ldr	r0, [pc, #712]	; (800859c <_dtoa_r+0x2fc>)
 80082d4:	f002 fb6c 	bl	800a9b0 <__assert_func>
 80082d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80082dc:	6005      	str	r5, [r0, #0]
 80082de:	60c5      	str	r5, [r0, #12]
 80082e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082e2:	6819      	ldr	r1, [r3, #0]
 80082e4:	b151      	cbz	r1, 80082fc <_dtoa_r+0x5c>
 80082e6:	685a      	ldr	r2, [r3, #4]
 80082e8:	604a      	str	r2, [r1, #4]
 80082ea:	2301      	movs	r3, #1
 80082ec:	4093      	lsls	r3, r2
 80082ee:	608b      	str	r3, [r1, #8]
 80082f0:	4620      	mov	r0, r4
 80082f2:	f001 fbb1 	bl	8009a58 <_Bfree>
 80082f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082f8:	2200      	movs	r2, #0
 80082fa:	601a      	str	r2, [r3, #0]
 80082fc:	1e3b      	subs	r3, r7, #0
 80082fe:	bfb9      	ittee	lt
 8008300:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008304:	9303      	strlt	r3, [sp, #12]
 8008306:	2300      	movge	r3, #0
 8008308:	f8c8 3000 	strge.w	r3, [r8]
 800830c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008310:	4ba3      	ldr	r3, [pc, #652]	; (80085a0 <_dtoa_r+0x300>)
 8008312:	bfbc      	itt	lt
 8008314:	2201      	movlt	r2, #1
 8008316:	f8c8 2000 	strlt.w	r2, [r8]
 800831a:	ea33 0309 	bics.w	r3, r3, r9
 800831e:	d11b      	bne.n	8008358 <_dtoa_r+0xb8>
 8008320:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008322:	f242 730f 	movw	r3, #9999	; 0x270f
 8008326:	6013      	str	r3, [r2, #0]
 8008328:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800832c:	4333      	orrs	r3, r6
 800832e:	f000 857a 	beq.w	8008e26 <_dtoa_r+0xb86>
 8008332:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008334:	b963      	cbnz	r3, 8008350 <_dtoa_r+0xb0>
 8008336:	4b9b      	ldr	r3, [pc, #620]	; (80085a4 <_dtoa_r+0x304>)
 8008338:	e024      	b.n	8008384 <_dtoa_r+0xe4>
 800833a:	4b9b      	ldr	r3, [pc, #620]	; (80085a8 <_dtoa_r+0x308>)
 800833c:	9300      	str	r3, [sp, #0]
 800833e:	3308      	adds	r3, #8
 8008340:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008342:	6013      	str	r3, [r2, #0]
 8008344:	9800      	ldr	r0, [sp, #0]
 8008346:	b015      	add	sp, #84	; 0x54
 8008348:	ecbd 8b02 	vpop	{d8}
 800834c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008350:	4b94      	ldr	r3, [pc, #592]	; (80085a4 <_dtoa_r+0x304>)
 8008352:	9300      	str	r3, [sp, #0]
 8008354:	3303      	adds	r3, #3
 8008356:	e7f3      	b.n	8008340 <_dtoa_r+0xa0>
 8008358:	ed9d 7b02 	vldr	d7, [sp, #8]
 800835c:	2200      	movs	r2, #0
 800835e:	ec51 0b17 	vmov	r0, r1, d7
 8008362:	2300      	movs	r3, #0
 8008364:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008368:	f7f8 fbae 	bl	8000ac8 <__aeabi_dcmpeq>
 800836c:	4680      	mov	r8, r0
 800836e:	b158      	cbz	r0, 8008388 <_dtoa_r+0xe8>
 8008370:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008372:	2301      	movs	r3, #1
 8008374:	6013      	str	r3, [r2, #0]
 8008376:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008378:	2b00      	cmp	r3, #0
 800837a:	f000 8551 	beq.w	8008e20 <_dtoa_r+0xb80>
 800837e:	488b      	ldr	r0, [pc, #556]	; (80085ac <_dtoa_r+0x30c>)
 8008380:	6018      	str	r0, [r3, #0]
 8008382:	1e43      	subs	r3, r0, #1
 8008384:	9300      	str	r3, [sp, #0]
 8008386:	e7dd      	b.n	8008344 <_dtoa_r+0xa4>
 8008388:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800838c:	aa12      	add	r2, sp, #72	; 0x48
 800838e:	a913      	add	r1, sp, #76	; 0x4c
 8008390:	4620      	mov	r0, r4
 8008392:	f001 ff09 	bl	800a1a8 <__d2b>
 8008396:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800839a:	4683      	mov	fp, r0
 800839c:	2d00      	cmp	r5, #0
 800839e:	d07c      	beq.n	800849a <_dtoa_r+0x1fa>
 80083a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083a2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80083a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083aa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80083ae:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80083b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80083b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80083ba:	4b7d      	ldr	r3, [pc, #500]	; (80085b0 <_dtoa_r+0x310>)
 80083bc:	2200      	movs	r2, #0
 80083be:	4630      	mov	r0, r6
 80083c0:	4639      	mov	r1, r7
 80083c2:	f7f7 ff61 	bl	8000288 <__aeabi_dsub>
 80083c6:	a36e      	add	r3, pc, #440	; (adr r3, 8008580 <_dtoa_r+0x2e0>)
 80083c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083cc:	f7f8 f914 	bl	80005f8 <__aeabi_dmul>
 80083d0:	a36d      	add	r3, pc, #436	; (adr r3, 8008588 <_dtoa_r+0x2e8>)
 80083d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d6:	f7f7 ff59 	bl	800028c <__adddf3>
 80083da:	4606      	mov	r6, r0
 80083dc:	4628      	mov	r0, r5
 80083de:	460f      	mov	r7, r1
 80083e0:	f7f8 f8a0 	bl	8000524 <__aeabi_i2d>
 80083e4:	a36a      	add	r3, pc, #424	; (adr r3, 8008590 <_dtoa_r+0x2f0>)
 80083e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ea:	f7f8 f905 	bl	80005f8 <__aeabi_dmul>
 80083ee:	4602      	mov	r2, r0
 80083f0:	460b      	mov	r3, r1
 80083f2:	4630      	mov	r0, r6
 80083f4:	4639      	mov	r1, r7
 80083f6:	f7f7 ff49 	bl	800028c <__adddf3>
 80083fa:	4606      	mov	r6, r0
 80083fc:	460f      	mov	r7, r1
 80083fe:	f7f8 fbab 	bl	8000b58 <__aeabi_d2iz>
 8008402:	2200      	movs	r2, #0
 8008404:	4682      	mov	sl, r0
 8008406:	2300      	movs	r3, #0
 8008408:	4630      	mov	r0, r6
 800840a:	4639      	mov	r1, r7
 800840c:	f7f8 fb66 	bl	8000adc <__aeabi_dcmplt>
 8008410:	b148      	cbz	r0, 8008426 <_dtoa_r+0x186>
 8008412:	4650      	mov	r0, sl
 8008414:	f7f8 f886 	bl	8000524 <__aeabi_i2d>
 8008418:	4632      	mov	r2, r6
 800841a:	463b      	mov	r3, r7
 800841c:	f7f8 fb54 	bl	8000ac8 <__aeabi_dcmpeq>
 8008420:	b908      	cbnz	r0, 8008426 <_dtoa_r+0x186>
 8008422:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008426:	f1ba 0f16 	cmp.w	sl, #22
 800842a:	d854      	bhi.n	80084d6 <_dtoa_r+0x236>
 800842c:	4b61      	ldr	r3, [pc, #388]	; (80085b4 <_dtoa_r+0x314>)
 800842e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008436:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800843a:	f7f8 fb4f 	bl	8000adc <__aeabi_dcmplt>
 800843e:	2800      	cmp	r0, #0
 8008440:	d04b      	beq.n	80084da <_dtoa_r+0x23a>
 8008442:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008446:	2300      	movs	r3, #0
 8008448:	930e      	str	r3, [sp, #56]	; 0x38
 800844a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800844c:	1b5d      	subs	r5, r3, r5
 800844e:	1e6b      	subs	r3, r5, #1
 8008450:	9304      	str	r3, [sp, #16]
 8008452:	bf43      	ittte	mi
 8008454:	2300      	movmi	r3, #0
 8008456:	f1c5 0801 	rsbmi	r8, r5, #1
 800845a:	9304      	strmi	r3, [sp, #16]
 800845c:	f04f 0800 	movpl.w	r8, #0
 8008460:	f1ba 0f00 	cmp.w	sl, #0
 8008464:	db3b      	blt.n	80084de <_dtoa_r+0x23e>
 8008466:	9b04      	ldr	r3, [sp, #16]
 8008468:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800846c:	4453      	add	r3, sl
 800846e:	9304      	str	r3, [sp, #16]
 8008470:	2300      	movs	r3, #0
 8008472:	9306      	str	r3, [sp, #24]
 8008474:	9b05      	ldr	r3, [sp, #20]
 8008476:	2b09      	cmp	r3, #9
 8008478:	d869      	bhi.n	800854e <_dtoa_r+0x2ae>
 800847a:	2b05      	cmp	r3, #5
 800847c:	bfc4      	itt	gt
 800847e:	3b04      	subgt	r3, #4
 8008480:	9305      	strgt	r3, [sp, #20]
 8008482:	9b05      	ldr	r3, [sp, #20]
 8008484:	f1a3 0302 	sub.w	r3, r3, #2
 8008488:	bfcc      	ite	gt
 800848a:	2500      	movgt	r5, #0
 800848c:	2501      	movle	r5, #1
 800848e:	2b03      	cmp	r3, #3
 8008490:	d869      	bhi.n	8008566 <_dtoa_r+0x2c6>
 8008492:	e8df f003 	tbb	[pc, r3]
 8008496:	4e2c      	.short	0x4e2c
 8008498:	5a4c      	.short	0x5a4c
 800849a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800849e:	441d      	add	r5, r3
 80084a0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80084a4:	2b20      	cmp	r3, #32
 80084a6:	bfc1      	itttt	gt
 80084a8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80084ac:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80084b0:	fa09 f303 	lslgt.w	r3, r9, r3
 80084b4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80084b8:	bfda      	itte	le
 80084ba:	f1c3 0320 	rsble	r3, r3, #32
 80084be:	fa06 f003 	lslle.w	r0, r6, r3
 80084c2:	4318      	orrgt	r0, r3
 80084c4:	f7f8 f81e 	bl	8000504 <__aeabi_ui2d>
 80084c8:	2301      	movs	r3, #1
 80084ca:	4606      	mov	r6, r0
 80084cc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80084d0:	3d01      	subs	r5, #1
 80084d2:	9310      	str	r3, [sp, #64]	; 0x40
 80084d4:	e771      	b.n	80083ba <_dtoa_r+0x11a>
 80084d6:	2301      	movs	r3, #1
 80084d8:	e7b6      	b.n	8008448 <_dtoa_r+0x1a8>
 80084da:	900e      	str	r0, [sp, #56]	; 0x38
 80084dc:	e7b5      	b.n	800844a <_dtoa_r+0x1aa>
 80084de:	f1ca 0300 	rsb	r3, sl, #0
 80084e2:	9306      	str	r3, [sp, #24]
 80084e4:	2300      	movs	r3, #0
 80084e6:	eba8 080a 	sub.w	r8, r8, sl
 80084ea:	930d      	str	r3, [sp, #52]	; 0x34
 80084ec:	e7c2      	b.n	8008474 <_dtoa_r+0x1d4>
 80084ee:	2300      	movs	r3, #0
 80084f0:	9308      	str	r3, [sp, #32]
 80084f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	dc39      	bgt.n	800856c <_dtoa_r+0x2cc>
 80084f8:	f04f 0901 	mov.w	r9, #1
 80084fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8008500:	464b      	mov	r3, r9
 8008502:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008506:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008508:	2200      	movs	r2, #0
 800850a:	6042      	str	r2, [r0, #4]
 800850c:	2204      	movs	r2, #4
 800850e:	f102 0614 	add.w	r6, r2, #20
 8008512:	429e      	cmp	r6, r3
 8008514:	6841      	ldr	r1, [r0, #4]
 8008516:	d92f      	bls.n	8008578 <_dtoa_r+0x2d8>
 8008518:	4620      	mov	r0, r4
 800851a:	f001 fa5d 	bl	80099d8 <_Balloc>
 800851e:	9000      	str	r0, [sp, #0]
 8008520:	2800      	cmp	r0, #0
 8008522:	d14b      	bne.n	80085bc <_dtoa_r+0x31c>
 8008524:	4b24      	ldr	r3, [pc, #144]	; (80085b8 <_dtoa_r+0x318>)
 8008526:	4602      	mov	r2, r0
 8008528:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800852c:	e6d1      	b.n	80082d2 <_dtoa_r+0x32>
 800852e:	2301      	movs	r3, #1
 8008530:	e7de      	b.n	80084f0 <_dtoa_r+0x250>
 8008532:	2300      	movs	r3, #0
 8008534:	9308      	str	r3, [sp, #32]
 8008536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008538:	eb0a 0903 	add.w	r9, sl, r3
 800853c:	f109 0301 	add.w	r3, r9, #1
 8008540:	2b01      	cmp	r3, #1
 8008542:	9301      	str	r3, [sp, #4]
 8008544:	bfb8      	it	lt
 8008546:	2301      	movlt	r3, #1
 8008548:	e7dd      	b.n	8008506 <_dtoa_r+0x266>
 800854a:	2301      	movs	r3, #1
 800854c:	e7f2      	b.n	8008534 <_dtoa_r+0x294>
 800854e:	2501      	movs	r5, #1
 8008550:	2300      	movs	r3, #0
 8008552:	9305      	str	r3, [sp, #20]
 8008554:	9508      	str	r5, [sp, #32]
 8008556:	f04f 39ff 	mov.w	r9, #4294967295
 800855a:	2200      	movs	r2, #0
 800855c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008560:	2312      	movs	r3, #18
 8008562:	9209      	str	r2, [sp, #36]	; 0x24
 8008564:	e7cf      	b.n	8008506 <_dtoa_r+0x266>
 8008566:	2301      	movs	r3, #1
 8008568:	9308      	str	r3, [sp, #32]
 800856a:	e7f4      	b.n	8008556 <_dtoa_r+0x2b6>
 800856c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008570:	f8cd 9004 	str.w	r9, [sp, #4]
 8008574:	464b      	mov	r3, r9
 8008576:	e7c6      	b.n	8008506 <_dtoa_r+0x266>
 8008578:	3101      	adds	r1, #1
 800857a:	6041      	str	r1, [r0, #4]
 800857c:	0052      	lsls	r2, r2, #1
 800857e:	e7c6      	b.n	800850e <_dtoa_r+0x26e>
 8008580:	636f4361 	.word	0x636f4361
 8008584:	3fd287a7 	.word	0x3fd287a7
 8008588:	8b60c8b3 	.word	0x8b60c8b3
 800858c:	3fc68a28 	.word	0x3fc68a28
 8008590:	509f79fb 	.word	0x509f79fb
 8008594:	3fd34413 	.word	0x3fd34413
 8008598:	0800b956 	.word	0x0800b956
 800859c:	0800b96d 	.word	0x0800b96d
 80085a0:	7ff00000 	.word	0x7ff00000
 80085a4:	0800b952 	.word	0x0800b952
 80085a8:	0800b949 	.word	0x0800b949
 80085ac:	0800b7c9 	.word	0x0800b7c9
 80085b0:	3ff80000 	.word	0x3ff80000
 80085b4:	0800bb48 	.word	0x0800bb48
 80085b8:	0800b9cc 	.word	0x0800b9cc
 80085bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085be:	9a00      	ldr	r2, [sp, #0]
 80085c0:	601a      	str	r2, [r3, #0]
 80085c2:	9b01      	ldr	r3, [sp, #4]
 80085c4:	2b0e      	cmp	r3, #14
 80085c6:	f200 80ad 	bhi.w	8008724 <_dtoa_r+0x484>
 80085ca:	2d00      	cmp	r5, #0
 80085cc:	f000 80aa 	beq.w	8008724 <_dtoa_r+0x484>
 80085d0:	f1ba 0f00 	cmp.w	sl, #0
 80085d4:	dd36      	ble.n	8008644 <_dtoa_r+0x3a4>
 80085d6:	4ac3      	ldr	r2, [pc, #780]	; (80088e4 <_dtoa_r+0x644>)
 80085d8:	f00a 030f 	and.w	r3, sl, #15
 80085dc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80085e0:	ed93 7b00 	vldr	d7, [r3]
 80085e4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80085e8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80085ec:	eeb0 8a47 	vmov.f32	s16, s14
 80085f0:	eef0 8a67 	vmov.f32	s17, s15
 80085f4:	d016      	beq.n	8008624 <_dtoa_r+0x384>
 80085f6:	4bbc      	ldr	r3, [pc, #752]	; (80088e8 <_dtoa_r+0x648>)
 80085f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80085fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008600:	f7f8 f924 	bl	800084c <__aeabi_ddiv>
 8008604:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008608:	f007 070f 	and.w	r7, r7, #15
 800860c:	2503      	movs	r5, #3
 800860e:	4eb6      	ldr	r6, [pc, #728]	; (80088e8 <_dtoa_r+0x648>)
 8008610:	b957      	cbnz	r7, 8008628 <_dtoa_r+0x388>
 8008612:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008616:	ec53 2b18 	vmov	r2, r3, d8
 800861a:	f7f8 f917 	bl	800084c <__aeabi_ddiv>
 800861e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008622:	e029      	b.n	8008678 <_dtoa_r+0x3d8>
 8008624:	2502      	movs	r5, #2
 8008626:	e7f2      	b.n	800860e <_dtoa_r+0x36e>
 8008628:	07f9      	lsls	r1, r7, #31
 800862a:	d508      	bpl.n	800863e <_dtoa_r+0x39e>
 800862c:	ec51 0b18 	vmov	r0, r1, d8
 8008630:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008634:	f7f7 ffe0 	bl	80005f8 <__aeabi_dmul>
 8008638:	ec41 0b18 	vmov	d8, r0, r1
 800863c:	3501      	adds	r5, #1
 800863e:	107f      	asrs	r7, r7, #1
 8008640:	3608      	adds	r6, #8
 8008642:	e7e5      	b.n	8008610 <_dtoa_r+0x370>
 8008644:	f000 80a6 	beq.w	8008794 <_dtoa_r+0x4f4>
 8008648:	f1ca 0600 	rsb	r6, sl, #0
 800864c:	4ba5      	ldr	r3, [pc, #660]	; (80088e4 <_dtoa_r+0x644>)
 800864e:	4fa6      	ldr	r7, [pc, #664]	; (80088e8 <_dtoa_r+0x648>)
 8008650:	f006 020f 	and.w	r2, r6, #15
 8008654:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008660:	f7f7 ffca 	bl	80005f8 <__aeabi_dmul>
 8008664:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008668:	1136      	asrs	r6, r6, #4
 800866a:	2300      	movs	r3, #0
 800866c:	2502      	movs	r5, #2
 800866e:	2e00      	cmp	r6, #0
 8008670:	f040 8085 	bne.w	800877e <_dtoa_r+0x4de>
 8008674:	2b00      	cmp	r3, #0
 8008676:	d1d2      	bne.n	800861e <_dtoa_r+0x37e>
 8008678:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800867a:	2b00      	cmp	r3, #0
 800867c:	f000 808c 	beq.w	8008798 <_dtoa_r+0x4f8>
 8008680:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008684:	4b99      	ldr	r3, [pc, #612]	; (80088ec <_dtoa_r+0x64c>)
 8008686:	2200      	movs	r2, #0
 8008688:	4630      	mov	r0, r6
 800868a:	4639      	mov	r1, r7
 800868c:	f7f8 fa26 	bl	8000adc <__aeabi_dcmplt>
 8008690:	2800      	cmp	r0, #0
 8008692:	f000 8081 	beq.w	8008798 <_dtoa_r+0x4f8>
 8008696:	9b01      	ldr	r3, [sp, #4]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d07d      	beq.n	8008798 <_dtoa_r+0x4f8>
 800869c:	f1b9 0f00 	cmp.w	r9, #0
 80086a0:	dd3c      	ble.n	800871c <_dtoa_r+0x47c>
 80086a2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80086a6:	9307      	str	r3, [sp, #28]
 80086a8:	2200      	movs	r2, #0
 80086aa:	4b91      	ldr	r3, [pc, #580]	; (80088f0 <_dtoa_r+0x650>)
 80086ac:	4630      	mov	r0, r6
 80086ae:	4639      	mov	r1, r7
 80086b0:	f7f7 ffa2 	bl	80005f8 <__aeabi_dmul>
 80086b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086b8:	3501      	adds	r5, #1
 80086ba:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80086be:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80086c2:	4628      	mov	r0, r5
 80086c4:	f7f7 ff2e 	bl	8000524 <__aeabi_i2d>
 80086c8:	4632      	mov	r2, r6
 80086ca:	463b      	mov	r3, r7
 80086cc:	f7f7 ff94 	bl	80005f8 <__aeabi_dmul>
 80086d0:	4b88      	ldr	r3, [pc, #544]	; (80088f4 <_dtoa_r+0x654>)
 80086d2:	2200      	movs	r2, #0
 80086d4:	f7f7 fdda 	bl	800028c <__adddf3>
 80086d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80086dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086e0:	9303      	str	r3, [sp, #12]
 80086e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d15c      	bne.n	80087a2 <_dtoa_r+0x502>
 80086e8:	4b83      	ldr	r3, [pc, #524]	; (80088f8 <_dtoa_r+0x658>)
 80086ea:	2200      	movs	r2, #0
 80086ec:	4630      	mov	r0, r6
 80086ee:	4639      	mov	r1, r7
 80086f0:	f7f7 fdca 	bl	8000288 <__aeabi_dsub>
 80086f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086f8:	4606      	mov	r6, r0
 80086fa:	460f      	mov	r7, r1
 80086fc:	f7f8 fa0c 	bl	8000b18 <__aeabi_dcmpgt>
 8008700:	2800      	cmp	r0, #0
 8008702:	f040 8296 	bne.w	8008c32 <_dtoa_r+0x992>
 8008706:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800870a:	4630      	mov	r0, r6
 800870c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008710:	4639      	mov	r1, r7
 8008712:	f7f8 f9e3 	bl	8000adc <__aeabi_dcmplt>
 8008716:	2800      	cmp	r0, #0
 8008718:	f040 8288 	bne.w	8008c2c <_dtoa_r+0x98c>
 800871c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008720:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008724:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008726:	2b00      	cmp	r3, #0
 8008728:	f2c0 8158 	blt.w	80089dc <_dtoa_r+0x73c>
 800872c:	f1ba 0f0e 	cmp.w	sl, #14
 8008730:	f300 8154 	bgt.w	80089dc <_dtoa_r+0x73c>
 8008734:	4b6b      	ldr	r3, [pc, #428]	; (80088e4 <_dtoa_r+0x644>)
 8008736:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800873a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800873e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008740:	2b00      	cmp	r3, #0
 8008742:	f280 80e3 	bge.w	800890c <_dtoa_r+0x66c>
 8008746:	9b01      	ldr	r3, [sp, #4]
 8008748:	2b00      	cmp	r3, #0
 800874a:	f300 80df 	bgt.w	800890c <_dtoa_r+0x66c>
 800874e:	f040 826d 	bne.w	8008c2c <_dtoa_r+0x98c>
 8008752:	4b69      	ldr	r3, [pc, #420]	; (80088f8 <_dtoa_r+0x658>)
 8008754:	2200      	movs	r2, #0
 8008756:	4640      	mov	r0, r8
 8008758:	4649      	mov	r1, r9
 800875a:	f7f7 ff4d 	bl	80005f8 <__aeabi_dmul>
 800875e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008762:	f7f8 f9cf 	bl	8000b04 <__aeabi_dcmpge>
 8008766:	9e01      	ldr	r6, [sp, #4]
 8008768:	4637      	mov	r7, r6
 800876a:	2800      	cmp	r0, #0
 800876c:	f040 8243 	bne.w	8008bf6 <_dtoa_r+0x956>
 8008770:	9d00      	ldr	r5, [sp, #0]
 8008772:	2331      	movs	r3, #49	; 0x31
 8008774:	f805 3b01 	strb.w	r3, [r5], #1
 8008778:	f10a 0a01 	add.w	sl, sl, #1
 800877c:	e23f      	b.n	8008bfe <_dtoa_r+0x95e>
 800877e:	07f2      	lsls	r2, r6, #31
 8008780:	d505      	bpl.n	800878e <_dtoa_r+0x4ee>
 8008782:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008786:	f7f7 ff37 	bl	80005f8 <__aeabi_dmul>
 800878a:	3501      	adds	r5, #1
 800878c:	2301      	movs	r3, #1
 800878e:	1076      	asrs	r6, r6, #1
 8008790:	3708      	adds	r7, #8
 8008792:	e76c      	b.n	800866e <_dtoa_r+0x3ce>
 8008794:	2502      	movs	r5, #2
 8008796:	e76f      	b.n	8008678 <_dtoa_r+0x3d8>
 8008798:	9b01      	ldr	r3, [sp, #4]
 800879a:	f8cd a01c 	str.w	sl, [sp, #28]
 800879e:	930c      	str	r3, [sp, #48]	; 0x30
 80087a0:	e78d      	b.n	80086be <_dtoa_r+0x41e>
 80087a2:	9900      	ldr	r1, [sp, #0]
 80087a4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80087a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087a8:	4b4e      	ldr	r3, [pc, #312]	; (80088e4 <_dtoa_r+0x644>)
 80087aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80087ae:	4401      	add	r1, r0
 80087b0:	9102      	str	r1, [sp, #8]
 80087b2:	9908      	ldr	r1, [sp, #32]
 80087b4:	eeb0 8a47 	vmov.f32	s16, s14
 80087b8:	eef0 8a67 	vmov.f32	s17, s15
 80087bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80087c4:	2900      	cmp	r1, #0
 80087c6:	d045      	beq.n	8008854 <_dtoa_r+0x5b4>
 80087c8:	494c      	ldr	r1, [pc, #304]	; (80088fc <_dtoa_r+0x65c>)
 80087ca:	2000      	movs	r0, #0
 80087cc:	f7f8 f83e 	bl	800084c <__aeabi_ddiv>
 80087d0:	ec53 2b18 	vmov	r2, r3, d8
 80087d4:	f7f7 fd58 	bl	8000288 <__aeabi_dsub>
 80087d8:	9d00      	ldr	r5, [sp, #0]
 80087da:	ec41 0b18 	vmov	d8, r0, r1
 80087de:	4639      	mov	r1, r7
 80087e0:	4630      	mov	r0, r6
 80087e2:	f7f8 f9b9 	bl	8000b58 <__aeabi_d2iz>
 80087e6:	900c      	str	r0, [sp, #48]	; 0x30
 80087e8:	f7f7 fe9c 	bl	8000524 <__aeabi_i2d>
 80087ec:	4602      	mov	r2, r0
 80087ee:	460b      	mov	r3, r1
 80087f0:	4630      	mov	r0, r6
 80087f2:	4639      	mov	r1, r7
 80087f4:	f7f7 fd48 	bl	8000288 <__aeabi_dsub>
 80087f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087fa:	3330      	adds	r3, #48	; 0x30
 80087fc:	f805 3b01 	strb.w	r3, [r5], #1
 8008800:	ec53 2b18 	vmov	r2, r3, d8
 8008804:	4606      	mov	r6, r0
 8008806:	460f      	mov	r7, r1
 8008808:	f7f8 f968 	bl	8000adc <__aeabi_dcmplt>
 800880c:	2800      	cmp	r0, #0
 800880e:	d165      	bne.n	80088dc <_dtoa_r+0x63c>
 8008810:	4632      	mov	r2, r6
 8008812:	463b      	mov	r3, r7
 8008814:	4935      	ldr	r1, [pc, #212]	; (80088ec <_dtoa_r+0x64c>)
 8008816:	2000      	movs	r0, #0
 8008818:	f7f7 fd36 	bl	8000288 <__aeabi_dsub>
 800881c:	ec53 2b18 	vmov	r2, r3, d8
 8008820:	f7f8 f95c 	bl	8000adc <__aeabi_dcmplt>
 8008824:	2800      	cmp	r0, #0
 8008826:	f040 80b9 	bne.w	800899c <_dtoa_r+0x6fc>
 800882a:	9b02      	ldr	r3, [sp, #8]
 800882c:	429d      	cmp	r5, r3
 800882e:	f43f af75 	beq.w	800871c <_dtoa_r+0x47c>
 8008832:	4b2f      	ldr	r3, [pc, #188]	; (80088f0 <_dtoa_r+0x650>)
 8008834:	ec51 0b18 	vmov	r0, r1, d8
 8008838:	2200      	movs	r2, #0
 800883a:	f7f7 fedd 	bl	80005f8 <__aeabi_dmul>
 800883e:	4b2c      	ldr	r3, [pc, #176]	; (80088f0 <_dtoa_r+0x650>)
 8008840:	ec41 0b18 	vmov	d8, r0, r1
 8008844:	2200      	movs	r2, #0
 8008846:	4630      	mov	r0, r6
 8008848:	4639      	mov	r1, r7
 800884a:	f7f7 fed5 	bl	80005f8 <__aeabi_dmul>
 800884e:	4606      	mov	r6, r0
 8008850:	460f      	mov	r7, r1
 8008852:	e7c4      	b.n	80087de <_dtoa_r+0x53e>
 8008854:	ec51 0b17 	vmov	r0, r1, d7
 8008858:	f7f7 fece 	bl	80005f8 <__aeabi_dmul>
 800885c:	9b02      	ldr	r3, [sp, #8]
 800885e:	9d00      	ldr	r5, [sp, #0]
 8008860:	930c      	str	r3, [sp, #48]	; 0x30
 8008862:	ec41 0b18 	vmov	d8, r0, r1
 8008866:	4639      	mov	r1, r7
 8008868:	4630      	mov	r0, r6
 800886a:	f7f8 f975 	bl	8000b58 <__aeabi_d2iz>
 800886e:	9011      	str	r0, [sp, #68]	; 0x44
 8008870:	f7f7 fe58 	bl	8000524 <__aeabi_i2d>
 8008874:	4602      	mov	r2, r0
 8008876:	460b      	mov	r3, r1
 8008878:	4630      	mov	r0, r6
 800887a:	4639      	mov	r1, r7
 800887c:	f7f7 fd04 	bl	8000288 <__aeabi_dsub>
 8008880:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008882:	3330      	adds	r3, #48	; 0x30
 8008884:	f805 3b01 	strb.w	r3, [r5], #1
 8008888:	9b02      	ldr	r3, [sp, #8]
 800888a:	429d      	cmp	r5, r3
 800888c:	4606      	mov	r6, r0
 800888e:	460f      	mov	r7, r1
 8008890:	f04f 0200 	mov.w	r2, #0
 8008894:	d134      	bne.n	8008900 <_dtoa_r+0x660>
 8008896:	4b19      	ldr	r3, [pc, #100]	; (80088fc <_dtoa_r+0x65c>)
 8008898:	ec51 0b18 	vmov	r0, r1, d8
 800889c:	f7f7 fcf6 	bl	800028c <__adddf3>
 80088a0:	4602      	mov	r2, r0
 80088a2:	460b      	mov	r3, r1
 80088a4:	4630      	mov	r0, r6
 80088a6:	4639      	mov	r1, r7
 80088a8:	f7f8 f936 	bl	8000b18 <__aeabi_dcmpgt>
 80088ac:	2800      	cmp	r0, #0
 80088ae:	d175      	bne.n	800899c <_dtoa_r+0x6fc>
 80088b0:	ec53 2b18 	vmov	r2, r3, d8
 80088b4:	4911      	ldr	r1, [pc, #68]	; (80088fc <_dtoa_r+0x65c>)
 80088b6:	2000      	movs	r0, #0
 80088b8:	f7f7 fce6 	bl	8000288 <__aeabi_dsub>
 80088bc:	4602      	mov	r2, r0
 80088be:	460b      	mov	r3, r1
 80088c0:	4630      	mov	r0, r6
 80088c2:	4639      	mov	r1, r7
 80088c4:	f7f8 f90a 	bl	8000adc <__aeabi_dcmplt>
 80088c8:	2800      	cmp	r0, #0
 80088ca:	f43f af27 	beq.w	800871c <_dtoa_r+0x47c>
 80088ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80088d0:	1e6b      	subs	r3, r5, #1
 80088d2:	930c      	str	r3, [sp, #48]	; 0x30
 80088d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80088d8:	2b30      	cmp	r3, #48	; 0x30
 80088da:	d0f8      	beq.n	80088ce <_dtoa_r+0x62e>
 80088dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80088e0:	e04a      	b.n	8008978 <_dtoa_r+0x6d8>
 80088e2:	bf00      	nop
 80088e4:	0800bb48 	.word	0x0800bb48
 80088e8:	0800bb20 	.word	0x0800bb20
 80088ec:	3ff00000 	.word	0x3ff00000
 80088f0:	40240000 	.word	0x40240000
 80088f4:	401c0000 	.word	0x401c0000
 80088f8:	40140000 	.word	0x40140000
 80088fc:	3fe00000 	.word	0x3fe00000
 8008900:	4baf      	ldr	r3, [pc, #700]	; (8008bc0 <_dtoa_r+0x920>)
 8008902:	f7f7 fe79 	bl	80005f8 <__aeabi_dmul>
 8008906:	4606      	mov	r6, r0
 8008908:	460f      	mov	r7, r1
 800890a:	e7ac      	b.n	8008866 <_dtoa_r+0x5c6>
 800890c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008910:	9d00      	ldr	r5, [sp, #0]
 8008912:	4642      	mov	r2, r8
 8008914:	464b      	mov	r3, r9
 8008916:	4630      	mov	r0, r6
 8008918:	4639      	mov	r1, r7
 800891a:	f7f7 ff97 	bl	800084c <__aeabi_ddiv>
 800891e:	f7f8 f91b 	bl	8000b58 <__aeabi_d2iz>
 8008922:	9002      	str	r0, [sp, #8]
 8008924:	f7f7 fdfe 	bl	8000524 <__aeabi_i2d>
 8008928:	4642      	mov	r2, r8
 800892a:	464b      	mov	r3, r9
 800892c:	f7f7 fe64 	bl	80005f8 <__aeabi_dmul>
 8008930:	4602      	mov	r2, r0
 8008932:	460b      	mov	r3, r1
 8008934:	4630      	mov	r0, r6
 8008936:	4639      	mov	r1, r7
 8008938:	f7f7 fca6 	bl	8000288 <__aeabi_dsub>
 800893c:	9e02      	ldr	r6, [sp, #8]
 800893e:	9f01      	ldr	r7, [sp, #4]
 8008940:	3630      	adds	r6, #48	; 0x30
 8008942:	f805 6b01 	strb.w	r6, [r5], #1
 8008946:	9e00      	ldr	r6, [sp, #0]
 8008948:	1bae      	subs	r6, r5, r6
 800894a:	42b7      	cmp	r7, r6
 800894c:	4602      	mov	r2, r0
 800894e:	460b      	mov	r3, r1
 8008950:	d137      	bne.n	80089c2 <_dtoa_r+0x722>
 8008952:	f7f7 fc9b 	bl	800028c <__adddf3>
 8008956:	4642      	mov	r2, r8
 8008958:	464b      	mov	r3, r9
 800895a:	4606      	mov	r6, r0
 800895c:	460f      	mov	r7, r1
 800895e:	f7f8 f8db 	bl	8000b18 <__aeabi_dcmpgt>
 8008962:	b9c8      	cbnz	r0, 8008998 <_dtoa_r+0x6f8>
 8008964:	4642      	mov	r2, r8
 8008966:	464b      	mov	r3, r9
 8008968:	4630      	mov	r0, r6
 800896a:	4639      	mov	r1, r7
 800896c:	f7f8 f8ac 	bl	8000ac8 <__aeabi_dcmpeq>
 8008970:	b110      	cbz	r0, 8008978 <_dtoa_r+0x6d8>
 8008972:	9b02      	ldr	r3, [sp, #8]
 8008974:	07d9      	lsls	r1, r3, #31
 8008976:	d40f      	bmi.n	8008998 <_dtoa_r+0x6f8>
 8008978:	4620      	mov	r0, r4
 800897a:	4659      	mov	r1, fp
 800897c:	f001 f86c 	bl	8009a58 <_Bfree>
 8008980:	2300      	movs	r3, #0
 8008982:	702b      	strb	r3, [r5, #0]
 8008984:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008986:	f10a 0001 	add.w	r0, sl, #1
 800898a:	6018      	str	r0, [r3, #0]
 800898c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800898e:	2b00      	cmp	r3, #0
 8008990:	f43f acd8 	beq.w	8008344 <_dtoa_r+0xa4>
 8008994:	601d      	str	r5, [r3, #0]
 8008996:	e4d5      	b.n	8008344 <_dtoa_r+0xa4>
 8008998:	f8cd a01c 	str.w	sl, [sp, #28]
 800899c:	462b      	mov	r3, r5
 800899e:	461d      	mov	r5, r3
 80089a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089a4:	2a39      	cmp	r2, #57	; 0x39
 80089a6:	d108      	bne.n	80089ba <_dtoa_r+0x71a>
 80089a8:	9a00      	ldr	r2, [sp, #0]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d1f7      	bne.n	800899e <_dtoa_r+0x6fe>
 80089ae:	9a07      	ldr	r2, [sp, #28]
 80089b0:	9900      	ldr	r1, [sp, #0]
 80089b2:	3201      	adds	r2, #1
 80089b4:	9207      	str	r2, [sp, #28]
 80089b6:	2230      	movs	r2, #48	; 0x30
 80089b8:	700a      	strb	r2, [r1, #0]
 80089ba:	781a      	ldrb	r2, [r3, #0]
 80089bc:	3201      	adds	r2, #1
 80089be:	701a      	strb	r2, [r3, #0]
 80089c0:	e78c      	b.n	80088dc <_dtoa_r+0x63c>
 80089c2:	4b7f      	ldr	r3, [pc, #508]	; (8008bc0 <_dtoa_r+0x920>)
 80089c4:	2200      	movs	r2, #0
 80089c6:	f7f7 fe17 	bl	80005f8 <__aeabi_dmul>
 80089ca:	2200      	movs	r2, #0
 80089cc:	2300      	movs	r3, #0
 80089ce:	4606      	mov	r6, r0
 80089d0:	460f      	mov	r7, r1
 80089d2:	f7f8 f879 	bl	8000ac8 <__aeabi_dcmpeq>
 80089d6:	2800      	cmp	r0, #0
 80089d8:	d09b      	beq.n	8008912 <_dtoa_r+0x672>
 80089da:	e7cd      	b.n	8008978 <_dtoa_r+0x6d8>
 80089dc:	9a08      	ldr	r2, [sp, #32]
 80089de:	2a00      	cmp	r2, #0
 80089e0:	f000 80c4 	beq.w	8008b6c <_dtoa_r+0x8cc>
 80089e4:	9a05      	ldr	r2, [sp, #20]
 80089e6:	2a01      	cmp	r2, #1
 80089e8:	f300 80a8 	bgt.w	8008b3c <_dtoa_r+0x89c>
 80089ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80089ee:	2a00      	cmp	r2, #0
 80089f0:	f000 80a0 	beq.w	8008b34 <_dtoa_r+0x894>
 80089f4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80089f8:	9e06      	ldr	r6, [sp, #24]
 80089fa:	4645      	mov	r5, r8
 80089fc:	9a04      	ldr	r2, [sp, #16]
 80089fe:	2101      	movs	r1, #1
 8008a00:	441a      	add	r2, r3
 8008a02:	4620      	mov	r0, r4
 8008a04:	4498      	add	r8, r3
 8008a06:	9204      	str	r2, [sp, #16]
 8008a08:	f001 f92c 	bl	8009c64 <__i2b>
 8008a0c:	4607      	mov	r7, r0
 8008a0e:	2d00      	cmp	r5, #0
 8008a10:	dd0b      	ble.n	8008a2a <_dtoa_r+0x78a>
 8008a12:	9b04      	ldr	r3, [sp, #16]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	dd08      	ble.n	8008a2a <_dtoa_r+0x78a>
 8008a18:	42ab      	cmp	r3, r5
 8008a1a:	9a04      	ldr	r2, [sp, #16]
 8008a1c:	bfa8      	it	ge
 8008a1e:	462b      	movge	r3, r5
 8008a20:	eba8 0803 	sub.w	r8, r8, r3
 8008a24:	1aed      	subs	r5, r5, r3
 8008a26:	1ad3      	subs	r3, r2, r3
 8008a28:	9304      	str	r3, [sp, #16]
 8008a2a:	9b06      	ldr	r3, [sp, #24]
 8008a2c:	b1fb      	cbz	r3, 8008a6e <_dtoa_r+0x7ce>
 8008a2e:	9b08      	ldr	r3, [sp, #32]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	f000 809f 	beq.w	8008b74 <_dtoa_r+0x8d4>
 8008a36:	2e00      	cmp	r6, #0
 8008a38:	dd11      	ble.n	8008a5e <_dtoa_r+0x7be>
 8008a3a:	4639      	mov	r1, r7
 8008a3c:	4632      	mov	r2, r6
 8008a3e:	4620      	mov	r0, r4
 8008a40:	f001 f9cc 	bl	8009ddc <__pow5mult>
 8008a44:	465a      	mov	r2, fp
 8008a46:	4601      	mov	r1, r0
 8008a48:	4607      	mov	r7, r0
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	f001 f920 	bl	8009c90 <__multiply>
 8008a50:	4659      	mov	r1, fp
 8008a52:	9007      	str	r0, [sp, #28]
 8008a54:	4620      	mov	r0, r4
 8008a56:	f000 ffff 	bl	8009a58 <_Bfree>
 8008a5a:	9b07      	ldr	r3, [sp, #28]
 8008a5c:	469b      	mov	fp, r3
 8008a5e:	9b06      	ldr	r3, [sp, #24]
 8008a60:	1b9a      	subs	r2, r3, r6
 8008a62:	d004      	beq.n	8008a6e <_dtoa_r+0x7ce>
 8008a64:	4659      	mov	r1, fp
 8008a66:	4620      	mov	r0, r4
 8008a68:	f001 f9b8 	bl	8009ddc <__pow5mult>
 8008a6c:	4683      	mov	fp, r0
 8008a6e:	2101      	movs	r1, #1
 8008a70:	4620      	mov	r0, r4
 8008a72:	f001 f8f7 	bl	8009c64 <__i2b>
 8008a76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	4606      	mov	r6, r0
 8008a7c:	dd7c      	ble.n	8008b78 <_dtoa_r+0x8d8>
 8008a7e:	461a      	mov	r2, r3
 8008a80:	4601      	mov	r1, r0
 8008a82:	4620      	mov	r0, r4
 8008a84:	f001 f9aa 	bl	8009ddc <__pow5mult>
 8008a88:	9b05      	ldr	r3, [sp, #20]
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	4606      	mov	r6, r0
 8008a8e:	dd76      	ble.n	8008b7e <_dtoa_r+0x8de>
 8008a90:	2300      	movs	r3, #0
 8008a92:	9306      	str	r3, [sp, #24]
 8008a94:	6933      	ldr	r3, [r6, #16]
 8008a96:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008a9a:	6918      	ldr	r0, [r3, #16]
 8008a9c:	f001 f892 	bl	8009bc4 <__hi0bits>
 8008aa0:	f1c0 0020 	rsb	r0, r0, #32
 8008aa4:	9b04      	ldr	r3, [sp, #16]
 8008aa6:	4418      	add	r0, r3
 8008aa8:	f010 001f 	ands.w	r0, r0, #31
 8008aac:	f000 8086 	beq.w	8008bbc <_dtoa_r+0x91c>
 8008ab0:	f1c0 0320 	rsb	r3, r0, #32
 8008ab4:	2b04      	cmp	r3, #4
 8008ab6:	dd7f      	ble.n	8008bb8 <_dtoa_r+0x918>
 8008ab8:	f1c0 001c 	rsb	r0, r0, #28
 8008abc:	9b04      	ldr	r3, [sp, #16]
 8008abe:	4403      	add	r3, r0
 8008ac0:	4480      	add	r8, r0
 8008ac2:	4405      	add	r5, r0
 8008ac4:	9304      	str	r3, [sp, #16]
 8008ac6:	f1b8 0f00 	cmp.w	r8, #0
 8008aca:	dd05      	ble.n	8008ad8 <_dtoa_r+0x838>
 8008acc:	4659      	mov	r1, fp
 8008ace:	4642      	mov	r2, r8
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	f001 f9dd 	bl	8009e90 <__lshift>
 8008ad6:	4683      	mov	fp, r0
 8008ad8:	9b04      	ldr	r3, [sp, #16]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	dd05      	ble.n	8008aea <_dtoa_r+0x84a>
 8008ade:	4631      	mov	r1, r6
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	4620      	mov	r0, r4
 8008ae4:	f001 f9d4 	bl	8009e90 <__lshift>
 8008ae8:	4606      	mov	r6, r0
 8008aea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d069      	beq.n	8008bc4 <_dtoa_r+0x924>
 8008af0:	4631      	mov	r1, r6
 8008af2:	4658      	mov	r0, fp
 8008af4:	f001 fa38 	bl	8009f68 <__mcmp>
 8008af8:	2800      	cmp	r0, #0
 8008afa:	da63      	bge.n	8008bc4 <_dtoa_r+0x924>
 8008afc:	2300      	movs	r3, #0
 8008afe:	4659      	mov	r1, fp
 8008b00:	220a      	movs	r2, #10
 8008b02:	4620      	mov	r0, r4
 8008b04:	f000 ffca 	bl	8009a9c <__multadd>
 8008b08:	9b08      	ldr	r3, [sp, #32]
 8008b0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b0e:	4683      	mov	fp, r0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	f000 818f 	beq.w	8008e34 <_dtoa_r+0xb94>
 8008b16:	4639      	mov	r1, r7
 8008b18:	2300      	movs	r3, #0
 8008b1a:	220a      	movs	r2, #10
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	f000 ffbd 	bl	8009a9c <__multadd>
 8008b22:	f1b9 0f00 	cmp.w	r9, #0
 8008b26:	4607      	mov	r7, r0
 8008b28:	f300 808e 	bgt.w	8008c48 <_dtoa_r+0x9a8>
 8008b2c:	9b05      	ldr	r3, [sp, #20]
 8008b2e:	2b02      	cmp	r3, #2
 8008b30:	dc50      	bgt.n	8008bd4 <_dtoa_r+0x934>
 8008b32:	e089      	b.n	8008c48 <_dtoa_r+0x9a8>
 8008b34:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008b36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008b3a:	e75d      	b.n	80089f8 <_dtoa_r+0x758>
 8008b3c:	9b01      	ldr	r3, [sp, #4]
 8008b3e:	1e5e      	subs	r6, r3, #1
 8008b40:	9b06      	ldr	r3, [sp, #24]
 8008b42:	42b3      	cmp	r3, r6
 8008b44:	bfbf      	itttt	lt
 8008b46:	9b06      	ldrlt	r3, [sp, #24]
 8008b48:	9606      	strlt	r6, [sp, #24]
 8008b4a:	1af2      	sublt	r2, r6, r3
 8008b4c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008b4e:	bfb6      	itet	lt
 8008b50:	189b      	addlt	r3, r3, r2
 8008b52:	1b9e      	subge	r6, r3, r6
 8008b54:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008b56:	9b01      	ldr	r3, [sp, #4]
 8008b58:	bfb8      	it	lt
 8008b5a:	2600      	movlt	r6, #0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	bfb5      	itete	lt
 8008b60:	eba8 0503 	sublt.w	r5, r8, r3
 8008b64:	9b01      	ldrge	r3, [sp, #4]
 8008b66:	2300      	movlt	r3, #0
 8008b68:	4645      	movge	r5, r8
 8008b6a:	e747      	b.n	80089fc <_dtoa_r+0x75c>
 8008b6c:	9e06      	ldr	r6, [sp, #24]
 8008b6e:	9f08      	ldr	r7, [sp, #32]
 8008b70:	4645      	mov	r5, r8
 8008b72:	e74c      	b.n	8008a0e <_dtoa_r+0x76e>
 8008b74:	9a06      	ldr	r2, [sp, #24]
 8008b76:	e775      	b.n	8008a64 <_dtoa_r+0x7c4>
 8008b78:	9b05      	ldr	r3, [sp, #20]
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	dc18      	bgt.n	8008bb0 <_dtoa_r+0x910>
 8008b7e:	9b02      	ldr	r3, [sp, #8]
 8008b80:	b9b3      	cbnz	r3, 8008bb0 <_dtoa_r+0x910>
 8008b82:	9b03      	ldr	r3, [sp, #12]
 8008b84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b88:	b9a3      	cbnz	r3, 8008bb4 <_dtoa_r+0x914>
 8008b8a:	9b03      	ldr	r3, [sp, #12]
 8008b8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b90:	0d1b      	lsrs	r3, r3, #20
 8008b92:	051b      	lsls	r3, r3, #20
 8008b94:	b12b      	cbz	r3, 8008ba2 <_dtoa_r+0x902>
 8008b96:	9b04      	ldr	r3, [sp, #16]
 8008b98:	3301      	adds	r3, #1
 8008b9a:	9304      	str	r3, [sp, #16]
 8008b9c:	f108 0801 	add.w	r8, r8, #1
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	9306      	str	r3, [sp, #24]
 8008ba4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	f47f af74 	bne.w	8008a94 <_dtoa_r+0x7f4>
 8008bac:	2001      	movs	r0, #1
 8008bae:	e779      	b.n	8008aa4 <_dtoa_r+0x804>
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	e7f6      	b.n	8008ba2 <_dtoa_r+0x902>
 8008bb4:	9b02      	ldr	r3, [sp, #8]
 8008bb6:	e7f4      	b.n	8008ba2 <_dtoa_r+0x902>
 8008bb8:	d085      	beq.n	8008ac6 <_dtoa_r+0x826>
 8008bba:	4618      	mov	r0, r3
 8008bbc:	301c      	adds	r0, #28
 8008bbe:	e77d      	b.n	8008abc <_dtoa_r+0x81c>
 8008bc0:	40240000 	.word	0x40240000
 8008bc4:	9b01      	ldr	r3, [sp, #4]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	dc38      	bgt.n	8008c3c <_dtoa_r+0x99c>
 8008bca:	9b05      	ldr	r3, [sp, #20]
 8008bcc:	2b02      	cmp	r3, #2
 8008bce:	dd35      	ble.n	8008c3c <_dtoa_r+0x99c>
 8008bd0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008bd4:	f1b9 0f00 	cmp.w	r9, #0
 8008bd8:	d10d      	bne.n	8008bf6 <_dtoa_r+0x956>
 8008bda:	4631      	mov	r1, r6
 8008bdc:	464b      	mov	r3, r9
 8008bde:	2205      	movs	r2, #5
 8008be0:	4620      	mov	r0, r4
 8008be2:	f000 ff5b 	bl	8009a9c <__multadd>
 8008be6:	4601      	mov	r1, r0
 8008be8:	4606      	mov	r6, r0
 8008bea:	4658      	mov	r0, fp
 8008bec:	f001 f9bc 	bl	8009f68 <__mcmp>
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	f73f adbd 	bgt.w	8008770 <_dtoa_r+0x4d0>
 8008bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bf8:	9d00      	ldr	r5, [sp, #0]
 8008bfa:	ea6f 0a03 	mvn.w	sl, r3
 8008bfe:	f04f 0800 	mov.w	r8, #0
 8008c02:	4631      	mov	r1, r6
 8008c04:	4620      	mov	r0, r4
 8008c06:	f000 ff27 	bl	8009a58 <_Bfree>
 8008c0a:	2f00      	cmp	r7, #0
 8008c0c:	f43f aeb4 	beq.w	8008978 <_dtoa_r+0x6d8>
 8008c10:	f1b8 0f00 	cmp.w	r8, #0
 8008c14:	d005      	beq.n	8008c22 <_dtoa_r+0x982>
 8008c16:	45b8      	cmp	r8, r7
 8008c18:	d003      	beq.n	8008c22 <_dtoa_r+0x982>
 8008c1a:	4641      	mov	r1, r8
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	f000 ff1b 	bl	8009a58 <_Bfree>
 8008c22:	4639      	mov	r1, r7
 8008c24:	4620      	mov	r0, r4
 8008c26:	f000 ff17 	bl	8009a58 <_Bfree>
 8008c2a:	e6a5      	b.n	8008978 <_dtoa_r+0x6d8>
 8008c2c:	2600      	movs	r6, #0
 8008c2e:	4637      	mov	r7, r6
 8008c30:	e7e1      	b.n	8008bf6 <_dtoa_r+0x956>
 8008c32:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008c34:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008c38:	4637      	mov	r7, r6
 8008c3a:	e599      	b.n	8008770 <_dtoa_r+0x4d0>
 8008c3c:	9b08      	ldr	r3, [sp, #32]
 8008c3e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	f000 80fd 	beq.w	8008e42 <_dtoa_r+0xba2>
 8008c48:	2d00      	cmp	r5, #0
 8008c4a:	dd05      	ble.n	8008c58 <_dtoa_r+0x9b8>
 8008c4c:	4639      	mov	r1, r7
 8008c4e:	462a      	mov	r2, r5
 8008c50:	4620      	mov	r0, r4
 8008c52:	f001 f91d 	bl	8009e90 <__lshift>
 8008c56:	4607      	mov	r7, r0
 8008c58:	9b06      	ldr	r3, [sp, #24]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d05c      	beq.n	8008d18 <_dtoa_r+0xa78>
 8008c5e:	6879      	ldr	r1, [r7, #4]
 8008c60:	4620      	mov	r0, r4
 8008c62:	f000 feb9 	bl	80099d8 <_Balloc>
 8008c66:	4605      	mov	r5, r0
 8008c68:	b928      	cbnz	r0, 8008c76 <_dtoa_r+0x9d6>
 8008c6a:	4b80      	ldr	r3, [pc, #512]	; (8008e6c <_dtoa_r+0xbcc>)
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008c72:	f7ff bb2e 	b.w	80082d2 <_dtoa_r+0x32>
 8008c76:	693a      	ldr	r2, [r7, #16]
 8008c78:	3202      	adds	r2, #2
 8008c7a:	0092      	lsls	r2, r2, #2
 8008c7c:	f107 010c 	add.w	r1, r7, #12
 8008c80:	300c      	adds	r0, #12
 8008c82:	f7fd fa2f 	bl	80060e4 <memcpy>
 8008c86:	2201      	movs	r2, #1
 8008c88:	4629      	mov	r1, r5
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	f001 f900 	bl	8009e90 <__lshift>
 8008c90:	9b00      	ldr	r3, [sp, #0]
 8008c92:	3301      	adds	r3, #1
 8008c94:	9301      	str	r3, [sp, #4]
 8008c96:	9b00      	ldr	r3, [sp, #0]
 8008c98:	444b      	add	r3, r9
 8008c9a:	9307      	str	r3, [sp, #28]
 8008c9c:	9b02      	ldr	r3, [sp, #8]
 8008c9e:	f003 0301 	and.w	r3, r3, #1
 8008ca2:	46b8      	mov	r8, r7
 8008ca4:	9306      	str	r3, [sp, #24]
 8008ca6:	4607      	mov	r7, r0
 8008ca8:	9b01      	ldr	r3, [sp, #4]
 8008caa:	4631      	mov	r1, r6
 8008cac:	3b01      	subs	r3, #1
 8008cae:	4658      	mov	r0, fp
 8008cb0:	9302      	str	r3, [sp, #8]
 8008cb2:	f7ff fa67 	bl	8008184 <quorem>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	3330      	adds	r3, #48	; 0x30
 8008cba:	9004      	str	r0, [sp, #16]
 8008cbc:	4641      	mov	r1, r8
 8008cbe:	4658      	mov	r0, fp
 8008cc0:	9308      	str	r3, [sp, #32]
 8008cc2:	f001 f951 	bl	8009f68 <__mcmp>
 8008cc6:	463a      	mov	r2, r7
 8008cc8:	4681      	mov	r9, r0
 8008cca:	4631      	mov	r1, r6
 8008ccc:	4620      	mov	r0, r4
 8008cce:	f001 f967 	bl	8009fa0 <__mdiff>
 8008cd2:	68c2      	ldr	r2, [r0, #12]
 8008cd4:	9b08      	ldr	r3, [sp, #32]
 8008cd6:	4605      	mov	r5, r0
 8008cd8:	bb02      	cbnz	r2, 8008d1c <_dtoa_r+0xa7c>
 8008cda:	4601      	mov	r1, r0
 8008cdc:	4658      	mov	r0, fp
 8008cde:	f001 f943 	bl	8009f68 <__mcmp>
 8008ce2:	9b08      	ldr	r3, [sp, #32]
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	4629      	mov	r1, r5
 8008ce8:	4620      	mov	r0, r4
 8008cea:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008cee:	f000 feb3 	bl	8009a58 <_Bfree>
 8008cf2:	9b05      	ldr	r3, [sp, #20]
 8008cf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cf6:	9d01      	ldr	r5, [sp, #4]
 8008cf8:	ea43 0102 	orr.w	r1, r3, r2
 8008cfc:	9b06      	ldr	r3, [sp, #24]
 8008cfe:	430b      	orrs	r3, r1
 8008d00:	9b08      	ldr	r3, [sp, #32]
 8008d02:	d10d      	bne.n	8008d20 <_dtoa_r+0xa80>
 8008d04:	2b39      	cmp	r3, #57	; 0x39
 8008d06:	d029      	beq.n	8008d5c <_dtoa_r+0xabc>
 8008d08:	f1b9 0f00 	cmp.w	r9, #0
 8008d0c:	dd01      	ble.n	8008d12 <_dtoa_r+0xa72>
 8008d0e:	9b04      	ldr	r3, [sp, #16]
 8008d10:	3331      	adds	r3, #49	; 0x31
 8008d12:	9a02      	ldr	r2, [sp, #8]
 8008d14:	7013      	strb	r3, [r2, #0]
 8008d16:	e774      	b.n	8008c02 <_dtoa_r+0x962>
 8008d18:	4638      	mov	r0, r7
 8008d1a:	e7b9      	b.n	8008c90 <_dtoa_r+0x9f0>
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	e7e2      	b.n	8008ce6 <_dtoa_r+0xa46>
 8008d20:	f1b9 0f00 	cmp.w	r9, #0
 8008d24:	db06      	blt.n	8008d34 <_dtoa_r+0xa94>
 8008d26:	9905      	ldr	r1, [sp, #20]
 8008d28:	ea41 0909 	orr.w	r9, r1, r9
 8008d2c:	9906      	ldr	r1, [sp, #24]
 8008d2e:	ea59 0101 	orrs.w	r1, r9, r1
 8008d32:	d120      	bne.n	8008d76 <_dtoa_r+0xad6>
 8008d34:	2a00      	cmp	r2, #0
 8008d36:	ddec      	ble.n	8008d12 <_dtoa_r+0xa72>
 8008d38:	4659      	mov	r1, fp
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	4620      	mov	r0, r4
 8008d3e:	9301      	str	r3, [sp, #4]
 8008d40:	f001 f8a6 	bl	8009e90 <__lshift>
 8008d44:	4631      	mov	r1, r6
 8008d46:	4683      	mov	fp, r0
 8008d48:	f001 f90e 	bl	8009f68 <__mcmp>
 8008d4c:	2800      	cmp	r0, #0
 8008d4e:	9b01      	ldr	r3, [sp, #4]
 8008d50:	dc02      	bgt.n	8008d58 <_dtoa_r+0xab8>
 8008d52:	d1de      	bne.n	8008d12 <_dtoa_r+0xa72>
 8008d54:	07da      	lsls	r2, r3, #31
 8008d56:	d5dc      	bpl.n	8008d12 <_dtoa_r+0xa72>
 8008d58:	2b39      	cmp	r3, #57	; 0x39
 8008d5a:	d1d8      	bne.n	8008d0e <_dtoa_r+0xa6e>
 8008d5c:	9a02      	ldr	r2, [sp, #8]
 8008d5e:	2339      	movs	r3, #57	; 0x39
 8008d60:	7013      	strb	r3, [r2, #0]
 8008d62:	462b      	mov	r3, r5
 8008d64:	461d      	mov	r5, r3
 8008d66:	3b01      	subs	r3, #1
 8008d68:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008d6c:	2a39      	cmp	r2, #57	; 0x39
 8008d6e:	d050      	beq.n	8008e12 <_dtoa_r+0xb72>
 8008d70:	3201      	adds	r2, #1
 8008d72:	701a      	strb	r2, [r3, #0]
 8008d74:	e745      	b.n	8008c02 <_dtoa_r+0x962>
 8008d76:	2a00      	cmp	r2, #0
 8008d78:	dd03      	ble.n	8008d82 <_dtoa_r+0xae2>
 8008d7a:	2b39      	cmp	r3, #57	; 0x39
 8008d7c:	d0ee      	beq.n	8008d5c <_dtoa_r+0xabc>
 8008d7e:	3301      	adds	r3, #1
 8008d80:	e7c7      	b.n	8008d12 <_dtoa_r+0xa72>
 8008d82:	9a01      	ldr	r2, [sp, #4]
 8008d84:	9907      	ldr	r1, [sp, #28]
 8008d86:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008d8a:	428a      	cmp	r2, r1
 8008d8c:	d02a      	beq.n	8008de4 <_dtoa_r+0xb44>
 8008d8e:	4659      	mov	r1, fp
 8008d90:	2300      	movs	r3, #0
 8008d92:	220a      	movs	r2, #10
 8008d94:	4620      	mov	r0, r4
 8008d96:	f000 fe81 	bl	8009a9c <__multadd>
 8008d9a:	45b8      	cmp	r8, r7
 8008d9c:	4683      	mov	fp, r0
 8008d9e:	f04f 0300 	mov.w	r3, #0
 8008da2:	f04f 020a 	mov.w	r2, #10
 8008da6:	4641      	mov	r1, r8
 8008da8:	4620      	mov	r0, r4
 8008daa:	d107      	bne.n	8008dbc <_dtoa_r+0xb1c>
 8008dac:	f000 fe76 	bl	8009a9c <__multadd>
 8008db0:	4680      	mov	r8, r0
 8008db2:	4607      	mov	r7, r0
 8008db4:	9b01      	ldr	r3, [sp, #4]
 8008db6:	3301      	adds	r3, #1
 8008db8:	9301      	str	r3, [sp, #4]
 8008dba:	e775      	b.n	8008ca8 <_dtoa_r+0xa08>
 8008dbc:	f000 fe6e 	bl	8009a9c <__multadd>
 8008dc0:	4639      	mov	r1, r7
 8008dc2:	4680      	mov	r8, r0
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	220a      	movs	r2, #10
 8008dc8:	4620      	mov	r0, r4
 8008dca:	f000 fe67 	bl	8009a9c <__multadd>
 8008dce:	4607      	mov	r7, r0
 8008dd0:	e7f0      	b.n	8008db4 <_dtoa_r+0xb14>
 8008dd2:	f1b9 0f00 	cmp.w	r9, #0
 8008dd6:	9a00      	ldr	r2, [sp, #0]
 8008dd8:	bfcc      	ite	gt
 8008dda:	464d      	movgt	r5, r9
 8008ddc:	2501      	movle	r5, #1
 8008dde:	4415      	add	r5, r2
 8008de0:	f04f 0800 	mov.w	r8, #0
 8008de4:	4659      	mov	r1, fp
 8008de6:	2201      	movs	r2, #1
 8008de8:	4620      	mov	r0, r4
 8008dea:	9301      	str	r3, [sp, #4]
 8008dec:	f001 f850 	bl	8009e90 <__lshift>
 8008df0:	4631      	mov	r1, r6
 8008df2:	4683      	mov	fp, r0
 8008df4:	f001 f8b8 	bl	8009f68 <__mcmp>
 8008df8:	2800      	cmp	r0, #0
 8008dfa:	dcb2      	bgt.n	8008d62 <_dtoa_r+0xac2>
 8008dfc:	d102      	bne.n	8008e04 <_dtoa_r+0xb64>
 8008dfe:	9b01      	ldr	r3, [sp, #4]
 8008e00:	07db      	lsls	r3, r3, #31
 8008e02:	d4ae      	bmi.n	8008d62 <_dtoa_r+0xac2>
 8008e04:	462b      	mov	r3, r5
 8008e06:	461d      	mov	r5, r3
 8008e08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e0c:	2a30      	cmp	r2, #48	; 0x30
 8008e0e:	d0fa      	beq.n	8008e06 <_dtoa_r+0xb66>
 8008e10:	e6f7      	b.n	8008c02 <_dtoa_r+0x962>
 8008e12:	9a00      	ldr	r2, [sp, #0]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d1a5      	bne.n	8008d64 <_dtoa_r+0xac4>
 8008e18:	f10a 0a01 	add.w	sl, sl, #1
 8008e1c:	2331      	movs	r3, #49	; 0x31
 8008e1e:	e779      	b.n	8008d14 <_dtoa_r+0xa74>
 8008e20:	4b13      	ldr	r3, [pc, #76]	; (8008e70 <_dtoa_r+0xbd0>)
 8008e22:	f7ff baaf 	b.w	8008384 <_dtoa_r+0xe4>
 8008e26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	f47f aa86 	bne.w	800833a <_dtoa_r+0x9a>
 8008e2e:	4b11      	ldr	r3, [pc, #68]	; (8008e74 <_dtoa_r+0xbd4>)
 8008e30:	f7ff baa8 	b.w	8008384 <_dtoa_r+0xe4>
 8008e34:	f1b9 0f00 	cmp.w	r9, #0
 8008e38:	dc03      	bgt.n	8008e42 <_dtoa_r+0xba2>
 8008e3a:	9b05      	ldr	r3, [sp, #20]
 8008e3c:	2b02      	cmp	r3, #2
 8008e3e:	f73f aec9 	bgt.w	8008bd4 <_dtoa_r+0x934>
 8008e42:	9d00      	ldr	r5, [sp, #0]
 8008e44:	4631      	mov	r1, r6
 8008e46:	4658      	mov	r0, fp
 8008e48:	f7ff f99c 	bl	8008184 <quorem>
 8008e4c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008e50:	f805 3b01 	strb.w	r3, [r5], #1
 8008e54:	9a00      	ldr	r2, [sp, #0]
 8008e56:	1aaa      	subs	r2, r5, r2
 8008e58:	4591      	cmp	r9, r2
 8008e5a:	ddba      	ble.n	8008dd2 <_dtoa_r+0xb32>
 8008e5c:	4659      	mov	r1, fp
 8008e5e:	2300      	movs	r3, #0
 8008e60:	220a      	movs	r2, #10
 8008e62:	4620      	mov	r0, r4
 8008e64:	f000 fe1a 	bl	8009a9c <__multadd>
 8008e68:	4683      	mov	fp, r0
 8008e6a:	e7eb      	b.n	8008e44 <_dtoa_r+0xba4>
 8008e6c:	0800b9cc 	.word	0x0800b9cc
 8008e70:	0800b7c8 	.word	0x0800b7c8
 8008e74:	0800b949 	.word	0x0800b949

08008e78 <__sflush_r>:
 8008e78:	898a      	ldrh	r2, [r1, #12]
 8008e7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e7e:	4605      	mov	r5, r0
 8008e80:	0710      	lsls	r0, r2, #28
 8008e82:	460c      	mov	r4, r1
 8008e84:	d458      	bmi.n	8008f38 <__sflush_r+0xc0>
 8008e86:	684b      	ldr	r3, [r1, #4]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	dc05      	bgt.n	8008e98 <__sflush_r+0x20>
 8008e8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	dc02      	bgt.n	8008e98 <__sflush_r+0x20>
 8008e92:	2000      	movs	r0, #0
 8008e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e9a:	2e00      	cmp	r6, #0
 8008e9c:	d0f9      	beq.n	8008e92 <__sflush_r+0x1a>
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ea4:	682f      	ldr	r7, [r5, #0]
 8008ea6:	602b      	str	r3, [r5, #0]
 8008ea8:	d032      	beq.n	8008f10 <__sflush_r+0x98>
 8008eaa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008eac:	89a3      	ldrh	r3, [r4, #12]
 8008eae:	075a      	lsls	r2, r3, #29
 8008eb0:	d505      	bpl.n	8008ebe <__sflush_r+0x46>
 8008eb2:	6863      	ldr	r3, [r4, #4]
 8008eb4:	1ac0      	subs	r0, r0, r3
 8008eb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008eb8:	b10b      	cbz	r3, 8008ebe <__sflush_r+0x46>
 8008eba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ebc:	1ac0      	subs	r0, r0, r3
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ec4:	6a21      	ldr	r1, [r4, #32]
 8008ec6:	4628      	mov	r0, r5
 8008ec8:	47b0      	blx	r6
 8008eca:	1c43      	adds	r3, r0, #1
 8008ecc:	89a3      	ldrh	r3, [r4, #12]
 8008ece:	d106      	bne.n	8008ede <__sflush_r+0x66>
 8008ed0:	6829      	ldr	r1, [r5, #0]
 8008ed2:	291d      	cmp	r1, #29
 8008ed4:	d82c      	bhi.n	8008f30 <__sflush_r+0xb8>
 8008ed6:	4a2a      	ldr	r2, [pc, #168]	; (8008f80 <__sflush_r+0x108>)
 8008ed8:	40ca      	lsrs	r2, r1
 8008eda:	07d6      	lsls	r6, r2, #31
 8008edc:	d528      	bpl.n	8008f30 <__sflush_r+0xb8>
 8008ede:	2200      	movs	r2, #0
 8008ee0:	6062      	str	r2, [r4, #4]
 8008ee2:	04d9      	lsls	r1, r3, #19
 8008ee4:	6922      	ldr	r2, [r4, #16]
 8008ee6:	6022      	str	r2, [r4, #0]
 8008ee8:	d504      	bpl.n	8008ef4 <__sflush_r+0x7c>
 8008eea:	1c42      	adds	r2, r0, #1
 8008eec:	d101      	bne.n	8008ef2 <__sflush_r+0x7a>
 8008eee:	682b      	ldr	r3, [r5, #0]
 8008ef0:	b903      	cbnz	r3, 8008ef4 <__sflush_r+0x7c>
 8008ef2:	6560      	str	r0, [r4, #84]	; 0x54
 8008ef4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ef6:	602f      	str	r7, [r5, #0]
 8008ef8:	2900      	cmp	r1, #0
 8008efa:	d0ca      	beq.n	8008e92 <__sflush_r+0x1a>
 8008efc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f00:	4299      	cmp	r1, r3
 8008f02:	d002      	beq.n	8008f0a <__sflush_r+0x92>
 8008f04:	4628      	mov	r0, r5
 8008f06:	f7fd f913 	bl	8006130 <_free_r>
 8008f0a:	2000      	movs	r0, #0
 8008f0c:	6360      	str	r0, [r4, #52]	; 0x34
 8008f0e:	e7c1      	b.n	8008e94 <__sflush_r+0x1c>
 8008f10:	6a21      	ldr	r1, [r4, #32]
 8008f12:	2301      	movs	r3, #1
 8008f14:	4628      	mov	r0, r5
 8008f16:	47b0      	blx	r6
 8008f18:	1c41      	adds	r1, r0, #1
 8008f1a:	d1c7      	bne.n	8008eac <__sflush_r+0x34>
 8008f1c:	682b      	ldr	r3, [r5, #0]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d0c4      	beq.n	8008eac <__sflush_r+0x34>
 8008f22:	2b1d      	cmp	r3, #29
 8008f24:	d001      	beq.n	8008f2a <__sflush_r+0xb2>
 8008f26:	2b16      	cmp	r3, #22
 8008f28:	d101      	bne.n	8008f2e <__sflush_r+0xb6>
 8008f2a:	602f      	str	r7, [r5, #0]
 8008f2c:	e7b1      	b.n	8008e92 <__sflush_r+0x1a>
 8008f2e:	89a3      	ldrh	r3, [r4, #12]
 8008f30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f34:	81a3      	strh	r3, [r4, #12]
 8008f36:	e7ad      	b.n	8008e94 <__sflush_r+0x1c>
 8008f38:	690f      	ldr	r7, [r1, #16]
 8008f3a:	2f00      	cmp	r7, #0
 8008f3c:	d0a9      	beq.n	8008e92 <__sflush_r+0x1a>
 8008f3e:	0793      	lsls	r3, r2, #30
 8008f40:	680e      	ldr	r6, [r1, #0]
 8008f42:	bf08      	it	eq
 8008f44:	694b      	ldreq	r3, [r1, #20]
 8008f46:	600f      	str	r7, [r1, #0]
 8008f48:	bf18      	it	ne
 8008f4a:	2300      	movne	r3, #0
 8008f4c:	eba6 0807 	sub.w	r8, r6, r7
 8008f50:	608b      	str	r3, [r1, #8]
 8008f52:	f1b8 0f00 	cmp.w	r8, #0
 8008f56:	dd9c      	ble.n	8008e92 <__sflush_r+0x1a>
 8008f58:	6a21      	ldr	r1, [r4, #32]
 8008f5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008f5c:	4643      	mov	r3, r8
 8008f5e:	463a      	mov	r2, r7
 8008f60:	4628      	mov	r0, r5
 8008f62:	47b0      	blx	r6
 8008f64:	2800      	cmp	r0, #0
 8008f66:	dc06      	bgt.n	8008f76 <__sflush_r+0xfe>
 8008f68:	89a3      	ldrh	r3, [r4, #12]
 8008f6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f6e:	81a3      	strh	r3, [r4, #12]
 8008f70:	f04f 30ff 	mov.w	r0, #4294967295
 8008f74:	e78e      	b.n	8008e94 <__sflush_r+0x1c>
 8008f76:	4407      	add	r7, r0
 8008f78:	eba8 0800 	sub.w	r8, r8, r0
 8008f7c:	e7e9      	b.n	8008f52 <__sflush_r+0xda>
 8008f7e:	bf00      	nop
 8008f80:	20400001 	.word	0x20400001

08008f84 <_fflush_r>:
 8008f84:	b538      	push	{r3, r4, r5, lr}
 8008f86:	690b      	ldr	r3, [r1, #16]
 8008f88:	4605      	mov	r5, r0
 8008f8a:	460c      	mov	r4, r1
 8008f8c:	b913      	cbnz	r3, 8008f94 <_fflush_r+0x10>
 8008f8e:	2500      	movs	r5, #0
 8008f90:	4628      	mov	r0, r5
 8008f92:	bd38      	pop	{r3, r4, r5, pc}
 8008f94:	b118      	cbz	r0, 8008f9e <_fflush_r+0x1a>
 8008f96:	6983      	ldr	r3, [r0, #24]
 8008f98:	b90b      	cbnz	r3, 8008f9e <_fflush_r+0x1a>
 8008f9a:	f000 f887 	bl	80090ac <__sinit>
 8008f9e:	4b14      	ldr	r3, [pc, #80]	; (8008ff0 <_fflush_r+0x6c>)
 8008fa0:	429c      	cmp	r4, r3
 8008fa2:	d11b      	bne.n	8008fdc <_fflush_r+0x58>
 8008fa4:	686c      	ldr	r4, [r5, #4]
 8008fa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d0ef      	beq.n	8008f8e <_fflush_r+0xa>
 8008fae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008fb0:	07d0      	lsls	r0, r2, #31
 8008fb2:	d404      	bmi.n	8008fbe <_fflush_r+0x3a>
 8008fb4:	0599      	lsls	r1, r3, #22
 8008fb6:	d402      	bmi.n	8008fbe <_fflush_r+0x3a>
 8008fb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fba:	f000 fc88 	bl	80098ce <__retarget_lock_acquire_recursive>
 8008fbe:	4628      	mov	r0, r5
 8008fc0:	4621      	mov	r1, r4
 8008fc2:	f7ff ff59 	bl	8008e78 <__sflush_r>
 8008fc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008fc8:	07da      	lsls	r2, r3, #31
 8008fca:	4605      	mov	r5, r0
 8008fcc:	d4e0      	bmi.n	8008f90 <_fflush_r+0xc>
 8008fce:	89a3      	ldrh	r3, [r4, #12]
 8008fd0:	059b      	lsls	r3, r3, #22
 8008fd2:	d4dd      	bmi.n	8008f90 <_fflush_r+0xc>
 8008fd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fd6:	f000 fc7b 	bl	80098d0 <__retarget_lock_release_recursive>
 8008fda:	e7d9      	b.n	8008f90 <_fflush_r+0xc>
 8008fdc:	4b05      	ldr	r3, [pc, #20]	; (8008ff4 <_fflush_r+0x70>)
 8008fde:	429c      	cmp	r4, r3
 8008fe0:	d101      	bne.n	8008fe6 <_fflush_r+0x62>
 8008fe2:	68ac      	ldr	r4, [r5, #8]
 8008fe4:	e7df      	b.n	8008fa6 <_fflush_r+0x22>
 8008fe6:	4b04      	ldr	r3, [pc, #16]	; (8008ff8 <_fflush_r+0x74>)
 8008fe8:	429c      	cmp	r4, r3
 8008fea:	bf08      	it	eq
 8008fec:	68ec      	ldreq	r4, [r5, #12]
 8008fee:	e7da      	b.n	8008fa6 <_fflush_r+0x22>
 8008ff0:	0800ba00 	.word	0x0800ba00
 8008ff4:	0800ba20 	.word	0x0800ba20
 8008ff8:	0800b9e0 	.word	0x0800b9e0

08008ffc <std>:
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	b510      	push	{r4, lr}
 8009000:	4604      	mov	r4, r0
 8009002:	e9c0 3300 	strd	r3, r3, [r0]
 8009006:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800900a:	6083      	str	r3, [r0, #8]
 800900c:	8181      	strh	r1, [r0, #12]
 800900e:	6643      	str	r3, [r0, #100]	; 0x64
 8009010:	81c2      	strh	r2, [r0, #14]
 8009012:	6183      	str	r3, [r0, #24]
 8009014:	4619      	mov	r1, r3
 8009016:	2208      	movs	r2, #8
 8009018:	305c      	adds	r0, #92	; 0x5c
 800901a:	f7fd f871 	bl	8006100 <memset>
 800901e:	4b05      	ldr	r3, [pc, #20]	; (8009034 <std+0x38>)
 8009020:	6263      	str	r3, [r4, #36]	; 0x24
 8009022:	4b05      	ldr	r3, [pc, #20]	; (8009038 <std+0x3c>)
 8009024:	62a3      	str	r3, [r4, #40]	; 0x28
 8009026:	4b05      	ldr	r3, [pc, #20]	; (800903c <std+0x40>)
 8009028:	62e3      	str	r3, [r4, #44]	; 0x2c
 800902a:	4b05      	ldr	r3, [pc, #20]	; (8009040 <std+0x44>)
 800902c:	6224      	str	r4, [r4, #32]
 800902e:	6323      	str	r3, [r4, #48]	; 0x30
 8009030:	bd10      	pop	{r4, pc}
 8009032:	bf00      	nop
 8009034:	0800a8c9 	.word	0x0800a8c9
 8009038:	0800a8eb 	.word	0x0800a8eb
 800903c:	0800a923 	.word	0x0800a923
 8009040:	0800a947 	.word	0x0800a947

08009044 <_cleanup_r>:
 8009044:	4901      	ldr	r1, [pc, #4]	; (800904c <_cleanup_r+0x8>)
 8009046:	f000 b8af 	b.w	80091a8 <_fwalk_reent>
 800904a:	bf00      	nop
 800904c:	08008f85 	.word	0x08008f85

08009050 <__sfmoreglue>:
 8009050:	b570      	push	{r4, r5, r6, lr}
 8009052:	1e4a      	subs	r2, r1, #1
 8009054:	2568      	movs	r5, #104	; 0x68
 8009056:	4355      	muls	r5, r2
 8009058:	460e      	mov	r6, r1
 800905a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800905e:	f7fd f8b7 	bl	80061d0 <_malloc_r>
 8009062:	4604      	mov	r4, r0
 8009064:	b140      	cbz	r0, 8009078 <__sfmoreglue+0x28>
 8009066:	2100      	movs	r1, #0
 8009068:	e9c0 1600 	strd	r1, r6, [r0]
 800906c:	300c      	adds	r0, #12
 800906e:	60a0      	str	r0, [r4, #8]
 8009070:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009074:	f7fd f844 	bl	8006100 <memset>
 8009078:	4620      	mov	r0, r4
 800907a:	bd70      	pop	{r4, r5, r6, pc}

0800907c <__sfp_lock_acquire>:
 800907c:	4801      	ldr	r0, [pc, #4]	; (8009084 <__sfp_lock_acquire+0x8>)
 800907e:	f000 bc26 	b.w	80098ce <__retarget_lock_acquire_recursive>
 8009082:	bf00      	nop
 8009084:	20001cc2 	.word	0x20001cc2

08009088 <__sfp_lock_release>:
 8009088:	4801      	ldr	r0, [pc, #4]	; (8009090 <__sfp_lock_release+0x8>)
 800908a:	f000 bc21 	b.w	80098d0 <__retarget_lock_release_recursive>
 800908e:	bf00      	nop
 8009090:	20001cc2 	.word	0x20001cc2

08009094 <__sinit_lock_acquire>:
 8009094:	4801      	ldr	r0, [pc, #4]	; (800909c <__sinit_lock_acquire+0x8>)
 8009096:	f000 bc1a 	b.w	80098ce <__retarget_lock_acquire_recursive>
 800909a:	bf00      	nop
 800909c:	20001cbd 	.word	0x20001cbd

080090a0 <__sinit_lock_release>:
 80090a0:	4801      	ldr	r0, [pc, #4]	; (80090a8 <__sinit_lock_release+0x8>)
 80090a2:	f000 bc15 	b.w	80098d0 <__retarget_lock_release_recursive>
 80090a6:	bf00      	nop
 80090a8:	20001cbd 	.word	0x20001cbd

080090ac <__sinit>:
 80090ac:	b510      	push	{r4, lr}
 80090ae:	4604      	mov	r4, r0
 80090b0:	f7ff fff0 	bl	8009094 <__sinit_lock_acquire>
 80090b4:	69a3      	ldr	r3, [r4, #24]
 80090b6:	b11b      	cbz	r3, 80090c0 <__sinit+0x14>
 80090b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090bc:	f7ff bff0 	b.w	80090a0 <__sinit_lock_release>
 80090c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80090c4:	6523      	str	r3, [r4, #80]	; 0x50
 80090c6:	4b13      	ldr	r3, [pc, #76]	; (8009114 <__sinit+0x68>)
 80090c8:	4a13      	ldr	r2, [pc, #76]	; (8009118 <__sinit+0x6c>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80090ce:	42a3      	cmp	r3, r4
 80090d0:	bf04      	itt	eq
 80090d2:	2301      	moveq	r3, #1
 80090d4:	61a3      	streq	r3, [r4, #24]
 80090d6:	4620      	mov	r0, r4
 80090d8:	f000 f820 	bl	800911c <__sfp>
 80090dc:	6060      	str	r0, [r4, #4]
 80090de:	4620      	mov	r0, r4
 80090e0:	f000 f81c 	bl	800911c <__sfp>
 80090e4:	60a0      	str	r0, [r4, #8]
 80090e6:	4620      	mov	r0, r4
 80090e8:	f000 f818 	bl	800911c <__sfp>
 80090ec:	2200      	movs	r2, #0
 80090ee:	60e0      	str	r0, [r4, #12]
 80090f0:	2104      	movs	r1, #4
 80090f2:	6860      	ldr	r0, [r4, #4]
 80090f4:	f7ff ff82 	bl	8008ffc <std>
 80090f8:	68a0      	ldr	r0, [r4, #8]
 80090fa:	2201      	movs	r2, #1
 80090fc:	2109      	movs	r1, #9
 80090fe:	f7ff ff7d 	bl	8008ffc <std>
 8009102:	68e0      	ldr	r0, [r4, #12]
 8009104:	2202      	movs	r2, #2
 8009106:	2112      	movs	r1, #18
 8009108:	f7ff ff78 	bl	8008ffc <std>
 800910c:	2301      	movs	r3, #1
 800910e:	61a3      	str	r3, [r4, #24]
 8009110:	e7d2      	b.n	80090b8 <__sinit+0xc>
 8009112:	bf00      	nop
 8009114:	0800b7b4 	.word	0x0800b7b4
 8009118:	08009045 	.word	0x08009045

0800911c <__sfp>:
 800911c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800911e:	4607      	mov	r7, r0
 8009120:	f7ff ffac 	bl	800907c <__sfp_lock_acquire>
 8009124:	4b1e      	ldr	r3, [pc, #120]	; (80091a0 <__sfp+0x84>)
 8009126:	681e      	ldr	r6, [r3, #0]
 8009128:	69b3      	ldr	r3, [r6, #24]
 800912a:	b913      	cbnz	r3, 8009132 <__sfp+0x16>
 800912c:	4630      	mov	r0, r6
 800912e:	f7ff ffbd 	bl	80090ac <__sinit>
 8009132:	3648      	adds	r6, #72	; 0x48
 8009134:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009138:	3b01      	subs	r3, #1
 800913a:	d503      	bpl.n	8009144 <__sfp+0x28>
 800913c:	6833      	ldr	r3, [r6, #0]
 800913e:	b30b      	cbz	r3, 8009184 <__sfp+0x68>
 8009140:	6836      	ldr	r6, [r6, #0]
 8009142:	e7f7      	b.n	8009134 <__sfp+0x18>
 8009144:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009148:	b9d5      	cbnz	r5, 8009180 <__sfp+0x64>
 800914a:	4b16      	ldr	r3, [pc, #88]	; (80091a4 <__sfp+0x88>)
 800914c:	60e3      	str	r3, [r4, #12]
 800914e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009152:	6665      	str	r5, [r4, #100]	; 0x64
 8009154:	f000 fbba 	bl	80098cc <__retarget_lock_init_recursive>
 8009158:	f7ff ff96 	bl	8009088 <__sfp_lock_release>
 800915c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009160:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009164:	6025      	str	r5, [r4, #0]
 8009166:	61a5      	str	r5, [r4, #24]
 8009168:	2208      	movs	r2, #8
 800916a:	4629      	mov	r1, r5
 800916c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009170:	f7fc ffc6 	bl	8006100 <memset>
 8009174:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009178:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800917c:	4620      	mov	r0, r4
 800917e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009180:	3468      	adds	r4, #104	; 0x68
 8009182:	e7d9      	b.n	8009138 <__sfp+0x1c>
 8009184:	2104      	movs	r1, #4
 8009186:	4638      	mov	r0, r7
 8009188:	f7ff ff62 	bl	8009050 <__sfmoreglue>
 800918c:	4604      	mov	r4, r0
 800918e:	6030      	str	r0, [r6, #0]
 8009190:	2800      	cmp	r0, #0
 8009192:	d1d5      	bne.n	8009140 <__sfp+0x24>
 8009194:	f7ff ff78 	bl	8009088 <__sfp_lock_release>
 8009198:	230c      	movs	r3, #12
 800919a:	603b      	str	r3, [r7, #0]
 800919c:	e7ee      	b.n	800917c <__sfp+0x60>
 800919e:	bf00      	nop
 80091a0:	0800b7b4 	.word	0x0800b7b4
 80091a4:	ffff0001 	.word	0xffff0001

080091a8 <_fwalk_reent>:
 80091a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091ac:	4606      	mov	r6, r0
 80091ae:	4688      	mov	r8, r1
 80091b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80091b4:	2700      	movs	r7, #0
 80091b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80091ba:	f1b9 0901 	subs.w	r9, r9, #1
 80091be:	d505      	bpl.n	80091cc <_fwalk_reent+0x24>
 80091c0:	6824      	ldr	r4, [r4, #0]
 80091c2:	2c00      	cmp	r4, #0
 80091c4:	d1f7      	bne.n	80091b6 <_fwalk_reent+0xe>
 80091c6:	4638      	mov	r0, r7
 80091c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091cc:	89ab      	ldrh	r3, [r5, #12]
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d907      	bls.n	80091e2 <_fwalk_reent+0x3a>
 80091d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80091d6:	3301      	adds	r3, #1
 80091d8:	d003      	beq.n	80091e2 <_fwalk_reent+0x3a>
 80091da:	4629      	mov	r1, r5
 80091dc:	4630      	mov	r0, r6
 80091de:	47c0      	blx	r8
 80091e0:	4307      	orrs	r7, r0
 80091e2:	3568      	adds	r5, #104	; 0x68
 80091e4:	e7e9      	b.n	80091ba <_fwalk_reent+0x12>

080091e6 <rshift>:
 80091e6:	6903      	ldr	r3, [r0, #16]
 80091e8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80091ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80091f0:	ea4f 1261 	mov.w	r2, r1, asr #5
 80091f4:	f100 0414 	add.w	r4, r0, #20
 80091f8:	dd45      	ble.n	8009286 <rshift+0xa0>
 80091fa:	f011 011f 	ands.w	r1, r1, #31
 80091fe:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009202:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009206:	d10c      	bne.n	8009222 <rshift+0x3c>
 8009208:	f100 0710 	add.w	r7, r0, #16
 800920c:	4629      	mov	r1, r5
 800920e:	42b1      	cmp	r1, r6
 8009210:	d334      	bcc.n	800927c <rshift+0x96>
 8009212:	1a9b      	subs	r3, r3, r2
 8009214:	009b      	lsls	r3, r3, #2
 8009216:	1eea      	subs	r2, r5, #3
 8009218:	4296      	cmp	r6, r2
 800921a:	bf38      	it	cc
 800921c:	2300      	movcc	r3, #0
 800921e:	4423      	add	r3, r4
 8009220:	e015      	b.n	800924e <rshift+0x68>
 8009222:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009226:	f1c1 0820 	rsb	r8, r1, #32
 800922a:	40cf      	lsrs	r7, r1
 800922c:	f105 0e04 	add.w	lr, r5, #4
 8009230:	46a1      	mov	r9, r4
 8009232:	4576      	cmp	r6, lr
 8009234:	46f4      	mov	ip, lr
 8009236:	d815      	bhi.n	8009264 <rshift+0x7e>
 8009238:	1a9b      	subs	r3, r3, r2
 800923a:	009a      	lsls	r2, r3, #2
 800923c:	3a04      	subs	r2, #4
 800923e:	3501      	adds	r5, #1
 8009240:	42ae      	cmp	r6, r5
 8009242:	bf38      	it	cc
 8009244:	2200      	movcc	r2, #0
 8009246:	18a3      	adds	r3, r4, r2
 8009248:	50a7      	str	r7, [r4, r2]
 800924a:	b107      	cbz	r7, 800924e <rshift+0x68>
 800924c:	3304      	adds	r3, #4
 800924e:	1b1a      	subs	r2, r3, r4
 8009250:	42a3      	cmp	r3, r4
 8009252:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009256:	bf08      	it	eq
 8009258:	2300      	moveq	r3, #0
 800925a:	6102      	str	r2, [r0, #16]
 800925c:	bf08      	it	eq
 800925e:	6143      	streq	r3, [r0, #20]
 8009260:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009264:	f8dc c000 	ldr.w	ip, [ip]
 8009268:	fa0c fc08 	lsl.w	ip, ip, r8
 800926c:	ea4c 0707 	orr.w	r7, ip, r7
 8009270:	f849 7b04 	str.w	r7, [r9], #4
 8009274:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009278:	40cf      	lsrs	r7, r1
 800927a:	e7da      	b.n	8009232 <rshift+0x4c>
 800927c:	f851 cb04 	ldr.w	ip, [r1], #4
 8009280:	f847 cf04 	str.w	ip, [r7, #4]!
 8009284:	e7c3      	b.n	800920e <rshift+0x28>
 8009286:	4623      	mov	r3, r4
 8009288:	e7e1      	b.n	800924e <rshift+0x68>

0800928a <__hexdig_fun>:
 800928a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800928e:	2b09      	cmp	r3, #9
 8009290:	d802      	bhi.n	8009298 <__hexdig_fun+0xe>
 8009292:	3820      	subs	r0, #32
 8009294:	b2c0      	uxtb	r0, r0
 8009296:	4770      	bx	lr
 8009298:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800929c:	2b05      	cmp	r3, #5
 800929e:	d801      	bhi.n	80092a4 <__hexdig_fun+0x1a>
 80092a0:	3847      	subs	r0, #71	; 0x47
 80092a2:	e7f7      	b.n	8009294 <__hexdig_fun+0xa>
 80092a4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80092a8:	2b05      	cmp	r3, #5
 80092aa:	d801      	bhi.n	80092b0 <__hexdig_fun+0x26>
 80092ac:	3827      	subs	r0, #39	; 0x27
 80092ae:	e7f1      	b.n	8009294 <__hexdig_fun+0xa>
 80092b0:	2000      	movs	r0, #0
 80092b2:	4770      	bx	lr

080092b4 <__gethex>:
 80092b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092b8:	ed2d 8b02 	vpush	{d8}
 80092bc:	b089      	sub	sp, #36	; 0x24
 80092be:	ee08 0a10 	vmov	s16, r0
 80092c2:	9304      	str	r3, [sp, #16]
 80092c4:	4bbc      	ldr	r3, [pc, #752]	; (80095b8 <__gethex+0x304>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	9301      	str	r3, [sp, #4]
 80092ca:	4618      	mov	r0, r3
 80092cc:	468b      	mov	fp, r1
 80092ce:	4690      	mov	r8, r2
 80092d0:	f7f6 ff7e 	bl	80001d0 <strlen>
 80092d4:	9b01      	ldr	r3, [sp, #4]
 80092d6:	f8db 2000 	ldr.w	r2, [fp]
 80092da:	4403      	add	r3, r0
 80092dc:	4682      	mov	sl, r0
 80092de:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80092e2:	9305      	str	r3, [sp, #20]
 80092e4:	1c93      	adds	r3, r2, #2
 80092e6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80092ea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80092ee:	32fe      	adds	r2, #254	; 0xfe
 80092f0:	18d1      	adds	r1, r2, r3
 80092f2:	461f      	mov	r7, r3
 80092f4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80092f8:	9100      	str	r1, [sp, #0]
 80092fa:	2830      	cmp	r0, #48	; 0x30
 80092fc:	d0f8      	beq.n	80092f0 <__gethex+0x3c>
 80092fe:	f7ff ffc4 	bl	800928a <__hexdig_fun>
 8009302:	4604      	mov	r4, r0
 8009304:	2800      	cmp	r0, #0
 8009306:	d13a      	bne.n	800937e <__gethex+0xca>
 8009308:	9901      	ldr	r1, [sp, #4]
 800930a:	4652      	mov	r2, sl
 800930c:	4638      	mov	r0, r7
 800930e:	f001 fb1e 	bl	800a94e <strncmp>
 8009312:	4605      	mov	r5, r0
 8009314:	2800      	cmp	r0, #0
 8009316:	d168      	bne.n	80093ea <__gethex+0x136>
 8009318:	f817 000a 	ldrb.w	r0, [r7, sl]
 800931c:	eb07 060a 	add.w	r6, r7, sl
 8009320:	f7ff ffb3 	bl	800928a <__hexdig_fun>
 8009324:	2800      	cmp	r0, #0
 8009326:	d062      	beq.n	80093ee <__gethex+0x13a>
 8009328:	4633      	mov	r3, r6
 800932a:	7818      	ldrb	r0, [r3, #0]
 800932c:	2830      	cmp	r0, #48	; 0x30
 800932e:	461f      	mov	r7, r3
 8009330:	f103 0301 	add.w	r3, r3, #1
 8009334:	d0f9      	beq.n	800932a <__gethex+0x76>
 8009336:	f7ff ffa8 	bl	800928a <__hexdig_fun>
 800933a:	2301      	movs	r3, #1
 800933c:	fab0 f480 	clz	r4, r0
 8009340:	0964      	lsrs	r4, r4, #5
 8009342:	4635      	mov	r5, r6
 8009344:	9300      	str	r3, [sp, #0]
 8009346:	463a      	mov	r2, r7
 8009348:	4616      	mov	r6, r2
 800934a:	3201      	adds	r2, #1
 800934c:	7830      	ldrb	r0, [r6, #0]
 800934e:	f7ff ff9c 	bl	800928a <__hexdig_fun>
 8009352:	2800      	cmp	r0, #0
 8009354:	d1f8      	bne.n	8009348 <__gethex+0x94>
 8009356:	9901      	ldr	r1, [sp, #4]
 8009358:	4652      	mov	r2, sl
 800935a:	4630      	mov	r0, r6
 800935c:	f001 faf7 	bl	800a94e <strncmp>
 8009360:	b980      	cbnz	r0, 8009384 <__gethex+0xd0>
 8009362:	b94d      	cbnz	r5, 8009378 <__gethex+0xc4>
 8009364:	eb06 050a 	add.w	r5, r6, sl
 8009368:	462a      	mov	r2, r5
 800936a:	4616      	mov	r6, r2
 800936c:	3201      	adds	r2, #1
 800936e:	7830      	ldrb	r0, [r6, #0]
 8009370:	f7ff ff8b 	bl	800928a <__hexdig_fun>
 8009374:	2800      	cmp	r0, #0
 8009376:	d1f8      	bne.n	800936a <__gethex+0xb6>
 8009378:	1bad      	subs	r5, r5, r6
 800937a:	00ad      	lsls	r5, r5, #2
 800937c:	e004      	b.n	8009388 <__gethex+0xd4>
 800937e:	2400      	movs	r4, #0
 8009380:	4625      	mov	r5, r4
 8009382:	e7e0      	b.n	8009346 <__gethex+0x92>
 8009384:	2d00      	cmp	r5, #0
 8009386:	d1f7      	bne.n	8009378 <__gethex+0xc4>
 8009388:	7833      	ldrb	r3, [r6, #0]
 800938a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800938e:	2b50      	cmp	r3, #80	; 0x50
 8009390:	d13b      	bne.n	800940a <__gethex+0x156>
 8009392:	7873      	ldrb	r3, [r6, #1]
 8009394:	2b2b      	cmp	r3, #43	; 0x2b
 8009396:	d02c      	beq.n	80093f2 <__gethex+0x13e>
 8009398:	2b2d      	cmp	r3, #45	; 0x2d
 800939a:	d02e      	beq.n	80093fa <__gethex+0x146>
 800939c:	1c71      	adds	r1, r6, #1
 800939e:	f04f 0900 	mov.w	r9, #0
 80093a2:	7808      	ldrb	r0, [r1, #0]
 80093a4:	f7ff ff71 	bl	800928a <__hexdig_fun>
 80093a8:	1e43      	subs	r3, r0, #1
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	2b18      	cmp	r3, #24
 80093ae:	d82c      	bhi.n	800940a <__gethex+0x156>
 80093b0:	f1a0 0210 	sub.w	r2, r0, #16
 80093b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80093b8:	f7ff ff67 	bl	800928a <__hexdig_fun>
 80093bc:	1e43      	subs	r3, r0, #1
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	2b18      	cmp	r3, #24
 80093c2:	d91d      	bls.n	8009400 <__gethex+0x14c>
 80093c4:	f1b9 0f00 	cmp.w	r9, #0
 80093c8:	d000      	beq.n	80093cc <__gethex+0x118>
 80093ca:	4252      	negs	r2, r2
 80093cc:	4415      	add	r5, r2
 80093ce:	f8cb 1000 	str.w	r1, [fp]
 80093d2:	b1e4      	cbz	r4, 800940e <__gethex+0x15a>
 80093d4:	9b00      	ldr	r3, [sp, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	bf14      	ite	ne
 80093da:	2700      	movne	r7, #0
 80093dc:	2706      	moveq	r7, #6
 80093de:	4638      	mov	r0, r7
 80093e0:	b009      	add	sp, #36	; 0x24
 80093e2:	ecbd 8b02 	vpop	{d8}
 80093e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093ea:	463e      	mov	r6, r7
 80093ec:	4625      	mov	r5, r4
 80093ee:	2401      	movs	r4, #1
 80093f0:	e7ca      	b.n	8009388 <__gethex+0xd4>
 80093f2:	f04f 0900 	mov.w	r9, #0
 80093f6:	1cb1      	adds	r1, r6, #2
 80093f8:	e7d3      	b.n	80093a2 <__gethex+0xee>
 80093fa:	f04f 0901 	mov.w	r9, #1
 80093fe:	e7fa      	b.n	80093f6 <__gethex+0x142>
 8009400:	230a      	movs	r3, #10
 8009402:	fb03 0202 	mla	r2, r3, r2, r0
 8009406:	3a10      	subs	r2, #16
 8009408:	e7d4      	b.n	80093b4 <__gethex+0x100>
 800940a:	4631      	mov	r1, r6
 800940c:	e7df      	b.n	80093ce <__gethex+0x11a>
 800940e:	1bf3      	subs	r3, r6, r7
 8009410:	3b01      	subs	r3, #1
 8009412:	4621      	mov	r1, r4
 8009414:	2b07      	cmp	r3, #7
 8009416:	dc0b      	bgt.n	8009430 <__gethex+0x17c>
 8009418:	ee18 0a10 	vmov	r0, s16
 800941c:	f000 fadc 	bl	80099d8 <_Balloc>
 8009420:	4604      	mov	r4, r0
 8009422:	b940      	cbnz	r0, 8009436 <__gethex+0x182>
 8009424:	4b65      	ldr	r3, [pc, #404]	; (80095bc <__gethex+0x308>)
 8009426:	4602      	mov	r2, r0
 8009428:	21de      	movs	r1, #222	; 0xde
 800942a:	4865      	ldr	r0, [pc, #404]	; (80095c0 <__gethex+0x30c>)
 800942c:	f001 fac0 	bl	800a9b0 <__assert_func>
 8009430:	3101      	adds	r1, #1
 8009432:	105b      	asrs	r3, r3, #1
 8009434:	e7ee      	b.n	8009414 <__gethex+0x160>
 8009436:	f100 0914 	add.w	r9, r0, #20
 800943a:	f04f 0b00 	mov.w	fp, #0
 800943e:	f1ca 0301 	rsb	r3, sl, #1
 8009442:	f8cd 9008 	str.w	r9, [sp, #8]
 8009446:	f8cd b000 	str.w	fp, [sp]
 800944a:	9306      	str	r3, [sp, #24]
 800944c:	42b7      	cmp	r7, r6
 800944e:	d340      	bcc.n	80094d2 <__gethex+0x21e>
 8009450:	9802      	ldr	r0, [sp, #8]
 8009452:	9b00      	ldr	r3, [sp, #0]
 8009454:	f840 3b04 	str.w	r3, [r0], #4
 8009458:	eba0 0009 	sub.w	r0, r0, r9
 800945c:	1080      	asrs	r0, r0, #2
 800945e:	0146      	lsls	r6, r0, #5
 8009460:	6120      	str	r0, [r4, #16]
 8009462:	4618      	mov	r0, r3
 8009464:	f000 fbae 	bl	8009bc4 <__hi0bits>
 8009468:	1a30      	subs	r0, r6, r0
 800946a:	f8d8 6000 	ldr.w	r6, [r8]
 800946e:	42b0      	cmp	r0, r6
 8009470:	dd63      	ble.n	800953a <__gethex+0x286>
 8009472:	1b87      	subs	r7, r0, r6
 8009474:	4639      	mov	r1, r7
 8009476:	4620      	mov	r0, r4
 8009478:	f000 ff48 	bl	800a30c <__any_on>
 800947c:	4682      	mov	sl, r0
 800947e:	b1a8      	cbz	r0, 80094ac <__gethex+0x1f8>
 8009480:	1e7b      	subs	r3, r7, #1
 8009482:	1159      	asrs	r1, r3, #5
 8009484:	f003 021f 	and.w	r2, r3, #31
 8009488:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800948c:	f04f 0a01 	mov.w	sl, #1
 8009490:	fa0a f202 	lsl.w	r2, sl, r2
 8009494:	420a      	tst	r2, r1
 8009496:	d009      	beq.n	80094ac <__gethex+0x1f8>
 8009498:	4553      	cmp	r3, sl
 800949a:	dd05      	ble.n	80094a8 <__gethex+0x1f4>
 800949c:	1eb9      	subs	r1, r7, #2
 800949e:	4620      	mov	r0, r4
 80094a0:	f000 ff34 	bl	800a30c <__any_on>
 80094a4:	2800      	cmp	r0, #0
 80094a6:	d145      	bne.n	8009534 <__gethex+0x280>
 80094a8:	f04f 0a02 	mov.w	sl, #2
 80094ac:	4639      	mov	r1, r7
 80094ae:	4620      	mov	r0, r4
 80094b0:	f7ff fe99 	bl	80091e6 <rshift>
 80094b4:	443d      	add	r5, r7
 80094b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80094ba:	42ab      	cmp	r3, r5
 80094bc:	da4c      	bge.n	8009558 <__gethex+0x2a4>
 80094be:	ee18 0a10 	vmov	r0, s16
 80094c2:	4621      	mov	r1, r4
 80094c4:	f000 fac8 	bl	8009a58 <_Bfree>
 80094c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80094ca:	2300      	movs	r3, #0
 80094cc:	6013      	str	r3, [r2, #0]
 80094ce:	27a3      	movs	r7, #163	; 0xa3
 80094d0:	e785      	b.n	80093de <__gethex+0x12a>
 80094d2:	1e73      	subs	r3, r6, #1
 80094d4:	9a05      	ldr	r2, [sp, #20]
 80094d6:	9303      	str	r3, [sp, #12]
 80094d8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80094dc:	4293      	cmp	r3, r2
 80094de:	d019      	beq.n	8009514 <__gethex+0x260>
 80094e0:	f1bb 0f20 	cmp.w	fp, #32
 80094e4:	d107      	bne.n	80094f6 <__gethex+0x242>
 80094e6:	9b02      	ldr	r3, [sp, #8]
 80094e8:	9a00      	ldr	r2, [sp, #0]
 80094ea:	f843 2b04 	str.w	r2, [r3], #4
 80094ee:	9302      	str	r3, [sp, #8]
 80094f0:	2300      	movs	r3, #0
 80094f2:	9300      	str	r3, [sp, #0]
 80094f4:	469b      	mov	fp, r3
 80094f6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80094fa:	f7ff fec6 	bl	800928a <__hexdig_fun>
 80094fe:	9b00      	ldr	r3, [sp, #0]
 8009500:	f000 000f 	and.w	r0, r0, #15
 8009504:	fa00 f00b 	lsl.w	r0, r0, fp
 8009508:	4303      	orrs	r3, r0
 800950a:	9300      	str	r3, [sp, #0]
 800950c:	f10b 0b04 	add.w	fp, fp, #4
 8009510:	9b03      	ldr	r3, [sp, #12]
 8009512:	e00d      	b.n	8009530 <__gethex+0x27c>
 8009514:	9b03      	ldr	r3, [sp, #12]
 8009516:	9a06      	ldr	r2, [sp, #24]
 8009518:	4413      	add	r3, r2
 800951a:	42bb      	cmp	r3, r7
 800951c:	d3e0      	bcc.n	80094e0 <__gethex+0x22c>
 800951e:	4618      	mov	r0, r3
 8009520:	9901      	ldr	r1, [sp, #4]
 8009522:	9307      	str	r3, [sp, #28]
 8009524:	4652      	mov	r2, sl
 8009526:	f001 fa12 	bl	800a94e <strncmp>
 800952a:	9b07      	ldr	r3, [sp, #28]
 800952c:	2800      	cmp	r0, #0
 800952e:	d1d7      	bne.n	80094e0 <__gethex+0x22c>
 8009530:	461e      	mov	r6, r3
 8009532:	e78b      	b.n	800944c <__gethex+0x198>
 8009534:	f04f 0a03 	mov.w	sl, #3
 8009538:	e7b8      	b.n	80094ac <__gethex+0x1f8>
 800953a:	da0a      	bge.n	8009552 <__gethex+0x29e>
 800953c:	1a37      	subs	r7, r6, r0
 800953e:	4621      	mov	r1, r4
 8009540:	ee18 0a10 	vmov	r0, s16
 8009544:	463a      	mov	r2, r7
 8009546:	f000 fca3 	bl	8009e90 <__lshift>
 800954a:	1bed      	subs	r5, r5, r7
 800954c:	4604      	mov	r4, r0
 800954e:	f100 0914 	add.w	r9, r0, #20
 8009552:	f04f 0a00 	mov.w	sl, #0
 8009556:	e7ae      	b.n	80094b6 <__gethex+0x202>
 8009558:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800955c:	42a8      	cmp	r0, r5
 800955e:	dd72      	ble.n	8009646 <__gethex+0x392>
 8009560:	1b45      	subs	r5, r0, r5
 8009562:	42ae      	cmp	r6, r5
 8009564:	dc36      	bgt.n	80095d4 <__gethex+0x320>
 8009566:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800956a:	2b02      	cmp	r3, #2
 800956c:	d02a      	beq.n	80095c4 <__gethex+0x310>
 800956e:	2b03      	cmp	r3, #3
 8009570:	d02c      	beq.n	80095cc <__gethex+0x318>
 8009572:	2b01      	cmp	r3, #1
 8009574:	d115      	bne.n	80095a2 <__gethex+0x2ee>
 8009576:	42ae      	cmp	r6, r5
 8009578:	d113      	bne.n	80095a2 <__gethex+0x2ee>
 800957a:	2e01      	cmp	r6, #1
 800957c:	d10b      	bne.n	8009596 <__gethex+0x2e2>
 800957e:	9a04      	ldr	r2, [sp, #16]
 8009580:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009584:	6013      	str	r3, [r2, #0]
 8009586:	2301      	movs	r3, #1
 8009588:	6123      	str	r3, [r4, #16]
 800958a:	f8c9 3000 	str.w	r3, [r9]
 800958e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009590:	2762      	movs	r7, #98	; 0x62
 8009592:	601c      	str	r4, [r3, #0]
 8009594:	e723      	b.n	80093de <__gethex+0x12a>
 8009596:	1e71      	subs	r1, r6, #1
 8009598:	4620      	mov	r0, r4
 800959a:	f000 feb7 	bl	800a30c <__any_on>
 800959e:	2800      	cmp	r0, #0
 80095a0:	d1ed      	bne.n	800957e <__gethex+0x2ca>
 80095a2:	ee18 0a10 	vmov	r0, s16
 80095a6:	4621      	mov	r1, r4
 80095a8:	f000 fa56 	bl	8009a58 <_Bfree>
 80095ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80095ae:	2300      	movs	r3, #0
 80095b0:	6013      	str	r3, [r2, #0]
 80095b2:	2750      	movs	r7, #80	; 0x50
 80095b4:	e713      	b.n	80093de <__gethex+0x12a>
 80095b6:	bf00      	nop
 80095b8:	0800baac 	.word	0x0800baac
 80095bc:	0800b9cc 	.word	0x0800b9cc
 80095c0:	0800ba40 	.word	0x0800ba40
 80095c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d1eb      	bne.n	80095a2 <__gethex+0x2ee>
 80095ca:	e7d8      	b.n	800957e <__gethex+0x2ca>
 80095cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d1d5      	bne.n	800957e <__gethex+0x2ca>
 80095d2:	e7e6      	b.n	80095a2 <__gethex+0x2ee>
 80095d4:	1e6f      	subs	r7, r5, #1
 80095d6:	f1ba 0f00 	cmp.w	sl, #0
 80095da:	d131      	bne.n	8009640 <__gethex+0x38c>
 80095dc:	b127      	cbz	r7, 80095e8 <__gethex+0x334>
 80095de:	4639      	mov	r1, r7
 80095e0:	4620      	mov	r0, r4
 80095e2:	f000 fe93 	bl	800a30c <__any_on>
 80095e6:	4682      	mov	sl, r0
 80095e8:	117b      	asrs	r3, r7, #5
 80095ea:	2101      	movs	r1, #1
 80095ec:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80095f0:	f007 071f 	and.w	r7, r7, #31
 80095f4:	fa01 f707 	lsl.w	r7, r1, r7
 80095f8:	421f      	tst	r7, r3
 80095fa:	4629      	mov	r1, r5
 80095fc:	4620      	mov	r0, r4
 80095fe:	bf18      	it	ne
 8009600:	f04a 0a02 	orrne.w	sl, sl, #2
 8009604:	1b76      	subs	r6, r6, r5
 8009606:	f7ff fdee 	bl	80091e6 <rshift>
 800960a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800960e:	2702      	movs	r7, #2
 8009610:	f1ba 0f00 	cmp.w	sl, #0
 8009614:	d048      	beq.n	80096a8 <__gethex+0x3f4>
 8009616:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800961a:	2b02      	cmp	r3, #2
 800961c:	d015      	beq.n	800964a <__gethex+0x396>
 800961e:	2b03      	cmp	r3, #3
 8009620:	d017      	beq.n	8009652 <__gethex+0x39e>
 8009622:	2b01      	cmp	r3, #1
 8009624:	d109      	bne.n	800963a <__gethex+0x386>
 8009626:	f01a 0f02 	tst.w	sl, #2
 800962a:	d006      	beq.n	800963a <__gethex+0x386>
 800962c:	f8d9 0000 	ldr.w	r0, [r9]
 8009630:	ea4a 0a00 	orr.w	sl, sl, r0
 8009634:	f01a 0f01 	tst.w	sl, #1
 8009638:	d10e      	bne.n	8009658 <__gethex+0x3a4>
 800963a:	f047 0710 	orr.w	r7, r7, #16
 800963e:	e033      	b.n	80096a8 <__gethex+0x3f4>
 8009640:	f04f 0a01 	mov.w	sl, #1
 8009644:	e7d0      	b.n	80095e8 <__gethex+0x334>
 8009646:	2701      	movs	r7, #1
 8009648:	e7e2      	b.n	8009610 <__gethex+0x35c>
 800964a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800964c:	f1c3 0301 	rsb	r3, r3, #1
 8009650:	9315      	str	r3, [sp, #84]	; 0x54
 8009652:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009654:	2b00      	cmp	r3, #0
 8009656:	d0f0      	beq.n	800963a <__gethex+0x386>
 8009658:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800965c:	f104 0314 	add.w	r3, r4, #20
 8009660:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009664:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009668:	f04f 0c00 	mov.w	ip, #0
 800966c:	4618      	mov	r0, r3
 800966e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009672:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009676:	d01c      	beq.n	80096b2 <__gethex+0x3fe>
 8009678:	3201      	adds	r2, #1
 800967a:	6002      	str	r2, [r0, #0]
 800967c:	2f02      	cmp	r7, #2
 800967e:	f104 0314 	add.w	r3, r4, #20
 8009682:	d13f      	bne.n	8009704 <__gethex+0x450>
 8009684:	f8d8 2000 	ldr.w	r2, [r8]
 8009688:	3a01      	subs	r2, #1
 800968a:	42b2      	cmp	r2, r6
 800968c:	d10a      	bne.n	80096a4 <__gethex+0x3f0>
 800968e:	1171      	asrs	r1, r6, #5
 8009690:	2201      	movs	r2, #1
 8009692:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009696:	f006 061f 	and.w	r6, r6, #31
 800969a:	fa02 f606 	lsl.w	r6, r2, r6
 800969e:	421e      	tst	r6, r3
 80096a0:	bf18      	it	ne
 80096a2:	4617      	movne	r7, r2
 80096a4:	f047 0720 	orr.w	r7, r7, #32
 80096a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80096aa:	601c      	str	r4, [r3, #0]
 80096ac:	9b04      	ldr	r3, [sp, #16]
 80096ae:	601d      	str	r5, [r3, #0]
 80096b0:	e695      	b.n	80093de <__gethex+0x12a>
 80096b2:	4299      	cmp	r1, r3
 80096b4:	f843 cc04 	str.w	ip, [r3, #-4]
 80096b8:	d8d8      	bhi.n	800966c <__gethex+0x3b8>
 80096ba:	68a3      	ldr	r3, [r4, #8]
 80096bc:	459b      	cmp	fp, r3
 80096be:	db19      	blt.n	80096f4 <__gethex+0x440>
 80096c0:	6861      	ldr	r1, [r4, #4]
 80096c2:	ee18 0a10 	vmov	r0, s16
 80096c6:	3101      	adds	r1, #1
 80096c8:	f000 f986 	bl	80099d8 <_Balloc>
 80096cc:	4681      	mov	r9, r0
 80096ce:	b918      	cbnz	r0, 80096d8 <__gethex+0x424>
 80096d0:	4b1a      	ldr	r3, [pc, #104]	; (800973c <__gethex+0x488>)
 80096d2:	4602      	mov	r2, r0
 80096d4:	2184      	movs	r1, #132	; 0x84
 80096d6:	e6a8      	b.n	800942a <__gethex+0x176>
 80096d8:	6922      	ldr	r2, [r4, #16]
 80096da:	3202      	adds	r2, #2
 80096dc:	f104 010c 	add.w	r1, r4, #12
 80096e0:	0092      	lsls	r2, r2, #2
 80096e2:	300c      	adds	r0, #12
 80096e4:	f7fc fcfe 	bl	80060e4 <memcpy>
 80096e8:	4621      	mov	r1, r4
 80096ea:	ee18 0a10 	vmov	r0, s16
 80096ee:	f000 f9b3 	bl	8009a58 <_Bfree>
 80096f2:	464c      	mov	r4, r9
 80096f4:	6923      	ldr	r3, [r4, #16]
 80096f6:	1c5a      	adds	r2, r3, #1
 80096f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80096fc:	6122      	str	r2, [r4, #16]
 80096fe:	2201      	movs	r2, #1
 8009700:	615a      	str	r2, [r3, #20]
 8009702:	e7bb      	b.n	800967c <__gethex+0x3c8>
 8009704:	6922      	ldr	r2, [r4, #16]
 8009706:	455a      	cmp	r2, fp
 8009708:	dd0b      	ble.n	8009722 <__gethex+0x46e>
 800970a:	2101      	movs	r1, #1
 800970c:	4620      	mov	r0, r4
 800970e:	f7ff fd6a 	bl	80091e6 <rshift>
 8009712:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009716:	3501      	adds	r5, #1
 8009718:	42ab      	cmp	r3, r5
 800971a:	f6ff aed0 	blt.w	80094be <__gethex+0x20a>
 800971e:	2701      	movs	r7, #1
 8009720:	e7c0      	b.n	80096a4 <__gethex+0x3f0>
 8009722:	f016 061f 	ands.w	r6, r6, #31
 8009726:	d0fa      	beq.n	800971e <__gethex+0x46a>
 8009728:	449a      	add	sl, r3
 800972a:	f1c6 0620 	rsb	r6, r6, #32
 800972e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009732:	f000 fa47 	bl	8009bc4 <__hi0bits>
 8009736:	42b0      	cmp	r0, r6
 8009738:	dbe7      	blt.n	800970a <__gethex+0x456>
 800973a:	e7f0      	b.n	800971e <__gethex+0x46a>
 800973c:	0800b9cc 	.word	0x0800b9cc

08009740 <L_shift>:
 8009740:	f1c2 0208 	rsb	r2, r2, #8
 8009744:	0092      	lsls	r2, r2, #2
 8009746:	b570      	push	{r4, r5, r6, lr}
 8009748:	f1c2 0620 	rsb	r6, r2, #32
 800974c:	6843      	ldr	r3, [r0, #4]
 800974e:	6804      	ldr	r4, [r0, #0]
 8009750:	fa03 f506 	lsl.w	r5, r3, r6
 8009754:	432c      	orrs	r4, r5
 8009756:	40d3      	lsrs	r3, r2
 8009758:	6004      	str	r4, [r0, #0]
 800975a:	f840 3f04 	str.w	r3, [r0, #4]!
 800975e:	4288      	cmp	r0, r1
 8009760:	d3f4      	bcc.n	800974c <L_shift+0xc>
 8009762:	bd70      	pop	{r4, r5, r6, pc}

08009764 <__match>:
 8009764:	b530      	push	{r4, r5, lr}
 8009766:	6803      	ldr	r3, [r0, #0]
 8009768:	3301      	adds	r3, #1
 800976a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800976e:	b914      	cbnz	r4, 8009776 <__match+0x12>
 8009770:	6003      	str	r3, [r0, #0]
 8009772:	2001      	movs	r0, #1
 8009774:	bd30      	pop	{r4, r5, pc}
 8009776:	f813 2b01 	ldrb.w	r2, [r3], #1
 800977a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800977e:	2d19      	cmp	r5, #25
 8009780:	bf98      	it	ls
 8009782:	3220      	addls	r2, #32
 8009784:	42a2      	cmp	r2, r4
 8009786:	d0f0      	beq.n	800976a <__match+0x6>
 8009788:	2000      	movs	r0, #0
 800978a:	e7f3      	b.n	8009774 <__match+0x10>

0800978c <__hexnan>:
 800978c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009790:	680b      	ldr	r3, [r1, #0]
 8009792:	6801      	ldr	r1, [r0, #0]
 8009794:	115e      	asrs	r6, r3, #5
 8009796:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800979a:	f013 031f 	ands.w	r3, r3, #31
 800979e:	b087      	sub	sp, #28
 80097a0:	bf18      	it	ne
 80097a2:	3604      	addne	r6, #4
 80097a4:	2500      	movs	r5, #0
 80097a6:	1f37      	subs	r7, r6, #4
 80097a8:	4682      	mov	sl, r0
 80097aa:	4690      	mov	r8, r2
 80097ac:	9301      	str	r3, [sp, #4]
 80097ae:	f846 5c04 	str.w	r5, [r6, #-4]
 80097b2:	46b9      	mov	r9, r7
 80097b4:	463c      	mov	r4, r7
 80097b6:	9502      	str	r5, [sp, #8]
 80097b8:	46ab      	mov	fp, r5
 80097ba:	784a      	ldrb	r2, [r1, #1]
 80097bc:	1c4b      	adds	r3, r1, #1
 80097be:	9303      	str	r3, [sp, #12]
 80097c0:	b342      	cbz	r2, 8009814 <__hexnan+0x88>
 80097c2:	4610      	mov	r0, r2
 80097c4:	9105      	str	r1, [sp, #20]
 80097c6:	9204      	str	r2, [sp, #16]
 80097c8:	f7ff fd5f 	bl	800928a <__hexdig_fun>
 80097cc:	2800      	cmp	r0, #0
 80097ce:	d14f      	bne.n	8009870 <__hexnan+0xe4>
 80097d0:	9a04      	ldr	r2, [sp, #16]
 80097d2:	9905      	ldr	r1, [sp, #20]
 80097d4:	2a20      	cmp	r2, #32
 80097d6:	d818      	bhi.n	800980a <__hexnan+0x7e>
 80097d8:	9b02      	ldr	r3, [sp, #8]
 80097da:	459b      	cmp	fp, r3
 80097dc:	dd13      	ble.n	8009806 <__hexnan+0x7a>
 80097de:	454c      	cmp	r4, r9
 80097e0:	d206      	bcs.n	80097f0 <__hexnan+0x64>
 80097e2:	2d07      	cmp	r5, #7
 80097e4:	dc04      	bgt.n	80097f0 <__hexnan+0x64>
 80097e6:	462a      	mov	r2, r5
 80097e8:	4649      	mov	r1, r9
 80097ea:	4620      	mov	r0, r4
 80097ec:	f7ff ffa8 	bl	8009740 <L_shift>
 80097f0:	4544      	cmp	r4, r8
 80097f2:	d950      	bls.n	8009896 <__hexnan+0x10a>
 80097f4:	2300      	movs	r3, #0
 80097f6:	f1a4 0904 	sub.w	r9, r4, #4
 80097fa:	f844 3c04 	str.w	r3, [r4, #-4]
 80097fe:	f8cd b008 	str.w	fp, [sp, #8]
 8009802:	464c      	mov	r4, r9
 8009804:	461d      	mov	r5, r3
 8009806:	9903      	ldr	r1, [sp, #12]
 8009808:	e7d7      	b.n	80097ba <__hexnan+0x2e>
 800980a:	2a29      	cmp	r2, #41	; 0x29
 800980c:	d156      	bne.n	80098bc <__hexnan+0x130>
 800980e:	3102      	adds	r1, #2
 8009810:	f8ca 1000 	str.w	r1, [sl]
 8009814:	f1bb 0f00 	cmp.w	fp, #0
 8009818:	d050      	beq.n	80098bc <__hexnan+0x130>
 800981a:	454c      	cmp	r4, r9
 800981c:	d206      	bcs.n	800982c <__hexnan+0xa0>
 800981e:	2d07      	cmp	r5, #7
 8009820:	dc04      	bgt.n	800982c <__hexnan+0xa0>
 8009822:	462a      	mov	r2, r5
 8009824:	4649      	mov	r1, r9
 8009826:	4620      	mov	r0, r4
 8009828:	f7ff ff8a 	bl	8009740 <L_shift>
 800982c:	4544      	cmp	r4, r8
 800982e:	d934      	bls.n	800989a <__hexnan+0x10e>
 8009830:	f1a8 0204 	sub.w	r2, r8, #4
 8009834:	4623      	mov	r3, r4
 8009836:	f853 1b04 	ldr.w	r1, [r3], #4
 800983a:	f842 1f04 	str.w	r1, [r2, #4]!
 800983e:	429f      	cmp	r7, r3
 8009840:	d2f9      	bcs.n	8009836 <__hexnan+0xaa>
 8009842:	1b3b      	subs	r3, r7, r4
 8009844:	f023 0303 	bic.w	r3, r3, #3
 8009848:	3304      	adds	r3, #4
 800984a:	3401      	adds	r4, #1
 800984c:	3e03      	subs	r6, #3
 800984e:	42b4      	cmp	r4, r6
 8009850:	bf88      	it	hi
 8009852:	2304      	movhi	r3, #4
 8009854:	4443      	add	r3, r8
 8009856:	2200      	movs	r2, #0
 8009858:	f843 2b04 	str.w	r2, [r3], #4
 800985c:	429f      	cmp	r7, r3
 800985e:	d2fb      	bcs.n	8009858 <__hexnan+0xcc>
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	b91b      	cbnz	r3, 800986c <__hexnan+0xe0>
 8009864:	4547      	cmp	r7, r8
 8009866:	d127      	bne.n	80098b8 <__hexnan+0x12c>
 8009868:	2301      	movs	r3, #1
 800986a:	603b      	str	r3, [r7, #0]
 800986c:	2005      	movs	r0, #5
 800986e:	e026      	b.n	80098be <__hexnan+0x132>
 8009870:	3501      	adds	r5, #1
 8009872:	2d08      	cmp	r5, #8
 8009874:	f10b 0b01 	add.w	fp, fp, #1
 8009878:	dd06      	ble.n	8009888 <__hexnan+0xfc>
 800987a:	4544      	cmp	r4, r8
 800987c:	d9c3      	bls.n	8009806 <__hexnan+0x7a>
 800987e:	2300      	movs	r3, #0
 8009880:	f844 3c04 	str.w	r3, [r4, #-4]
 8009884:	2501      	movs	r5, #1
 8009886:	3c04      	subs	r4, #4
 8009888:	6822      	ldr	r2, [r4, #0]
 800988a:	f000 000f 	and.w	r0, r0, #15
 800988e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009892:	6022      	str	r2, [r4, #0]
 8009894:	e7b7      	b.n	8009806 <__hexnan+0x7a>
 8009896:	2508      	movs	r5, #8
 8009898:	e7b5      	b.n	8009806 <__hexnan+0x7a>
 800989a:	9b01      	ldr	r3, [sp, #4]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d0df      	beq.n	8009860 <__hexnan+0xd4>
 80098a0:	f04f 32ff 	mov.w	r2, #4294967295
 80098a4:	f1c3 0320 	rsb	r3, r3, #32
 80098a8:	fa22 f303 	lsr.w	r3, r2, r3
 80098ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80098b0:	401a      	ands	r2, r3
 80098b2:	f846 2c04 	str.w	r2, [r6, #-4]
 80098b6:	e7d3      	b.n	8009860 <__hexnan+0xd4>
 80098b8:	3f04      	subs	r7, #4
 80098ba:	e7d1      	b.n	8009860 <__hexnan+0xd4>
 80098bc:	2004      	movs	r0, #4
 80098be:	b007      	add	sp, #28
 80098c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080098c4 <_localeconv_r>:
 80098c4:	4800      	ldr	r0, [pc, #0]	; (80098c8 <_localeconv_r+0x4>)
 80098c6:	4770      	bx	lr
 80098c8:	200001c4 	.word	0x200001c4

080098cc <__retarget_lock_init_recursive>:
 80098cc:	4770      	bx	lr

080098ce <__retarget_lock_acquire_recursive>:
 80098ce:	4770      	bx	lr

080098d0 <__retarget_lock_release_recursive>:
 80098d0:	4770      	bx	lr

080098d2 <__swhatbuf_r>:
 80098d2:	b570      	push	{r4, r5, r6, lr}
 80098d4:	460e      	mov	r6, r1
 80098d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098da:	2900      	cmp	r1, #0
 80098dc:	b096      	sub	sp, #88	; 0x58
 80098de:	4614      	mov	r4, r2
 80098e0:	461d      	mov	r5, r3
 80098e2:	da07      	bge.n	80098f4 <__swhatbuf_r+0x22>
 80098e4:	2300      	movs	r3, #0
 80098e6:	602b      	str	r3, [r5, #0]
 80098e8:	89b3      	ldrh	r3, [r6, #12]
 80098ea:	061a      	lsls	r2, r3, #24
 80098ec:	d410      	bmi.n	8009910 <__swhatbuf_r+0x3e>
 80098ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098f2:	e00e      	b.n	8009912 <__swhatbuf_r+0x40>
 80098f4:	466a      	mov	r2, sp
 80098f6:	f001 f89b 	bl	800aa30 <_fstat_r>
 80098fa:	2800      	cmp	r0, #0
 80098fc:	dbf2      	blt.n	80098e4 <__swhatbuf_r+0x12>
 80098fe:	9a01      	ldr	r2, [sp, #4]
 8009900:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009904:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009908:	425a      	negs	r2, r3
 800990a:	415a      	adcs	r2, r3
 800990c:	602a      	str	r2, [r5, #0]
 800990e:	e7ee      	b.n	80098ee <__swhatbuf_r+0x1c>
 8009910:	2340      	movs	r3, #64	; 0x40
 8009912:	2000      	movs	r0, #0
 8009914:	6023      	str	r3, [r4, #0]
 8009916:	b016      	add	sp, #88	; 0x58
 8009918:	bd70      	pop	{r4, r5, r6, pc}
	...

0800991c <__smakebuf_r>:
 800991c:	898b      	ldrh	r3, [r1, #12]
 800991e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009920:	079d      	lsls	r5, r3, #30
 8009922:	4606      	mov	r6, r0
 8009924:	460c      	mov	r4, r1
 8009926:	d507      	bpl.n	8009938 <__smakebuf_r+0x1c>
 8009928:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800992c:	6023      	str	r3, [r4, #0]
 800992e:	6123      	str	r3, [r4, #16]
 8009930:	2301      	movs	r3, #1
 8009932:	6163      	str	r3, [r4, #20]
 8009934:	b002      	add	sp, #8
 8009936:	bd70      	pop	{r4, r5, r6, pc}
 8009938:	ab01      	add	r3, sp, #4
 800993a:	466a      	mov	r2, sp
 800993c:	f7ff ffc9 	bl	80098d2 <__swhatbuf_r>
 8009940:	9900      	ldr	r1, [sp, #0]
 8009942:	4605      	mov	r5, r0
 8009944:	4630      	mov	r0, r6
 8009946:	f7fc fc43 	bl	80061d0 <_malloc_r>
 800994a:	b948      	cbnz	r0, 8009960 <__smakebuf_r+0x44>
 800994c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009950:	059a      	lsls	r2, r3, #22
 8009952:	d4ef      	bmi.n	8009934 <__smakebuf_r+0x18>
 8009954:	f023 0303 	bic.w	r3, r3, #3
 8009958:	f043 0302 	orr.w	r3, r3, #2
 800995c:	81a3      	strh	r3, [r4, #12]
 800995e:	e7e3      	b.n	8009928 <__smakebuf_r+0xc>
 8009960:	4b0d      	ldr	r3, [pc, #52]	; (8009998 <__smakebuf_r+0x7c>)
 8009962:	62b3      	str	r3, [r6, #40]	; 0x28
 8009964:	89a3      	ldrh	r3, [r4, #12]
 8009966:	6020      	str	r0, [r4, #0]
 8009968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800996c:	81a3      	strh	r3, [r4, #12]
 800996e:	9b00      	ldr	r3, [sp, #0]
 8009970:	6163      	str	r3, [r4, #20]
 8009972:	9b01      	ldr	r3, [sp, #4]
 8009974:	6120      	str	r0, [r4, #16]
 8009976:	b15b      	cbz	r3, 8009990 <__smakebuf_r+0x74>
 8009978:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800997c:	4630      	mov	r0, r6
 800997e:	f001 f869 	bl	800aa54 <_isatty_r>
 8009982:	b128      	cbz	r0, 8009990 <__smakebuf_r+0x74>
 8009984:	89a3      	ldrh	r3, [r4, #12]
 8009986:	f023 0303 	bic.w	r3, r3, #3
 800998a:	f043 0301 	orr.w	r3, r3, #1
 800998e:	81a3      	strh	r3, [r4, #12]
 8009990:	89a0      	ldrh	r0, [r4, #12]
 8009992:	4305      	orrs	r5, r0
 8009994:	81a5      	strh	r5, [r4, #12]
 8009996:	e7cd      	b.n	8009934 <__smakebuf_r+0x18>
 8009998:	08009045 	.word	0x08009045

0800999c <__ascii_mbtowc>:
 800999c:	b082      	sub	sp, #8
 800999e:	b901      	cbnz	r1, 80099a2 <__ascii_mbtowc+0x6>
 80099a0:	a901      	add	r1, sp, #4
 80099a2:	b142      	cbz	r2, 80099b6 <__ascii_mbtowc+0x1a>
 80099a4:	b14b      	cbz	r3, 80099ba <__ascii_mbtowc+0x1e>
 80099a6:	7813      	ldrb	r3, [r2, #0]
 80099a8:	600b      	str	r3, [r1, #0]
 80099aa:	7812      	ldrb	r2, [r2, #0]
 80099ac:	1e10      	subs	r0, r2, #0
 80099ae:	bf18      	it	ne
 80099b0:	2001      	movne	r0, #1
 80099b2:	b002      	add	sp, #8
 80099b4:	4770      	bx	lr
 80099b6:	4610      	mov	r0, r2
 80099b8:	e7fb      	b.n	80099b2 <__ascii_mbtowc+0x16>
 80099ba:	f06f 0001 	mvn.w	r0, #1
 80099be:	e7f8      	b.n	80099b2 <__ascii_mbtowc+0x16>

080099c0 <__malloc_lock>:
 80099c0:	4801      	ldr	r0, [pc, #4]	; (80099c8 <__malloc_lock+0x8>)
 80099c2:	f7ff bf84 	b.w	80098ce <__retarget_lock_acquire_recursive>
 80099c6:	bf00      	nop
 80099c8:	20001cbe 	.word	0x20001cbe

080099cc <__malloc_unlock>:
 80099cc:	4801      	ldr	r0, [pc, #4]	; (80099d4 <__malloc_unlock+0x8>)
 80099ce:	f7ff bf7f 	b.w	80098d0 <__retarget_lock_release_recursive>
 80099d2:	bf00      	nop
 80099d4:	20001cbe 	.word	0x20001cbe

080099d8 <_Balloc>:
 80099d8:	b570      	push	{r4, r5, r6, lr}
 80099da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80099dc:	4604      	mov	r4, r0
 80099de:	460d      	mov	r5, r1
 80099e0:	b976      	cbnz	r6, 8009a00 <_Balloc+0x28>
 80099e2:	2010      	movs	r0, #16
 80099e4:	f7fc fb76 	bl	80060d4 <malloc>
 80099e8:	4602      	mov	r2, r0
 80099ea:	6260      	str	r0, [r4, #36]	; 0x24
 80099ec:	b920      	cbnz	r0, 80099f8 <_Balloc+0x20>
 80099ee:	4b18      	ldr	r3, [pc, #96]	; (8009a50 <_Balloc+0x78>)
 80099f0:	4818      	ldr	r0, [pc, #96]	; (8009a54 <_Balloc+0x7c>)
 80099f2:	2166      	movs	r1, #102	; 0x66
 80099f4:	f000 ffdc 	bl	800a9b0 <__assert_func>
 80099f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099fc:	6006      	str	r6, [r0, #0]
 80099fe:	60c6      	str	r6, [r0, #12]
 8009a00:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009a02:	68f3      	ldr	r3, [r6, #12]
 8009a04:	b183      	cbz	r3, 8009a28 <_Balloc+0x50>
 8009a06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a08:	68db      	ldr	r3, [r3, #12]
 8009a0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009a0e:	b9b8      	cbnz	r0, 8009a40 <_Balloc+0x68>
 8009a10:	2101      	movs	r1, #1
 8009a12:	fa01 f605 	lsl.w	r6, r1, r5
 8009a16:	1d72      	adds	r2, r6, #5
 8009a18:	0092      	lsls	r2, r2, #2
 8009a1a:	4620      	mov	r0, r4
 8009a1c:	f7fc fb78 	bl	8006110 <_calloc_r>
 8009a20:	b160      	cbz	r0, 8009a3c <_Balloc+0x64>
 8009a22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a26:	e00e      	b.n	8009a46 <_Balloc+0x6e>
 8009a28:	2221      	movs	r2, #33	; 0x21
 8009a2a:	2104      	movs	r1, #4
 8009a2c:	4620      	mov	r0, r4
 8009a2e:	f7fc fb6f 	bl	8006110 <_calloc_r>
 8009a32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a34:	60f0      	str	r0, [r6, #12]
 8009a36:	68db      	ldr	r3, [r3, #12]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d1e4      	bne.n	8009a06 <_Balloc+0x2e>
 8009a3c:	2000      	movs	r0, #0
 8009a3e:	bd70      	pop	{r4, r5, r6, pc}
 8009a40:	6802      	ldr	r2, [r0, #0]
 8009a42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a46:	2300      	movs	r3, #0
 8009a48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a4c:	e7f7      	b.n	8009a3e <_Balloc+0x66>
 8009a4e:	bf00      	nop
 8009a50:	0800b956 	.word	0x0800b956
 8009a54:	0800bac0 	.word	0x0800bac0

08009a58 <_Bfree>:
 8009a58:	b570      	push	{r4, r5, r6, lr}
 8009a5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009a5c:	4605      	mov	r5, r0
 8009a5e:	460c      	mov	r4, r1
 8009a60:	b976      	cbnz	r6, 8009a80 <_Bfree+0x28>
 8009a62:	2010      	movs	r0, #16
 8009a64:	f7fc fb36 	bl	80060d4 <malloc>
 8009a68:	4602      	mov	r2, r0
 8009a6a:	6268      	str	r0, [r5, #36]	; 0x24
 8009a6c:	b920      	cbnz	r0, 8009a78 <_Bfree+0x20>
 8009a6e:	4b09      	ldr	r3, [pc, #36]	; (8009a94 <_Bfree+0x3c>)
 8009a70:	4809      	ldr	r0, [pc, #36]	; (8009a98 <_Bfree+0x40>)
 8009a72:	218a      	movs	r1, #138	; 0x8a
 8009a74:	f000 ff9c 	bl	800a9b0 <__assert_func>
 8009a78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a7c:	6006      	str	r6, [r0, #0]
 8009a7e:	60c6      	str	r6, [r0, #12]
 8009a80:	b13c      	cbz	r4, 8009a92 <_Bfree+0x3a>
 8009a82:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009a84:	6862      	ldr	r2, [r4, #4]
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a8c:	6021      	str	r1, [r4, #0]
 8009a8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009a92:	bd70      	pop	{r4, r5, r6, pc}
 8009a94:	0800b956 	.word	0x0800b956
 8009a98:	0800bac0 	.word	0x0800bac0

08009a9c <__multadd>:
 8009a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aa0:	690e      	ldr	r6, [r1, #16]
 8009aa2:	4607      	mov	r7, r0
 8009aa4:	4698      	mov	r8, r3
 8009aa6:	460c      	mov	r4, r1
 8009aa8:	f101 0014 	add.w	r0, r1, #20
 8009aac:	2300      	movs	r3, #0
 8009aae:	6805      	ldr	r5, [r0, #0]
 8009ab0:	b2a9      	uxth	r1, r5
 8009ab2:	fb02 8101 	mla	r1, r2, r1, r8
 8009ab6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009aba:	0c2d      	lsrs	r5, r5, #16
 8009abc:	fb02 c505 	mla	r5, r2, r5, ip
 8009ac0:	b289      	uxth	r1, r1
 8009ac2:	3301      	adds	r3, #1
 8009ac4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009ac8:	429e      	cmp	r6, r3
 8009aca:	f840 1b04 	str.w	r1, [r0], #4
 8009ace:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009ad2:	dcec      	bgt.n	8009aae <__multadd+0x12>
 8009ad4:	f1b8 0f00 	cmp.w	r8, #0
 8009ad8:	d022      	beq.n	8009b20 <__multadd+0x84>
 8009ada:	68a3      	ldr	r3, [r4, #8]
 8009adc:	42b3      	cmp	r3, r6
 8009ade:	dc19      	bgt.n	8009b14 <__multadd+0x78>
 8009ae0:	6861      	ldr	r1, [r4, #4]
 8009ae2:	4638      	mov	r0, r7
 8009ae4:	3101      	adds	r1, #1
 8009ae6:	f7ff ff77 	bl	80099d8 <_Balloc>
 8009aea:	4605      	mov	r5, r0
 8009aec:	b928      	cbnz	r0, 8009afa <__multadd+0x5e>
 8009aee:	4602      	mov	r2, r0
 8009af0:	4b0d      	ldr	r3, [pc, #52]	; (8009b28 <__multadd+0x8c>)
 8009af2:	480e      	ldr	r0, [pc, #56]	; (8009b2c <__multadd+0x90>)
 8009af4:	21b5      	movs	r1, #181	; 0xb5
 8009af6:	f000 ff5b 	bl	800a9b0 <__assert_func>
 8009afa:	6922      	ldr	r2, [r4, #16]
 8009afc:	3202      	adds	r2, #2
 8009afe:	f104 010c 	add.w	r1, r4, #12
 8009b02:	0092      	lsls	r2, r2, #2
 8009b04:	300c      	adds	r0, #12
 8009b06:	f7fc faed 	bl	80060e4 <memcpy>
 8009b0a:	4621      	mov	r1, r4
 8009b0c:	4638      	mov	r0, r7
 8009b0e:	f7ff ffa3 	bl	8009a58 <_Bfree>
 8009b12:	462c      	mov	r4, r5
 8009b14:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009b18:	3601      	adds	r6, #1
 8009b1a:	f8c3 8014 	str.w	r8, [r3, #20]
 8009b1e:	6126      	str	r6, [r4, #16]
 8009b20:	4620      	mov	r0, r4
 8009b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b26:	bf00      	nop
 8009b28:	0800b9cc 	.word	0x0800b9cc
 8009b2c:	0800bac0 	.word	0x0800bac0

08009b30 <__s2b>:
 8009b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b34:	460c      	mov	r4, r1
 8009b36:	4615      	mov	r5, r2
 8009b38:	461f      	mov	r7, r3
 8009b3a:	2209      	movs	r2, #9
 8009b3c:	3308      	adds	r3, #8
 8009b3e:	4606      	mov	r6, r0
 8009b40:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b44:	2100      	movs	r1, #0
 8009b46:	2201      	movs	r2, #1
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	db09      	blt.n	8009b60 <__s2b+0x30>
 8009b4c:	4630      	mov	r0, r6
 8009b4e:	f7ff ff43 	bl	80099d8 <_Balloc>
 8009b52:	b940      	cbnz	r0, 8009b66 <__s2b+0x36>
 8009b54:	4602      	mov	r2, r0
 8009b56:	4b19      	ldr	r3, [pc, #100]	; (8009bbc <__s2b+0x8c>)
 8009b58:	4819      	ldr	r0, [pc, #100]	; (8009bc0 <__s2b+0x90>)
 8009b5a:	21ce      	movs	r1, #206	; 0xce
 8009b5c:	f000 ff28 	bl	800a9b0 <__assert_func>
 8009b60:	0052      	lsls	r2, r2, #1
 8009b62:	3101      	adds	r1, #1
 8009b64:	e7f0      	b.n	8009b48 <__s2b+0x18>
 8009b66:	9b08      	ldr	r3, [sp, #32]
 8009b68:	6143      	str	r3, [r0, #20]
 8009b6a:	2d09      	cmp	r5, #9
 8009b6c:	f04f 0301 	mov.w	r3, #1
 8009b70:	6103      	str	r3, [r0, #16]
 8009b72:	dd16      	ble.n	8009ba2 <__s2b+0x72>
 8009b74:	f104 0909 	add.w	r9, r4, #9
 8009b78:	46c8      	mov	r8, r9
 8009b7a:	442c      	add	r4, r5
 8009b7c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009b80:	4601      	mov	r1, r0
 8009b82:	3b30      	subs	r3, #48	; 0x30
 8009b84:	220a      	movs	r2, #10
 8009b86:	4630      	mov	r0, r6
 8009b88:	f7ff ff88 	bl	8009a9c <__multadd>
 8009b8c:	45a0      	cmp	r8, r4
 8009b8e:	d1f5      	bne.n	8009b7c <__s2b+0x4c>
 8009b90:	f1a5 0408 	sub.w	r4, r5, #8
 8009b94:	444c      	add	r4, r9
 8009b96:	1b2d      	subs	r5, r5, r4
 8009b98:	1963      	adds	r3, r4, r5
 8009b9a:	42bb      	cmp	r3, r7
 8009b9c:	db04      	blt.n	8009ba8 <__s2b+0x78>
 8009b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ba2:	340a      	adds	r4, #10
 8009ba4:	2509      	movs	r5, #9
 8009ba6:	e7f6      	b.n	8009b96 <__s2b+0x66>
 8009ba8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009bac:	4601      	mov	r1, r0
 8009bae:	3b30      	subs	r3, #48	; 0x30
 8009bb0:	220a      	movs	r2, #10
 8009bb2:	4630      	mov	r0, r6
 8009bb4:	f7ff ff72 	bl	8009a9c <__multadd>
 8009bb8:	e7ee      	b.n	8009b98 <__s2b+0x68>
 8009bba:	bf00      	nop
 8009bbc:	0800b9cc 	.word	0x0800b9cc
 8009bc0:	0800bac0 	.word	0x0800bac0

08009bc4 <__hi0bits>:
 8009bc4:	0c03      	lsrs	r3, r0, #16
 8009bc6:	041b      	lsls	r3, r3, #16
 8009bc8:	b9d3      	cbnz	r3, 8009c00 <__hi0bits+0x3c>
 8009bca:	0400      	lsls	r0, r0, #16
 8009bcc:	2310      	movs	r3, #16
 8009bce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009bd2:	bf04      	itt	eq
 8009bd4:	0200      	lsleq	r0, r0, #8
 8009bd6:	3308      	addeq	r3, #8
 8009bd8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009bdc:	bf04      	itt	eq
 8009bde:	0100      	lsleq	r0, r0, #4
 8009be0:	3304      	addeq	r3, #4
 8009be2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009be6:	bf04      	itt	eq
 8009be8:	0080      	lsleq	r0, r0, #2
 8009bea:	3302      	addeq	r3, #2
 8009bec:	2800      	cmp	r0, #0
 8009bee:	db05      	blt.n	8009bfc <__hi0bits+0x38>
 8009bf0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009bf4:	f103 0301 	add.w	r3, r3, #1
 8009bf8:	bf08      	it	eq
 8009bfa:	2320      	moveq	r3, #32
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	4770      	bx	lr
 8009c00:	2300      	movs	r3, #0
 8009c02:	e7e4      	b.n	8009bce <__hi0bits+0xa>

08009c04 <__lo0bits>:
 8009c04:	6803      	ldr	r3, [r0, #0]
 8009c06:	f013 0207 	ands.w	r2, r3, #7
 8009c0a:	4601      	mov	r1, r0
 8009c0c:	d00b      	beq.n	8009c26 <__lo0bits+0x22>
 8009c0e:	07da      	lsls	r2, r3, #31
 8009c10:	d424      	bmi.n	8009c5c <__lo0bits+0x58>
 8009c12:	0798      	lsls	r0, r3, #30
 8009c14:	bf49      	itett	mi
 8009c16:	085b      	lsrmi	r3, r3, #1
 8009c18:	089b      	lsrpl	r3, r3, #2
 8009c1a:	2001      	movmi	r0, #1
 8009c1c:	600b      	strmi	r3, [r1, #0]
 8009c1e:	bf5c      	itt	pl
 8009c20:	600b      	strpl	r3, [r1, #0]
 8009c22:	2002      	movpl	r0, #2
 8009c24:	4770      	bx	lr
 8009c26:	b298      	uxth	r0, r3
 8009c28:	b9b0      	cbnz	r0, 8009c58 <__lo0bits+0x54>
 8009c2a:	0c1b      	lsrs	r3, r3, #16
 8009c2c:	2010      	movs	r0, #16
 8009c2e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009c32:	bf04      	itt	eq
 8009c34:	0a1b      	lsreq	r3, r3, #8
 8009c36:	3008      	addeq	r0, #8
 8009c38:	071a      	lsls	r2, r3, #28
 8009c3a:	bf04      	itt	eq
 8009c3c:	091b      	lsreq	r3, r3, #4
 8009c3e:	3004      	addeq	r0, #4
 8009c40:	079a      	lsls	r2, r3, #30
 8009c42:	bf04      	itt	eq
 8009c44:	089b      	lsreq	r3, r3, #2
 8009c46:	3002      	addeq	r0, #2
 8009c48:	07da      	lsls	r2, r3, #31
 8009c4a:	d403      	bmi.n	8009c54 <__lo0bits+0x50>
 8009c4c:	085b      	lsrs	r3, r3, #1
 8009c4e:	f100 0001 	add.w	r0, r0, #1
 8009c52:	d005      	beq.n	8009c60 <__lo0bits+0x5c>
 8009c54:	600b      	str	r3, [r1, #0]
 8009c56:	4770      	bx	lr
 8009c58:	4610      	mov	r0, r2
 8009c5a:	e7e8      	b.n	8009c2e <__lo0bits+0x2a>
 8009c5c:	2000      	movs	r0, #0
 8009c5e:	4770      	bx	lr
 8009c60:	2020      	movs	r0, #32
 8009c62:	4770      	bx	lr

08009c64 <__i2b>:
 8009c64:	b510      	push	{r4, lr}
 8009c66:	460c      	mov	r4, r1
 8009c68:	2101      	movs	r1, #1
 8009c6a:	f7ff feb5 	bl	80099d8 <_Balloc>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	b928      	cbnz	r0, 8009c7e <__i2b+0x1a>
 8009c72:	4b05      	ldr	r3, [pc, #20]	; (8009c88 <__i2b+0x24>)
 8009c74:	4805      	ldr	r0, [pc, #20]	; (8009c8c <__i2b+0x28>)
 8009c76:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009c7a:	f000 fe99 	bl	800a9b0 <__assert_func>
 8009c7e:	2301      	movs	r3, #1
 8009c80:	6144      	str	r4, [r0, #20]
 8009c82:	6103      	str	r3, [r0, #16]
 8009c84:	bd10      	pop	{r4, pc}
 8009c86:	bf00      	nop
 8009c88:	0800b9cc 	.word	0x0800b9cc
 8009c8c:	0800bac0 	.word	0x0800bac0

08009c90 <__multiply>:
 8009c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c94:	4614      	mov	r4, r2
 8009c96:	690a      	ldr	r2, [r1, #16]
 8009c98:	6923      	ldr	r3, [r4, #16]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	bfb8      	it	lt
 8009c9e:	460b      	movlt	r3, r1
 8009ca0:	460d      	mov	r5, r1
 8009ca2:	bfbc      	itt	lt
 8009ca4:	4625      	movlt	r5, r4
 8009ca6:	461c      	movlt	r4, r3
 8009ca8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009cac:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009cb0:	68ab      	ldr	r3, [r5, #8]
 8009cb2:	6869      	ldr	r1, [r5, #4]
 8009cb4:	eb0a 0709 	add.w	r7, sl, r9
 8009cb8:	42bb      	cmp	r3, r7
 8009cba:	b085      	sub	sp, #20
 8009cbc:	bfb8      	it	lt
 8009cbe:	3101      	addlt	r1, #1
 8009cc0:	f7ff fe8a 	bl	80099d8 <_Balloc>
 8009cc4:	b930      	cbnz	r0, 8009cd4 <__multiply+0x44>
 8009cc6:	4602      	mov	r2, r0
 8009cc8:	4b42      	ldr	r3, [pc, #264]	; (8009dd4 <__multiply+0x144>)
 8009cca:	4843      	ldr	r0, [pc, #268]	; (8009dd8 <__multiply+0x148>)
 8009ccc:	f240 115d 	movw	r1, #349	; 0x15d
 8009cd0:	f000 fe6e 	bl	800a9b0 <__assert_func>
 8009cd4:	f100 0614 	add.w	r6, r0, #20
 8009cd8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009cdc:	4633      	mov	r3, r6
 8009cde:	2200      	movs	r2, #0
 8009ce0:	4543      	cmp	r3, r8
 8009ce2:	d31e      	bcc.n	8009d22 <__multiply+0x92>
 8009ce4:	f105 0c14 	add.w	ip, r5, #20
 8009ce8:	f104 0314 	add.w	r3, r4, #20
 8009cec:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009cf0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009cf4:	9202      	str	r2, [sp, #8]
 8009cf6:	ebac 0205 	sub.w	r2, ip, r5
 8009cfa:	3a15      	subs	r2, #21
 8009cfc:	f022 0203 	bic.w	r2, r2, #3
 8009d00:	3204      	adds	r2, #4
 8009d02:	f105 0115 	add.w	r1, r5, #21
 8009d06:	458c      	cmp	ip, r1
 8009d08:	bf38      	it	cc
 8009d0a:	2204      	movcc	r2, #4
 8009d0c:	9201      	str	r2, [sp, #4]
 8009d0e:	9a02      	ldr	r2, [sp, #8]
 8009d10:	9303      	str	r3, [sp, #12]
 8009d12:	429a      	cmp	r2, r3
 8009d14:	d808      	bhi.n	8009d28 <__multiply+0x98>
 8009d16:	2f00      	cmp	r7, #0
 8009d18:	dc55      	bgt.n	8009dc6 <__multiply+0x136>
 8009d1a:	6107      	str	r7, [r0, #16]
 8009d1c:	b005      	add	sp, #20
 8009d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d22:	f843 2b04 	str.w	r2, [r3], #4
 8009d26:	e7db      	b.n	8009ce0 <__multiply+0x50>
 8009d28:	f8b3 a000 	ldrh.w	sl, [r3]
 8009d2c:	f1ba 0f00 	cmp.w	sl, #0
 8009d30:	d020      	beq.n	8009d74 <__multiply+0xe4>
 8009d32:	f105 0e14 	add.w	lr, r5, #20
 8009d36:	46b1      	mov	r9, r6
 8009d38:	2200      	movs	r2, #0
 8009d3a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009d3e:	f8d9 b000 	ldr.w	fp, [r9]
 8009d42:	b2a1      	uxth	r1, r4
 8009d44:	fa1f fb8b 	uxth.w	fp, fp
 8009d48:	fb0a b101 	mla	r1, sl, r1, fp
 8009d4c:	4411      	add	r1, r2
 8009d4e:	f8d9 2000 	ldr.w	r2, [r9]
 8009d52:	0c24      	lsrs	r4, r4, #16
 8009d54:	0c12      	lsrs	r2, r2, #16
 8009d56:	fb0a 2404 	mla	r4, sl, r4, r2
 8009d5a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009d5e:	b289      	uxth	r1, r1
 8009d60:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009d64:	45f4      	cmp	ip, lr
 8009d66:	f849 1b04 	str.w	r1, [r9], #4
 8009d6a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009d6e:	d8e4      	bhi.n	8009d3a <__multiply+0xaa>
 8009d70:	9901      	ldr	r1, [sp, #4]
 8009d72:	5072      	str	r2, [r6, r1]
 8009d74:	9a03      	ldr	r2, [sp, #12]
 8009d76:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009d7a:	3304      	adds	r3, #4
 8009d7c:	f1b9 0f00 	cmp.w	r9, #0
 8009d80:	d01f      	beq.n	8009dc2 <__multiply+0x132>
 8009d82:	6834      	ldr	r4, [r6, #0]
 8009d84:	f105 0114 	add.w	r1, r5, #20
 8009d88:	46b6      	mov	lr, r6
 8009d8a:	f04f 0a00 	mov.w	sl, #0
 8009d8e:	880a      	ldrh	r2, [r1, #0]
 8009d90:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009d94:	fb09 b202 	mla	r2, r9, r2, fp
 8009d98:	4492      	add	sl, r2
 8009d9a:	b2a4      	uxth	r4, r4
 8009d9c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009da0:	f84e 4b04 	str.w	r4, [lr], #4
 8009da4:	f851 4b04 	ldr.w	r4, [r1], #4
 8009da8:	f8be 2000 	ldrh.w	r2, [lr]
 8009dac:	0c24      	lsrs	r4, r4, #16
 8009dae:	fb09 2404 	mla	r4, r9, r4, r2
 8009db2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009db6:	458c      	cmp	ip, r1
 8009db8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009dbc:	d8e7      	bhi.n	8009d8e <__multiply+0xfe>
 8009dbe:	9a01      	ldr	r2, [sp, #4]
 8009dc0:	50b4      	str	r4, [r6, r2]
 8009dc2:	3604      	adds	r6, #4
 8009dc4:	e7a3      	b.n	8009d0e <__multiply+0x7e>
 8009dc6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d1a5      	bne.n	8009d1a <__multiply+0x8a>
 8009dce:	3f01      	subs	r7, #1
 8009dd0:	e7a1      	b.n	8009d16 <__multiply+0x86>
 8009dd2:	bf00      	nop
 8009dd4:	0800b9cc 	.word	0x0800b9cc
 8009dd8:	0800bac0 	.word	0x0800bac0

08009ddc <__pow5mult>:
 8009ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009de0:	4615      	mov	r5, r2
 8009de2:	f012 0203 	ands.w	r2, r2, #3
 8009de6:	4606      	mov	r6, r0
 8009de8:	460f      	mov	r7, r1
 8009dea:	d007      	beq.n	8009dfc <__pow5mult+0x20>
 8009dec:	4c25      	ldr	r4, [pc, #148]	; (8009e84 <__pow5mult+0xa8>)
 8009dee:	3a01      	subs	r2, #1
 8009df0:	2300      	movs	r3, #0
 8009df2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009df6:	f7ff fe51 	bl	8009a9c <__multadd>
 8009dfa:	4607      	mov	r7, r0
 8009dfc:	10ad      	asrs	r5, r5, #2
 8009dfe:	d03d      	beq.n	8009e7c <__pow5mult+0xa0>
 8009e00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009e02:	b97c      	cbnz	r4, 8009e24 <__pow5mult+0x48>
 8009e04:	2010      	movs	r0, #16
 8009e06:	f7fc f965 	bl	80060d4 <malloc>
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	6270      	str	r0, [r6, #36]	; 0x24
 8009e0e:	b928      	cbnz	r0, 8009e1c <__pow5mult+0x40>
 8009e10:	4b1d      	ldr	r3, [pc, #116]	; (8009e88 <__pow5mult+0xac>)
 8009e12:	481e      	ldr	r0, [pc, #120]	; (8009e8c <__pow5mult+0xb0>)
 8009e14:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009e18:	f000 fdca 	bl	800a9b0 <__assert_func>
 8009e1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009e20:	6004      	str	r4, [r0, #0]
 8009e22:	60c4      	str	r4, [r0, #12]
 8009e24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009e28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009e2c:	b94c      	cbnz	r4, 8009e42 <__pow5mult+0x66>
 8009e2e:	f240 2171 	movw	r1, #625	; 0x271
 8009e32:	4630      	mov	r0, r6
 8009e34:	f7ff ff16 	bl	8009c64 <__i2b>
 8009e38:	2300      	movs	r3, #0
 8009e3a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009e3e:	4604      	mov	r4, r0
 8009e40:	6003      	str	r3, [r0, #0]
 8009e42:	f04f 0900 	mov.w	r9, #0
 8009e46:	07eb      	lsls	r3, r5, #31
 8009e48:	d50a      	bpl.n	8009e60 <__pow5mult+0x84>
 8009e4a:	4639      	mov	r1, r7
 8009e4c:	4622      	mov	r2, r4
 8009e4e:	4630      	mov	r0, r6
 8009e50:	f7ff ff1e 	bl	8009c90 <__multiply>
 8009e54:	4639      	mov	r1, r7
 8009e56:	4680      	mov	r8, r0
 8009e58:	4630      	mov	r0, r6
 8009e5a:	f7ff fdfd 	bl	8009a58 <_Bfree>
 8009e5e:	4647      	mov	r7, r8
 8009e60:	106d      	asrs	r5, r5, #1
 8009e62:	d00b      	beq.n	8009e7c <__pow5mult+0xa0>
 8009e64:	6820      	ldr	r0, [r4, #0]
 8009e66:	b938      	cbnz	r0, 8009e78 <__pow5mult+0x9c>
 8009e68:	4622      	mov	r2, r4
 8009e6a:	4621      	mov	r1, r4
 8009e6c:	4630      	mov	r0, r6
 8009e6e:	f7ff ff0f 	bl	8009c90 <__multiply>
 8009e72:	6020      	str	r0, [r4, #0]
 8009e74:	f8c0 9000 	str.w	r9, [r0]
 8009e78:	4604      	mov	r4, r0
 8009e7a:	e7e4      	b.n	8009e46 <__pow5mult+0x6a>
 8009e7c:	4638      	mov	r0, r7
 8009e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e82:	bf00      	nop
 8009e84:	0800bc10 	.word	0x0800bc10
 8009e88:	0800b956 	.word	0x0800b956
 8009e8c:	0800bac0 	.word	0x0800bac0

08009e90 <__lshift>:
 8009e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e94:	460c      	mov	r4, r1
 8009e96:	6849      	ldr	r1, [r1, #4]
 8009e98:	6923      	ldr	r3, [r4, #16]
 8009e9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009e9e:	68a3      	ldr	r3, [r4, #8]
 8009ea0:	4607      	mov	r7, r0
 8009ea2:	4691      	mov	r9, r2
 8009ea4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ea8:	f108 0601 	add.w	r6, r8, #1
 8009eac:	42b3      	cmp	r3, r6
 8009eae:	db0b      	blt.n	8009ec8 <__lshift+0x38>
 8009eb0:	4638      	mov	r0, r7
 8009eb2:	f7ff fd91 	bl	80099d8 <_Balloc>
 8009eb6:	4605      	mov	r5, r0
 8009eb8:	b948      	cbnz	r0, 8009ece <__lshift+0x3e>
 8009eba:	4602      	mov	r2, r0
 8009ebc:	4b28      	ldr	r3, [pc, #160]	; (8009f60 <__lshift+0xd0>)
 8009ebe:	4829      	ldr	r0, [pc, #164]	; (8009f64 <__lshift+0xd4>)
 8009ec0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009ec4:	f000 fd74 	bl	800a9b0 <__assert_func>
 8009ec8:	3101      	adds	r1, #1
 8009eca:	005b      	lsls	r3, r3, #1
 8009ecc:	e7ee      	b.n	8009eac <__lshift+0x1c>
 8009ece:	2300      	movs	r3, #0
 8009ed0:	f100 0114 	add.w	r1, r0, #20
 8009ed4:	f100 0210 	add.w	r2, r0, #16
 8009ed8:	4618      	mov	r0, r3
 8009eda:	4553      	cmp	r3, sl
 8009edc:	db33      	blt.n	8009f46 <__lshift+0xb6>
 8009ede:	6920      	ldr	r0, [r4, #16]
 8009ee0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ee4:	f104 0314 	add.w	r3, r4, #20
 8009ee8:	f019 091f 	ands.w	r9, r9, #31
 8009eec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ef0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009ef4:	d02b      	beq.n	8009f4e <__lshift+0xbe>
 8009ef6:	f1c9 0e20 	rsb	lr, r9, #32
 8009efa:	468a      	mov	sl, r1
 8009efc:	2200      	movs	r2, #0
 8009efe:	6818      	ldr	r0, [r3, #0]
 8009f00:	fa00 f009 	lsl.w	r0, r0, r9
 8009f04:	4302      	orrs	r2, r0
 8009f06:	f84a 2b04 	str.w	r2, [sl], #4
 8009f0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f0e:	459c      	cmp	ip, r3
 8009f10:	fa22 f20e 	lsr.w	r2, r2, lr
 8009f14:	d8f3      	bhi.n	8009efe <__lshift+0x6e>
 8009f16:	ebac 0304 	sub.w	r3, ip, r4
 8009f1a:	3b15      	subs	r3, #21
 8009f1c:	f023 0303 	bic.w	r3, r3, #3
 8009f20:	3304      	adds	r3, #4
 8009f22:	f104 0015 	add.w	r0, r4, #21
 8009f26:	4584      	cmp	ip, r0
 8009f28:	bf38      	it	cc
 8009f2a:	2304      	movcc	r3, #4
 8009f2c:	50ca      	str	r2, [r1, r3]
 8009f2e:	b10a      	cbz	r2, 8009f34 <__lshift+0xa4>
 8009f30:	f108 0602 	add.w	r6, r8, #2
 8009f34:	3e01      	subs	r6, #1
 8009f36:	4638      	mov	r0, r7
 8009f38:	612e      	str	r6, [r5, #16]
 8009f3a:	4621      	mov	r1, r4
 8009f3c:	f7ff fd8c 	bl	8009a58 <_Bfree>
 8009f40:	4628      	mov	r0, r5
 8009f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f46:	f842 0f04 	str.w	r0, [r2, #4]!
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	e7c5      	b.n	8009eda <__lshift+0x4a>
 8009f4e:	3904      	subs	r1, #4
 8009f50:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f54:	f841 2f04 	str.w	r2, [r1, #4]!
 8009f58:	459c      	cmp	ip, r3
 8009f5a:	d8f9      	bhi.n	8009f50 <__lshift+0xc0>
 8009f5c:	e7ea      	b.n	8009f34 <__lshift+0xa4>
 8009f5e:	bf00      	nop
 8009f60:	0800b9cc 	.word	0x0800b9cc
 8009f64:	0800bac0 	.word	0x0800bac0

08009f68 <__mcmp>:
 8009f68:	b530      	push	{r4, r5, lr}
 8009f6a:	6902      	ldr	r2, [r0, #16]
 8009f6c:	690c      	ldr	r4, [r1, #16]
 8009f6e:	1b12      	subs	r2, r2, r4
 8009f70:	d10e      	bne.n	8009f90 <__mcmp+0x28>
 8009f72:	f100 0314 	add.w	r3, r0, #20
 8009f76:	3114      	adds	r1, #20
 8009f78:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009f7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009f80:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009f84:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009f88:	42a5      	cmp	r5, r4
 8009f8a:	d003      	beq.n	8009f94 <__mcmp+0x2c>
 8009f8c:	d305      	bcc.n	8009f9a <__mcmp+0x32>
 8009f8e:	2201      	movs	r2, #1
 8009f90:	4610      	mov	r0, r2
 8009f92:	bd30      	pop	{r4, r5, pc}
 8009f94:	4283      	cmp	r3, r0
 8009f96:	d3f3      	bcc.n	8009f80 <__mcmp+0x18>
 8009f98:	e7fa      	b.n	8009f90 <__mcmp+0x28>
 8009f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f9e:	e7f7      	b.n	8009f90 <__mcmp+0x28>

08009fa0 <__mdiff>:
 8009fa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa4:	460c      	mov	r4, r1
 8009fa6:	4606      	mov	r6, r0
 8009fa8:	4611      	mov	r1, r2
 8009faa:	4620      	mov	r0, r4
 8009fac:	4617      	mov	r7, r2
 8009fae:	f7ff ffdb 	bl	8009f68 <__mcmp>
 8009fb2:	1e05      	subs	r5, r0, #0
 8009fb4:	d110      	bne.n	8009fd8 <__mdiff+0x38>
 8009fb6:	4629      	mov	r1, r5
 8009fb8:	4630      	mov	r0, r6
 8009fba:	f7ff fd0d 	bl	80099d8 <_Balloc>
 8009fbe:	b930      	cbnz	r0, 8009fce <__mdiff+0x2e>
 8009fc0:	4b39      	ldr	r3, [pc, #228]	; (800a0a8 <__mdiff+0x108>)
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	f240 2132 	movw	r1, #562	; 0x232
 8009fc8:	4838      	ldr	r0, [pc, #224]	; (800a0ac <__mdiff+0x10c>)
 8009fca:	f000 fcf1 	bl	800a9b0 <__assert_func>
 8009fce:	2301      	movs	r3, #1
 8009fd0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009fd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fd8:	bfa4      	itt	ge
 8009fda:	463b      	movge	r3, r7
 8009fdc:	4627      	movge	r7, r4
 8009fde:	4630      	mov	r0, r6
 8009fe0:	6879      	ldr	r1, [r7, #4]
 8009fe2:	bfa6      	itte	ge
 8009fe4:	461c      	movge	r4, r3
 8009fe6:	2500      	movge	r5, #0
 8009fe8:	2501      	movlt	r5, #1
 8009fea:	f7ff fcf5 	bl	80099d8 <_Balloc>
 8009fee:	b920      	cbnz	r0, 8009ffa <__mdiff+0x5a>
 8009ff0:	4b2d      	ldr	r3, [pc, #180]	; (800a0a8 <__mdiff+0x108>)
 8009ff2:	4602      	mov	r2, r0
 8009ff4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009ff8:	e7e6      	b.n	8009fc8 <__mdiff+0x28>
 8009ffa:	693e      	ldr	r6, [r7, #16]
 8009ffc:	60c5      	str	r5, [r0, #12]
 8009ffe:	6925      	ldr	r5, [r4, #16]
 800a000:	f107 0114 	add.w	r1, r7, #20
 800a004:	f104 0914 	add.w	r9, r4, #20
 800a008:	f100 0e14 	add.w	lr, r0, #20
 800a00c:	f107 0210 	add.w	r2, r7, #16
 800a010:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a014:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a018:	46f2      	mov	sl, lr
 800a01a:	2700      	movs	r7, #0
 800a01c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a020:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a024:	fa1f f883 	uxth.w	r8, r3
 800a028:	fa17 f78b 	uxtah	r7, r7, fp
 800a02c:	0c1b      	lsrs	r3, r3, #16
 800a02e:	eba7 0808 	sub.w	r8, r7, r8
 800a032:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a036:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a03a:	fa1f f888 	uxth.w	r8, r8
 800a03e:	141f      	asrs	r7, r3, #16
 800a040:	454d      	cmp	r5, r9
 800a042:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a046:	f84a 3b04 	str.w	r3, [sl], #4
 800a04a:	d8e7      	bhi.n	800a01c <__mdiff+0x7c>
 800a04c:	1b2b      	subs	r3, r5, r4
 800a04e:	3b15      	subs	r3, #21
 800a050:	f023 0303 	bic.w	r3, r3, #3
 800a054:	3304      	adds	r3, #4
 800a056:	3415      	adds	r4, #21
 800a058:	42a5      	cmp	r5, r4
 800a05a:	bf38      	it	cc
 800a05c:	2304      	movcc	r3, #4
 800a05e:	4419      	add	r1, r3
 800a060:	4473      	add	r3, lr
 800a062:	469e      	mov	lr, r3
 800a064:	460d      	mov	r5, r1
 800a066:	4565      	cmp	r5, ip
 800a068:	d30e      	bcc.n	800a088 <__mdiff+0xe8>
 800a06a:	f10c 0203 	add.w	r2, ip, #3
 800a06e:	1a52      	subs	r2, r2, r1
 800a070:	f022 0203 	bic.w	r2, r2, #3
 800a074:	3903      	subs	r1, #3
 800a076:	458c      	cmp	ip, r1
 800a078:	bf38      	it	cc
 800a07a:	2200      	movcc	r2, #0
 800a07c:	441a      	add	r2, r3
 800a07e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a082:	b17b      	cbz	r3, 800a0a4 <__mdiff+0x104>
 800a084:	6106      	str	r6, [r0, #16]
 800a086:	e7a5      	b.n	8009fd4 <__mdiff+0x34>
 800a088:	f855 8b04 	ldr.w	r8, [r5], #4
 800a08c:	fa17 f488 	uxtah	r4, r7, r8
 800a090:	1422      	asrs	r2, r4, #16
 800a092:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a096:	b2a4      	uxth	r4, r4
 800a098:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a09c:	f84e 4b04 	str.w	r4, [lr], #4
 800a0a0:	1417      	asrs	r7, r2, #16
 800a0a2:	e7e0      	b.n	800a066 <__mdiff+0xc6>
 800a0a4:	3e01      	subs	r6, #1
 800a0a6:	e7ea      	b.n	800a07e <__mdiff+0xde>
 800a0a8:	0800b9cc 	.word	0x0800b9cc
 800a0ac:	0800bac0 	.word	0x0800bac0

0800a0b0 <__ulp>:
 800a0b0:	b082      	sub	sp, #8
 800a0b2:	ed8d 0b00 	vstr	d0, [sp]
 800a0b6:	9b01      	ldr	r3, [sp, #4]
 800a0b8:	4912      	ldr	r1, [pc, #72]	; (800a104 <__ulp+0x54>)
 800a0ba:	4019      	ands	r1, r3
 800a0bc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a0c0:	2900      	cmp	r1, #0
 800a0c2:	dd05      	ble.n	800a0d0 <__ulp+0x20>
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	460b      	mov	r3, r1
 800a0c8:	ec43 2b10 	vmov	d0, r2, r3
 800a0cc:	b002      	add	sp, #8
 800a0ce:	4770      	bx	lr
 800a0d0:	4249      	negs	r1, r1
 800a0d2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a0d6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a0da:	f04f 0200 	mov.w	r2, #0
 800a0de:	f04f 0300 	mov.w	r3, #0
 800a0e2:	da04      	bge.n	800a0ee <__ulp+0x3e>
 800a0e4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a0e8:	fa41 f300 	asr.w	r3, r1, r0
 800a0ec:	e7ec      	b.n	800a0c8 <__ulp+0x18>
 800a0ee:	f1a0 0114 	sub.w	r1, r0, #20
 800a0f2:	291e      	cmp	r1, #30
 800a0f4:	bfda      	itte	le
 800a0f6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a0fa:	fa20 f101 	lsrle.w	r1, r0, r1
 800a0fe:	2101      	movgt	r1, #1
 800a100:	460a      	mov	r2, r1
 800a102:	e7e1      	b.n	800a0c8 <__ulp+0x18>
 800a104:	7ff00000 	.word	0x7ff00000

0800a108 <__b2d>:
 800a108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a10a:	6905      	ldr	r5, [r0, #16]
 800a10c:	f100 0714 	add.w	r7, r0, #20
 800a110:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a114:	1f2e      	subs	r6, r5, #4
 800a116:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a11a:	4620      	mov	r0, r4
 800a11c:	f7ff fd52 	bl	8009bc4 <__hi0bits>
 800a120:	f1c0 0320 	rsb	r3, r0, #32
 800a124:	280a      	cmp	r0, #10
 800a126:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a1a4 <__b2d+0x9c>
 800a12a:	600b      	str	r3, [r1, #0]
 800a12c:	dc14      	bgt.n	800a158 <__b2d+0x50>
 800a12e:	f1c0 0e0b 	rsb	lr, r0, #11
 800a132:	fa24 f10e 	lsr.w	r1, r4, lr
 800a136:	42b7      	cmp	r7, r6
 800a138:	ea41 030c 	orr.w	r3, r1, ip
 800a13c:	bf34      	ite	cc
 800a13e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a142:	2100      	movcs	r1, #0
 800a144:	3015      	adds	r0, #21
 800a146:	fa04 f000 	lsl.w	r0, r4, r0
 800a14a:	fa21 f10e 	lsr.w	r1, r1, lr
 800a14e:	ea40 0201 	orr.w	r2, r0, r1
 800a152:	ec43 2b10 	vmov	d0, r2, r3
 800a156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a158:	42b7      	cmp	r7, r6
 800a15a:	bf3a      	itte	cc
 800a15c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a160:	f1a5 0608 	subcc.w	r6, r5, #8
 800a164:	2100      	movcs	r1, #0
 800a166:	380b      	subs	r0, #11
 800a168:	d017      	beq.n	800a19a <__b2d+0x92>
 800a16a:	f1c0 0c20 	rsb	ip, r0, #32
 800a16e:	fa04 f500 	lsl.w	r5, r4, r0
 800a172:	42be      	cmp	r6, r7
 800a174:	fa21 f40c 	lsr.w	r4, r1, ip
 800a178:	ea45 0504 	orr.w	r5, r5, r4
 800a17c:	bf8c      	ite	hi
 800a17e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a182:	2400      	movls	r4, #0
 800a184:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a188:	fa01 f000 	lsl.w	r0, r1, r0
 800a18c:	fa24 f40c 	lsr.w	r4, r4, ip
 800a190:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a194:	ea40 0204 	orr.w	r2, r0, r4
 800a198:	e7db      	b.n	800a152 <__b2d+0x4a>
 800a19a:	ea44 030c 	orr.w	r3, r4, ip
 800a19e:	460a      	mov	r2, r1
 800a1a0:	e7d7      	b.n	800a152 <__b2d+0x4a>
 800a1a2:	bf00      	nop
 800a1a4:	3ff00000 	.word	0x3ff00000

0800a1a8 <__d2b>:
 800a1a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a1ac:	4689      	mov	r9, r1
 800a1ae:	2101      	movs	r1, #1
 800a1b0:	ec57 6b10 	vmov	r6, r7, d0
 800a1b4:	4690      	mov	r8, r2
 800a1b6:	f7ff fc0f 	bl	80099d8 <_Balloc>
 800a1ba:	4604      	mov	r4, r0
 800a1bc:	b930      	cbnz	r0, 800a1cc <__d2b+0x24>
 800a1be:	4602      	mov	r2, r0
 800a1c0:	4b25      	ldr	r3, [pc, #148]	; (800a258 <__d2b+0xb0>)
 800a1c2:	4826      	ldr	r0, [pc, #152]	; (800a25c <__d2b+0xb4>)
 800a1c4:	f240 310a 	movw	r1, #778	; 0x30a
 800a1c8:	f000 fbf2 	bl	800a9b0 <__assert_func>
 800a1cc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a1d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a1d4:	bb35      	cbnz	r5, 800a224 <__d2b+0x7c>
 800a1d6:	2e00      	cmp	r6, #0
 800a1d8:	9301      	str	r3, [sp, #4]
 800a1da:	d028      	beq.n	800a22e <__d2b+0x86>
 800a1dc:	4668      	mov	r0, sp
 800a1de:	9600      	str	r6, [sp, #0]
 800a1e0:	f7ff fd10 	bl	8009c04 <__lo0bits>
 800a1e4:	9900      	ldr	r1, [sp, #0]
 800a1e6:	b300      	cbz	r0, 800a22a <__d2b+0x82>
 800a1e8:	9a01      	ldr	r2, [sp, #4]
 800a1ea:	f1c0 0320 	rsb	r3, r0, #32
 800a1ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a1f2:	430b      	orrs	r3, r1
 800a1f4:	40c2      	lsrs	r2, r0
 800a1f6:	6163      	str	r3, [r4, #20]
 800a1f8:	9201      	str	r2, [sp, #4]
 800a1fa:	9b01      	ldr	r3, [sp, #4]
 800a1fc:	61a3      	str	r3, [r4, #24]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	bf14      	ite	ne
 800a202:	2202      	movne	r2, #2
 800a204:	2201      	moveq	r2, #1
 800a206:	6122      	str	r2, [r4, #16]
 800a208:	b1d5      	cbz	r5, 800a240 <__d2b+0x98>
 800a20a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a20e:	4405      	add	r5, r0
 800a210:	f8c9 5000 	str.w	r5, [r9]
 800a214:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a218:	f8c8 0000 	str.w	r0, [r8]
 800a21c:	4620      	mov	r0, r4
 800a21e:	b003      	add	sp, #12
 800a220:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a224:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a228:	e7d5      	b.n	800a1d6 <__d2b+0x2e>
 800a22a:	6161      	str	r1, [r4, #20]
 800a22c:	e7e5      	b.n	800a1fa <__d2b+0x52>
 800a22e:	a801      	add	r0, sp, #4
 800a230:	f7ff fce8 	bl	8009c04 <__lo0bits>
 800a234:	9b01      	ldr	r3, [sp, #4]
 800a236:	6163      	str	r3, [r4, #20]
 800a238:	2201      	movs	r2, #1
 800a23a:	6122      	str	r2, [r4, #16]
 800a23c:	3020      	adds	r0, #32
 800a23e:	e7e3      	b.n	800a208 <__d2b+0x60>
 800a240:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a244:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a248:	f8c9 0000 	str.w	r0, [r9]
 800a24c:	6918      	ldr	r0, [r3, #16]
 800a24e:	f7ff fcb9 	bl	8009bc4 <__hi0bits>
 800a252:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a256:	e7df      	b.n	800a218 <__d2b+0x70>
 800a258:	0800b9cc 	.word	0x0800b9cc
 800a25c:	0800bac0 	.word	0x0800bac0

0800a260 <__ratio>:
 800a260:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a264:	4688      	mov	r8, r1
 800a266:	4669      	mov	r1, sp
 800a268:	4681      	mov	r9, r0
 800a26a:	f7ff ff4d 	bl	800a108 <__b2d>
 800a26e:	a901      	add	r1, sp, #4
 800a270:	4640      	mov	r0, r8
 800a272:	ec55 4b10 	vmov	r4, r5, d0
 800a276:	f7ff ff47 	bl	800a108 <__b2d>
 800a27a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a27e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a282:	eba3 0c02 	sub.w	ip, r3, r2
 800a286:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a28a:	1a9b      	subs	r3, r3, r2
 800a28c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a290:	ec51 0b10 	vmov	r0, r1, d0
 800a294:	2b00      	cmp	r3, #0
 800a296:	bfd6      	itet	le
 800a298:	460a      	movle	r2, r1
 800a29a:	462a      	movgt	r2, r5
 800a29c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a2a0:	468b      	mov	fp, r1
 800a2a2:	462f      	mov	r7, r5
 800a2a4:	bfd4      	ite	le
 800a2a6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a2aa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a2ae:	4620      	mov	r0, r4
 800a2b0:	ee10 2a10 	vmov	r2, s0
 800a2b4:	465b      	mov	r3, fp
 800a2b6:	4639      	mov	r1, r7
 800a2b8:	f7f6 fac8 	bl	800084c <__aeabi_ddiv>
 800a2bc:	ec41 0b10 	vmov	d0, r0, r1
 800a2c0:	b003      	add	sp, #12
 800a2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a2c6 <__copybits>:
 800a2c6:	3901      	subs	r1, #1
 800a2c8:	b570      	push	{r4, r5, r6, lr}
 800a2ca:	1149      	asrs	r1, r1, #5
 800a2cc:	6914      	ldr	r4, [r2, #16]
 800a2ce:	3101      	adds	r1, #1
 800a2d0:	f102 0314 	add.w	r3, r2, #20
 800a2d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a2d8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a2dc:	1f05      	subs	r5, r0, #4
 800a2de:	42a3      	cmp	r3, r4
 800a2e0:	d30c      	bcc.n	800a2fc <__copybits+0x36>
 800a2e2:	1aa3      	subs	r3, r4, r2
 800a2e4:	3b11      	subs	r3, #17
 800a2e6:	f023 0303 	bic.w	r3, r3, #3
 800a2ea:	3211      	adds	r2, #17
 800a2ec:	42a2      	cmp	r2, r4
 800a2ee:	bf88      	it	hi
 800a2f0:	2300      	movhi	r3, #0
 800a2f2:	4418      	add	r0, r3
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	4288      	cmp	r0, r1
 800a2f8:	d305      	bcc.n	800a306 <__copybits+0x40>
 800a2fa:	bd70      	pop	{r4, r5, r6, pc}
 800a2fc:	f853 6b04 	ldr.w	r6, [r3], #4
 800a300:	f845 6f04 	str.w	r6, [r5, #4]!
 800a304:	e7eb      	b.n	800a2de <__copybits+0x18>
 800a306:	f840 3b04 	str.w	r3, [r0], #4
 800a30a:	e7f4      	b.n	800a2f6 <__copybits+0x30>

0800a30c <__any_on>:
 800a30c:	f100 0214 	add.w	r2, r0, #20
 800a310:	6900      	ldr	r0, [r0, #16]
 800a312:	114b      	asrs	r3, r1, #5
 800a314:	4298      	cmp	r0, r3
 800a316:	b510      	push	{r4, lr}
 800a318:	db11      	blt.n	800a33e <__any_on+0x32>
 800a31a:	dd0a      	ble.n	800a332 <__any_on+0x26>
 800a31c:	f011 011f 	ands.w	r1, r1, #31
 800a320:	d007      	beq.n	800a332 <__any_on+0x26>
 800a322:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a326:	fa24 f001 	lsr.w	r0, r4, r1
 800a32a:	fa00 f101 	lsl.w	r1, r0, r1
 800a32e:	428c      	cmp	r4, r1
 800a330:	d10b      	bne.n	800a34a <__any_on+0x3e>
 800a332:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a336:	4293      	cmp	r3, r2
 800a338:	d803      	bhi.n	800a342 <__any_on+0x36>
 800a33a:	2000      	movs	r0, #0
 800a33c:	bd10      	pop	{r4, pc}
 800a33e:	4603      	mov	r3, r0
 800a340:	e7f7      	b.n	800a332 <__any_on+0x26>
 800a342:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a346:	2900      	cmp	r1, #0
 800a348:	d0f5      	beq.n	800a336 <__any_on+0x2a>
 800a34a:	2001      	movs	r0, #1
 800a34c:	e7f6      	b.n	800a33c <__any_on+0x30>

0800a34e <__ssputs_r>:
 800a34e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a352:	688e      	ldr	r6, [r1, #8]
 800a354:	429e      	cmp	r6, r3
 800a356:	4682      	mov	sl, r0
 800a358:	460c      	mov	r4, r1
 800a35a:	4690      	mov	r8, r2
 800a35c:	461f      	mov	r7, r3
 800a35e:	d838      	bhi.n	800a3d2 <__ssputs_r+0x84>
 800a360:	898a      	ldrh	r2, [r1, #12]
 800a362:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a366:	d032      	beq.n	800a3ce <__ssputs_r+0x80>
 800a368:	6825      	ldr	r5, [r4, #0]
 800a36a:	6909      	ldr	r1, [r1, #16]
 800a36c:	eba5 0901 	sub.w	r9, r5, r1
 800a370:	6965      	ldr	r5, [r4, #20]
 800a372:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a376:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a37a:	3301      	adds	r3, #1
 800a37c:	444b      	add	r3, r9
 800a37e:	106d      	asrs	r5, r5, #1
 800a380:	429d      	cmp	r5, r3
 800a382:	bf38      	it	cc
 800a384:	461d      	movcc	r5, r3
 800a386:	0553      	lsls	r3, r2, #21
 800a388:	d531      	bpl.n	800a3ee <__ssputs_r+0xa0>
 800a38a:	4629      	mov	r1, r5
 800a38c:	f7fb ff20 	bl	80061d0 <_malloc_r>
 800a390:	4606      	mov	r6, r0
 800a392:	b950      	cbnz	r0, 800a3aa <__ssputs_r+0x5c>
 800a394:	230c      	movs	r3, #12
 800a396:	f8ca 3000 	str.w	r3, [sl]
 800a39a:	89a3      	ldrh	r3, [r4, #12]
 800a39c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3a0:	81a3      	strh	r3, [r4, #12]
 800a3a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a3a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3aa:	6921      	ldr	r1, [r4, #16]
 800a3ac:	464a      	mov	r2, r9
 800a3ae:	f7fb fe99 	bl	80060e4 <memcpy>
 800a3b2:	89a3      	ldrh	r3, [r4, #12]
 800a3b4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a3b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3bc:	81a3      	strh	r3, [r4, #12]
 800a3be:	6126      	str	r6, [r4, #16]
 800a3c0:	6165      	str	r5, [r4, #20]
 800a3c2:	444e      	add	r6, r9
 800a3c4:	eba5 0509 	sub.w	r5, r5, r9
 800a3c8:	6026      	str	r6, [r4, #0]
 800a3ca:	60a5      	str	r5, [r4, #8]
 800a3cc:	463e      	mov	r6, r7
 800a3ce:	42be      	cmp	r6, r7
 800a3d0:	d900      	bls.n	800a3d4 <__ssputs_r+0x86>
 800a3d2:	463e      	mov	r6, r7
 800a3d4:	4632      	mov	r2, r6
 800a3d6:	6820      	ldr	r0, [r4, #0]
 800a3d8:	4641      	mov	r1, r8
 800a3da:	f000 fb5d 	bl	800aa98 <memmove>
 800a3de:	68a3      	ldr	r3, [r4, #8]
 800a3e0:	6822      	ldr	r2, [r4, #0]
 800a3e2:	1b9b      	subs	r3, r3, r6
 800a3e4:	4432      	add	r2, r6
 800a3e6:	60a3      	str	r3, [r4, #8]
 800a3e8:	6022      	str	r2, [r4, #0]
 800a3ea:	2000      	movs	r0, #0
 800a3ec:	e7db      	b.n	800a3a6 <__ssputs_r+0x58>
 800a3ee:	462a      	mov	r2, r5
 800a3f0:	f000 fb6c 	bl	800aacc <_realloc_r>
 800a3f4:	4606      	mov	r6, r0
 800a3f6:	2800      	cmp	r0, #0
 800a3f8:	d1e1      	bne.n	800a3be <__ssputs_r+0x70>
 800a3fa:	6921      	ldr	r1, [r4, #16]
 800a3fc:	4650      	mov	r0, sl
 800a3fe:	f7fb fe97 	bl	8006130 <_free_r>
 800a402:	e7c7      	b.n	800a394 <__ssputs_r+0x46>

0800a404 <_svfiprintf_r>:
 800a404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a408:	4698      	mov	r8, r3
 800a40a:	898b      	ldrh	r3, [r1, #12]
 800a40c:	061b      	lsls	r3, r3, #24
 800a40e:	b09d      	sub	sp, #116	; 0x74
 800a410:	4607      	mov	r7, r0
 800a412:	460d      	mov	r5, r1
 800a414:	4614      	mov	r4, r2
 800a416:	d50e      	bpl.n	800a436 <_svfiprintf_r+0x32>
 800a418:	690b      	ldr	r3, [r1, #16]
 800a41a:	b963      	cbnz	r3, 800a436 <_svfiprintf_r+0x32>
 800a41c:	2140      	movs	r1, #64	; 0x40
 800a41e:	f7fb fed7 	bl	80061d0 <_malloc_r>
 800a422:	6028      	str	r0, [r5, #0]
 800a424:	6128      	str	r0, [r5, #16]
 800a426:	b920      	cbnz	r0, 800a432 <_svfiprintf_r+0x2e>
 800a428:	230c      	movs	r3, #12
 800a42a:	603b      	str	r3, [r7, #0]
 800a42c:	f04f 30ff 	mov.w	r0, #4294967295
 800a430:	e0d1      	b.n	800a5d6 <_svfiprintf_r+0x1d2>
 800a432:	2340      	movs	r3, #64	; 0x40
 800a434:	616b      	str	r3, [r5, #20]
 800a436:	2300      	movs	r3, #0
 800a438:	9309      	str	r3, [sp, #36]	; 0x24
 800a43a:	2320      	movs	r3, #32
 800a43c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a440:	f8cd 800c 	str.w	r8, [sp, #12]
 800a444:	2330      	movs	r3, #48	; 0x30
 800a446:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a5f0 <_svfiprintf_r+0x1ec>
 800a44a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a44e:	f04f 0901 	mov.w	r9, #1
 800a452:	4623      	mov	r3, r4
 800a454:	469a      	mov	sl, r3
 800a456:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a45a:	b10a      	cbz	r2, 800a460 <_svfiprintf_r+0x5c>
 800a45c:	2a25      	cmp	r2, #37	; 0x25
 800a45e:	d1f9      	bne.n	800a454 <_svfiprintf_r+0x50>
 800a460:	ebba 0b04 	subs.w	fp, sl, r4
 800a464:	d00b      	beq.n	800a47e <_svfiprintf_r+0x7a>
 800a466:	465b      	mov	r3, fp
 800a468:	4622      	mov	r2, r4
 800a46a:	4629      	mov	r1, r5
 800a46c:	4638      	mov	r0, r7
 800a46e:	f7ff ff6e 	bl	800a34e <__ssputs_r>
 800a472:	3001      	adds	r0, #1
 800a474:	f000 80aa 	beq.w	800a5cc <_svfiprintf_r+0x1c8>
 800a478:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a47a:	445a      	add	r2, fp
 800a47c:	9209      	str	r2, [sp, #36]	; 0x24
 800a47e:	f89a 3000 	ldrb.w	r3, [sl]
 800a482:	2b00      	cmp	r3, #0
 800a484:	f000 80a2 	beq.w	800a5cc <_svfiprintf_r+0x1c8>
 800a488:	2300      	movs	r3, #0
 800a48a:	f04f 32ff 	mov.w	r2, #4294967295
 800a48e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a492:	f10a 0a01 	add.w	sl, sl, #1
 800a496:	9304      	str	r3, [sp, #16]
 800a498:	9307      	str	r3, [sp, #28]
 800a49a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a49e:	931a      	str	r3, [sp, #104]	; 0x68
 800a4a0:	4654      	mov	r4, sl
 800a4a2:	2205      	movs	r2, #5
 800a4a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4a8:	4851      	ldr	r0, [pc, #324]	; (800a5f0 <_svfiprintf_r+0x1ec>)
 800a4aa:	f7f5 fe99 	bl	80001e0 <memchr>
 800a4ae:	9a04      	ldr	r2, [sp, #16]
 800a4b0:	b9d8      	cbnz	r0, 800a4ea <_svfiprintf_r+0xe6>
 800a4b2:	06d0      	lsls	r0, r2, #27
 800a4b4:	bf44      	itt	mi
 800a4b6:	2320      	movmi	r3, #32
 800a4b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4bc:	0711      	lsls	r1, r2, #28
 800a4be:	bf44      	itt	mi
 800a4c0:	232b      	movmi	r3, #43	; 0x2b
 800a4c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4c6:	f89a 3000 	ldrb.w	r3, [sl]
 800a4ca:	2b2a      	cmp	r3, #42	; 0x2a
 800a4cc:	d015      	beq.n	800a4fa <_svfiprintf_r+0xf6>
 800a4ce:	9a07      	ldr	r2, [sp, #28]
 800a4d0:	4654      	mov	r4, sl
 800a4d2:	2000      	movs	r0, #0
 800a4d4:	f04f 0c0a 	mov.w	ip, #10
 800a4d8:	4621      	mov	r1, r4
 800a4da:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4de:	3b30      	subs	r3, #48	; 0x30
 800a4e0:	2b09      	cmp	r3, #9
 800a4e2:	d94e      	bls.n	800a582 <_svfiprintf_r+0x17e>
 800a4e4:	b1b0      	cbz	r0, 800a514 <_svfiprintf_r+0x110>
 800a4e6:	9207      	str	r2, [sp, #28]
 800a4e8:	e014      	b.n	800a514 <_svfiprintf_r+0x110>
 800a4ea:	eba0 0308 	sub.w	r3, r0, r8
 800a4ee:	fa09 f303 	lsl.w	r3, r9, r3
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	9304      	str	r3, [sp, #16]
 800a4f6:	46a2      	mov	sl, r4
 800a4f8:	e7d2      	b.n	800a4a0 <_svfiprintf_r+0x9c>
 800a4fa:	9b03      	ldr	r3, [sp, #12]
 800a4fc:	1d19      	adds	r1, r3, #4
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	9103      	str	r1, [sp, #12]
 800a502:	2b00      	cmp	r3, #0
 800a504:	bfbb      	ittet	lt
 800a506:	425b      	neglt	r3, r3
 800a508:	f042 0202 	orrlt.w	r2, r2, #2
 800a50c:	9307      	strge	r3, [sp, #28]
 800a50e:	9307      	strlt	r3, [sp, #28]
 800a510:	bfb8      	it	lt
 800a512:	9204      	strlt	r2, [sp, #16]
 800a514:	7823      	ldrb	r3, [r4, #0]
 800a516:	2b2e      	cmp	r3, #46	; 0x2e
 800a518:	d10c      	bne.n	800a534 <_svfiprintf_r+0x130>
 800a51a:	7863      	ldrb	r3, [r4, #1]
 800a51c:	2b2a      	cmp	r3, #42	; 0x2a
 800a51e:	d135      	bne.n	800a58c <_svfiprintf_r+0x188>
 800a520:	9b03      	ldr	r3, [sp, #12]
 800a522:	1d1a      	adds	r2, r3, #4
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	9203      	str	r2, [sp, #12]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	bfb8      	it	lt
 800a52c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a530:	3402      	adds	r4, #2
 800a532:	9305      	str	r3, [sp, #20]
 800a534:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a600 <_svfiprintf_r+0x1fc>
 800a538:	7821      	ldrb	r1, [r4, #0]
 800a53a:	2203      	movs	r2, #3
 800a53c:	4650      	mov	r0, sl
 800a53e:	f7f5 fe4f 	bl	80001e0 <memchr>
 800a542:	b140      	cbz	r0, 800a556 <_svfiprintf_r+0x152>
 800a544:	2340      	movs	r3, #64	; 0x40
 800a546:	eba0 000a 	sub.w	r0, r0, sl
 800a54a:	fa03 f000 	lsl.w	r0, r3, r0
 800a54e:	9b04      	ldr	r3, [sp, #16]
 800a550:	4303      	orrs	r3, r0
 800a552:	3401      	adds	r4, #1
 800a554:	9304      	str	r3, [sp, #16]
 800a556:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a55a:	4826      	ldr	r0, [pc, #152]	; (800a5f4 <_svfiprintf_r+0x1f0>)
 800a55c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a560:	2206      	movs	r2, #6
 800a562:	f7f5 fe3d 	bl	80001e0 <memchr>
 800a566:	2800      	cmp	r0, #0
 800a568:	d038      	beq.n	800a5dc <_svfiprintf_r+0x1d8>
 800a56a:	4b23      	ldr	r3, [pc, #140]	; (800a5f8 <_svfiprintf_r+0x1f4>)
 800a56c:	bb1b      	cbnz	r3, 800a5b6 <_svfiprintf_r+0x1b2>
 800a56e:	9b03      	ldr	r3, [sp, #12]
 800a570:	3307      	adds	r3, #7
 800a572:	f023 0307 	bic.w	r3, r3, #7
 800a576:	3308      	adds	r3, #8
 800a578:	9303      	str	r3, [sp, #12]
 800a57a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a57c:	4433      	add	r3, r6
 800a57e:	9309      	str	r3, [sp, #36]	; 0x24
 800a580:	e767      	b.n	800a452 <_svfiprintf_r+0x4e>
 800a582:	fb0c 3202 	mla	r2, ip, r2, r3
 800a586:	460c      	mov	r4, r1
 800a588:	2001      	movs	r0, #1
 800a58a:	e7a5      	b.n	800a4d8 <_svfiprintf_r+0xd4>
 800a58c:	2300      	movs	r3, #0
 800a58e:	3401      	adds	r4, #1
 800a590:	9305      	str	r3, [sp, #20]
 800a592:	4619      	mov	r1, r3
 800a594:	f04f 0c0a 	mov.w	ip, #10
 800a598:	4620      	mov	r0, r4
 800a59a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a59e:	3a30      	subs	r2, #48	; 0x30
 800a5a0:	2a09      	cmp	r2, #9
 800a5a2:	d903      	bls.n	800a5ac <_svfiprintf_r+0x1a8>
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d0c5      	beq.n	800a534 <_svfiprintf_r+0x130>
 800a5a8:	9105      	str	r1, [sp, #20]
 800a5aa:	e7c3      	b.n	800a534 <_svfiprintf_r+0x130>
 800a5ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5b0:	4604      	mov	r4, r0
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	e7f0      	b.n	800a598 <_svfiprintf_r+0x194>
 800a5b6:	ab03      	add	r3, sp, #12
 800a5b8:	9300      	str	r3, [sp, #0]
 800a5ba:	462a      	mov	r2, r5
 800a5bc:	4b0f      	ldr	r3, [pc, #60]	; (800a5fc <_svfiprintf_r+0x1f8>)
 800a5be:	a904      	add	r1, sp, #16
 800a5c0:	4638      	mov	r0, r7
 800a5c2:	f7fb feff 	bl	80063c4 <_printf_float>
 800a5c6:	1c42      	adds	r2, r0, #1
 800a5c8:	4606      	mov	r6, r0
 800a5ca:	d1d6      	bne.n	800a57a <_svfiprintf_r+0x176>
 800a5cc:	89ab      	ldrh	r3, [r5, #12]
 800a5ce:	065b      	lsls	r3, r3, #25
 800a5d0:	f53f af2c 	bmi.w	800a42c <_svfiprintf_r+0x28>
 800a5d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5d6:	b01d      	add	sp, #116	; 0x74
 800a5d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5dc:	ab03      	add	r3, sp, #12
 800a5de:	9300      	str	r3, [sp, #0]
 800a5e0:	462a      	mov	r2, r5
 800a5e2:	4b06      	ldr	r3, [pc, #24]	; (800a5fc <_svfiprintf_r+0x1f8>)
 800a5e4:	a904      	add	r1, sp, #16
 800a5e6:	4638      	mov	r0, r7
 800a5e8:	f7fc f990 	bl	800690c <_printf_i>
 800a5ec:	e7eb      	b.n	800a5c6 <_svfiprintf_r+0x1c2>
 800a5ee:	bf00      	nop
 800a5f0:	0800bc1c 	.word	0x0800bc1c
 800a5f4:	0800bc26 	.word	0x0800bc26
 800a5f8:	080063c5 	.word	0x080063c5
 800a5fc:	0800a34f 	.word	0x0800a34f
 800a600:	0800bc22 	.word	0x0800bc22

0800a604 <__sfputc_r>:
 800a604:	6893      	ldr	r3, [r2, #8]
 800a606:	3b01      	subs	r3, #1
 800a608:	2b00      	cmp	r3, #0
 800a60a:	b410      	push	{r4}
 800a60c:	6093      	str	r3, [r2, #8]
 800a60e:	da08      	bge.n	800a622 <__sfputc_r+0x1e>
 800a610:	6994      	ldr	r4, [r2, #24]
 800a612:	42a3      	cmp	r3, r4
 800a614:	db01      	blt.n	800a61a <__sfputc_r+0x16>
 800a616:	290a      	cmp	r1, #10
 800a618:	d103      	bne.n	800a622 <__sfputc_r+0x1e>
 800a61a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a61e:	f7fd bcf1 	b.w	8008004 <__swbuf_r>
 800a622:	6813      	ldr	r3, [r2, #0]
 800a624:	1c58      	adds	r0, r3, #1
 800a626:	6010      	str	r0, [r2, #0]
 800a628:	7019      	strb	r1, [r3, #0]
 800a62a:	4608      	mov	r0, r1
 800a62c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a630:	4770      	bx	lr

0800a632 <__sfputs_r>:
 800a632:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a634:	4606      	mov	r6, r0
 800a636:	460f      	mov	r7, r1
 800a638:	4614      	mov	r4, r2
 800a63a:	18d5      	adds	r5, r2, r3
 800a63c:	42ac      	cmp	r4, r5
 800a63e:	d101      	bne.n	800a644 <__sfputs_r+0x12>
 800a640:	2000      	movs	r0, #0
 800a642:	e007      	b.n	800a654 <__sfputs_r+0x22>
 800a644:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a648:	463a      	mov	r2, r7
 800a64a:	4630      	mov	r0, r6
 800a64c:	f7ff ffda 	bl	800a604 <__sfputc_r>
 800a650:	1c43      	adds	r3, r0, #1
 800a652:	d1f3      	bne.n	800a63c <__sfputs_r+0xa>
 800a654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a658 <_vfiprintf_r>:
 800a658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a65c:	460d      	mov	r5, r1
 800a65e:	b09d      	sub	sp, #116	; 0x74
 800a660:	4614      	mov	r4, r2
 800a662:	4698      	mov	r8, r3
 800a664:	4606      	mov	r6, r0
 800a666:	b118      	cbz	r0, 800a670 <_vfiprintf_r+0x18>
 800a668:	6983      	ldr	r3, [r0, #24]
 800a66a:	b90b      	cbnz	r3, 800a670 <_vfiprintf_r+0x18>
 800a66c:	f7fe fd1e 	bl	80090ac <__sinit>
 800a670:	4b89      	ldr	r3, [pc, #548]	; (800a898 <_vfiprintf_r+0x240>)
 800a672:	429d      	cmp	r5, r3
 800a674:	d11b      	bne.n	800a6ae <_vfiprintf_r+0x56>
 800a676:	6875      	ldr	r5, [r6, #4]
 800a678:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a67a:	07d9      	lsls	r1, r3, #31
 800a67c:	d405      	bmi.n	800a68a <_vfiprintf_r+0x32>
 800a67e:	89ab      	ldrh	r3, [r5, #12]
 800a680:	059a      	lsls	r2, r3, #22
 800a682:	d402      	bmi.n	800a68a <_vfiprintf_r+0x32>
 800a684:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a686:	f7ff f922 	bl	80098ce <__retarget_lock_acquire_recursive>
 800a68a:	89ab      	ldrh	r3, [r5, #12]
 800a68c:	071b      	lsls	r3, r3, #28
 800a68e:	d501      	bpl.n	800a694 <_vfiprintf_r+0x3c>
 800a690:	692b      	ldr	r3, [r5, #16]
 800a692:	b9eb      	cbnz	r3, 800a6d0 <_vfiprintf_r+0x78>
 800a694:	4629      	mov	r1, r5
 800a696:	4630      	mov	r0, r6
 800a698:	f7fd fd06 	bl	80080a8 <__swsetup_r>
 800a69c:	b1c0      	cbz	r0, 800a6d0 <_vfiprintf_r+0x78>
 800a69e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6a0:	07dc      	lsls	r4, r3, #31
 800a6a2:	d50e      	bpl.n	800a6c2 <_vfiprintf_r+0x6a>
 800a6a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6a8:	b01d      	add	sp, #116	; 0x74
 800a6aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ae:	4b7b      	ldr	r3, [pc, #492]	; (800a89c <_vfiprintf_r+0x244>)
 800a6b0:	429d      	cmp	r5, r3
 800a6b2:	d101      	bne.n	800a6b8 <_vfiprintf_r+0x60>
 800a6b4:	68b5      	ldr	r5, [r6, #8]
 800a6b6:	e7df      	b.n	800a678 <_vfiprintf_r+0x20>
 800a6b8:	4b79      	ldr	r3, [pc, #484]	; (800a8a0 <_vfiprintf_r+0x248>)
 800a6ba:	429d      	cmp	r5, r3
 800a6bc:	bf08      	it	eq
 800a6be:	68f5      	ldreq	r5, [r6, #12]
 800a6c0:	e7da      	b.n	800a678 <_vfiprintf_r+0x20>
 800a6c2:	89ab      	ldrh	r3, [r5, #12]
 800a6c4:	0598      	lsls	r0, r3, #22
 800a6c6:	d4ed      	bmi.n	800a6a4 <_vfiprintf_r+0x4c>
 800a6c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6ca:	f7ff f901 	bl	80098d0 <__retarget_lock_release_recursive>
 800a6ce:	e7e9      	b.n	800a6a4 <_vfiprintf_r+0x4c>
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	9309      	str	r3, [sp, #36]	; 0x24
 800a6d4:	2320      	movs	r3, #32
 800a6d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6da:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6de:	2330      	movs	r3, #48	; 0x30
 800a6e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a8a4 <_vfiprintf_r+0x24c>
 800a6e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6e8:	f04f 0901 	mov.w	r9, #1
 800a6ec:	4623      	mov	r3, r4
 800a6ee:	469a      	mov	sl, r3
 800a6f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6f4:	b10a      	cbz	r2, 800a6fa <_vfiprintf_r+0xa2>
 800a6f6:	2a25      	cmp	r2, #37	; 0x25
 800a6f8:	d1f9      	bne.n	800a6ee <_vfiprintf_r+0x96>
 800a6fa:	ebba 0b04 	subs.w	fp, sl, r4
 800a6fe:	d00b      	beq.n	800a718 <_vfiprintf_r+0xc0>
 800a700:	465b      	mov	r3, fp
 800a702:	4622      	mov	r2, r4
 800a704:	4629      	mov	r1, r5
 800a706:	4630      	mov	r0, r6
 800a708:	f7ff ff93 	bl	800a632 <__sfputs_r>
 800a70c:	3001      	adds	r0, #1
 800a70e:	f000 80aa 	beq.w	800a866 <_vfiprintf_r+0x20e>
 800a712:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a714:	445a      	add	r2, fp
 800a716:	9209      	str	r2, [sp, #36]	; 0x24
 800a718:	f89a 3000 	ldrb.w	r3, [sl]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	f000 80a2 	beq.w	800a866 <_vfiprintf_r+0x20e>
 800a722:	2300      	movs	r3, #0
 800a724:	f04f 32ff 	mov.w	r2, #4294967295
 800a728:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a72c:	f10a 0a01 	add.w	sl, sl, #1
 800a730:	9304      	str	r3, [sp, #16]
 800a732:	9307      	str	r3, [sp, #28]
 800a734:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a738:	931a      	str	r3, [sp, #104]	; 0x68
 800a73a:	4654      	mov	r4, sl
 800a73c:	2205      	movs	r2, #5
 800a73e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a742:	4858      	ldr	r0, [pc, #352]	; (800a8a4 <_vfiprintf_r+0x24c>)
 800a744:	f7f5 fd4c 	bl	80001e0 <memchr>
 800a748:	9a04      	ldr	r2, [sp, #16]
 800a74a:	b9d8      	cbnz	r0, 800a784 <_vfiprintf_r+0x12c>
 800a74c:	06d1      	lsls	r1, r2, #27
 800a74e:	bf44      	itt	mi
 800a750:	2320      	movmi	r3, #32
 800a752:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a756:	0713      	lsls	r3, r2, #28
 800a758:	bf44      	itt	mi
 800a75a:	232b      	movmi	r3, #43	; 0x2b
 800a75c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a760:	f89a 3000 	ldrb.w	r3, [sl]
 800a764:	2b2a      	cmp	r3, #42	; 0x2a
 800a766:	d015      	beq.n	800a794 <_vfiprintf_r+0x13c>
 800a768:	9a07      	ldr	r2, [sp, #28]
 800a76a:	4654      	mov	r4, sl
 800a76c:	2000      	movs	r0, #0
 800a76e:	f04f 0c0a 	mov.w	ip, #10
 800a772:	4621      	mov	r1, r4
 800a774:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a778:	3b30      	subs	r3, #48	; 0x30
 800a77a:	2b09      	cmp	r3, #9
 800a77c:	d94e      	bls.n	800a81c <_vfiprintf_r+0x1c4>
 800a77e:	b1b0      	cbz	r0, 800a7ae <_vfiprintf_r+0x156>
 800a780:	9207      	str	r2, [sp, #28]
 800a782:	e014      	b.n	800a7ae <_vfiprintf_r+0x156>
 800a784:	eba0 0308 	sub.w	r3, r0, r8
 800a788:	fa09 f303 	lsl.w	r3, r9, r3
 800a78c:	4313      	orrs	r3, r2
 800a78e:	9304      	str	r3, [sp, #16]
 800a790:	46a2      	mov	sl, r4
 800a792:	e7d2      	b.n	800a73a <_vfiprintf_r+0xe2>
 800a794:	9b03      	ldr	r3, [sp, #12]
 800a796:	1d19      	adds	r1, r3, #4
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	9103      	str	r1, [sp, #12]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	bfbb      	ittet	lt
 800a7a0:	425b      	neglt	r3, r3
 800a7a2:	f042 0202 	orrlt.w	r2, r2, #2
 800a7a6:	9307      	strge	r3, [sp, #28]
 800a7a8:	9307      	strlt	r3, [sp, #28]
 800a7aa:	bfb8      	it	lt
 800a7ac:	9204      	strlt	r2, [sp, #16]
 800a7ae:	7823      	ldrb	r3, [r4, #0]
 800a7b0:	2b2e      	cmp	r3, #46	; 0x2e
 800a7b2:	d10c      	bne.n	800a7ce <_vfiprintf_r+0x176>
 800a7b4:	7863      	ldrb	r3, [r4, #1]
 800a7b6:	2b2a      	cmp	r3, #42	; 0x2a
 800a7b8:	d135      	bne.n	800a826 <_vfiprintf_r+0x1ce>
 800a7ba:	9b03      	ldr	r3, [sp, #12]
 800a7bc:	1d1a      	adds	r2, r3, #4
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	9203      	str	r2, [sp, #12]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	bfb8      	it	lt
 800a7c6:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7ca:	3402      	adds	r4, #2
 800a7cc:	9305      	str	r3, [sp, #20]
 800a7ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a8b4 <_vfiprintf_r+0x25c>
 800a7d2:	7821      	ldrb	r1, [r4, #0]
 800a7d4:	2203      	movs	r2, #3
 800a7d6:	4650      	mov	r0, sl
 800a7d8:	f7f5 fd02 	bl	80001e0 <memchr>
 800a7dc:	b140      	cbz	r0, 800a7f0 <_vfiprintf_r+0x198>
 800a7de:	2340      	movs	r3, #64	; 0x40
 800a7e0:	eba0 000a 	sub.w	r0, r0, sl
 800a7e4:	fa03 f000 	lsl.w	r0, r3, r0
 800a7e8:	9b04      	ldr	r3, [sp, #16]
 800a7ea:	4303      	orrs	r3, r0
 800a7ec:	3401      	adds	r4, #1
 800a7ee:	9304      	str	r3, [sp, #16]
 800a7f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7f4:	482c      	ldr	r0, [pc, #176]	; (800a8a8 <_vfiprintf_r+0x250>)
 800a7f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7fa:	2206      	movs	r2, #6
 800a7fc:	f7f5 fcf0 	bl	80001e0 <memchr>
 800a800:	2800      	cmp	r0, #0
 800a802:	d03f      	beq.n	800a884 <_vfiprintf_r+0x22c>
 800a804:	4b29      	ldr	r3, [pc, #164]	; (800a8ac <_vfiprintf_r+0x254>)
 800a806:	bb1b      	cbnz	r3, 800a850 <_vfiprintf_r+0x1f8>
 800a808:	9b03      	ldr	r3, [sp, #12]
 800a80a:	3307      	adds	r3, #7
 800a80c:	f023 0307 	bic.w	r3, r3, #7
 800a810:	3308      	adds	r3, #8
 800a812:	9303      	str	r3, [sp, #12]
 800a814:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a816:	443b      	add	r3, r7
 800a818:	9309      	str	r3, [sp, #36]	; 0x24
 800a81a:	e767      	b.n	800a6ec <_vfiprintf_r+0x94>
 800a81c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a820:	460c      	mov	r4, r1
 800a822:	2001      	movs	r0, #1
 800a824:	e7a5      	b.n	800a772 <_vfiprintf_r+0x11a>
 800a826:	2300      	movs	r3, #0
 800a828:	3401      	adds	r4, #1
 800a82a:	9305      	str	r3, [sp, #20]
 800a82c:	4619      	mov	r1, r3
 800a82e:	f04f 0c0a 	mov.w	ip, #10
 800a832:	4620      	mov	r0, r4
 800a834:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a838:	3a30      	subs	r2, #48	; 0x30
 800a83a:	2a09      	cmp	r2, #9
 800a83c:	d903      	bls.n	800a846 <_vfiprintf_r+0x1ee>
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d0c5      	beq.n	800a7ce <_vfiprintf_r+0x176>
 800a842:	9105      	str	r1, [sp, #20]
 800a844:	e7c3      	b.n	800a7ce <_vfiprintf_r+0x176>
 800a846:	fb0c 2101 	mla	r1, ip, r1, r2
 800a84a:	4604      	mov	r4, r0
 800a84c:	2301      	movs	r3, #1
 800a84e:	e7f0      	b.n	800a832 <_vfiprintf_r+0x1da>
 800a850:	ab03      	add	r3, sp, #12
 800a852:	9300      	str	r3, [sp, #0]
 800a854:	462a      	mov	r2, r5
 800a856:	4b16      	ldr	r3, [pc, #88]	; (800a8b0 <_vfiprintf_r+0x258>)
 800a858:	a904      	add	r1, sp, #16
 800a85a:	4630      	mov	r0, r6
 800a85c:	f7fb fdb2 	bl	80063c4 <_printf_float>
 800a860:	4607      	mov	r7, r0
 800a862:	1c78      	adds	r0, r7, #1
 800a864:	d1d6      	bne.n	800a814 <_vfiprintf_r+0x1bc>
 800a866:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a868:	07d9      	lsls	r1, r3, #31
 800a86a:	d405      	bmi.n	800a878 <_vfiprintf_r+0x220>
 800a86c:	89ab      	ldrh	r3, [r5, #12]
 800a86e:	059a      	lsls	r2, r3, #22
 800a870:	d402      	bmi.n	800a878 <_vfiprintf_r+0x220>
 800a872:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a874:	f7ff f82c 	bl	80098d0 <__retarget_lock_release_recursive>
 800a878:	89ab      	ldrh	r3, [r5, #12]
 800a87a:	065b      	lsls	r3, r3, #25
 800a87c:	f53f af12 	bmi.w	800a6a4 <_vfiprintf_r+0x4c>
 800a880:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a882:	e711      	b.n	800a6a8 <_vfiprintf_r+0x50>
 800a884:	ab03      	add	r3, sp, #12
 800a886:	9300      	str	r3, [sp, #0]
 800a888:	462a      	mov	r2, r5
 800a88a:	4b09      	ldr	r3, [pc, #36]	; (800a8b0 <_vfiprintf_r+0x258>)
 800a88c:	a904      	add	r1, sp, #16
 800a88e:	4630      	mov	r0, r6
 800a890:	f7fc f83c 	bl	800690c <_printf_i>
 800a894:	e7e4      	b.n	800a860 <_vfiprintf_r+0x208>
 800a896:	bf00      	nop
 800a898:	0800ba00 	.word	0x0800ba00
 800a89c:	0800ba20 	.word	0x0800ba20
 800a8a0:	0800b9e0 	.word	0x0800b9e0
 800a8a4:	0800bc1c 	.word	0x0800bc1c
 800a8a8:	0800bc26 	.word	0x0800bc26
 800a8ac:	080063c5 	.word	0x080063c5
 800a8b0:	0800a633 	.word	0x0800a633
 800a8b4:	0800bc22 	.word	0x0800bc22

0800a8b8 <nan>:
 800a8b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a8c0 <nan+0x8>
 800a8bc:	4770      	bx	lr
 800a8be:	bf00      	nop
 800a8c0:	00000000 	.word	0x00000000
 800a8c4:	7ff80000 	.word	0x7ff80000

0800a8c8 <__sread>:
 800a8c8:	b510      	push	{r4, lr}
 800a8ca:	460c      	mov	r4, r1
 800a8cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8d0:	f000 f922 	bl	800ab18 <_read_r>
 800a8d4:	2800      	cmp	r0, #0
 800a8d6:	bfab      	itete	ge
 800a8d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a8da:	89a3      	ldrhlt	r3, [r4, #12]
 800a8dc:	181b      	addge	r3, r3, r0
 800a8de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a8e2:	bfac      	ite	ge
 800a8e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a8e6:	81a3      	strhlt	r3, [r4, #12]
 800a8e8:	bd10      	pop	{r4, pc}

0800a8ea <__swrite>:
 800a8ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8ee:	461f      	mov	r7, r3
 800a8f0:	898b      	ldrh	r3, [r1, #12]
 800a8f2:	05db      	lsls	r3, r3, #23
 800a8f4:	4605      	mov	r5, r0
 800a8f6:	460c      	mov	r4, r1
 800a8f8:	4616      	mov	r6, r2
 800a8fa:	d505      	bpl.n	800a908 <__swrite+0x1e>
 800a8fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a900:	2302      	movs	r3, #2
 800a902:	2200      	movs	r2, #0
 800a904:	f000 f8b6 	bl	800aa74 <_lseek_r>
 800a908:	89a3      	ldrh	r3, [r4, #12]
 800a90a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a90e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a912:	81a3      	strh	r3, [r4, #12]
 800a914:	4632      	mov	r2, r6
 800a916:	463b      	mov	r3, r7
 800a918:	4628      	mov	r0, r5
 800a91a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a91e:	f000 b835 	b.w	800a98c <_write_r>

0800a922 <__sseek>:
 800a922:	b510      	push	{r4, lr}
 800a924:	460c      	mov	r4, r1
 800a926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a92a:	f000 f8a3 	bl	800aa74 <_lseek_r>
 800a92e:	1c43      	adds	r3, r0, #1
 800a930:	89a3      	ldrh	r3, [r4, #12]
 800a932:	bf15      	itete	ne
 800a934:	6560      	strne	r0, [r4, #84]	; 0x54
 800a936:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a93a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a93e:	81a3      	strheq	r3, [r4, #12]
 800a940:	bf18      	it	ne
 800a942:	81a3      	strhne	r3, [r4, #12]
 800a944:	bd10      	pop	{r4, pc}

0800a946 <__sclose>:
 800a946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a94a:	f000 b84f 	b.w	800a9ec <_close_r>

0800a94e <strncmp>:
 800a94e:	b510      	push	{r4, lr}
 800a950:	b16a      	cbz	r2, 800a96e <strncmp+0x20>
 800a952:	3901      	subs	r1, #1
 800a954:	1884      	adds	r4, r0, r2
 800a956:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a95a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a95e:	4293      	cmp	r3, r2
 800a960:	d103      	bne.n	800a96a <strncmp+0x1c>
 800a962:	42a0      	cmp	r0, r4
 800a964:	d001      	beq.n	800a96a <strncmp+0x1c>
 800a966:	2b00      	cmp	r3, #0
 800a968:	d1f5      	bne.n	800a956 <strncmp+0x8>
 800a96a:	1a98      	subs	r0, r3, r2
 800a96c:	bd10      	pop	{r4, pc}
 800a96e:	4610      	mov	r0, r2
 800a970:	e7fc      	b.n	800a96c <strncmp+0x1e>

0800a972 <__ascii_wctomb>:
 800a972:	b149      	cbz	r1, 800a988 <__ascii_wctomb+0x16>
 800a974:	2aff      	cmp	r2, #255	; 0xff
 800a976:	bf85      	ittet	hi
 800a978:	238a      	movhi	r3, #138	; 0x8a
 800a97a:	6003      	strhi	r3, [r0, #0]
 800a97c:	700a      	strbls	r2, [r1, #0]
 800a97e:	f04f 30ff 	movhi.w	r0, #4294967295
 800a982:	bf98      	it	ls
 800a984:	2001      	movls	r0, #1
 800a986:	4770      	bx	lr
 800a988:	4608      	mov	r0, r1
 800a98a:	4770      	bx	lr

0800a98c <_write_r>:
 800a98c:	b538      	push	{r3, r4, r5, lr}
 800a98e:	4d07      	ldr	r5, [pc, #28]	; (800a9ac <_write_r+0x20>)
 800a990:	4604      	mov	r4, r0
 800a992:	4608      	mov	r0, r1
 800a994:	4611      	mov	r1, r2
 800a996:	2200      	movs	r2, #0
 800a998:	602a      	str	r2, [r5, #0]
 800a99a:	461a      	mov	r2, r3
 800a99c:	f7f6 fb26 	bl	8000fec <_write>
 800a9a0:	1c43      	adds	r3, r0, #1
 800a9a2:	d102      	bne.n	800a9aa <_write_r+0x1e>
 800a9a4:	682b      	ldr	r3, [r5, #0]
 800a9a6:	b103      	cbz	r3, 800a9aa <_write_r+0x1e>
 800a9a8:	6023      	str	r3, [r4, #0]
 800a9aa:	bd38      	pop	{r3, r4, r5, pc}
 800a9ac:	20001cc4 	.word	0x20001cc4

0800a9b0 <__assert_func>:
 800a9b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a9b2:	4614      	mov	r4, r2
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	4b09      	ldr	r3, [pc, #36]	; (800a9dc <__assert_func+0x2c>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	4605      	mov	r5, r0
 800a9bc:	68d8      	ldr	r0, [r3, #12]
 800a9be:	b14c      	cbz	r4, 800a9d4 <__assert_func+0x24>
 800a9c0:	4b07      	ldr	r3, [pc, #28]	; (800a9e0 <__assert_func+0x30>)
 800a9c2:	9100      	str	r1, [sp, #0]
 800a9c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a9c8:	4906      	ldr	r1, [pc, #24]	; (800a9e4 <__assert_func+0x34>)
 800a9ca:	462b      	mov	r3, r5
 800a9cc:	f000 f81e 	bl	800aa0c <fiprintf>
 800a9d0:	f000 f8b4 	bl	800ab3c <abort>
 800a9d4:	4b04      	ldr	r3, [pc, #16]	; (800a9e8 <__assert_func+0x38>)
 800a9d6:	461c      	mov	r4, r3
 800a9d8:	e7f3      	b.n	800a9c2 <__assert_func+0x12>
 800a9da:	bf00      	nop
 800a9dc:	2000006c 	.word	0x2000006c
 800a9e0:	0800bc2d 	.word	0x0800bc2d
 800a9e4:	0800bc3a 	.word	0x0800bc3a
 800a9e8:	0800bc68 	.word	0x0800bc68

0800a9ec <_close_r>:
 800a9ec:	b538      	push	{r3, r4, r5, lr}
 800a9ee:	4d06      	ldr	r5, [pc, #24]	; (800aa08 <_close_r+0x1c>)
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	4604      	mov	r4, r0
 800a9f4:	4608      	mov	r0, r1
 800a9f6:	602b      	str	r3, [r5, #0]
 800a9f8:	f7f6 ffb9 	bl	800196e <_close>
 800a9fc:	1c43      	adds	r3, r0, #1
 800a9fe:	d102      	bne.n	800aa06 <_close_r+0x1a>
 800aa00:	682b      	ldr	r3, [r5, #0]
 800aa02:	b103      	cbz	r3, 800aa06 <_close_r+0x1a>
 800aa04:	6023      	str	r3, [r4, #0]
 800aa06:	bd38      	pop	{r3, r4, r5, pc}
 800aa08:	20001cc4 	.word	0x20001cc4

0800aa0c <fiprintf>:
 800aa0c:	b40e      	push	{r1, r2, r3}
 800aa0e:	b503      	push	{r0, r1, lr}
 800aa10:	4601      	mov	r1, r0
 800aa12:	ab03      	add	r3, sp, #12
 800aa14:	4805      	ldr	r0, [pc, #20]	; (800aa2c <fiprintf+0x20>)
 800aa16:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa1a:	6800      	ldr	r0, [r0, #0]
 800aa1c:	9301      	str	r3, [sp, #4]
 800aa1e:	f7ff fe1b 	bl	800a658 <_vfiprintf_r>
 800aa22:	b002      	add	sp, #8
 800aa24:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa28:	b003      	add	sp, #12
 800aa2a:	4770      	bx	lr
 800aa2c:	2000006c 	.word	0x2000006c

0800aa30 <_fstat_r>:
 800aa30:	b538      	push	{r3, r4, r5, lr}
 800aa32:	4d07      	ldr	r5, [pc, #28]	; (800aa50 <_fstat_r+0x20>)
 800aa34:	2300      	movs	r3, #0
 800aa36:	4604      	mov	r4, r0
 800aa38:	4608      	mov	r0, r1
 800aa3a:	4611      	mov	r1, r2
 800aa3c:	602b      	str	r3, [r5, #0]
 800aa3e:	f7f6 ffa2 	bl	8001986 <_fstat>
 800aa42:	1c43      	adds	r3, r0, #1
 800aa44:	d102      	bne.n	800aa4c <_fstat_r+0x1c>
 800aa46:	682b      	ldr	r3, [r5, #0]
 800aa48:	b103      	cbz	r3, 800aa4c <_fstat_r+0x1c>
 800aa4a:	6023      	str	r3, [r4, #0]
 800aa4c:	bd38      	pop	{r3, r4, r5, pc}
 800aa4e:	bf00      	nop
 800aa50:	20001cc4 	.word	0x20001cc4

0800aa54 <_isatty_r>:
 800aa54:	b538      	push	{r3, r4, r5, lr}
 800aa56:	4d06      	ldr	r5, [pc, #24]	; (800aa70 <_isatty_r+0x1c>)
 800aa58:	2300      	movs	r3, #0
 800aa5a:	4604      	mov	r4, r0
 800aa5c:	4608      	mov	r0, r1
 800aa5e:	602b      	str	r3, [r5, #0]
 800aa60:	f7f6 ffa1 	bl	80019a6 <_isatty>
 800aa64:	1c43      	adds	r3, r0, #1
 800aa66:	d102      	bne.n	800aa6e <_isatty_r+0x1a>
 800aa68:	682b      	ldr	r3, [r5, #0]
 800aa6a:	b103      	cbz	r3, 800aa6e <_isatty_r+0x1a>
 800aa6c:	6023      	str	r3, [r4, #0]
 800aa6e:	bd38      	pop	{r3, r4, r5, pc}
 800aa70:	20001cc4 	.word	0x20001cc4

0800aa74 <_lseek_r>:
 800aa74:	b538      	push	{r3, r4, r5, lr}
 800aa76:	4d07      	ldr	r5, [pc, #28]	; (800aa94 <_lseek_r+0x20>)
 800aa78:	4604      	mov	r4, r0
 800aa7a:	4608      	mov	r0, r1
 800aa7c:	4611      	mov	r1, r2
 800aa7e:	2200      	movs	r2, #0
 800aa80:	602a      	str	r2, [r5, #0]
 800aa82:	461a      	mov	r2, r3
 800aa84:	f7f6 ff9a 	bl	80019bc <_lseek>
 800aa88:	1c43      	adds	r3, r0, #1
 800aa8a:	d102      	bne.n	800aa92 <_lseek_r+0x1e>
 800aa8c:	682b      	ldr	r3, [r5, #0]
 800aa8e:	b103      	cbz	r3, 800aa92 <_lseek_r+0x1e>
 800aa90:	6023      	str	r3, [r4, #0]
 800aa92:	bd38      	pop	{r3, r4, r5, pc}
 800aa94:	20001cc4 	.word	0x20001cc4

0800aa98 <memmove>:
 800aa98:	4288      	cmp	r0, r1
 800aa9a:	b510      	push	{r4, lr}
 800aa9c:	eb01 0402 	add.w	r4, r1, r2
 800aaa0:	d902      	bls.n	800aaa8 <memmove+0x10>
 800aaa2:	4284      	cmp	r4, r0
 800aaa4:	4623      	mov	r3, r4
 800aaa6:	d807      	bhi.n	800aab8 <memmove+0x20>
 800aaa8:	1e43      	subs	r3, r0, #1
 800aaaa:	42a1      	cmp	r1, r4
 800aaac:	d008      	beq.n	800aac0 <memmove+0x28>
 800aaae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aab2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aab6:	e7f8      	b.n	800aaaa <memmove+0x12>
 800aab8:	4402      	add	r2, r0
 800aaba:	4601      	mov	r1, r0
 800aabc:	428a      	cmp	r2, r1
 800aabe:	d100      	bne.n	800aac2 <memmove+0x2a>
 800aac0:	bd10      	pop	{r4, pc}
 800aac2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aac6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aaca:	e7f7      	b.n	800aabc <memmove+0x24>

0800aacc <_realloc_r>:
 800aacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aace:	4607      	mov	r7, r0
 800aad0:	4614      	mov	r4, r2
 800aad2:	460e      	mov	r6, r1
 800aad4:	b921      	cbnz	r1, 800aae0 <_realloc_r+0x14>
 800aad6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800aada:	4611      	mov	r1, r2
 800aadc:	f7fb bb78 	b.w	80061d0 <_malloc_r>
 800aae0:	b922      	cbnz	r2, 800aaec <_realloc_r+0x20>
 800aae2:	f7fb fb25 	bl	8006130 <_free_r>
 800aae6:	4625      	mov	r5, r4
 800aae8:	4628      	mov	r0, r5
 800aaea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aaec:	f000 f82d 	bl	800ab4a <_malloc_usable_size_r>
 800aaf0:	42a0      	cmp	r0, r4
 800aaf2:	d20f      	bcs.n	800ab14 <_realloc_r+0x48>
 800aaf4:	4621      	mov	r1, r4
 800aaf6:	4638      	mov	r0, r7
 800aaf8:	f7fb fb6a 	bl	80061d0 <_malloc_r>
 800aafc:	4605      	mov	r5, r0
 800aafe:	2800      	cmp	r0, #0
 800ab00:	d0f2      	beq.n	800aae8 <_realloc_r+0x1c>
 800ab02:	4631      	mov	r1, r6
 800ab04:	4622      	mov	r2, r4
 800ab06:	f7fb faed 	bl	80060e4 <memcpy>
 800ab0a:	4631      	mov	r1, r6
 800ab0c:	4638      	mov	r0, r7
 800ab0e:	f7fb fb0f 	bl	8006130 <_free_r>
 800ab12:	e7e9      	b.n	800aae8 <_realloc_r+0x1c>
 800ab14:	4635      	mov	r5, r6
 800ab16:	e7e7      	b.n	800aae8 <_realloc_r+0x1c>

0800ab18 <_read_r>:
 800ab18:	b538      	push	{r3, r4, r5, lr}
 800ab1a:	4d07      	ldr	r5, [pc, #28]	; (800ab38 <_read_r+0x20>)
 800ab1c:	4604      	mov	r4, r0
 800ab1e:	4608      	mov	r0, r1
 800ab20:	4611      	mov	r1, r2
 800ab22:	2200      	movs	r2, #0
 800ab24:	602a      	str	r2, [r5, #0]
 800ab26:	461a      	mov	r2, r3
 800ab28:	f7f6 ff04 	bl	8001934 <_read>
 800ab2c:	1c43      	adds	r3, r0, #1
 800ab2e:	d102      	bne.n	800ab36 <_read_r+0x1e>
 800ab30:	682b      	ldr	r3, [r5, #0]
 800ab32:	b103      	cbz	r3, 800ab36 <_read_r+0x1e>
 800ab34:	6023      	str	r3, [r4, #0]
 800ab36:	bd38      	pop	{r3, r4, r5, pc}
 800ab38:	20001cc4 	.word	0x20001cc4

0800ab3c <abort>:
 800ab3c:	b508      	push	{r3, lr}
 800ab3e:	2006      	movs	r0, #6
 800ab40:	f000 f834 	bl	800abac <raise>
 800ab44:	2001      	movs	r0, #1
 800ab46:	f7f6 feeb 	bl	8001920 <_exit>

0800ab4a <_malloc_usable_size_r>:
 800ab4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab4e:	1f18      	subs	r0, r3, #4
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	bfbc      	itt	lt
 800ab54:	580b      	ldrlt	r3, [r1, r0]
 800ab56:	18c0      	addlt	r0, r0, r3
 800ab58:	4770      	bx	lr

0800ab5a <_raise_r>:
 800ab5a:	291f      	cmp	r1, #31
 800ab5c:	b538      	push	{r3, r4, r5, lr}
 800ab5e:	4604      	mov	r4, r0
 800ab60:	460d      	mov	r5, r1
 800ab62:	d904      	bls.n	800ab6e <_raise_r+0x14>
 800ab64:	2316      	movs	r3, #22
 800ab66:	6003      	str	r3, [r0, #0]
 800ab68:	f04f 30ff 	mov.w	r0, #4294967295
 800ab6c:	bd38      	pop	{r3, r4, r5, pc}
 800ab6e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ab70:	b112      	cbz	r2, 800ab78 <_raise_r+0x1e>
 800ab72:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab76:	b94b      	cbnz	r3, 800ab8c <_raise_r+0x32>
 800ab78:	4620      	mov	r0, r4
 800ab7a:	f000 f831 	bl	800abe0 <_getpid_r>
 800ab7e:	462a      	mov	r2, r5
 800ab80:	4601      	mov	r1, r0
 800ab82:	4620      	mov	r0, r4
 800ab84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab88:	f000 b818 	b.w	800abbc <_kill_r>
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	d00a      	beq.n	800aba6 <_raise_r+0x4c>
 800ab90:	1c59      	adds	r1, r3, #1
 800ab92:	d103      	bne.n	800ab9c <_raise_r+0x42>
 800ab94:	2316      	movs	r3, #22
 800ab96:	6003      	str	r3, [r0, #0]
 800ab98:	2001      	movs	r0, #1
 800ab9a:	e7e7      	b.n	800ab6c <_raise_r+0x12>
 800ab9c:	2400      	movs	r4, #0
 800ab9e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aba2:	4628      	mov	r0, r5
 800aba4:	4798      	blx	r3
 800aba6:	2000      	movs	r0, #0
 800aba8:	e7e0      	b.n	800ab6c <_raise_r+0x12>
	...

0800abac <raise>:
 800abac:	4b02      	ldr	r3, [pc, #8]	; (800abb8 <raise+0xc>)
 800abae:	4601      	mov	r1, r0
 800abb0:	6818      	ldr	r0, [r3, #0]
 800abb2:	f7ff bfd2 	b.w	800ab5a <_raise_r>
 800abb6:	bf00      	nop
 800abb8:	2000006c 	.word	0x2000006c

0800abbc <_kill_r>:
 800abbc:	b538      	push	{r3, r4, r5, lr}
 800abbe:	4d07      	ldr	r5, [pc, #28]	; (800abdc <_kill_r+0x20>)
 800abc0:	2300      	movs	r3, #0
 800abc2:	4604      	mov	r4, r0
 800abc4:	4608      	mov	r0, r1
 800abc6:	4611      	mov	r1, r2
 800abc8:	602b      	str	r3, [r5, #0]
 800abca:	f7f6 fe99 	bl	8001900 <_kill>
 800abce:	1c43      	adds	r3, r0, #1
 800abd0:	d102      	bne.n	800abd8 <_kill_r+0x1c>
 800abd2:	682b      	ldr	r3, [r5, #0]
 800abd4:	b103      	cbz	r3, 800abd8 <_kill_r+0x1c>
 800abd6:	6023      	str	r3, [r4, #0]
 800abd8:	bd38      	pop	{r3, r4, r5, pc}
 800abda:	bf00      	nop
 800abdc:	20001cc4 	.word	0x20001cc4

0800abe0 <_getpid_r>:
 800abe0:	f7f6 be86 	b.w	80018f0 <_getpid>

0800abe4 <_init>:
 800abe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abe6:	bf00      	nop
 800abe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abea:	bc08      	pop	{r3}
 800abec:	469e      	mov	lr, r3
 800abee:	4770      	bx	lr

0800abf0 <_fini>:
 800abf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abf2:	bf00      	nop
 800abf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abf6:	bc08      	pop	{r3}
 800abf8:	469e      	mov	lr, r3
 800abfa:	4770      	bx	lr
