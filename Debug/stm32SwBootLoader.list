
stm32SwBootLoader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c14  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000714  08009da8  08009da8  00019da8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4bc  0800a4bc  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4bc  0800a4bc  0001a4bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4c4  0800a4c4  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4c4  0800a4c4  0001a4c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4c8  0800a4c8  0001a4c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800a4cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f8  2**0
                  CONTENTS
 10 .bss          00001b64  200001f8  200001f8  000201f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001d5c  20001d5c  000201f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014a19  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cd2  00000000  00000000  00034c41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ac8  00000000  00000000  00037918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009e8  00000000  00000000  000383e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021661  00000000  00000000  00038dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f4c2  00000000  00000000  0005a429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c81c5  00000000  00000000  000698eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00131ab0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000040a8  00000000  00000000  00131b04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009d8c 	.word	0x08009d8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	08009d8c 	.word	0x08009d8c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, 10);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	230a      	movs	r3, #10
 8000ffe:	68b9      	ldr	r1, [r7, #8]
 8001000:	4803      	ldr	r0, [pc, #12]	; (8001010 <_write+0x24>)
 8001002:	f002 fba9 	bl	8003758 <HAL_UART_Transmit>
  return len;
 8001006:	687b      	ldr	r3, [r7, #4]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	2000041c 	.word	0x2000041c

08001014 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 8001018:	4b0d      	ldr	r3, [pc, #52]	; (8001050 <main+0x3c>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f005 f91b 	bl	800625c <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001026:	f000 fdbb 	bl	8001ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800102a:	f000 f817 	bl	800105c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102e:	f000 f953 	bl	80012d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001032:	f000 f8fb 	bl	800122c <MX_DMA_Init>
  MX_UART4_Init();
 8001036:	f000 f87b 	bl	8001130 <MX_UART4_Init>
  MX_USART2_UART_Init();
 800103a:	f000 f8cd 	bl	80011d8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800103e:	f000 f8a1 	bl	8001184 <MX_USART1_UART_Init>

//	sotfEmulations_configuration();
#endif

#if (USE_HOST_BOOTLOADER == 1)
  hostUartBootLoaderConfiguration(&host, &huart2);
 8001042:	4904      	ldr	r1, [pc, #16]	; (8001054 <main+0x40>)
 8001044:	4804      	ldr	r0, [pc, #16]	; (8001058 <main+0x44>)
 8001046:	f003 fc93 	bl	8004970 <hostUartBootLoaderConfiguration>
#if (USE_MAVLINK_BOOTLOADER == 1)
	  swBootLoader_process();
#endif

#if (USE_HOST_BOOTLOADER == 1)
	  hostUartBootLoaderProcess();
 800104a:	f003 ff11 	bl	8004e70 <hostUartBootLoaderProcess>
 800104e:	e7fc      	b.n	800104a <main+0x36>
 8001050:	20000024 	.word	0x20000024
 8001054:	200004a4 	.word	0x200004a4
 8001058:	200002f4 	.word	0x200002f4

0800105c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b094      	sub	sp, #80	; 0x50
 8001060:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001062:	f107 0320 	add.w	r3, r7, #32
 8001066:	2230      	movs	r2, #48	; 0x30
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f004 f91c 	bl	80052a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001080:	2300      	movs	r3, #0
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	4b28      	ldr	r3, [pc, #160]	; (8001128 <SystemClock_Config+0xcc>)
 8001086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001088:	4a27      	ldr	r2, [pc, #156]	; (8001128 <SystemClock_Config+0xcc>)
 800108a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108e:	6413      	str	r3, [r2, #64]	; 0x40
 8001090:	4b25      	ldr	r3, [pc, #148]	; (8001128 <SystemClock_Config+0xcc>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800109c:	2300      	movs	r3, #0
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	4b22      	ldr	r3, [pc, #136]	; (800112c <SystemClock_Config+0xd0>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a21      	ldr	r2, [pc, #132]	; (800112c <SystemClock_Config+0xd0>)
 80010a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010aa:	6013      	str	r3, [r2, #0]
 80010ac:	4b1f      	ldr	r3, [pc, #124]	; (800112c <SystemClock_Config+0xd0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010b8:	2301      	movs	r3, #1
 80010ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c2:	2302      	movs	r3, #2
 80010c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010cc:	2304      	movs	r3, #4
 80010ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010d0:	23a8      	movs	r3, #168	; 0xa8
 80010d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010d4:	2302      	movs	r3, #2
 80010d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010d8:	2304      	movs	r3, #4
 80010da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010dc:	f107 0320 	add.w	r3, r7, #32
 80010e0:	4618      	mov	r0, r3
 80010e2:	f001 fe49 	bl	8002d78 <HAL_RCC_OscConfig>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010ec:	f000 f946 	bl	800137c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f0:	230f      	movs	r3, #15
 80010f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f4:	2302      	movs	r3, #2
 80010f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001100:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001102:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001106:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	2105      	movs	r1, #5
 800110e:	4618      	mov	r0, r3
 8001110:	f002 f8aa 	bl	8003268 <HAL_RCC_ClockConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800111a:	f000 f92f 	bl	800137c <Error_Handler>
  }
}
 800111e:	bf00      	nop
 8001120:	3750      	adds	r7, #80	; 0x50
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40023800 	.word	0x40023800
 800112c:	40007000 	.word	0x40007000

08001130 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <MX_UART4_Init+0x4c>)
 8001136:	4a12      	ldr	r2, [pc, #72]	; (8001180 <MX_UART4_Init+0x50>)
 8001138:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800113a:	4b10      	ldr	r3, [pc, #64]	; (800117c <MX_UART4_Init+0x4c>)
 800113c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001140:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <MX_UART4_Init+0x4c>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <MX_UART4_Init+0x4c>)
 800114a:	2200      	movs	r2, #0
 800114c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800114e:	4b0b      	ldr	r3, [pc, #44]	; (800117c <MX_UART4_Init+0x4c>)
 8001150:	2200      	movs	r2, #0
 8001152:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001154:	4b09      	ldr	r3, [pc, #36]	; (800117c <MX_UART4_Init+0x4c>)
 8001156:	220c      	movs	r2, #12
 8001158:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800115a:	4b08      	ldr	r3, [pc, #32]	; (800117c <MX_UART4_Init+0x4c>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <MX_UART4_Init+0x4c>)
 8001162:	2200      	movs	r2, #0
 8001164:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001166:	4805      	ldr	r0, [pc, #20]	; (800117c <MX_UART4_Init+0x4c>)
 8001168:	f002 fa7a 	bl	8003660 <HAL_UART_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001172:	f000 f903 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000460 	.word	0x20000460
 8001180:	40004c00 	.word	0x40004c00

08001184 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <MX_USART1_UART_Init+0x4c>)
 800118a:	4a12      	ldr	r2, [pc, #72]	; (80011d4 <MX_USART1_UART_Init+0x50>)
 800118c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800118e:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <MX_USART1_UART_Init+0x4c>)
 8001190:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001194:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001196:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <MX_USART1_UART_Init+0x4c>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800119c:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <MX_USART1_UART_Init+0x4c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011a2:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <MX_USART1_UART_Init+0x4c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011a8:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <MX_USART1_UART_Init+0x4c>)
 80011aa:	220c      	movs	r2, #12
 80011ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ae:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <MX_USART1_UART_Init+0x4c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <MX_USART1_UART_Init+0x4c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011ba:	4805      	ldr	r0, [pc, #20]	; (80011d0 <MX_USART1_UART_Init+0x4c>)
 80011bc:	f002 fa50 	bl	8003660 <HAL_UART_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011c6:	f000 f8d9 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	2000041c 	.word	0x2000041c
 80011d4:	40011000 	.word	0x40011000

080011d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <MX_USART2_UART_Init+0x4c>)
 80011de:	4a12      	ldr	r2, [pc, #72]	; (8001228 <MX_USART2_UART_Init+0x50>)
 80011e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <MX_USART2_UART_Init+0x4c>)
 80011e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <MX_USART2_UART_Init+0x4c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <MX_USART2_UART_Init+0x4c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <MX_USART2_UART_Init+0x4c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011fc:	4b09      	ldr	r3, [pc, #36]	; (8001224 <MX_USART2_UART_Init+0x4c>)
 80011fe:	220c      	movs	r2, #12
 8001200:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001202:	4b08      	ldr	r3, [pc, #32]	; (8001224 <MX_USART2_UART_Init+0x4c>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <MX_USART2_UART_Init+0x4c>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800120e:	4805      	ldr	r0, [pc, #20]	; (8001224 <MX_USART2_UART_Init+0x4c>)
 8001210:	f002 fa26 	bl	8003660 <HAL_UART_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800121a:	f000 f8af 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	200004a4 	.word	0x200004a4
 8001228:	40004400 	.word	0x40004400

0800122c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	4b27      	ldr	r3, [pc, #156]	; (80012d4 <MX_DMA_Init+0xa8>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a26      	ldr	r2, [pc, #152]	; (80012d4 <MX_DMA_Init+0xa8>)
 800123c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b24      	ldr	r3, [pc, #144]	; (80012d4 <MX_DMA_Init+0xa8>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	603b      	str	r3, [r7, #0]
 8001252:	4b20      	ldr	r3, [pc, #128]	; (80012d4 <MX_DMA_Init+0xa8>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a1f      	ldr	r2, [pc, #124]	; (80012d4 <MX_DMA_Init+0xa8>)
 8001258:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <MX_DMA_Init+0xa8>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001266:	603b      	str	r3, [r7, #0]
 8001268:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	2100      	movs	r1, #0
 800126e:	200d      	movs	r0, #13
 8001270:	f000 fe2b 	bl	8001eca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001274:	200d      	movs	r0, #13
 8001276:	f000 fe44 	bl	8001f02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800127a:	2200      	movs	r2, #0
 800127c:	2100      	movs	r1, #0
 800127e:	200f      	movs	r0, #15
 8001280:	f000 fe23 	bl	8001eca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001284:	200f      	movs	r0, #15
 8001286:	f000 fe3c 	bl	8001f02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	2100      	movs	r1, #0
 800128e:	2010      	movs	r0, #16
 8001290:	f000 fe1b 	bl	8001eca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001294:	2010      	movs	r0, #16
 8001296:	f000 fe34 	bl	8001f02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	2100      	movs	r1, #0
 800129e:	2011      	movs	r0, #17
 80012a0:	f000 fe13 	bl	8001eca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80012a4:	2011      	movs	r0, #17
 80012a6:	f000 fe2c 	bl	8001f02 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2100      	movs	r1, #0
 80012ae:	203a      	movs	r0, #58	; 0x3a
 80012b0:	f000 fe0b 	bl	8001eca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80012b4:	203a      	movs	r0, #58	; 0x3a
 80012b6:	f000 fe24 	bl	8001f02 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2100      	movs	r1, #0
 80012be:	2046      	movs	r0, #70	; 0x46
 80012c0:	f000 fe03 	bl	8001eca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80012c4:	2046      	movs	r0, #70	; 0x46
 80012c6:	f000 fe1c 	bl	8001f02 <HAL_NVIC_EnableIRQ>

}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40023800 	.word	0x40023800

080012d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012de:	f107 030c 	add.w	r3, r7, #12
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
 80012ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	4b20      	ldr	r3, [pc, #128]	; (8001374 <MX_GPIO_Init+0x9c>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a1f      	ldr	r2, [pc, #124]	; (8001374 <MX_GPIO_Init+0x9c>)
 80012f8:	f043 0304 	orr.w	r3, r3, #4
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <MX_GPIO_Init+0x9c>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0304 	and.w	r3, r3, #4
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	607b      	str	r3, [r7, #4]
 800130e:	4b19      	ldr	r3, [pc, #100]	; (8001374 <MX_GPIO_Init+0x9c>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a18      	ldr	r2, [pc, #96]	; (8001374 <MX_GPIO_Init+0x9c>)
 8001314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b16      	ldr	r3, [pc, #88]	; (8001374 <MX_GPIO_Init+0x9c>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	603b      	str	r3, [r7, #0]
 800132a:	4b12      	ldr	r3, [pc, #72]	; (8001374 <MX_GPIO_Init+0x9c>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a11      	ldr	r2, [pc, #68]	; (8001374 <MX_GPIO_Init+0x9c>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <MX_GPIO_Init+0x9c>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	603b      	str	r3, [r7, #0]
 8001340:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 8001342:	2201      	movs	r2, #1
 8001344:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001348:	480b      	ldr	r0, [pc, #44]	; (8001378 <MX_GPIO_Init+0xa0>)
 800134a:	f001 fcfb 	bl	8002d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800134e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001352:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001354:	2301      	movs	r3, #1
 8001356:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135c:	2300      	movs	r3, #0
 800135e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	4619      	mov	r1, r3
 8001366:	4804      	ldr	r0, [pc, #16]	; (8001378 <MX_GPIO_Init+0xa0>)
 8001368:	f001 fa54 	bl	8002814 <HAL_GPIO_Init>

}
 800136c:	bf00      	nop
 800136e:	3720      	adds	r7, #32
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40023800 	.word	0x40023800
 8001378:	40020800 	.word	0x40020800

0800137c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001380:	b672      	cpsid	i
}
 8001382:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("\n[Error_Handler] ......\n");
 8001384:	4803      	ldr	r0, [pc, #12]	; (8001394 <Error_Handler+0x18>)
 8001386:	f004 ff51 	bl	800622c <puts>
	  HAL_Delay(1000);
 800138a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800138e:	f000 fc79 	bl	8001c84 <HAL_Delay>
	  printf("\n[Error_Handler] ......\n");
 8001392:	e7f7      	b.n	8001384 <Error_Handler+0x8>
 8001394:	08009da8 	.word	0x08009da8

08001398 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	607b      	str	r3, [r7, #4]
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <HAL_MspInit+0x4c>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	4a0f      	ldr	r2, [pc, #60]	; (80013e4 <HAL_MspInit+0x4c>)
 80013a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ac:	6453      	str	r3, [r2, #68]	; 0x44
 80013ae:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <HAL_MspInit+0x4c>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	603b      	str	r3, [r7, #0]
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <HAL_MspInit+0x4c>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	4a08      	ldr	r2, [pc, #32]	; (80013e4 <HAL_MspInit+0x4c>)
 80013c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <HAL_MspInit+0x4c>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d2:	603b      	str	r3, [r7, #0]
 80013d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	40023800 	.word	0x40023800

080013e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08e      	sub	sp, #56	; 0x38
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a98      	ldr	r2, [pc, #608]	; (8001668 <HAL_UART_MspInit+0x280>)
 8001406:	4293      	cmp	r3, r2
 8001408:	f040 8095 	bne.w	8001536 <HAL_UART_MspInit+0x14e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800140c:	2300      	movs	r3, #0
 800140e:	623b      	str	r3, [r7, #32]
 8001410:	4b96      	ldr	r3, [pc, #600]	; (800166c <HAL_UART_MspInit+0x284>)
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	4a95      	ldr	r2, [pc, #596]	; (800166c <HAL_UART_MspInit+0x284>)
 8001416:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800141a:	6413      	str	r3, [r2, #64]	; 0x40
 800141c:	4b93      	ldr	r3, [pc, #588]	; (800166c <HAL_UART_MspInit+0x284>)
 800141e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001420:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001424:	623b      	str	r3, [r7, #32]
 8001426:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001428:	2300      	movs	r3, #0
 800142a:	61fb      	str	r3, [r7, #28]
 800142c:	4b8f      	ldr	r3, [pc, #572]	; (800166c <HAL_UART_MspInit+0x284>)
 800142e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001430:	4a8e      	ldr	r2, [pc, #568]	; (800166c <HAL_UART_MspInit+0x284>)
 8001432:	f043 0304 	orr.w	r3, r3, #4
 8001436:	6313      	str	r3, [r2, #48]	; 0x30
 8001438:	4b8c      	ldr	r3, [pc, #560]	; (800166c <HAL_UART_MspInit+0x284>)
 800143a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143c:	f003 0304 	and.w	r3, r3, #4
 8001440:	61fb      	str	r3, [r7, #28]
 8001442:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001444:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	2302      	movs	r3, #2
 800144c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001452:	2303      	movs	r3, #3
 8001454:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001456:	2308      	movs	r3, #8
 8001458:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800145a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145e:	4619      	mov	r1, r3
 8001460:	4883      	ldr	r0, [pc, #524]	; (8001670 <HAL_UART_MspInit+0x288>)
 8001462:	f001 f9d7 	bl	8002814 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8001466:	4b83      	ldr	r3, [pc, #524]	; (8001674 <HAL_UART_MspInit+0x28c>)
 8001468:	4a83      	ldr	r2, [pc, #524]	; (8001678 <HAL_UART_MspInit+0x290>)
 800146a:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 800146c:	4b81      	ldr	r3, [pc, #516]	; (8001674 <HAL_UART_MspInit+0x28c>)
 800146e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001472:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001474:	4b7f      	ldr	r3, [pc, #508]	; (8001674 <HAL_UART_MspInit+0x28c>)
 8001476:	2240      	movs	r2, #64	; 0x40
 8001478:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800147a:	4b7e      	ldr	r3, [pc, #504]	; (8001674 <HAL_UART_MspInit+0x28c>)
 800147c:	2200      	movs	r2, #0
 800147e:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001480:	4b7c      	ldr	r3, [pc, #496]	; (8001674 <HAL_UART_MspInit+0x28c>)
 8001482:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001486:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001488:	4b7a      	ldr	r3, [pc, #488]	; (8001674 <HAL_UART_MspInit+0x28c>)
 800148a:	2200      	movs	r2, #0
 800148c:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800148e:	4b79      	ldr	r3, [pc, #484]	; (8001674 <HAL_UART_MspInit+0x28c>)
 8001490:	2200      	movs	r2, #0
 8001492:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001494:	4b77      	ldr	r3, [pc, #476]	; (8001674 <HAL_UART_MspInit+0x28c>)
 8001496:	2200      	movs	r2, #0
 8001498:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800149a:	4b76      	ldr	r3, [pc, #472]	; (8001674 <HAL_UART_MspInit+0x28c>)
 800149c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014a0:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014a2:	4b74      	ldr	r3, [pc, #464]	; (8001674 <HAL_UART_MspInit+0x28c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80014a8:	4872      	ldr	r0, [pc, #456]	; (8001674 <HAL_UART_MspInit+0x28c>)
 80014aa:	f000 fd53 	bl	8001f54 <HAL_DMA_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80014b4:	f7ff ff62 	bl	800137c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4a6e      	ldr	r2, [pc, #440]	; (8001674 <HAL_UART_MspInit+0x28c>)
 80014bc:	635a      	str	r2, [r3, #52]	; 0x34
 80014be:	4a6d      	ldr	r2, [pc, #436]	; (8001674 <HAL_UART_MspInit+0x28c>)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80014c4:	4b6d      	ldr	r3, [pc, #436]	; (800167c <HAL_UART_MspInit+0x294>)
 80014c6:	4a6e      	ldr	r2, [pc, #440]	; (8001680 <HAL_UART_MspInit+0x298>)
 80014c8:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80014ca:	4b6c      	ldr	r3, [pc, #432]	; (800167c <HAL_UART_MspInit+0x294>)
 80014cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014d0:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014d2:	4b6a      	ldr	r3, [pc, #424]	; (800167c <HAL_UART_MspInit+0x294>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014d8:	4b68      	ldr	r3, [pc, #416]	; (800167c <HAL_UART_MspInit+0x294>)
 80014da:	2200      	movs	r2, #0
 80014dc:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014de:	4b67      	ldr	r3, [pc, #412]	; (800167c <HAL_UART_MspInit+0x294>)
 80014e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014e4:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014e6:	4b65      	ldr	r3, [pc, #404]	; (800167c <HAL_UART_MspInit+0x294>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014ec:	4b63      	ldr	r3, [pc, #396]	; (800167c <HAL_UART_MspInit+0x294>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80014f2:	4b62      	ldr	r3, [pc, #392]	; (800167c <HAL_UART_MspInit+0x294>)
 80014f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014f8:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80014fa:	4b60      	ldr	r3, [pc, #384]	; (800167c <HAL_UART_MspInit+0x294>)
 80014fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001500:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001502:	4b5e      	ldr	r3, [pc, #376]	; (800167c <HAL_UART_MspInit+0x294>)
 8001504:	2200      	movs	r2, #0
 8001506:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001508:	485c      	ldr	r0, [pc, #368]	; (800167c <HAL_UART_MspInit+0x294>)
 800150a:	f000 fd23 	bl	8001f54 <HAL_DMA_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 8001514:	f7ff ff32 	bl	800137c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a58      	ldr	r2, [pc, #352]	; (800167c <HAL_UART_MspInit+0x294>)
 800151c:	639a      	str	r2, [r3, #56]	; 0x38
 800151e:	4a57      	ldr	r2, [pc, #348]	; (800167c <HAL_UART_MspInit+0x294>)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001524:	2200      	movs	r2, #0
 8001526:	2100      	movs	r1, #0
 8001528:	2034      	movs	r0, #52	; 0x34
 800152a:	f000 fcce 	bl	8001eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800152e:	2034      	movs	r0, #52	; 0x34
 8001530:	f000 fce7 	bl	8001f02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001534:	e14b      	b.n	80017ce <HAL_UART_MspInit+0x3e6>
  else if(huart->Instance==USART1)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a52      	ldr	r2, [pc, #328]	; (8001684 <HAL_UART_MspInit+0x29c>)
 800153c:	4293      	cmp	r3, r2
 800153e:	f040 80ad 	bne.w	800169c <HAL_UART_MspInit+0x2b4>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	61bb      	str	r3, [r7, #24]
 8001546:	4b49      	ldr	r3, [pc, #292]	; (800166c <HAL_UART_MspInit+0x284>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	4a48      	ldr	r2, [pc, #288]	; (800166c <HAL_UART_MspInit+0x284>)
 800154c:	f043 0310 	orr.w	r3, r3, #16
 8001550:	6453      	str	r3, [r2, #68]	; 0x44
 8001552:	4b46      	ldr	r3, [pc, #280]	; (800166c <HAL_UART_MspInit+0x284>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	f003 0310 	and.w	r3, r3, #16
 800155a:	61bb      	str	r3, [r7, #24]
 800155c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	4b42      	ldr	r3, [pc, #264]	; (800166c <HAL_UART_MspInit+0x284>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	4a41      	ldr	r2, [pc, #260]	; (800166c <HAL_UART_MspInit+0x284>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6313      	str	r3, [r2, #48]	; 0x30
 800156e:	4b3f      	ldr	r3, [pc, #252]	; (800166c <HAL_UART_MspInit+0x284>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800157a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001580:	2302      	movs	r3, #2
 8001582:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001588:	2303      	movs	r3, #3
 800158a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800158c:	2307      	movs	r3, #7
 800158e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001590:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001594:	4619      	mov	r1, r3
 8001596:	483c      	ldr	r0, [pc, #240]	; (8001688 <HAL_UART_MspInit+0x2a0>)
 8001598:	f001 f93c 	bl	8002814 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800159c:	4b3b      	ldr	r3, [pc, #236]	; (800168c <HAL_UART_MspInit+0x2a4>)
 800159e:	4a3c      	ldr	r2, [pc, #240]	; (8001690 <HAL_UART_MspInit+0x2a8>)
 80015a0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80015a2:	4b3a      	ldr	r3, [pc, #232]	; (800168c <HAL_UART_MspInit+0x2a4>)
 80015a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015a8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015aa:	4b38      	ldr	r3, [pc, #224]	; (800168c <HAL_UART_MspInit+0x2a4>)
 80015ac:	2240      	movs	r2, #64	; 0x40
 80015ae:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015b0:	4b36      	ldr	r3, [pc, #216]	; (800168c <HAL_UART_MspInit+0x2a4>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015b6:	4b35      	ldr	r3, [pc, #212]	; (800168c <HAL_UART_MspInit+0x2a4>)
 80015b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015bc:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015be:	4b33      	ldr	r3, [pc, #204]	; (800168c <HAL_UART_MspInit+0x2a4>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015c4:	4b31      	ldr	r3, [pc, #196]	; (800168c <HAL_UART_MspInit+0x2a4>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80015ca:	4b30      	ldr	r3, [pc, #192]	; (800168c <HAL_UART_MspInit+0x2a4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015d0:	4b2e      	ldr	r3, [pc, #184]	; (800168c <HAL_UART_MspInit+0x2a4>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015d6:	4b2d      	ldr	r3, [pc, #180]	; (800168c <HAL_UART_MspInit+0x2a4>)
 80015d8:	2200      	movs	r2, #0
 80015da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80015dc:	482b      	ldr	r0, [pc, #172]	; (800168c <HAL_UART_MspInit+0x2a4>)
 80015de:	f000 fcb9 	bl	8001f54 <HAL_DMA_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <HAL_UART_MspInit+0x204>
      Error_Handler();
 80015e8:	f7ff fec8 	bl	800137c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a27      	ldr	r2, [pc, #156]	; (800168c <HAL_UART_MspInit+0x2a4>)
 80015f0:	635a      	str	r2, [r3, #52]	; 0x34
 80015f2:	4a26      	ldr	r2, [pc, #152]	; (800168c <HAL_UART_MspInit+0x2a4>)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80015f8:	4b26      	ldr	r3, [pc, #152]	; (8001694 <HAL_UART_MspInit+0x2ac>)
 80015fa:	4a27      	ldr	r2, [pc, #156]	; (8001698 <HAL_UART_MspInit+0x2b0>)
 80015fc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80015fe:	4b25      	ldr	r3, [pc, #148]	; (8001694 <HAL_UART_MspInit+0x2ac>)
 8001600:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001604:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001606:	4b23      	ldr	r3, [pc, #140]	; (8001694 <HAL_UART_MspInit+0x2ac>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800160c:	4b21      	ldr	r3, [pc, #132]	; (8001694 <HAL_UART_MspInit+0x2ac>)
 800160e:	2200      	movs	r2, #0
 8001610:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001612:	4b20      	ldr	r3, [pc, #128]	; (8001694 <HAL_UART_MspInit+0x2ac>)
 8001614:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001618:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800161a:	4b1e      	ldr	r3, [pc, #120]	; (8001694 <HAL_UART_MspInit+0x2ac>)
 800161c:	2200      	movs	r2, #0
 800161e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001620:	4b1c      	ldr	r3, [pc, #112]	; (8001694 <HAL_UART_MspInit+0x2ac>)
 8001622:	2200      	movs	r2, #0
 8001624:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001626:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <HAL_UART_MspInit+0x2ac>)
 8001628:	f44f 7280 	mov.w	r2, #256	; 0x100
 800162c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800162e:	4b19      	ldr	r3, [pc, #100]	; (8001694 <HAL_UART_MspInit+0x2ac>)
 8001630:	2200      	movs	r2, #0
 8001632:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001634:	4b17      	ldr	r3, [pc, #92]	; (8001694 <HAL_UART_MspInit+0x2ac>)
 8001636:	2200      	movs	r2, #0
 8001638:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800163a:	4816      	ldr	r0, [pc, #88]	; (8001694 <HAL_UART_MspInit+0x2ac>)
 800163c:	f000 fc8a 	bl	8001f54 <HAL_DMA_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <HAL_UART_MspInit+0x262>
      Error_Handler();
 8001646:	f7ff fe99 	bl	800137c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a11      	ldr	r2, [pc, #68]	; (8001694 <HAL_UART_MspInit+0x2ac>)
 800164e:	639a      	str	r2, [r3, #56]	; 0x38
 8001650:	4a10      	ldr	r2, [pc, #64]	; (8001694 <HAL_UART_MspInit+0x2ac>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001656:	2200      	movs	r2, #0
 8001658:	2100      	movs	r1, #0
 800165a:	2025      	movs	r0, #37	; 0x25
 800165c:	f000 fc35 	bl	8001eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001660:	2025      	movs	r0, #37	; 0x25
 8001662:	f000 fc4e 	bl	8001f02 <HAL_NVIC_EnableIRQ>
}
 8001666:	e0b2      	b.n	80017ce <HAL_UART_MspInit+0x3e6>
 8001668:	40004c00 	.word	0x40004c00
 800166c:	40023800 	.word	0x40023800
 8001670:	40020800 	.word	0x40020800
 8001674:	200004e8 	.word	0x200004e8
 8001678:	40026070 	.word	0x40026070
 800167c:	20000234 	.word	0x20000234
 8001680:	40026040 	.word	0x40026040
 8001684:	40011000 	.word	0x40011000
 8001688:	40020000 	.word	0x40020000
 800168c:	200002fc 	.word	0x200002fc
 8001690:	400264b8 	.word	0x400264b8
 8001694:	2000035c 	.word	0x2000035c
 8001698:	40026440 	.word	0x40026440
  else if(huart->Instance==USART2)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a4d      	ldr	r2, [pc, #308]	; (80017d8 <HAL_UART_MspInit+0x3f0>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	f040 8093 	bne.w	80017ce <HAL_UART_MspInit+0x3e6>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016a8:	2300      	movs	r3, #0
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	4b4b      	ldr	r3, [pc, #300]	; (80017dc <HAL_UART_MspInit+0x3f4>)
 80016ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b0:	4a4a      	ldr	r2, [pc, #296]	; (80017dc <HAL_UART_MspInit+0x3f4>)
 80016b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b6:	6413      	str	r3, [r2, #64]	; 0x40
 80016b8:	4b48      	ldr	r3, [pc, #288]	; (80017dc <HAL_UART_MspInit+0x3f4>)
 80016ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c4:	2300      	movs	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	4b44      	ldr	r3, [pc, #272]	; (80017dc <HAL_UART_MspInit+0x3f4>)
 80016ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016cc:	4a43      	ldr	r2, [pc, #268]	; (80017dc <HAL_UART_MspInit+0x3f4>)
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	6313      	str	r3, [r2, #48]	; 0x30
 80016d4:	4b41      	ldr	r3, [pc, #260]	; (80017dc <HAL_UART_MspInit+0x3f4>)
 80016d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d8:	f003 0301 	and.w	r3, r3, #1
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016e0:	230c      	movs	r3, #12
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	2302      	movs	r3, #2
 80016e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ec:	2303      	movs	r3, #3
 80016ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016f0:	2307      	movs	r3, #7
 80016f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f8:	4619      	mov	r1, r3
 80016fa:	4839      	ldr	r0, [pc, #228]	; (80017e0 <HAL_UART_MspInit+0x3f8>)
 80016fc:	f001 f88a 	bl	8002814 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001700:	4b38      	ldr	r3, [pc, #224]	; (80017e4 <HAL_UART_MspInit+0x3fc>)
 8001702:	4a39      	ldr	r2, [pc, #228]	; (80017e8 <HAL_UART_MspInit+0x400>)
 8001704:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001706:	4b37      	ldr	r3, [pc, #220]	; (80017e4 <HAL_UART_MspInit+0x3fc>)
 8001708:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800170c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800170e:	4b35      	ldr	r3, [pc, #212]	; (80017e4 <HAL_UART_MspInit+0x3fc>)
 8001710:	2240      	movs	r2, #64	; 0x40
 8001712:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001714:	4b33      	ldr	r3, [pc, #204]	; (80017e4 <HAL_UART_MspInit+0x3fc>)
 8001716:	2200      	movs	r2, #0
 8001718:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800171a:	4b32      	ldr	r3, [pc, #200]	; (80017e4 <HAL_UART_MspInit+0x3fc>)
 800171c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001720:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001722:	4b30      	ldr	r3, [pc, #192]	; (80017e4 <HAL_UART_MspInit+0x3fc>)
 8001724:	2200      	movs	r2, #0
 8001726:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001728:	4b2e      	ldr	r3, [pc, #184]	; (80017e4 <HAL_UART_MspInit+0x3fc>)
 800172a:	2200      	movs	r2, #0
 800172c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800172e:	4b2d      	ldr	r3, [pc, #180]	; (80017e4 <HAL_UART_MspInit+0x3fc>)
 8001730:	2200      	movs	r2, #0
 8001732:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001734:	4b2b      	ldr	r3, [pc, #172]	; (80017e4 <HAL_UART_MspInit+0x3fc>)
 8001736:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800173a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800173c:	4b29      	ldr	r3, [pc, #164]	; (80017e4 <HAL_UART_MspInit+0x3fc>)
 800173e:	2200      	movs	r2, #0
 8001740:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001742:	4828      	ldr	r0, [pc, #160]	; (80017e4 <HAL_UART_MspInit+0x3fc>)
 8001744:	f000 fc06 	bl	8001f54 <HAL_DMA_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_UART_MspInit+0x36a>
      Error_Handler();
 800174e:	f7ff fe15 	bl	800137c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a23      	ldr	r2, [pc, #140]	; (80017e4 <HAL_UART_MspInit+0x3fc>)
 8001756:	635a      	str	r2, [r3, #52]	; 0x34
 8001758:	4a22      	ldr	r2, [pc, #136]	; (80017e4 <HAL_UART_MspInit+0x3fc>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800175e:	4b23      	ldr	r3, [pc, #140]	; (80017ec <HAL_UART_MspInit+0x404>)
 8001760:	4a23      	ldr	r2, [pc, #140]	; (80017f0 <HAL_UART_MspInit+0x408>)
 8001762:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001764:	4b21      	ldr	r3, [pc, #132]	; (80017ec <HAL_UART_MspInit+0x404>)
 8001766:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800176a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800176c:	4b1f      	ldr	r3, [pc, #124]	; (80017ec <HAL_UART_MspInit+0x404>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001772:	4b1e      	ldr	r3, [pc, #120]	; (80017ec <HAL_UART_MspInit+0x404>)
 8001774:	2200      	movs	r2, #0
 8001776:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001778:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <HAL_UART_MspInit+0x404>)
 800177a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800177e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001780:	4b1a      	ldr	r3, [pc, #104]	; (80017ec <HAL_UART_MspInit+0x404>)
 8001782:	2200      	movs	r2, #0
 8001784:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001786:	4b19      	ldr	r3, [pc, #100]	; (80017ec <HAL_UART_MspInit+0x404>)
 8001788:	2200      	movs	r2, #0
 800178a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800178c:	4b17      	ldr	r3, [pc, #92]	; (80017ec <HAL_UART_MspInit+0x404>)
 800178e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001792:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001794:	4b15      	ldr	r3, [pc, #84]	; (80017ec <HAL_UART_MspInit+0x404>)
 8001796:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800179a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800179c:	4b13      	ldr	r3, [pc, #76]	; (80017ec <HAL_UART_MspInit+0x404>)
 800179e:	2200      	movs	r2, #0
 80017a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80017a2:	4812      	ldr	r0, [pc, #72]	; (80017ec <HAL_UART_MspInit+0x404>)
 80017a4:	f000 fbd6 	bl	8001f54 <HAL_DMA_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <HAL_UART_MspInit+0x3ca>
      Error_Handler();
 80017ae:	f7ff fde5 	bl	800137c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a0d      	ldr	r2, [pc, #52]	; (80017ec <HAL_UART_MspInit+0x404>)
 80017b6:	639a      	str	r2, [r3, #56]	; 0x38
 80017b8:	4a0c      	ldr	r2, [pc, #48]	; (80017ec <HAL_UART_MspInit+0x404>)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	2100      	movs	r1, #0
 80017c2:	2026      	movs	r0, #38	; 0x26
 80017c4:	f000 fb81 	bl	8001eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017c8:	2026      	movs	r0, #38	; 0x26
 80017ca:	f000 fb9a 	bl	8001f02 <HAL_NVIC_EnableIRQ>
}
 80017ce:	bf00      	nop
 80017d0:	3738      	adds	r7, #56	; 0x38
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40004400 	.word	0x40004400
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40020000 	.word	0x40020000
 80017e4:	200003bc 	.word	0x200003bc
 80017e8:	400260a0 	.word	0x400260a0
 80017ec:	20000294 	.word	0x20000294
 80017f0:	40026088 	.word	0x40026088

080017f4 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a2c      	ldr	r2, [pc, #176]	; (80018b4 <HAL_UART_MspDeInit+0xc0>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d118      	bne.n	8001838 <HAL_UART_MspDeInit+0x44>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 8001806:	4b2c      	ldr	r3, [pc, #176]	; (80018b8 <HAL_UART_MspDeInit+0xc4>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	4a2b      	ldr	r2, [pc, #172]	; (80018b8 <HAL_UART_MspDeInit+0xc4>)
 800180c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001810:	6413      	str	r3, [r2, #64]	; 0x40

    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11);
 8001812:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001816:	4829      	ldr	r0, [pc, #164]	; (80018bc <HAL_UART_MspDeInit+0xc8>)
 8001818:	f001 f998 	bl	8002b4c <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001820:	4618      	mov	r0, r3
 8001822:	f000 fc45 	bl	80020b0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800182a:	4618      	mov	r0, r3
 800182c:	f000 fc40 	bl	80020b0 <HAL_DMA_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 8001830:	2034      	movs	r0, #52	; 0x34
 8001832:	f000 fb74 	bl	8001f1e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8001836:	e039      	b.n	80018ac <HAL_UART_MspDeInit+0xb8>
  else if(huart->Instance==USART1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a20      	ldr	r2, [pc, #128]	; (80018c0 <HAL_UART_MspDeInit+0xcc>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d118      	bne.n	8001874 <HAL_UART_MspDeInit+0x80>
    __HAL_RCC_USART1_CLK_DISABLE();
 8001842:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <HAL_UART_MspDeInit+0xc4>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	4a1c      	ldr	r2, [pc, #112]	; (80018b8 <HAL_UART_MspDeInit+0xc4>)
 8001848:	f023 0310 	bic.w	r3, r3, #16
 800184c:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800184e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001852:	481c      	ldr	r0, [pc, #112]	; (80018c4 <HAL_UART_MspDeInit+0xd0>)
 8001854:	f001 f97a 	bl	8002b4c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800185c:	4618      	mov	r0, r3
 800185e:	f000 fc27 	bl	80020b0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001866:	4618      	mov	r0, r3
 8001868:	f000 fc22 	bl	80020b0 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800186c:	2025      	movs	r0, #37	; 0x25
 800186e:	f000 fb56 	bl	8001f1e <HAL_NVIC_DisableIRQ>
}
 8001872:	e01b      	b.n	80018ac <HAL_UART_MspDeInit+0xb8>
  else if(huart->Instance==USART2)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a13      	ldr	r2, [pc, #76]	; (80018c8 <HAL_UART_MspDeInit+0xd4>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d116      	bne.n	80018ac <HAL_UART_MspDeInit+0xb8>
    __HAL_RCC_USART2_CLK_DISABLE();
 800187e:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <HAL_UART_MspDeInit+0xc4>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	4a0d      	ldr	r2, [pc, #52]	; (80018b8 <HAL_UART_MspDeInit+0xc4>)
 8001884:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001888:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800188a:	210c      	movs	r1, #12
 800188c:	480d      	ldr	r0, [pc, #52]	; (80018c4 <HAL_UART_MspDeInit+0xd0>)
 800188e:	f001 f95d 	bl	8002b4c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001896:	4618      	mov	r0, r3
 8001898:	f000 fc0a 	bl	80020b0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a0:	4618      	mov	r0, r3
 80018a2:	f000 fc05 	bl	80020b0 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80018a6:	2026      	movs	r0, #38	; 0x26
 80018a8:	f000 fb39 	bl	8001f1e <HAL_NVIC_DisableIRQ>
}
 80018ac:	bf00      	nop
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40004c00 	.word	0x40004c00
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40020800 	.word	0x40020800
 80018c0:	40011000 	.word	0x40011000
 80018c4:	40020000 	.word	0x40020000
 80018c8:	40004400 	.word	0x40004400

080018cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <NMI_Handler+0x4>

080018d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018d6:	e7fe      	b.n	80018d6 <HardFault_Handler+0x4>

080018d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018dc:	e7fe      	b.n	80018dc <MemManage_Handler+0x4>

080018de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018e2:	e7fe      	b.n	80018e2 <BusFault_Handler+0x4>

080018e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e8:	e7fe      	b.n	80018e8 <UsageFault_Handler+0x4>

080018ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001918:	f000 f994 	bl	8001c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800191c:	bf00      	nop
 800191e:	bd80      	pop	{r7, pc}

08001920 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001924:	4802      	ldr	r0, [pc, #8]	; (8001930 <DMA1_Stream2_IRQHandler+0x10>)
 8001926:	f000 fd0b 	bl	8002340 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000234 	.word	0x20000234

08001934 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001938:	4802      	ldr	r0, [pc, #8]	; (8001944 <DMA1_Stream4_IRQHandler+0x10>)
 800193a:	f000 fd01 	bl	8002340 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	200004e8 	.word	0x200004e8

08001948 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800194c:	4802      	ldr	r0, [pc, #8]	; (8001958 <DMA1_Stream5_IRQHandler+0x10>)
 800194e:	f000 fcf7 	bl	8002340 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000294 	.word	0x20000294

0800195c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001960:	4802      	ldr	r0, [pc, #8]	; (800196c <DMA1_Stream6_IRQHandler+0x10>)
 8001962:	f000 fced 	bl	8002340 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	200003bc 	.word	0x200003bc

08001970 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001974:	4802      	ldr	r0, [pc, #8]	; (8001980 <USART1_IRQHandler+0x10>)
 8001976:	f002 f875 	bl	8003a64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	2000041c 	.word	0x2000041c

08001984 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001988:	4802      	ldr	r0, [pc, #8]	; (8001994 <USART2_IRQHandler+0x10>)
 800198a:	f002 f86b 	bl	8003a64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	200004a4 	.word	0x200004a4

08001998 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800199c:	4802      	ldr	r0, [pc, #8]	; (80019a8 <UART4_IRQHandler+0x10>)
 800199e:	f002 f861 	bl	8003a64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000460 	.word	0x20000460

080019ac <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80019b0:	4802      	ldr	r0, [pc, #8]	; (80019bc <DMA2_Stream2_IRQHandler+0x10>)
 80019b2:	f000 fcc5 	bl	8002340 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	2000035c 	.word	0x2000035c

080019c0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80019c4:	4802      	ldr	r0, [pc, #8]	; (80019d0 <DMA2_Stream7_IRQHandler+0x10>)
 80019c6:	f000 fcbb 	bl	8002340 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	200002fc 	.word	0x200002fc

080019d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
	return 1;
 80019d8:	2301      	movs	r3, #1
}
 80019da:	4618      	mov	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <_kill>:

int _kill(int pid, int sig)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019ee:	f003 fc1b 	bl	8005228 <__errno>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2216      	movs	r2, #22
 80019f6:	601a      	str	r2, [r3, #0]
	return -1;
 80019f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <_exit>:

void _exit (int status)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff ffe7 	bl	80019e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a16:	e7fe      	b.n	8001a16 <_exit+0x12>

08001a18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
 8001a28:	e00a      	b.n	8001a40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a2a:	f3af 8000 	nop.w
 8001a2e:	4601      	mov	r1, r0
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	1c5a      	adds	r2, r3, #1
 8001a34:	60ba      	str	r2, [r7, #8]
 8001a36:	b2ca      	uxtb	r2, r1
 8001a38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	697a      	ldr	r2, [r7, #20]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	dbf0      	blt.n	8001a2a <_read+0x12>
	}

return len;
 8001a48:	687b      	ldr	r3, [r7, #4]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
	return -1;
 8001a5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a7a:	605a      	str	r2, [r3, #4]
	return 0;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <_isatty>:

int _isatty(int file)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b083      	sub	sp, #12
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
	return 1;
 8001a92:	2301      	movs	r3, #1
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
	return 0;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3714      	adds	r7, #20
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
	...

08001abc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ac4:	4a14      	ldr	r2, [pc, #80]	; (8001b18 <_sbrk+0x5c>)
 8001ac6:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <_sbrk+0x60>)
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ad0:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <_sbrk+0x64>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d102      	bne.n	8001ade <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ad8:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <_sbrk+0x64>)
 8001ada:	4a12      	ldr	r2, [pc, #72]	; (8001b24 <_sbrk+0x68>)
 8001adc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ade:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <_sbrk+0x64>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d207      	bcs.n	8001afc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aec:	f003 fb9c 	bl	8005228 <__errno>
 8001af0:	4603      	mov	r3, r0
 8001af2:	220c      	movs	r2, #12
 8001af4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001af6:	f04f 33ff 	mov.w	r3, #4294967295
 8001afa:	e009      	b.n	8001b10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001afc:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <_sbrk+0x64>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b02:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <_sbrk+0x64>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	4a05      	ldr	r2, [pc, #20]	; (8001b20 <_sbrk+0x64>)
 8001b0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20020000 	.word	0x20020000
 8001b1c:	00000400 	.word	0x00000400
 8001b20:	20000214 	.word	0x20000214
 8001b24:	20001d60 	.word	0x20001d60

08001b28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b2c:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <SystemInit+0x20>)
 8001b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b32:	4a05      	ldr	r2, [pc, #20]	; (8001b48 <SystemInit+0x20>)
 8001b34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <Reset_Handler>:
 8001b4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b84 <LoopFillZerobss+0x12>
 8001b50:	480d      	ldr	r0, [pc, #52]	; (8001b88 <LoopFillZerobss+0x16>)
 8001b52:	490e      	ldr	r1, [pc, #56]	; (8001b8c <LoopFillZerobss+0x1a>)
 8001b54:	4a0e      	ldr	r2, [pc, #56]	; (8001b90 <LoopFillZerobss+0x1e>)
 8001b56:	2300      	movs	r3, #0
 8001b58:	e002      	b.n	8001b60 <LoopCopyDataInit>

08001b5a <CopyDataInit>:
 8001b5a:	58d4      	ldr	r4, [r2, r3]
 8001b5c:	50c4      	str	r4, [r0, r3]
 8001b5e:	3304      	adds	r3, #4

08001b60 <LoopCopyDataInit>:
 8001b60:	18c4      	adds	r4, r0, r3
 8001b62:	428c      	cmp	r4, r1
 8001b64:	d3f9      	bcc.n	8001b5a <CopyDataInit>
 8001b66:	4a0b      	ldr	r2, [pc, #44]	; (8001b94 <LoopFillZerobss+0x22>)
 8001b68:	4c0b      	ldr	r4, [pc, #44]	; (8001b98 <LoopFillZerobss+0x26>)
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e001      	b.n	8001b72 <LoopFillZerobss>

08001b6e <FillZerobss>:
 8001b6e:	6013      	str	r3, [r2, #0]
 8001b70:	3204      	adds	r2, #4

08001b72 <LoopFillZerobss>:
 8001b72:	42a2      	cmp	r2, r4
 8001b74:	d3fb      	bcc.n	8001b6e <FillZerobss>
 8001b76:	f7ff ffd7 	bl	8001b28 <SystemInit>
 8001b7a:	f003 fb5b 	bl	8005234 <__libc_init_array>
 8001b7e:	f7ff fa49 	bl	8001014 <main>
 8001b82:	4770      	bx	lr
 8001b84:	20020000 	.word	0x20020000
 8001b88:	20000000 	.word	0x20000000
 8001b8c:	200001f8 	.word	0x200001f8
 8001b90:	0800a4cc 	.word	0x0800a4cc
 8001b94:	200001f8 	.word	0x200001f8
 8001b98:	20001d5c 	.word	0x20001d5c

08001b9c <ADC_IRQHandler>:
 8001b9c:	e7fe      	b.n	8001b9c <ADC_IRQHandler>
	...

08001ba0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ba4:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <HAL_Init+0x40>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a0d      	ldr	r2, [pc, #52]	; (8001be0 <HAL_Init+0x40>)
 8001baa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <HAL_Init+0x40>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a0a      	ldr	r2, [pc, #40]	; (8001be0 <HAL_Init+0x40>)
 8001bb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bbc:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <HAL_Init+0x40>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a07      	ldr	r2, [pc, #28]	; (8001be0 <HAL_Init+0x40>)
 8001bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc8:	2003      	movs	r0, #3
 8001bca:	f000 f973 	bl	8001eb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bce:	200f      	movs	r0, #15
 8001bd0:	f000 f808 	bl	8001be4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bd4:	f7ff fbe0 	bl	8001398 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40023c00 	.word	0x40023c00

08001be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bec:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <HAL_InitTick+0x54>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <HAL_InitTick+0x58>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 f999 	bl	8001f3a <HAL_SYSTICK_Config>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e00e      	b.n	8001c30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b0f      	cmp	r3, #15
 8001c16:	d80a      	bhi.n	8001c2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c20:	f000 f953 	bl	8001eca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c24:	4a06      	ldr	r2, [pc, #24]	; (8001c40 <HAL_InitTick+0x5c>)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	e000      	b.n	8001c30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20000000 	.word	0x20000000
 8001c3c:	20000008 	.word	0x20000008
 8001c40:	20000004 	.word	0x20000004

08001c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c48:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <HAL_IncTick+0x20>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <HAL_IncTick+0x24>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4413      	add	r3, r2
 8001c54:	4a04      	ldr	r2, [pc, #16]	; (8001c68 <HAL_IncTick+0x24>)
 8001c56:	6013      	str	r3, [r2, #0]
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	20000008 	.word	0x20000008
 8001c68:	20000548 	.word	0x20000548

08001c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c70:	4b03      	ldr	r3, [pc, #12]	; (8001c80 <HAL_GetTick+0x14>)
 8001c72:	681b      	ldr	r3, [r3, #0]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	20000548 	.word	0x20000548

08001c84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c8c:	f7ff ffee 	bl	8001c6c <HAL_GetTick>
 8001c90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c9c:	d005      	beq.n	8001caa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <HAL_Delay+0x44>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001caa:	bf00      	nop
 8001cac:	f7ff ffde 	bl	8001c6c <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d8f7      	bhi.n	8001cac <HAL_Delay+0x28>
  {
  }
}
 8001cbc:	bf00      	nop
 8001cbe:	bf00      	nop
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000008 	.word	0x20000008

08001ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <__NVIC_SetPriorityGrouping+0x44>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ce2:	68ba      	ldr	r2, [r7, #8]
 8001ce4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ce8:	4013      	ands	r3, r2
 8001cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cfe:	4a04      	ldr	r2, [pc, #16]	; (8001d10 <__NVIC_SetPriorityGrouping+0x44>)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	60d3      	str	r3, [r2, #12]
}
 8001d04:	bf00      	nop
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d18:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <__NVIC_GetPriorityGrouping+0x18>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	0a1b      	lsrs	r3, r3, #8
 8001d1e:	f003 0307 	and.w	r3, r3, #7
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	db0b      	blt.n	8001d5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	f003 021f 	and.w	r2, r3, #31
 8001d48:	4907      	ldr	r1, [pc, #28]	; (8001d68 <__NVIC_EnableIRQ+0x38>)
 8001d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4e:	095b      	lsrs	r3, r3, #5
 8001d50:	2001      	movs	r0, #1
 8001d52:	fa00 f202 	lsl.w	r2, r0, r2
 8001d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	e000e100 	.word	0xe000e100

08001d6c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	db12      	blt.n	8001da4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	f003 021f 	and.w	r2, r3, #31
 8001d84:	490a      	ldr	r1, [pc, #40]	; (8001db0 <__NVIC_DisableIRQ+0x44>)
 8001d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8a:	095b      	lsrs	r3, r3, #5
 8001d8c:	2001      	movs	r0, #1
 8001d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d92:	3320      	adds	r3, #32
 8001d94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001d98:	f3bf 8f4f 	dsb	sy
}
 8001d9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d9e:	f3bf 8f6f 	isb	sy
}
 8001da2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	e000e100 	.word	0xe000e100

08001db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	6039      	str	r1, [r7, #0]
 8001dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	db0a      	blt.n	8001dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	490c      	ldr	r1, [pc, #48]	; (8001e00 <__NVIC_SetPriority+0x4c>)
 8001dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd2:	0112      	lsls	r2, r2, #4
 8001dd4:	b2d2      	uxtb	r2, r2
 8001dd6:	440b      	add	r3, r1
 8001dd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ddc:	e00a      	b.n	8001df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	4908      	ldr	r1, [pc, #32]	; (8001e04 <__NVIC_SetPriority+0x50>)
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	3b04      	subs	r3, #4
 8001dec:	0112      	lsls	r2, r2, #4
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	440b      	add	r3, r1
 8001df2:	761a      	strb	r2, [r3, #24]
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	e000e100 	.word	0xe000e100
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b089      	sub	sp, #36	; 0x24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f1c3 0307 	rsb	r3, r3, #7
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	bf28      	it	cs
 8001e26:	2304      	movcs	r3, #4
 8001e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	2b06      	cmp	r3, #6
 8001e30:	d902      	bls.n	8001e38 <NVIC_EncodePriority+0x30>
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	3b03      	subs	r3, #3
 8001e36:	e000      	b.n	8001e3a <NVIC_EncodePriority+0x32>
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43da      	mvns	r2, r3
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	401a      	ands	r2, r3
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e50:	f04f 31ff 	mov.w	r1, #4294967295
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5a:	43d9      	mvns	r1, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e60:	4313      	orrs	r3, r2
         );
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3724      	adds	r7, #36	; 0x24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
	...

08001e70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e80:	d301      	bcc.n	8001e86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e82:	2301      	movs	r3, #1
 8001e84:	e00f      	b.n	8001ea6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e86:	4a0a      	ldr	r2, [pc, #40]	; (8001eb0 <SysTick_Config+0x40>)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e8e:	210f      	movs	r1, #15
 8001e90:	f04f 30ff 	mov.w	r0, #4294967295
 8001e94:	f7ff ff8e 	bl	8001db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e98:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <SysTick_Config+0x40>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e9e:	4b04      	ldr	r3, [pc, #16]	; (8001eb0 <SysTick_Config+0x40>)
 8001ea0:	2207      	movs	r2, #7
 8001ea2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	e000e010 	.word	0xe000e010

08001eb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7ff ff05 	bl	8001ccc <__NVIC_SetPriorityGrouping>
}
 8001ec2:	bf00      	nop
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b086      	sub	sp, #24
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	60b9      	str	r1, [r7, #8]
 8001ed4:	607a      	str	r2, [r7, #4]
 8001ed6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001edc:	f7ff ff1a 	bl	8001d14 <__NVIC_GetPriorityGrouping>
 8001ee0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	68b9      	ldr	r1, [r7, #8]
 8001ee6:	6978      	ldr	r0, [r7, #20]
 8001ee8:	f7ff ff8e 	bl	8001e08 <NVIC_EncodePriority>
 8001eec:	4602      	mov	r2, r0
 8001eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff ff5d 	bl	8001db4 <__NVIC_SetPriority>
}
 8001efa:	bf00      	nop
 8001efc:	3718      	adds	r7, #24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b082      	sub	sp, #8
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	4603      	mov	r3, r0
 8001f0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff ff0d 	bl	8001d30 <__NVIC_EnableIRQ>
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	4603      	mov	r3, r0
 8001f26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff1d 	bl	8001d6c <__NVIC_DisableIRQ>
}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff ff94 	bl	8001e70 <SysTick_Config>
 8001f48:	4603      	mov	r3, r0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
	...

08001f54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f60:	f7ff fe84 	bl	8001c6c <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e099      	b.n	80020a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2202      	movs	r2, #2
 8001f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0201 	bic.w	r2, r2, #1
 8001f8e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f90:	e00f      	b.n	8001fb2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f92:	f7ff fe6b 	bl	8001c6c <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b05      	cmp	r3, #5
 8001f9e:	d908      	bls.n	8001fb2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2203      	movs	r2, #3
 8001faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e078      	b.n	80020a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1e8      	bne.n	8001f92 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fc8:	697a      	ldr	r2, [r7, #20]
 8001fca:	4b38      	ldr	r3, [pc, #224]	; (80020ac <HAL_DMA_Init+0x158>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fde:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ff6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	4313      	orrs	r3, r2
 8002002:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002008:	2b04      	cmp	r3, #4
 800200a:	d107      	bne.n	800201c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002014:	4313      	orrs	r3, r2
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	4313      	orrs	r3, r2
 800201a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	f023 0307 	bic.w	r3, r3, #7
 8002032:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	4313      	orrs	r3, r2
 800203c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002042:	2b04      	cmp	r3, #4
 8002044:	d117      	bne.n	8002076 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	4313      	orrs	r3, r2
 800204e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002054:	2b00      	cmp	r3, #0
 8002056:	d00e      	beq.n	8002076 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 fb5f 	bl	800271c <DMA_CheckFifoParam>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d008      	beq.n	8002076 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2240      	movs	r2, #64	; 0x40
 8002068:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002072:	2301      	movs	r3, #1
 8002074:	e016      	b.n	80020a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 fb16 	bl	80026b0 <DMA_CalcBaseAndBitshift>
 8002084:	4603      	mov	r3, r0
 8002086:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208c:	223f      	movs	r2, #63	; 0x3f
 800208e:	409a      	lsls	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3718      	adds	r7, #24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	f010803f 	.word	0xf010803f

080020b0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e050      	b.n	8002164 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d101      	bne.n	80020d2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80020ce:	2302      	movs	r3, #2
 80020d0:	e048      	b.n	8002164 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 0201 	bic.w	r2, r2, #1
 80020e0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2200      	movs	r2, #0
 80020f0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2200      	movs	r2, #0
 80020f8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2200      	movs	r2, #0
 8002100:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2200      	movs	r2, #0
 8002108:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2221      	movs	r2, #33	; 0x21
 8002110:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 facc 	bl	80026b0 <DMA_CalcBaseAndBitshift>
 8002118:	4603      	mov	r3, r0
 800211a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002144:	223f      	movs	r2, #63	; 0x3f
 8002146:	409a      	lsls	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3710      	adds	r7, #16
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
 8002178:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800217a:	2300      	movs	r3, #0
 800217c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002182:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800218a:	2b01      	cmp	r3, #1
 800218c:	d101      	bne.n	8002192 <HAL_DMA_Start_IT+0x26>
 800218e:	2302      	movs	r3, #2
 8002190:	e040      	b.n	8002214 <HAL_DMA_Start_IT+0xa8>
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d12f      	bne.n	8002206 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2202      	movs	r2, #2
 80021aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	68b9      	ldr	r1, [r7, #8]
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f000 fa4a 	bl	8002654 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c4:	223f      	movs	r2, #63	; 0x3f
 80021c6:	409a      	lsls	r2, r3
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f042 0216 	orr.w	r2, r2, #22
 80021da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d007      	beq.n	80021f4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0208 	orr.w	r2, r2, #8
 80021f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f042 0201 	orr.w	r2, r2, #1
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	e005      	b.n	8002212 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800220e:	2302      	movs	r3, #2
 8002210:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002212:	7dfb      	ldrb	r3, [r7, #23]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3718      	adds	r7, #24
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002228:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800222a:	f7ff fd1f 	bl	8001c6c <HAL_GetTick>
 800222e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d008      	beq.n	800224e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2280      	movs	r2, #128	; 0x80
 8002240:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e052      	b.n	80022f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 0216 	bic.w	r2, r2, #22
 800225c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	695a      	ldr	r2, [r3, #20]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800226c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	2b00      	cmp	r3, #0
 8002274:	d103      	bne.n	800227e <HAL_DMA_Abort+0x62>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800227a:	2b00      	cmp	r3, #0
 800227c:	d007      	beq.n	800228e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0208 	bic.w	r2, r2, #8
 800228c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 0201 	bic.w	r2, r2, #1
 800229c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800229e:	e013      	b.n	80022c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022a0:	f7ff fce4 	bl	8001c6c <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b05      	cmp	r3, #5
 80022ac:	d90c      	bls.n	80022c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2220      	movs	r2, #32
 80022b2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2203      	movs	r2, #3
 80022b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e015      	b.n	80022f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1e4      	bne.n	80022a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022da:	223f      	movs	r2, #63	; 0x3f
 80022dc:	409a      	lsls	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800230a:	b2db      	uxtb	r3, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d004      	beq.n	800231a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2280      	movs	r2, #128	; 0x80
 8002314:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e00c      	b.n	8002334 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2205      	movs	r2, #5
 800231e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 0201 	bic.w	r2, r2, #1
 8002330:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002348:	2300      	movs	r3, #0
 800234a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800234c:	4b92      	ldr	r3, [pc, #584]	; (8002598 <HAL_DMA_IRQHandler+0x258>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a92      	ldr	r2, [pc, #584]	; (800259c <HAL_DMA_IRQHandler+0x25c>)
 8002352:	fba2 2303 	umull	r2, r3, r2, r3
 8002356:	0a9b      	lsrs	r3, r3, #10
 8002358:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236a:	2208      	movs	r2, #8
 800236c:	409a      	lsls	r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	4013      	ands	r3, r2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d01a      	beq.n	80023ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	d013      	beq.n	80023ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 0204 	bic.w	r2, r2, #4
 8002392:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002398:	2208      	movs	r2, #8
 800239a:	409a      	lsls	r2, r3
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a4:	f043 0201 	orr.w	r2, r3, #1
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b0:	2201      	movs	r2, #1
 80023b2:	409a      	lsls	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	4013      	ands	r3, r2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d012      	beq.n	80023e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00b      	beq.n	80023e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ce:	2201      	movs	r2, #1
 80023d0:	409a      	lsls	r2, r3
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023da:	f043 0202 	orr.w	r2, r3, #2
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e6:	2204      	movs	r2, #4
 80023e8:	409a      	lsls	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	4013      	ands	r3, r2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d012      	beq.n	8002418 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00b      	beq.n	8002418 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002404:	2204      	movs	r2, #4
 8002406:	409a      	lsls	r2, r3
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002410:	f043 0204 	orr.w	r2, r3, #4
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241c:	2210      	movs	r2, #16
 800241e:	409a      	lsls	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4013      	ands	r3, r2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d043      	beq.n	80024b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0308 	and.w	r3, r3, #8
 8002432:	2b00      	cmp	r3, #0
 8002434:	d03c      	beq.n	80024b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243a:	2210      	movs	r2, #16
 800243c:	409a      	lsls	r2, r3
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d018      	beq.n	8002482 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d108      	bne.n	8002470 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	2b00      	cmp	r3, #0
 8002464:	d024      	beq.n	80024b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	4798      	blx	r3
 800246e:	e01f      	b.n	80024b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002474:	2b00      	cmp	r3, #0
 8002476:	d01b      	beq.n	80024b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	4798      	blx	r3
 8002480:	e016      	b.n	80024b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248c:	2b00      	cmp	r3, #0
 800248e:	d107      	bne.n	80024a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0208 	bic.w	r2, r2, #8
 800249e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d003      	beq.n	80024b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b4:	2220      	movs	r2, #32
 80024b6:	409a      	lsls	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4013      	ands	r3, r2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 808e 	beq.w	80025de <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0310 	and.w	r3, r3, #16
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f000 8086 	beq.w	80025de <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d6:	2220      	movs	r2, #32
 80024d8:	409a      	lsls	r2, r3
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b05      	cmp	r3, #5
 80024e8:	d136      	bne.n	8002558 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 0216 	bic.w	r2, r2, #22
 80024f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	695a      	ldr	r2, [r3, #20]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002508:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	2b00      	cmp	r3, #0
 8002510:	d103      	bne.n	800251a <HAL_DMA_IRQHandler+0x1da>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002516:	2b00      	cmp	r3, #0
 8002518:	d007      	beq.n	800252a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0208 	bic.w	r2, r2, #8
 8002528:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800252e:	223f      	movs	r2, #63	; 0x3f
 8002530:	409a      	lsls	r2, r3
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800254a:	2b00      	cmp	r3, #0
 800254c:	d07d      	beq.n	800264a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	4798      	blx	r3
        }
        return;
 8002556:	e078      	b.n	800264a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d01c      	beq.n	80025a0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d108      	bne.n	8002586 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002578:	2b00      	cmp	r3, #0
 800257a:	d030      	beq.n	80025de <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	4798      	blx	r3
 8002584:	e02b      	b.n	80025de <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800258a:	2b00      	cmp	r3, #0
 800258c:	d027      	beq.n	80025de <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	4798      	blx	r3
 8002596:	e022      	b.n	80025de <HAL_DMA_IRQHandler+0x29e>
 8002598:	20000000 	.word	0x20000000
 800259c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10f      	bne.n	80025ce <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 0210 	bic.w	r2, r2, #16
 80025bc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d032      	beq.n	800264c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d022      	beq.n	8002638 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2205      	movs	r2, #5
 80025f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0201 	bic.w	r2, r2, #1
 8002608:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	3301      	adds	r3, #1
 800260e:	60bb      	str	r3, [r7, #8]
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	429a      	cmp	r2, r3
 8002614:	d307      	bcc.n	8002626 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1f2      	bne.n	800260a <HAL_DMA_IRQHandler+0x2ca>
 8002624:	e000      	b.n	8002628 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002626:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800263c:	2b00      	cmp	r3, #0
 800263e:	d005      	beq.n	800264c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	4798      	blx	r3
 8002648:	e000      	b.n	800264c <HAL_DMA_IRQHandler+0x30c>
        return;
 800264a:	bf00      	nop
    }
  }
}
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop

08002654 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
 8002660:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002670:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	2b40      	cmp	r3, #64	; 0x40
 8002680:	d108      	bne.n	8002694 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002692:	e007      	b.n	80026a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	60da      	str	r2, [r3, #12]
}
 80026a4:	bf00      	nop
 80026a6:	3714      	adds	r7, #20
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	3b10      	subs	r3, #16
 80026c0:	4a14      	ldr	r2, [pc, #80]	; (8002714 <DMA_CalcBaseAndBitshift+0x64>)
 80026c2:	fba2 2303 	umull	r2, r3, r2, r3
 80026c6:	091b      	lsrs	r3, r3, #4
 80026c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026ca:	4a13      	ldr	r2, [pc, #76]	; (8002718 <DMA_CalcBaseAndBitshift+0x68>)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	4413      	add	r3, r2
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	461a      	mov	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2b03      	cmp	r3, #3
 80026dc:	d909      	bls.n	80026f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026e6:	f023 0303 	bic.w	r3, r3, #3
 80026ea:	1d1a      	adds	r2, r3, #4
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	659a      	str	r2, [r3, #88]	; 0x58
 80026f0:	e007      	b.n	8002702 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026fa:	f023 0303 	bic.w	r3, r3, #3
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002706:	4618      	mov	r0, r3
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	aaaaaaab 	.word	0xaaaaaaab
 8002718:	0800a000 	.word	0x0800a000

0800271c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002724:	2300      	movs	r3, #0
 8002726:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d11f      	bne.n	8002776 <DMA_CheckFifoParam+0x5a>
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	2b03      	cmp	r3, #3
 800273a:	d856      	bhi.n	80027ea <DMA_CheckFifoParam+0xce>
 800273c:	a201      	add	r2, pc, #4	; (adr r2, 8002744 <DMA_CheckFifoParam+0x28>)
 800273e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002742:	bf00      	nop
 8002744:	08002755 	.word	0x08002755
 8002748:	08002767 	.word	0x08002767
 800274c:	08002755 	.word	0x08002755
 8002750:	080027eb 	.word	0x080027eb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002758:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d046      	beq.n	80027ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002764:	e043      	b.n	80027ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800276e:	d140      	bne.n	80027f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002774:	e03d      	b.n	80027f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800277e:	d121      	bne.n	80027c4 <DMA_CheckFifoParam+0xa8>
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	2b03      	cmp	r3, #3
 8002784:	d837      	bhi.n	80027f6 <DMA_CheckFifoParam+0xda>
 8002786:	a201      	add	r2, pc, #4	; (adr r2, 800278c <DMA_CheckFifoParam+0x70>)
 8002788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800278c:	0800279d 	.word	0x0800279d
 8002790:	080027a3 	.word	0x080027a3
 8002794:	0800279d 	.word	0x0800279d
 8002798:	080027b5 	.word	0x080027b5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	73fb      	strb	r3, [r7, #15]
      break;
 80027a0:	e030      	b.n	8002804 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d025      	beq.n	80027fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027b2:	e022      	b.n	80027fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027bc:	d11f      	bne.n	80027fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027c2:	e01c      	b.n	80027fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d903      	bls.n	80027d2 <DMA_CheckFifoParam+0xb6>
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	2b03      	cmp	r3, #3
 80027ce:	d003      	beq.n	80027d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027d0:	e018      	b.n	8002804 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	73fb      	strb	r3, [r7, #15]
      break;
 80027d6:	e015      	b.n	8002804 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00e      	beq.n	8002802 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	73fb      	strb	r3, [r7, #15]
      break;
 80027e8:	e00b      	b.n	8002802 <DMA_CheckFifoParam+0xe6>
      break;
 80027ea:	bf00      	nop
 80027ec:	e00a      	b.n	8002804 <DMA_CheckFifoParam+0xe8>
      break;
 80027ee:	bf00      	nop
 80027f0:	e008      	b.n	8002804 <DMA_CheckFifoParam+0xe8>
      break;
 80027f2:	bf00      	nop
 80027f4:	e006      	b.n	8002804 <DMA_CheckFifoParam+0xe8>
      break;
 80027f6:	bf00      	nop
 80027f8:	e004      	b.n	8002804 <DMA_CheckFifoParam+0xe8>
      break;
 80027fa:	bf00      	nop
 80027fc:	e002      	b.n	8002804 <DMA_CheckFifoParam+0xe8>
      break;   
 80027fe:	bf00      	nop
 8002800:	e000      	b.n	8002804 <DMA_CheckFifoParam+0xe8>
      break;
 8002802:	bf00      	nop
    }
  } 
  
  return status; 
 8002804:	7bfb      	ldrb	r3, [r7, #15]
}
 8002806:	4618      	mov	r0, r3
 8002808:	3714      	adds	r7, #20
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop

08002814 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002814:	b480      	push	{r7}
 8002816:	b089      	sub	sp, #36	; 0x24
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002822:	2300      	movs	r3, #0
 8002824:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002826:	2300      	movs	r3, #0
 8002828:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800282a:	2300      	movs	r3, #0
 800282c:	61fb      	str	r3, [r7, #28]
 800282e:	e16b      	b.n	8002b08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002830:	2201      	movs	r2, #1
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	4013      	ands	r3, r2
 8002842:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	429a      	cmp	r2, r3
 800284a:	f040 815a 	bne.w	8002b02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f003 0303 	and.w	r3, r3, #3
 8002856:	2b01      	cmp	r3, #1
 8002858:	d005      	beq.n	8002866 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002862:	2b02      	cmp	r3, #2
 8002864:	d130      	bne.n	80028c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	2203      	movs	r2, #3
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43db      	mvns	r3, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4013      	ands	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	68da      	ldr	r2, [r3, #12]
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4313      	orrs	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800289c:	2201      	movs	r2, #1
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	43db      	mvns	r3, r3
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4013      	ands	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	091b      	lsrs	r3, r3, #4
 80028b2:	f003 0201 	and.w	r2, r3, #1
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4313      	orrs	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 0303 	and.w	r3, r3, #3
 80028d0:	2b03      	cmp	r3, #3
 80028d2:	d017      	beq.n	8002904 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	2203      	movs	r2, #3
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	43db      	mvns	r3, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f003 0303 	and.w	r3, r3, #3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d123      	bne.n	8002958 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	08da      	lsrs	r2, r3, #3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3208      	adds	r2, #8
 8002918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800291c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	f003 0307 	and.w	r3, r3, #7
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	220f      	movs	r2, #15
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	43db      	mvns	r3, r3
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4013      	ands	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	691a      	ldr	r2, [r3, #16]
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	08da      	lsrs	r2, r3, #3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	3208      	adds	r2, #8
 8002952:	69b9      	ldr	r1, [r7, #24]
 8002954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	2203      	movs	r2, #3
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	43db      	mvns	r3, r3
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4013      	ands	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f003 0203 	and.w	r2, r3, #3
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4313      	orrs	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 80b4 	beq.w	8002b02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	4b60      	ldr	r3, [pc, #384]	; (8002b20 <HAL_GPIO_Init+0x30c>)
 80029a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a2:	4a5f      	ldr	r2, [pc, #380]	; (8002b20 <HAL_GPIO_Init+0x30c>)
 80029a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029a8:	6453      	str	r3, [r2, #68]	; 0x44
 80029aa:	4b5d      	ldr	r3, [pc, #372]	; (8002b20 <HAL_GPIO_Init+0x30c>)
 80029ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029b6:	4a5b      	ldr	r2, [pc, #364]	; (8002b24 <HAL_GPIO_Init+0x310>)
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	089b      	lsrs	r3, r3, #2
 80029bc:	3302      	adds	r3, #2
 80029be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	220f      	movs	r2, #15
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	43db      	mvns	r3, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4013      	ands	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a52      	ldr	r2, [pc, #328]	; (8002b28 <HAL_GPIO_Init+0x314>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d02b      	beq.n	8002a3a <HAL_GPIO_Init+0x226>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a51      	ldr	r2, [pc, #324]	; (8002b2c <HAL_GPIO_Init+0x318>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d025      	beq.n	8002a36 <HAL_GPIO_Init+0x222>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a50      	ldr	r2, [pc, #320]	; (8002b30 <HAL_GPIO_Init+0x31c>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d01f      	beq.n	8002a32 <HAL_GPIO_Init+0x21e>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a4f      	ldr	r2, [pc, #316]	; (8002b34 <HAL_GPIO_Init+0x320>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d019      	beq.n	8002a2e <HAL_GPIO_Init+0x21a>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a4e      	ldr	r2, [pc, #312]	; (8002b38 <HAL_GPIO_Init+0x324>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d013      	beq.n	8002a2a <HAL_GPIO_Init+0x216>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a4d      	ldr	r2, [pc, #308]	; (8002b3c <HAL_GPIO_Init+0x328>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d00d      	beq.n	8002a26 <HAL_GPIO_Init+0x212>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a4c      	ldr	r2, [pc, #304]	; (8002b40 <HAL_GPIO_Init+0x32c>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d007      	beq.n	8002a22 <HAL_GPIO_Init+0x20e>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a4b      	ldr	r2, [pc, #300]	; (8002b44 <HAL_GPIO_Init+0x330>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d101      	bne.n	8002a1e <HAL_GPIO_Init+0x20a>
 8002a1a:	2307      	movs	r3, #7
 8002a1c:	e00e      	b.n	8002a3c <HAL_GPIO_Init+0x228>
 8002a1e:	2308      	movs	r3, #8
 8002a20:	e00c      	b.n	8002a3c <HAL_GPIO_Init+0x228>
 8002a22:	2306      	movs	r3, #6
 8002a24:	e00a      	b.n	8002a3c <HAL_GPIO_Init+0x228>
 8002a26:	2305      	movs	r3, #5
 8002a28:	e008      	b.n	8002a3c <HAL_GPIO_Init+0x228>
 8002a2a:	2304      	movs	r3, #4
 8002a2c:	e006      	b.n	8002a3c <HAL_GPIO_Init+0x228>
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e004      	b.n	8002a3c <HAL_GPIO_Init+0x228>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e002      	b.n	8002a3c <HAL_GPIO_Init+0x228>
 8002a36:	2301      	movs	r3, #1
 8002a38:	e000      	b.n	8002a3c <HAL_GPIO_Init+0x228>
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	69fa      	ldr	r2, [r7, #28]
 8002a3e:	f002 0203 	and.w	r2, r2, #3
 8002a42:	0092      	lsls	r2, r2, #2
 8002a44:	4093      	lsls	r3, r2
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a4c:	4935      	ldr	r1, [pc, #212]	; (8002b24 <HAL_GPIO_Init+0x310>)
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	089b      	lsrs	r3, r3, #2
 8002a52:	3302      	adds	r3, #2
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a5a:	4b3b      	ldr	r3, [pc, #236]	; (8002b48 <HAL_GPIO_Init+0x334>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	43db      	mvns	r3, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4013      	ands	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a7e:	4a32      	ldr	r2, [pc, #200]	; (8002b48 <HAL_GPIO_Init+0x334>)
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a84:	4b30      	ldr	r3, [pc, #192]	; (8002b48 <HAL_GPIO_Init+0x334>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4013      	ands	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aa8:	4a27      	ldr	r2, [pc, #156]	; (8002b48 <HAL_GPIO_Init+0x334>)
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aae:	4b26      	ldr	r3, [pc, #152]	; (8002b48 <HAL_GPIO_Init+0x334>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4013      	ands	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ad2:	4a1d      	ldr	r2, [pc, #116]	; (8002b48 <HAL_GPIO_Init+0x334>)
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ad8:	4b1b      	ldr	r3, [pc, #108]	; (8002b48 <HAL_GPIO_Init+0x334>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002afc:	4a12      	ldr	r2, [pc, #72]	; (8002b48 <HAL_GPIO_Init+0x334>)
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	3301      	adds	r3, #1
 8002b06:	61fb      	str	r3, [r7, #28]
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	2b0f      	cmp	r3, #15
 8002b0c:	f67f ae90 	bls.w	8002830 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b10:	bf00      	nop
 8002b12:	bf00      	nop
 8002b14:	3724      	adds	r7, #36	; 0x24
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	40023800 	.word	0x40023800
 8002b24:	40013800 	.word	0x40013800
 8002b28:	40020000 	.word	0x40020000
 8002b2c:	40020400 	.word	0x40020400
 8002b30:	40020800 	.word	0x40020800
 8002b34:	40020c00 	.word	0x40020c00
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	40021400 	.word	0x40021400
 8002b40:	40021800 	.word	0x40021800
 8002b44:	40021c00 	.word	0x40021c00
 8002b48:	40013c00 	.word	0x40013c00

08002b4c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b087      	sub	sp, #28
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b56:	2300      	movs	r3, #0
 8002b58:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b62:	2300      	movs	r3, #0
 8002b64:	617b      	str	r3, [r7, #20]
 8002b66:	e0cd      	b.n	8002d04 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b68:	2201      	movs	r2, #1
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	4013      	ands	r3, r2
 8002b78:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	f040 80bd 	bne.w	8002cfe <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002b84:	4a65      	ldr	r2, [pc, #404]	; (8002d1c <HAL_GPIO_DeInit+0x1d0>)
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	089b      	lsrs	r3, r3, #2
 8002b8a:	3302      	adds	r3, #2
 8002b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b90:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f003 0303 	and.w	r3, r3, #3
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	220f      	movs	r2, #15
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	68ba      	ldr	r2, [r7, #8]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a5d      	ldr	r2, [pc, #372]	; (8002d20 <HAL_GPIO_DeInit+0x1d4>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d02b      	beq.n	8002c06 <HAL_GPIO_DeInit+0xba>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a5c      	ldr	r2, [pc, #368]	; (8002d24 <HAL_GPIO_DeInit+0x1d8>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d025      	beq.n	8002c02 <HAL_GPIO_DeInit+0xb6>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a5b      	ldr	r2, [pc, #364]	; (8002d28 <HAL_GPIO_DeInit+0x1dc>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d01f      	beq.n	8002bfe <HAL_GPIO_DeInit+0xb2>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a5a      	ldr	r2, [pc, #360]	; (8002d2c <HAL_GPIO_DeInit+0x1e0>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d019      	beq.n	8002bfa <HAL_GPIO_DeInit+0xae>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a59      	ldr	r2, [pc, #356]	; (8002d30 <HAL_GPIO_DeInit+0x1e4>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d013      	beq.n	8002bf6 <HAL_GPIO_DeInit+0xaa>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a58      	ldr	r2, [pc, #352]	; (8002d34 <HAL_GPIO_DeInit+0x1e8>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d00d      	beq.n	8002bf2 <HAL_GPIO_DeInit+0xa6>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a57      	ldr	r2, [pc, #348]	; (8002d38 <HAL_GPIO_DeInit+0x1ec>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d007      	beq.n	8002bee <HAL_GPIO_DeInit+0xa2>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a56      	ldr	r2, [pc, #344]	; (8002d3c <HAL_GPIO_DeInit+0x1f0>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d101      	bne.n	8002bea <HAL_GPIO_DeInit+0x9e>
 8002be6:	2307      	movs	r3, #7
 8002be8:	e00e      	b.n	8002c08 <HAL_GPIO_DeInit+0xbc>
 8002bea:	2308      	movs	r3, #8
 8002bec:	e00c      	b.n	8002c08 <HAL_GPIO_DeInit+0xbc>
 8002bee:	2306      	movs	r3, #6
 8002bf0:	e00a      	b.n	8002c08 <HAL_GPIO_DeInit+0xbc>
 8002bf2:	2305      	movs	r3, #5
 8002bf4:	e008      	b.n	8002c08 <HAL_GPIO_DeInit+0xbc>
 8002bf6:	2304      	movs	r3, #4
 8002bf8:	e006      	b.n	8002c08 <HAL_GPIO_DeInit+0xbc>
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e004      	b.n	8002c08 <HAL_GPIO_DeInit+0xbc>
 8002bfe:	2302      	movs	r3, #2
 8002c00:	e002      	b.n	8002c08 <HAL_GPIO_DeInit+0xbc>
 8002c02:	2301      	movs	r3, #1
 8002c04:	e000      	b.n	8002c08 <HAL_GPIO_DeInit+0xbc>
 8002c06:	2300      	movs	r3, #0
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	f002 0203 	and.w	r2, r2, #3
 8002c0e:	0092      	lsls	r2, r2, #2
 8002c10:	4093      	lsls	r3, r2
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d132      	bne.n	8002c7e <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002c18:	4b49      	ldr	r3, [pc, #292]	; (8002d40 <HAL_GPIO_DeInit+0x1f4>)
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	4947      	ldr	r1, [pc, #284]	; (8002d40 <HAL_GPIO_DeInit+0x1f4>)
 8002c22:	4013      	ands	r3, r2
 8002c24:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002c26:	4b46      	ldr	r3, [pc, #280]	; (8002d40 <HAL_GPIO_DeInit+0x1f4>)
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	4944      	ldr	r1, [pc, #272]	; (8002d40 <HAL_GPIO_DeInit+0x1f4>)
 8002c30:	4013      	ands	r3, r2
 8002c32:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002c34:	4b42      	ldr	r3, [pc, #264]	; (8002d40 <HAL_GPIO_DeInit+0x1f4>)
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	43db      	mvns	r3, r3
 8002c3c:	4940      	ldr	r1, [pc, #256]	; (8002d40 <HAL_GPIO_DeInit+0x1f4>)
 8002c3e:	4013      	ands	r3, r2
 8002c40:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002c42:	4b3f      	ldr	r3, [pc, #252]	; (8002d40 <HAL_GPIO_DeInit+0x1f4>)
 8002c44:	68da      	ldr	r2, [r3, #12]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	493d      	ldr	r1, [pc, #244]	; (8002d40 <HAL_GPIO_DeInit+0x1f4>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	220f      	movs	r2, #15
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002c60:	4a2e      	ldr	r2, [pc, #184]	; (8002d1c <HAL_GPIO_DeInit+0x1d0>)
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	089b      	lsrs	r3, r3, #2
 8002c66:	3302      	adds	r3, #2
 8002c68:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	43da      	mvns	r2, r3
 8002c70:	482a      	ldr	r0, [pc, #168]	; (8002d1c <HAL_GPIO_DeInit+0x1d0>)
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	089b      	lsrs	r3, r3, #2
 8002c76:	400a      	ands	r2, r1
 8002c78:	3302      	adds	r3, #2
 8002c7a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	2103      	movs	r1, #3
 8002c88:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	401a      	ands	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	08da      	lsrs	r2, r3, #3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3208      	adds	r2, #8
 8002c9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	220f      	movs	r2, #15
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	08d2      	lsrs	r2, r2, #3
 8002cb4:	4019      	ands	r1, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	3208      	adds	r2, #8
 8002cba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	2103      	movs	r1, #3
 8002cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	401a      	ands	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	2101      	movs	r1, #1
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	401a      	ands	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	2103      	movs	r1, #3
 8002cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf6:	43db      	mvns	r3, r3
 8002cf8:	401a      	ands	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	3301      	adds	r3, #1
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	2b0f      	cmp	r3, #15
 8002d08:	f67f af2e 	bls.w	8002b68 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002d0c:	bf00      	nop
 8002d0e:	bf00      	nop
 8002d10:	371c      	adds	r7, #28
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	40013800 	.word	0x40013800
 8002d20:	40020000 	.word	0x40020000
 8002d24:	40020400 	.word	0x40020400
 8002d28:	40020800 	.word	0x40020800
 8002d2c:	40020c00 	.word	0x40020c00
 8002d30:	40021000 	.word	0x40021000
 8002d34:	40021400 	.word	0x40021400
 8002d38:	40021800 	.word	0x40021800
 8002d3c:	40021c00 	.word	0x40021c00
 8002d40:	40013c00 	.word	0x40013c00

08002d44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	807b      	strh	r3, [r7, #2]
 8002d50:	4613      	mov	r3, r2
 8002d52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d54:	787b      	ldrb	r3, [r7, #1]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d5a:	887a      	ldrh	r2, [r7, #2]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d60:	e003      	b.n	8002d6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d62:	887b      	ldrh	r3, [r7, #2]
 8002d64:	041a      	lsls	r2, r3, #16
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	619a      	str	r2, [r3, #24]
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
	...

08002d78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e264      	b.n	8003254 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d075      	beq.n	8002e82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d96:	4ba3      	ldr	r3, [pc, #652]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 030c 	and.w	r3, r3, #12
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d00c      	beq.n	8002dbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002da2:	4ba0      	ldr	r3, [pc, #640]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002daa:	2b08      	cmp	r3, #8
 8002dac:	d112      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dae:	4b9d      	ldr	r3, [pc, #628]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002db6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dba:	d10b      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dbc:	4b99      	ldr	r3, [pc, #612]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d05b      	beq.n	8002e80 <HAL_RCC_OscConfig+0x108>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d157      	bne.n	8002e80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e23f      	b.n	8003254 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ddc:	d106      	bne.n	8002dec <HAL_RCC_OscConfig+0x74>
 8002dde:	4b91      	ldr	r3, [pc, #580]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a90      	ldr	r2, [pc, #576]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de8:	6013      	str	r3, [r2, #0]
 8002dea:	e01d      	b.n	8002e28 <HAL_RCC_OscConfig+0xb0>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002df4:	d10c      	bne.n	8002e10 <HAL_RCC_OscConfig+0x98>
 8002df6:	4b8b      	ldr	r3, [pc, #556]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a8a      	ldr	r2, [pc, #552]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002dfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e00:	6013      	str	r3, [r2, #0]
 8002e02:	4b88      	ldr	r3, [pc, #544]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a87      	ldr	r2, [pc, #540]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e0c:	6013      	str	r3, [r2, #0]
 8002e0e:	e00b      	b.n	8002e28 <HAL_RCC_OscConfig+0xb0>
 8002e10:	4b84      	ldr	r3, [pc, #528]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a83      	ldr	r2, [pc, #524]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e1a:	6013      	str	r3, [r2, #0]
 8002e1c:	4b81      	ldr	r3, [pc, #516]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a80      	ldr	r2, [pc, #512]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002e22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d013      	beq.n	8002e58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e30:	f7fe ff1c 	bl	8001c6c <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e38:	f7fe ff18 	bl	8001c6c <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b64      	cmp	r3, #100	; 0x64
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e204      	b.n	8003254 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e4a:	4b76      	ldr	r3, [pc, #472]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0f0      	beq.n	8002e38 <HAL_RCC_OscConfig+0xc0>
 8002e56:	e014      	b.n	8002e82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e58:	f7fe ff08 	bl	8001c6c <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e60:	f7fe ff04 	bl	8001c6c <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b64      	cmp	r3, #100	; 0x64
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e1f0      	b.n	8003254 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e72:	4b6c      	ldr	r3, [pc, #432]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_OscConfig+0xe8>
 8002e7e:	e000      	b.n	8002e82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d063      	beq.n	8002f56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e8e:	4b65      	ldr	r3, [pc, #404]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 030c 	and.w	r3, r3, #12
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00b      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e9a:	4b62      	ldr	r3, [pc, #392]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ea2:	2b08      	cmp	r3, #8
 8002ea4:	d11c      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ea6:	4b5f      	ldr	r3, [pc, #380]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d116      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eb2:	4b5c      	ldr	r3, [pc, #368]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d005      	beq.n	8002eca <HAL_RCC_OscConfig+0x152>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d001      	beq.n	8002eca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e1c4      	b.n	8003254 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eca:	4b56      	ldr	r3, [pc, #344]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	4952      	ldr	r1, [pc, #328]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ede:	e03a      	b.n	8002f56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d020      	beq.n	8002f2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ee8:	4b4f      	ldr	r3, [pc, #316]	; (8003028 <HAL_RCC_OscConfig+0x2b0>)
 8002eea:	2201      	movs	r2, #1
 8002eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eee:	f7fe febd 	bl	8001c6c <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef4:	e008      	b.n	8002f08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ef6:	f7fe feb9 	bl	8001c6c <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e1a5      	b.n	8003254 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f08:	4b46      	ldr	r3, [pc, #280]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0f0      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f14:	4b43      	ldr	r3, [pc, #268]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	4940      	ldr	r1, [pc, #256]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	600b      	str	r3, [r1, #0]
 8002f28:	e015      	b.n	8002f56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f2a:	4b3f      	ldr	r3, [pc, #252]	; (8003028 <HAL_RCC_OscConfig+0x2b0>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f30:	f7fe fe9c 	bl	8001c6c <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f38:	f7fe fe98 	bl	8001c6c <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e184      	b.n	8003254 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f4a:	4b36      	ldr	r3, [pc, #216]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f0      	bne.n	8002f38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0308 	and.w	r3, r3, #8
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d030      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d016      	beq.n	8002f98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f6a:	4b30      	ldr	r3, [pc, #192]	; (800302c <HAL_RCC_OscConfig+0x2b4>)
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f70:	f7fe fe7c 	bl	8001c6c <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f78:	f7fe fe78 	bl	8001c6c <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e164      	b.n	8003254 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f8a:	4b26      	ldr	r3, [pc, #152]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002f8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0f0      	beq.n	8002f78 <HAL_RCC_OscConfig+0x200>
 8002f96:	e015      	b.n	8002fc4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f98:	4b24      	ldr	r3, [pc, #144]	; (800302c <HAL_RCC_OscConfig+0x2b4>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f9e:	f7fe fe65 	bl	8001c6c <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fa6:	f7fe fe61 	bl	8001c6c <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e14d      	b.n	8003254 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fb8:	4b1a      	ldr	r3, [pc, #104]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1f0      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 80a0 	beq.w	8003112 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fd6:	4b13      	ldr	r3, [pc, #76]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10f      	bne.n	8003002 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60bb      	str	r3, [r7, #8]
 8002fe6:	4b0f      	ldr	r3, [pc, #60]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	4a0e      	ldr	r2, [pc, #56]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff2:	4b0c      	ldr	r3, [pc, #48]	; (8003024 <HAL_RCC_OscConfig+0x2ac>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffa:	60bb      	str	r3, [r7, #8]
 8002ffc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ffe:	2301      	movs	r3, #1
 8003000:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003002:	4b0b      	ldr	r3, [pc, #44]	; (8003030 <HAL_RCC_OscConfig+0x2b8>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300a:	2b00      	cmp	r3, #0
 800300c:	d121      	bne.n	8003052 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800300e:	4b08      	ldr	r3, [pc, #32]	; (8003030 <HAL_RCC_OscConfig+0x2b8>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a07      	ldr	r2, [pc, #28]	; (8003030 <HAL_RCC_OscConfig+0x2b8>)
 8003014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003018:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800301a:	f7fe fe27 	bl	8001c6c <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003020:	e011      	b.n	8003046 <HAL_RCC_OscConfig+0x2ce>
 8003022:	bf00      	nop
 8003024:	40023800 	.word	0x40023800
 8003028:	42470000 	.word	0x42470000
 800302c:	42470e80 	.word	0x42470e80
 8003030:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003034:	f7fe fe1a 	bl	8001c6c <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e106      	b.n	8003254 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003046:	4b85      	ldr	r3, [pc, #532]	; (800325c <HAL_RCC_OscConfig+0x4e4>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0f0      	beq.n	8003034 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d106      	bne.n	8003068 <HAL_RCC_OscConfig+0x2f0>
 800305a:	4b81      	ldr	r3, [pc, #516]	; (8003260 <HAL_RCC_OscConfig+0x4e8>)
 800305c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305e:	4a80      	ldr	r2, [pc, #512]	; (8003260 <HAL_RCC_OscConfig+0x4e8>)
 8003060:	f043 0301 	orr.w	r3, r3, #1
 8003064:	6713      	str	r3, [r2, #112]	; 0x70
 8003066:	e01c      	b.n	80030a2 <HAL_RCC_OscConfig+0x32a>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	2b05      	cmp	r3, #5
 800306e:	d10c      	bne.n	800308a <HAL_RCC_OscConfig+0x312>
 8003070:	4b7b      	ldr	r3, [pc, #492]	; (8003260 <HAL_RCC_OscConfig+0x4e8>)
 8003072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003074:	4a7a      	ldr	r2, [pc, #488]	; (8003260 <HAL_RCC_OscConfig+0x4e8>)
 8003076:	f043 0304 	orr.w	r3, r3, #4
 800307a:	6713      	str	r3, [r2, #112]	; 0x70
 800307c:	4b78      	ldr	r3, [pc, #480]	; (8003260 <HAL_RCC_OscConfig+0x4e8>)
 800307e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003080:	4a77      	ldr	r2, [pc, #476]	; (8003260 <HAL_RCC_OscConfig+0x4e8>)
 8003082:	f043 0301 	orr.w	r3, r3, #1
 8003086:	6713      	str	r3, [r2, #112]	; 0x70
 8003088:	e00b      	b.n	80030a2 <HAL_RCC_OscConfig+0x32a>
 800308a:	4b75      	ldr	r3, [pc, #468]	; (8003260 <HAL_RCC_OscConfig+0x4e8>)
 800308c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308e:	4a74      	ldr	r2, [pc, #464]	; (8003260 <HAL_RCC_OscConfig+0x4e8>)
 8003090:	f023 0301 	bic.w	r3, r3, #1
 8003094:	6713      	str	r3, [r2, #112]	; 0x70
 8003096:	4b72      	ldr	r3, [pc, #456]	; (8003260 <HAL_RCC_OscConfig+0x4e8>)
 8003098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309a:	4a71      	ldr	r2, [pc, #452]	; (8003260 <HAL_RCC_OscConfig+0x4e8>)
 800309c:	f023 0304 	bic.w	r3, r3, #4
 80030a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d015      	beq.n	80030d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030aa:	f7fe fddf 	bl	8001c6c <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b0:	e00a      	b.n	80030c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030b2:	f7fe fddb 	bl	8001c6c <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e0c5      	b.n	8003254 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c8:	4b65      	ldr	r3, [pc, #404]	; (8003260 <HAL_RCC_OscConfig+0x4e8>)
 80030ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0ee      	beq.n	80030b2 <HAL_RCC_OscConfig+0x33a>
 80030d4:	e014      	b.n	8003100 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d6:	f7fe fdc9 	bl	8001c6c <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030dc:	e00a      	b.n	80030f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030de:	f7fe fdc5 	bl	8001c6c <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e0af      	b.n	8003254 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030f4:	4b5a      	ldr	r3, [pc, #360]	; (8003260 <HAL_RCC_OscConfig+0x4e8>)
 80030f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1ee      	bne.n	80030de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003100:	7dfb      	ldrb	r3, [r7, #23]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d105      	bne.n	8003112 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003106:	4b56      	ldr	r3, [pc, #344]	; (8003260 <HAL_RCC_OscConfig+0x4e8>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	4a55      	ldr	r2, [pc, #340]	; (8003260 <HAL_RCC_OscConfig+0x4e8>)
 800310c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003110:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 809b 	beq.w	8003252 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800311c:	4b50      	ldr	r3, [pc, #320]	; (8003260 <HAL_RCC_OscConfig+0x4e8>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f003 030c 	and.w	r3, r3, #12
 8003124:	2b08      	cmp	r3, #8
 8003126:	d05c      	beq.n	80031e2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	2b02      	cmp	r3, #2
 800312e:	d141      	bne.n	80031b4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003130:	4b4c      	ldr	r3, [pc, #304]	; (8003264 <HAL_RCC_OscConfig+0x4ec>)
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003136:	f7fe fd99 	bl	8001c6c <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800313e:	f7fe fd95 	bl	8001c6c <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e081      	b.n	8003254 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003150:	4b43      	ldr	r3, [pc, #268]	; (8003260 <HAL_RCC_OscConfig+0x4e8>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1f0      	bne.n	800313e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	69da      	ldr	r2, [r3, #28]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	431a      	orrs	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	019b      	lsls	r3, r3, #6
 800316c:	431a      	orrs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003172:	085b      	lsrs	r3, r3, #1
 8003174:	3b01      	subs	r3, #1
 8003176:	041b      	lsls	r3, r3, #16
 8003178:	431a      	orrs	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317e:	061b      	lsls	r3, r3, #24
 8003180:	4937      	ldr	r1, [pc, #220]	; (8003260 <HAL_RCC_OscConfig+0x4e8>)
 8003182:	4313      	orrs	r3, r2
 8003184:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003186:	4b37      	ldr	r3, [pc, #220]	; (8003264 <HAL_RCC_OscConfig+0x4ec>)
 8003188:	2201      	movs	r2, #1
 800318a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318c:	f7fe fd6e 	bl	8001c6c <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003194:	f7fe fd6a 	bl	8001c6c <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e056      	b.n	8003254 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031a6:	4b2e      	ldr	r3, [pc, #184]	; (8003260 <HAL_RCC_OscConfig+0x4e8>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0f0      	beq.n	8003194 <HAL_RCC_OscConfig+0x41c>
 80031b2:	e04e      	b.n	8003252 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031b4:	4b2b      	ldr	r3, [pc, #172]	; (8003264 <HAL_RCC_OscConfig+0x4ec>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ba:	f7fe fd57 	bl	8001c6c <HAL_GetTick>
 80031be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031c0:	e008      	b.n	80031d4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031c2:	f7fe fd53 	bl	8001c6c <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e03f      	b.n	8003254 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031d4:	4b22      	ldr	r3, [pc, #136]	; (8003260 <HAL_RCC_OscConfig+0x4e8>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1f0      	bne.n	80031c2 <HAL_RCC_OscConfig+0x44a>
 80031e0:	e037      	b.n	8003252 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d101      	bne.n	80031ee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e032      	b.n	8003254 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031ee:	4b1c      	ldr	r3, [pc, #112]	; (8003260 <HAL_RCC_OscConfig+0x4e8>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d028      	beq.n	800324e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003206:	429a      	cmp	r2, r3
 8003208:	d121      	bne.n	800324e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003214:	429a      	cmp	r2, r3
 8003216:	d11a      	bne.n	800324e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800321e:	4013      	ands	r3, r2
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003224:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003226:	4293      	cmp	r3, r2
 8003228:	d111      	bne.n	800324e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003234:	085b      	lsrs	r3, r3, #1
 8003236:	3b01      	subs	r3, #1
 8003238:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800323a:	429a      	cmp	r2, r3
 800323c:	d107      	bne.n	800324e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003248:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800324a:	429a      	cmp	r2, r3
 800324c:	d001      	beq.n	8003252 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e000      	b.n	8003254 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3718      	adds	r7, #24
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	40007000 	.word	0x40007000
 8003260:	40023800 	.word	0x40023800
 8003264:	42470060 	.word	0x42470060

08003268 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e0cc      	b.n	8003416 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800327c:	4b68      	ldr	r3, [pc, #416]	; (8003420 <HAL_RCC_ClockConfig+0x1b8>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	429a      	cmp	r2, r3
 8003288:	d90c      	bls.n	80032a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800328a:	4b65      	ldr	r3, [pc, #404]	; (8003420 <HAL_RCC_ClockConfig+0x1b8>)
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003292:	4b63      	ldr	r3, [pc, #396]	; (8003420 <HAL_RCC_ClockConfig+0x1b8>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	429a      	cmp	r2, r3
 800329e:	d001      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e0b8      	b.n	8003416 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d020      	beq.n	80032f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0304 	and.w	r3, r3, #4
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032bc:	4b59      	ldr	r3, [pc, #356]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	4a58      	ldr	r2, [pc, #352]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80032c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0308 	and.w	r3, r3, #8
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d005      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032d4:	4b53      	ldr	r3, [pc, #332]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	4a52      	ldr	r2, [pc, #328]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032e0:	4b50      	ldr	r3, [pc, #320]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	494d      	ldr	r1, [pc, #308]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d044      	beq.n	8003388 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d107      	bne.n	8003316 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003306:	4b47      	ldr	r3, [pc, #284]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d119      	bne.n	8003346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e07f      	b.n	8003416 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b02      	cmp	r3, #2
 800331c:	d003      	beq.n	8003326 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003322:	2b03      	cmp	r3, #3
 8003324:	d107      	bne.n	8003336 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003326:	4b3f      	ldr	r3, [pc, #252]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d109      	bne.n	8003346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e06f      	b.n	8003416 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003336:	4b3b      	ldr	r3, [pc, #236]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e067      	b.n	8003416 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003346:	4b37      	ldr	r3, [pc, #220]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f023 0203 	bic.w	r2, r3, #3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	4934      	ldr	r1, [pc, #208]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 8003354:	4313      	orrs	r3, r2
 8003356:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003358:	f7fe fc88 	bl	8001c6c <HAL_GetTick>
 800335c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335e:	e00a      	b.n	8003376 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003360:	f7fe fc84 	bl	8001c6c <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	f241 3288 	movw	r2, #5000	; 0x1388
 800336e:	4293      	cmp	r3, r2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e04f      	b.n	8003416 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003376:	4b2b      	ldr	r3, [pc, #172]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 020c 	and.w	r2, r3, #12
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	429a      	cmp	r2, r3
 8003386:	d1eb      	bne.n	8003360 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003388:	4b25      	ldr	r3, [pc, #148]	; (8003420 <HAL_RCC_ClockConfig+0x1b8>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0307 	and.w	r3, r3, #7
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	429a      	cmp	r2, r3
 8003394:	d20c      	bcs.n	80033b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003396:	4b22      	ldr	r3, [pc, #136]	; (8003420 <HAL_RCC_ClockConfig+0x1b8>)
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	b2d2      	uxtb	r2, r2
 800339c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800339e:	4b20      	ldr	r3, [pc, #128]	; (8003420 <HAL_RCC_ClockConfig+0x1b8>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d001      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e032      	b.n	8003416 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d008      	beq.n	80033ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033bc:	4b19      	ldr	r3, [pc, #100]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	4916      	ldr	r1, [pc, #88]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0308 	and.w	r3, r3, #8
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d009      	beq.n	80033ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033da:	4b12      	ldr	r3, [pc, #72]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	490e      	ldr	r1, [pc, #56]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033ee:	f000 f821 	bl	8003434 <HAL_RCC_GetSysClockFreq>
 80033f2:	4602      	mov	r2, r0
 80033f4:	4b0b      	ldr	r3, [pc, #44]	; (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	091b      	lsrs	r3, r3, #4
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	490a      	ldr	r1, [pc, #40]	; (8003428 <HAL_RCC_ClockConfig+0x1c0>)
 8003400:	5ccb      	ldrb	r3, [r1, r3]
 8003402:	fa22 f303 	lsr.w	r3, r2, r3
 8003406:	4a09      	ldr	r2, [pc, #36]	; (800342c <HAL_RCC_ClockConfig+0x1c4>)
 8003408:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800340a:	4b09      	ldr	r3, [pc, #36]	; (8003430 <HAL_RCC_ClockConfig+0x1c8>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4618      	mov	r0, r3
 8003410:	f7fe fbe8 	bl	8001be4 <HAL_InitTick>

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	40023c00 	.word	0x40023c00
 8003424:	40023800 	.word	0x40023800
 8003428:	08009fe8 	.word	0x08009fe8
 800342c:	20000000 	.word	0x20000000
 8003430:	20000004 	.word	0x20000004

08003434 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003434:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003438:	b084      	sub	sp, #16
 800343a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800343c:	2300      	movs	r3, #0
 800343e:	607b      	str	r3, [r7, #4]
 8003440:	2300      	movs	r3, #0
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	2300      	movs	r3, #0
 8003446:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003448:	2300      	movs	r3, #0
 800344a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800344c:	4b67      	ldr	r3, [pc, #412]	; (80035ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f003 030c 	and.w	r3, r3, #12
 8003454:	2b08      	cmp	r3, #8
 8003456:	d00d      	beq.n	8003474 <HAL_RCC_GetSysClockFreq+0x40>
 8003458:	2b08      	cmp	r3, #8
 800345a:	f200 80bd 	bhi.w	80035d8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800345e:	2b00      	cmp	r3, #0
 8003460:	d002      	beq.n	8003468 <HAL_RCC_GetSysClockFreq+0x34>
 8003462:	2b04      	cmp	r3, #4
 8003464:	d003      	beq.n	800346e <HAL_RCC_GetSysClockFreq+0x3a>
 8003466:	e0b7      	b.n	80035d8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003468:	4b61      	ldr	r3, [pc, #388]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800346a:	60bb      	str	r3, [r7, #8]
       break;
 800346c:	e0b7      	b.n	80035de <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800346e:	4b61      	ldr	r3, [pc, #388]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003470:	60bb      	str	r3, [r7, #8]
      break;
 8003472:	e0b4      	b.n	80035de <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003474:	4b5d      	ldr	r3, [pc, #372]	; (80035ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800347c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800347e:	4b5b      	ldr	r3, [pc, #364]	; (80035ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d04d      	beq.n	8003526 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800348a:	4b58      	ldr	r3, [pc, #352]	; (80035ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	099b      	lsrs	r3, r3, #6
 8003490:	461a      	mov	r2, r3
 8003492:	f04f 0300 	mov.w	r3, #0
 8003496:	f240 10ff 	movw	r0, #511	; 0x1ff
 800349a:	f04f 0100 	mov.w	r1, #0
 800349e:	ea02 0800 	and.w	r8, r2, r0
 80034a2:	ea03 0901 	and.w	r9, r3, r1
 80034a6:	4640      	mov	r0, r8
 80034a8:	4649      	mov	r1, r9
 80034aa:	f04f 0200 	mov.w	r2, #0
 80034ae:	f04f 0300 	mov.w	r3, #0
 80034b2:	014b      	lsls	r3, r1, #5
 80034b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80034b8:	0142      	lsls	r2, r0, #5
 80034ba:	4610      	mov	r0, r2
 80034bc:	4619      	mov	r1, r3
 80034be:	ebb0 0008 	subs.w	r0, r0, r8
 80034c2:	eb61 0109 	sbc.w	r1, r1, r9
 80034c6:	f04f 0200 	mov.w	r2, #0
 80034ca:	f04f 0300 	mov.w	r3, #0
 80034ce:	018b      	lsls	r3, r1, #6
 80034d0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80034d4:	0182      	lsls	r2, r0, #6
 80034d6:	1a12      	subs	r2, r2, r0
 80034d8:	eb63 0301 	sbc.w	r3, r3, r1
 80034dc:	f04f 0000 	mov.w	r0, #0
 80034e0:	f04f 0100 	mov.w	r1, #0
 80034e4:	00d9      	lsls	r1, r3, #3
 80034e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034ea:	00d0      	lsls	r0, r2, #3
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	eb12 0208 	adds.w	r2, r2, r8
 80034f4:	eb43 0309 	adc.w	r3, r3, r9
 80034f8:	f04f 0000 	mov.w	r0, #0
 80034fc:	f04f 0100 	mov.w	r1, #0
 8003500:	0259      	lsls	r1, r3, #9
 8003502:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003506:	0250      	lsls	r0, r2, #9
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
 800350c:	4610      	mov	r0, r2
 800350e:	4619      	mov	r1, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	461a      	mov	r2, r3
 8003514:	f04f 0300 	mov.w	r3, #0
 8003518:	f7fd fbb6 	bl	8000c88 <__aeabi_uldivmod>
 800351c:	4602      	mov	r2, r0
 800351e:	460b      	mov	r3, r1
 8003520:	4613      	mov	r3, r2
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	e04a      	b.n	80035bc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003526:	4b31      	ldr	r3, [pc, #196]	; (80035ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	099b      	lsrs	r3, r3, #6
 800352c:	461a      	mov	r2, r3
 800352e:	f04f 0300 	mov.w	r3, #0
 8003532:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003536:	f04f 0100 	mov.w	r1, #0
 800353a:	ea02 0400 	and.w	r4, r2, r0
 800353e:	ea03 0501 	and.w	r5, r3, r1
 8003542:	4620      	mov	r0, r4
 8003544:	4629      	mov	r1, r5
 8003546:	f04f 0200 	mov.w	r2, #0
 800354a:	f04f 0300 	mov.w	r3, #0
 800354e:	014b      	lsls	r3, r1, #5
 8003550:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003554:	0142      	lsls	r2, r0, #5
 8003556:	4610      	mov	r0, r2
 8003558:	4619      	mov	r1, r3
 800355a:	1b00      	subs	r0, r0, r4
 800355c:	eb61 0105 	sbc.w	r1, r1, r5
 8003560:	f04f 0200 	mov.w	r2, #0
 8003564:	f04f 0300 	mov.w	r3, #0
 8003568:	018b      	lsls	r3, r1, #6
 800356a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800356e:	0182      	lsls	r2, r0, #6
 8003570:	1a12      	subs	r2, r2, r0
 8003572:	eb63 0301 	sbc.w	r3, r3, r1
 8003576:	f04f 0000 	mov.w	r0, #0
 800357a:	f04f 0100 	mov.w	r1, #0
 800357e:	00d9      	lsls	r1, r3, #3
 8003580:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003584:	00d0      	lsls	r0, r2, #3
 8003586:	4602      	mov	r2, r0
 8003588:	460b      	mov	r3, r1
 800358a:	1912      	adds	r2, r2, r4
 800358c:	eb45 0303 	adc.w	r3, r5, r3
 8003590:	f04f 0000 	mov.w	r0, #0
 8003594:	f04f 0100 	mov.w	r1, #0
 8003598:	0299      	lsls	r1, r3, #10
 800359a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800359e:	0290      	lsls	r0, r2, #10
 80035a0:	4602      	mov	r2, r0
 80035a2:	460b      	mov	r3, r1
 80035a4:	4610      	mov	r0, r2
 80035a6:	4619      	mov	r1, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	461a      	mov	r2, r3
 80035ac:	f04f 0300 	mov.w	r3, #0
 80035b0:	f7fd fb6a 	bl	8000c88 <__aeabi_uldivmod>
 80035b4:	4602      	mov	r2, r0
 80035b6:	460b      	mov	r3, r1
 80035b8:	4613      	mov	r3, r2
 80035ba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035bc:	4b0b      	ldr	r3, [pc, #44]	; (80035ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	0c1b      	lsrs	r3, r3, #16
 80035c2:	f003 0303 	and.w	r3, r3, #3
 80035c6:	3301      	adds	r3, #1
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d4:	60bb      	str	r3, [r7, #8]
      break;
 80035d6:	e002      	b.n	80035de <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035d8:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80035da:	60bb      	str	r3, [r7, #8]
      break;
 80035dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035de:	68bb      	ldr	r3, [r7, #8]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80035ea:	bf00      	nop
 80035ec:	40023800 	.word	0x40023800
 80035f0:	00f42400 	.word	0x00f42400
 80035f4:	007a1200 	.word	0x007a1200

080035f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035fc:	4b03      	ldr	r3, [pc, #12]	; (800360c <HAL_RCC_GetHCLKFreq+0x14>)
 80035fe:	681b      	ldr	r3, [r3, #0]
}
 8003600:	4618      	mov	r0, r3
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	20000000 	.word	0x20000000

08003610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003614:	f7ff fff0 	bl	80035f8 <HAL_RCC_GetHCLKFreq>
 8003618:	4602      	mov	r2, r0
 800361a:	4b05      	ldr	r3, [pc, #20]	; (8003630 <HAL_RCC_GetPCLK1Freq+0x20>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	0a9b      	lsrs	r3, r3, #10
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	4903      	ldr	r1, [pc, #12]	; (8003634 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003626:	5ccb      	ldrb	r3, [r1, r3]
 8003628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800362c:	4618      	mov	r0, r3
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40023800 	.word	0x40023800
 8003634:	08009ff8 	.word	0x08009ff8

08003638 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800363c:	f7ff ffdc 	bl	80035f8 <HAL_RCC_GetHCLKFreq>
 8003640:	4602      	mov	r2, r0
 8003642:	4b05      	ldr	r3, [pc, #20]	; (8003658 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	0b5b      	lsrs	r3, r3, #13
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	4903      	ldr	r1, [pc, #12]	; (800365c <HAL_RCC_GetPCLK2Freq+0x24>)
 800364e:	5ccb      	ldrb	r3, [r1, r3]
 8003650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003654:	4618      	mov	r0, r3
 8003656:	bd80      	pop	{r7, pc}
 8003658:	40023800 	.word	0x40023800
 800365c:	08009ff8 	.word	0x08009ff8

08003660 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e03f      	b.n	80036f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d106      	bne.n	800368c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7fd feae 	bl	80013e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2224      	movs	r2, #36	; 0x24
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68da      	ldr	r2, [r3, #12]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 ff9b 	bl	80045e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	691a      	ldr	r2, [r3, #16]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	695a      	ldr	r2, [r3, #20]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68da      	ldr	r2, [r3, #12]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2220      	movs	r2, #32
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b082      	sub	sp, #8
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e021      	b.n	8003750 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2224      	movs	r2, #36	; 0x24
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68da      	ldr	r2, [r3, #12]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003722:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f7fe f865 	bl	80017f4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b08a      	sub	sp, #40	; 0x28
 800375c:	af02      	add	r7, sp, #8
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	603b      	str	r3, [r7, #0]
 8003764:	4613      	mov	r3, r2
 8003766:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003768:	2300      	movs	r3, #0
 800376a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b20      	cmp	r3, #32
 8003776:	d17c      	bne.n	8003872 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d002      	beq.n	8003784 <HAL_UART_Transmit+0x2c>
 800377e:	88fb      	ldrh	r3, [r7, #6]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e075      	b.n	8003874 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800378e:	2b01      	cmp	r3, #1
 8003790:	d101      	bne.n	8003796 <HAL_UART_Transmit+0x3e>
 8003792:	2302      	movs	r3, #2
 8003794:	e06e      	b.n	8003874 <HAL_UART_Transmit+0x11c>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2221      	movs	r2, #33	; 0x21
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037ac:	f7fe fa5e 	bl	8001c6c <HAL_GetTick>
 80037b0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	88fa      	ldrh	r2, [r7, #6]
 80037b6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	88fa      	ldrh	r2, [r7, #6]
 80037bc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037c6:	d108      	bne.n	80037da <HAL_UART_Transmit+0x82>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d104      	bne.n	80037da <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80037d0:	2300      	movs	r3, #0
 80037d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	61bb      	str	r3, [r7, #24]
 80037d8:	e003      	b.n	80037e2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037de:	2300      	movs	r3, #0
 80037e0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80037ea:	e02a      	b.n	8003842 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	2200      	movs	r2, #0
 80037f4:	2180      	movs	r1, #128	; 0x80
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 fc87 	bl	800410a <UART_WaitOnFlagUntilTimeout>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e036      	b.n	8003874 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10b      	bne.n	8003824 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	881b      	ldrh	r3, [r3, #0]
 8003810:	461a      	mov	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800381a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	3302      	adds	r3, #2
 8003820:	61bb      	str	r3, [r7, #24]
 8003822:	e007      	b.n	8003834 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	781a      	ldrb	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	3301      	adds	r3, #1
 8003832:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003838:	b29b      	uxth	r3, r3
 800383a:	3b01      	subs	r3, #1
 800383c:	b29a      	uxth	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003846:	b29b      	uxth	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1cf      	bne.n	80037ec <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	2200      	movs	r2, #0
 8003854:	2140      	movs	r1, #64	; 0x40
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f000 fc57 	bl	800410a <UART_WaitOnFlagUntilTimeout>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e006      	b.n	8003874 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2220      	movs	r2, #32
 800386a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800386e:	2300      	movs	r3, #0
 8003870:	e000      	b.n	8003874 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003872:	2302      	movs	r3, #2
  }
}
 8003874:	4618      	mov	r0, r3
 8003876:	3720      	adds	r7, #32
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	4613      	mov	r3, r2
 8003888:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b20      	cmp	r3, #32
 8003894:	d130      	bne.n	80038f8 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d002      	beq.n	80038a2 <HAL_UART_Transmit_IT+0x26>
 800389c:	88fb      	ldrh	r3, [r7, #6]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e029      	b.n	80038fa <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d101      	bne.n	80038b4 <HAL_UART_Transmit_IT+0x38>
 80038b0:	2302      	movs	r3, #2
 80038b2:	e022      	b.n	80038fa <HAL_UART_Transmit_IT+0x7e>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	88fa      	ldrh	r2, [r7, #6]
 80038c6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	88fa      	ldrh	r2, [r7, #6]
 80038cc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2221      	movs	r2, #33	; 0x21
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68da      	ldr	r2, [r3, #12]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038f2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80038f4:	2300      	movs	r3, #0
 80038f6:	e000      	b.n	80038fa <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80038f8:	2302      	movs	r3, #2
  }
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr

08003906 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b084      	sub	sp, #16
 800390a:	af00      	add	r7, sp, #0
 800390c:	60f8      	str	r0, [r7, #12]
 800390e:	60b9      	str	r1, [r7, #8]
 8003910:	4613      	mov	r3, r2
 8003912:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b20      	cmp	r3, #32
 800391e:	d11d      	bne.n	800395c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d002      	beq.n	800392c <HAL_UART_Receive_IT+0x26>
 8003926:	88fb      	ldrh	r3, [r7, #6]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e016      	b.n	800395e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003936:	2b01      	cmp	r3, #1
 8003938:	d101      	bne.n	800393e <HAL_UART_Receive_IT+0x38>
 800393a:	2302      	movs	r3, #2
 800393c:	e00f      	b.n	800395e <HAL_UART_Receive_IT+0x58>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800394c:	88fb      	ldrh	r3, [r7, #6]
 800394e:	461a      	mov	r2, r3
 8003950:	68b9      	ldr	r1, [r7, #8]
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 fc47 	bl	80041e6 <UART_Start_Receive_IT>
 8003958:	4603      	mov	r3, r0
 800395a:	e000      	b.n	800395e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800395c:	2302      	movs	r3, #2
  }
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
	...

08003968 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b08c      	sub	sp, #48	; 0x30
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	4613      	mov	r3, r2
 8003974:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b20      	cmp	r3, #32
 8003980:	d165      	bne.n	8003a4e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d002      	beq.n	800398e <HAL_UART_Transmit_DMA+0x26>
 8003988:	88fb      	ldrh	r3, [r7, #6]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e05e      	b.n	8003a50 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003998:	2b01      	cmp	r3, #1
 800399a:	d101      	bne.n	80039a0 <HAL_UART_Transmit_DMA+0x38>
 800399c:	2302      	movs	r3, #2
 800399e:	e057      	b.n	8003a50 <HAL_UART_Transmit_DMA+0xe8>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80039a8:	68ba      	ldr	r2, [r7, #8]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	88fa      	ldrh	r2, [r7, #6]
 80039b2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	88fa      	ldrh	r2, [r7, #6]
 80039b8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2221      	movs	r2, #33	; 0x21
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039cc:	4a22      	ldr	r2, [pc, #136]	; (8003a58 <HAL_UART_Transmit_DMA+0xf0>)
 80039ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d4:	4a21      	ldr	r2, [pc, #132]	; (8003a5c <HAL_UART_Transmit_DMA+0xf4>)
 80039d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039dc:	4a20      	ldr	r2, [pc, #128]	; (8003a60 <HAL_UART_Transmit_DMA+0xf8>)
 80039de:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e4:	2200      	movs	r2, #0
 80039e6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80039e8:	f107 0308 	add.w	r3, r7, #8
 80039ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80039f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f4:	6819      	ldr	r1, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	3304      	adds	r3, #4
 80039fc:	461a      	mov	r2, r3
 80039fe:	88fb      	ldrh	r3, [r7, #6]
 8003a00:	f7fe fbb4 	bl	800216c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a0c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	3314      	adds	r3, #20
 8003a1c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	e853 3f00 	ldrex	r3, [r3]
 8003a24:	617b      	str	r3, [r7, #20]
   return(result);
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	3314      	adds	r3, #20
 8003a34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a36:	627a      	str	r2, [r7, #36]	; 0x24
 8003a38:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3a:	6a39      	ldr	r1, [r7, #32]
 8003a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a3e:	e841 2300 	strex	r3, r2, [r1]
 8003a42:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1e5      	bne.n	8003a16 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	e000      	b.n	8003a50 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8003a4e:	2302      	movs	r3, #2
  }
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3730      	adds	r7, #48	; 0x30
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	08003fc1 	.word	0x08003fc1
 8003a5c:	0800405b 	.word	0x0800405b
 8003a60:	08004077 	.word	0x08004077

08003a64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b0ba      	sub	sp, #232	; 0xe8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a9a:	f003 030f 	and.w	r3, r3, #15
 8003a9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003aa2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10f      	bne.n	8003aca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aae:	f003 0320 	and.w	r3, r3, #32
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d009      	beq.n	8003aca <HAL_UART_IRQHandler+0x66>
 8003ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aba:	f003 0320 	and.w	r3, r3, #32
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 fcd0 	bl	8004468 <UART_Receive_IT>
      return;
 8003ac8:	e256      	b.n	8003f78 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003aca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f000 80de 	beq.w	8003c90 <HAL_UART_IRQHandler+0x22c>
 8003ad4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d106      	bne.n	8003aee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ae4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 80d1 	beq.w	8003c90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00b      	beq.n	8003b12 <HAL_UART_IRQHandler+0xae>
 8003afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d005      	beq.n	8003b12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	f043 0201 	orr.w	r2, r3, #1
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b16:	f003 0304 	and.w	r3, r3, #4
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00b      	beq.n	8003b36 <HAL_UART_IRQHandler+0xd2>
 8003b1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d005      	beq.n	8003b36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	f043 0202 	orr.w	r2, r3, #2
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00b      	beq.n	8003b5a <HAL_UART_IRQHandler+0xf6>
 8003b42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d005      	beq.n	8003b5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	f043 0204 	orr.w	r2, r3, #4
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b5e:	f003 0308 	and.w	r3, r3, #8
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d011      	beq.n	8003b8a <HAL_UART_IRQHandler+0x126>
 8003b66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b6a:	f003 0320 	and.w	r3, r3, #32
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d105      	bne.n	8003b7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d005      	beq.n	8003b8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	f043 0208 	orr.w	r2, r3, #8
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f000 81ed 	beq.w	8003f6e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b98:	f003 0320 	and.w	r3, r3, #32
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d008      	beq.n	8003bb2 <HAL_UART_IRQHandler+0x14e>
 8003ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ba4:	f003 0320 	and.w	r3, r3, #32
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d002      	beq.n	8003bb2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 fc5b 	bl	8004468 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bbc:	2b40      	cmp	r3, #64	; 0x40
 8003bbe:	bf0c      	ite	eq
 8003bc0:	2301      	moveq	r3, #1
 8003bc2:	2300      	movne	r3, #0
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d103      	bne.n	8003bde <HAL_UART_IRQHandler+0x17a>
 8003bd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d04f      	beq.n	8003c7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 fb63 	bl	80042aa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bee:	2b40      	cmp	r3, #64	; 0x40
 8003bf0:	d141      	bne.n	8003c76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	3314      	adds	r3, #20
 8003bf8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c00:	e853 3f00 	ldrex	r3, [r3]
 8003c04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	3314      	adds	r3, #20
 8003c1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c2e:	e841 2300 	strex	r3, r2, [r1]
 8003c32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1d9      	bne.n	8003bf2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d013      	beq.n	8003c6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4a:	4a7d      	ldr	r2, [pc, #500]	; (8003e40 <HAL_UART_IRQHandler+0x3dc>)
 8003c4c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7fe fb52 	bl	80022fc <HAL_DMA_Abort_IT>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d016      	beq.n	8003c8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c68:	4610      	mov	r0, r2
 8003c6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c6c:	e00e      	b.n	8003c8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f990 	bl	8003f94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c74:	e00a      	b.n	8003c8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f98c 	bl	8003f94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c7c:	e006      	b.n	8003c8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f988 	bl	8003f94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003c8a:	e170      	b.n	8003f6e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c8c:	bf00      	nop
    return;
 8003c8e:	e16e      	b.n	8003f6e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	f040 814a 	bne.w	8003f2e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c9e:	f003 0310 	and.w	r3, r3, #16
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f000 8143 	beq.w	8003f2e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cac:	f003 0310 	and.w	r3, r3, #16
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 813c 	beq.w	8003f2e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60bb      	str	r3, [r7, #8]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	60bb      	str	r3, [r7, #8]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	60bb      	str	r3, [r7, #8]
 8003cca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd6:	2b40      	cmp	r3, #64	; 0x40
 8003cd8:	f040 80b4 	bne.w	8003e44 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ce8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 8140 	beq.w	8003f72 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	f080 8139 	bcs.w	8003f72 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d06:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0c:	69db      	ldr	r3, [r3, #28]
 8003d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d12:	f000 8088 	beq.w	8003e26 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	330c      	adds	r3, #12
 8003d1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d24:	e853 3f00 	ldrex	r3, [r3]
 8003d28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	330c      	adds	r3, #12
 8003d3e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003d42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d52:	e841 2300 	strex	r3, r2, [r1]
 8003d56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1d9      	bne.n	8003d16 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	3314      	adds	r3, #20
 8003d68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d6c:	e853 3f00 	ldrex	r3, [r3]
 8003d70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d74:	f023 0301 	bic.w	r3, r3, #1
 8003d78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	3314      	adds	r3, #20
 8003d82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d86:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d8a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d92:	e841 2300 	strex	r3, r2, [r1]
 8003d96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1e1      	bne.n	8003d62 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	3314      	adds	r3, #20
 8003da4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003da8:	e853 3f00 	ldrex	r3, [r3]
 8003dac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003dae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003db0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003db4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	3314      	adds	r3, #20
 8003dbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003dc2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003dc4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003dc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003dca:	e841 2300 	strex	r3, r2, [r1]
 8003dce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003dd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1e3      	bne.n	8003d9e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2220      	movs	r2, #32
 8003dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	330c      	adds	r3, #12
 8003dea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dee:	e853 3f00 	ldrex	r3, [r3]
 8003df2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003df4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003df6:	f023 0310 	bic.w	r3, r3, #16
 8003dfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	330c      	adds	r3, #12
 8003e04:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003e08:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e0a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e10:	e841 2300 	strex	r3, r2, [r1]
 8003e14:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1e3      	bne.n	8003de4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7fe f9fb 	bl	800221c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	4619      	mov	r1, r3
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f8b6 	bl	8003fa8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e3c:	e099      	b.n	8003f72 <HAL_UART_IRQHandler+0x50e>
 8003e3e:	bf00      	nop
 8003e40:	08004371 	.word	0x08004371
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 808b 	beq.w	8003f76 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003e60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 8086 	beq.w	8003f76 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	330c      	adds	r3, #12
 8003e70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e74:	e853 3f00 	ldrex	r3, [r3]
 8003e78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	330c      	adds	r3, #12
 8003e8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003e8e:	647a      	str	r2, [r7, #68]	; 0x44
 8003e90:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e96:	e841 2300 	strex	r3, r2, [r1]
 8003e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1e3      	bne.n	8003e6a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	3314      	adds	r3, #20
 8003ea8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	e853 3f00 	ldrex	r3, [r3]
 8003eb0:	623b      	str	r3, [r7, #32]
   return(result);
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	f023 0301 	bic.w	r3, r3, #1
 8003eb8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	3314      	adds	r3, #20
 8003ec2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003ec6:	633a      	str	r2, [r7, #48]	; 0x30
 8003ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ece:	e841 2300 	strex	r3, r2, [r1]
 8003ed2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1e3      	bne.n	8003ea2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2220      	movs	r2, #32
 8003ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	330c      	adds	r3, #12
 8003eee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	e853 3f00 	ldrex	r3, [r3]
 8003ef6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f023 0310 	bic.w	r3, r3, #16
 8003efe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	330c      	adds	r3, #12
 8003f08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003f0c:	61fa      	str	r2, [r7, #28]
 8003f0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f10:	69b9      	ldr	r1, [r7, #24]
 8003f12:	69fa      	ldr	r2, [r7, #28]
 8003f14:	e841 2300 	strex	r3, r2, [r1]
 8003f18:	617b      	str	r3, [r7, #20]
   return(result);
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1e3      	bne.n	8003ee8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f24:	4619      	mov	r1, r3
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f83e 	bl	8003fa8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f2c:	e023      	b.n	8003f76 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d009      	beq.n	8003f4e <HAL_UART_IRQHandler+0x4ea>
 8003f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 fa26 	bl	8004398 <UART_Transmit_IT>
    return;
 8003f4c:	e014      	b.n	8003f78 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00e      	beq.n	8003f78 <HAL_UART_IRQHandler+0x514>
 8003f5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d008      	beq.n	8003f78 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 fa66 	bl	8004438 <UART_EndTransmit_IT>
    return;
 8003f6c:	e004      	b.n	8003f78 <HAL_UART_IRQHandler+0x514>
    return;
 8003f6e:	bf00      	nop
 8003f70:	e002      	b.n	8003f78 <HAL_UART_IRQHandler+0x514>
      return;
 8003f72:	bf00      	nop
 8003f74:	e000      	b.n	8003f78 <HAL_UART_IRQHandler+0x514>
      return;
 8003f76:	bf00      	nop
  }
}
 8003f78:	37e8      	adds	r7, #232	; 0xe8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop

08003f80 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b090      	sub	sp, #64	; 0x40
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d137      	bne.n	800404c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fde:	2200      	movs	r2, #0
 8003fe0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3314      	adds	r3, #20
 8003fe8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	e853 3f00 	ldrex	r3, [r3]
 8003ff0:	623b      	str	r3, [r7, #32]
   return(result);
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ff8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	3314      	adds	r3, #20
 8004000:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004002:	633a      	str	r2, [r7, #48]	; 0x30
 8004004:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004006:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800400a:	e841 2300 	strex	r3, r2, [r1]
 800400e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1e5      	bne.n	8003fe2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	330c      	adds	r3, #12
 800401c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	e853 3f00 	ldrex	r3, [r3]
 8004024:	60fb      	str	r3, [r7, #12]
   return(result);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800402c:	637b      	str	r3, [r7, #52]	; 0x34
 800402e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	330c      	adds	r3, #12
 8004034:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004036:	61fa      	str	r2, [r7, #28]
 8004038:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403a:	69b9      	ldr	r1, [r7, #24]
 800403c:	69fa      	ldr	r2, [r7, #28]
 800403e:	e841 2300 	strex	r3, r2, [r1]
 8004042:	617b      	str	r3, [r7, #20]
   return(result);
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1e5      	bne.n	8004016 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800404a:	e002      	b.n	8004052 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800404c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800404e:	f001 f883 	bl	8005158 <HAL_UART_TxCpltCallback>
}
 8004052:	bf00      	nop
 8004054:	3740      	adds	r7, #64	; 0x40
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b084      	sub	sp, #16
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004066:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f7ff ff89 	bl	8003f80 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800406e:	bf00      	nop
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b084      	sub	sp, #16
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800407e:	2300      	movs	r3, #0
 8004080:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004086:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004092:	2b80      	cmp	r3, #128	; 0x80
 8004094:	bf0c      	ite	eq
 8004096:	2301      	moveq	r3, #1
 8004098:	2300      	movne	r3, #0
 800409a:	b2db      	uxtb	r3, r3
 800409c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b21      	cmp	r3, #33	; 0x21
 80040a8:	d108      	bne.n	80040bc <UART_DMAError+0x46>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d005      	beq.n	80040bc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	2200      	movs	r2, #0
 80040b4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80040b6:	68b8      	ldr	r0, [r7, #8]
 80040b8:	f000 f8cf 	bl	800425a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c6:	2b40      	cmp	r3, #64	; 0x40
 80040c8:	bf0c      	ite	eq
 80040ca:	2301      	moveq	r3, #1
 80040cc:	2300      	movne	r3, #0
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b22      	cmp	r3, #34	; 0x22
 80040dc:	d108      	bne.n	80040f0 <UART_DMAError+0x7a>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d005      	beq.n	80040f0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	2200      	movs	r2, #0
 80040e8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80040ea:	68b8      	ldr	r0, [r7, #8]
 80040ec:	f000 f8dd 	bl	80042aa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f4:	f043 0210 	orr.w	r2, r3, #16
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040fc:	68b8      	ldr	r0, [r7, #8]
 80040fe:	f7ff ff49 	bl	8003f94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004102:	bf00      	nop
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b090      	sub	sp, #64	; 0x40
 800410e:	af00      	add	r7, sp, #0
 8004110:	60f8      	str	r0, [r7, #12]
 8004112:	60b9      	str	r1, [r7, #8]
 8004114:	603b      	str	r3, [r7, #0]
 8004116:	4613      	mov	r3, r2
 8004118:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800411a:	e050      	b.n	80041be <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800411c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800411e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004122:	d04c      	beq.n	80041be <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004126:	2b00      	cmp	r3, #0
 8004128:	d007      	beq.n	800413a <UART_WaitOnFlagUntilTimeout+0x30>
 800412a:	f7fd fd9f 	bl	8001c6c <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004136:	429a      	cmp	r2, r3
 8004138:	d241      	bcs.n	80041be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	330c      	adds	r3, #12
 8004140:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004144:	e853 3f00 	ldrex	r3, [r3]
 8004148:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800414a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004150:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	330c      	adds	r3, #12
 8004158:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800415a:	637a      	str	r2, [r7, #52]	; 0x34
 800415c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004160:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004162:	e841 2300 	strex	r3, r2, [r1]
 8004166:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1e5      	bne.n	800413a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	3314      	adds	r3, #20
 8004174:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	e853 3f00 	ldrex	r3, [r3]
 800417c:	613b      	str	r3, [r7, #16]
   return(result);
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	f023 0301 	bic.w	r3, r3, #1
 8004184:	63bb      	str	r3, [r7, #56]	; 0x38
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	3314      	adds	r3, #20
 800418c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800418e:	623a      	str	r2, [r7, #32]
 8004190:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004192:	69f9      	ldr	r1, [r7, #28]
 8004194:	6a3a      	ldr	r2, [r7, #32]
 8004196:	e841 2300 	strex	r3, r2, [r1]
 800419a:	61bb      	str	r3, [r7, #24]
   return(result);
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1e5      	bne.n	800416e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2220      	movs	r2, #32
 80041a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2220      	movs	r2, #32
 80041ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e00f      	b.n	80041de <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	4013      	ands	r3, r2
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	bf0c      	ite	eq
 80041ce:	2301      	moveq	r3, #1
 80041d0:	2300      	movne	r3, #0
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	461a      	mov	r2, r3
 80041d6:	79fb      	ldrb	r3, [r7, #7]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d09f      	beq.n	800411c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3740      	adds	r7, #64	; 0x40
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b085      	sub	sp, #20
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	60f8      	str	r0, [r7, #12]
 80041ee:	60b9      	str	r1, [r7, #8]
 80041f0:	4613      	mov	r3, r2
 80041f2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	88fa      	ldrh	r2, [r7, #6]
 80041fe:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	88fa      	ldrh	r2, [r7, #6]
 8004204:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2222      	movs	r2, #34	; 0x22
 8004210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68da      	ldr	r2, [r3, #12]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800422a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	695a      	ldr	r2, [r3, #20]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 0201 	orr.w	r2, r2, #1
 800423a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68da      	ldr	r2, [r3, #12]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f042 0220 	orr.w	r2, r2, #32
 800424a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3714      	adds	r7, #20
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800425a:	b480      	push	{r7}
 800425c:	b089      	sub	sp, #36	; 0x24
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	330c      	adds	r3, #12
 8004268:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	e853 3f00 	ldrex	r3, [r3]
 8004270:	60bb      	str	r3, [r7, #8]
   return(result);
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004278:	61fb      	str	r3, [r7, #28]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	330c      	adds	r3, #12
 8004280:	69fa      	ldr	r2, [r7, #28]
 8004282:	61ba      	str	r2, [r7, #24]
 8004284:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004286:	6979      	ldr	r1, [r7, #20]
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	e841 2300 	strex	r3, r2, [r1]
 800428e:	613b      	str	r3, [r7, #16]
   return(result);
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1e5      	bne.n	8004262 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2220      	movs	r2, #32
 800429a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800429e:	bf00      	nop
 80042a0:	3724      	adds	r7, #36	; 0x24
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b095      	sub	sp, #84	; 0x54
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	330c      	adds	r3, #12
 80042b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042bc:	e853 3f00 	ldrex	r3, [r3]
 80042c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80042c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	330c      	adds	r3, #12
 80042d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042d2:	643a      	str	r2, [r7, #64]	; 0x40
 80042d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80042d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042da:	e841 2300 	strex	r3, r2, [r1]
 80042de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1e5      	bne.n	80042b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	3314      	adds	r3, #20
 80042ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ee:	6a3b      	ldr	r3, [r7, #32]
 80042f0:	e853 3f00 	ldrex	r3, [r3]
 80042f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	f023 0301 	bic.w	r3, r3, #1
 80042fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	3314      	adds	r3, #20
 8004304:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004306:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004308:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800430c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800430e:	e841 2300 	strex	r3, r2, [r1]
 8004312:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1e5      	bne.n	80042e6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431e:	2b01      	cmp	r3, #1
 8004320:	d119      	bne.n	8004356 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	330c      	adds	r3, #12
 8004328:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	e853 3f00 	ldrex	r3, [r3]
 8004330:	60bb      	str	r3, [r7, #8]
   return(result);
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	f023 0310 	bic.w	r3, r3, #16
 8004338:	647b      	str	r3, [r7, #68]	; 0x44
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	330c      	adds	r3, #12
 8004340:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004342:	61ba      	str	r2, [r7, #24]
 8004344:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004346:	6979      	ldr	r1, [r7, #20]
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	e841 2300 	strex	r3, r2, [r1]
 800434e:	613b      	str	r3, [r7, #16]
   return(result);
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1e5      	bne.n	8004322 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2220      	movs	r2, #32
 800435a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004364:	bf00      	nop
 8004366:	3754      	adds	r7, #84	; 0x54
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f7ff fe02 	bl	8003f94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004390:	bf00      	nop
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b21      	cmp	r3, #33	; 0x21
 80043aa:	d13e      	bne.n	800442a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b4:	d114      	bne.n	80043e0 <UART_Transmit_IT+0x48>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d110      	bne.n	80043e0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	881b      	ldrh	r3, [r3, #0]
 80043c8:	461a      	mov	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043d2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	1c9a      	adds	r2, r3, #2
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	621a      	str	r2, [r3, #32]
 80043de:	e008      	b.n	80043f2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	1c59      	adds	r1, r3, #1
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	6211      	str	r1, [r2, #32]
 80043ea:	781a      	ldrb	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	4619      	mov	r1, r3
 8004400:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10f      	bne.n	8004426 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68da      	ldr	r2, [r3, #12]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004414:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68da      	ldr	r2, [r3, #12]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004424:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004426:	2300      	movs	r3, #0
 8004428:	e000      	b.n	800442c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800442a:	2302      	movs	r3, #2
  }
}
 800442c:	4618      	mov	r0, r3
 800442e:	3714      	adds	r7, #20
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68da      	ldr	r2, [r3, #12]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800444e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2220      	movs	r2, #32
 8004454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 fe7d 	bl	8005158 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3708      	adds	r7, #8
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b08c      	sub	sp, #48	; 0x30
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b22      	cmp	r3, #34	; 0x22
 800447a:	f040 80ab 	bne.w	80045d4 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004486:	d117      	bne.n	80044b8 <UART_Receive_IT+0x50>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d113      	bne.n	80044b8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004490:	2300      	movs	r3, #0
 8004492:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004498:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044aa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b0:	1c9a      	adds	r2, r3, #2
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	629a      	str	r2, [r3, #40]	; 0x28
 80044b6:	e026      	b.n	8004506 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80044be:	2300      	movs	r3, #0
 80044c0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ca:	d007      	beq.n	80044dc <UART_Receive_IT+0x74>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10a      	bne.n	80044ea <UART_Receive_IT+0x82>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d106      	bne.n	80044ea <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	b2da      	uxtb	r2, r3
 80044e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e6:	701a      	strb	r2, [r3, #0]
 80044e8:	e008      	b.n	80044fc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044f6:	b2da      	uxtb	r2, r3
 80044f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004500:	1c5a      	adds	r2, r3, #1
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800450a:	b29b      	uxth	r3, r3
 800450c:	3b01      	subs	r3, #1
 800450e:	b29b      	uxth	r3, r3
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	4619      	mov	r1, r3
 8004514:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004516:	2b00      	cmp	r3, #0
 8004518:	d15a      	bne.n	80045d0 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68da      	ldr	r2, [r3, #12]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 0220 	bic.w	r2, r2, #32
 8004528:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68da      	ldr	r2, [r3, #12]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004538:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	695a      	ldr	r2, [r3, #20]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 0201 	bic.w	r2, r2, #1
 8004548:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2220      	movs	r2, #32
 800454e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004556:	2b01      	cmp	r3, #1
 8004558:	d135      	bne.n	80045c6 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	330c      	adds	r3, #12
 8004566:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	e853 3f00 	ldrex	r3, [r3]
 800456e:	613b      	str	r3, [r7, #16]
   return(result);
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	f023 0310 	bic.w	r3, r3, #16
 8004576:	627b      	str	r3, [r7, #36]	; 0x24
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	330c      	adds	r3, #12
 800457e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004580:	623a      	str	r2, [r7, #32]
 8004582:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004584:	69f9      	ldr	r1, [r7, #28]
 8004586:	6a3a      	ldr	r2, [r7, #32]
 8004588:	e841 2300 	strex	r3, r2, [r1]
 800458c:	61bb      	str	r3, [r7, #24]
   return(result);
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1e5      	bne.n	8004560 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0310 	and.w	r3, r3, #16
 800459e:	2b10      	cmp	r3, #16
 80045a0:	d10a      	bne.n	80045b8 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045a2:	2300      	movs	r3, #0
 80045a4:	60fb      	str	r3, [r7, #12]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	60fb      	str	r3, [r7, #12]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	60fb      	str	r3, [r7, #12]
 80045b6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045bc:	4619      	mov	r1, r3
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f7ff fcf2 	bl	8003fa8 <HAL_UARTEx_RxEventCallback>
 80045c4:	e002      	b.n	80045cc <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 fde8 	bl	800519c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80045cc:	2300      	movs	r3, #0
 80045ce:	e002      	b.n	80045d6 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80045d0:	2300      	movs	r3, #0
 80045d2:	e000      	b.n	80045d6 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80045d4:	2302      	movs	r3, #2
  }
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3730      	adds	r7, #48	; 0x30
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
	...

080045e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045e4:	b09f      	sub	sp, #124	; 0x7c
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80045f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045f6:	68d9      	ldr	r1, [r3, #12]
 80045f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	ea40 0301 	orr.w	r3, r0, r1
 8004600:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004604:	689a      	ldr	r2, [r3, #8]
 8004606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	431a      	orrs	r2, r3
 800460c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	431a      	orrs	r2, r3
 8004612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	4313      	orrs	r3, r2
 8004618:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800461a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004624:	f021 010c 	bic.w	r1, r1, #12
 8004628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800462e:	430b      	orrs	r3, r1
 8004630:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800463c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800463e:	6999      	ldr	r1, [r3, #24]
 8004640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	ea40 0301 	orr.w	r3, r0, r1
 8004648:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800464a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	4bc5      	ldr	r3, [pc, #788]	; (8004964 <UART_SetConfig+0x384>)
 8004650:	429a      	cmp	r2, r3
 8004652:	d004      	beq.n	800465e <UART_SetConfig+0x7e>
 8004654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	4bc3      	ldr	r3, [pc, #780]	; (8004968 <UART_SetConfig+0x388>)
 800465a:	429a      	cmp	r2, r3
 800465c:	d103      	bne.n	8004666 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800465e:	f7fe ffeb 	bl	8003638 <HAL_RCC_GetPCLK2Freq>
 8004662:	6778      	str	r0, [r7, #116]	; 0x74
 8004664:	e002      	b.n	800466c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004666:	f7fe ffd3 	bl	8003610 <HAL_RCC_GetPCLK1Freq>
 800466a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800466c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800466e:	69db      	ldr	r3, [r3, #28]
 8004670:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004674:	f040 80b6 	bne.w	80047e4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004678:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800467a:	461c      	mov	r4, r3
 800467c:	f04f 0500 	mov.w	r5, #0
 8004680:	4622      	mov	r2, r4
 8004682:	462b      	mov	r3, r5
 8004684:	1891      	adds	r1, r2, r2
 8004686:	6439      	str	r1, [r7, #64]	; 0x40
 8004688:	415b      	adcs	r3, r3
 800468a:	647b      	str	r3, [r7, #68]	; 0x44
 800468c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004690:	1912      	adds	r2, r2, r4
 8004692:	eb45 0303 	adc.w	r3, r5, r3
 8004696:	f04f 0000 	mov.w	r0, #0
 800469a:	f04f 0100 	mov.w	r1, #0
 800469e:	00d9      	lsls	r1, r3, #3
 80046a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046a4:	00d0      	lsls	r0, r2, #3
 80046a6:	4602      	mov	r2, r0
 80046a8:	460b      	mov	r3, r1
 80046aa:	1911      	adds	r1, r2, r4
 80046ac:	6639      	str	r1, [r7, #96]	; 0x60
 80046ae:	416b      	adcs	r3, r5
 80046b0:	667b      	str	r3, [r7, #100]	; 0x64
 80046b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	461a      	mov	r2, r3
 80046b8:	f04f 0300 	mov.w	r3, #0
 80046bc:	1891      	adds	r1, r2, r2
 80046be:	63b9      	str	r1, [r7, #56]	; 0x38
 80046c0:	415b      	adcs	r3, r3
 80046c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80046c8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80046cc:	f7fc fadc 	bl	8000c88 <__aeabi_uldivmod>
 80046d0:	4602      	mov	r2, r0
 80046d2:	460b      	mov	r3, r1
 80046d4:	4ba5      	ldr	r3, [pc, #660]	; (800496c <UART_SetConfig+0x38c>)
 80046d6:	fba3 2302 	umull	r2, r3, r3, r2
 80046da:	095b      	lsrs	r3, r3, #5
 80046dc:	011e      	lsls	r6, r3, #4
 80046de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046e0:	461c      	mov	r4, r3
 80046e2:	f04f 0500 	mov.w	r5, #0
 80046e6:	4622      	mov	r2, r4
 80046e8:	462b      	mov	r3, r5
 80046ea:	1891      	adds	r1, r2, r2
 80046ec:	6339      	str	r1, [r7, #48]	; 0x30
 80046ee:	415b      	adcs	r3, r3
 80046f0:	637b      	str	r3, [r7, #52]	; 0x34
 80046f2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80046f6:	1912      	adds	r2, r2, r4
 80046f8:	eb45 0303 	adc.w	r3, r5, r3
 80046fc:	f04f 0000 	mov.w	r0, #0
 8004700:	f04f 0100 	mov.w	r1, #0
 8004704:	00d9      	lsls	r1, r3, #3
 8004706:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800470a:	00d0      	lsls	r0, r2, #3
 800470c:	4602      	mov	r2, r0
 800470e:	460b      	mov	r3, r1
 8004710:	1911      	adds	r1, r2, r4
 8004712:	65b9      	str	r1, [r7, #88]	; 0x58
 8004714:	416b      	adcs	r3, r5
 8004716:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	461a      	mov	r2, r3
 800471e:	f04f 0300 	mov.w	r3, #0
 8004722:	1891      	adds	r1, r2, r2
 8004724:	62b9      	str	r1, [r7, #40]	; 0x28
 8004726:	415b      	adcs	r3, r3
 8004728:	62fb      	str	r3, [r7, #44]	; 0x2c
 800472a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800472e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004732:	f7fc faa9 	bl	8000c88 <__aeabi_uldivmod>
 8004736:	4602      	mov	r2, r0
 8004738:	460b      	mov	r3, r1
 800473a:	4b8c      	ldr	r3, [pc, #560]	; (800496c <UART_SetConfig+0x38c>)
 800473c:	fba3 1302 	umull	r1, r3, r3, r2
 8004740:	095b      	lsrs	r3, r3, #5
 8004742:	2164      	movs	r1, #100	; 0x64
 8004744:	fb01 f303 	mul.w	r3, r1, r3
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	3332      	adds	r3, #50	; 0x32
 800474e:	4a87      	ldr	r2, [pc, #540]	; (800496c <UART_SetConfig+0x38c>)
 8004750:	fba2 2303 	umull	r2, r3, r2, r3
 8004754:	095b      	lsrs	r3, r3, #5
 8004756:	005b      	lsls	r3, r3, #1
 8004758:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800475c:	441e      	add	r6, r3
 800475e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004760:	4618      	mov	r0, r3
 8004762:	f04f 0100 	mov.w	r1, #0
 8004766:	4602      	mov	r2, r0
 8004768:	460b      	mov	r3, r1
 800476a:	1894      	adds	r4, r2, r2
 800476c:	623c      	str	r4, [r7, #32]
 800476e:	415b      	adcs	r3, r3
 8004770:	627b      	str	r3, [r7, #36]	; 0x24
 8004772:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004776:	1812      	adds	r2, r2, r0
 8004778:	eb41 0303 	adc.w	r3, r1, r3
 800477c:	f04f 0400 	mov.w	r4, #0
 8004780:	f04f 0500 	mov.w	r5, #0
 8004784:	00dd      	lsls	r5, r3, #3
 8004786:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800478a:	00d4      	lsls	r4, r2, #3
 800478c:	4622      	mov	r2, r4
 800478e:	462b      	mov	r3, r5
 8004790:	1814      	adds	r4, r2, r0
 8004792:	653c      	str	r4, [r7, #80]	; 0x50
 8004794:	414b      	adcs	r3, r1
 8004796:	657b      	str	r3, [r7, #84]	; 0x54
 8004798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	461a      	mov	r2, r3
 800479e:	f04f 0300 	mov.w	r3, #0
 80047a2:	1891      	adds	r1, r2, r2
 80047a4:	61b9      	str	r1, [r7, #24]
 80047a6:	415b      	adcs	r3, r3
 80047a8:	61fb      	str	r3, [r7, #28]
 80047aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047ae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80047b2:	f7fc fa69 	bl	8000c88 <__aeabi_uldivmod>
 80047b6:	4602      	mov	r2, r0
 80047b8:	460b      	mov	r3, r1
 80047ba:	4b6c      	ldr	r3, [pc, #432]	; (800496c <UART_SetConfig+0x38c>)
 80047bc:	fba3 1302 	umull	r1, r3, r3, r2
 80047c0:	095b      	lsrs	r3, r3, #5
 80047c2:	2164      	movs	r1, #100	; 0x64
 80047c4:	fb01 f303 	mul.w	r3, r1, r3
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	00db      	lsls	r3, r3, #3
 80047cc:	3332      	adds	r3, #50	; 0x32
 80047ce:	4a67      	ldr	r2, [pc, #412]	; (800496c <UART_SetConfig+0x38c>)
 80047d0:	fba2 2303 	umull	r2, r3, r2, r3
 80047d4:	095b      	lsrs	r3, r3, #5
 80047d6:	f003 0207 	and.w	r2, r3, #7
 80047da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4432      	add	r2, r6
 80047e0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047e2:	e0b9      	b.n	8004958 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047e6:	461c      	mov	r4, r3
 80047e8:	f04f 0500 	mov.w	r5, #0
 80047ec:	4622      	mov	r2, r4
 80047ee:	462b      	mov	r3, r5
 80047f0:	1891      	adds	r1, r2, r2
 80047f2:	6139      	str	r1, [r7, #16]
 80047f4:	415b      	adcs	r3, r3
 80047f6:	617b      	str	r3, [r7, #20]
 80047f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80047fc:	1912      	adds	r2, r2, r4
 80047fe:	eb45 0303 	adc.w	r3, r5, r3
 8004802:	f04f 0000 	mov.w	r0, #0
 8004806:	f04f 0100 	mov.w	r1, #0
 800480a:	00d9      	lsls	r1, r3, #3
 800480c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004810:	00d0      	lsls	r0, r2, #3
 8004812:	4602      	mov	r2, r0
 8004814:	460b      	mov	r3, r1
 8004816:	eb12 0804 	adds.w	r8, r2, r4
 800481a:	eb43 0905 	adc.w	r9, r3, r5
 800481e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	4618      	mov	r0, r3
 8004824:	f04f 0100 	mov.w	r1, #0
 8004828:	f04f 0200 	mov.w	r2, #0
 800482c:	f04f 0300 	mov.w	r3, #0
 8004830:	008b      	lsls	r3, r1, #2
 8004832:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004836:	0082      	lsls	r2, r0, #2
 8004838:	4640      	mov	r0, r8
 800483a:	4649      	mov	r1, r9
 800483c:	f7fc fa24 	bl	8000c88 <__aeabi_uldivmod>
 8004840:	4602      	mov	r2, r0
 8004842:	460b      	mov	r3, r1
 8004844:	4b49      	ldr	r3, [pc, #292]	; (800496c <UART_SetConfig+0x38c>)
 8004846:	fba3 2302 	umull	r2, r3, r3, r2
 800484a:	095b      	lsrs	r3, r3, #5
 800484c:	011e      	lsls	r6, r3, #4
 800484e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004850:	4618      	mov	r0, r3
 8004852:	f04f 0100 	mov.w	r1, #0
 8004856:	4602      	mov	r2, r0
 8004858:	460b      	mov	r3, r1
 800485a:	1894      	adds	r4, r2, r2
 800485c:	60bc      	str	r4, [r7, #8]
 800485e:	415b      	adcs	r3, r3
 8004860:	60fb      	str	r3, [r7, #12]
 8004862:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004866:	1812      	adds	r2, r2, r0
 8004868:	eb41 0303 	adc.w	r3, r1, r3
 800486c:	f04f 0400 	mov.w	r4, #0
 8004870:	f04f 0500 	mov.w	r5, #0
 8004874:	00dd      	lsls	r5, r3, #3
 8004876:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800487a:	00d4      	lsls	r4, r2, #3
 800487c:	4622      	mov	r2, r4
 800487e:	462b      	mov	r3, r5
 8004880:	1814      	adds	r4, r2, r0
 8004882:	64bc      	str	r4, [r7, #72]	; 0x48
 8004884:	414b      	adcs	r3, r1
 8004886:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	4618      	mov	r0, r3
 800488e:	f04f 0100 	mov.w	r1, #0
 8004892:	f04f 0200 	mov.w	r2, #0
 8004896:	f04f 0300 	mov.w	r3, #0
 800489a:	008b      	lsls	r3, r1, #2
 800489c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80048a0:	0082      	lsls	r2, r0, #2
 80048a2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80048a6:	f7fc f9ef 	bl	8000c88 <__aeabi_uldivmod>
 80048aa:	4602      	mov	r2, r0
 80048ac:	460b      	mov	r3, r1
 80048ae:	4b2f      	ldr	r3, [pc, #188]	; (800496c <UART_SetConfig+0x38c>)
 80048b0:	fba3 1302 	umull	r1, r3, r3, r2
 80048b4:	095b      	lsrs	r3, r3, #5
 80048b6:	2164      	movs	r1, #100	; 0x64
 80048b8:	fb01 f303 	mul.w	r3, r1, r3
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	011b      	lsls	r3, r3, #4
 80048c0:	3332      	adds	r3, #50	; 0x32
 80048c2:	4a2a      	ldr	r2, [pc, #168]	; (800496c <UART_SetConfig+0x38c>)
 80048c4:	fba2 2303 	umull	r2, r3, r2, r3
 80048c8:	095b      	lsrs	r3, r3, #5
 80048ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048ce:	441e      	add	r6, r3
 80048d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048d2:	4618      	mov	r0, r3
 80048d4:	f04f 0100 	mov.w	r1, #0
 80048d8:	4602      	mov	r2, r0
 80048da:	460b      	mov	r3, r1
 80048dc:	1894      	adds	r4, r2, r2
 80048de:	603c      	str	r4, [r7, #0]
 80048e0:	415b      	adcs	r3, r3
 80048e2:	607b      	str	r3, [r7, #4]
 80048e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048e8:	1812      	adds	r2, r2, r0
 80048ea:	eb41 0303 	adc.w	r3, r1, r3
 80048ee:	f04f 0400 	mov.w	r4, #0
 80048f2:	f04f 0500 	mov.w	r5, #0
 80048f6:	00dd      	lsls	r5, r3, #3
 80048f8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80048fc:	00d4      	lsls	r4, r2, #3
 80048fe:	4622      	mov	r2, r4
 8004900:	462b      	mov	r3, r5
 8004902:	eb12 0a00 	adds.w	sl, r2, r0
 8004906:	eb43 0b01 	adc.w	fp, r3, r1
 800490a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	4618      	mov	r0, r3
 8004910:	f04f 0100 	mov.w	r1, #0
 8004914:	f04f 0200 	mov.w	r2, #0
 8004918:	f04f 0300 	mov.w	r3, #0
 800491c:	008b      	lsls	r3, r1, #2
 800491e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004922:	0082      	lsls	r2, r0, #2
 8004924:	4650      	mov	r0, sl
 8004926:	4659      	mov	r1, fp
 8004928:	f7fc f9ae 	bl	8000c88 <__aeabi_uldivmod>
 800492c:	4602      	mov	r2, r0
 800492e:	460b      	mov	r3, r1
 8004930:	4b0e      	ldr	r3, [pc, #56]	; (800496c <UART_SetConfig+0x38c>)
 8004932:	fba3 1302 	umull	r1, r3, r3, r2
 8004936:	095b      	lsrs	r3, r3, #5
 8004938:	2164      	movs	r1, #100	; 0x64
 800493a:	fb01 f303 	mul.w	r3, r1, r3
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	011b      	lsls	r3, r3, #4
 8004942:	3332      	adds	r3, #50	; 0x32
 8004944:	4a09      	ldr	r2, [pc, #36]	; (800496c <UART_SetConfig+0x38c>)
 8004946:	fba2 2303 	umull	r2, r3, r2, r3
 800494a:	095b      	lsrs	r3, r3, #5
 800494c:	f003 020f 	and.w	r2, r3, #15
 8004950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4432      	add	r2, r6
 8004956:	609a      	str	r2, [r3, #8]
}
 8004958:	bf00      	nop
 800495a:	377c      	adds	r7, #124	; 0x7c
 800495c:	46bd      	mov	sp, r7
 800495e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004962:	bf00      	nop
 8004964:	40011000 	.word	0x40011000
 8004968:	40011400 	.word	0x40011400
 800496c:	51eb851f 	.word	0x51eb851f

08004970 <hostUartBootLoaderConfiguration>:
#define __HOST_UART_BOOTLOADER_CONFIGURATION
/** @brief  hostUartBootLoaderConfiguration
    @return none
*/
void hostUartBootLoaderConfiguration(hostBootLoader_t *_host, UART_HandleTypeDef *huart)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
	printf("\n[hostUartBootLoaderConfiguration] use mavlink + hw host boot loader + uart cli ...\n");
 800497a:	4806      	ldr	r0, [pc, #24]	; (8004994 <hostUartBootLoaderConfiguration+0x24>)
 800497c:	f001 fc56 	bl	800622c <puts>
	host = _host;
 8004980:	4a05      	ldr	r2, [pc, #20]	; (8004998 <hostUartBootLoaderConfiguration+0x28>)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6013      	str	r3, [r2, #0]
	uart_hostBL = huart;
 8004986:	4a05      	ldr	r2, [pc, #20]	; (800499c <hostUartBootLoaderConfiguration+0x2c>)
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	6013      	str	r3, [r2, #0]
//	mavlinhControlConfiguration();

	/// debug
//	host->isBootLoader = true;
}
 800498c:	bf00      	nop
 800498e:	3708      	adds	r7, #8
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	08009dc0 	.word	0x08009dc0
 8004998:	20000218 	.word	0x20000218
 800499c:	2000021c 	.word	0x2000021c

080049a0 <__hostBL>:

/** @brief  __hostBL
    @return pointer struct support host boot loader
*/
hostBootLoader_t* __hostBL(void)
{
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0
	return host;
 80049a4:	4b03      	ldr	r3, [pc, #12]	; (80049b4 <__hostBL+0x14>)
 80049a6:	681b      	ldr	r3, [r3, #0]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	20000218 	.word	0x20000218

080049b8 <getTime>:

/** @brief  getTime
    @return bool
*/
static bool getTime(uint32_t *time, uint32_t timeCmp)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
	if(HAL_GetTick() - *time > timeCmp || *time == 0)
 80049c2:	f7fd f953 	bl	8001c6c <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	683a      	ldr	r2, [r7, #0]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d303      	bcc.n	80049dc <getTime+0x24>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d106      	bne.n	80049ea <getTime+0x32>
	{
		*time = HAL_GetTick();
 80049dc:	f7fd f946 	bl	8001c6c <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	601a      	str	r2, [r3, #0]

		return true;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e000      	b.n	80049ec <getTime+0x34>
	}

	return false;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3708      	adds	r7, #8
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <hostBootLoader_uartConfigForBL>:
#define __HOST_UART_BOOTLOADER_FUNCTION
/** @brief  hostBootLoader_uartConfigForBL
    @return none
*/
static void hostBootLoader_uartConfigForBL(void)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(uart_hostBL);
 80049f8:	4b27      	ldr	r3, [pc, #156]	; (8004a98 <hostBootLoader_uartConfigForBL+0xa4>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7fe fe7c 	bl	80036fa <HAL_UART_DeInit>

	HAL_Delay(500);
 8004a02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a06:	f7fd f93d 	bl	8001c84 <HAL_Delay>

	uart_hostBL->Instance 					= USART2;
 8004a0a:	4b23      	ldr	r3, [pc, #140]	; (8004a98 <hostBootLoader_uartConfigForBL+0xa4>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a23      	ldr	r2, [pc, #140]	; (8004a9c <hostBootLoader_uartConfigForBL+0xa8>)
 8004a10:	601a      	str	r2, [r3, #0]
	uart_hostBL->Init.BaudRate 				= 115200;//460800 ;
 8004a12:	4b21      	ldr	r3, [pc, #132]	; (8004a98 <hostBootLoader_uartConfigForBL+0xa4>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004a1a:	605a      	str	r2, [r3, #4]
	uart_hostBL->Init.WordLength 			= UART_WORDLENGTH_9B;
 8004a1c:	4b1e      	ldr	r3, [pc, #120]	; (8004a98 <hostBootLoader_uartConfigForBL+0xa4>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004a24:	609a      	str	r2, [r3, #8]
	uart_hostBL->Init.StopBits 				= UART_STOPBITS_1;
 8004a26:	4b1c      	ldr	r3, [pc, #112]	; (8004a98 <hostBootLoader_uartConfigForBL+0xa4>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	60da      	str	r2, [r3, #12]
	uart_hostBL->Init.Parity 				= UART_PARITY_EVEN;
 8004a2e:	4b1a      	ldr	r3, [pc, #104]	; (8004a98 <hostBootLoader_uartConfigForBL+0xa4>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a36:	611a      	str	r2, [r3, #16]
	uart_hostBL->Init.Mode 					= UART_MODE_TX_RX;
 8004a38:	4b17      	ldr	r3, [pc, #92]	; (8004a98 <hostBootLoader_uartConfigForBL+0xa4>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	220c      	movs	r2, #12
 8004a3e:	615a      	str	r2, [r3, #20]
	uart_hostBL->Init.HwFlowCtl 			= UART_HWCONTROL_NONE;
 8004a40:	4b15      	ldr	r3, [pc, #84]	; (8004a98 <hostBootLoader_uartConfigForBL+0xa4>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2200      	movs	r2, #0
 8004a46:	619a      	str	r2, [r3, #24]
	uart_hostBL->Init.OverSampling 			= UART_OVERSAMPLING_16;
 8004a48:	4b13      	ldr	r3, [pc, #76]	; (8004a98 <hostBootLoader_uartConfigForBL+0xa4>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(uart_hostBL) != HAL_OK)
 8004a50:	4b11      	ldr	r3, [pc, #68]	; (8004a98 <hostBootLoader_uartConfigForBL+0xa4>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7fe fe03 	bl	8003660 <HAL_UART_Init>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <hostBootLoader_uartConfigForBL+0x70>
	{
		Error_Handler();
 8004a60:	f7fc fc8c 	bl	800137c <Error_Handler>
	}

	HAL_Delay(500);
 8004a64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a68:	f7fd f90c 	bl	8001c84 <HAL_Delay>

	ringBufferInit(&rBufferHostBL);
 8004a6c:	480c      	ldr	r0, [pc, #48]	; (8004aa0 <hostBootLoader_uartConfigForBL+0xac>)
 8004a6e:	f000 fa83 	bl	8004f78 <ringBufferInit>

	if(HAL_UART_Receive_IT(uart_hostBL, &wData, 1) != HAL_OK)
 8004a72:	4b09      	ldr	r3, [pc, #36]	; (8004a98 <hostBootLoader_uartConfigForBL+0xa4>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2201      	movs	r2, #1
 8004a78:	490a      	ldr	r1, [pc, #40]	; (8004aa4 <hostBootLoader_uartConfigForBL+0xb0>)
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7fe ff43 	bl	8003906 <HAL_UART_Receive_IT>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <hostBootLoader_uartConfigForBL+0x96>
	{
		Error_Handler();
 8004a86:	f7fc fc79 	bl	800137c <Error_Handler>
	}

    /// xoa bo dem uart truoc khi truyen
    __HAL_UART_FLUSH_DRREGISTER(uart_hostBL);
 8004a8a:	4b03      	ldr	r3, [pc, #12]	; (8004a98 <hostBootLoader_uartConfigForBL+0xa4>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
}
 8004a92:	bf00      	nop
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	2000021c 	.word	0x2000021c
 8004a9c:	40004400 	.word	0x40004400
 8004aa0:	20000564 	.word	0x20000564
 8004aa4:	2000054c 	.word	0x2000054c

08004aa8 <hostBootLoader_sendData>:

/** @brief  hostBootLoader_sendData
    @return number of command
*/
static void hostBootLoader_sendData(uint8_t *buffer, uint16_t len)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit_IT(uart_hostBL, buffer, len);
 8004ab4:	4b0a      	ldr	r3, [pc, #40]	; (8004ae0 <hostBootLoader_sendData+0x38>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	887a      	ldrh	r2, [r7, #2]
 8004aba:	6879      	ldr	r1, [r7, #4]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7fe fedd 	bl	800387c <HAL_UART_Transmit_IT>
	while(txComplete == false);
 8004ac2:	bf00      	nop
 8004ac4:	4b07      	ldr	r3, [pc, #28]	; (8004ae4 <hostBootLoader_sendData+0x3c>)
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	f083 0301 	eor.w	r3, r3, #1
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1f8      	bne.n	8004ac4 <hostBootLoader_sendData+0x1c>
	txComplete = false;
 8004ad2:	4b04      	ldr	r3, [pc, #16]	; (8004ae4 <hostBootLoader_sendData+0x3c>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	701a      	strb	r2, [r3, #0]
}
 8004ad8:	bf00      	nop
 8004ada:	3708      	adds	r7, #8
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	2000021c 	.word	0x2000021c
 8004ae4:	20001d4e 	.word	0x20001d4e

08004ae8 <hostBootLoader_getCmdHeader>:

/** @brief  hostBootLoader_getCmdHeader
    @return number of command header
*/
static uint8_t hostBootLoader_getCmdHeader(uint8_t cmdIndex)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	4603      	mov	r3, r0
 8004af0:	71fb      	strb	r3, [r7, #7]
	return (bootLoaderCmdList[cmdIndex].cmdHeader);
 8004af2:	79fb      	ldrb	r3, [r7, #7]
 8004af4:	4a04      	ldr	r2, [pc, #16]	; (8004b08 <hostBootLoader_getCmdHeader+0x20>)
 8004af6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	2000000c 	.word	0x2000000c

08004b0c <hostBootLoader_getCmdFooter>:

/** @brief  hostBootLoader_getCmdFooter
    @return number of command footer
*/
static uint8_t hostBootLoader_getCmdFooter(uint8_t cmdIndex)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	4603      	mov	r3, r0
 8004b14:	71fb      	strb	r3, [r7, #7]
	return (bootLoaderCmdList[cmdIndex].cmdFooter);
 8004b16:	79fb      	ldrb	r3, [r7, #7]
 8004b18:	4a04      	ldr	r2, [pc, #16]	; (8004b2c <hostBootLoader_getCmdFooter+0x20>)
 8004b1a:	005b      	lsls	r3, r3, #1
 8004b1c:	4413      	add	r3, r2
 8004b1e:	785b      	ldrb	r3, [r3, #1]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	2000000c 	.word	0x2000000c

08004b30 <hostBootLoader_sendCommand>:

/** @brief  hostBootLoader_readCommand
    @return number of command
*/
static void hostBootLoader_sendCommand(uint8_t cmdIndex)
{
 8004b30:	b590      	push	{r4, r7, lr}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	4603      	mov	r3, r0
 8004b38:	71fb      	strb	r3, [r7, #7]
	host->isSendCmd = true;
 8004b3a:	4b11      	ldr	r3, [pc, #68]	; (8004b80 <hostBootLoader_sendCommand+0x50>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	709a      	strb	r2, [r3, #2]
	/// get cmd header
	host->hostCmd[0] = hostBootLoader_getCmdHeader(cmdIndex);
 8004b42:	4b0f      	ldr	r3, [pc, #60]	; (8004b80 <hostBootLoader_sendCommand+0x50>)
 8004b44:	681c      	ldr	r4, [r3, #0]
 8004b46:	79fb      	ldrb	r3, [r7, #7]
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7ff ffcd 	bl	8004ae8 <hostBootLoader_getCmdHeader>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	70e3      	strb	r3, [r4, #3]

	/// get cmd footer
	host->hostCmd[1] = hostBootLoader_getCmdFooter(cmdIndex);
 8004b52:	4b0b      	ldr	r3, [pc, #44]	; (8004b80 <hostBootLoader_sendCommand+0x50>)
 8004b54:	681c      	ldr	r4, [r3, #0]
 8004b56:	79fb      	ldrb	r3, [r7, #7]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7ff ffd7 	bl	8004b0c <hostBootLoader_getCmdFooter>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	7123      	strb	r3, [r4, #4]

	printf("\n[hostBootLoader_sendCommand] 0x%x | 0x%x\n", host->hostCmd[0], host->hostCmd[1]);
 8004b62:	4b07      	ldr	r3, [pc, #28]	; (8004b80 <hostBootLoader_sendCommand+0x50>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	78db      	ldrb	r3, [r3, #3]
 8004b68:	4619      	mov	r1, r3
 8004b6a:	4b05      	ldr	r3, [pc, #20]	; (8004b80 <hostBootLoader_sendCommand+0x50>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	791b      	ldrb	r3, [r3, #4]
 8004b70:	461a      	mov	r2, r3
 8004b72:	4804      	ldr	r0, [pc, #16]	; (8004b84 <hostBootLoader_sendCommand+0x54>)
 8004b74:	f001 fad4 	bl	8006120 <iprintf>
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd90      	pop	{r4, r7, pc}
 8004b80:	20000218 	.word	0x20000218
 8004b84:	08009e14 	.word	0x08009e14

08004b88 <hoatBootLoader_waittingResponeCmdConnect>:

/** @brief  hoatBootLoader_waittingResponeCmdConnect
    @return number of command
*/
static bool hoatBootLoader_waittingResponeCmdConnect(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
	uint8_t rData = 0;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	71fb      	strb	r3, [r7, #7]

	if(rBufferHostBL.len >= 1)
 8004b92:	4b0c      	ldr	r3, [pc, #48]	; (8004bc4 <hoatBootLoader_waittingResponeCmdConnect+0x3c>)
 8004b94:	889b      	ldrh	r3, [r3, #4]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00f      	beq.n	8004bba <hoatBootLoader_waittingResponeCmdConnect+0x32>
	{
		if(ringBufferRead(&rBufferHostBL, &rData) == RING_BUFFER_OK)
 8004b9a:	1dfb      	adds	r3, r7, #7
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	4809      	ldr	r0, [pc, #36]	; (8004bc4 <hoatBootLoader_waittingResponeCmdConnect+0x3c>)
 8004ba0:	f000 fa34 	bl	800500c <ringBufferRead>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d107      	bne.n	8004bba <hoatBootLoader_waittingResponeCmdConnect+0x32>
		{
			if(rData == UART_BOOTLOADER_ACK)
 8004baa:	79fb      	ldrb	r3, [r7, #7]
 8004bac:	2b79      	cmp	r3, #121	; 0x79
 8004bae:	d104      	bne.n	8004bba <hoatBootLoader_waittingResponeCmdConnect+0x32>
			{
				printf("\n[hoatBootLoader_waittingResponeCmdConnect] device connected !@!\n");
 8004bb0:	4805      	ldr	r0, [pc, #20]	; (8004bc8 <hoatBootLoader_waittingResponeCmdConnect+0x40>)
 8004bb2:	f001 fb3b 	bl	800622c <puts>
				return true;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e000      	b.n	8004bbc <hoatBootLoader_waittingResponeCmdConnect+0x34>
			}
		}
	}

	return false;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3708      	adds	r7, #8
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	20000564 	.word	0x20000564
 8004bc8:	08009e40 	.word	0x08009e40

08004bcc <hoatBootLoader_waittingResponeCmdGet>:

/** @brief  hoatBootLoader_waittingResponeCmdGet
    @return number of command
*/
static bool hoatBootLoader_waittingResponeCmdGet(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af00      	add	r7, sp, #0
	uint8_t rData = 0;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	75bb      	strb	r3, [r7, #22]
	uint8_t buffer[BOOTLOADER_CMD_GET_LEN];

	if(rBufferHostBL.len >= BOOTLOADER_CMD_GET_LEN)
 8004bd6:	4b28      	ldr	r3, [pc, #160]	; (8004c78 <hoatBootLoader_waittingResponeCmdGet+0xac>)
 8004bd8:	889b      	ldrh	r3, [r3, #4]
 8004bda:	2b0e      	cmp	r3, #14
 8004bdc:	d947      	bls.n	8004c6e <hoatBootLoader_waittingResponeCmdGet+0xa2>
	{
		for(uint8_t i = 0; i < BOOTLOADER_CMD_GET_LEN; i++)
 8004bde:	2300      	movs	r3, #0
 8004be0:	75fb      	strb	r3, [r7, #23]
 8004be2:	e012      	b.n	8004c0a <hoatBootLoader_waittingResponeCmdGet+0x3e>
		{
			if(ringBufferRead(&rBufferHostBL, &rData) == RING_BUFFER_OK)
 8004be4:	f107 0316 	add.w	r3, r7, #22
 8004be8:	4619      	mov	r1, r3
 8004bea:	4823      	ldr	r0, [pc, #140]	; (8004c78 <hoatBootLoader_waittingResponeCmdGet+0xac>)
 8004bec:	f000 fa0e 	bl	800500c <ringBufferRead>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d106      	bne.n	8004c04 <hoatBootLoader_waittingResponeCmdGet+0x38>
			{
				buffer[i] = rData;
 8004bf6:	7dfb      	ldrb	r3, [r7, #23]
 8004bf8:	7dba      	ldrb	r2, [r7, #22]
 8004bfa:	f107 0118 	add.w	r1, r7, #24
 8004bfe:	440b      	add	r3, r1
 8004c00:	f803 2c14 	strb.w	r2, [r3, #-20]
		for(uint8_t i = 0; i < BOOTLOADER_CMD_GET_LEN; i++)
 8004c04:	7dfb      	ldrb	r3, [r7, #23]
 8004c06:	3301      	adds	r3, #1
 8004c08:	75fb      	strb	r3, [r7, #23]
 8004c0a:	7dfb      	ldrb	r3, [r7, #23]
 8004c0c:	2b0e      	cmp	r3, #14
 8004c0e:	d9e9      	bls.n	8004be4 <hoatBootLoader_waittingResponeCmdGet+0x18>
			}
		}

		/// kiem tra ack
		if(buffer[0] == UART_BOOTLOADER_ACK && buffer[14] == UART_BOOTLOADER_ACK)
 8004c10:	793b      	ldrb	r3, [r7, #4]
 8004c12:	2b79      	cmp	r3, #121	; 0x79
 8004c14:	d12b      	bne.n	8004c6e <hoatBootLoader_waittingResponeCmdGet+0xa2>
 8004c16:	7cbb      	ldrb	r3, [r7, #18]
 8004c18:	2b79      	cmp	r3, #121	; 0x79
 8004c1a:	d128      	bne.n	8004c6e <hoatBootLoader_waittingResponeCmdGet+0xa2>
		{
			hostPri.cmdGet.numberOfbyte 			= buffer[1];
 8004c1c:	797a      	ldrb	r2, [r7, #5]
 8004c1e:	4b17      	ldr	r3, [pc, #92]	; (8004c7c <hoatBootLoader_waittingResponeCmdGet+0xb0>)
 8004c20:	701a      	strb	r2, [r3, #0]
			hostPri.cmdGet.version 					= buffer[2];
 8004c22:	79ba      	ldrb	r2, [r7, #6]
 8004c24:	4b15      	ldr	r3, [pc, #84]	; (8004c7c <hoatBootLoader_waittingResponeCmdGet+0xb0>)
 8004c26:	705a      	strb	r2, [r3, #1]
			hostPri.cmdGet.getCmd 					= buffer[3];
 8004c28:	79fa      	ldrb	r2, [r7, #7]
 8004c2a:	4b14      	ldr	r3, [pc, #80]	; (8004c7c <hoatBootLoader_waittingResponeCmdGet+0xb0>)
 8004c2c:	709a      	strb	r2, [r3, #2]
			hostPri.cmdGet.getVerAndRPStatus 		= buffer[4];
 8004c2e:	7a3a      	ldrb	r2, [r7, #8]
 8004c30:	4b12      	ldr	r3, [pc, #72]	; (8004c7c <hoatBootLoader_waittingResponeCmdGet+0xb0>)
 8004c32:	70da      	strb	r2, [r3, #3]
			hostPri.cmdGet.getId 					= buffer[5];
 8004c34:	7a7a      	ldrb	r2, [r7, #9]
 8004c36:	4b11      	ldr	r3, [pc, #68]	; (8004c7c <hoatBootLoader_waittingResponeCmdGet+0xb0>)
 8004c38:	711a      	strb	r2, [r3, #4]
			hostPri.cmdGet.readMemoryCmd 			= buffer[6];
 8004c3a:	7aba      	ldrb	r2, [r7, #10]
 8004c3c:	4b0f      	ldr	r3, [pc, #60]	; (8004c7c <hoatBootLoader_waittingResponeCmdGet+0xb0>)
 8004c3e:	715a      	strb	r2, [r3, #5]
			hostPri.cmdGet.goCmd 					= buffer[7];
 8004c40:	7afa      	ldrb	r2, [r7, #11]
 8004c42:	4b0e      	ldr	r3, [pc, #56]	; (8004c7c <hoatBootLoader_waittingResponeCmdGet+0xb0>)
 8004c44:	719a      	strb	r2, [r3, #6]
			hostPri.cmdGet.writeMemoryCmd 			= buffer[8];
 8004c46:	7b3a      	ldrb	r2, [r7, #12]
 8004c48:	4b0c      	ldr	r3, [pc, #48]	; (8004c7c <hoatBootLoader_waittingResponeCmdGet+0xb0>)
 8004c4a:	71da      	strb	r2, [r3, #7]
			hostPri.cmdGet.EraseCmd 				= buffer[9];
 8004c4c:	7b7a      	ldrb	r2, [r7, #13]
 8004c4e:	4b0b      	ldr	r3, [pc, #44]	; (8004c7c <hoatBootLoader_waittingResponeCmdGet+0xb0>)
 8004c50:	721a      	strb	r2, [r3, #8]
			hostPri.cmdGet.writeProtectCmd 			= buffer[10];
 8004c52:	7bba      	ldrb	r2, [r7, #14]
 8004c54:	4b09      	ldr	r3, [pc, #36]	; (8004c7c <hoatBootLoader_waittingResponeCmdGet+0xb0>)
 8004c56:	725a      	strb	r2, [r3, #9]
			hostPri.cmdGet.writeUnProtectCmd 		= buffer[11];
 8004c58:	7bfa      	ldrb	r2, [r7, #15]
 8004c5a:	4b08      	ldr	r3, [pc, #32]	; (8004c7c <hoatBootLoader_waittingResponeCmdGet+0xb0>)
 8004c5c:	729a      	strb	r2, [r3, #10]
			hostPri.cmdGet.readOutProtectCmd 		= buffer[12];
 8004c5e:	7c3a      	ldrb	r2, [r7, #16]
 8004c60:	4b06      	ldr	r3, [pc, #24]	; (8004c7c <hoatBootLoader_waittingResponeCmdGet+0xb0>)
 8004c62:	72da      	strb	r2, [r3, #11]
			hostPri.cmdGet.readOutUnProtectCmd 		= buffer[13];
 8004c64:	7c7a      	ldrb	r2, [r7, #17]
 8004c66:	4b05      	ldr	r3, [pc, #20]	; (8004c7c <hoatBootLoader_waittingResponeCmdGet+0xb0>)
 8004c68:	731a      	strb	r2, [r3, #12]

			return true;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e000      	b.n	8004c70 <hoatBootLoader_waittingResponeCmdGet+0xa4>
		}
	}

	return false;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3718      	adds	r7, #24
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	20000564 	.word	0x20000564
 8004c7c:	20000550 	.word	0x20000550

08004c80 <hoatBootLoader_waittingResponeCmdGetId>:

/** @brief  hoatBootLoader_waittingResponeCmdGetId
    @return number of command
*/
static bool hoatBootLoader_waittingResponeCmdGetId(void)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
	uint8_t rData = 0;
 8004c86:	2300      	movs	r3, #0
 8004c88:	71bb      	strb	r3, [r7, #6]
	uint8_t buffer[BOOTLOADER_CMD_GET_ID_LEN];

	if(rBufferHostBL.len >= BOOTLOADER_CMD_GET_ID_LEN)
 8004c8a:	4b22      	ldr	r3, [pc, #136]	; (8004d14 <hoatBootLoader_waittingResponeCmdGetId+0x94>)
 8004c8c:	889b      	ldrh	r3, [r3, #4]
 8004c8e:	2b04      	cmp	r3, #4
 8004c90:	d93a      	bls.n	8004d08 <hoatBootLoader_waittingResponeCmdGetId+0x88>
	{
		for(uint8_t i = 0; i < BOOTLOADER_CMD_GET_ID_LEN; i++)
 8004c92:	2300      	movs	r3, #0
 8004c94:	71fb      	strb	r3, [r7, #7]
 8004c96:	e011      	b.n	8004cbc <hoatBootLoader_waittingResponeCmdGetId+0x3c>
		{
			if(ringBufferRead(&rBufferHostBL, &rData))
 8004c98:	1dbb      	adds	r3, r7, #6
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	481d      	ldr	r0, [pc, #116]	; (8004d14 <hoatBootLoader_waittingResponeCmdGetId+0x94>)
 8004c9e:	f000 f9b5 	bl	800500c <ringBufferRead>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d006      	beq.n	8004cb6 <hoatBootLoader_waittingResponeCmdGetId+0x36>
			buffer[i] = rData;
 8004ca8:	79fb      	ldrb	r3, [r7, #7]
 8004caa:	79ba      	ldrb	r2, [r7, #6]
 8004cac:	f107 0108 	add.w	r1, r7, #8
 8004cb0:	440b      	add	r3, r1
 8004cb2:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i < BOOTLOADER_CMD_GET_ID_LEN; i++)
 8004cb6:	79fb      	ldrb	r3, [r7, #7]
 8004cb8:	3301      	adds	r3, #1
 8004cba:	71fb      	strb	r3, [r7, #7]
 8004cbc:	79fb      	ldrb	r3, [r7, #7]
 8004cbe:	2b04      	cmp	r3, #4
 8004cc0:	d9ea      	bls.n	8004c98 <hoatBootLoader_waittingResponeCmdGetId+0x18>
		}

		if(buffer[0] == UART_BOOTLOADER_ACK && buffer[4] == UART_BOOTLOADER_ACK)
 8004cc2:	783b      	ldrb	r3, [r7, #0]
 8004cc4:	2b79      	cmp	r3, #121	; 0x79
 8004cc6:	d11f      	bne.n	8004d08 <hoatBootLoader_waittingResponeCmdGetId+0x88>
 8004cc8:	793b      	ldrb	r3, [r7, #4]
 8004cca:	2b79      	cmp	r3, #121	; 0x79
 8004ccc:	d11c      	bne.n	8004d08 <hoatBootLoader_waittingResponeCmdGetId+0x88>
		{
			hostPri.cmdGetId.numberOfbyte = buffer[1];
 8004cce:	787a      	ldrb	r2, [r7, #1]
 8004cd0:	4b11      	ldr	r3, [pc, #68]	; (8004d18 <hoatBootLoader_waittingResponeCmdGetId+0x98>)
 8004cd2:	739a      	strb	r2, [r3, #14]
			hostPri.cmdGetId.byte3 = buffer[2];
 8004cd4:	78ba      	ldrb	r2, [r7, #2]
 8004cd6:	4b10      	ldr	r3, [pc, #64]	; (8004d18 <hoatBootLoader_waittingResponeCmdGetId+0x98>)
 8004cd8:	73da      	strb	r2, [r3, #15]
			hostPri.cmdGetId.byte4 = buffer[3];
 8004cda:	78fa      	ldrb	r2, [r7, #3]
 8004cdc:	4b0e      	ldr	r3, [pc, #56]	; (8004d18 <hoatBootLoader_waittingResponeCmdGetId+0x98>)
 8004cde:	741a      	strb	r2, [r3, #16]
			hostPri.cmdGetId.PID = hostPri.cmdGetId.byte3 << 8 | hostPri.cmdGetId.byte4;
 8004ce0:	4b0d      	ldr	r3, [pc, #52]	; (8004d18 <hoatBootLoader_waittingResponeCmdGetId+0x98>)
 8004ce2:	7bdb      	ldrb	r3, [r3, #15]
 8004ce4:	021b      	lsls	r3, r3, #8
 8004ce6:	b21a      	sxth	r2, r3
 8004ce8:	4b0b      	ldr	r3, [pc, #44]	; (8004d18 <hoatBootLoader_waittingResponeCmdGetId+0x98>)
 8004cea:	7c1b      	ldrb	r3, [r3, #16]
 8004cec:	b21b      	sxth	r3, r3
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	b21b      	sxth	r3, r3
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	4b08      	ldr	r3, [pc, #32]	; (8004d18 <hoatBootLoader_waittingResponeCmdGetId+0x98>)
 8004cf6:	825a      	strh	r2, [r3, #18]

			printf("\n[hoatBootLoader_waittingResponeCmdGetId] chipId : 0x%x\n", hostPri.cmdGetId.PID);
 8004cf8:	4b07      	ldr	r3, [pc, #28]	; (8004d18 <hoatBootLoader_waittingResponeCmdGetId+0x98>)
 8004cfa:	8a5b      	ldrh	r3, [r3, #18]
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	4807      	ldr	r0, [pc, #28]	; (8004d1c <hoatBootLoader_waittingResponeCmdGetId+0x9c>)
 8004d00:	f001 fa0e 	bl	8006120 <iprintf>

			return true;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e000      	b.n	8004d0a <hoatBootLoader_waittingResponeCmdGetId+0x8a>
		}
	}

	return false;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3708      	adds	r7, #8
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	20000564 	.word	0x20000564
 8004d18:	20000550 	.word	0x20000550
 8004d1c:	08009e84 	.word	0x08009e84

08004d20 <hostBootLoader_readCommand>:

/** @brief  hostBootLoader_readCommand
    @return number of command
*/
static hostBootLoaderState_t hostBootLoader_readCommand(void)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
	static hostBootLoaderState_t state = HOST_BOOTLOADER_STATE_IDLE;
	if(host->isSendCmd == true)
 8004d26:	4b50      	ldr	r3, [pc, #320]	; (8004e68 <hostBootLoader_readCommand+0x148>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	789b      	ldrb	r3, [r3, #2]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d018      	beq.n	8004d62 <hostBootLoader_readCommand+0x42>
	{
		host->isSendCmd = false;
 8004d30:	4b4d      	ldr	r3, [pc, #308]	; (8004e68 <hostBootLoader_readCommand+0x148>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2200      	movs	r2, #0
 8004d36:	709a      	strb	r2, [r3, #2]

		if(host->state == HOST_BOOTLOADER_STATE_IDLE)
 8004d38:	4b4b      	ldr	r3, [pc, #300]	; (8004e68 <hostBootLoader_readCommand+0x148>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	795b      	ldrb	r3, [r3, #5]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d107      	bne.n	8004d52 <hostBootLoader_readCommand+0x32>
		{
			uint8_t data = UART_BOOTLOADER_CMD_CONNECT;
 8004d42:	237f      	movs	r3, #127	; 0x7f
 8004d44:	71fb      	strb	r3, [r7, #7]
			hostBootLoader_sendData(&data, 1);
 8004d46:	1dfb      	adds	r3, r7, #7
 8004d48:	2101      	movs	r1, #1
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7ff feac 	bl	8004aa8 <hostBootLoader_sendData>
 8004d50:	e084      	b.n	8004e5c <hostBootLoader_readCommand+0x13c>
		}
		else
		{
			hostBootLoader_sendData(host->hostCmd, 2);
 8004d52:	4b45      	ldr	r3, [pc, #276]	; (8004e68 <hostBootLoader_readCommand+0x148>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	3303      	adds	r3, #3
 8004d58:	2102      	movs	r1, #2
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7ff fea4 	bl	8004aa8 <hostBootLoader_sendData>
 8004d60:	e07c      	b.n	8004e5c <hostBootLoader_readCommand+0x13c>
		}

	}
	else
	{
		switch(host->hostCmd[0])
 8004d62:	4b41      	ldr	r3, [pc, #260]	; (8004e68 <hostBootLoader_readCommand+0x148>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	78db      	ldrb	r3, [r3, #3]
 8004d68:	2b7f      	cmp	r3, #127	; 0x7f
 8004d6a:	d055      	beq.n	8004e18 <hostBootLoader_readCommand+0xf8>
 8004d6c:	2b7f      	cmp	r3, #127	; 0x7f
 8004d6e:	dc75      	bgt.n	8004e5c <hostBootLoader_readCommand+0x13c>
 8004d70:	2b44      	cmp	r3, #68	; 0x44
 8004d72:	d06c      	beq.n	8004e4e <hostBootLoader_readCommand+0x12e>
 8004d74:	2b44      	cmp	r3, #68	; 0x44
 8004d76:	dc71      	bgt.n	8004e5c <hostBootLoader_readCommand+0x13c>
 8004d78:	2b21      	cmp	r3, #33	; 0x21
 8004d7a:	dc4b      	bgt.n	8004e14 <hostBootLoader_readCommand+0xf4>
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	db6d      	blt.n	8004e5c <hostBootLoader_readCommand+0x13c>
 8004d80:	2b21      	cmp	r3, #33	; 0x21
 8004d82:	d86b      	bhi.n	8004e5c <hostBootLoader_readCommand+0x13c>
 8004d84:	a201      	add	r2, pc, #4	; (adr r2, 8004d8c <hostBootLoader_readCommand+0x6c>)
 8004d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8a:	bf00      	nop
 8004d8c:	08004e2b 	.word	0x08004e2b
 8004d90:	08004e5d 	.word	0x08004e5d
 8004d94:	08004e3d 	.word	0x08004e3d
 8004d98:	08004e5d 	.word	0x08004e5d
 8004d9c:	08004e5d 	.word	0x08004e5d
 8004da0:	08004e5d 	.word	0x08004e5d
 8004da4:	08004e5d 	.word	0x08004e5d
 8004da8:	08004e5d 	.word	0x08004e5d
 8004dac:	08004e5d 	.word	0x08004e5d
 8004db0:	08004e5d 	.word	0x08004e5d
 8004db4:	08004e5d 	.word	0x08004e5d
 8004db8:	08004e5d 	.word	0x08004e5d
 8004dbc:	08004e5d 	.word	0x08004e5d
 8004dc0:	08004e5d 	.word	0x08004e5d
 8004dc4:	08004e5d 	.word	0x08004e5d
 8004dc8:	08004e5d 	.word	0x08004e5d
 8004dcc:	08004e5d 	.word	0x08004e5d
 8004dd0:	08004e5d 	.word	0x08004e5d
 8004dd4:	08004e5d 	.word	0x08004e5d
 8004dd8:	08004e5d 	.word	0x08004e5d
 8004ddc:	08004e5d 	.word	0x08004e5d
 8004de0:	08004e5d 	.word	0x08004e5d
 8004de4:	08004e5d 	.word	0x08004e5d
 8004de8:	08004e5d 	.word	0x08004e5d
 8004dec:	08004e5d 	.word	0x08004e5d
 8004df0:	08004e5d 	.word	0x08004e5d
 8004df4:	08004e5d 	.word	0x08004e5d
 8004df8:	08004e5d 	.word	0x08004e5d
 8004dfc:	08004e5d 	.word	0x08004e5d
 8004e00:	08004e5d 	.word	0x08004e5d
 8004e04:	08004e5d 	.word	0x08004e5d
 8004e08:	08004e5d 	.word	0x08004e5d
 8004e0c:	08004e5d 	.word	0x08004e5d
 8004e10:	08004e5d 	.word	0x08004e5d
 8004e14:	2b31      	cmp	r3, #49	; 0x31

			}break;
			case UART_BOOTLOADER_CMD_WRITE_MEMORY:
			{

			}break;
 8004e16:	e021      	b.n	8004e5c <hostBootLoader_readCommand+0x13c>
				if(hoatBootLoader_waittingResponeCmdConnect() == true)
 8004e18:	f7ff feb6 	bl	8004b88 <hoatBootLoader_waittingResponeCmdConnect>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d017      	beq.n	8004e52 <hostBootLoader_readCommand+0x132>
					state = HOST_BOOTLOADER_STATE_CONNECTED;
 8004e22:	4b12      	ldr	r3, [pc, #72]	; (8004e6c <hostBootLoader_readCommand+0x14c>)
 8004e24:	2201      	movs	r2, #1
 8004e26:	701a      	strb	r2, [r3, #0]
			}break;
 8004e28:	e013      	b.n	8004e52 <hostBootLoader_readCommand+0x132>
				if(hoatBootLoader_waittingResponeCmdGet() == true)
 8004e2a:	f7ff fecf 	bl	8004bcc <hoatBootLoader_waittingResponeCmdGet>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d010      	beq.n	8004e56 <hostBootLoader_readCommand+0x136>
					state = HOST_BOOTLOADER_STATE_CMD_GET;
 8004e34:	4b0d      	ldr	r3, [pc, #52]	; (8004e6c <hostBootLoader_readCommand+0x14c>)
 8004e36:	2202      	movs	r2, #2
 8004e38:	701a      	strb	r2, [r3, #0]
			}break;
 8004e3a:	e00c      	b.n	8004e56 <hostBootLoader_readCommand+0x136>
				if(hoatBootLoader_waittingResponeCmdGetId() == true)
 8004e3c:	f7ff ff20 	bl	8004c80 <hoatBootLoader_waittingResponeCmdGetId>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d009      	beq.n	8004e5a <hostBootLoader_readCommand+0x13a>
					state = HOST_BOOTLOADER_STATE_GET_ID;
 8004e46:	4b09      	ldr	r3, [pc, #36]	; (8004e6c <hostBootLoader_readCommand+0x14c>)
 8004e48:	2203      	movs	r2, #3
 8004e4a:	701a      	strb	r2, [r3, #0]
			}break;
 8004e4c:	e005      	b.n	8004e5a <hostBootLoader_readCommand+0x13a>
			case UART_BOOTLOADER_CMD_ERASE:
			{

			}break;
 8004e4e:	bf00      	nop
 8004e50:	e004      	b.n	8004e5c <hostBootLoader_readCommand+0x13c>
			}break;
 8004e52:	bf00      	nop
 8004e54:	e002      	b.n	8004e5c <hostBootLoader_readCommand+0x13c>
			}break;
 8004e56:	bf00      	nop
 8004e58:	e000      	b.n	8004e5c <hostBootLoader_readCommand+0x13c>
			}break;
 8004e5a:	bf00      	nop
		}
	}

	return state;
 8004e5c:	4b03      	ldr	r3, [pc, #12]	; (8004e6c <hostBootLoader_readCommand+0x14c>)
 8004e5e:	781b      	ldrb	r3, [r3, #0]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3708      	adds	r7, #8
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	20000218 	.word	0x20000218
 8004e6c:	20000220 	.word	0x20000220

08004e70 <hostUartBootLoaderProcess>:
#define __HOST_UART_BOOTLOADER_PROCESS
/** @brief  hostUartBootLoaderProcess
    @return none
*/
void hostUartBootLoaderProcess(void)
{
 8004e70:	b598      	push	{r3, r4, r7, lr}
 8004e72:	af00      	add	r7, sp, #0
	static uint32_t timeSendCmd = 0;

	if(__cmdCli()->flagMsgJumTarget == true)
 8004e74:	f000 f964 	bl	8005140 <__cmdCli>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	785b      	ldrb	r3, [r3, #1]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d003      	beq.n	8004e88 <hostUartBootLoaderProcess+0x18>
	{
		host->isBootLoader = true;
 8004e80:	4b37      	ldr	r3, [pc, #220]	; (8004f60 <hostUartBootLoaderProcess+0xf0>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2201      	movs	r2, #1
 8004e86:	701a      	strb	r2, [r3, #0]
	}

	if(host->isBootLoader == true)
 8004e88:	4b35      	ldr	r3, [pc, #212]	; (8004f60 <hostUartBootLoaderProcess+0xf0>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d064      	beq.n	8004f5c <hostUartBootLoaderProcess+0xec>
	{
		if(host->uartConfigForHwBL == false)
 8004e92:	4b33      	ldr	r3, [pc, #204]	; (8004f60 <hostUartBootLoaderProcess+0xf0>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	785b      	ldrb	r3, [r3, #1]
 8004e98:	f083 0301 	eor.w	r3, r3, #1
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d009      	beq.n	8004eb6 <hostUartBootLoaderProcess+0x46>
		{
			host->uartConfigForHwBL = true;
 8004ea2:	4b2f      	ldr	r3, [pc, #188]	; (8004f60 <hostUartBootLoaderProcess+0xf0>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	705a      	strb	r2, [r3, #1]

			printf("\n[hostUartBootLoaderProcess] re config uart for boot loader\n");
 8004eaa:	482e      	ldr	r0, [pc, #184]	; (8004f64 <hostUartBootLoaderProcess+0xf4>)
 8004eac:	f001 f9be 	bl	800622c <puts>

			hostBootLoader_uartConfigForBL();
 8004eb0:	f7ff fda0 	bl	80049f4 <hostBootLoader_uartConfigForBL>
	}
	else
	{
//		mavlinkControl_process();
	}
}
 8004eb4:	e052      	b.n	8004f5c <hostUartBootLoaderProcess+0xec>
			host->state = hostBootLoader_readCommand();
 8004eb6:	4b2a      	ldr	r3, [pc, #168]	; (8004f60 <hostUartBootLoaderProcess+0xf0>)
 8004eb8:	681c      	ldr	r4, [r3, #0]
 8004eba:	f7ff ff31 	bl	8004d20 <hostBootLoader_readCommand>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	7163      	strb	r3, [r4, #5]
			switch(host->state)
 8004ec2:	4b27      	ldr	r3, [pc, #156]	; (8004f60 <hostUartBootLoaderProcess+0xf0>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	795b      	ldrb	r3, [r3, #5]
 8004ec8:	2b07      	cmp	r3, #7
 8004eca:	d847      	bhi.n	8004f5c <hostUartBootLoaderProcess+0xec>
 8004ecc:	a201      	add	r2, pc, #4	; (adr r2, 8004ed4 <hostUartBootLoaderProcess+0x64>)
 8004ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed2:	bf00      	nop
 8004ed4:	08004ef5 	.word	0x08004ef5
 8004ed8:	08004f13 	.word	0x08004f13
 8004edc:	08004f31 	.word	0x08004f31
 8004ee0:	08004f4f 	.word	0x08004f4f
 8004ee4:	08004f4f 	.word	0x08004f4f
 8004ee8:	08004f4f 	.word	0x08004f4f
 8004eec:	08004f4f 	.word	0x08004f4f
 8004ef0:	08004f4f 	.word	0x08004f4f
					if(getTime(&timeSendCmd, 1000) == true)
 8004ef4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004ef8:	481b      	ldr	r0, [pc, #108]	; (8004f68 <hostUartBootLoaderProcess+0xf8>)
 8004efa:	f7ff fd5d 	bl	80049b8 <getTime>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d026      	beq.n	8004f52 <hostUartBootLoaderProcess+0xe2>
						printf("\n[hoatBootLoader_waittingResponeCmdConnect] waitting device connect ...\n");
 8004f04:	4819      	ldr	r0, [pc, #100]	; (8004f6c <hostUartBootLoaderProcess+0xfc>)
 8004f06:	f001 f991 	bl	800622c <puts>
						hostBootLoader_sendCommand(BOOTLOADER_CMD_NONE);
 8004f0a:	2000      	movs	r0, #0
 8004f0c:	f7ff fe10 	bl	8004b30 <hostBootLoader_sendCommand>
				}break;
 8004f10:	e01f      	b.n	8004f52 <hostUartBootLoaderProcess+0xe2>
					if(getTime(&timeSendCmd, 1000) == true)
 8004f12:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004f16:	4814      	ldr	r0, [pc, #80]	; (8004f68 <hostUartBootLoaderProcess+0xf8>)
 8004f18:	f7ff fd4e 	bl	80049b8 <getTime>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d019      	beq.n	8004f56 <hostUartBootLoaderProcess+0xe6>
						printf("\n[hoatBootLoader_waittingResponeCmdConnect] waitting device reponse cmd get ...\n");
 8004f22:	4813      	ldr	r0, [pc, #76]	; (8004f70 <hostUartBootLoaderProcess+0x100>)
 8004f24:	f001 f982 	bl	800622c <puts>
						hostBootLoader_sendCommand(BOOTLOADER_CMD_GET);
 8004f28:	2001      	movs	r0, #1
 8004f2a:	f7ff fe01 	bl	8004b30 <hostBootLoader_sendCommand>
				}break;
 8004f2e:	e012      	b.n	8004f56 <hostUartBootLoaderProcess+0xe6>
					if(getTime(&timeSendCmd, 1000) == true)
 8004f30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004f34:	480c      	ldr	r0, [pc, #48]	; (8004f68 <hostUartBootLoaderProcess+0xf8>)
 8004f36:	f7ff fd3f 	bl	80049b8 <getTime>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00c      	beq.n	8004f5a <hostUartBootLoaderProcess+0xea>
						printf("\n[hoatBootLoader_waittingResponeCmdConnect] waitting device reponse cmd getId ...\n");
 8004f40:	480c      	ldr	r0, [pc, #48]	; (8004f74 <hostUartBootLoaderProcess+0x104>)
 8004f42:	f001 f973 	bl	800622c <puts>
						hostBootLoader_sendCommand(BOOTLOADER_CMD_GET_ID);
 8004f46:	2003      	movs	r0, #3
 8004f48:	f7ff fdf2 	bl	8004b30 <hostBootLoader_sendCommand>
				}break;
 8004f4c:	e005      	b.n	8004f5a <hostUartBootLoaderProcess+0xea>
				}break;
 8004f4e:	bf00      	nop
 8004f50:	e004      	b.n	8004f5c <hostUartBootLoaderProcess+0xec>
				}break;
 8004f52:	bf00      	nop
 8004f54:	e002      	b.n	8004f5c <hostUartBootLoaderProcess+0xec>
				}break;
 8004f56:	bf00      	nop
 8004f58:	e000      	b.n	8004f5c <hostUartBootLoaderProcess+0xec>
				}break;
 8004f5a:	bf00      	nop
}
 8004f5c:	bf00      	nop
 8004f5e:	bd98      	pop	{r3, r4, r7, pc}
 8004f60:	20000218 	.word	0x20000218
 8004f64:	08009ec0 	.word	0x08009ec0
 8004f68:	20000224 	.word	0x20000224
 8004f6c:	08009efc 	.word	0x08009efc
 8004f70:	08009f44 	.word	0x08009f44
 8004f74:	08009f94 	.word	0x08009f94

08004f78 <ringBufferInit>:
#define __RING_BUFFER_CONFIGURATION
/** @brief  ringBufferInit
    @return none
*/
void ringBufferInit(ringBuffer_t *rBuff)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
	rBuff->head = 0;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	801a      	strh	r2, [r3, #0]
	rBuff->tail = 0;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	805a      	strh	r2, [r3, #2]
	rBuff->len = 0;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	809a      	strh	r2, [r3, #4]
}
 8004f92:	bf00      	nop
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
	...

08004fa0 <ringBufferWrite>:
#define __RING_BUFFER_FUNCTION
/** @brief  ringBufferWrite
    @return ringBufferState_t
*/
ringBufferState_t ringBufferWrite(ringBuffer_t *rBuff, uint8_t wData)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	460b      	mov	r3, r1
 8004faa:	70fb      	strb	r3, [r7, #3]
	if(rBuff->len >= RING_BUFFER_LEN)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	889b      	ldrh	r3, [r3, #4]
 8004fb0:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8004fb4:	d301      	bcc.n	8004fba <ringBufferWrite+0x1a>
	{
		return RING_BUFFER_ERROR;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	e01f      	b.n	8004ffa <ringBufferWrite+0x5a>
	}

	rBuff->buffer[rBuff->tail] = wData;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	885b      	ldrh	r3, [r3, #2]
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	78fa      	ldrb	r2, [r7, #3]
 8004fc6:	719a      	strb	r2, [r3, #6]
	rBuff->tail = (rBuff->tail + 1) % RING_BUFFER_LEN;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	885b      	ldrh	r3, [r3, #2]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	4a0e      	ldr	r2, [pc, #56]	; (8005008 <ringBufferWrite+0x68>)
 8004fd0:	fb82 1203 	smull	r1, r2, r2, r3
 8004fd4:	441a      	add	r2, r3
 8004fd6:	1211      	asrs	r1, r2, #8
 8004fd8:	17da      	asrs	r2, r3, #31
 8004fda:	1a8a      	subs	r2, r1, r2
 8004fdc:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8004fe0:	fb01 f202 	mul.w	r2, r1, r2
 8004fe4:	1a9a      	subs	r2, r3, r2
 8004fe6:	b292      	uxth	r2, r2
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	805a      	strh	r2, [r3, #2]
	rBuff->len++;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	889b      	ldrh	r3, [r3, #4]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	809a      	strh	r2, [r3, #4]

	return RING_BUFFER_OK;
 8004ff8:	2301      	movs	r3, #1
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	f2b9d649 	.word	0xf2b9d649

0800500c <ringBufferRead>:

/** @brief  ringBufferRead
    @return ringBufferState_t
*/
ringBufferState_t ringBufferRead(ringBuffer_t *rBuff, uint8_t *rData)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
	if(rBuff->len == 0)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	889b      	ldrh	r3, [r3, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <ringBufferRead+0x16>
	{
		return RING_BUFFER_ERROR;
 800501e:	2300      	movs	r3, #0
 8005020:	e020      	b.n	8005064 <ringBufferRead+0x58>
	}

	*rData = rBuff->buffer[rBuff->head];
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	881b      	ldrh	r3, [r3, #0]
 8005026:	461a      	mov	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4413      	add	r3, r2
 800502c:	799a      	ldrb	r2, [r3, #6]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	701a      	strb	r2, [r3, #0]

	rBuff->head = (rBuff->head + 1) % RING_BUFFER_LEN;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	881b      	ldrh	r3, [r3, #0]
 8005036:	3301      	adds	r3, #1
 8005038:	4a0d      	ldr	r2, [pc, #52]	; (8005070 <ringBufferRead+0x64>)
 800503a:	fb82 1203 	smull	r1, r2, r2, r3
 800503e:	441a      	add	r2, r3
 8005040:	1211      	asrs	r1, r2, #8
 8005042:	17da      	asrs	r2, r3, #31
 8005044:	1a8a      	subs	r2, r1, r2
 8005046:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800504a:	fb01 f202 	mul.w	r2, r1, r2
 800504e:	1a9a      	subs	r2, r3, r2
 8005050:	b292      	uxth	r2, r2
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	801a      	strh	r2, [r3, #0]
	rBuff->len--;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	889b      	ldrh	r3, [r3, #4]
 800505a:	3b01      	subs	r3, #1
 800505c:	b29a      	uxth	r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	809a      	strh	r2, [r3, #4]

	return RING_BUFFER_OK;
 8005062:	2301      	movs	r3, #1
}
 8005064:	4618      	mov	r0, r3
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr
 8005070:	f2b9d649 	.word	0xf2b9d649

08005074 <serialPort_send>:
/** @brief    serialPort_send
	@param[1] serial
	@return   none
*/
void serialPort_send(serialPort_t* serial)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
    if(serial->zPrivate.uartHandle.Instance == USART2)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005082:	4a12      	ldr	r2, [pc, #72]	; (80050cc <serialPort_send+0x58>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d10b      	bne.n	80050a0 <serialPort_send+0x2c>
    {
        HAL_UART_Transmit_DMA(&huart2, serial->zPrivate.writeBuffer, serial->zPrivate.writeBufferPtr);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f203 310e 	addw	r1, r3, #782	; 0x30e
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 3ade 	ldrb.w	r3, [r3, #2782]	; 0xade
 8005094:	b29b      	uxth	r3, r3
 8005096:	461a      	mov	r2, r3
 8005098:	480d      	ldr	r0, [pc, #52]	; (80050d0 <serialPort_send+0x5c>)
 800509a:	f7fe fc65 	bl	8003968 <HAL_UART_Transmit_DMA>
    }
    else if(serial->zPrivate.uartHandle.Instance == UART4)
    {
        HAL_UART_Transmit_DMA(&huart4, serial->zPrivate.writeBuffer, serial->zPrivate.writeBufferPtr);
    }
}
 800509e:	e010      	b.n	80050c2 <serialPort_send+0x4e>
    else if(serial->zPrivate.uartHandle.Instance == UART4)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80050a6:	4a0b      	ldr	r2, [pc, #44]	; (80050d4 <serialPort_send+0x60>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d10a      	bne.n	80050c2 <serialPort_send+0x4e>
        HAL_UART_Transmit_DMA(&huart4, serial->zPrivate.writeBuffer, serial->zPrivate.writeBufferPtr);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f203 310e 	addw	r1, r3, #782	; 0x30e
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 3ade 	ldrb.w	r3, [r3, #2782]	; 0xade
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	461a      	mov	r2, r3
 80050bc:	4806      	ldr	r0, [pc, #24]	; (80050d8 <serialPort_send+0x64>)
 80050be:	f7fe fc53 	bl	8003968 <HAL_UART_Transmit_DMA>
}
 80050c2:	bf00      	nop
 80050c4:	3708      	adds	r7, #8
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	40004400 	.word	0x40004400
 80050d0:	200004a4 	.word	0x200004a4
 80050d4:	40004c00 	.word	0x40004c00
 80050d8:	20000460 	.word	0x20000460

080050dc <serialPort_tx_finish>:
/** @brief    serialPort_tx_finish
	@param[1] serial
	@return   none
*/
void serialPort_tx_finish(serialPort_t* serial)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
    if(serial->zPrivate.writeBufferPtr != 0)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f893 3ade 	ldrb.w	r3, [r3, #2782]	; 0xade
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d020      	beq.n	8005130 <serialPort_tx_finish+0x54>
    {
        uint8_t i = 0;
 80050ee:	2300      	movs	r3, #0
 80050f0:	73fb      	strb	r3, [r7, #15]

        for( i = 0; i < serial->zPrivate.writeBufferPtr; i++)
 80050f2:	2300      	movs	r3, #0
 80050f4:	73fb      	strb	r3, [r7, #15]
 80050f6:	e00d      	b.n	8005114 <serialPort_tx_finish+0x38>
        {
            serial->zPrivate.writeBuffer[i] = serial->zPrivate.writeBufferTemp[i];
 80050f8:	7bfa      	ldrb	r2, [r7, #15]
 80050fa:	7bfb      	ldrb	r3, [r7, #15]
 80050fc:	6879      	ldr	r1, [r7, #4]
 80050fe:	440a      	add	r2, r1
 8005100:	f892 16f6 	ldrb.w	r1, [r2, #1782]	; 0x6f6
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	4413      	add	r3, r2
 8005108:	460a      	mov	r2, r1
 800510a:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e
        for( i = 0; i < serial->zPrivate.writeBufferPtr; i++)
 800510e:	7bfb      	ldrb	r3, [r7, #15]
 8005110:	3301      	adds	r3, #1
 8005112:	73fb      	strb	r3, [r7, #15]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 3ade 	ldrb.w	r3, [r3, #2782]	; 0xade
 800511a:	7bfa      	ldrb	r2, [r7, #15]
 800511c:	429a      	cmp	r2, r3
 800511e:	d3eb      	bcc.n	80050f8 <serialPort_tx_finish+0x1c>
        }

        serialPort_send(serial);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f7ff ffa7 	bl	8005074 <serialPort_send>
        serial->zPrivate.writeBufferPtr = 0;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2ade 	strb.w	r2, [r3, #2782]	; 0xade
    }
    else
    {
        serial->isWriteFinish = true;
    }
}
 800512e:	e003      	b.n	8005138 <serialPort_tx_finish+0x5c>
        serial->isWriteFinish = true;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
}
 8005138:	bf00      	nop
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <__cmdCli>:

/** @brief  __cmdCli
    @return pointer struct support uart cli
*/
uartCLI_t* __cmdCli(void)
{
 8005140:	b480      	push	{r7}
 8005142:	af00      	add	r7, sp, #0
	return cli;
 8005144:	4b03      	ldr	r3, [pc, #12]	; (8005154 <__cmdCli+0x14>)
 8005146:	681b      	ldr	r3, [r3, #0]
}
 8005148:	4618      	mov	r0, r3
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	20000228 	.word	0x20000228

08005158 <HAL_UART_TxCpltCallback>:
#define __UART_TX_CALLBACK
/** @brief
    @return
*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
			txComplete = true;
		}
	#endif

	#if (USE_HOST_BOOTLOADER == 1)
		if(huart->Instance == huart2.Instance)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	4b0a      	ldr	r3, [pc, #40]	; (8005190 <HAL_UART_TxCpltCallback+0x38>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	429a      	cmp	r2, r3
 800516a:	d10c      	bne.n	8005186 <HAL_UART_TxCpltCallback+0x2e>
		{
			if(__hostBL()->isBootLoader == true)
 800516c:	f7ff fc18 	bl	80049a0 <__hostBL>
 8005170:	4603      	mov	r3, r0
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d003      	beq.n	8005180 <HAL_UART_TxCpltCallback+0x28>
			{
				txComplete = true;
 8005178:	4b06      	ldr	r3, [pc, #24]	; (8005194 <HAL_UART_TxCpltCallback+0x3c>)
 800517a:	2201      	movs	r2, #1
 800517c:	701a      	strb	r2, [r3, #0]
		if(huart->Instance == huart2.Instance)
		{
			serialPort_tx_finish(&serial_port2);
		}
	#endif
}
 800517e:	e002      	b.n	8005186 <HAL_UART_TxCpltCallback+0x2e>
				serialPort_tx_finish(&serial_port2);
 8005180:	4805      	ldr	r0, [pc, #20]	; (8005198 <HAL_UART_TxCpltCallback+0x40>)
 8005182:	f7ff ffab 	bl	80050dc <serialPort_tx_finish>
}
 8005186:	bf00      	nop
 8005188:	3708      	adds	r7, #8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	200004a4 	.word	0x200004a4
 8005194:	20001d4e 	.word	0x20001d4e
 8005198:	20001158 	.word	0x20001158

0800519c <HAL_UART_RxCpltCallback>:
#define __UART_RX_CALLBACK
/** @brief
    @return
*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
			ringBufferWrite(&rBufferRxU2, usart2WData);
		}
	#endif

	#if (USE_HOST_BOOTLOADER == 1)
		if(huart->Instance == huart2.Instance)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	4b18      	ldr	r3, [pc, #96]	; (800520c <HAL_UART_RxCpltCallback+0x70>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d115      	bne.n	80051dc <HAL_UART_RxCpltCallback+0x40>
		{
			if(__hostBL()->isBootLoader == true)
 80051b0:	f7ff fbf6 	bl	80049a0 <__hostBL>
 80051b4:	4603      	mov	r3, r0
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00f      	beq.n	80051dc <HAL_UART_RxCpltCallback+0x40>
			{
				ringBufferWrite(&rBufferHostBL, wData);
 80051bc:	4b14      	ldr	r3, [pc, #80]	; (8005210 <HAL_UART_RxCpltCallback+0x74>)
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	4619      	mov	r1, r3
 80051c2:	4814      	ldr	r0, [pc, #80]	; (8005214 <HAL_UART_RxCpltCallback+0x78>)
 80051c4:	f7ff feec 	bl	8004fa0 <ringBufferWrite>

				if(HAL_UART_Receive_IT(&huart2, &wData, 1) != HAL_OK)
 80051c8:	2201      	movs	r2, #1
 80051ca:	4911      	ldr	r1, [pc, #68]	; (8005210 <HAL_UART_RxCpltCallback+0x74>)
 80051cc:	480f      	ldr	r0, [pc, #60]	; (800520c <HAL_UART_RxCpltCallback+0x70>)
 80051ce:	f7fe fb9a 	bl	8003906 <HAL_UART_Receive_IT>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d001      	beq.n	80051dc <HAL_UART_RxCpltCallback+0x40>
				{
					Error_Handler();
 80051d8:	f7fc f8d0 	bl	800137c <Error_Handler>

		}
	#endif

	#if (USE_COMMAND_LINE_INTERFACE == 1)
		if(huart->Instance == huart1.Instance)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	4b0d      	ldr	r3, [pc, #52]	; (8005218 <HAL_UART_RxCpltCallback+0x7c>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d10c      	bne.n	8005202 <HAL_UART_RxCpltCallback+0x66>
		{
			ringBufferWrite(&rBufferRxU1, usart1WData);
 80051e8:	4b0c      	ldr	r3, [pc, #48]	; (800521c <HAL_UART_RxCpltCallback+0x80>)
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	4619      	mov	r1, r3
 80051ee:	480c      	ldr	r0, [pc, #48]	; (8005220 <HAL_UART_RxCpltCallback+0x84>)
 80051f0:	f7ff fed6 	bl	8004fa0 <ringBufferWrite>

			if(usart1WData == '\n')
 80051f4:	4b09      	ldr	r3, [pc, #36]	; (800521c <HAL_UART_RxCpltCallback+0x80>)
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	2b0a      	cmp	r3, #10
 80051fa:	d102      	bne.n	8005202 <HAL_UART_RxCpltCallback+0x66>
			{
				endCmd = true;
 80051fc:	4b09      	ldr	r3, [pc, #36]	; (8005224 <HAL_UART_RxCpltCallback+0x88>)
 80051fe:	2201      	movs	r2, #1
 8005200:	701a      	strb	r2, [r3, #0]
			}
		}
	#endif
}
 8005202:	bf00      	nop
 8005204:	3708      	adds	r7, #8
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	200004a4 	.word	0x200004a4
 8005210:	2000054c 	.word	0x2000054c
 8005214:	20000564 	.word	0x20000564
 8005218:	2000041c 	.word	0x2000041c
 800521c:	20001d4c 	.word	0x20001d4c
 8005220:	20001c38 	.word	0x20001c38
 8005224:	20001d4d 	.word	0x20001d4d

08005228 <__errno>:
 8005228:	4b01      	ldr	r3, [pc, #4]	; (8005230 <__errno+0x8>)
 800522a:	6818      	ldr	r0, [r3, #0]
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	20000024 	.word	0x20000024

08005234 <__libc_init_array>:
 8005234:	b570      	push	{r4, r5, r6, lr}
 8005236:	4d0d      	ldr	r5, [pc, #52]	; (800526c <__libc_init_array+0x38>)
 8005238:	4c0d      	ldr	r4, [pc, #52]	; (8005270 <__libc_init_array+0x3c>)
 800523a:	1b64      	subs	r4, r4, r5
 800523c:	10a4      	asrs	r4, r4, #2
 800523e:	2600      	movs	r6, #0
 8005240:	42a6      	cmp	r6, r4
 8005242:	d109      	bne.n	8005258 <__libc_init_array+0x24>
 8005244:	4d0b      	ldr	r5, [pc, #44]	; (8005274 <__libc_init_array+0x40>)
 8005246:	4c0c      	ldr	r4, [pc, #48]	; (8005278 <__libc_init_array+0x44>)
 8005248:	f004 fda0 	bl	8009d8c <_init>
 800524c:	1b64      	subs	r4, r4, r5
 800524e:	10a4      	asrs	r4, r4, #2
 8005250:	2600      	movs	r6, #0
 8005252:	42a6      	cmp	r6, r4
 8005254:	d105      	bne.n	8005262 <__libc_init_array+0x2e>
 8005256:	bd70      	pop	{r4, r5, r6, pc}
 8005258:	f855 3b04 	ldr.w	r3, [r5], #4
 800525c:	4798      	blx	r3
 800525e:	3601      	adds	r6, #1
 8005260:	e7ee      	b.n	8005240 <__libc_init_array+0xc>
 8005262:	f855 3b04 	ldr.w	r3, [r5], #4
 8005266:	4798      	blx	r3
 8005268:	3601      	adds	r6, #1
 800526a:	e7f2      	b.n	8005252 <__libc_init_array+0x1e>
 800526c:	0800a4c4 	.word	0x0800a4c4
 8005270:	0800a4c4 	.word	0x0800a4c4
 8005274:	0800a4c4 	.word	0x0800a4c4
 8005278:	0800a4c8 	.word	0x0800a4c8

0800527c <malloc>:
 800527c:	4b02      	ldr	r3, [pc, #8]	; (8005288 <malloc+0xc>)
 800527e:	4601      	mov	r1, r0
 8005280:	6818      	ldr	r0, [r3, #0]
 8005282:	f000 b879 	b.w	8005378 <_malloc_r>
 8005286:	bf00      	nop
 8005288:	20000024 	.word	0x20000024

0800528c <memcpy>:
 800528c:	440a      	add	r2, r1
 800528e:	4291      	cmp	r1, r2
 8005290:	f100 33ff 	add.w	r3, r0, #4294967295
 8005294:	d100      	bne.n	8005298 <memcpy+0xc>
 8005296:	4770      	bx	lr
 8005298:	b510      	push	{r4, lr}
 800529a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800529e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052a2:	4291      	cmp	r1, r2
 80052a4:	d1f9      	bne.n	800529a <memcpy+0xe>
 80052a6:	bd10      	pop	{r4, pc}

080052a8 <memset>:
 80052a8:	4402      	add	r2, r0
 80052aa:	4603      	mov	r3, r0
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d100      	bne.n	80052b2 <memset+0xa>
 80052b0:	4770      	bx	lr
 80052b2:	f803 1b01 	strb.w	r1, [r3], #1
 80052b6:	e7f9      	b.n	80052ac <memset+0x4>

080052b8 <_calloc_r>:
 80052b8:	b513      	push	{r0, r1, r4, lr}
 80052ba:	434a      	muls	r2, r1
 80052bc:	4611      	mov	r1, r2
 80052be:	9201      	str	r2, [sp, #4]
 80052c0:	f000 f85a 	bl	8005378 <_malloc_r>
 80052c4:	4604      	mov	r4, r0
 80052c6:	b118      	cbz	r0, 80052d0 <_calloc_r+0x18>
 80052c8:	9a01      	ldr	r2, [sp, #4]
 80052ca:	2100      	movs	r1, #0
 80052cc:	f7ff ffec 	bl	80052a8 <memset>
 80052d0:	4620      	mov	r0, r4
 80052d2:	b002      	add	sp, #8
 80052d4:	bd10      	pop	{r4, pc}
	...

080052d8 <_free_r>:
 80052d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052da:	2900      	cmp	r1, #0
 80052dc:	d048      	beq.n	8005370 <_free_r+0x98>
 80052de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052e2:	9001      	str	r0, [sp, #4]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f1a1 0404 	sub.w	r4, r1, #4
 80052ea:	bfb8      	it	lt
 80052ec:	18e4      	addlt	r4, r4, r3
 80052ee:	f003 fc3b 	bl	8008b68 <__malloc_lock>
 80052f2:	4a20      	ldr	r2, [pc, #128]	; (8005374 <_free_r+0x9c>)
 80052f4:	9801      	ldr	r0, [sp, #4]
 80052f6:	6813      	ldr	r3, [r2, #0]
 80052f8:	4615      	mov	r5, r2
 80052fa:	b933      	cbnz	r3, 800530a <_free_r+0x32>
 80052fc:	6063      	str	r3, [r4, #4]
 80052fe:	6014      	str	r4, [r2, #0]
 8005300:	b003      	add	sp, #12
 8005302:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005306:	f003 bc35 	b.w	8008b74 <__malloc_unlock>
 800530a:	42a3      	cmp	r3, r4
 800530c:	d90b      	bls.n	8005326 <_free_r+0x4e>
 800530e:	6821      	ldr	r1, [r4, #0]
 8005310:	1862      	adds	r2, r4, r1
 8005312:	4293      	cmp	r3, r2
 8005314:	bf04      	itt	eq
 8005316:	681a      	ldreq	r2, [r3, #0]
 8005318:	685b      	ldreq	r3, [r3, #4]
 800531a:	6063      	str	r3, [r4, #4]
 800531c:	bf04      	itt	eq
 800531e:	1852      	addeq	r2, r2, r1
 8005320:	6022      	streq	r2, [r4, #0]
 8005322:	602c      	str	r4, [r5, #0]
 8005324:	e7ec      	b.n	8005300 <_free_r+0x28>
 8005326:	461a      	mov	r2, r3
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	b10b      	cbz	r3, 8005330 <_free_r+0x58>
 800532c:	42a3      	cmp	r3, r4
 800532e:	d9fa      	bls.n	8005326 <_free_r+0x4e>
 8005330:	6811      	ldr	r1, [r2, #0]
 8005332:	1855      	adds	r5, r2, r1
 8005334:	42a5      	cmp	r5, r4
 8005336:	d10b      	bne.n	8005350 <_free_r+0x78>
 8005338:	6824      	ldr	r4, [r4, #0]
 800533a:	4421      	add	r1, r4
 800533c:	1854      	adds	r4, r2, r1
 800533e:	42a3      	cmp	r3, r4
 8005340:	6011      	str	r1, [r2, #0]
 8005342:	d1dd      	bne.n	8005300 <_free_r+0x28>
 8005344:	681c      	ldr	r4, [r3, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	6053      	str	r3, [r2, #4]
 800534a:	4421      	add	r1, r4
 800534c:	6011      	str	r1, [r2, #0]
 800534e:	e7d7      	b.n	8005300 <_free_r+0x28>
 8005350:	d902      	bls.n	8005358 <_free_r+0x80>
 8005352:	230c      	movs	r3, #12
 8005354:	6003      	str	r3, [r0, #0]
 8005356:	e7d3      	b.n	8005300 <_free_r+0x28>
 8005358:	6825      	ldr	r5, [r4, #0]
 800535a:	1961      	adds	r1, r4, r5
 800535c:	428b      	cmp	r3, r1
 800535e:	bf04      	itt	eq
 8005360:	6819      	ldreq	r1, [r3, #0]
 8005362:	685b      	ldreq	r3, [r3, #4]
 8005364:	6063      	str	r3, [r4, #4]
 8005366:	bf04      	itt	eq
 8005368:	1949      	addeq	r1, r1, r5
 800536a:	6021      	streq	r1, [r4, #0]
 800536c:	6054      	str	r4, [r2, #4]
 800536e:	e7c7      	b.n	8005300 <_free_r+0x28>
 8005370:	b003      	add	sp, #12
 8005372:	bd30      	pop	{r4, r5, pc}
 8005374:	2000022c 	.word	0x2000022c

08005378 <_malloc_r>:
 8005378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800537a:	1ccd      	adds	r5, r1, #3
 800537c:	f025 0503 	bic.w	r5, r5, #3
 8005380:	3508      	adds	r5, #8
 8005382:	2d0c      	cmp	r5, #12
 8005384:	bf38      	it	cc
 8005386:	250c      	movcc	r5, #12
 8005388:	2d00      	cmp	r5, #0
 800538a:	4606      	mov	r6, r0
 800538c:	db01      	blt.n	8005392 <_malloc_r+0x1a>
 800538e:	42a9      	cmp	r1, r5
 8005390:	d903      	bls.n	800539a <_malloc_r+0x22>
 8005392:	230c      	movs	r3, #12
 8005394:	6033      	str	r3, [r6, #0]
 8005396:	2000      	movs	r0, #0
 8005398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800539a:	f003 fbe5 	bl	8008b68 <__malloc_lock>
 800539e:	4921      	ldr	r1, [pc, #132]	; (8005424 <_malloc_r+0xac>)
 80053a0:	680a      	ldr	r2, [r1, #0]
 80053a2:	4614      	mov	r4, r2
 80053a4:	b99c      	cbnz	r4, 80053ce <_malloc_r+0x56>
 80053a6:	4f20      	ldr	r7, [pc, #128]	; (8005428 <_malloc_r+0xb0>)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	b923      	cbnz	r3, 80053b6 <_malloc_r+0x3e>
 80053ac:	4621      	mov	r1, r4
 80053ae:	4630      	mov	r0, r6
 80053b0:	f000 ff44 	bl	800623c <_sbrk_r>
 80053b4:	6038      	str	r0, [r7, #0]
 80053b6:	4629      	mov	r1, r5
 80053b8:	4630      	mov	r0, r6
 80053ba:	f000 ff3f 	bl	800623c <_sbrk_r>
 80053be:	1c43      	adds	r3, r0, #1
 80053c0:	d123      	bne.n	800540a <_malloc_r+0x92>
 80053c2:	230c      	movs	r3, #12
 80053c4:	6033      	str	r3, [r6, #0]
 80053c6:	4630      	mov	r0, r6
 80053c8:	f003 fbd4 	bl	8008b74 <__malloc_unlock>
 80053cc:	e7e3      	b.n	8005396 <_malloc_r+0x1e>
 80053ce:	6823      	ldr	r3, [r4, #0]
 80053d0:	1b5b      	subs	r3, r3, r5
 80053d2:	d417      	bmi.n	8005404 <_malloc_r+0x8c>
 80053d4:	2b0b      	cmp	r3, #11
 80053d6:	d903      	bls.n	80053e0 <_malloc_r+0x68>
 80053d8:	6023      	str	r3, [r4, #0]
 80053da:	441c      	add	r4, r3
 80053dc:	6025      	str	r5, [r4, #0]
 80053de:	e004      	b.n	80053ea <_malloc_r+0x72>
 80053e0:	6863      	ldr	r3, [r4, #4]
 80053e2:	42a2      	cmp	r2, r4
 80053e4:	bf0c      	ite	eq
 80053e6:	600b      	streq	r3, [r1, #0]
 80053e8:	6053      	strne	r3, [r2, #4]
 80053ea:	4630      	mov	r0, r6
 80053ec:	f003 fbc2 	bl	8008b74 <__malloc_unlock>
 80053f0:	f104 000b 	add.w	r0, r4, #11
 80053f4:	1d23      	adds	r3, r4, #4
 80053f6:	f020 0007 	bic.w	r0, r0, #7
 80053fa:	1ac2      	subs	r2, r0, r3
 80053fc:	d0cc      	beq.n	8005398 <_malloc_r+0x20>
 80053fe:	1a1b      	subs	r3, r3, r0
 8005400:	50a3      	str	r3, [r4, r2]
 8005402:	e7c9      	b.n	8005398 <_malloc_r+0x20>
 8005404:	4622      	mov	r2, r4
 8005406:	6864      	ldr	r4, [r4, #4]
 8005408:	e7cc      	b.n	80053a4 <_malloc_r+0x2c>
 800540a:	1cc4      	adds	r4, r0, #3
 800540c:	f024 0403 	bic.w	r4, r4, #3
 8005410:	42a0      	cmp	r0, r4
 8005412:	d0e3      	beq.n	80053dc <_malloc_r+0x64>
 8005414:	1a21      	subs	r1, r4, r0
 8005416:	4630      	mov	r0, r6
 8005418:	f000 ff10 	bl	800623c <_sbrk_r>
 800541c:	3001      	adds	r0, #1
 800541e:	d1dd      	bne.n	80053dc <_malloc_r+0x64>
 8005420:	e7cf      	b.n	80053c2 <_malloc_r+0x4a>
 8005422:	bf00      	nop
 8005424:	2000022c 	.word	0x2000022c
 8005428:	20000230 	.word	0x20000230

0800542c <__cvt>:
 800542c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005430:	ec55 4b10 	vmov	r4, r5, d0
 8005434:	2d00      	cmp	r5, #0
 8005436:	460e      	mov	r6, r1
 8005438:	4619      	mov	r1, r3
 800543a:	462b      	mov	r3, r5
 800543c:	bfbb      	ittet	lt
 800543e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005442:	461d      	movlt	r5, r3
 8005444:	2300      	movge	r3, #0
 8005446:	232d      	movlt	r3, #45	; 0x2d
 8005448:	700b      	strb	r3, [r1, #0]
 800544a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800544c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005450:	4691      	mov	r9, r2
 8005452:	f023 0820 	bic.w	r8, r3, #32
 8005456:	bfbc      	itt	lt
 8005458:	4622      	movlt	r2, r4
 800545a:	4614      	movlt	r4, r2
 800545c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005460:	d005      	beq.n	800546e <__cvt+0x42>
 8005462:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005466:	d100      	bne.n	800546a <__cvt+0x3e>
 8005468:	3601      	adds	r6, #1
 800546a:	2102      	movs	r1, #2
 800546c:	e000      	b.n	8005470 <__cvt+0x44>
 800546e:	2103      	movs	r1, #3
 8005470:	ab03      	add	r3, sp, #12
 8005472:	9301      	str	r3, [sp, #4]
 8005474:	ab02      	add	r3, sp, #8
 8005476:	9300      	str	r3, [sp, #0]
 8005478:	ec45 4b10 	vmov	d0, r4, r5
 800547c:	4653      	mov	r3, sl
 800547e:	4632      	mov	r2, r6
 8005480:	f001 ffe2 	bl	8007448 <_dtoa_r>
 8005484:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005488:	4607      	mov	r7, r0
 800548a:	d102      	bne.n	8005492 <__cvt+0x66>
 800548c:	f019 0f01 	tst.w	r9, #1
 8005490:	d022      	beq.n	80054d8 <__cvt+0xac>
 8005492:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005496:	eb07 0906 	add.w	r9, r7, r6
 800549a:	d110      	bne.n	80054be <__cvt+0x92>
 800549c:	783b      	ldrb	r3, [r7, #0]
 800549e:	2b30      	cmp	r3, #48	; 0x30
 80054a0:	d10a      	bne.n	80054b8 <__cvt+0x8c>
 80054a2:	2200      	movs	r2, #0
 80054a4:	2300      	movs	r3, #0
 80054a6:	4620      	mov	r0, r4
 80054a8:	4629      	mov	r1, r5
 80054aa:	f7fb fb0d 	bl	8000ac8 <__aeabi_dcmpeq>
 80054ae:	b918      	cbnz	r0, 80054b8 <__cvt+0x8c>
 80054b0:	f1c6 0601 	rsb	r6, r6, #1
 80054b4:	f8ca 6000 	str.w	r6, [sl]
 80054b8:	f8da 3000 	ldr.w	r3, [sl]
 80054bc:	4499      	add	r9, r3
 80054be:	2200      	movs	r2, #0
 80054c0:	2300      	movs	r3, #0
 80054c2:	4620      	mov	r0, r4
 80054c4:	4629      	mov	r1, r5
 80054c6:	f7fb faff 	bl	8000ac8 <__aeabi_dcmpeq>
 80054ca:	b108      	cbz	r0, 80054d0 <__cvt+0xa4>
 80054cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80054d0:	2230      	movs	r2, #48	; 0x30
 80054d2:	9b03      	ldr	r3, [sp, #12]
 80054d4:	454b      	cmp	r3, r9
 80054d6:	d307      	bcc.n	80054e8 <__cvt+0xbc>
 80054d8:	9b03      	ldr	r3, [sp, #12]
 80054da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054dc:	1bdb      	subs	r3, r3, r7
 80054de:	4638      	mov	r0, r7
 80054e0:	6013      	str	r3, [r2, #0]
 80054e2:	b004      	add	sp, #16
 80054e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054e8:	1c59      	adds	r1, r3, #1
 80054ea:	9103      	str	r1, [sp, #12]
 80054ec:	701a      	strb	r2, [r3, #0]
 80054ee:	e7f0      	b.n	80054d2 <__cvt+0xa6>

080054f0 <__exponent>:
 80054f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054f2:	4603      	mov	r3, r0
 80054f4:	2900      	cmp	r1, #0
 80054f6:	bfb8      	it	lt
 80054f8:	4249      	neglt	r1, r1
 80054fa:	f803 2b02 	strb.w	r2, [r3], #2
 80054fe:	bfb4      	ite	lt
 8005500:	222d      	movlt	r2, #45	; 0x2d
 8005502:	222b      	movge	r2, #43	; 0x2b
 8005504:	2909      	cmp	r1, #9
 8005506:	7042      	strb	r2, [r0, #1]
 8005508:	dd2a      	ble.n	8005560 <__exponent+0x70>
 800550a:	f10d 0407 	add.w	r4, sp, #7
 800550e:	46a4      	mov	ip, r4
 8005510:	270a      	movs	r7, #10
 8005512:	46a6      	mov	lr, r4
 8005514:	460a      	mov	r2, r1
 8005516:	fb91 f6f7 	sdiv	r6, r1, r7
 800551a:	fb07 1516 	mls	r5, r7, r6, r1
 800551e:	3530      	adds	r5, #48	; 0x30
 8005520:	2a63      	cmp	r2, #99	; 0x63
 8005522:	f104 34ff 	add.w	r4, r4, #4294967295
 8005526:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800552a:	4631      	mov	r1, r6
 800552c:	dcf1      	bgt.n	8005512 <__exponent+0x22>
 800552e:	3130      	adds	r1, #48	; 0x30
 8005530:	f1ae 0502 	sub.w	r5, lr, #2
 8005534:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005538:	1c44      	adds	r4, r0, #1
 800553a:	4629      	mov	r1, r5
 800553c:	4561      	cmp	r1, ip
 800553e:	d30a      	bcc.n	8005556 <__exponent+0x66>
 8005540:	f10d 0209 	add.w	r2, sp, #9
 8005544:	eba2 020e 	sub.w	r2, r2, lr
 8005548:	4565      	cmp	r5, ip
 800554a:	bf88      	it	hi
 800554c:	2200      	movhi	r2, #0
 800554e:	4413      	add	r3, r2
 8005550:	1a18      	subs	r0, r3, r0
 8005552:	b003      	add	sp, #12
 8005554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005556:	f811 2b01 	ldrb.w	r2, [r1], #1
 800555a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800555e:	e7ed      	b.n	800553c <__exponent+0x4c>
 8005560:	2330      	movs	r3, #48	; 0x30
 8005562:	3130      	adds	r1, #48	; 0x30
 8005564:	7083      	strb	r3, [r0, #2]
 8005566:	70c1      	strb	r1, [r0, #3]
 8005568:	1d03      	adds	r3, r0, #4
 800556a:	e7f1      	b.n	8005550 <__exponent+0x60>

0800556c <_printf_float>:
 800556c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005570:	ed2d 8b02 	vpush	{d8}
 8005574:	b08d      	sub	sp, #52	; 0x34
 8005576:	460c      	mov	r4, r1
 8005578:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800557c:	4616      	mov	r6, r2
 800557e:	461f      	mov	r7, r3
 8005580:	4605      	mov	r5, r0
 8005582:	f003 fa73 	bl	8008a6c <_localeconv_r>
 8005586:	f8d0 a000 	ldr.w	sl, [r0]
 800558a:	4650      	mov	r0, sl
 800558c:	f7fa fe20 	bl	80001d0 <strlen>
 8005590:	2300      	movs	r3, #0
 8005592:	930a      	str	r3, [sp, #40]	; 0x28
 8005594:	6823      	ldr	r3, [r4, #0]
 8005596:	9305      	str	r3, [sp, #20]
 8005598:	f8d8 3000 	ldr.w	r3, [r8]
 800559c:	f894 b018 	ldrb.w	fp, [r4, #24]
 80055a0:	3307      	adds	r3, #7
 80055a2:	f023 0307 	bic.w	r3, r3, #7
 80055a6:	f103 0208 	add.w	r2, r3, #8
 80055aa:	f8c8 2000 	str.w	r2, [r8]
 80055ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80055b6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80055ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80055be:	9307      	str	r3, [sp, #28]
 80055c0:	f8cd 8018 	str.w	r8, [sp, #24]
 80055c4:	ee08 0a10 	vmov	s16, r0
 80055c8:	4b9f      	ldr	r3, [pc, #636]	; (8005848 <_printf_float+0x2dc>)
 80055ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055ce:	f04f 32ff 	mov.w	r2, #4294967295
 80055d2:	f7fb faab 	bl	8000b2c <__aeabi_dcmpun>
 80055d6:	bb88      	cbnz	r0, 800563c <_printf_float+0xd0>
 80055d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055dc:	4b9a      	ldr	r3, [pc, #616]	; (8005848 <_printf_float+0x2dc>)
 80055de:	f04f 32ff 	mov.w	r2, #4294967295
 80055e2:	f7fb fa85 	bl	8000af0 <__aeabi_dcmple>
 80055e6:	bb48      	cbnz	r0, 800563c <_printf_float+0xd0>
 80055e8:	2200      	movs	r2, #0
 80055ea:	2300      	movs	r3, #0
 80055ec:	4640      	mov	r0, r8
 80055ee:	4649      	mov	r1, r9
 80055f0:	f7fb fa74 	bl	8000adc <__aeabi_dcmplt>
 80055f4:	b110      	cbz	r0, 80055fc <_printf_float+0x90>
 80055f6:	232d      	movs	r3, #45	; 0x2d
 80055f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055fc:	4b93      	ldr	r3, [pc, #588]	; (800584c <_printf_float+0x2e0>)
 80055fe:	4894      	ldr	r0, [pc, #592]	; (8005850 <_printf_float+0x2e4>)
 8005600:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005604:	bf94      	ite	ls
 8005606:	4698      	movls	r8, r3
 8005608:	4680      	movhi	r8, r0
 800560a:	2303      	movs	r3, #3
 800560c:	6123      	str	r3, [r4, #16]
 800560e:	9b05      	ldr	r3, [sp, #20]
 8005610:	f023 0204 	bic.w	r2, r3, #4
 8005614:	6022      	str	r2, [r4, #0]
 8005616:	f04f 0900 	mov.w	r9, #0
 800561a:	9700      	str	r7, [sp, #0]
 800561c:	4633      	mov	r3, r6
 800561e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005620:	4621      	mov	r1, r4
 8005622:	4628      	mov	r0, r5
 8005624:	f000 f9d8 	bl	80059d8 <_printf_common>
 8005628:	3001      	adds	r0, #1
 800562a:	f040 8090 	bne.w	800574e <_printf_float+0x1e2>
 800562e:	f04f 30ff 	mov.w	r0, #4294967295
 8005632:	b00d      	add	sp, #52	; 0x34
 8005634:	ecbd 8b02 	vpop	{d8}
 8005638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800563c:	4642      	mov	r2, r8
 800563e:	464b      	mov	r3, r9
 8005640:	4640      	mov	r0, r8
 8005642:	4649      	mov	r1, r9
 8005644:	f7fb fa72 	bl	8000b2c <__aeabi_dcmpun>
 8005648:	b140      	cbz	r0, 800565c <_printf_float+0xf0>
 800564a:	464b      	mov	r3, r9
 800564c:	2b00      	cmp	r3, #0
 800564e:	bfbc      	itt	lt
 8005650:	232d      	movlt	r3, #45	; 0x2d
 8005652:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005656:	487f      	ldr	r0, [pc, #508]	; (8005854 <_printf_float+0x2e8>)
 8005658:	4b7f      	ldr	r3, [pc, #508]	; (8005858 <_printf_float+0x2ec>)
 800565a:	e7d1      	b.n	8005600 <_printf_float+0x94>
 800565c:	6863      	ldr	r3, [r4, #4]
 800565e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005662:	9206      	str	r2, [sp, #24]
 8005664:	1c5a      	adds	r2, r3, #1
 8005666:	d13f      	bne.n	80056e8 <_printf_float+0x17c>
 8005668:	2306      	movs	r3, #6
 800566a:	6063      	str	r3, [r4, #4]
 800566c:	9b05      	ldr	r3, [sp, #20]
 800566e:	6861      	ldr	r1, [r4, #4]
 8005670:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005674:	2300      	movs	r3, #0
 8005676:	9303      	str	r3, [sp, #12]
 8005678:	ab0a      	add	r3, sp, #40	; 0x28
 800567a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800567e:	ab09      	add	r3, sp, #36	; 0x24
 8005680:	ec49 8b10 	vmov	d0, r8, r9
 8005684:	9300      	str	r3, [sp, #0]
 8005686:	6022      	str	r2, [r4, #0]
 8005688:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800568c:	4628      	mov	r0, r5
 800568e:	f7ff fecd 	bl	800542c <__cvt>
 8005692:	9b06      	ldr	r3, [sp, #24]
 8005694:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005696:	2b47      	cmp	r3, #71	; 0x47
 8005698:	4680      	mov	r8, r0
 800569a:	d108      	bne.n	80056ae <_printf_float+0x142>
 800569c:	1cc8      	adds	r0, r1, #3
 800569e:	db02      	blt.n	80056a6 <_printf_float+0x13a>
 80056a0:	6863      	ldr	r3, [r4, #4]
 80056a2:	4299      	cmp	r1, r3
 80056a4:	dd41      	ble.n	800572a <_printf_float+0x1be>
 80056a6:	f1ab 0b02 	sub.w	fp, fp, #2
 80056aa:	fa5f fb8b 	uxtb.w	fp, fp
 80056ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80056b2:	d820      	bhi.n	80056f6 <_printf_float+0x18a>
 80056b4:	3901      	subs	r1, #1
 80056b6:	465a      	mov	r2, fp
 80056b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80056bc:	9109      	str	r1, [sp, #36]	; 0x24
 80056be:	f7ff ff17 	bl	80054f0 <__exponent>
 80056c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056c4:	1813      	adds	r3, r2, r0
 80056c6:	2a01      	cmp	r2, #1
 80056c8:	4681      	mov	r9, r0
 80056ca:	6123      	str	r3, [r4, #16]
 80056cc:	dc02      	bgt.n	80056d4 <_printf_float+0x168>
 80056ce:	6822      	ldr	r2, [r4, #0]
 80056d0:	07d2      	lsls	r2, r2, #31
 80056d2:	d501      	bpl.n	80056d8 <_printf_float+0x16c>
 80056d4:	3301      	adds	r3, #1
 80056d6:	6123      	str	r3, [r4, #16]
 80056d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d09c      	beq.n	800561a <_printf_float+0xae>
 80056e0:	232d      	movs	r3, #45	; 0x2d
 80056e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056e6:	e798      	b.n	800561a <_printf_float+0xae>
 80056e8:	9a06      	ldr	r2, [sp, #24]
 80056ea:	2a47      	cmp	r2, #71	; 0x47
 80056ec:	d1be      	bne.n	800566c <_printf_float+0x100>
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1bc      	bne.n	800566c <_printf_float+0x100>
 80056f2:	2301      	movs	r3, #1
 80056f4:	e7b9      	b.n	800566a <_printf_float+0xfe>
 80056f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80056fa:	d118      	bne.n	800572e <_printf_float+0x1c2>
 80056fc:	2900      	cmp	r1, #0
 80056fe:	6863      	ldr	r3, [r4, #4]
 8005700:	dd0b      	ble.n	800571a <_printf_float+0x1ae>
 8005702:	6121      	str	r1, [r4, #16]
 8005704:	b913      	cbnz	r3, 800570c <_printf_float+0x1a0>
 8005706:	6822      	ldr	r2, [r4, #0]
 8005708:	07d0      	lsls	r0, r2, #31
 800570a:	d502      	bpl.n	8005712 <_printf_float+0x1a6>
 800570c:	3301      	adds	r3, #1
 800570e:	440b      	add	r3, r1
 8005710:	6123      	str	r3, [r4, #16]
 8005712:	65a1      	str	r1, [r4, #88]	; 0x58
 8005714:	f04f 0900 	mov.w	r9, #0
 8005718:	e7de      	b.n	80056d8 <_printf_float+0x16c>
 800571a:	b913      	cbnz	r3, 8005722 <_printf_float+0x1b6>
 800571c:	6822      	ldr	r2, [r4, #0]
 800571e:	07d2      	lsls	r2, r2, #31
 8005720:	d501      	bpl.n	8005726 <_printf_float+0x1ba>
 8005722:	3302      	adds	r3, #2
 8005724:	e7f4      	b.n	8005710 <_printf_float+0x1a4>
 8005726:	2301      	movs	r3, #1
 8005728:	e7f2      	b.n	8005710 <_printf_float+0x1a4>
 800572a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800572e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005730:	4299      	cmp	r1, r3
 8005732:	db05      	blt.n	8005740 <_printf_float+0x1d4>
 8005734:	6823      	ldr	r3, [r4, #0]
 8005736:	6121      	str	r1, [r4, #16]
 8005738:	07d8      	lsls	r0, r3, #31
 800573a:	d5ea      	bpl.n	8005712 <_printf_float+0x1a6>
 800573c:	1c4b      	adds	r3, r1, #1
 800573e:	e7e7      	b.n	8005710 <_printf_float+0x1a4>
 8005740:	2900      	cmp	r1, #0
 8005742:	bfd4      	ite	le
 8005744:	f1c1 0202 	rsble	r2, r1, #2
 8005748:	2201      	movgt	r2, #1
 800574a:	4413      	add	r3, r2
 800574c:	e7e0      	b.n	8005710 <_printf_float+0x1a4>
 800574e:	6823      	ldr	r3, [r4, #0]
 8005750:	055a      	lsls	r2, r3, #21
 8005752:	d407      	bmi.n	8005764 <_printf_float+0x1f8>
 8005754:	6923      	ldr	r3, [r4, #16]
 8005756:	4642      	mov	r2, r8
 8005758:	4631      	mov	r1, r6
 800575a:	4628      	mov	r0, r5
 800575c:	47b8      	blx	r7
 800575e:	3001      	adds	r0, #1
 8005760:	d12c      	bne.n	80057bc <_printf_float+0x250>
 8005762:	e764      	b.n	800562e <_printf_float+0xc2>
 8005764:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005768:	f240 80e0 	bls.w	800592c <_printf_float+0x3c0>
 800576c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005770:	2200      	movs	r2, #0
 8005772:	2300      	movs	r3, #0
 8005774:	f7fb f9a8 	bl	8000ac8 <__aeabi_dcmpeq>
 8005778:	2800      	cmp	r0, #0
 800577a:	d034      	beq.n	80057e6 <_printf_float+0x27a>
 800577c:	4a37      	ldr	r2, [pc, #220]	; (800585c <_printf_float+0x2f0>)
 800577e:	2301      	movs	r3, #1
 8005780:	4631      	mov	r1, r6
 8005782:	4628      	mov	r0, r5
 8005784:	47b8      	blx	r7
 8005786:	3001      	adds	r0, #1
 8005788:	f43f af51 	beq.w	800562e <_printf_float+0xc2>
 800578c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005790:	429a      	cmp	r2, r3
 8005792:	db02      	blt.n	800579a <_printf_float+0x22e>
 8005794:	6823      	ldr	r3, [r4, #0]
 8005796:	07d8      	lsls	r0, r3, #31
 8005798:	d510      	bpl.n	80057bc <_printf_float+0x250>
 800579a:	ee18 3a10 	vmov	r3, s16
 800579e:	4652      	mov	r2, sl
 80057a0:	4631      	mov	r1, r6
 80057a2:	4628      	mov	r0, r5
 80057a4:	47b8      	blx	r7
 80057a6:	3001      	adds	r0, #1
 80057a8:	f43f af41 	beq.w	800562e <_printf_float+0xc2>
 80057ac:	f04f 0800 	mov.w	r8, #0
 80057b0:	f104 091a 	add.w	r9, r4, #26
 80057b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057b6:	3b01      	subs	r3, #1
 80057b8:	4543      	cmp	r3, r8
 80057ba:	dc09      	bgt.n	80057d0 <_printf_float+0x264>
 80057bc:	6823      	ldr	r3, [r4, #0]
 80057be:	079b      	lsls	r3, r3, #30
 80057c0:	f100 8105 	bmi.w	80059ce <_printf_float+0x462>
 80057c4:	68e0      	ldr	r0, [r4, #12]
 80057c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057c8:	4298      	cmp	r0, r3
 80057ca:	bfb8      	it	lt
 80057cc:	4618      	movlt	r0, r3
 80057ce:	e730      	b.n	8005632 <_printf_float+0xc6>
 80057d0:	2301      	movs	r3, #1
 80057d2:	464a      	mov	r2, r9
 80057d4:	4631      	mov	r1, r6
 80057d6:	4628      	mov	r0, r5
 80057d8:	47b8      	blx	r7
 80057da:	3001      	adds	r0, #1
 80057dc:	f43f af27 	beq.w	800562e <_printf_float+0xc2>
 80057e0:	f108 0801 	add.w	r8, r8, #1
 80057e4:	e7e6      	b.n	80057b4 <_printf_float+0x248>
 80057e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	dc39      	bgt.n	8005860 <_printf_float+0x2f4>
 80057ec:	4a1b      	ldr	r2, [pc, #108]	; (800585c <_printf_float+0x2f0>)
 80057ee:	2301      	movs	r3, #1
 80057f0:	4631      	mov	r1, r6
 80057f2:	4628      	mov	r0, r5
 80057f4:	47b8      	blx	r7
 80057f6:	3001      	adds	r0, #1
 80057f8:	f43f af19 	beq.w	800562e <_printf_float+0xc2>
 80057fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005800:	4313      	orrs	r3, r2
 8005802:	d102      	bne.n	800580a <_printf_float+0x29e>
 8005804:	6823      	ldr	r3, [r4, #0]
 8005806:	07d9      	lsls	r1, r3, #31
 8005808:	d5d8      	bpl.n	80057bc <_printf_float+0x250>
 800580a:	ee18 3a10 	vmov	r3, s16
 800580e:	4652      	mov	r2, sl
 8005810:	4631      	mov	r1, r6
 8005812:	4628      	mov	r0, r5
 8005814:	47b8      	blx	r7
 8005816:	3001      	adds	r0, #1
 8005818:	f43f af09 	beq.w	800562e <_printf_float+0xc2>
 800581c:	f04f 0900 	mov.w	r9, #0
 8005820:	f104 0a1a 	add.w	sl, r4, #26
 8005824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005826:	425b      	negs	r3, r3
 8005828:	454b      	cmp	r3, r9
 800582a:	dc01      	bgt.n	8005830 <_printf_float+0x2c4>
 800582c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800582e:	e792      	b.n	8005756 <_printf_float+0x1ea>
 8005830:	2301      	movs	r3, #1
 8005832:	4652      	mov	r2, sl
 8005834:	4631      	mov	r1, r6
 8005836:	4628      	mov	r0, r5
 8005838:	47b8      	blx	r7
 800583a:	3001      	adds	r0, #1
 800583c:	f43f aef7 	beq.w	800562e <_printf_float+0xc2>
 8005840:	f109 0901 	add.w	r9, r9, #1
 8005844:	e7ee      	b.n	8005824 <_printf_float+0x2b8>
 8005846:	bf00      	nop
 8005848:	7fefffff 	.word	0x7fefffff
 800584c:	0800a00c 	.word	0x0800a00c
 8005850:	0800a010 	.word	0x0800a010
 8005854:	0800a018 	.word	0x0800a018
 8005858:	0800a014 	.word	0x0800a014
 800585c:	0800a01c 	.word	0x0800a01c
 8005860:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005862:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005864:	429a      	cmp	r2, r3
 8005866:	bfa8      	it	ge
 8005868:	461a      	movge	r2, r3
 800586a:	2a00      	cmp	r2, #0
 800586c:	4691      	mov	r9, r2
 800586e:	dc37      	bgt.n	80058e0 <_printf_float+0x374>
 8005870:	f04f 0b00 	mov.w	fp, #0
 8005874:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005878:	f104 021a 	add.w	r2, r4, #26
 800587c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800587e:	9305      	str	r3, [sp, #20]
 8005880:	eba3 0309 	sub.w	r3, r3, r9
 8005884:	455b      	cmp	r3, fp
 8005886:	dc33      	bgt.n	80058f0 <_printf_float+0x384>
 8005888:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800588c:	429a      	cmp	r2, r3
 800588e:	db3b      	blt.n	8005908 <_printf_float+0x39c>
 8005890:	6823      	ldr	r3, [r4, #0]
 8005892:	07da      	lsls	r2, r3, #31
 8005894:	d438      	bmi.n	8005908 <_printf_float+0x39c>
 8005896:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005898:	9b05      	ldr	r3, [sp, #20]
 800589a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	eba2 0901 	sub.w	r9, r2, r1
 80058a2:	4599      	cmp	r9, r3
 80058a4:	bfa8      	it	ge
 80058a6:	4699      	movge	r9, r3
 80058a8:	f1b9 0f00 	cmp.w	r9, #0
 80058ac:	dc35      	bgt.n	800591a <_printf_float+0x3ae>
 80058ae:	f04f 0800 	mov.w	r8, #0
 80058b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058b6:	f104 0a1a 	add.w	sl, r4, #26
 80058ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058be:	1a9b      	subs	r3, r3, r2
 80058c0:	eba3 0309 	sub.w	r3, r3, r9
 80058c4:	4543      	cmp	r3, r8
 80058c6:	f77f af79 	ble.w	80057bc <_printf_float+0x250>
 80058ca:	2301      	movs	r3, #1
 80058cc:	4652      	mov	r2, sl
 80058ce:	4631      	mov	r1, r6
 80058d0:	4628      	mov	r0, r5
 80058d2:	47b8      	blx	r7
 80058d4:	3001      	adds	r0, #1
 80058d6:	f43f aeaa 	beq.w	800562e <_printf_float+0xc2>
 80058da:	f108 0801 	add.w	r8, r8, #1
 80058de:	e7ec      	b.n	80058ba <_printf_float+0x34e>
 80058e0:	4613      	mov	r3, r2
 80058e2:	4631      	mov	r1, r6
 80058e4:	4642      	mov	r2, r8
 80058e6:	4628      	mov	r0, r5
 80058e8:	47b8      	blx	r7
 80058ea:	3001      	adds	r0, #1
 80058ec:	d1c0      	bne.n	8005870 <_printf_float+0x304>
 80058ee:	e69e      	b.n	800562e <_printf_float+0xc2>
 80058f0:	2301      	movs	r3, #1
 80058f2:	4631      	mov	r1, r6
 80058f4:	4628      	mov	r0, r5
 80058f6:	9205      	str	r2, [sp, #20]
 80058f8:	47b8      	blx	r7
 80058fa:	3001      	adds	r0, #1
 80058fc:	f43f ae97 	beq.w	800562e <_printf_float+0xc2>
 8005900:	9a05      	ldr	r2, [sp, #20]
 8005902:	f10b 0b01 	add.w	fp, fp, #1
 8005906:	e7b9      	b.n	800587c <_printf_float+0x310>
 8005908:	ee18 3a10 	vmov	r3, s16
 800590c:	4652      	mov	r2, sl
 800590e:	4631      	mov	r1, r6
 8005910:	4628      	mov	r0, r5
 8005912:	47b8      	blx	r7
 8005914:	3001      	adds	r0, #1
 8005916:	d1be      	bne.n	8005896 <_printf_float+0x32a>
 8005918:	e689      	b.n	800562e <_printf_float+0xc2>
 800591a:	9a05      	ldr	r2, [sp, #20]
 800591c:	464b      	mov	r3, r9
 800591e:	4442      	add	r2, r8
 8005920:	4631      	mov	r1, r6
 8005922:	4628      	mov	r0, r5
 8005924:	47b8      	blx	r7
 8005926:	3001      	adds	r0, #1
 8005928:	d1c1      	bne.n	80058ae <_printf_float+0x342>
 800592a:	e680      	b.n	800562e <_printf_float+0xc2>
 800592c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800592e:	2a01      	cmp	r2, #1
 8005930:	dc01      	bgt.n	8005936 <_printf_float+0x3ca>
 8005932:	07db      	lsls	r3, r3, #31
 8005934:	d538      	bpl.n	80059a8 <_printf_float+0x43c>
 8005936:	2301      	movs	r3, #1
 8005938:	4642      	mov	r2, r8
 800593a:	4631      	mov	r1, r6
 800593c:	4628      	mov	r0, r5
 800593e:	47b8      	blx	r7
 8005940:	3001      	adds	r0, #1
 8005942:	f43f ae74 	beq.w	800562e <_printf_float+0xc2>
 8005946:	ee18 3a10 	vmov	r3, s16
 800594a:	4652      	mov	r2, sl
 800594c:	4631      	mov	r1, r6
 800594e:	4628      	mov	r0, r5
 8005950:	47b8      	blx	r7
 8005952:	3001      	adds	r0, #1
 8005954:	f43f ae6b 	beq.w	800562e <_printf_float+0xc2>
 8005958:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800595c:	2200      	movs	r2, #0
 800595e:	2300      	movs	r3, #0
 8005960:	f7fb f8b2 	bl	8000ac8 <__aeabi_dcmpeq>
 8005964:	b9d8      	cbnz	r0, 800599e <_printf_float+0x432>
 8005966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005968:	f108 0201 	add.w	r2, r8, #1
 800596c:	3b01      	subs	r3, #1
 800596e:	4631      	mov	r1, r6
 8005970:	4628      	mov	r0, r5
 8005972:	47b8      	blx	r7
 8005974:	3001      	adds	r0, #1
 8005976:	d10e      	bne.n	8005996 <_printf_float+0x42a>
 8005978:	e659      	b.n	800562e <_printf_float+0xc2>
 800597a:	2301      	movs	r3, #1
 800597c:	4652      	mov	r2, sl
 800597e:	4631      	mov	r1, r6
 8005980:	4628      	mov	r0, r5
 8005982:	47b8      	blx	r7
 8005984:	3001      	adds	r0, #1
 8005986:	f43f ae52 	beq.w	800562e <_printf_float+0xc2>
 800598a:	f108 0801 	add.w	r8, r8, #1
 800598e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005990:	3b01      	subs	r3, #1
 8005992:	4543      	cmp	r3, r8
 8005994:	dcf1      	bgt.n	800597a <_printf_float+0x40e>
 8005996:	464b      	mov	r3, r9
 8005998:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800599c:	e6dc      	b.n	8005758 <_printf_float+0x1ec>
 800599e:	f04f 0800 	mov.w	r8, #0
 80059a2:	f104 0a1a 	add.w	sl, r4, #26
 80059a6:	e7f2      	b.n	800598e <_printf_float+0x422>
 80059a8:	2301      	movs	r3, #1
 80059aa:	4642      	mov	r2, r8
 80059ac:	e7df      	b.n	800596e <_printf_float+0x402>
 80059ae:	2301      	movs	r3, #1
 80059b0:	464a      	mov	r2, r9
 80059b2:	4631      	mov	r1, r6
 80059b4:	4628      	mov	r0, r5
 80059b6:	47b8      	blx	r7
 80059b8:	3001      	adds	r0, #1
 80059ba:	f43f ae38 	beq.w	800562e <_printf_float+0xc2>
 80059be:	f108 0801 	add.w	r8, r8, #1
 80059c2:	68e3      	ldr	r3, [r4, #12]
 80059c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80059c6:	1a5b      	subs	r3, r3, r1
 80059c8:	4543      	cmp	r3, r8
 80059ca:	dcf0      	bgt.n	80059ae <_printf_float+0x442>
 80059cc:	e6fa      	b.n	80057c4 <_printf_float+0x258>
 80059ce:	f04f 0800 	mov.w	r8, #0
 80059d2:	f104 0919 	add.w	r9, r4, #25
 80059d6:	e7f4      	b.n	80059c2 <_printf_float+0x456>

080059d8 <_printf_common>:
 80059d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059dc:	4616      	mov	r6, r2
 80059de:	4699      	mov	r9, r3
 80059e0:	688a      	ldr	r2, [r1, #8]
 80059e2:	690b      	ldr	r3, [r1, #16]
 80059e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059e8:	4293      	cmp	r3, r2
 80059ea:	bfb8      	it	lt
 80059ec:	4613      	movlt	r3, r2
 80059ee:	6033      	str	r3, [r6, #0]
 80059f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059f4:	4607      	mov	r7, r0
 80059f6:	460c      	mov	r4, r1
 80059f8:	b10a      	cbz	r2, 80059fe <_printf_common+0x26>
 80059fa:	3301      	adds	r3, #1
 80059fc:	6033      	str	r3, [r6, #0]
 80059fe:	6823      	ldr	r3, [r4, #0]
 8005a00:	0699      	lsls	r1, r3, #26
 8005a02:	bf42      	ittt	mi
 8005a04:	6833      	ldrmi	r3, [r6, #0]
 8005a06:	3302      	addmi	r3, #2
 8005a08:	6033      	strmi	r3, [r6, #0]
 8005a0a:	6825      	ldr	r5, [r4, #0]
 8005a0c:	f015 0506 	ands.w	r5, r5, #6
 8005a10:	d106      	bne.n	8005a20 <_printf_common+0x48>
 8005a12:	f104 0a19 	add.w	sl, r4, #25
 8005a16:	68e3      	ldr	r3, [r4, #12]
 8005a18:	6832      	ldr	r2, [r6, #0]
 8005a1a:	1a9b      	subs	r3, r3, r2
 8005a1c:	42ab      	cmp	r3, r5
 8005a1e:	dc26      	bgt.n	8005a6e <_printf_common+0x96>
 8005a20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a24:	1e13      	subs	r3, r2, #0
 8005a26:	6822      	ldr	r2, [r4, #0]
 8005a28:	bf18      	it	ne
 8005a2a:	2301      	movne	r3, #1
 8005a2c:	0692      	lsls	r2, r2, #26
 8005a2e:	d42b      	bmi.n	8005a88 <_printf_common+0xb0>
 8005a30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a34:	4649      	mov	r1, r9
 8005a36:	4638      	mov	r0, r7
 8005a38:	47c0      	blx	r8
 8005a3a:	3001      	adds	r0, #1
 8005a3c:	d01e      	beq.n	8005a7c <_printf_common+0xa4>
 8005a3e:	6823      	ldr	r3, [r4, #0]
 8005a40:	68e5      	ldr	r5, [r4, #12]
 8005a42:	6832      	ldr	r2, [r6, #0]
 8005a44:	f003 0306 	and.w	r3, r3, #6
 8005a48:	2b04      	cmp	r3, #4
 8005a4a:	bf08      	it	eq
 8005a4c:	1aad      	subeq	r5, r5, r2
 8005a4e:	68a3      	ldr	r3, [r4, #8]
 8005a50:	6922      	ldr	r2, [r4, #16]
 8005a52:	bf0c      	ite	eq
 8005a54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a58:	2500      	movne	r5, #0
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	bfc4      	itt	gt
 8005a5e:	1a9b      	subgt	r3, r3, r2
 8005a60:	18ed      	addgt	r5, r5, r3
 8005a62:	2600      	movs	r6, #0
 8005a64:	341a      	adds	r4, #26
 8005a66:	42b5      	cmp	r5, r6
 8005a68:	d11a      	bne.n	8005aa0 <_printf_common+0xc8>
 8005a6a:	2000      	movs	r0, #0
 8005a6c:	e008      	b.n	8005a80 <_printf_common+0xa8>
 8005a6e:	2301      	movs	r3, #1
 8005a70:	4652      	mov	r2, sl
 8005a72:	4649      	mov	r1, r9
 8005a74:	4638      	mov	r0, r7
 8005a76:	47c0      	blx	r8
 8005a78:	3001      	adds	r0, #1
 8005a7a:	d103      	bne.n	8005a84 <_printf_common+0xac>
 8005a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a84:	3501      	adds	r5, #1
 8005a86:	e7c6      	b.n	8005a16 <_printf_common+0x3e>
 8005a88:	18e1      	adds	r1, r4, r3
 8005a8a:	1c5a      	adds	r2, r3, #1
 8005a8c:	2030      	movs	r0, #48	; 0x30
 8005a8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a92:	4422      	add	r2, r4
 8005a94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a9c:	3302      	adds	r3, #2
 8005a9e:	e7c7      	b.n	8005a30 <_printf_common+0x58>
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	4622      	mov	r2, r4
 8005aa4:	4649      	mov	r1, r9
 8005aa6:	4638      	mov	r0, r7
 8005aa8:	47c0      	blx	r8
 8005aaa:	3001      	adds	r0, #1
 8005aac:	d0e6      	beq.n	8005a7c <_printf_common+0xa4>
 8005aae:	3601      	adds	r6, #1
 8005ab0:	e7d9      	b.n	8005a66 <_printf_common+0x8e>
	...

08005ab4 <_printf_i>:
 8005ab4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ab8:	460c      	mov	r4, r1
 8005aba:	4691      	mov	r9, r2
 8005abc:	7e27      	ldrb	r7, [r4, #24]
 8005abe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005ac0:	2f78      	cmp	r7, #120	; 0x78
 8005ac2:	4680      	mov	r8, r0
 8005ac4:	469a      	mov	sl, r3
 8005ac6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005aca:	d807      	bhi.n	8005adc <_printf_i+0x28>
 8005acc:	2f62      	cmp	r7, #98	; 0x62
 8005ace:	d80a      	bhi.n	8005ae6 <_printf_i+0x32>
 8005ad0:	2f00      	cmp	r7, #0
 8005ad2:	f000 80d8 	beq.w	8005c86 <_printf_i+0x1d2>
 8005ad6:	2f58      	cmp	r7, #88	; 0x58
 8005ad8:	f000 80a3 	beq.w	8005c22 <_printf_i+0x16e>
 8005adc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005ae0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ae4:	e03a      	b.n	8005b5c <_printf_i+0xa8>
 8005ae6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005aea:	2b15      	cmp	r3, #21
 8005aec:	d8f6      	bhi.n	8005adc <_printf_i+0x28>
 8005aee:	a001      	add	r0, pc, #4	; (adr r0, 8005af4 <_printf_i+0x40>)
 8005af0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005af4:	08005b4d 	.word	0x08005b4d
 8005af8:	08005b61 	.word	0x08005b61
 8005afc:	08005add 	.word	0x08005add
 8005b00:	08005add 	.word	0x08005add
 8005b04:	08005add 	.word	0x08005add
 8005b08:	08005add 	.word	0x08005add
 8005b0c:	08005b61 	.word	0x08005b61
 8005b10:	08005add 	.word	0x08005add
 8005b14:	08005add 	.word	0x08005add
 8005b18:	08005add 	.word	0x08005add
 8005b1c:	08005add 	.word	0x08005add
 8005b20:	08005c6d 	.word	0x08005c6d
 8005b24:	08005b91 	.word	0x08005b91
 8005b28:	08005c4f 	.word	0x08005c4f
 8005b2c:	08005add 	.word	0x08005add
 8005b30:	08005add 	.word	0x08005add
 8005b34:	08005c8f 	.word	0x08005c8f
 8005b38:	08005add 	.word	0x08005add
 8005b3c:	08005b91 	.word	0x08005b91
 8005b40:	08005add 	.word	0x08005add
 8005b44:	08005add 	.word	0x08005add
 8005b48:	08005c57 	.word	0x08005c57
 8005b4c:	680b      	ldr	r3, [r1, #0]
 8005b4e:	1d1a      	adds	r2, r3, #4
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	600a      	str	r2, [r1, #0]
 8005b54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005b58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e0a3      	b.n	8005ca8 <_printf_i+0x1f4>
 8005b60:	6825      	ldr	r5, [r4, #0]
 8005b62:	6808      	ldr	r0, [r1, #0]
 8005b64:	062e      	lsls	r6, r5, #24
 8005b66:	f100 0304 	add.w	r3, r0, #4
 8005b6a:	d50a      	bpl.n	8005b82 <_printf_i+0xce>
 8005b6c:	6805      	ldr	r5, [r0, #0]
 8005b6e:	600b      	str	r3, [r1, #0]
 8005b70:	2d00      	cmp	r5, #0
 8005b72:	da03      	bge.n	8005b7c <_printf_i+0xc8>
 8005b74:	232d      	movs	r3, #45	; 0x2d
 8005b76:	426d      	negs	r5, r5
 8005b78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b7c:	485e      	ldr	r0, [pc, #376]	; (8005cf8 <_printf_i+0x244>)
 8005b7e:	230a      	movs	r3, #10
 8005b80:	e019      	b.n	8005bb6 <_printf_i+0x102>
 8005b82:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005b86:	6805      	ldr	r5, [r0, #0]
 8005b88:	600b      	str	r3, [r1, #0]
 8005b8a:	bf18      	it	ne
 8005b8c:	b22d      	sxthne	r5, r5
 8005b8e:	e7ef      	b.n	8005b70 <_printf_i+0xbc>
 8005b90:	680b      	ldr	r3, [r1, #0]
 8005b92:	6825      	ldr	r5, [r4, #0]
 8005b94:	1d18      	adds	r0, r3, #4
 8005b96:	6008      	str	r0, [r1, #0]
 8005b98:	0628      	lsls	r0, r5, #24
 8005b9a:	d501      	bpl.n	8005ba0 <_printf_i+0xec>
 8005b9c:	681d      	ldr	r5, [r3, #0]
 8005b9e:	e002      	b.n	8005ba6 <_printf_i+0xf2>
 8005ba0:	0669      	lsls	r1, r5, #25
 8005ba2:	d5fb      	bpl.n	8005b9c <_printf_i+0xe8>
 8005ba4:	881d      	ldrh	r5, [r3, #0]
 8005ba6:	4854      	ldr	r0, [pc, #336]	; (8005cf8 <_printf_i+0x244>)
 8005ba8:	2f6f      	cmp	r7, #111	; 0x6f
 8005baa:	bf0c      	ite	eq
 8005bac:	2308      	moveq	r3, #8
 8005bae:	230a      	movne	r3, #10
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bb6:	6866      	ldr	r6, [r4, #4]
 8005bb8:	60a6      	str	r6, [r4, #8]
 8005bba:	2e00      	cmp	r6, #0
 8005bbc:	bfa2      	ittt	ge
 8005bbe:	6821      	ldrge	r1, [r4, #0]
 8005bc0:	f021 0104 	bicge.w	r1, r1, #4
 8005bc4:	6021      	strge	r1, [r4, #0]
 8005bc6:	b90d      	cbnz	r5, 8005bcc <_printf_i+0x118>
 8005bc8:	2e00      	cmp	r6, #0
 8005bca:	d04d      	beq.n	8005c68 <_printf_i+0x1b4>
 8005bcc:	4616      	mov	r6, r2
 8005bce:	fbb5 f1f3 	udiv	r1, r5, r3
 8005bd2:	fb03 5711 	mls	r7, r3, r1, r5
 8005bd6:	5dc7      	ldrb	r7, [r0, r7]
 8005bd8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005bdc:	462f      	mov	r7, r5
 8005bde:	42bb      	cmp	r3, r7
 8005be0:	460d      	mov	r5, r1
 8005be2:	d9f4      	bls.n	8005bce <_printf_i+0x11a>
 8005be4:	2b08      	cmp	r3, #8
 8005be6:	d10b      	bne.n	8005c00 <_printf_i+0x14c>
 8005be8:	6823      	ldr	r3, [r4, #0]
 8005bea:	07df      	lsls	r7, r3, #31
 8005bec:	d508      	bpl.n	8005c00 <_printf_i+0x14c>
 8005bee:	6923      	ldr	r3, [r4, #16]
 8005bf0:	6861      	ldr	r1, [r4, #4]
 8005bf2:	4299      	cmp	r1, r3
 8005bf4:	bfde      	ittt	le
 8005bf6:	2330      	movle	r3, #48	; 0x30
 8005bf8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005bfc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c00:	1b92      	subs	r2, r2, r6
 8005c02:	6122      	str	r2, [r4, #16]
 8005c04:	f8cd a000 	str.w	sl, [sp]
 8005c08:	464b      	mov	r3, r9
 8005c0a:	aa03      	add	r2, sp, #12
 8005c0c:	4621      	mov	r1, r4
 8005c0e:	4640      	mov	r0, r8
 8005c10:	f7ff fee2 	bl	80059d8 <_printf_common>
 8005c14:	3001      	adds	r0, #1
 8005c16:	d14c      	bne.n	8005cb2 <_printf_i+0x1fe>
 8005c18:	f04f 30ff 	mov.w	r0, #4294967295
 8005c1c:	b004      	add	sp, #16
 8005c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c22:	4835      	ldr	r0, [pc, #212]	; (8005cf8 <_printf_i+0x244>)
 8005c24:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005c28:	6823      	ldr	r3, [r4, #0]
 8005c2a:	680e      	ldr	r6, [r1, #0]
 8005c2c:	061f      	lsls	r7, r3, #24
 8005c2e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005c32:	600e      	str	r6, [r1, #0]
 8005c34:	d514      	bpl.n	8005c60 <_printf_i+0x1ac>
 8005c36:	07d9      	lsls	r1, r3, #31
 8005c38:	bf44      	itt	mi
 8005c3a:	f043 0320 	orrmi.w	r3, r3, #32
 8005c3e:	6023      	strmi	r3, [r4, #0]
 8005c40:	b91d      	cbnz	r5, 8005c4a <_printf_i+0x196>
 8005c42:	6823      	ldr	r3, [r4, #0]
 8005c44:	f023 0320 	bic.w	r3, r3, #32
 8005c48:	6023      	str	r3, [r4, #0]
 8005c4a:	2310      	movs	r3, #16
 8005c4c:	e7b0      	b.n	8005bb0 <_printf_i+0xfc>
 8005c4e:	6823      	ldr	r3, [r4, #0]
 8005c50:	f043 0320 	orr.w	r3, r3, #32
 8005c54:	6023      	str	r3, [r4, #0]
 8005c56:	2378      	movs	r3, #120	; 0x78
 8005c58:	4828      	ldr	r0, [pc, #160]	; (8005cfc <_printf_i+0x248>)
 8005c5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c5e:	e7e3      	b.n	8005c28 <_printf_i+0x174>
 8005c60:	065e      	lsls	r6, r3, #25
 8005c62:	bf48      	it	mi
 8005c64:	b2ad      	uxthmi	r5, r5
 8005c66:	e7e6      	b.n	8005c36 <_printf_i+0x182>
 8005c68:	4616      	mov	r6, r2
 8005c6a:	e7bb      	b.n	8005be4 <_printf_i+0x130>
 8005c6c:	680b      	ldr	r3, [r1, #0]
 8005c6e:	6826      	ldr	r6, [r4, #0]
 8005c70:	6960      	ldr	r0, [r4, #20]
 8005c72:	1d1d      	adds	r5, r3, #4
 8005c74:	600d      	str	r5, [r1, #0]
 8005c76:	0635      	lsls	r5, r6, #24
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	d501      	bpl.n	8005c80 <_printf_i+0x1cc>
 8005c7c:	6018      	str	r0, [r3, #0]
 8005c7e:	e002      	b.n	8005c86 <_printf_i+0x1d2>
 8005c80:	0671      	lsls	r1, r6, #25
 8005c82:	d5fb      	bpl.n	8005c7c <_printf_i+0x1c8>
 8005c84:	8018      	strh	r0, [r3, #0]
 8005c86:	2300      	movs	r3, #0
 8005c88:	6123      	str	r3, [r4, #16]
 8005c8a:	4616      	mov	r6, r2
 8005c8c:	e7ba      	b.n	8005c04 <_printf_i+0x150>
 8005c8e:	680b      	ldr	r3, [r1, #0]
 8005c90:	1d1a      	adds	r2, r3, #4
 8005c92:	600a      	str	r2, [r1, #0]
 8005c94:	681e      	ldr	r6, [r3, #0]
 8005c96:	6862      	ldr	r2, [r4, #4]
 8005c98:	2100      	movs	r1, #0
 8005c9a:	4630      	mov	r0, r6
 8005c9c:	f7fa faa0 	bl	80001e0 <memchr>
 8005ca0:	b108      	cbz	r0, 8005ca6 <_printf_i+0x1f2>
 8005ca2:	1b80      	subs	r0, r0, r6
 8005ca4:	6060      	str	r0, [r4, #4]
 8005ca6:	6863      	ldr	r3, [r4, #4]
 8005ca8:	6123      	str	r3, [r4, #16]
 8005caa:	2300      	movs	r3, #0
 8005cac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cb0:	e7a8      	b.n	8005c04 <_printf_i+0x150>
 8005cb2:	6923      	ldr	r3, [r4, #16]
 8005cb4:	4632      	mov	r2, r6
 8005cb6:	4649      	mov	r1, r9
 8005cb8:	4640      	mov	r0, r8
 8005cba:	47d0      	blx	sl
 8005cbc:	3001      	adds	r0, #1
 8005cbe:	d0ab      	beq.n	8005c18 <_printf_i+0x164>
 8005cc0:	6823      	ldr	r3, [r4, #0]
 8005cc2:	079b      	lsls	r3, r3, #30
 8005cc4:	d413      	bmi.n	8005cee <_printf_i+0x23a>
 8005cc6:	68e0      	ldr	r0, [r4, #12]
 8005cc8:	9b03      	ldr	r3, [sp, #12]
 8005cca:	4298      	cmp	r0, r3
 8005ccc:	bfb8      	it	lt
 8005cce:	4618      	movlt	r0, r3
 8005cd0:	e7a4      	b.n	8005c1c <_printf_i+0x168>
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	4632      	mov	r2, r6
 8005cd6:	4649      	mov	r1, r9
 8005cd8:	4640      	mov	r0, r8
 8005cda:	47d0      	blx	sl
 8005cdc:	3001      	adds	r0, #1
 8005cde:	d09b      	beq.n	8005c18 <_printf_i+0x164>
 8005ce0:	3501      	adds	r5, #1
 8005ce2:	68e3      	ldr	r3, [r4, #12]
 8005ce4:	9903      	ldr	r1, [sp, #12]
 8005ce6:	1a5b      	subs	r3, r3, r1
 8005ce8:	42ab      	cmp	r3, r5
 8005cea:	dcf2      	bgt.n	8005cd2 <_printf_i+0x21e>
 8005cec:	e7eb      	b.n	8005cc6 <_printf_i+0x212>
 8005cee:	2500      	movs	r5, #0
 8005cf0:	f104 0619 	add.w	r6, r4, #25
 8005cf4:	e7f5      	b.n	8005ce2 <_printf_i+0x22e>
 8005cf6:	bf00      	nop
 8005cf8:	0800a01e 	.word	0x0800a01e
 8005cfc:	0800a02f 	.word	0x0800a02f

08005d00 <_scanf_float>:
 8005d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d04:	b087      	sub	sp, #28
 8005d06:	4617      	mov	r7, r2
 8005d08:	9303      	str	r3, [sp, #12]
 8005d0a:	688b      	ldr	r3, [r1, #8]
 8005d0c:	1e5a      	subs	r2, r3, #1
 8005d0e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005d12:	bf83      	ittte	hi
 8005d14:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005d18:	195b      	addhi	r3, r3, r5
 8005d1a:	9302      	strhi	r3, [sp, #8]
 8005d1c:	2300      	movls	r3, #0
 8005d1e:	bf86      	itte	hi
 8005d20:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005d24:	608b      	strhi	r3, [r1, #8]
 8005d26:	9302      	strls	r3, [sp, #8]
 8005d28:	680b      	ldr	r3, [r1, #0]
 8005d2a:	468b      	mov	fp, r1
 8005d2c:	2500      	movs	r5, #0
 8005d2e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005d32:	f84b 3b1c 	str.w	r3, [fp], #28
 8005d36:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005d3a:	4680      	mov	r8, r0
 8005d3c:	460c      	mov	r4, r1
 8005d3e:	465e      	mov	r6, fp
 8005d40:	46aa      	mov	sl, r5
 8005d42:	46a9      	mov	r9, r5
 8005d44:	9501      	str	r5, [sp, #4]
 8005d46:	68a2      	ldr	r2, [r4, #8]
 8005d48:	b152      	cbz	r2, 8005d60 <_scanf_float+0x60>
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	2b4e      	cmp	r3, #78	; 0x4e
 8005d50:	d864      	bhi.n	8005e1c <_scanf_float+0x11c>
 8005d52:	2b40      	cmp	r3, #64	; 0x40
 8005d54:	d83c      	bhi.n	8005dd0 <_scanf_float+0xd0>
 8005d56:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005d5a:	b2c8      	uxtb	r0, r1
 8005d5c:	280e      	cmp	r0, #14
 8005d5e:	d93a      	bls.n	8005dd6 <_scanf_float+0xd6>
 8005d60:	f1b9 0f00 	cmp.w	r9, #0
 8005d64:	d003      	beq.n	8005d6e <_scanf_float+0x6e>
 8005d66:	6823      	ldr	r3, [r4, #0]
 8005d68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d6c:	6023      	str	r3, [r4, #0]
 8005d6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d72:	f1ba 0f01 	cmp.w	sl, #1
 8005d76:	f200 8113 	bhi.w	8005fa0 <_scanf_float+0x2a0>
 8005d7a:	455e      	cmp	r6, fp
 8005d7c:	f200 8105 	bhi.w	8005f8a <_scanf_float+0x28a>
 8005d80:	2501      	movs	r5, #1
 8005d82:	4628      	mov	r0, r5
 8005d84:	b007      	add	sp, #28
 8005d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d8a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005d8e:	2a0d      	cmp	r2, #13
 8005d90:	d8e6      	bhi.n	8005d60 <_scanf_float+0x60>
 8005d92:	a101      	add	r1, pc, #4	; (adr r1, 8005d98 <_scanf_float+0x98>)
 8005d94:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005d98:	08005ed7 	.word	0x08005ed7
 8005d9c:	08005d61 	.word	0x08005d61
 8005da0:	08005d61 	.word	0x08005d61
 8005da4:	08005d61 	.word	0x08005d61
 8005da8:	08005f37 	.word	0x08005f37
 8005dac:	08005f0f 	.word	0x08005f0f
 8005db0:	08005d61 	.word	0x08005d61
 8005db4:	08005d61 	.word	0x08005d61
 8005db8:	08005ee5 	.word	0x08005ee5
 8005dbc:	08005d61 	.word	0x08005d61
 8005dc0:	08005d61 	.word	0x08005d61
 8005dc4:	08005d61 	.word	0x08005d61
 8005dc8:	08005d61 	.word	0x08005d61
 8005dcc:	08005e9d 	.word	0x08005e9d
 8005dd0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005dd4:	e7db      	b.n	8005d8e <_scanf_float+0x8e>
 8005dd6:	290e      	cmp	r1, #14
 8005dd8:	d8c2      	bhi.n	8005d60 <_scanf_float+0x60>
 8005dda:	a001      	add	r0, pc, #4	; (adr r0, 8005de0 <_scanf_float+0xe0>)
 8005ddc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005de0:	08005e8f 	.word	0x08005e8f
 8005de4:	08005d61 	.word	0x08005d61
 8005de8:	08005e8f 	.word	0x08005e8f
 8005dec:	08005f23 	.word	0x08005f23
 8005df0:	08005d61 	.word	0x08005d61
 8005df4:	08005e3d 	.word	0x08005e3d
 8005df8:	08005e79 	.word	0x08005e79
 8005dfc:	08005e79 	.word	0x08005e79
 8005e00:	08005e79 	.word	0x08005e79
 8005e04:	08005e79 	.word	0x08005e79
 8005e08:	08005e79 	.word	0x08005e79
 8005e0c:	08005e79 	.word	0x08005e79
 8005e10:	08005e79 	.word	0x08005e79
 8005e14:	08005e79 	.word	0x08005e79
 8005e18:	08005e79 	.word	0x08005e79
 8005e1c:	2b6e      	cmp	r3, #110	; 0x6e
 8005e1e:	d809      	bhi.n	8005e34 <_scanf_float+0x134>
 8005e20:	2b60      	cmp	r3, #96	; 0x60
 8005e22:	d8b2      	bhi.n	8005d8a <_scanf_float+0x8a>
 8005e24:	2b54      	cmp	r3, #84	; 0x54
 8005e26:	d077      	beq.n	8005f18 <_scanf_float+0x218>
 8005e28:	2b59      	cmp	r3, #89	; 0x59
 8005e2a:	d199      	bne.n	8005d60 <_scanf_float+0x60>
 8005e2c:	2d07      	cmp	r5, #7
 8005e2e:	d197      	bne.n	8005d60 <_scanf_float+0x60>
 8005e30:	2508      	movs	r5, #8
 8005e32:	e029      	b.n	8005e88 <_scanf_float+0x188>
 8005e34:	2b74      	cmp	r3, #116	; 0x74
 8005e36:	d06f      	beq.n	8005f18 <_scanf_float+0x218>
 8005e38:	2b79      	cmp	r3, #121	; 0x79
 8005e3a:	e7f6      	b.n	8005e2a <_scanf_float+0x12a>
 8005e3c:	6821      	ldr	r1, [r4, #0]
 8005e3e:	05c8      	lsls	r0, r1, #23
 8005e40:	d51a      	bpl.n	8005e78 <_scanf_float+0x178>
 8005e42:	9b02      	ldr	r3, [sp, #8]
 8005e44:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005e48:	6021      	str	r1, [r4, #0]
 8005e4a:	f109 0901 	add.w	r9, r9, #1
 8005e4e:	b11b      	cbz	r3, 8005e58 <_scanf_float+0x158>
 8005e50:	3b01      	subs	r3, #1
 8005e52:	3201      	adds	r2, #1
 8005e54:	9302      	str	r3, [sp, #8]
 8005e56:	60a2      	str	r2, [r4, #8]
 8005e58:	68a3      	ldr	r3, [r4, #8]
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	60a3      	str	r3, [r4, #8]
 8005e5e:	6923      	ldr	r3, [r4, #16]
 8005e60:	3301      	adds	r3, #1
 8005e62:	6123      	str	r3, [r4, #16]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	3b01      	subs	r3, #1
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	607b      	str	r3, [r7, #4]
 8005e6c:	f340 8084 	ble.w	8005f78 <_scanf_float+0x278>
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	3301      	adds	r3, #1
 8005e74:	603b      	str	r3, [r7, #0]
 8005e76:	e766      	b.n	8005d46 <_scanf_float+0x46>
 8005e78:	eb1a 0f05 	cmn.w	sl, r5
 8005e7c:	f47f af70 	bne.w	8005d60 <_scanf_float+0x60>
 8005e80:	6822      	ldr	r2, [r4, #0]
 8005e82:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005e86:	6022      	str	r2, [r4, #0]
 8005e88:	f806 3b01 	strb.w	r3, [r6], #1
 8005e8c:	e7e4      	b.n	8005e58 <_scanf_float+0x158>
 8005e8e:	6822      	ldr	r2, [r4, #0]
 8005e90:	0610      	lsls	r0, r2, #24
 8005e92:	f57f af65 	bpl.w	8005d60 <_scanf_float+0x60>
 8005e96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e9a:	e7f4      	b.n	8005e86 <_scanf_float+0x186>
 8005e9c:	f1ba 0f00 	cmp.w	sl, #0
 8005ea0:	d10e      	bne.n	8005ec0 <_scanf_float+0x1c0>
 8005ea2:	f1b9 0f00 	cmp.w	r9, #0
 8005ea6:	d10e      	bne.n	8005ec6 <_scanf_float+0x1c6>
 8005ea8:	6822      	ldr	r2, [r4, #0]
 8005eaa:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005eae:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005eb2:	d108      	bne.n	8005ec6 <_scanf_float+0x1c6>
 8005eb4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005eb8:	6022      	str	r2, [r4, #0]
 8005eba:	f04f 0a01 	mov.w	sl, #1
 8005ebe:	e7e3      	b.n	8005e88 <_scanf_float+0x188>
 8005ec0:	f1ba 0f02 	cmp.w	sl, #2
 8005ec4:	d055      	beq.n	8005f72 <_scanf_float+0x272>
 8005ec6:	2d01      	cmp	r5, #1
 8005ec8:	d002      	beq.n	8005ed0 <_scanf_float+0x1d0>
 8005eca:	2d04      	cmp	r5, #4
 8005ecc:	f47f af48 	bne.w	8005d60 <_scanf_float+0x60>
 8005ed0:	3501      	adds	r5, #1
 8005ed2:	b2ed      	uxtb	r5, r5
 8005ed4:	e7d8      	b.n	8005e88 <_scanf_float+0x188>
 8005ed6:	f1ba 0f01 	cmp.w	sl, #1
 8005eda:	f47f af41 	bne.w	8005d60 <_scanf_float+0x60>
 8005ede:	f04f 0a02 	mov.w	sl, #2
 8005ee2:	e7d1      	b.n	8005e88 <_scanf_float+0x188>
 8005ee4:	b97d      	cbnz	r5, 8005f06 <_scanf_float+0x206>
 8005ee6:	f1b9 0f00 	cmp.w	r9, #0
 8005eea:	f47f af3c 	bne.w	8005d66 <_scanf_float+0x66>
 8005eee:	6822      	ldr	r2, [r4, #0]
 8005ef0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005ef4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005ef8:	f47f af39 	bne.w	8005d6e <_scanf_float+0x6e>
 8005efc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005f00:	6022      	str	r2, [r4, #0]
 8005f02:	2501      	movs	r5, #1
 8005f04:	e7c0      	b.n	8005e88 <_scanf_float+0x188>
 8005f06:	2d03      	cmp	r5, #3
 8005f08:	d0e2      	beq.n	8005ed0 <_scanf_float+0x1d0>
 8005f0a:	2d05      	cmp	r5, #5
 8005f0c:	e7de      	b.n	8005ecc <_scanf_float+0x1cc>
 8005f0e:	2d02      	cmp	r5, #2
 8005f10:	f47f af26 	bne.w	8005d60 <_scanf_float+0x60>
 8005f14:	2503      	movs	r5, #3
 8005f16:	e7b7      	b.n	8005e88 <_scanf_float+0x188>
 8005f18:	2d06      	cmp	r5, #6
 8005f1a:	f47f af21 	bne.w	8005d60 <_scanf_float+0x60>
 8005f1e:	2507      	movs	r5, #7
 8005f20:	e7b2      	b.n	8005e88 <_scanf_float+0x188>
 8005f22:	6822      	ldr	r2, [r4, #0]
 8005f24:	0591      	lsls	r1, r2, #22
 8005f26:	f57f af1b 	bpl.w	8005d60 <_scanf_float+0x60>
 8005f2a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005f2e:	6022      	str	r2, [r4, #0]
 8005f30:	f8cd 9004 	str.w	r9, [sp, #4]
 8005f34:	e7a8      	b.n	8005e88 <_scanf_float+0x188>
 8005f36:	6822      	ldr	r2, [r4, #0]
 8005f38:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005f3c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005f40:	d006      	beq.n	8005f50 <_scanf_float+0x250>
 8005f42:	0550      	lsls	r0, r2, #21
 8005f44:	f57f af0c 	bpl.w	8005d60 <_scanf_float+0x60>
 8005f48:	f1b9 0f00 	cmp.w	r9, #0
 8005f4c:	f43f af0f 	beq.w	8005d6e <_scanf_float+0x6e>
 8005f50:	0591      	lsls	r1, r2, #22
 8005f52:	bf58      	it	pl
 8005f54:	9901      	ldrpl	r1, [sp, #4]
 8005f56:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005f5a:	bf58      	it	pl
 8005f5c:	eba9 0101 	subpl.w	r1, r9, r1
 8005f60:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005f64:	bf58      	it	pl
 8005f66:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005f6a:	6022      	str	r2, [r4, #0]
 8005f6c:	f04f 0900 	mov.w	r9, #0
 8005f70:	e78a      	b.n	8005e88 <_scanf_float+0x188>
 8005f72:	f04f 0a03 	mov.w	sl, #3
 8005f76:	e787      	b.n	8005e88 <_scanf_float+0x188>
 8005f78:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005f7c:	4639      	mov	r1, r7
 8005f7e:	4640      	mov	r0, r8
 8005f80:	4798      	blx	r3
 8005f82:	2800      	cmp	r0, #0
 8005f84:	f43f aedf 	beq.w	8005d46 <_scanf_float+0x46>
 8005f88:	e6ea      	b.n	8005d60 <_scanf_float+0x60>
 8005f8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f92:	463a      	mov	r2, r7
 8005f94:	4640      	mov	r0, r8
 8005f96:	4798      	blx	r3
 8005f98:	6923      	ldr	r3, [r4, #16]
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	6123      	str	r3, [r4, #16]
 8005f9e:	e6ec      	b.n	8005d7a <_scanf_float+0x7a>
 8005fa0:	1e6b      	subs	r3, r5, #1
 8005fa2:	2b06      	cmp	r3, #6
 8005fa4:	d825      	bhi.n	8005ff2 <_scanf_float+0x2f2>
 8005fa6:	2d02      	cmp	r5, #2
 8005fa8:	d836      	bhi.n	8006018 <_scanf_float+0x318>
 8005faa:	455e      	cmp	r6, fp
 8005fac:	f67f aee8 	bls.w	8005d80 <_scanf_float+0x80>
 8005fb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005fb4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005fb8:	463a      	mov	r2, r7
 8005fba:	4640      	mov	r0, r8
 8005fbc:	4798      	blx	r3
 8005fbe:	6923      	ldr	r3, [r4, #16]
 8005fc0:	3b01      	subs	r3, #1
 8005fc2:	6123      	str	r3, [r4, #16]
 8005fc4:	e7f1      	b.n	8005faa <_scanf_float+0x2aa>
 8005fc6:	9802      	ldr	r0, [sp, #8]
 8005fc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005fcc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005fd0:	9002      	str	r0, [sp, #8]
 8005fd2:	463a      	mov	r2, r7
 8005fd4:	4640      	mov	r0, r8
 8005fd6:	4798      	blx	r3
 8005fd8:	6923      	ldr	r3, [r4, #16]
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	6123      	str	r3, [r4, #16]
 8005fde:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005fe2:	fa5f fa8a 	uxtb.w	sl, sl
 8005fe6:	f1ba 0f02 	cmp.w	sl, #2
 8005fea:	d1ec      	bne.n	8005fc6 <_scanf_float+0x2c6>
 8005fec:	3d03      	subs	r5, #3
 8005fee:	b2ed      	uxtb	r5, r5
 8005ff0:	1b76      	subs	r6, r6, r5
 8005ff2:	6823      	ldr	r3, [r4, #0]
 8005ff4:	05da      	lsls	r2, r3, #23
 8005ff6:	d52f      	bpl.n	8006058 <_scanf_float+0x358>
 8005ff8:	055b      	lsls	r3, r3, #21
 8005ffa:	d510      	bpl.n	800601e <_scanf_float+0x31e>
 8005ffc:	455e      	cmp	r6, fp
 8005ffe:	f67f aebf 	bls.w	8005d80 <_scanf_float+0x80>
 8006002:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006006:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800600a:	463a      	mov	r2, r7
 800600c:	4640      	mov	r0, r8
 800600e:	4798      	blx	r3
 8006010:	6923      	ldr	r3, [r4, #16]
 8006012:	3b01      	subs	r3, #1
 8006014:	6123      	str	r3, [r4, #16]
 8006016:	e7f1      	b.n	8005ffc <_scanf_float+0x2fc>
 8006018:	46aa      	mov	sl, r5
 800601a:	9602      	str	r6, [sp, #8]
 800601c:	e7df      	b.n	8005fde <_scanf_float+0x2de>
 800601e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006022:	6923      	ldr	r3, [r4, #16]
 8006024:	2965      	cmp	r1, #101	; 0x65
 8006026:	f103 33ff 	add.w	r3, r3, #4294967295
 800602a:	f106 35ff 	add.w	r5, r6, #4294967295
 800602e:	6123      	str	r3, [r4, #16]
 8006030:	d00c      	beq.n	800604c <_scanf_float+0x34c>
 8006032:	2945      	cmp	r1, #69	; 0x45
 8006034:	d00a      	beq.n	800604c <_scanf_float+0x34c>
 8006036:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800603a:	463a      	mov	r2, r7
 800603c:	4640      	mov	r0, r8
 800603e:	4798      	blx	r3
 8006040:	6923      	ldr	r3, [r4, #16]
 8006042:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006046:	3b01      	subs	r3, #1
 8006048:	1eb5      	subs	r5, r6, #2
 800604a:	6123      	str	r3, [r4, #16]
 800604c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006050:	463a      	mov	r2, r7
 8006052:	4640      	mov	r0, r8
 8006054:	4798      	blx	r3
 8006056:	462e      	mov	r6, r5
 8006058:	6825      	ldr	r5, [r4, #0]
 800605a:	f015 0510 	ands.w	r5, r5, #16
 800605e:	d158      	bne.n	8006112 <_scanf_float+0x412>
 8006060:	7035      	strb	r5, [r6, #0]
 8006062:	6823      	ldr	r3, [r4, #0]
 8006064:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006068:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800606c:	d11c      	bne.n	80060a8 <_scanf_float+0x3a8>
 800606e:	9b01      	ldr	r3, [sp, #4]
 8006070:	454b      	cmp	r3, r9
 8006072:	eba3 0209 	sub.w	r2, r3, r9
 8006076:	d124      	bne.n	80060c2 <_scanf_float+0x3c2>
 8006078:	2200      	movs	r2, #0
 800607a:	4659      	mov	r1, fp
 800607c:	4640      	mov	r0, r8
 800607e:	f001 f809 	bl	8007094 <_strtod_r>
 8006082:	9b03      	ldr	r3, [sp, #12]
 8006084:	6821      	ldr	r1, [r4, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f011 0f02 	tst.w	r1, #2
 800608c:	ec57 6b10 	vmov	r6, r7, d0
 8006090:	f103 0204 	add.w	r2, r3, #4
 8006094:	d020      	beq.n	80060d8 <_scanf_float+0x3d8>
 8006096:	9903      	ldr	r1, [sp, #12]
 8006098:	600a      	str	r2, [r1, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	e9c3 6700 	strd	r6, r7, [r3]
 80060a0:	68e3      	ldr	r3, [r4, #12]
 80060a2:	3301      	adds	r3, #1
 80060a4:	60e3      	str	r3, [r4, #12]
 80060a6:	e66c      	b.n	8005d82 <_scanf_float+0x82>
 80060a8:	9b04      	ldr	r3, [sp, #16]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d0e4      	beq.n	8006078 <_scanf_float+0x378>
 80060ae:	9905      	ldr	r1, [sp, #20]
 80060b0:	230a      	movs	r3, #10
 80060b2:	462a      	mov	r2, r5
 80060b4:	3101      	adds	r1, #1
 80060b6:	4640      	mov	r0, r8
 80060b8:	f001 f876 	bl	80071a8 <_strtol_r>
 80060bc:	9b04      	ldr	r3, [sp, #16]
 80060be:	9e05      	ldr	r6, [sp, #20]
 80060c0:	1ac2      	subs	r2, r0, r3
 80060c2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80060c6:	429e      	cmp	r6, r3
 80060c8:	bf28      	it	cs
 80060ca:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80060ce:	4912      	ldr	r1, [pc, #72]	; (8006118 <_scanf_float+0x418>)
 80060d0:	4630      	mov	r0, r6
 80060d2:	f000 f997 	bl	8006404 <siprintf>
 80060d6:	e7cf      	b.n	8006078 <_scanf_float+0x378>
 80060d8:	f011 0f04 	tst.w	r1, #4
 80060dc:	9903      	ldr	r1, [sp, #12]
 80060de:	600a      	str	r2, [r1, #0]
 80060e0:	d1db      	bne.n	800609a <_scanf_float+0x39a>
 80060e2:	f8d3 8000 	ldr.w	r8, [r3]
 80060e6:	ee10 2a10 	vmov	r2, s0
 80060ea:	ee10 0a10 	vmov	r0, s0
 80060ee:	463b      	mov	r3, r7
 80060f0:	4639      	mov	r1, r7
 80060f2:	f7fa fd1b 	bl	8000b2c <__aeabi_dcmpun>
 80060f6:	b128      	cbz	r0, 8006104 <_scanf_float+0x404>
 80060f8:	4808      	ldr	r0, [pc, #32]	; (800611c <_scanf_float+0x41c>)
 80060fa:	f000 f97d 	bl	80063f8 <nanf>
 80060fe:	ed88 0a00 	vstr	s0, [r8]
 8006102:	e7cd      	b.n	80060a0 <_scanf_float+0x3a0>
 8006104:	4630      	mov	r0, r6
 8006106:	4639      	mov	r1, r7
 8006108:	f7fa fd6e 	bl	8000be8 <__aeabi_d2f>
 800610c:	f8c8 0000 	str.w	r0, [r8]
 8006110:	e7c6      	b.n	80060a0 <_scanf_float+0x3a0>
 8006112:	2500      	movs	r5, #0
 8006114:	e635      	b.n	8005d82 <_scanf_float+0x82>
 8006116:	bf00      	nop
 8006118:	0800a040 	.word	0x0800a040
 800611c:	0800a4b8 	.word	0x0800a4b8

08006120 <iprintf>:
 8006120:	b40f      	push	{r0, r1, r2, r3}
 8006122:	4b0a      	ldr	r3, [pc, #40]	; (800614c <iprintf+0x2c>)
 8006124:	b513      	push	{r0, r1, r4, lr}
 8006126:	681c      	ldr	r4, [r3, #0]
 8006128:	b124      	cbz	r4, 8006134 <iprintf+0x14>
 800612a:	69a3      	ldr	r3, [r4, #24]
 800612c:	b913      	cbnz	r3, 8006134 <iprintf+0x14>
 800612e:	4620      	mov	r0, r4
 8006130:	f002 f890 	bl	8008254 <__sinit>
 8006134:	ab05      	add	r3, sp, #20
 8006136:	9a04      	ldr	r2, [sp, #16]
 8006138:	68a1      	ldr	r1, [r4, #8]
 800613a:	9301      	str	r3, [sp, #4]
 800613c:	4620      	mov	r0, r4
 800613e:	f003 fb5f 	bl	8009800 <_vfiprintf_r>
 8006142:	b002      	add	sp, #8
 8006144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006148:	b004      	add	sp, #16
 800614a:	4770      	bx	lr
 800614c:	20000024 	.word	0x20000024

08006150 <_puts_r>:
 8006150:	b570      	push	{r4, r5, r6, lr}
 8006152:	460e      	mov	r6, r1
 8006154:	4605      	mov	r5, r0
 8006156:	b118      	cbz	r0, 8006160 <_puts_r+0x10>
 8006158:	6983      	ldr	r3, [r0, #24]
 800615a:	b90b      	cbnz	r3, 8006160 <_puts_r+0x10>
 800615c:	f002 f87a 	bl	8008254 <__sinit>
 8006160:	69ab      	ldr	r3, [r5, #24]
 8006162:	68ac      	ldr	r4, [r5, #8]
 8006164:	b913      	cbnz	r3, 800616c <_puts_r+0x1c>
 8006166:	4628      	mov	r0, r5
 8006168:	f002 f874 	bl	8008254 <__sinit>
 800616c:	4b2c      	ldr	r3, [pc, #176]	; (8006220 <_puts_r+0xd0>)
 800616e:	429c      	cmp	r4, r3
 8006170:	d120      	bne.n	80061b4 <_puts_r+0x64>
 8006172:	686c      	ldr	r4, [r5, #4]
 8006174:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006176:	07db      	lsls	r3, r3, #31
 8006178:	d405      	bmi.n	8006186 <_puts_r+0x36>
 800617a:	89a3      	ldrh	r3, [r4, #12]
 800617c:	0598      	lsls	r0, r3, #22
 800617e:	d402      	bmi.n	8006186 <_puts_r+0x36>
 8006180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006182:	f002 fc78 	bl	8008a76 <__retarget_lock_acquire_recursive>
 8006186:	89a3      	ldrh	r3, [r4, #12]
 8006188:	0719      	lsls	r1, r3, #28
 800618a:	d51d      	bpl.n	80061c8 <_puts_r+0x78>
 800618c:	6923      	ldr	r3, [r4, #16]
 800618e:	b1db      	cbz	r3, 80061c8 <_puts_r+0x78>
 8006190:	3e01      	subs	r6, #1
 8006192:	68a3      	ldr	r3, [r4, #8]
 8006194:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006198:	3b01      	subs	r3, #1
 800619a:	60a3      	str	r3, [r4, #8]
 800619c:	bb39      	cbnz	r1, 80061ee <_puts_r+0x9e>
 800619e:	2b00      	cmp	r3, #0
 80061a0:	da38      	bge.n	8006214 <_puts_r+0xc4>
 80061a2:	4622      	mov	r2, r4
 80061a4:	210a      	movs	r1, #10
 80061a6:	4628      	mov	r0, r5
 80061a8:	f001 f800 	bl	80071ac <__swbuf_r>
 80061ac:	3001      	adds	r0, #1
 80061ae:	d011      	beq.n	80061d4 <_puts_r+0x84>
 80061b0:	250a      	movs	r5, #10
 80061b2:	e011      	b.n	80061d8 <_puts_r+0x88>
 80061b4:	4b1b      	ldr	r3, [pc, #108]	; (8006224 <_puts_r+0xd4>)
 80061b6:	429c      	cmp	r4, r3
 80061b8:	d101      	bne.n	80061be <_puts_r+0x6e>
 80061ba:	68ac      	ldr	r4, [r5, #8]
 80061bc:	e7da      	b.n	8006174 <_puts_r+0x24>
 80061be:	4b1a      	ldr	r3, [pc, #104]	; (8006228 <_puts_r+0xd8>)
 80061c0:	429c      	cmp	r4, r3
 80061c2:	bf08      	it	eq
 80061c4:	68ec      	ldreq	r4, [r5, #12]
 80061c6:	e7d5      	b.n	8006174 <_puts_r+0x24>
 80061c8:	4621      	mov	r1, r4
 80061ca:	4628      	mov	r0, r5
 80061cc:	f001 f840 	bl	8007250 <__swsetup_r>
 80061d0:	2800      	cmp	r0, #0
 80061d2:	d0dd      	beq.n	8006190 <_puts_r+0x40>
 80061d4:	f04f 35ff 	mov.w	r5, #4294967295
 80061d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061da:	07da      	lsls	r2, r3, #31
 80061dc:	d405      	bmi.n	80061ea <_puts_r+0x9a>
 80061de:	89a3      	ldrh	r3, [r4, #12]
 80061e0:	059b      	lsls	r3, r3, #22
 80061e2:	d402      	bmi.n	80061ea <_puts_r+0x9a>
 80061e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061e6:	f002 fc47 	bl	8008a78 <__retarget_lock_release_recursive>
 80061ea:	4628      	mov	r0, r5
 80061ec:	bd70      	pop	{r4, r5, r6, pc}
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	da04      	bge.n	80061fc <_puts_r+0xac>
 80061f2:	69a2      	ldr	r2, [r4, #24]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	dc06      	bgt.n	8006206 <_puts_r+0xb6>
 80061f8:	290a      	cmp	r1, #10
 80061fa:	d004      	beq.n	8006206 <_puts_r+0xb6>
 80061fc:	6823      	ldr	r3, [r4, #0]
 80061fe:	1c5a      	adds	r2, r3, #1
 8006200:	6022      	str	r2, [r4, #0]
 8006202:	7019      	strb	r1, [r3, #0]
 8006204:	e7c5      	b.n	8006192 <_puts_r+0x42>
 8006206:	4622      	mov	r2, r4
 8006208:	4628      	mov	r0, r5
 800620a:	f000 ffcf 	bl	80071ac <__swbuf_r>
 800620e:	3001      	adds	r0, #1
 8006210:	d1bf      	bne.n	8006192 <_puts_r+0x42>
 8006212:	e7df      	b.n	80061d4 <_puts_r+0x84>
 8006214:	6823      	ldr	r3, [r4, #0]
 8006216:	250a      	movs	r5, #10
 8006218:	1c5a      	adds	r2, r3, #1
 800621a:	6022      	str	r2, [r4, #0]
 800621c:	701d      	strb	r5, [r3, #0]
 800621e:	e7db      	b.n	80061d8 <_puts_r+0x88>
 8006220:	0800a250 	.word	0x0800a250
 8006224:	0800a270 	.word	0x0800a270
 8006228:	0800a230 	.word	0x0800a230

0800622c <puts>:
 800622c:	4b02      	ldr	r3, [pc, #8]	; (8006238 <puts+0xc>)
 800622e:	4601      	mov	r1, r0
 8006230:	6818      	ldr	r0, [r3, #0]
 8006232:	f7ff bf8d 	b.w	8006150 <_puts_r>
 8006236:	bf00      	nop
 8006238:	20000024 	.word	0x20000024

0800623c <_sbrk_r>:
 800623c:	b538      	push	{r3, r4, r5, lr}
 800623e:	4d06      	ldr	r5, [pc, #24]	; (8006258 <_sbrk_r+0x1c>)
 8006240:	2300      	movs	r3, #0
 8006242:	4604      	mov	r4, r0
 8006244:	4608      	mov	r0, r1
 8006246:	602b      	str	r3, [r5, #0]
 8006248:	f7fb fc38 	bl	8001abc <_sbrk>
 800624c:	1c43      	adds	r3, r0, #1
 800624e:	d102      	bne.n	8006256 <_sbrk_r+0x1a>
 8006250:	682b      	ldr	r3, [r5, #0]
 8006252:	b103      	cbz	r3, 8006256 <_sbrk_r+0x1a>
 8006254:	6023      	str	r3, [r4, #0]
 8006256:	bd38      	pop	{r3, r4, r5, pc}
 8006258:	20001d58 	.word	0x20001d58

0800625c <setbuf>:
 800625c:	2900      	cmp	r1, #0
 800625e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006262:	bf0c      	ite	eq
 8006264:	2202      	moveq	r2, #2
 8006266:	2200      	movne	r2, #0
 8006268:	f000 b800 	b.w	800626c <setvbuf>

0800626c <setvbuf>:
 800626c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006270:	461d      	mov	r5, r3
 8006272:	4b5d      	ldr	r3, [pc, #372]	; (80063e8 <setvbuf+0x17c>)
 8006274:	681f      	ldr	r7, [r3, #0]
 8006276:	4604      	mov	r4, r0
 8006278:	460e      	mov	r6, r1
 800627a:	4690      	mov	r8, r2
 800627c:	b127      	cbz	r7, 8006288 <setvbuf+0x1c>
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	b913      	cbnz	r3, 8006288 <setvbuf+0x1c>
 8006282:	4638      	mov	r0, r7
 8006284:	f001 ffe6 	bl	8008254 <__sinit>
 8006288:	4b58      	ldr	r3, [pc, #352]	; (80063ec <setvbuf+0x180>)
 800628a:	429c      	cmp	r4, r3
 800628c:	d167      	bne.n	800635e <setvbuf+0xf2>
 800628e:	687c      	ldr	r4, [r7, #4]
 8006290:	f1b8 0f02 	cmp.w	r8, #2
 8006294:	d006      	beq.n	80062a4 <setvbuf+0x38>
 8006296:	f1b8 0f01 	cmp.w	r8, #1
 800629a:	f200 809f 	bhi.w	80063dc <setvbuf+0x170>
 800629e:	2d00      	cmp	r5, #0
 80062a0:	f2c0 809c 	blt.w	80063dc <setvbuf+0x170>
 80062a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062a6:	07db      	lsls	r3, r3, #31
 80062a8:	d405      	bmi.n	80062b6 <setvbuf+0x4a>
 80062aa:	89a3      	ldrh	r3, [r4, #12]
 80062ac:	0598      	lsls	r0, r3, #22
 80062ae:	d402      	bmi.n	80062b6 <setvbuf+0x4a>
 80062b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062b2:	f002 fbe0 	bl	8008a76 <__retarget_lock_acquire_recursive>
 80062b6:	4621      	mov	r1, r4
 80062b8:	4638      	mov	r0, r7
 80062ba:	f001 ff37 	bl	800812c <_fflush_r>
 80062be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062c0:	b141      	cbz	r1, 80062d4 <setvbuf+0x68>
 80062c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062c6:	4299      	cmp	r1, r3
 80062c8:	d002      	beq.n	80062d0 <setvbuf+0x64>
 80062ca:	4638      	mov	r0, r7
 80062cc:	f7ff f804 	bl	80052d8 <_free_r>
 80062d0:	2300      	movs	r3, #0
 80062d2:	6363      	str	r3, [r4, #52]	; 0x34
 80062d4:	2300      	movs	r3, #0
 80062d6:	61a3      	str	r3, [r4, #24]
 80062d8:	6063      	str	r3, [r4, #4]
 80062da:	89a3      	ldrh	r3, [r4, #12]
 80062dc:	0619      	lsls	r1, r3, #24
 80062de:	d503      	bpl.n	80062e8 <setvbuf+0x7c>
 80062e0:	6921      	ldr	r1, [r4, #16]
 80062e2:	4638      	mov	r0, r7
 80062e4:	f7fe fff8 	bl	80052d8 <_free_r>
 80062e8:	89a3      	ldrh	r3, [r4, #12]
 80062ea:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80062ee:	f023 0303 	bic.w	r3, r3, #3
 80062f2:	f1b8 0f02 	cmp.w	r8, #2
 80062f6:	81a3      	strh	r3, [r4, #12]
 80062f8:	d06c      	beq.n	80063d4 <setvbuf+0x168>
 80062fa:	ab01      	add	r3, sp, #4
 80062fc:	466a      	mov	r2, sp
 80062fe:	4621      	mov	r1, r4
 8006300:	4638      	mov	r0, r7
 8006302:	f002 fbba 	bl	8008a7a <__swhatbuf_r>
 8006306:	89a3      	ldrh	r3, [r4, #12]
 8006308:	4318      	orrs	r0, r3
 800630a:	81a0      	strh	r0, [r4, #12]
 800630c:	2d00      	cmp	r5, #0
 800630e:	d130      	bne.n	8006372 <setvbuf+0x106>
 8006310:	9d00      	ldr	r5, [sp, #0]
 8006312:	4628      	mov	r0, r5
 8006314:	f7fe ffb2 	bl	800527c <malloc>
 8006318:	4606      	mov	r6, r0
 800631a:	2800      	cmp	r0, #0
 800631c:	d155      	bne.n	80063ca <setvbuf+0x15e>
 800631e:	f8dd 9000 	ldr.w	r9, [sp]
 8006322:	45a9      	cmp	r9, r5
 8006324:	d14a      	bne.n	80063bc <setvbuf+0x150>
 8006326:	f04f 35ff 	mov.w	r5, #4294967295
 800632a:	2200      	movs	r2, #0
 800632c:	60a2      	str	r2, [r4, #8]
 800632e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8006332:	6022      	str	r2, [r4, #0]
 8006334:	6122      	str	r2, [r4, #16]
 8006336:	2201      	movs	r2, #1
 8006338:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800633c:	6162      	str	r2, [r4, #20]
 800633e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006340:	f043 0302 	orr.w	r3, r3, #2
 8006344:	07d2      	lsls	r2, r2, #31
 8006346:	81a3      	strh	r3, [r4, #12]
 8006348:	d405      	bmi.n	8006356 <setvbuf+0xea>
 800634a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800634e:	d102      	bne.n	8006356 <setvbuf+0xea>
 8006350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006352:	f002 fb91 	bl	8008a78 <__retarget_lock_release_recursive>
 8006356:	4628      	mov	r0, r5
 8006358:	b003      	add	sp, #12
 800635a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800635e:	4b24      	ldr	r3, [pc, #144]	; (80063f0 <setvbuf+0x184>)
 8006360:	429c      	cmp	r4, r3
 8006362:	d101      	bne.n	8006368 <setvbuf+0xfc>
 8006364:	68bc      	ldr	r4, [r7, #8]
 8006366:	e793      	b.n	8006290 <setvbuf+0x24>
 8006368:	4b22      	ldr	r3, [pc, #136]	; (80063f4 <setvbuf+0x188>)
 800636a:	429c      	cmp	r4, r3
 800636c:	bf08      	it	eq
 800636e:	68fc      	ldreq	r4, [r7, #12]
 8006370:	e78e      	b.n	8006290 <setvbuf+0x24>
 8006372:	2e00      	cmp	r6, #0
 8006374:	d0cd      	beq.n	8006312 <setvbuf+0xa6>
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	b913      	cbnz	r3, 8006380 <setvbuf+0x114>
 800637a:	4638      	mov	r0, r7
 800637c:	f001 ff6a 	bl	8008254 <__sinit>
 8006380:	f1b8 0f01 	cmp.w	r8, #1
 8006384:	bf08      	it	eq
 8006386:	89a3      	ldrheq	r3, [r4, #12]
 8006388:	6026      	str	r6, [r4, #0]
 800638a:	bf04      	itt	eq
 800638c:	f043 0301 	orreq.w	r3, r3, #1
 8006390:	81a3      	strheq	r3, [r4, #12]
 8006392:	89a2      	ldrh	r2, [r4, #12]
 8006394:	f012 0308 	ands.w	r3, r2, #8
 8006398:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800639c:	d01c      	beq.n	80063d8 <setvbuf+0x16c>
 800639e:	07d3      	lsls	r3, r2, #31
 80063a0:	bf41      	itttt	mi
 80063a2:	2300      	movmi	r3, #0
 80063a4:	426d      	negmi	r5, r5
 80063a6:	60a3      	strmi	r3, [r4, #8]
 80063a8:	61a5      	strmi	r5, [r4, #24]
 80063aa:	bf58      	it	pl
 80063ac:	60a5      	strpl	r5, [r4, #8]
 80063ae:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80063b0:	f015 0501 	ands.w	r5, r5, #1
 80063b4:	d115      	bne.n	80063e2 <setvbuf+0x176>
 80063b6:	f412 7f00 	tst.w	r2, #512	; 0x200
 80063ba:	e7c8      	b.n	800634e <setvbuf+0xe2>
 80063bc:	4648      	mov	r0, r9
 80063be:	f7fe ff5d 	bl	800527c <malloc>
 80063c2:	4606      	mov	r6, r0
 80063c4:	2800      	cmp	r0, #0
 80063c6:	d0ae      	beq.n	8006326 <setvbuf+0xba>
 80063c8:	464d      	mov	r5, r9
 80063ca:	89a3      	ldrh	r3, [r4, #12]
 80063cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063d0:	81a3      	strh	r3, [r4, #12]
 80063d2:	e7d0      	b.n	8006376 <setvbuf+0x10a>
 80063d4:	2500      	movs	r5, #0
 80063d6:	e7a8      	b.n	800632a <setvbuf+0xbe>
 80063d8:	60a3      	str	r3, [r4, #8]
 80063da:	e7e8      	b.n	80063ae <setvbuf+0x142>
 80063dc:	f04f 35ff 	mov.w	r5, #4294967295
 80063e0:	e7b9      	b.n	8006356 <setvbuf+0xea>
 80063e2:	2500      	movs	r5, #0
 80063e4:	e7b7      	b.n	8006356 <setvbuf+0xea>
 80063e6:	bf00      	nop
 80063e8:	20000024 	.word	0x20000024
 80063ec:	0800a250 	.word	0x0800a250
 80063f0:	0800a270 	.word	0x0800a270
 80063f4:	0800a230 	.word	0x0800a230

080063f8 <nanf>:
 80063f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006400 <nanf+0x8>
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	7fc00000 	.word	0x7fc00000

08006404 <siprintf>:
 8006404:	b40e      	push	{r1, r2, r3}
 8006406:	b500      	push	{lr}
 8006408:	b09c      	sub	sp, #112	; 0x70
 800640a:	ab1d      	add	r3, sp, #116	; 0x74
 800640c:	9002      	str	r0, [sp, #8]
 800640e:	9006      	str	r0, [sp, #24]
 8006410:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006414:	4809      	ldr	r0, [pc, #36]	; (800643c <siprintf+0x38>)
 8006416:	9107      	str	r1, [sp, #28]
 8006418:	9104      	str	r1, [sp, #16]
 800641a:	4909      	ldr	r1, [pc, #36]	; (8006440 <siprintf+0x3c>)
 800641c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006420:	9105      	str	r1, [sp, #20]
 8006422:	6800      	ldr	r0, [r0, #0]
 8006424:	9301      	str	r3, [sp, #4]
 8006426:	a902      	add	r1, sp, #8
 8006428:	f003 f8c0 	bl	80095ac <_svfiprintf_r>
 800642c:	9b02      	ldr	r3, [sp, #8]
 800642e:	2200      	movs	r2, #0
 8006430:	701a      	strb	r2, [r3, #0]
 8006432:	b01c      	add	sp, #112	; 0x70
 8006434:	f85d eb04 	ldr.w	lr, [sp], #4
 8006438:	b003      	add	sp, #12
 800643a:	4770      	bx	lr
 800643c:	20000024 	.word	0x20000024
 8006440:	ffff0208 	.word	0xffff0208

08006444 <sulp>:
 8006444:	b570      	push	{r4, r5, r6, lr}
 8006446:	4604      	mov	r4, r0
 8006448:	460d      	mov	r5, r1
 800644a:	ec45 4b10 	vmov	d0, r4, r5
 800644e:	4616      	mov	r6, r2
 8006450:	f002 ff02 	bl	8009258 <__ulp>
 8006454:	ec51 0b10 	vmov	r0, r1, d0
 8006458:	b17e      	cbz	r6, 800647a <sulp+0x36>
 800645a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800645e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006462:	2b00      	cmp	r3, #0
 8006464:	dd09      	ble.n	800647a <sulp+0x36>
 8006466:	051b      	lsls	r3, r3, #20
 8006468:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800646c:	2400      	movs	r4, #0
 800646e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006472:	4622      	mov	r2, r4
 8006474:	462b      	mov	r3, r5
 8006476:	f7fa f8bf 	bl	80005f8 <__aeabi_dmul>
 800647a:	bd70      	pop	{r4, r5, r6, pc}
 800647c:	0000      	movs	r0, r0
	...

08006480 <_strtod_l>:
 8006480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006484:	b0a3      	sub	sp, #140	; 0x8c
 8006486:	461f      	mov	r7, r3
 8006488:	2300      	movs	r3, #0
 800648a:	931e      	str	r3, [sp, #120]	; 0x78
 800648c:	4ba4      	ldr	r3, [pc, #656]	; (8006720 <_strtod_l+0x2a0>)
 800648e:	9219      	str	r2, [sp, #100]	; 0x64
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	9307      	str	r3, [sp, #28]
 8006494:	4604      	mov	r4, r0
 8006496:	4618      	mov	r0, r3
 8006498:	4688      	mov	r8, r1
 800649a:	f7f9 fe99 	bl	80001d0 <strlen>
 800649e:	f04f 0a00 	mov.w	sl, #0
 80064a2:	4605      	mov	r5, r0
 80064a4:	f04f 0b00 	mov.w	fp, #0
 80064a8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80064ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80064ae:	781a      	ldrb	r2, [r3, #0]
 80064b0:	2a2b      	cmp	r2, #43	; 0x2b
 80064b2:	d04c      	beq.n	800654e <_strtod_l+0xce>
 80064b4:	d839      	bhi.n	800652a <_strtod_l+0xaa>
 80064b6:	2a0d      	cmp	r2, #13
 80064b8:	d832      	bhi.n	8006520 <_strtod_l+0xa0>
 80064ba:	2a08      	cmp	r2, #8
 80064bc:	d832      	bhi.n	8006524 <_strtod_l+0xa4>
 80064be:	2a00      	cmp	r2, #0
 80064c0:	d03c      	beq.n	800653c <_strtod_l+0xbc>
 80064c2:	2300      	movs	r3, #0
 80064c4:	930e      	str	r3, [sp, #56]	; 0x38
 80064c6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80064c8:	7833      	ldrb	r3, [r6, #0]
 80064ca:	2b30      	cmp	r3, #48	; 0x30
 80064cc:	f040 80b4 	bne.w	8006638 <_strtod_l+0x1b8>
 80064d0:	7873      	ldrb	r3, [r6, #1]
 80064d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80064d6:	2b58      	cmp	r3, #88	; 0x58
 80064d8:	d16c      	bne.n	80065b4 <_strtod_l+0x134>
 80064da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064dc:	9301      	str	r3, [sp, #4]
 80064de:	ab1e      	add	r3, sp, #120	; 0x78
 80064e0:	9702      	str	r7, [sp, #8]
 80064e2:	9300      	str	r3, [sp, #0]
 80064e4:	4a8f      	ldr	r2, [pc, #572]	; (8006724 <_strtod_l+0x2a4>)
 80064e6:	ab1f      	add	r3, sp, #124	; 0x7c
 80064e8:	a91d      	add	r1, sp, #116	; 0x74
 80064ea:	4620      	mov	r0, r4
 80064ec:	f001 ffb6 	bl	800845c <__gethex>
 80064f0:	f010 0707 	ands.w	r7, r0, #7
 80064f4:	4605      	mov	r5, r0
 80064f6:	d005      	beq.n	8006504 <_strtod_l+0x84>
 80064f8:	2f06      	cmp	r7, #6
 80064fa:	d12a      	bne.n	8006552 <_strtod_l+0xd2>
 80064fc:	3601      	adds	r6, #1
 80064fe:	2300      	movs	r3, #0
 8006500:	961d      	str	r6, [sp, #116]	; 0x74
 8006502:	930e      	str	r3, [sp, #56]	; 0x38
 8006504:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006506:	2b00      	cmp	r3, #0
 8006508:	f040 8596 	bne.w	8007038 <_strtod_l+0xbb8>
 800650c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800650e:	b1db      	cbz	r3, 8006548 <_strtod_l+0xc8>
 8006510:	4652      	mov	r2, sl
 8006512:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006516:	ec43 2b10 	vmov	d0, r2, r3
 800651a:	b023      	add	sp, #140	; 0x8c
 800651c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006520:	2a20      	cmp	r2, #32
 8006522:	d1ce      	bne.n	80064c2 <_strtod_l+0x42>
 8006524:	3301      	adds	r3, #1
 8006526:	931d      	str	r3, [sp, #116]	; 0x74
 8006528:	e7c0      	b.n	80064ac <_strtod_l+0x2c>
 800652a:	2a2d      	cmp	r2, #45	; 0x2d
 800652c:	d1c9      	bne.n	80064c2 <_strtod_l+0x42>
 800652e:	2201      	movs	r2, #1
 8006530:	920e      	str	r2, [sp, #56]	; 0x38
 8006532:	1c5a      	adds	r2, r3, #1
 8006534:	921d      	str	r2, [sp, #116]	; 0x74
 8006536:	785b      	ldrb	r3, [r3, #1]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1c4      	bne.n	80064c6 <_strtod_l+0x46>
 800653c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800653e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006542:	2b00      	cmp	r3, #0
 8006544:	f040 8576 	bne.w	8007034 <_strtod_l+0xbb4>
 8006548:	4652      	mov	r2, sl
 800654a:	465b      	mov	r3, fp
 800654c:	e7e3      	b.n	8006516 <_strtod_l+0x96>
 800654e:	2200      	movs	r2, #0
 8006550:	e7ee      	b.n	8006530 <_strtod_l+0xb0>
 8006552:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006554:	b13a      	cbz	r2, 8006566 <_strtod_l+0xe6>
 8006556:	2135      	movs	r1, #53	; 0x35
 8006558:	a820      	add	r0, sp, #128	; 0x80
 800655a:	f002 ff88 	bl	800946e <__copybits>
 800655e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006560:	4620      	mov	r0, r4
 8006562:	f002 fb4d 	bl	8008c00 <_Bfree>
 8006566:	3f01      	subs	r7, #1
 8006568:	2f05      	cmp	r7, #5
 800656a:	d807      	bhi.n	800657c <_strtod_l+0xfc>
 800656c:	e8df f007 	tbb	[pc, r7]
 8006570:	1d180b0e 	.word	0x1d180b0e
 8006574:	030e      	.short	0x030e
 8006576:	f04f 0b00 	mov.w	fp, #0
 800657a:	46da      	mov	sl, fp
 800657c:	0728      	lsls	r0, r5, #28
 800657e:	d5c1      	bpl.n	8006504 <_strtod_l+0x84>
 8006580:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006584:	e7be      	b.n	8006504 <_strtod_l+0x84>
 8006586:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800658a:	e7f7      	b.n	800657c <_strtod_l+0xfc>
 800658c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8006590:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006592:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006596:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800659a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800659e:	e7ed      	b.n	800657c <_strtod_l+0xfc>
 80065a0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8006728 <_strtod_l+0x2a8>
 80065a4:	f04f 0a00 	mov.w	sl, #0
 80065a8:	e7e8      	b.n	800657c <_strtod_l+0xfc>
 80065aa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80065ae:	f04f 3aff 	mov.w	sl, #4294967295
 80065b2:	e7e3      	b.n	800657c <_strtod_l+0xfc>
 80065b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80065b6:	1c5a      	adds	r2, r3, #1
 80065b8:	921d      	str	r2, [sp, #116]	; 0x74
 80065ba:	785b      	ldrb	r3, [r3, #1]
 80065bc:	2b30      	cmp	r3, #48	; 0x30
 80065be:	d0f9      	beq.n	80065b4 <_strtod_l+0x134>
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d09f      	beq.n	8006504 <_strtod_l+0x84>
 80065c4:	2301      	movs	r3, #1
 80065c6:	f04f 0900 	mov.w	r9, #0
 80065ca:	9304      	str	r3, [sp, #16]
 80065cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80065ce:	930a      	str	r3, [sp, #40]	; 0x28
 80065d0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80065d4:	464f      	mov	r7, r9
 80065d6:	220a      	movs	r2, #10
 80065d8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80065da:	7806      	ldrb	r6, [r0, #0]
 80065dc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80065e0:	b2d9      	uxtb	r1, r3
 80065e2:	2909      	cmp	r1, #9
 80065e4:	d92a      	bls.n	800663c <_strtod_l+0x1bc>
 80065e6:	9907      	ldr	r1, [sp, #28]
 80065e8:	462a      	mov	r2, r5
 80065ea:	f003 fa84 	bl	8009af6 <strncmp>
 80065ee:	b398      	cbz	r0, 8006658 <_strtod_l+0x1d8>
 80065f0:	2000      	movs	r0, #0
 80065f2:	4633      	mov	r3, r6
 80065f4:	463d      	mov	r5, r7
 80065f6:	9007      	str	r0, [sp, #28]
 80065f8:	4602      	mov	r2, r0
 80065fa:	2b65      	cmp	r3, #101	; 0x65
 80065fc:	d001      	beq.n	8006602 <_strtod_l+0x182>
 80065fe:	2b45      	cmp	r3, #69	; 0x45
 8006600:	d118      	bne.n	8006634 <_strtod_l+0x1b4>
 8006602:	b91d      	cbnz	r5, 800660c <_strtod_l+0x18c>
 8006604:	9b04      	ldr	r3, [sp, #16]
 8006606:	4303      	orrs	r3, r0
 8006608:	d098      	beq.n	800653c <_strtod_l+0xbc>
 800660a:	2500      	movs	r5, #0
 800660c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8006610:	f108 0301 	add.w	r3, r8, #1
 8006614:	931d      	str	r3, [sp, #116]	; 0x74
 8006616:	f898 3001 	ldrb.w	r3, [r8, #1]
 800661a:	2b2b      	cmp	r3, #43	; 0x2b
 800661c:	d075      	beq.n	800670a <_strtod_l+0x28a>
 800661e:	2b2d      	cmp	r3, #45	; 0x2d
 8006620:	d07b      	beq.n	800671a <_strtod_l+0x29a>
 8006622:	f04f 0c00 	mov.w	ip, #0
 8006626:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800662a:	2909      	cmp	r1, #9
 800662c:	f240 8082 	bls.w	8006734 <_strtod_l+0x2b4>
 8006630:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006634:	2600      	movs	r6, #0
 8006636:	e09d      	b.n	8006774 <_strtod_l+0x2f4>
 8006638:	2300      	movs	r3, #0
 800663a:	e7c4      	b.n	80065c6 <_strtod_l+0x146>
 800663c:	2f08      	cmp	r7, #8
 800663e:	bfd8      	it	le
 8006640:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006642:	f100 0001 	add.w	r0, r0, #1
 8006646:	bfda      	itte	le
 8006648:	fb02 3301 	mlale	r3, r2, r1, r3
 800664c:	9309      	strle	r3, [sp, #36]	; 0x24
 800664e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006652:	3701      	adds	r7, #1
 8006654:	901d      	str	r0, [sp, #116]	; 0x74
 8006656:	e7bf      	b.n	80065d8 <_strtod_l+0x158>
 8006658:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800665a:	195a      	adds	r2, r3, r5
 800665c:	921d      	str	r2, [sp, #116]	; 0x74
 800665e:	5d5b      	ldrb	r3, [r3, r5]
 8006660:	2f00      	cmp	r7, #0
 8006662:	d037      	beq.n	80066d4 <_strtod_l+0x254>
 8006664:	9007      	str	r0, [sp, #28]
 8006666:	463d      	mov	r5, r7
 8006668:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800666c:	2a09      	cmp	r2, #9
 800666e:	d912      	bls.n	8006696 <_strtod_l+0x216>
 8006670:	2201      	movs	r2, #1
 8006672:	e7c2      	b.n	80065fa <_strtod_l+0x17a>
 8006674:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006676:	1c5a      	adds	r2, r3, #1
 8006678:	921d      	str	r2, [sp, #116]	; 0x74
 800667a:	785b      	ldrb	r3, [r3, #1]
 800667c:	3001      	adds	r0, #1
 800667e:	2b30      	cmp	r3, #48	; 0x30
 8006680:	d0f8      	beq.n	8006674 <_strtod_l+0x1f4>
 8006682:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006686:	2a08      	cmp	r2, #8
 8006688:	f200 84db 	bhi.w	8007042 <_strtod_l+0xbc2>
 800668c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800668e:	9007      	str	r0, [sp, #28]
 8006690:	2000      	movs	r0, #0
 8006692:	920a      	str	r2, [sp, #40]	; 0x28
 8006694:	4605      	mov	r5, r0
 8006696:	3b30      	subs	r3, #48	; 0x30
 8006698:	f100 0201 	add.w	r2, r0, #1
 800669c:	d014      	beq.n	80066c8 <_strtod_l+0x248>
 800669e:	9907      	ldr	r1, [sp, #28]
 80066a0:	4411      	add	r1, r2
 80066a2:	9107      	str	r1, [sp, #28]
 80066a4:	462a      	mov	r2, r5
 80066a6:	eb00 0e05 	add.w	lr, r0, r5
 80066aa:	210a      	movs	r1, #10
 80066ac:	4572      	cmp	r2, lr
 80066ae:	d113      	bne.n	80066d8 <_strtod_l+0x258>
 80066b0:	182a      	adds	r2, r5, r0
 80066b2:	2a08      	cmp	r2, #8
 80066b4:	f105 0501 	add.w	r5, r5, #1
 80066b8:	4405      	add	r5, r0
 80066ba:	dc1c      	bgt.n	80066f6 <_strtod_l+0x276>
 80066bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066be:	220a      	movs	r2, #10
 80066c0:	fb02 3301 	mla	r3, r2, r1, r3
 80066c4:	9309      	str	r3, [sp, #36]	; 0x24
 80066c6:	2200      	movs	r2, #0
 80066c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80066ca:	1c59      	adds	r1, r3, #1
 80066cc:	911d      	str	r1, [sp, #116]	; 0x74
 80066ce:	785b      	ldrb	r3, [r3, #1]
 80066d0:	4610      	mov	r0, r2
 80066d2:	e7c9      	b.n	8006668 <_strtod_l+0x1e8>
 80066d4:	4638      	mov	r0, r7
 80066d6:	e7d2      	b.n	800667e <_strtod_l+0x1fe>
 80066d8:	2a08      	cmp	r2, #8
 80066da:	dc04      	bgt.n	80066e6 <_strtod_l+0x266>
 80066dc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80066de:	434e      	muls	r6, r1
 80066e0:	9609      	str	r6, [sp, #36]	; 0x24
 80066e2:	3201      	adds	r2, #1
 80066e4:	e7e2      	b.n	80066ac <_strtod_l+0x22c>
 80066e6:	f102 0c01 	add.w	ip, r2, #1
 80066ea:	f1bc 0f10 	cmp.w	ip, #16
 80066ee:	bfd8      	it	le
 80066f0:	fb01 f909 	mulle.w	r9, r1, r9
 80066f4:	e7f5      	b.n	80066e2 <_strtod_l+0x262>
 80066f6:	2d10      	cmp	r5, #16
 80066f8:	bfdc      	itt	le
 80066fa:	220a      	movle	r2, #10
 80066fc:	fb02 3909 	mlale	r9, r2, r9, r3
 8006700:	e7e1      	b.n	80066c6 <_strtod_l+0x246>
 8006702:	2300      	movs	r3, #0
 8006704:	9307      	str	r3, [sp, #28]
 8006706:	2201      	movs	r2, #1
 8006708:	e77c      	b.n	8006604 <_strtod_l+0x184>
 800670a:	f04f 0c00 	mov.w	ip, #0
 800670e:	f108 0302 	add.w	r3, r8, #2
 8006712:	931d      	str	r3, [sp, #116]	; 0x74
 8006714:	f898 3002 	ldrb.w	r3, [r8, #2]
 8006718:	e785      	b.n	8006626 <_strtod_l+0x1a6>
 800671a:	f04f 0c01 	mov.w	ip, #1
 800671e:	e7f6      	b.n	800670e <_strtod_l+0x28e>
 8006720:	0800a2fc 	.word	0x0800a2fc
 8006724:	0800a048 	.word	0x0800a048
 8006728:	7ff00000 	.word	0x7ff00000
 800672c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800672e:	1c59      	adds	r1, r3, #1
 8006730:	911d      	str	r1, [sp, #116]	; 0x74
 8006732:	785b      	ldrb	r3, [r3, #1]
 8006734:	2b30      	cmp	r3, #48	; 0x30
 8006736:	d0f9      	beq.n	800672c <_strtod_l+0x2ac>
 8006738:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800673c:	2908      	cmp	r1, #8
 800673e:	f63f af79 	bhi.w	8006634 <_strtod_l+0x1b4>
 8006742:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8006746:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006748:	9308      	str	r3, [sp, #32]
 800674a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800674c:	1c59      	adds	r1, r3, #1
 800674e:	911d      	str	r1, [sp, #116]	; 0x74
 8006750:	785b      	ldrb	r3, [r3, #1]
 8006752:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8006756:	2e09      	cmp	r6, #9
 8006758:	d937      	bls.n	80067ca <_strtod_l+0x34a>
 800675a:	9e08      	ldr	r6, [sp, #32]
 800675c:	1b89      	subs	r1, r1, r6
 800675e:	2908      	cmp	r1, #8
 8006760:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006764:	dc02      	bgt.n	800676c <_strtod_l+0x2ec>
 8006766:	4576      	cmp	r6, lr
 8006768:	bfa8      	it	ge
 800676a:	4676      	movge	r6, lr
 800676c:	f1bc 0f00 	cmp.w	ip, #0
 8006770:	d000      	beq.n	8006774 <_strtod_l+0x2f4>
 8006772:	4276      	negs	r6, r6
 8006774:	2d00      	cmp	r5, #0
 8006776:	d14f      	bne.n	8006818 <_strtod_l+0x398>
 8006778:	9904      	ldr	r1, [sp, #16]
 800677a:	4301      	orrs	r1, r0
 800677c:	f47f aec2 	bne.w	8006504 <_strtod_l+0x84>
 8006780:	2a00      	cmp	r2, #0
 8006782:	f47f aedb 	bne.w	800653c <_strtod_l+0xbc>
 8006786:	2b69      	cmp	r3, #105	; 0x69
 8006788:	d027      	beq.n	80067da <_strtod_l+0x35a>
 800678a:	dc24      	bgt.n	80067d6 <_strtod_l+0x356>
 800678c:	2b49      	cmp	r3, #73	; 0x49
 800678e:	d024      	beq.n	80067da <_strtod_l+0x35a>
 8006790:	2b4e      	cmp	r3, #78	; 0x4e
 8006792:	f47f aed3 	bne.w	800653c <_strtod_l+0xbc>
 8006796:	499e      	ldr	r1, [pc, #632]	; (8006a10 <_strtod_l+0x590>)
 8006798:	a81d      	add	r0, sp, #116	; 0x74
 800679a:	f002 f8b7 	bl	800890c <__match>
 800679e:	2800      	cmp	r0, #0
 80067a0:	f43f aecc 	beq.w	800653c <_strtod_l+0xbc>
 80067a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	2b28      	cmp	r3, #40	; 0x28
 80067aa:	d12d      	bne.n	8006808 <_strtod_l+0x388>
 80067ac:	4999      	ldr	r1, [pc, #612]	; (8006a14 <_strtod_l+0x594>)
 80067ae:	aa20      	add	r2, sp, #128	; 0x80
 80067b0:	a81d      	add	r0, sp, #116	; 0x74
 80067b2:	f002 f8bf 	bl	8008934 <__hexnan>
 80067b6:	2805      	cmp	r0, #5
 80067b8:	d126      	bne.n	8006808 <_strtod_l+0x388>
 80067ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067bc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80067c0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80067c4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80067c8:	e69c      	b.n	8006504 <_strtod_l+0x84>
 80067ca:	210a      	movs	r1, #10
 80067cc:	fb01 3e0e 	mla	lr, r1, lr, r3
 80067d0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80067d4:	e7b9      	b.n	800674a <_strtod_l+0x2ca>
 80067d6:	2b6e      	cmp	r3, #110	; 0x6e
 80067d8:	e7db      	b.n	8006792 <_strtod_l+0x312>
 80067da:	498f      	ldr	r1, [pc, #572]	; (8006a18 <_strtod_l+0x598>)
 80067dc:	a81d      	add	r0, sp, #116	; 0x74
 80067de:	f002 f895 	bl	800890c <__match>
 80067e2:	2800      	cmp	r0, #0
 80067e4:	f43f aeaa 	beq.w	800653c <_strtod_l+0xbc>
 80067e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80067ea:	498c      	ldr	r1, [pc, #560]	; (8006a1c <_strtod_l+0x59c>)
 80067ec:	3b01      	subs	r3, #1
 80067ee:	a81d      	add	r0, sp, #116	; 0x74
 80067f0:	931d      	str	r3, [sp, #116]	; 0x74
 80067f2:	f002 f88b 	bl	800890c <__match>
 80067f6:	b910      	cbnz	r0, 80067fe <_strtod_l+0x37e>
 80067f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80067fa:	3301      	adds	r3, #1
 80067fc:	931d      	str	r3, [sp, #116]	; 0x74
 80067fe:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8006a2c <_strtod_l+0x5ac>
 8006802:	f04f 0a00 	mov.w	sl, #0
 8006806:	e67d      	b.n	8006504 <_strtod_l+0x84>
 8006808:	4885      	ldr	r0, [pc, #532]	; (8006a20 <_strtod_l+0x5a0>)
 800680a:	f003 f929 	bl	8009a60 <nan>
 800680e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006812:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006816:	e675      	b.n	8006504 <_strtod_l+0x84>
 8006818:	9b07      	ldr	r3, [sp, #28]
 800681a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800681c:	1af3      	subs	r3, r6, r3
 800681e:	2f00      	cmp	r7, #0
 8006820:	bf08      	it	eq
 8006822:	462f      	moveq	r7, r5
 8006824:	2d10      	cmp	r5, #16
 8006826:	9308      	str	r3, [sp, #32]
 8006828:	46a8      	mov	r8, r5
 800682a:	bfa8      	it	ge
 800682c:	f04f 0810 	movge.w	r8, #16
 8006830:	f7f9 fe68 	bl	8000504 <__aeabi_ui2d>
 8006834:	2d09      	cmp	r5, #9
 8006836:	4682      	mov	sl, r0
 8006838:	468b      	mov	fp, r1
 800683a:	dd13      	ble.n	8006864 <_strtod_l+0x3e4>
 800683c:	4b79      	ldr	r3, [pc, #484]	; (8006a24 <_strtod_l+0x5a4>)
 800683e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006842:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006846:	f7f9 fed7 	bl	80005f8 <__aeabi_dmul>
 800684a:	4682      	mov	sl, r0
 800684c:	4648      	mov	r0, r9
 800684e:	468b      	mov	fp, r1
 8006850:	f7f9 fe58 	bl	8000504 <__aeabi_ui2d>
 8006854:	4602      	mov	r2, r0
 8006856:	460b      	mov	r3, r1
 8006858:	4650      	mov	r0, sl
 800685a:	4659      	mov	r1, fp
 800685c:	f7f9 fd16 	bl	800028c <__adddf3>
 8006860:	4682      	mov	sl, r0
 8006862:	468b      	mov	fp, r1
 8006864:	2d0f      	cmp	r5, #15
 8006866:	dc38      	bgt.n	80068da <_strtod_l+0x45a>
 8006868:	9b08      	ldr	r3, [sp, #32]
 800686a:	2b00      	cmp	r3, #0
 800686c:	f43f ae4a 	beq.w	8006504 <_strtod_l+0x84>
 8006870:	dd24      	ble.n	80068bc <_strtod_l+0x43c>
 8006872:	2b16      	cmp	r3, #22
 8006874:	dc0b      	bgt.n	800688e <_strtod_l+0x40e>
 8006876:	4d6b      	ldr	r5, [pc, #428]	; (8006a24 <_strtod_l+0x5a4>)
 8006878:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800687c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006880:	4652      	mov	r2, sl
 8006882:	465b      	mov	r3, fp
 8006884:	f7f9 feb8 	bl	80005f8 <__aeabi_dmul>
 8006888:	4682      	mov	sl, r0
 800688a:	468b      	mov	fp, r1
 800688c:	e63a      	b.n	8006504 <_strtod_l+0x84>
 800688e:	9a08      	ldr	r2, [sp, #32]
 8006890:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006894:	4293      	cmp	r3, r2
 8006896:	db20      	blt.n	80068da <_strtod_l+0x45a>
 8006898:	4c62      	ldr	r4, [pc, #392]	; (8006a24 <_strtod_l+0x5a4>)
 800689a:	f1c5 050f 	rsb	r5, r5, #15
 800689e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80068a2:	4652      	mov	r2, sl
 80068a4:	465b      	mov	r3, fp
 80068a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068aa:	f7f9 fea5 	bl	80005f8 <__aeabi_dmul>
 80068ae:	9b08      	ldr	r3, [sp, #32]
 80068b0:	1b5d      	subs	r5, r3, r5
 80068b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80068b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80068ba:	e7e3      	b.n	8006884 <_strtod_l+0x404>
 80068bc:	9b08      	ldr	r3, [sp, #32]
 80068be:	3316      	adds	r3, #22
 80068c0:	db0b      	blt.n	80068da <_strtod_l+0x45a>
 80068c2:	9b07      	ldr	r3, [sp, #28]
 80068c4:	4a57      	ldr	r2, [pc, #348]	; (8006a24 <_strtod_l+0x5a4>)
 80068c6:	1b9e      	subs	r6, r3, r6
 80068c8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80068cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80068d0:	4650      	mov	r0, sl
 80068d2:	4659      	mov	r1, fp
 80068d4:	f7f9 ffba 	bl	800084c <__aeabi_ddiv>
 80068d8:	e7d6      	b.n	8006888 <_strtod_l+0x408>
 80068da:	9b08      	ldr	r3, [sp, #32]
 80068dc:	eba5 0808 	sub.w	r8, r5, r8
 80068e0:	4498      	add	r8, r3
 80068e2:	f1b8 0f00 	cmp.w	r8, #0
 80068e6:	dd71      	ble.n	80069cc <_strtod_l+0x54c>
 80068e8:	f018 030f 	ands.w	r3, r8, #15
 80068ec:	d00a      	beq.n	8006904 <_strtod_l+0x484>
 80068ee:	494d      	ldr	r1, [pc, #308]	; (8006a24 <_strtod_l+0x5a4>)
 80068f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80068f4:	4652      	mov	r2, sl
 80068f6:	465b      	mov	r3, fp
 80068f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068fc:	f7f9 fe7c 	bl	80005f8 <__aeabi_dmul>
 8006900:	4682      	mov	sl, r0
 8006902:	468b      	mov	fp, r1
 8006904:	f038 080f 	bics.w	r8, r8, #15
 8006908:	d04d      	beq.n	80069a6 <_strtod_l+0x526>
 800690a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800690e:	dd22      	ble.n	8006956 <_strtod_l+0x4d6>
 8006910:	2500      	movs	r5, #0
 8006912:	462e      	mov	r6, r5
 8006914:	9509      	str	r5, [sp, #36]	; 0x24
 8006916:	9507      	str	r5, [sp, #28]
 8006918:	2322      	movs	r3, #34	; 0x22
 800691a:	f8df b110 	ldr.w	fp, [pc, #272]	; 8006a2c <_strtod_l+0x5ac>
 800691e:	6023      	str	r3, [r4, #0]
 8006920:	f04f 0a00 	mov.w	sl, #0
 8006924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006926:	2b00      	cmp	r3, #0
 8006928:	f43f adec 	beq.w	8006504 <_strtod_l+0x84>
 800692c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800692e:	4620      	mov	r0, r4
 8006930:	f002 f966 	bl	8008c00 <_Bfree>
 8006934:	9907      	ldr	r1, [sp, #28]
 8006936:	4620      	mov	r0, r4
 8006938:	f002 f962 	bl	8008c00 <_Bfree>
 800693c:	4631      	mov	r1, r6
 800693e:	4620      	mov	r0, r4
 8006940:	f002 f95e 	bl	8008c00 <_Bfree>
 8006944:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006946:	4620      	mov	r0, r4
 8006948:	f002 f95a 	bl	8008c00 <_Bfree>
 800694c:	4629      	mov	r1, r5
 800694e:	4620      	mov	r0, r4
 8006950:	f002 f956 	bl	8008c00 <_Bfree>
 8006954:	e5d6      	b.n	8006504 <_strtod_l+0x84>
 8006956:	2300      	movs	r3, #0
 8006958:	ea4f 1828 	mov.w	r8, r8, asr #4
 800695c:	4650      	mov	r0, sl
 800695e:	4659      	mov	r1, fp
 8006960:	4699      	mov	r9, r3
 8006962:	f1b8 0f01 	cmp.w	r8, #1
 8006966:	dc21      	bgt.n	80069ac <_strtod_l+0x52c>
 8006968:	b10b      	cbz	r3, 800696e <_strtod_l+0x4ee>
 800696a:	4682      	mov	sl, r0
 800696c:	468b      	mov	fp, r1
 800696e:	4b2e      	ldr	r3, [pc, #184]	; (8006a28 <_strtod_l+0x5a8>)
 8006970:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006974:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006978:	4652      	mov	r2, sl
 800697a:	465b      	mov	r3, fp
 800697c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006980:	f7f9 fe3a 	bl	80005f8 <__aeabi_dmul>
 8006984:	4b29      	ldr	r3, [pc, #164]	; (8006a2c <_strtod_l+0x5ac>)
 8006986:	460a      	mov	r2, r1
 8006988:	400b      	ands	r3, r1
 800698a:	4929      	ldr	r1, [pc, #164]	; (8006a30 <_strtod_l+0x5b0>)
 800698c:	428b      	cmp	r3, r1
 800698e:	4682      	mov	sl, r0
 8006990:	d8be      	bhi.n	8006910 <_strtod_l+0x490>
 8006992:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006996:	428b      	cmp	r3, r1
 8006998:	bf86      	itte	hi
 800699a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8006a34 <_strtod_l+0x5b4>
 800699e:	f04f 3aff 	movhi.w	sl, #4294967295
 80069a2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80069a6:	2300      	movs	r3, #0
 80069a8:	9304      	str	r3, [sp, #16]
 80069aa:	e081      	b.n	8006ab0 <_strtod_l+0x630>
 80069ac:	f018 0f01 	tst.w	r8, #1
 80069b0:	d007      	beq.n	80069c2 <_strtod_l+0x542>
 80069b2:	4b1d      	ldr	r3, [pc, #116]	; (8006a28 <_strtod_l+0x5a8>)
 80069b4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80069b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069bc:	f7f9 fe1c 	bl	80005f8 <__aeabi_dmul>
 80069c0:	2301      	movs	r3, #1
 80069c2:	f109 0901 	add.w	r9, r9, #1
 80069c6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80069ca:	e7ca      	b.n	8006962 <_strtod_l+0x4e2>
 80069cc:	d0eb      	beq.n	80069a6 <_strtod_l+0x526>
 80069ce:	f1c8 0800 	rsb	r8, r8, #0
 80069d2:	f018 020f 	ands.w	r2, r8, #15
 80069d6:	d00a      	beq.n	80069ee <_strtod_l+0x56e>
 80069d8:	4b12      	ldr	r3, [pc, #72]	; (8006a24 <_strtod_l+0x5a4>)
 80069da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069de:	4650      	mov	r0, sl
 80069e0:	4659      	mov	r1, fp
 80069e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e6:	f7f9 ff31 	bl	800084c <__aeabi_ddiv>
 80069ea:	4682      	mov	sl, r0
 80069ec:	468b      	mov	fp, r1
 80069ee:	ea5f 1828 	movs.w	r8, r8, asr #4
 80069f2:	d0d8      	beq.n	80069a6 <_strtod_l+0x526>
 80069f4:	f1b8 0f1f 	cmp.w	r8, #31
 80069f8:	dd1e      	ble.n	8006a38 <_strtod_l+0x5b8>
 80069fa:	2500      	movs	r5, #0
 80069fc:	462e      	mov	r6, r5
 80069fe:	9509      	str	r5, [sp, #36]	; 0x24
 8006a00:	9507      	str	r5, [sp, #28]
 8006a02:	2322      	movs	r3, #34	; 0x22
 8006a04:	f04f 0a00 	mov.w	sl, #0
 8006a08:	f04f 0b00 	mov.w	fp, #0
 8006a0c:	6023      	str	r3, [r4, #0]
 8006a0e:	e789      	b.n	8006924 <_strtod_l+0x4a4>
 8006a10:	0800a019 	.word	0x0800a019
 8006a14:	0800a05c 	.word	0x0800a05c
 8006a18:	0800a011 	.word	0x0800a011
 8006a1c:	0800a19c 	.word	0x0800a19c
 8006a20:	0800a4b8 	.word	0x0800a4b8
 8006a24:	0800a398 	.word	0x0800a398
 8006a28:	0800a370 	.word	0x0800a370
 8006a2c:	7ff00000 	.word	0x7ff00000
 8006a30:	7ca00000 	.word	0x7ca00000
 8006a34:	7fefffff 	.word	0x7fefffff
 8006a38:	f018 0310 	ands.w	r3, r8, #16
 8006a3c:	bf18      	it	ne
 8006a3e:	236a      	movne	r3, #106	; 0x6a
 8006a40:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8006df8 <_strtod_l+0x978>
 8006a44:	9304      	str	r3, [sp, #16]
 8006a46:	4650      	mov	r0, sl
 8006a48:	4659      	mov	r1, fp
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	f018 0f01 	tst.w	r8, #1
 8006a50:	d004      	beq.n	8006a5c <_strtod_l+0x5dc>
 8006a52:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006a56:	f7f9 fdcf 	bl	80005f8 <__aeabi_dmul>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006a60:	f109 0908 	add.w	r9, r9, #8
 8006a64:	d1f2      	bne.n	8006a4c <_strtod_l+0x5cc>
 8006a66:	b10b      	cbz	r3, 8006a6c <_strtod_l+0x5ec>
 8006a68:	4682      	mov	sl, r0
 8006a6a:	468b      	mov	fp, r1
 8006a6c:	9b04      	ldr	r3, [sp, #16]
 8006a6e:	b1bb      	cbz	r3, 8006aa0 <_strtod_l+0x620>
 8006a70:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8006a74:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	4659      	mov	r1, fp
 8006a7c:	dd10      	ble.n	8006aa0 <_strtod_l+0x620>
 8006a7e:	2b1f      	cmp	r3, #31
 8006a80:	f340 8128 	ble.w	8006cd4 <_strtod_l+0x854>
 8006a84:	2b34      	cmp	r3, #52	; 0x34
 8006a86:	bfde      	ittt	le
 8006a88:	3b20      	suble	r3, #32
 8006a8a:	f04f 32ff 	movle.w	r2, #4294967295
 8006a8e:	fa02 f303 	lslle.w	r3, r2, r3
 8006a92:	f04f 0a00 	mov.w	sl, #0
 8006a96:	bfcc      	ite	gt
 8006a98:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006a9c:	ea03 0b01 	andle.w	fp, r3, r1
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	4650      	mov	r0, sl
 8006aa6:	4659      	mov	r1, fp
 8006aa8:	f7fa f80e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006aac:	2800      	cmp	r0, #0
 8006aae:	d1a4      	bne.n	80069fa <_strtod_l+0x57a>
 8006ab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ab2:	9300      	str	r3, [sp, #0]
 8006ab4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006ab6:	462b      	mov	r3, r5
 8006ab8:	463a      	mov	r2, r7
 8006aba:	4620      	mov	r0, r4
 8006abc:	f002 f90c 	bl	8008cd8 <__s2b>
 8006ac0:	9009      	str	r0, [sp, #36]	; 0x24
 8006ac2:	2800      	cmp	r0, #0
 8006ac4:	f43f af24 	beq.w	8006910 <_strtod_l+0x490>
 8006ac8:	9b07      	ldr	r3, [sp, #28]
 8006aca:	1b9e      	subs	r6, r3, r6
 8006acc:	9b08      	ldr	r3, [sp, #32]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	bfb4      	ite	lt
 8006ad2:	4633      	movlt	r3, r6
 8006ad4:	2300      	movge	r3, #0
 8006ad6:	9310      	str	r3, [sp, #64]	; 0x40
 8006ad8:	9b08      	ldr	r3, [sp, #32]
 8006ada:	2500      	movs	r5, #0
 8006adc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006ae0:	9318      	str	r3, [sp, #96]	; 0x60
 8006ae2:	462e      	mov	r6, r5
 8006ae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ae6:	4620      	mov	r0, r4
 8006ae8:	6859      	ldr	r1, [r3, #4]
 8006aea:	f002 f849 	bl	8008b80 <_Balloc>
 8006aee:	9007      	str	r0, [sp, #28]
 8006af0:	2800      	cmp	r0, #0
 8006af2:	f43f af11 	beq.w	8006918 <_strtod_l+0x498>
 8006af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006af8:	691a      	ldr	r2, [r3, #16]
 8006afa:	3202      	adds	r2, #2
 8006afc:	f103 010c 	add.w	r1, r3, #12
 8006b00:	0092      	lsls	r2, r2, #2
 8006b02:	300c      	adds	r0, #12
 8006b04:	f7fe fbc2 	bl	800528c <memcpy>
 8006b08:	ec4b ab10 	vmov	d0, sl, fp
 8006b0c:	aa20      	add	r2, sp, #128	; 0x80
 8006b0e:	a91f      	add	r1, sp, #124	; 0x7c
 8006b10:	4620      	mov	r0, r4
 8006b12:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8006b16:	f002 fc1b 	bl	8009350 <__d2b>
 8006b1a:	901e      	str	r0, [sp, #120]	; 0x78
 8006b1c:	2800      	cmp	r0, #0
 8006b1e:	f43f aefb 	beq.w	8006918 <_strtod_l+0x498>
 8006b22:	2101      	movs	r1, #1
 8006b24:	4620      	mov	r0, r4
 8006b26:	f002 f971 	bl	8008e0c <__i2b>
 8006b2a:	4606      	mov	r6, r0
 8006b2c:	2800      	cmp	r0, #0
 8006b2e:	f43f aef3 	beq.w	8006918 <_strtod_l+0x498>
 8006b32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006b34:	9904      	ldr	r1, [sp, #16]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	bfab      	itete	ge
 8006b3a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8006b3c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8006b3e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8006b40:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8006b44:	bfac      	ite	ge
 8006b46:	eb03 0902 	addge.w	r9, r3, r2
 8006b4a:	1ad7      	sublt	r7, r2, r3
 8006b4c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006b4e:	eba3 0801 	sub.w	r8, r3, r1
 8006b52:	4490      	add	r8, r2
 8006b54:	4ba3      	ldr	r3, [pc, #652]	; (8006de4 <_strtod_l+0x964>)
 8006b56:	f108 38ff 	add.w	r8, r8, #4294967295
 8006b5a:	4598      	cmp	r8, r3
 8006b5c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006b60:	f280 80cc 	bge.w	8006cfc <_strtod_l+0x87c>
 8006b64:	eba3 0308 	sub.w	r3, r3, r8
 8006b68:	2b1f      	cmp	r3, #31
 8006b6a:	eba2 0203 	sub.w	r2, r2, r3
 8006b6e:	f04f 0101 	mov.w	r1, #1
 8006b72:	f300 80b6 	bgt.w	8006ce2 <_strtod_l+0x862>
 8006b76:	fa01 f303 	lsl.w	r3, r1, r3
 8006b7a:	9311      	str	r3, [sp, #68]	; 0x44
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	930c      	str	r3, [sp, #48]	; 0x30
 8006b80:	eb09 0802 	add.w	r8, r9, r2
 8006b84:	9b04      	ldr	r3, [sp, #16]
 8006b86:	45c1      	cmp	r9, r8
 8006b88:	4417      	add	r7, r2
 8006b8a:	441f      	add	r7, r3
 8006b8c:	464b      	mov	r3, r9
 8006b8e:	bfa8      	it	ge
 8006b90:	4643      	movge	r3, r8
 8006b92:	42bb      	cmp	r3, r7
 8006b94:	bfa8      	it	ge
 8006b96:	463b      	movge	r3, r7
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	bfc2      	ittt	gt
 8006b9c:	eba8 0803 	subgt.w	r8, r8, r3
 8006ba0:	1aff      	subgt	r7, r7, r3
 8006ba2:	eba9 0903 	subgt.w	r9, r9, r3
 8006ba6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	dd17      	ble.n	8006bdc <_strtod_l+0x75c>
 8006bac:	4631      	mov	r1, r6
 8006bae:	461a      	mov	r2, r3
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	f002 f9e7 	bl	8008f84 <__pow5mult>
 8006bb6:	4606      	mov	r6, r0
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	f43f aead 	beq.w	8006918 <_strtod_l+0x498>
 8006bbe:	4601      	mov	r1, r0
 8006bc0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006bc2:	4620      	mov	r0, r4
 8006bc4:	f002 f938 	bl	8008e38 <__multiply>
 8006bc8:	900f      	str	r0, [sp, #60]	; 0x3c
 8006bca:	2800      	cmp	r0, #0
 8006bcc:	f43f aea4 	beq.w	8006918 <_strtod_l+0x498>
 8006bd0:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	f002 f814 	bl	8008c00 <_Bfree>
 8006bd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006bda:	931e      	str	r3, [sp, #120]	; 0x78
 8006bdc:	f1b8 0f00 	cmp.w	r8, #0
 8006be0:	f300 8091 	bgt.w	8006d06 <_strtod_l+0x886>
 8006be4:	9b08      	ldr	r3, [sp, #32]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	dd08      	ble.n	8006bfc <_strtod_l+0x77c>
 8006bea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006bec:	9907      	ldr	r1, [sp, #28]
 8006bee:	4620      	mov	r0, r4
 8006bf0:	f002 f9c8 	bl	8008f84 <__pow5mult>
 8006bf4:	9007      	str	r0, [sp, #28]
 8006bf6:	2800      	cmp	r0, #0
 8006bf8:	f43f ae8e 	beq.w	8006918 <_strtod_l+0x498>
 8006bfc:	2f00      	cmp	r7, #0
 8006bfe:	dd08      	ble.n	8006c12 <_strtod_l+0x792>
 8006c00:	9907      	ldr	r1, [sp, #28]
 8006c02:	463a      	mov	r2, r7
 8006c04:	4620      	mov	r0, r4
 8006c06:	f002 fa17 	bl	8009038 <__lshift>
 8006c0a:	9007      	str	r0, [sp, #28]
 8006c0c:	2800      	cmp	r0, #0
 8006c0e:	f43f ae83 	beq.w	8006918 <_strtod_l+0x498>
 8006c12:	f1b9 0f00 	cmp.w	r9, #0
 8006c16:	dd08      	ble.n	8006c2a <_strtod_l+0x7aa>
 8006c18:	4631      	mov	r1, r6
 8006c1a:	464a      	mov	r2, r9
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	f002 fa0b 	bl	8009038 <__lshift>
 8006c22:	4606      	mov	r6, r0
 8006c24:	2800      	cmp	r0, #0
 8006c26:	f43f ae77 	beq.w	8006918 <_strtod_l+0x498>
 8006c2a:	9a07      	ldr	r2, [sp, #28]
 8006c2c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006c2e:	4620      	mov	r0, r4
 8006c30:	f002 fa8a 	bl	8009148 <__mdiff>
 8006c34:	4605      	mov	r5, r0
 8006c36:	2800      	cmp	r0, #0
 8006c38:	f43f ae6e 	beq.w	8006918 <_strtod_l+0x498>
 8006c3c:	68c3      	ldr	r3, [r0, #12]
 8006c3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c40:	2300      	movs	r3, #0
 8006c42:	60c3      	str	r3, [r0, #12]
 8006c44:	4631      	mov	r1, r6
 8006c46:	f002 fa63 	bl	8009110 <__mcmp>
 8006c4a:	2800      	cmp	r0, #0
 8006c4c:	da65      	bge.n	8006d1a <_strtod_l+0x89a>
 8006c4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c50:	ea53 030a 	orrs.w	r3, r3, sl
 8006c54:	f040 8087 	bne.w	8006d66 <_strtod_l+0x8e6>
 8006c58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	f040 8082 	bne.w	8006d66 <_strtod_l+0x8e6>
 8006c62:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006c66:	0d1b      	lsrs	r3, r3, #20
 8006c68:	051b      	lsls	r3, r3, #20
 8006c6a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006c6e:	d97a      	bls.n	8006d66 <_strtod_l+0x8e6>
 8006c70:	696b      	ldr	r3, [r5, #20]
 8006c72:	b913      	cbnz	r3, 8006c7a <_strtod_l+0x7fa>
 8006c74:	692b      	ldr	r3, [r5, #16]
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	dd75      	ble.n	8006d66 <_strtod_l+0x8e6>
 8006c7a:	4629      	mov	r1, r5
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	4620      	mov	r0, r4
 8006c80:	f002 f9da 	bl	8009038 <__lshift>
 8006c84:	4631      	mov	r1, r6
 8006c86:	4605      	mov	r5, r0
 8006c88:	f002 fa42 	bl	8009110 <__mcmp>
 8006c8c:	2800      	cmp	r0, #0
 8006c8e:	dd6a      	ble.n	8006d66 <_strtod_l+0x8e6>
 8006c90:	9904      	ldr	r1, [sp, #16]
 8006c92:	4a55      	ldr	r2, [pc, #340]	; (8006de8 <_strtod_l+0x968>)
 8006c94:	465b      	mov	r3, fp
 8006c96:	2900      	cmp	r1, #0
 8006c98:	f000 8085 	beq.w	8006da6 <_strtod_l+0x926>
 8006c9c:	ea02 010b 	and.w	r1, r2, fp
 8006ca0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006ca4:	dc7f      	bgt.n	8006da6 <_strtod_l+0x926>
 8006ca6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006caa:	f77f aeaa 	ble.w	8006a02 <_strtod_l+0x582>
 8006cae:	4a4f      	ldr	r2, [pc, #316]	; (8006dec <_strtod_l+0x96c>)
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8006cb6:	4650      	mov	r0, sl
 8006cb8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8006cbc:	4659      	mov	r1, fp
 8006cbe:	f7f9 fc9b 	bl	80005f8 <__aeabi_dmul>
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	4303      	orrs	r3, r0
 8006cc6:	bf08      	it	eq
 8006cc8:	2322      	moveq	r3, #34	; 0x22
 8006cca:	4682      	mov	sl, r0
 8006ccc:	468b      	mov	fp, r1
 8006cce:	bf08      	it	eq
 8006cd0:	6023      	streq	r3, [r4, #0]
 8006cd2:	e62b      	b.n	800692c <_strtod_l+0x4ac>
 8006cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8006cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cdc:	ea03 0a0a 	and.w	sl, r3, sl
 8006ce0:	e6de      	b.n	8006aa0 <_strtod_l+0x620>
 8006ce2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006ce6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006cea:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006cee:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006cf2:	fa01 f308 	lsl.w	r3, r1, r8
 8006cf6:	930c      	str	r3, [sp, #48]	; 0x30
 8006cf8:	9111      	str	r1, [sp, #68]	; 0x44
 8006cfa:	e741      	b.n	8006b80 <_strtod_l+0x700>
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	930c      	str	r3, [sp, #48]	; 0x30
 8006d00:	2301      	movs	r3, #1
 8006d02:	9311      	str	r3, [sp, #68]	; 0x44
 8006d04:	e73c      	b.n	8006b80 <_strtod_l+0x700>
 8006d06:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006d08:	4642      	mov	r2, r8
 8006d0a:	4620      	mov	r0, r4
 8006d0c:	f002 f994 	bl	8009038 <__lshift>
 8006d10:	901e      	str	r0, [sp, #120]	; 0x78
 8006d12:	2800      	cmp	r0, #0
 8006d14:	f47f af66 	bne.w	8006be4 <_strtod_l+0x764>
 8006d18:	e5fe      	b.n	8006918 <_strtod_l+0x498>
 8006d1a:	465f      	mov	r7, fp
 8006d1c:	d16e      	bne.n	8006dfc <_strtod_l+0x97c>
 8006d1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006d20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d24:	b342      	cbz	r2, 8006d78 <_strtod_l+0x8f8>
 8006d26:	4a32      	ldr	r2, [pc, #200]	; (8006df0 <_strtod_l+0x970>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d128      	bne.n	8006d7e <_strtod_l+0x8fe>
 8006d2c:	9b04      	ldr	r3, [sp, #16]
 8006d2e:	4650      	mov	r0, sl
 8006d30:	b1eb      	cbz	r3, 8006d6e <_strtod_l+0x8ee>
 8006d32:	4a2d      	ldr	r2, [pc, #180]	; (8006de8 <_strtod_l+0x968>)
 8006d34:	403a      	ands	r2, r7
 8006d36:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006d3a:	f04f 31ff 	mov.w	r1, #4294967295
 8006d3e:	d819      	bhi.n	8006d74 <_strtod_l+0x8f4>
 8006d40:	0d12      	lsrs	r2, r2, #20
 8006d42:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006d46:	fa01 f303 	lsl.w	r3, r1, r3
 8006d4a:	4298      	cmp	r0, r3
 8006d4c:	d117      	bne.n	8006d7e <_strtod_l+0x8fe>
 8006d4e:	4b29      	ldr	r3, [pc, #164]	; (8006df4 <_strtod_l+0x974>)
 8006d50:	429f      	cmp	r7, r3
 8006d52:	d102      	bne.n	8006d5a <_strtod_l+0x8da>
 8006d54:	3001      	adds	r0, #1
 8006d56:	f43f addf 	beq.w	8006918 <_strtod_l+0x498>
 8006d5a:	4b23      	ldr	r3, [pc, #140]	; (8006de8 <_strtod_l+0x968>)
 8006d5c:	403b      	ands	r3, r7
 8006d5e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006d62:	f04f 0a00 	mov.w	sl, #0
 8006d66:	9b04      	ldr	r3, [sp, #16]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d1a0      	bne.n	8006cae <_strtod_l+0x82e>
 8006d6c:	e5de      	b.n	800692c <_strtod_l+0x4ac>
 8006d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d72:	e7ea      	b.n	8006d4a <_strtod_l+0x8ca>
 8006d74:	460b      	mov	r3, r1
 8006d76:	e7e8      	b.n	8006d4a <_strtod_l+0x8ca>
 8006d78:	ea53 030a 	orrs.w	r3, r3, sl
 8006d7c:	d088      	beq.n	8006c90 <_strtod_l+0x810>
 8006d7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d80:	b1db      	cbz	r3, 8006dba <_strtod_l+0x93a>
 8006d82:	423b      	tst	r3, r7
 8006d84:	d0ef      	beq.n	8006d66 <_strtod_l+0x8e6>
 8006d86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d88:	9a04      	ldr	r2, [sp, #16]
 8006d8a:	4650      	mov	r0, sl
 8006d8c:	4659      	mov	r1, fp
 8006d8e:	b1c3      	cbz	r3, 8006dc2 <_strtod_l+0x942>
 8006d90:	f7ff fb58 	bl	8006444 <sulp>
 8006d94:	4602      	mov	r2, r0
 8006d96:	460b      	mov	r3, r1
 8006d98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006d9c:	f7f9 fa76 	bl	800028c <__adddf3>
 8006da0:	4682      	mov	sl, r0
 8006da2:	468b      	mov	fp, r1
 8006da4:	e7df      	b.n	8006d66 <_strtod_l+0x8e6>
 8006da6:	4013      	ands	r3, r2
 8006da8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006dac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006db0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006db4:	f04f 3aff 	mov.w	sl, #4294967295
 8006db8:	e7d5      	b.n	8006d66 <_strtod_l+0x8e6>
 8006dba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006dbc:	ea13 0f0a 	tst.w	r3, sl
 8006dc0:	e7e0      	b.n	8006d84 <_strtod_l+0x904>
 8006dc2:	f7ff fb3f 	bl	8006444 <sulp>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	460b      	mov	r3, r1
 8006dca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006dce:	f7f9 fa5b 	bl	8000288 <__aeabi_dsub>
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	4682      	mov	sl, r0
 8006dd8:	468b      	mov	fp, r1
 8006dda:	f7f9 fe75 	bl	8000ac8 <__aeabi_dcmpeq>
 8006dde:	2800      	cmp	r0, #0
 8006de0:	d0c1      	beq.n	8006d66 <_strtod_l+0x8e6>
 8006de2:	e60e      	b.n	8006a02 <_strtod_l+0x582>
 8006de4:	fffffc02 	.word	0xfffffc02
 8006de8:	7ff00000 	.word	0x7ff00000
 8006dec:	39500000 	.word	0x39500000
 8006df0:	000fffff 	.word	0x000fffff
 8006df4:	7fefffff 	.word	0x7fefffff
 8006df8:	0800a070 	.word	0x0800a070
 8006dfc:	4631      	mov	r1, r6
 8006dfe:	4628      	mov	r0, r5
 8006e00:	f002 fb02 	bl	8009408 <__ratio>
 8006e04:	ec59 8b10 	vmov	r8, r9, d0
 8006e08:	ee10 0a10 	vmov	r0, s0
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006e12:	4649      	mov	r1, r9
 8006e14:	f7f9 fe6c 	bl	8000af0 <__aeabi_dcmple>
 8006e18:	2800      	cmp	r0, #0
 8006e1a:	d07c      	beq.n	8006f16 <_strtod_l+0xa96>
 8006e1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d04c      	beq.n	8006ebc <_strtod_l+0xa3c>
 8006e22:	4b95      	ldr	r3, [pc, #596]	; (8007078 <_strtod_l+0xbf8>)
 8006e24:	2200      	movs	r2, #0
 8006e26:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006e2a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007078 <_strtod_l+0xbf8>
 8006e2e:	f04f 0800 	mov.w	r8, #0
 8006e32:	4b92      	ldr	r3, [pc, #584]	; (800707c <_strtod_l+0xbfc>)
 8006e34:	403b      	ands	r3, r7
 8006e36:	9311      	str	r3, [sp, #68]	; 0x44
 8006e38:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006e3a:	4b91      	ldr	r3, [pc, #580]	; (8007080 <_strtod_l+0xc00>)
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	f040 80b2 	bne.w	8006fa6 <_strtod_l+0xb26>
 8006e42:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006e46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006e4a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006e4e:	ec4b ab10 	vmov	d0, sl, fp
 8006e52:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8006e56:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006e5a:	f002 f9fd 	bl	8009258 <__ulp>
 8006e5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006e62:	ec53 2b10 	vmov	r2, r3, d0
 8006e66:	f7f9 fbc7 	bl	80005f8 <__aeabi_dmul>
 8006e6a:	4652      	mov	r2, sl
 8006e6c:	465b      	mov	r3, fp
 8006e6e:	f7f9 fa0d 	bl	800028c <__adddf3>
 8006e72:	460b      	mov	r3, r1
 8006e74:	4981      	ldr	r1, [pc, #516]	; (800707c <_strtod_l+0xbfc>)
 8006e76:	4a83      	ldr	r2, [pc, #524]	; (8007084 <_strtod_l+0xc04>)
 8006e78:	4019      	ands	r1, r3
 8006e7a:	4291      	cmp	r1, r2
 8006e7c:	4682      	mov	sl, r0
 8006e7e:	d95e      	bls.n	8006f3e <_strtod_l+0xabe>
 8006e80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e82:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d103      	bne.n	8006e92 <_strtod_l+0xa12>
 8006e8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	f43f ad43 	beq.w	8006918 <_strtod_l+0x498>
 8006e92:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8007090 <_strtod_l+0xc10>
 8006e96:	f04f 3aff 	mov.w	sl, #4294967295
 8006e9a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	f001 feaf 	bl	8008c00 <_Bfree>
 8006ea2:	9907      	ldr	r1, [sp, #28]
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	f001 feab 	bl	8008c00 <_Bfree>
 8006eaa:	4631      	mov	r1, r6
 8006eac:	4620      	mov	r0, r4
 8006eae:	f001 fea7 	bl	8008c00 <_Bfree>
 8006eb2:	4629      	mov	r1, r5
 8006eb4:	4620      	mov	r0, r4
 8006eb6:	f001 fea3 	bl	8008c00 <_Bfree>
 8006eba:	e613      	b.n	8006ae4 <_strtod_l+0x664>
 8006ebc:	f1ba 0f00 	cmp.w	sl, #0
 8006ec0:	d11b      	bne.n	8006efa <_strtod_l+0xa7a>
 8006ec2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006ec6:	b9f3      	cbnz	r3, 8006f06 <_strtod_l+0xa86>
 8006ec8:	4b6b      	ldr	r3, [pc, #428]	; (8007078 <_strtod_l+0xbf8>)
 8006eca:	2200      	movs	r2, #0
 8006ecc:	4640      	mov	r0, r8
 8006ece:	4649      	mov	r1, r9
 8006ed0:	f7f9 fe04 	bl	8000adc <__aeabi_dcmplt>
 8006ed4:	b9d0      	cbnz	r0, 8006f0c <_strtod_l+0xa8c>
 8006ed6:	4640      	mov	r0, r8
 8006ed8:	4649      	mov	r1, r9
 8006eda:	4b6b      	ldr	r3, [pc, #428]	; (8007088 <_strtod_l+0xc08>)
 8006edc:	2200      	movs	r2, #0
 8006ede:	f7f9 fb8b 	bl	80005f8 <__aeabi_dmul>
 8006ee2:	4680      	mov	r8, r0
 8006ee4:	4689      	mov	r9, r1
 8006ee6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006eea:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8006eee:	931b      	str	r3, [sp, #108]	; 0x6c
 8006ef0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8006ef4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006ef8:	e79b      	b.n	8006e32 <_strtod_l+0x9b2>
 8006efa:	f1ba 0f01 	cmp.w	sl, #1
 8006efe:	d102      	bne.n	8006f06 <_strtod_l+0xa86>
 8006f00:	2f00      	cmp	r7, #0
 8006f02:	f43f ad7e 	beq.w	8006a02 <_strtod_l+0x582>
 8006f06:	4b61      	ldr	r3, [pc, #388]	; (800708c <_strtod_l+0xc0c>)
 8006f08:	2200      	movs	r2, #0
 8006f0a:	e78c      	b.n	8006e26 <_strtod_l+0x9a6>
 8006f0c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007088 <_strtod_l+0xc08>
 8006f10:	f04f 0800 	mov.w	r8, #0
 8006f14:	e7e7      	b.n	8006ee6 <_strtod_l+0xa66>
 8006f16:	4b5c      	ldr	r3, [pc, #368]	; (8007088 <_strtod_l+0xc08>)
 8006f18:	4640      	mov	r0, r8
 8006f1a:	4649      	mov	r1, r9
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f7f9 fb6b 	bl	80005f8 <__aeabi_dmul>
 8006f22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f24:	4680      	mov	r8, r0
 8006f26:	4689      	mov	r9, r1
 8006f28:	b933      	cbnz	r3, 8006f38 <_strtod_l+0xab8>
 8006f2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f2e:	9012      	str	r0, [sp, #72]	; 0x48
 8006f30:	9313      	str	r3, [sp, #76]	; 0x4c
 8006f32:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8006f36:	e7dd      	b.n	8006ef4 <_strtod_l+0xa74>
 8006f38:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8006f3c:	e7f9      	b.n	8006f32 <_strtod_l+0xab2>
 8006f3e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006f42:	9b04      	ldr	r3, [sp, #16]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1a8      	bne.n	8006e9a <_strtod_l+0xa1a>
 8006f48:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006f4c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006f4e:	0d1b      	lsrs	r3, r3, #20
 8006f50:	051b      	lsls	r3, r3, #20
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d1a1      	bne.n	8006e9a <_strtod_l+0xa1a>
 8006f56:	4640      	mov	r0, r8
 8006f58:	4649      	mov	r1, r9
 8006f5a:	f7f9 fead 	bl	8000cb8 <__aeabi_d2lz>
 8006f5e:	f7f9 fb1d 	bl	800059c <__aeabi_l2d>
 8006f62:	4602      	mov	r2, r0
 8006f64:	460b      	mov	r3, r1
 8006f66:	4640      	mov	r0, r8
 8006f68:	4649      	mov	r1, r9
 8006f6a:	f7f9 f98d 	bl	8000288 <__aeabi_dsub>
 8006f6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006f70:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f74:	ea43 030a 	orr.w	r3, r3, sl
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	4680      	mov	r8, r0
 8006f7c:	4689      	mov	r9, r1
 8006f7e:	d053      	beq.n	8007028 <_strtod_l+0xba8>
 8006f80:	a335      	add	r3, pc, #212	; (adr r3, 8007058 <_strtod_l+0xbd8>)
 8006f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f86:	f7f9 fda9 	bl	8000adc <__aeabi_dcmplt>
 8006f8a:	2800      	cmp	r0, #0
 8006f8c:	f47f acce 	bne.w	800692c <_strtod_l+0x4ac>
 8006f90:	a333      	add	r3, pc, #204	; (adr r3, 8007060 <_strtod_l+0xbe0>)
 8006f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f96:	4640      	mov	r0, r8
 8006f98:	4649      	mov	r1, r9
 8006f9a:	f7f9 fdbd 	bl	8000b18 <__aeabi_dcmpgt>
 8006f9e:	2800      	cmp	r0, #0
 8006fa0:	f43f af7b 	beq.w	8006e9a <_strtod_l+0xa1a>
 8006fa4:	e4c2      	b.n	800692c <_strtod_l+0x4ac>
 8006fa6:	9b04      	ldr	r3, [sp, #16]
 8006fa8:	b333      	cbz	r3, 8006ff8 <_strtod_l+0xb78>
 8006faa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006fac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006fb0:	d822      	bhi.n	8006ff8 <_strtod_l+0xb78>
 8006fb2:	a32d      	add	r3, pc, #180	; (adr r3, 8007068 <_strtod_l+0xbe8>)
 8006fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb8:	4640      	mov	r0, r8
 8006fba:	4649      	mov	r1, r9
 8006fbc:	f7f9 fd98 	bl	8000af0 <__aeabi_dcmple>
 8006fc0:	b1a0      	cbz	r0, 8006fec <_strtod_l+0xb6c>
 8006fc2:	4649      	mov	r1, r9
 8006fc4:	4640      	mov	r0, r8
 8006fc6:	f7f9 fdef 	bl	8000ba8 <__aeabi_d2uiz>
 8006fca:	2801      	cmp	r0, #1
 8006fcc:	bf38      	it	cc
 8006fce:	2001      	movcc	r0, #1
 8006fd0:	f7f9 fa98 	bl	8000504 <__aeabi_ui2d>
 8006fd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006fd6:	4680      	mov	r8, r0
 8006fd8:	4689      	mov	r9, r1
 8006fda:	bb13      	cbnz	r3, 8007022 <_strtod_l+0xba2>
 8006fdc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006fe0:	9014      	str	r0, [sp, #80]	; 0x50
 8006fe2:	9315      	str	r3, [sp, #84]	; 0x54
 8006fe4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006fe8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006fec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006ff0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006ff4:	1a9b      	subs	r3, r3, r2
 8006ff6:	930d      	str	r3, [sp, #52]	; 0x34
 8006ff8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ffc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007000:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007004:	f002 f928 	bl	8009258 <__ulp>
 8007008:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800700c:	ec53 2b10 	vmov	r2, r3, d0
 8007010:	f7f9 faf2 	bl	80005f8 <__aeabi_dmul>
 8007014:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007018:	f7f9 f938 	bl	800028c <__adddf3>
 800701c:	4682      	mov	sl, r0
 800701e:	468b      	mov	fp, r1
 8007020:	e78f      	b.n	8006f42 <_strtod_l+0xac2>
 8007022:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8007026:	e7dd      	b.n	8006fe4 <_strtod_l+0xb64>
 8007028:	a311      	add	r3, pc, #68	; (adr r3, 8007070 <_strtod_l+0xbf0>)
 800702a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702e:	f7f9 fd55 	bl	8000adc <__aeabi_dcmplt>
 8007032:	e7b4      	b.n	8006f9e <_strtod_l+0xb1e>
 8007034:	2300      	movs	r3, #0
 8007036:	930e      	str	r3, [sp, #56]	; 0x38
 8007038:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800703a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800703c:	6013      	str	r3, [r2, #0]
 800703e:	f7ff ba65 	b.w	800650c <_strtod_l+0x8c>
 8007042:	2b65      	cmp	r3, #101	; 0x65
 8007044:	f43f ab5d 	beq.w	8006702 <_strtod_l+0x282>
 8007048:	2b45      	cmp	r3, #69	; 0x45
 800704a:	f43f ab5a 	beq.w	8006702 <_strtod_l+0x282>
 800704e:	2201      	movs	r2, #1
 8007050:	f7ff bb92 	b.w	8006778 <_strtod_l+0x2f8>
 8007054:	f3af 8000 	nop.w
 8007058:	94a03595 	.word	0x94a03595
 800705c:	3fdfffff 	.word	0x3fdfffff
 8007060:	35afe535 	.word	0x35afe535
 8007064:	3fe00000 	.word	0x3fe00000
 8007068:	ffc00000 	.word	0xffc00000
 800706c:	41dfffff 	.word	0x41dfffff
 8007070:	94a03595 	.word	0x94a03595
 8007074:	3fcfffff 	.word	0x3fcfffff
 8007078:	3ff00000 	.word	0x3ff00000
 800707c:	7ff00000 	.word	0x7ff00000
 8007080:	7fe00000 	.word	0x7fe00000
 8007084:	7c9fffff 	.word	0x7c9fffff
 8007088:	3fe00000 	.word	0x3fe00000
 800708c:	bff00000 	.word	0xbff00000
 8007090:	7fefffff 	.word	0x7fefffff

08007094 <_strtod_r>:
 8007094:	4b01      	ldr	r3, [pc, #4]	; (800709c <_strtod_r+0x8>)
 8007096:	f7ff b9f3 	b.w	8006480 <_strtod_l>
 800709a:	bf00      	nop
 800709c:	2000008c 	.word	0x2000008c

080070a0 <_strtol_l.isra.0>:
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070a6:	d001      	beq.n	80070ac <_strtol_l.isra.0+0xc>
 80070a8:	2b24      	cmp	r3, #36	; 0x24
 80070aa:	d906      	bls.n	80070ba <_strtol_l.isra.0+0x1a>
 80070ac:	f7fe f8bc 	bl	8005228 <__errno>
 80070b0:	2316      	movs	r3, #22
 80070b2:	6003      	str	r3, [r0, #0]
 80070b4:	2000      	movs	r0, #0
 80070b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ba:	4f3a      	ldr	r7, [pc, #232]	; (80071a4 <_strtol_l.isra.0+0x104>)
 80070bc:	468e      	mov	lr, r1
 80070be:	4676      	mov	r6, lr
 80070c0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80070c4:	5de5      	ldrb	r5, [r4, r7]
 80070c6:	f015 0508 	ands.w	r5, r5, #8
 80070ca:	d1f8      	bne.n	80070be <_strtol_l.isra.0+0x1e>
 80070cc:	2c2d      	cmp	r4, #45	; 0x2d
 80070ce:	d134      	bne.n	800713a <_strtol_l.isra.0+0x9a>
 80070d0:	f89e 4000 	ldrb.w	r4, [lr]
 80070d4:	f04f 0801 	mov.w	r8, #1
 80070d8:	f106 0e02 	add.w	lr, r6, #2
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d05c      	beq.n	800719a <_strtol_l.isra.0+0xfa>
 80070e0:	2b10      	cmp	r3, #16
 80070e2:	d10c      	bne.n	80070fe <_strtol_l.isra.0+0x5e>
 80070e4:	2c30      	cmp	r4, #48	; 0x30
 80070e6:	d10a      	bne.n	80070fe <_strtol_l.isra.0+0x5e>
 80070e8:	f89e 4000 	ldrb.w	r4, [lr]
 80070ec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80070f0:	2c58      	cmp	r4, #88	; 0x58
 80070f2:	d14d      	bne.n	8007190 <_strtol_l.isra.0+0xf0>
 80070f4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80070f8:	2310      	movs	r3, #16
 80070fa:	f10e 0e02 	add.w	lr, lr, #2
 80070fe:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8007102:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007106:	2600      	movs	r6, #0
 8007108:	fbbc f9f3 	udiv	r9, ip, r3
 800710c:	4635      	mov	r5, r6
 800710e:	fb03 ca19 	mls	sl, r3, r9, ip
 8007112:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007116:	2f09      	cmp	r7, #9
 8007118:	d818      	bhi.n	800714c <_strtol_l.isra.0+0xac>
 800711a:	463c      	mov	r4, r7
 800711c:	42a3      	cmp	r3, r4
 800711e:	dd24      	ble.n	800716a <_strtol_l.isra.0+0xca>
 8007120:	2e00      	cmp	r6, #0
 8007122:	db1f      	blt.n	8007164 <_strtol_l.isra.0+0xc4>
 8007124:	45a9      	cmp	r9, r5
 8007126:	d31d      	bcc.n	8007164 <_strtol_l.isra.0+0xc4>
 8007128:	d101      	bne.n	800712e <_strtol_l.isra.0+0x8e>
 800712a:	45a2      	cmp	sl, r4
 800712c:	db1a      	blt.n	8007164 <_strtol_l.isra.0+0xc4>
 800712e:	fb05 4503 	mla	r5, r5, r3, r4
 8007132:	2601      	movs	r6, #1
 8007134:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007138:	e7eb      	b.n	8007112 <_strtol_l.isra.0+0x72>
 800713a:	2c2b      	cmp	r4, #43	; 0x2b
 800713c:	bf08      	it	eq
 800713e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8007142:	46a8      	mov	r8, r5
 8007144:	bf08      	it	eq
 8007146:	f106 0e02 	addeq.w	lr, r6, #2
 800714a:	e7c7      	b.n	80070dc <_strtol_l.isra.0+0x3c>
 800714c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007150:	2f19      	cmp	r7, #25
 8007152:	d801      	bhi.n	8007158 <_strtol_l.isra.0+0xb8>
 8007154:	3c37      	subs	r4, #55	; 0x37
 8007156:	e7e1      	b.n	800711c <_strtol_l.isra.0+0x7c>
 8007158:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800715c:	2f19      	cmp	r7, #25
 800715e:	d804      	bhi.n	800716a <_strtol_l.isra.0+0xca>
 8007160:	3c57      	subs	r4, #87	; 0x57
 8007162:	e7db      	b.n	800711c <_strtol_l.isra.0+0x7c>
 8007164:	f04f 36ff 	mov.w	r6, #4294967295
 8007168:	e7e4      	b.n	8007134 <_strtol_l.isra.0+0x94>
 800716a:	2e00      	cmp	r6, #0
 800716c:	da05      	bge.n	800717a <_strtol_l.isra.0+0xda>
 800716e:	2322      	movs	r3, #34	; 0x22
 8007170:	6003      	str	r3, [r0, #0]
 8007172:	4665      	mov	r5, ip
 8007174:	b942      	cbnz	r2, 8007188 <_strtol_l.isra.0+0xe8>
 8007176:	4628      	mov	r0, r5
 8007178:	e79d      	b.n	80070b6 <_strtol_l.isra.0+0x16>
 800717a:	f1b8 0f00 	cmp.w	r8, #0
 800717e:	d000      	beq.n	8007182 <_strtol_l.isra.0+0xe2>
 8007180:	426d      	negs	r5, r5
 8007182:	2a00      	cmp	r2, #0
 8007184:	d0f7      	beq.n	8007176 <_strtol_l.isra.0+0xd6>
 8007186:	b10e      	cbz	r6, 800718c <_strtol_l.isra.0+0xec>
 8007188:	f10e 31ff 	add.w	r1, lr, #4294967295
 800718c:	6011      	str	r1, [r2, #0]
 800718e:	e7f2      	b.n	8007176 <_strtol_l.isra.0+0xd6>
 8007190:	2430      	movs	r4, #48	; 0x30
 8007192:	2b00      	cmp	r3, #0
 8007194:	d1b3      	bne.n	80070fe <_strtol_l.isra.0+0x5e>
 8007196:	2308      	movs	r3, #8
 8007198:	e7b1      	b.n	80070fe <_strtol_l.isra.0+0x5e>
 800719a:	2c30      	cmp	r4, #48	; 0x30
 800719c:	d0a4      	beq.n	80070e8 <_strtol_l.isra.0+0x48>
 800719e:	230a      	movs	r3, #10
 80071a0:	e7ad      	b.n	80070fe <_strtol_l.isra.0+0x5e>
 80071a2:	bf00      	nop
 80071a4:	0800a099 	.word	0x0800a099

080071a8 <_strtol_r>:
 80071a8:	f7ff bf7a 	b.w	80070a0 <_strtol_l.isra.0>

080071ac <__swbuf_r>:
 80071ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ae:	460e      	mov	r6, r1
 80071b0:	4614      	mov	r4, r2
 80071b2:	4605      	mov	r5, r0
 80071b4:	b118      	cbz	r0, 80071be <__swbuf_r+0x12>
 80071b6:	6983      	ldr	r3, [r0, #24]
 80071b8:	b90b      	cbnz	r3, 80071be <__swbuf_r+0x12>
 80071ba:	f001 f84b 	bl	8008254 <__sinit>
 80071be:	4b21      	ldr	r3, [pc, #132]	; (8007244 <__swbuf_r+0x98>)
 80071c0:	429c      	cmp	r4, r3
 80071c2:	d12b      	bne.n	800721c <__swbuf_r+0x70>
 80071c4:	686c      	ldr	r4, [r5, #4]
 80071c6:	69a3      	ldr	r3, [r4, #24]
 80071c8:	60a3      	str	r3, [r4, #8]
 80071ca:	89a3      	ldrh	r3, [r4, #12]
 80071cc:	071a      	lsls	r2, r3, #28
 80071ce:	d52f      	bpl.n	8007230 <__swbuf_r+0x84>
 80071d0:	6923      	ldr	r3, [r4, #16]
 80071d2:	b36b      	cbz	r3, 8007230 <__swbuf_r+0x84>
 80071d4:	6923      	ldr	r3, [r4, #16]
 80071d6:	6820      	ldr	r0, [r4, #0]
 80071d8:	1ac0      	subs	r0, r0, r3
 80071da:	6963      	ldr	r3, [r4, #20]
 80071dc:	b2f6      	uxtb	r6, r6
 80071de:	4283      	cmp	r3, r0
 80071e0:	4637      	mov	r7, r6
 80071e2:	dc04      	bgt.n	80071ee <__swbuf_r+0x42>
 80071e4:	4621      	mov	r1, r4
 80071e6:	4628      	mov	r0, r5
 80071e8:	f000 ffa0 	bl	800812c <_fflush_r>
 80071ec:	bb30      	cbnz	r0, 800723c <__swbuf_r+0x90>
 80071ee:	68a3      	ldr	r3, [r4, #8]
 80071f0:	3b01      	subs	r3, #1
 80071f2:	60a3      	str	r3, [r4, #8]
 80071f4:	6823      	ldr	r3, [r4, #0]
 80071f6:	1c5a      	adds	r2, r3, #1
 80071f8:	6022      	str	r2, [r4, #0]
 80071fa:	701e      	strb	r6, [r3, #0]
 80071fc:	6963      	ldr	r3, [r4, #20]
 80071fe:	3001      	adds	r0, #1
 8007200:	4283      	cmp	r3, r0
 8007202:	d004      	beq.n	800720e <__swbuf_r+0x62>
 8007204:	89a3      	ldrh	r3, [r4, #12]
 8007206:	07db      	lsls	r3, r3, #31
 8007208:	d506      	bpl.n	8007218 <__swbuf_r+0x6c>
 800720a:	2e0a      	cmp	r6, #10
 800720c:	d104      	bne.n	8007218 <__swbuf_r+0x6c>
 800720e:	4621      	mov	r1, r4
 8007210:	4628      	mov	r0, r5
 8007212:	f000 ff8b 	bl	800812c <_fflush_r>
 8007216:	b988      	cbnz	r0, 800723c <__swbuf_r+0x90>
 8007218:	4638      	mov	r0, r7
 800721a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800721c:	4b0a      	ldr	r3, [pc, #40]	; (8007248 <__swbuf_r+0x9c>)
 800721e:	429c      	cmp	r4, r3
 8007220:	d101      	bne.n	8007226 <__swbuf_r+0x7a>
 8007222:	68ac      	ldr	r4, [r5, #8]
 8007224:	e7cf      	b.n	80071c6 <__swbuf_r+0x1a>
 8007226:	4b09      	ldr	r3, [pc, #36]	; (800724c <__swbuf_r+0xa0>)
 8007228:	429c      	cmp	r4, r3
 800722a:	bf08      	it	eq
 800722c:	68ec      	ldreq	r4, [r5, #12]
 800722e:	e7ca      	b.n	80071c6 <__swbuf_r+0x1a>
 8007230:	4621      	mov	r1, r4
 8007232:	4628      	mov	r0, r5
 8007234:	f000 f80c 	bl	8007250 <__swsetup_r>
 8007238:	2800      	cmp	r0, #0
 800723a:	d0cb      	beq.n	80071d4 <__swbuf_r+0x28>
 800723c:	f04f 37ff 	mov.w	r7, #4294967295
 8007240:	e7ea      	b.n	8007218 <__swbuf_r+0x6c>
 8007242:	bf00      	nop
 8007244:	0800a250 	.word	0x0800a250
 8007248:	0800a270 	.word	0x0800a270
 800724c:	0800a230 	.word	0x0800a230

08007250 <__swsetup_r>:
 8007250:	4b32      	ldr	r3, [pc, #200]	; (800731c <__swsetup_r+0xcc>)
 8007252:	b570      	push	{r4, r5, r6, lr}
 8007254:	681d      	ldr	r5, [r3, #0]
 8007256:	4606      	mov	r6, r0
 8007258:	460c      	mov	r4, r1
 800725a:	b125      	cbz	r5, 8007266 <__swsetup_r+0x16>
 800725c:	69ab      	ldr	r3, [r5, #24]
 800725e:	b913      	cbnz	r3, 8007266 <__swsetup_r+0x16>
 8007260:	4628      	mov	r0, r5
 8007262:	f000 fff7 	bl	8008254 <__sinit>
 8007266:	4b2e      	ldr	r3, [pc, #184]	; (8007320 <__swsetup_r+0xd0>)
 8007268:	429c      	cmp	r4, r3
 800726a:	d10f      	bne.n	800728c <__swsetup_r+0x3c>
 800726c:	686c      	ldr	r4, [r5, #4]
 800726e:	89a3      	ldrh	r3, [r4, #12]
 8007270:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007274:	0719      	lsls	r1, r3, #28
 8007276:	d42c      	bmi.n	80072d2 <__swsetup_r+0x82>
 8007278:	06dd      	lsls	r5, r3, #27
 800727a:	d411      	bmi.n	80072a0 <__swsetup_r+0x50>
 800727c:	2309      	movs	r3, #9
 800727e:	6033      	str	r3, [r6, #0]
 8007280:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007284:	81a3      	strh	r3, [r4, #12]
 8007286:	f04f 30ff 	mov.w	r0, #4294967295
 800728a:	e03e      	b.n	800730a <__swsetup_r+0xba>
 800728c:	4b25      	ldr	r3, [pc, #148]	; (8007324 <__swsetup_r+0xd4>)
 800728e:	429c      	cmp	r4, r3
 8007290:	d101      	bne.n	8007296 <__swsetup_r+0x46>
 8007292:	68ac      	ldr	r4, [r5, #8]
 8007294:	e7eb      	b.n	800726e <__swsetup_r+0x1e>
 8007296:	4b24      	ldr	r3, [pc, #144]	; (8007328 <__swsetup_r+0xd8>)
 8007298:	429c      	cmp	r4, r3
 800729a:	bf08      	it	eq
 800729c:	68ec      	ldreq	r4, [r5, #12]
 800729e:	e7e6      	b.n	800726e <__swsetup_r+0x1e>
 80072a0:	0758      	lsls	r0, r3, #29
 80072a2:	d512      	bpl.n	80072ca <__swsetup_r+0x7a>
 80072a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072a6:	b141      	cbz	r1, 80072ba <__swsetup_r+0x6a>
 80072a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072ac:	4299      	cmp	r1, r3
 80072ae:	d002      	beq.n	80072b6 <__swsetup_r+0x66>
 80072b0:	4630      	mov	r0, r6
 80072b2:	f7fe f811 	bl	80052d8 <_free_r>
 80072b6:	2300      	movs	r3, #0
 80072b8:	6363      	str	r3, [r4, #52]	; 0x34
 80072ba:	89a3      	ldrh	r3, [r4, #12]
 80072bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80072c0:	81a3      	strh	r3, [r4, #12]
 80072c2:	2300      	movs	r3, #0
 80072c4:	6063      	str	r3, [r4, #4]
 80072c6:	6923      	ldr	r3, [r4, #16]
 80072c8:	6023      	str	r3, [r4, #0]
 80072ca:	89a3      	ldrh	r3, [r4, #12]
 80072cc:	f043 0308 	orr.w	r3, r3, #8
 80072d0:	81a3      	strh	r3, [r4, #12]
 80072d2:	6923      	ldr	r3, [r4, #16]
 80072d4:	b94b      	cbnz	r3, 80072ea <__swsetup_r+0x9a>
 80072d6:	89a3      	ldrh	r3, [r4, #12]
 80072d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80072dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072e0:	d003      	beq.n	80072ea <__swsetup_r+0x9a>
 80072e2:	4621      	mov	r1, r4
 80072e4:	4630      	mov	r0, r6
 80072e6:	f001 fbed 	bl	8008ac4 <__smakebuf_r>
 80072ea:	89a0      	ldrh	r0, [r4, #12]
 80072ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80072f0:	f010 0301 	ands.w	r3, r0, #1
 80072f4:	d00a      	beq.n	800730c <__swsetup_r+0xbc>
 80072f6:	2300      	movs	r3, #0
 80072f8:	60a3      	str	r3, [r4, #8]
 80072fa:	6963      	ldr	r3, [r4, #20]
 80072fc:	425b      	negs	r3, r3
 80072fe:	61a3      	str	r3, [r4, #24]
 8007300:	6923      	ldr	r3, [r4, #16]
 8007302:	b943      	cbnz	r3, 8007316 <__swsetup_r+0xc6>
 8007304:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007308:	d1ba      	bne.n	8007280 <__swsetup_r+0x30>
 800730a:	bd70      	pop	{r4, r5, r6, pc}
 800730c:	0781      	lsls	r1, r0, #30
 800730e:	bf58      	it	pl
 8007310:	6963      	ldrpl	r3, [r4, #20]
 8007312:	60a3      	str	r3, [r4, #8]
 8007314:	e7f4      	b.n	8007300 <__swsetup_r+0xb0>
 8007316:	2000      	movs	r0, #0
 8007318:	e7f7      	b.n	800730a <__swsetup_r+0xba>
 800731a:	bf00      	nop
 800731c:	20000024 	.word	0x20000024
 8007320:	0800a250 	.word	0x0800a250
 8007324:	0800a270 	.word	0x0800a270
 8007328:	0800a230 	.word	0x0800a230

0800732c <quorem>:
 800732c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007330:	6903      	ldr	r3, [r0, #16]
 8007332:	690c      	ldr	r4, [r1, #16]
 8007334:	42a3      	cmp	r3, r4
 8007336:	4607      	mov	r7, r0
 8007338:	f2c0 8081 	blt.w	800743e <quorem+0x112>
 800733c:	3c01      	subs	r4, #1
 800733e:	f101 0814 	add.w	r8, r1, #20
 8007342:	f100 0514 	add.w	r5, r0, #20
 8007346:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800734a:	9301      	str	r3, [sp, #4]
 800734c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007350:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007354:	3301      	adds	r3, #1
 8007356:	429a      	cmp	r2, r3
 8007358:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800735c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007360:	fbb2 f6f3 	udiv	r6, r2, r3
 8007364:	d331      	bcc.n	80073ca <quorem+0x9e>
 8007366:	f04f 0e00 	mov.w	lr, #0
 800736a:	4640      	mov	r0, r8
 800736c:	46ac      	mov	ip, r5
 800736e:	46f2      	mov	sl, lr
 8007370:	f850 2b04 	ldr.w	r2, [r0], #4
 8007374:	b293      	uxth	r3, r2
 8007376:	fb06 e303 	mla	r3, r6, r3, lr
 800737a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800737e:	b29b      	uxth	r3, r3
 8007380:	ebaa 0303 	sub.w	r3, sl, r3
 8007384:	0c12      	lsrs	r2, r2, #16
 8007386:	f8dc a000 	ldr.w	sl, [ip]
 800738a:	fb06 e202 	mla	r2, r6, r2, lr
 800738e:	fa13 f38a 	uxtah	r3, r3, sl
 8007392:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007396:	fa1f fa82 	uxth.w	sl, r2
 800739a:	f8dc 2000 	ldr.w	r2, [ip]
 800739e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80073a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80073ac:	4581      	cmp	r9, r0
 80073ae:	f84c 3b04 	str.w	r3, [ip], #4
 80073b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80073b6:	d2db      	bcs.n	8007370 <quorem+0x44>
 80073b8:	f855 300b 	ldr.w	r3, [r5, fp]
 80073bc:	b92b      	cbnz	r3, 80073ca <quorem+0x9e>
 80073be:	9b01      	ldr	r3, [sp, #4]
 80073c0:	3b04      	subs	r3, #4
 80073c2:	429d      	cmp	r5, r3
 80073c4:	461a      	mov	r2, r3
 80073c6:	d32e      	bcc.n	8007426 <quorem+0xfa>
 80073c8:	613c      	str	r4, [r7, #16]
 80073ca:	4638      	mov	r0, r7
 80073cc:	f001 fea0 	bl	8009110 <__mcmp>
 80073d0:	2800      	cmp	r0, #0
 80073d2:	db24      	blt.n	800741e <quorem+0xf2>
 80073d4:	3601      	adds	r6, #1
 80073d6:	4628      	mov	r0, r5
 80073d8:	f04f 0c00 	mov.w	ip, #0
 80073dc:	f858 2b04 	ldr.w	r2, [r8], #4
 80073e0:	f8d0 e000 	ldr.w	lr, [r0]
 80073e4:	b293      	uxth	r3, r2
 80073e6:	ebac 0303 	sub.w	r3, ip, r3
 80073ea:	0c12      	lsrs	r2, r2, #16
 80073ec:	fa13 f38e 	uxtah	r3, r3, lr
 80073f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80073f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80073fe:	45c1      	cmp	r9, r8
 8007400:	f840 3b04 	str.w	r3, [r0], #4
 8007404:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007408:	d2e8      	bcs.n	80073dc <quorem+0xb0>
 800740a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800740e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007412:	b922      	cbnz	r2, 800741e <quorem+0xf2>
 8007414:	3b04      	subs	r3, #4
 8007416:	429d      	cmp	r5, r3
 8007418:	461a      	mov	r2, r3
 800741a:	d30a      	bcc.n	8007432 <quorem+0x106>
 800741c:	613c      	str	r4, [r7, #16]
 800741e:	4630      	mov	r0, r6
 8007420:	b003      	add	sp, #12
 8007422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007426:	6812      	ldr	r2, [r2, #0]
 8007428:	3b04      	subs	r3, #4
 800742a:	2a00      	cmp	r2, #0
 800742c:	d1cc      	bne.n	80073c8 <quorem+0x9c>
 800742e:	3c01      	subs	r4, #1
 8007430:	e7c7      	b.n	80073c2 <quorem+0x96>
 8007432:	6812      	ldr	r2, [r2, #0]
 8007434:	3b04      	subs	r3, #4
 8007436:	2a00      	cmp	r2, #0
 8007438:	d1f0      	bne.n	800741c <quorem+0xf0>
 800743a:	3c01      	subs	r4, #1
 800743c:	e7eb      	b.n	8007416 <quorem+0xea>
 800743e:	2000      	movs	r0, #0
 8007440:	e7ee      	b.n	8007420 <quorem+0xf4>
 8007442:	0000      	movs	r0, r0
 8007444:	0000      	movs	r0, r0
	...

08007448 <_dtoa_r>:
 8007448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800744c:	ed2d 8b02 	vpush	{d8}
 8007450:	ec57 6b10 	vmov	r6, r7, d0
 8007454:	b095      	sub	sp, #84	; 0x54
 8007456:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007458:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800745c:	9105      	str	r1, [sp, #20]
 800745e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007462:	4604      	mov	r4, r0
 8007464:	9209      	str	r2, [sp, #36]	; 0x24
 8007466:	930f      	str	r3, [sp, #60]	; 0x3c
 8007468:	b975      	cbnz	r5, 8007488 <_dtoa_r+0x40>
 800746a:	2010      	movs	r0, #16
 800746c:	f7fd ff06 	bl	800527c <malloc>
 8007470:	4602      	mov	r2, r0
 8007472:	6260      	str	r0, [r4, #36]	; 0x24
 8007474:	b920      	cbnz	r0, 8007480 <_dtoa_r+0x38>
 8007476:	4bb2      	ldr	r3, [pc, #712]	; (8007740 <_dtoa_r+0x2f8>)
 8007478:	21ea      	movs	r1, #234	; 0xea
 800747a:	48b2      	ldr	r0, [pc, #712]	; (8007744 <_dtoa_r+0x2fc>)
 800747c:	f002 fb6c 	bl	8009b58 <__assert_func>
 8007480:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007484:	6005      	str	r5, [r0, #0]
 8007486:	60c5      	str	r5, [r0, #12]
 8007488:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800748a:	6819      	ldr	r1, [r3, #0]
 800748c:	b151      	cbz	r1, 80074a4 <_dtoa_r+0x5c>
 800748e:	685a      	ldr	r2, [r3, #4]
 8007490:	604a      	str	r2, [r1, #4]
 8007492:	2301      	movs	r3, #1
 8007494:	4093      	lsls	r3, r2
 8007496:	608b      	str	r3, [r1, #8]
 8007498:	4620      	mov	r0, r4
 800749a:	f001 fbb1 	bl	8008c00 <_Bfree>
 800749e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074a0:	2200      	movs	r2, #0
 80074a2:	601a      	str	r2, [r3, #0]
 80074a4:	1e3b      	subs	r3, r7, #0
 80074a6:	bfb9      	ittee	lt
 80074a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80074ac:	9303      	strlt	r3, [sp, #12]
 80074ae:	2300      	movge	r3, #0
 80074b0:	f8c8 3000 	strge.w	r3, [r8]
 80074b4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80074b8:	4ba3      	ldr	r3, [pc, #652]	; (8007748 <_dtoa_r+0x300>)
 80074ba:	bfbc      	itt	lt
 80074bc:	2201      	movlt	r2, #1
 80074be:	f8c8 2000 	strlt.w	r2, [r8]
 80074c2:	ea33 0309 	bics.w	r3, r3, r9
 80074c6:	d11b      	bne.n	8007500 <_dtoa_r+0xb8>
 80074c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80074ca:	f242 730f 	movw	r3, #9999	; 0x270f
 80074ce:	6013      	str	r3, [r2, #0]
 80074d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80074d4:	4333      	orrs	r3, r6
 80074d6:	f000 857a 	beq.w	8007fce <_dtoa_r+0xb86>
 80074da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074dc:	b963      	cbnz	r3, 80074f8 <_dtoa_r+0xb0>
 80074de:	4b9b      	ldr	r3, [pc, #620]	; (800774c <_dtoa_r+0x304>)
 80074e0:	e024      	b.n	800752c <_dtoa_r+0xe4>
 80074e2:	4b9b      	ldr	r3, [pc, #620]	; (8007750 <_dtoa_r+0x308>)
 80074e4:	9300      	str	r3, [sp, #0]
 80074e6:	3308      	adds	r3, #8
 80074e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80074ea:	6013      	str	r3, [r2, #0]
 80074ec:	9800      	ldr	r0, [sp, #0]
 80074ee:	b015      	add	sp, #84	; 0x54
 80074f0:	ecbd 8b02 	vpop	{d8}
 80074f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074f8:	4b94      	ldr	r3, [pc, #592]	; (800774c <_dtoa_r+0x304>)
 80074fa:	9300      	str	r3, [sp, #0]
 80074fc:	3303      	adds	r3, #3
 80074fe:	e7f3      	b.n	80074e8 <_dtoa_r+0xa0>
 8007500:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007504:	2200      	movs	r2, #0
 8007506:	ec51 0b17 	vmov	r0, r1, d7
 800750a:	2300      	movs	r3, #0
 800750c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007510:	f7f9 fada 	bl	8000ac8 <__aeabi_dcmpeq>
 8007514:	4680      	mov	r8, r0
 8007516:	b158      	cbz	r0, 8007530 <_dtoa_r+0xe8>
 8007518:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800751a:	2301      	movs	r3, #1
 800751c:	6013      	str	r3, [r2, #0]
 800751e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007520:	2b00      	cmp	r3, #0
 8007522:	f000 8551 	beq.w	8007fc8 <_dtoa_r+0xb80>
 8007526:	488b      	ldr	r0, [pc, #556]	; (8007754 <_dtoa_r+0x30c>)
 8007528:	6018      	str	r0, [r3, #0]
 800752a:	1e43      	subs	r3, r0, #1
 800752c:	9300      	str	r3, [sp, #0]
 800752e:	e7dd      	b.n	80074ec <_dtoa_r+0xa4>
 8007530:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007534:	aa12      	add	r2, sp, #72	; 0x48
 8007536:	a913      	add	r1, sp, #76	; 0x4c
 8007538:	4620      	mov	r0, r4
 800753a:	f001 ff09 	bl	8009350 <__d2b>
 800753e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007542:	4683      	mov	fp, r0
 8007544:	2d00      	cmp	r5, #0
 8007546:	d07c      	beq.n	8007642 <_dtoa_r+0x1fa>
 8007548:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800754a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800754e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007552:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007556:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800755a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800755e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007562:	4b7d      	ldr	r3, [pc, #500]	; (8007758 <_dtoa_r+0x310>)
 8007564:	2200      	movs	r2, #0
 8007566:	4630      	mov	r0, r6
 8007568:	4639      	mov	r1, r7
 800756a:	f7f8 fe8d 	bl	8000288 <__aeabi_dsub>
 800756e:	a36e      	add	r3, pc, #440	; (adr r3, 8007728 <_dtoa_r+0x2e0>)
 8007570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007574:	f7f9 f840 	bl	80005f8 <__aeabi_dmul>
 8007578:	a36d      	add	r3, pc, #436	; (adr r3, 8007730 <_dtoa_r+0x2e8>)
 800757a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757e:	f7f8 fe85 	bl	800028c <__adddf3>
 8007582:	4606      	mov	r6, r0
 8007584:	4628      	mov	r0, r5
 8007586:	460f      	mov	r7, r1
 8007588:	f7f8 ffcc 	bl	8000524 <__aeabi_i2d>
 800758c:	a36a      	add	r3, pc, #424	; (adr r3, 8007738 <_dtoa_r+0x2f0>)
 800758e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007592:	f7f9 f831 	bl	80005f8 <__aeabi_dmul>
 8007596:	4602      	mov	r2, r0
 8007598:	460b      	mov	r3, r1
 800759a:	4630      	mov	r0, r6
 800759c:	4639      	mov	r1, r7
 800759e:	f7f8 fe75 	bl	800028c <__adddf3>
 80075a2:	4606      	mov	r6, r0
 80075a4:	460f      	mov	r7, r1
 80075a6:	f7f9 fad7 	bl	8000b58 <__aeabi_d2iz>
 80075aa:	2200      	movs	r2, #0
 80075ac:	4682      	mov	sl, r0
 80075ae:	2300      	movs	r3, #0
 80075b0:	4630      	mov	r0, r6
 80075b2:	4639      	mov	r1, r7
 80075b4:	f7f9 fa92 	bl	8000adc <__aeabi_dcmplt>
 80075b8:	b148      	cbz	r0, 80075ce <_dtoa_r+0x186>
 80075ba:	4650      	mov	r0, sl
 80075bc:	f7f8 ffb2 	bl	8000524 <__aeabi_i2d>
 80075c0:	4632      	mov	r2, r6
 80075c2:	463b      	mov	r3, r7
 80075c4:	f7f9 fa80 	bl	8000ac8 <__aeabi_dcmpeq>
 80075c8:	b908      	cbnz	r0, 80075ce <_dtoa_r+0x186>
 80075ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80075ce:	f1ba 0f16 	cmp.w	sl, #22
 80075d2:	d854      	bhi.n	800767e <_dtoa_r+0x236>
 80075d4:	4b61      	ldr	r3, [pc, #388]	; (800775c <_dtoa_r+0x314>)
 80075d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80075da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80075e2:	f7f9 fa7b 	bl	8000adc <__aeabi_dcmplt>
 80075e6:	2800      	cmp	r0, #0
 80075e8:	d04b      	beq.n	8007682 <_dtoa_r+0x23a>
 80075ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80075ee:	2300      	movs	r3, #0
 80075f0:	930e      	str	r3, [sp, #56]	; 0x38
 80075f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80075f4:	1b5d      	subs	r5, r3, r5
 80075f6:	1e6b      	subs	r3, r5, #1
 80075f8:	9304      	str	r3, [sp, #16]
 80075fa:	bf43      	ittte	mi
 80075fc:	2300      	movmi	r3, #0
 80075fe:	f1c5 0801 	rsbmi	r8, r5, #1
 8007602:	9304      	strmi	r3, [sp, #16]
 8007604:	f04f 0800 	movpl.w	r8, #0
 8007608:	f1ba 0f00 	cmp.w	sl, #0
 800760c:	db3b      	blt.n	8007686 <_dtoa_r+0x23e>
 800760e:	9b04      	ldr	r3, [sp, #16]
 8007610:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007614:	4453      	add	r3, sl
 8007616:	9304      	str	r3, [sp, #16]
 8007618:	2300      	movs	r3, #0
 800761a:	9306      	str	r3, [sp, #24]
 800761c:	9b05      	ldr	r3, [sp, #20]
 800761e:	2b09      	cmp	r3, #9
 8007620:	d869      	bhi.n	80076f6 <_dtoa_r+0x2ae>
 8007622:	2b05      	cmp	r3, #5
 8007624:	bfc4      	itt	gt
 8007626:	3b04      	subgt	r3, #4
 8007628:	9305      	strgt	r3, [sp, #20]
 800762a:	9b05      	ldr	r3, [sp, #20]
 800762c:	f1a3 0302 	sub.w	r3, r3, #2
 8007630:	bfcc      	ite	gt
 8007632:	2500      	movgt	r5, #0
 8007634:	2501      	movle	r5, #1
 8007636:	2b03      	cmp	r3, #3
 8007638:	d869      	bhi.n	800770e <_dtoa_r+0x2c6>
 800763a:	e8df f003 	tbb	[pc, r3]
 800763e:	4e2c      	.short	0x4e2c
 8007640:	5a4c      	.short	0x5a4c
 8007642:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007646:	441d      	add	r5, r3
 8007648:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800764c:	2b20      	cmp	r3, #32
 800764e:	bfc1      	itttt	gt
 8007650:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007654:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007658:	fa09 f303 	lslgt.w	r3, r9, r3
 800765c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007660:	bfda      	itte	le
 8007662:	f1c3 0320 	rsble	r3, r3, #32
 8007666:	fa06 f003 	lslle.w	r0, r6, r3
 800766a:	4318      	orrgt	r0, r3
 800766c:	f7f8 ff4a 	bl	8000504 <__aeabi_ui2d>
 8007670:	2301      	movs	r3, #1
 8007672:	4606      	mov	r6, r0
 8007674:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007678:	3d01      	subs	r5, #1
 800767a:	9310      	str	r3, [sp, #64]	; 0x40
 800767c:	e771      	b.n	8007562 <_dtoa_r+0x11a>
 800767e:	2301      	movs	r3, #1
 8007680:	e7b6      	b.n	80075f0 <_dtoa_r+0x1a8>
 8007682:	900e      	str	r0, [sp, #56]	; 0x38
 8007684:	e7b5      	b.n	80075f2 <_dtoa_r+0x1aa>
 8007686:	f1ca 0300 	rsb	r3, sl, #0
 800768a:	9306      	str	r3, [sp, #24]
 800768c:	2300      	movs	r3, #0
 800768e:	eba8 080a 	sub.w	r8, r8, sl
 8007692:	930d      	str	r3, [sp, #52]	; 0x34
 8007694:	e7c2      	b.n	800761c <_dtoa_r+0x1d4>
 8007696:	2300      	movs	r3, #0
 8007698:	9308      	str	r3, [sp, #32]
 800769a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800769c:	2b00      	cmp	r3, #0
 800769e:	dc39      	bgt.n	8007714 <_dtoa_r+0x2cc>
 80076a0:	f04f 0901 	mov.w	r9, #1
 80076a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80076a8:	464b      	mov	r3, r9
 80076aa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80076ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80076b0:	2200      	movs	r2, #0
 80076b2:	6042      	str	r2, [r0, #4]
 80076b4:	2204      	movs	r2, #4
 80076b6:	f102 0614 	add.w	r6, r2, #20
 80076ba:	429e      	cmp	r6, r3
 80076bc:	6841      	ldr	r1, [r0, #4]
 80076be:	d92f      	bls.n	8007720 <_dtoa_r+0x2d8>
 80076c0:	4620      	mov	r0, r4
 80076c2:	f001 fa5d 	bl	8008b80 <_Balloc>
 80076c6:	9000      	str	r0, [sp, #0]
 80076c8:	2800      	cmp	r0, #0
 80076ca:	d14b      	bne.n	8007764 <_dtoa_r+0x31c>
 80076cc:	4b24      	ldr	r3, [pc, #144]	; (8007760 <_dtoa_r+0x318>)
 80076ce:	4602      	mov	r2, r0
 80076d0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80076d4:	e6d1      	b.n	800747a <_dtoa_r+0x32>
 80076d6:	2301      	movs	r3, #1
 80076d8:	e7de      	b.n	8007698 <_dtoa_r+0x250>
 80076da:	2300      	movs	r3, #0
 80076dc:	9308      	str	r3, [sp, #32]
 80076de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076e0:	eb0a 0903 	add.w	r9, sl, r3
 80076e4:	f109 0301 	add.w	r3, r9, #1
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	9301      	str	r3, [sp, #4]
 80076ec:	bfb8      	it	lt
 80076ee:	2301      	movlt	r3, #1
 80076f0:	e7dd      	b.n	80076ae <_dtoa_r+0x266>
 80076f2:	2301      	movs	r3, #1
 80076f4:	e7f2      	b.n	80076dc <_dtoa_r+0x294>
 80076f6:	2501      	movs	r5, #1
 80076f8:	2300      	movs	r3, #0
 80076fa:	9305      	str	r3, [sp, #20]
 80076fc:	9508      	str	r5, [sp, #32]
 80076fe:	f04f 39ff 	mov.w	r9, #4294967295
 8007702:	2200      	movs	r2, #0
 8007704:	f8cd 9004 	str.w	r9, [sp, #4]
 8007708:	2312      	movs	r3, #18
 800770a:	9209      	str	r2, [sp, #36]	; 0x24
 800770c:	e7cf      	b.n	80076ae <_dtoa_r+0x266>
 800770e:	2301      	movs	r3, #1
 8007710:	9308      	str	r3, [sp, #32]
 8007712:	e7f4      	b.n	80076fe <_dtoa_r+0x2b6>
 8007714:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007718:	f8cd 9004 	str.w	r9, [sp, #4]
 800771c:	464b      	mov	r3, r9
 800771e:	e7c6      	b.n	80076ae <_dtoa_r+0x266>
 8007720:	3101      	adds	r1, #1
 8007722:	6041      	str	r1, [r0, #4]
 8007724:	0052      	lsls	r2, r2, #1
 8007726:	e7c6      	b.n	80076b6 <_dtoa_r+0x26e>
 8007728:	636f4361 	.word	0x636f4361
 800772c:	3fd287a7 	.word	0x3fd287a7
 8007730:	8b60c8b3 	.word	0x8b60c8b3
 8007734:	3fc68a28 	.word	0x3fc68a28
 8007738:	509f79fb 	.word	0x509f79fb
 800773c:	3fd34413 	.word	0x3fd34413
 8007740:	0800a1a6 	.word	0x0800a1a6
 8007744:	0800a1bd 	.word	0x0800a1bd
 8007748:	7ff00000 	.word	0x7ff00000
 800774c:	0800a1a2 	.word	0x0800a1a2
 8007750:	0800a199 	.word	0x0800a199
 8007754:	0800a01d 	.word	0x0800a01d
 8007758:	3ff80000 	.word	0x3ff80000
 800775c:	0800a398 	.word	0x0800a398
 8007760:	0800a21c 	.word	0x0800a21c
 8007764:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007766:	9a00      	ldr	r2, [sp, #0]
 8007768:	601a      	str	r2, [r3, #0]
 800776a:	9b01      	ldr	r3, [sp, #4]
 800776c:	2b0e      	cmp	r3, #14
 800776e:	f200 80ad 	bhi.w	80078cc <_dtoa_r+0x484>
 8007772:	2d00      	cmp	r5, #0
 8007774:	f000 80aa 	beq.w	80078cc <_dtoa_r+0x484>
 8007778:	f1ba 0f00 	cmp.w	sl, #0
 800777c:	dd36      	ble.n	80077ec <_dtoa_r+0x3a4>
 800777e:	4ac3      	ldr	r2, [pc, #780]	; (8007a8c <_dtoa_r+0x644>)
 8007780:	f00a 030f 	and.w	r3, sl, #15
 8007784:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007788:	ed93 7b00 	vldr	d7, [r3]
 800778c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007790:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007794:	eeb0 8a47 	vmov.f32	s16, s14
 8007798:	eef0 8a67 	vmov.f32	s17, s15
 800779c:	d016      	beq.n	80077cc <_dtoa_r+0x384>
 800779e:	4bbc      	ldr	r3, [pc, #752]	; (8007a90 <_dtoa_r+0x648>)
 80077a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80077a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80077a8:	f7f9 f850 	bl	800084c <__aeabi_ddiv>
 80077ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077b0:	f007 070f 	and.w	r7, r7, #15
 80077b4:	2503      	movs	r5, #3
 80077b6:	4eb6      	ldr	r6, [pc, #728]	; (8007a90 <_dtoa_r+0x648>)
 80077b8:	b957      	cbnz	r7, 80077d0 <_dtoa_r+0x388>
 80077ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077be:	ec53 2b18 	vmov	r2, r3, d8
 80077c2:	f7f9 f843 	bl	800084c <__aeabi_ddiv>
 80077c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077ca:	e029      	b.n	8007820 <_dtoa_r+0x3d8>
 80077cc:	2502      	movs	r5, #2
 80077ce:	e7f2      	b.n	80077b6 <_dtoa_r+0x36e>
 80077d0:	07f9      	lsls	r1, r7, #31
 80077d2:	d508      	bpl.n	80077e6 <_dtoa_r+0x39e>
 80077d4:	ec51 0b18 	vmov	r0, r1, d8
 80077d8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80077dc:	f7f8 ff0c 	bl	80005f8 <__aeabi_dmul>
 80077e0:	ec41 0b18 	vmov	d8, r0, r1
 80077e4:	3501      	adds	r5, #1
 80077e6:	107f      	asrs	r7, r7, #1
 80077e8:	3608      	adds	r6, #8
 80077ea:	e7e5      	b.n	80077b8 <_dtoa_r+0x370>
 80077ec:	f000 80a6 	beq.w	800793c <_dtoa_r+0x4f4>
 80077f0:	f1ca 0600 	rsb	r6, sl, #0
 80077f4:	4ba5      	ldr	r3, [pc, #660]	; (8007a8c <_dtoa_r+0x644>)
 80077f6:	4fa6      	ldr	r7, [pc, #664]	; (8007a90 <_dtoa_r+0x648>)
 80077f8:	f006 020f 	and.w	r2, r6, #15
 80077fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007804:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007808:	f7f8 fef6 	bl	80005f8 <__aeabi_dmul>
 800780c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007810:	1136      	asrs	r6, r6, #4
 8007812:	2300      	movs	r3, #0
 8007814:	2502      	movs	r5, #2
 8007816:	2e00      	cmp	r6, #0
 8007818:	f040 8085 	bne.w	8007926 <_dtoa_r+0x4de>
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1d2      	bne.n	80077c6 <_dtoa_r+0x37e>
 8007820:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007822:	2b00      	cmp	r3, #0
 8007824:	f000 808c 	beq.w	8007940 <_dtoa_r+0x4f8>
 8007828:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800782c:	4b99      	ldr	r3, [pc, #612]	; (8007a94 <_dtoa_r+0x64c>)
 800782e:	2200      	movs	r2, #0
 8007830:	4630      	mov	r0, r6
 8007832:	4639      	mov	r1, r7
 8007834:	f7f9 f952 	bl	8000adc <__aeabi_dcmplt>
 8007838:	2800      	cmp	r0, #0
 800783a:	f000 8081 	beq.w	8007940 <_dtoa_r+0x4f8>
 800783e:	9b01      	ldr	r3, [sp, #4]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d07d      	beq.n	8007940 <_dtoa_r+0x4f8>
 8007844:	f1b9 0f00 	cmp.w	r9, #0
 8007848:	dd3c      	ble.n	80078c4 <_dtoa_r+0x47c>
 800784a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800784e:	9307      	str	r3, [sp, #28]
 8007850:	2200      	movs	r2, #0
 8007852:	4b91      	ldr	r3, [pc, #580]	; (8007a98 <_dtoa_r+0x650>)
 8007854:	4630      	mov	r0, r6
 8007856:	4639      	mov	r1, r7
 8007858:	f7f8 fece 	bl	80005f8 <__aeabi_dmul>
 800785c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007860:	3501      	adds	r5, #1
 8007862:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007866:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800786a:	4628      	mov	r0, r5
 800786c:	f7f8 fe5a 	bl	8000524 <__aeabi_i2d>
 8007870:	4632      	mov	r2, r6
 8007872:	463b      	mov	r3, r7
 8007874:	f7f8 fec0 	bl	80005f8 <__aeabi_dmul>
 8007878:	4b88      	ldr	r3, [pc, #544]	; (8007a9c <_dtoa_r+0x654>)
 800787a:	2200      	movs	r2, #0
 800787c:	f7f8 fd06 	bl	800028c <__adddf3>
 8007880:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007884:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007888:	9303      	str	r3, [sp, #12]
 800788a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800788c:	2b00      	cmp	r3, #0
 800788e:	d15c      	bne.n	800794a <_dtoa_r+0x502>
 8007890:	4b83      	ldr	r3, [pc, #524]	; (8007aa0 <_dtoa_r+0x658>)
 8007892:	2200      	movs	r2, #0
 8007894:	4630      	mov	r0, r6
 8007896:	4639      	mov	r1, r7
 8007898:	f7f8 fcf6 	bl	8000288 <__aeabi_dsub>
 800789c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078a0:	4606      	mov	r6, r0
 80078a2:	460f      	mov	r7, r1
 80078a4:	f7f9 f938 	bl	8000b18 <__aeabi_dcmpgt>
 80078a8:	2800      	cmp	r0, #0
 80078aa:	f040 8296 	bne.w	8007dda <_dtoa_r+0x992>
 80078ae:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80078b2:	4630      	mov	r0, r6
 80078b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80078b8:	4639      	mov	r1, r7
 80078ba:	f7f9 f90f 	bl	8000adc <__aeabi_dcmplt>
 80078be:	2800      	cmp	r0, #0
 80078c0:	f040 8288 	bne.w	8007dd4 <_dtoa_r+0x98c>
 80078c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80078c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80078cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	f2c0 8158 	blt.w	8007b84 <_dtoa_r+0x73c>
 80078d4:	f1ba 0f0e 	cmp.w	sl, #14
 80078d8:	f300 8154 	bgt.w	8007b84 <_dtoa_r+0x73c>
 80078dc:	4b6b      	ldr	r3, [pc, #428]	; (8007a8c <_dtoa_r+0x644>)
 80078de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80078e2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80078e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	f280 80e3 	bge.w	8007ab4 <_dtoa_r+0x66c>
 80078ee:	9b01      	ldr	r3, [sp, #4]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	f300 80df 	bgt.w	8007ab4 <_dtoa_r+0x66c>
 80078f6:	f040 826d 	bne.w	8007dd4 <_dtoa_r+0x98c>
 80078fa:	4b69      	ldr	r3, [pc, #420]	; (8007aa0 <_dtoa_r+0x658>)
 80078fc:	2200      	movs	r2, #0
 80078fe:	4640      	mov	r0, r8
 8007900:	4649      	mov	r1, r9
 8007902:	f7f8 fe79 	bl	80005f8 <__aeabi_dmul>
 8007906:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800790a:	f7f9 f8fb 	bl	8000b04 <__aeabi_dcmpge>
 800790e:	9e01      	ldr	r6, [sp, #4]
 8007910:	4637      	mov	r7, r6
 8007912:	2800      	cmp	r0, #0
 8007914:	f040 8243 	bne.w	8007d9e <_dtoa_r+0x956>
 8007918:	9d00      	ldr	r5, [sp, #0]
 800791a:	2331      	movs	r3, #49	; 0x31
 800791c:	f805 3b01 	strb.w	r3, [r5], #1
 8007920:	f10a 0a01 	add.w	sl, sl, #1
 8007924:	e23f      	b.n	8007da6 <_dtoa_r+0x95e>
 8007926:	07f2      	lsls	r2, r6, #31
 8007928:	d505      	bpl.n	8007936 <_dtoa_r+0x4ee>
 800792a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800792e:	f7f8 fe63 	bl	80005f8 <__aeabi_dmul>
 8007932:	3501      	adds	r5, #1
 8007934:	2301      	movs	r3, #1
 8007936:	1076      	asrs	r6, r6, #1
 8007938:	3708      	adds	r7, #8
 800793a:	e76c      	b.n	8007816 <_dtoa_r+0x3ce>
 800793c:	2502      	movs	r5, #2
 800793e:	e76f      	b.n	8007820 <_dtoa_r+0x3d8>
 8007940:	9b01      	ldr	r3, [sp, #4]
 8007942:	f8cd a01c 	str.w	sl, [sp, #28]
 8007946:	930c      	str	r3, [sp, #48]	; 0x30
 8007948:	e78d      	b.n	8007866 <_dtoa_r+0x41e>
 800794a:	9900      	ldr	r1, [sp, #0]
 800794c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800794e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007950:	4b4e      	ldr	r3, [pc, #312]	; (8007a8c <_dtoa_r+0x644>)
 8007952:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007956:	4401      	add	r1, r0
 8007958:	9102      	str	r1, [sp, #8]
 800795a:	9908      	ldr	r1, [sp, #32]
 800795c:	eeb0 8a47 	vmov.f32	s16, s14
 8007960:	eef0 8a67 	vmov.f32	s17, s15
 8007964:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007968:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800796c:	2900      	cmp	r1, #0
 800796e:	d045      	beq.n	80079fc <_dtoa_r+0x5b4>
 8007970:	494c      	ldr	r1, [pc, #304]	; (8007aa4 <_dtoa_r+0x65c>)
 8007972:	2000      	movs	r0, #0
 8007974:	f7f8 ff6a 	bl	800084c <__aeabi_ddiv>
 8007978:	ec53 2b18 	vmov	r2, r3, d8
 800797c:	f7f8 fc84 	bl	8000288 <__aeabi_dsub>
 8007980:	9d00      	ldr	r5, [sp, #0]
 8007982:	ec41 0b18 	vmov	d8, r0, r1
 8007986:	4639      	mov	r1, r7
 8007988:	4630      	mov	r0, r6
 800798a:	f7f9 f8e5 	bl	8000b58 <__aeabi_d2iz>
 800798e:	900c      	str	r0, [sp, #48]	; 0x30
 8007990:	f7f8 fdc8 	bl	8000524 <__aeabi_i2d>
 8007994:	4602      	mov	r2, r0
 8007996:	460b      	mov	r3, r1
 8007998:	4630      	mov	r0, r6
 800799a:	4639      	mov	r1, r7
 800799c:	f7f8 fc74 	bl	8000288 <__aeabi_dsub>
 80079a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079a2:	3330      	adds	r3, #48	; 0x30
 80079a4:	f805 3b01 	strb.w	r3, [r5], #1
 80079a8:	ec53 2b18 	vmov	r2, r3, d8
 80079ac:	4606      	mov	r6, r0
 80079ae:	460f      	mov	r7, r1
 80079b0:	f7f9 f894 	bl	8000adc <__aeabi_dcmplt>
 80079b4:	2800      	cmp	r0, #0
 80079b6:	d165      	bne.n	8007a84 <_dtoa_r+0x63c>
 80079b8:	4632      	mov	r2, r6
 80079ba:	463b      	mov	r3, r7
 80079bc:	4935      	ldr	r1, [pc, #212]	; (8007a94 <_dtoa_r+0x64c>)
 80079be:	2000      	movs	r0, #0
 80079c0:	f7f8 fc62 	bl	8000288 <__aeabi_dsub>
 80079c4:	ec53 2b18 	vmov	r2, r3, d8
 80079c8:	f7f9 f888 	bl	8000adc <__aeabi_dcmplt>
 80079cc:	2800      	cmp	r0, #0
 80079ce:	f040 80b9 	bne.w	8007b44 <_dtoa_r+0x6fc>
 80079d2:	9b02      	ldr	r3, [sp, #8]
 80079d4:	429d      	cmp	r5, r3
 80079d6:	f43f af75 	beq.w	80078c4 <_dtoa_r+0x47c>
 80079da:	4b2f      	ldr	r3, [pc, #188]	; (8007a98 <_dtoa_r+0x650>)
 80079dc:	ec51 0b18 	vmov	r0, r1, d8
 80079e0:	2200      	movs	r2, #0
 80079e2:	f7f8 fe09 	bl	80005f8 <__aeabi_dmul>
 80079e6:	4b2c      	ldr	r3, [pc, #176]	; (8007a98 <_dtoa_r+0x650>)
 80079e8:	ec41 0b18 	vmov	d8, r0, r1
 80079ec:	2200      	movs	r2, #0
 80079ee:	4630      	mov	r0, r6
 80079f0:	4639      	mov	r1, r7
 80079f2:	f7f8 fe01 	bl	80005f8 <__aeabi_dmul>
 80079f6:	4606      	mov	r6, r0
 80079f8:	460f      	mov	r7, r1
 80079fa:	e7c4      	b.n	8007986 <_dtoa_r+0x53e>
 80079fc:	ec51 0b17 	vmov	r0, r1, d7
 8007a00:	f7f8 fdfa 	bl	80005f8 <__aeabi_dmul>
 8007a04:	9b02      	ldr	r3, [sp, #8]
 8007a06:	9d00      	ldr	r5, [sp, #0]
 8007a08:	930c      	str	r3, [sp, #48]	; 0x30
 8007a0a:	ec41 0b18 	vmov	d8, r0, r1
 8007a0e:	4639      	mov	r1, r7
 8007a10:	4630      	mov	r0, r6
 8007a12:	f7f9 f8a1 	bl	8000b58 <__aeabi_d2iz>
 8007a16:	9011      	str	r0, [sp, #68]	; 0x44
 8007a18:	f7f8 fd84 	bl	8000524 <__aeabi_i2d>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	460b      	mov	r3, r1
 8007a20:	4630      	mov	r0, r6
 8007a22:	4639      	mov	r1, r7
 8007a24:	f7f8 fc30 	bl	8000288 <__aeabi_dsub>
 8007a28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a2a:	3330      	adds	r3, #48	; 0x30
 8007a2c:	f805 3b01 	strb.w	r3, [r5], #1
 8007a30:	9b02      	ldr	r3, [sp, #8]
 8007a32:	429d      	cmp	r5, r3
 8007a34:	4606      	mov	r6, r0
 8007a36:	460f      	mov	r7, r1
 8007a38:	f04f 0200 	mov.w	r2, #0
 8007a3c:	d134      	bne.n	8007aa8 <_dtoa_r+0x660>
 8007a3e:	4b19      	ldr	r3, [pc, #100]	; (8007aa4 <_dtoa_r+0x65c>)
 8007a40:	ec51 0b18 	vmov	r0, r1, d8
 8007a44:	f7f8 fc22 	bl	800028c <__adddf3>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	4630      	mov	r0, r6
 8007a4e:	4639      	mov	r1, r7
 8007a50:	f7f9 f862 	bl	8000b18 <__aeabi_dcmpgt>
 8007a54:	2800      	cmp	r0, #0
 8007a56:	d175      	bne.n	8007b44 <_dtoa_r+0x6fc>
 8007a58:	ec53 2b18 	vmov	r2, r3, d8
 8007a5c:	4911      	ldr	r1, [pc, #68]	; (8007aa4 <_dtoa_r+0x65c>)
 8007a5e:	2000      	movs	r0, #0
 8007a60:	f7f8 fc12 	bl	8000288 <__aeabi_dsub>
 8007a64:	4602      	mov	r2, r0
 8007a66:	460b      	mov	r3, r1
 8007a68:	4630      	mov	r0, r6
 8007a6a:	4639      	mov	r1, r7
 8007a6c:	f7f9 f836 	bl	8000adc <__aeabi_dcmplt>
 8007a70:	2800      	cmp	r0, #0
 8007a72:	f43f af27 	beq.w	80078c4 <_dtoa_r+0x47c>
 8007a76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a78:	1e6b      	subs	r3, r5, #1
 8007a7a:	930c      	str	r3, [sp, #48]	; 0x30
 8007a7c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007a80:	2b30      	cmp	r3, #48	; 0x30
 8007a82:	d0f8      	beq.n	8007a76 <_dtoa_r+0x62e>
 8007a84:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007a88:	e04a      	b.n	8007b20 <_dtoa_r+0x6d8>
 8007a8a:	bf00      	nop
 8007a8c:	0800a398 	.word	0x0800a398
 8007a90:	0800a370 	.word	0x0800a370
 8007a94:	3ff00000 	.word	0x3ff00000
 8007a98:	40240000 	.word	0x40240000
 8007a9c:	401c0000 	.word	0x401c0000
 8007aa0:	40140000 	.word	0x40140000
 8007aa4:	3fe00000 	.word	0x3fe00000
 8007aa8:	4baf      	ldr	r3, [pc, #700]	; (8007d68 <_dtoa_r+0x920>)
 8007aaa:	f7f8 fda5 	bl	80005f8 <__aeabi_dmul>
 8007aae:	4606      	mov	r6, r0
 8007ab0:	460f      	mov	r7, r1
 8007ab2:	e7ac      	b.n	8007a0e <_dtoa_r+0x5c6>
 8007ab4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007ab8:	9d00      	ldr	r5, [sp, #0]
 8007aba:	4642      	mov	r2, r8
 8007abc:	464b      	mov	r3, r9
 8007abe:	4630      	mov	r0, r6
 8007ac0:	4639      	mov	r1, r7
 8007ac2:	f7f8 fec3 	bl	800084c <__aeabi_ddiv>
 8007ac6:	f7f9 f847 	bl	8000b58 <__aeabi_d2iz>
 8007aca:	9002      	str	r0, [sp, #8]
 8007acc:	f7f8 fd2a 	bl	8000524 <__aeabi_i2d>
 8007ad0:	4642      	mov	r2, r8
 8007ad2:	464b      	mov	r3, r9
 8007ad4:	f7f8 fd90 	bl	80005f8 <__aeabi_dmul>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	460b      	mov	r3, r1
 8007adc:	4630      	mov	r0, r6
 8007ade:	4639      	mov	r1, r7
 8007ae0:	f7f8 fbd2 	bl	8000288 <__aeabi_dsub>
 8007ae4:	9e02      	ldr	r6, [sp, #8]
 8007ae6:	9f01      	ldr	r7, [sp, #4]
 8007ae8:	3630      	adds	r6, #48	; 0x30
 8007aea:	f805 6b01 	strb.w	r6, [r5], #1
 8007aee:	9e00      	ldr	r6, [sp, #0]
 8007af0:	1bae      	subs	r6, r5, r6
 8007af2:	42b7      	cmp	r7, r6
 8007af4:	4602      	mov	r2, r0
 8007af6:	460b      	mov	r3, r1
 8007af8:	d137      	bne.n	8007b6a <_dtoa_r+0x722>
 8007afa:	f7f8 fbc7 	bl	800028c <__adddf3>
 8007afe:	4642      	mov	r2, r8
 8007b00:	464b      	mov	r3, r9
 8007b02:	4606      	mov	r6, r0
 8007b04:	460f      	mov	r7, r1
 8007b06:	f7f9 f807 	bl	8000b18 <__aeabi_dcmpgt>
 8007b0a:	b9c8      	cbnz	r0, 8007b40 <_dtoa_r+0x6f8>
 8007b0c:	4642      	mov	r2, r8
 8007b0e:	464b      	mov	r3, r9
 8007b10:	4630      	mov	r0, r6
 8007b12:	4639      	mov	r1, r7
 8007b14:	f7f8 ffd8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b18:	b110      	cbz	r0, 8007b20 <_dtoa_r+0x6d8>
 8007b1a:	9b02      	ldr	r3, [sp, #8]
 8007b1c:	07d9      	lsls	r1, r3, #31
 8007b1e:	d40f      	bmi.n	8007b40 <_dtoa_r+0x6f8>
 8007b20:	4620      	mov	r0, r4
 8007b22:	4659      	mov	r1, fp
 8007b24:	f001 f86c 	bl	8008c00 <_Bfree>
 8007b28:	2300      	movs	r3, #0
 8007b2a:	702b      	strb	r3, [r5, #0]
 8007b2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b2e:	f10a 0001 	add.w	r0, sl, #1
 8007b32:	6018      	str	r0, [r3, #0]
 8007b34:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f43f acd8 	beq.w	80074ec <_dtoa_r+0xa4>
 8007b3c:	601d      	str	r5, [r3, #0]
 8007b3e:	e4d5      	b.n	80074ec <_dtoa_r+0xa4>
 8007b40:	f8cd a01c 	str.w	sl, [sp, #28]
 8007b44:	462b      	mov	r3, r5
 8007b46:	461d      	mov	r5, r3
 8007b48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b4c:	2a39      	cmp	r2, #57	; 0x39
 8007b4e:	d108      	bne.n	8007b62 <_dtoa_r+0x71a>
 8007b50:	9a00      	ldr	r2, [sp, #0]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d1f7      	bne.n	8007b46 <_dtoa_r+0x6fe>
 8007b56:	9a07      	ldr	r2, [sp, #28]
 8007b58:	9900      	ldr	r1, [sp, #0]
 8007b5a:	3201      	adds	r2, #1
 8007b5c:	9207      	str	r2, [sp, #28]
 8007b5e:	2230      	movs	r2, #48	; 0x30
 8007b60:	700a      	strb	r2, [r1, #0]
 8007b62:	781a      	ldrb	r2, [r3, #0]
 8007b64:	3201      	adds	r2, #1
 8007b66:	701a      	strb	r2, [r3, #0]
 8007b68:	e78c      	b.n	8007a84 <_dtoa_r+0x63c>
 8007b6a:	4b7f      	ldr	r3, [pc, #508]	; (8007d68 <_dtoa_r+0x920>)
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f7f8 fd43 	bl	80005f8 <__aeabi_dmul>
 8007b72:	2200      	movs	r2, #0
 8007b74:	2300      	movs	r3, #0
 8007b76:	4606      	mov	r6, r0
 8007b78:	460f      	mov	r7, r1
 8007b7a:	f7f8 ffa5 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b7e:	2800      	cmp	r0, #0
 8007b80:	d09b      	beq.n	8007aba <_dtoa_r+0x672>
 8007b82:	e7cd      	b.n	8007b20 <_dtoa_r+0x6d8>
 8007b84:	9a08      	ldr	r2, [sp, #32]
 8007b86:	2a00      	cmp	r2, #0
 8007b88:	f000 80c4 	beq.w	8007d14 <_dtoa_r+0x8cc>
 8007b8c:	9a05      	ldr	r2, [sp, #20]
 8007b8e:	2a01      	cmp	r2, #1
 8007b90:	f300 80a8 	bgt.w	8007ce4 <_dtoa_r+0x89c>
 8007b94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007b96:	2a00      	cmp	r2, #0
 8007b98:	f000 80a0 	beq.w	8007cdc <_dtoa_r+0x894>
 8007b9c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007ba0:	9e06      	ldr	r6, [sp, #24]
 8007ba2:	4645      	mov	r5, r8
 8007ba4:	9a04      	ldr	r2, [sp, #16]
 8007ba6:	2101      	movs	r1, #1
 8007ba8:	441a      	add	r2, r3
 8007baa:	4620      	mov	r0, r4
 8007bac:	4498      	add	r8, r3
 8007bae:	9204      	str	r2, [sp, #16]
 8007bb0:	f001 f92c 	bl	8008e0c <__i2b>
 8007bb4:	4607      	mov	r7, r0
 8007bb6:	2d00      	cmp	r5, #0
 8007bb8:	dd0b      	ble.n	8007bd2 <_dtoa_r+0x78a>
 8007bba:	9b04      	ldr	r3, [sp, #16]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	dd08      	ble.n	8007bd2 <_dtoa_r+0x78a>
 8007bc0:	42ab      	cmp	r3, r5
 8007bc2:	9a04      	ldr	r2, [sp, #16]
 8007bc4:	bfa8      	it	ge
 8007bc6:	462b      	movge	r3, r5
 8007bc8:	eba8 0803 	sub.w	r8, r8, r3
 8007bcc:	1aed      	subs	r5, r5, r3
 8007bce:	1ad3      	subs	r3, r2, r3
 8007bd0:	9304      	str	r3, [sp, #16]
 8007bd2:	9b06      	ldr	r3, [sp, #24]
 8007bd4:	b1fb      	cbz	r3, 8007c16 <_dtoa_r+0x7ce>
 8007bd6:	9b08      	ldr	r3, [sp, #32]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	f000 809f 	beq.w	8007d1c <_dtoa_r+0x8d4>
 8007bde:	2e00      	cmp	r6, #0
 8007be0:	dd11      	ble.n	8007c06 <_dtoa_r+0x7be>
 8007be2:	4639      	mov	r1, r7
 8007be4:	4632      	mov	r2, r6
 8007be6:	4620      	mov	r0, r4
 8007be8:	f001 f9cc 	bl	8008f84 <__pow5mult>
 8007bec:	465a      	mov	r2, fp
 8007bee:	4601      	mov	r1, r0
 8007bf0:	4607      	mov	r7, r0
 8007bf2:	4620      	mov	r0, r4
 8007bf4:	f001 f920 	bl	8008e38 <__multiply>
 8007bf8:	4659      	mov	r1, fp
 8007bfa:	9007      	str	r0, [sp, #28]
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	f000 ffff 	bl	8008c00 <_Bfree>
 8007c02:	9b07      	ldr	r3, [sp, #28]
 8007c04:	469b      	mov	fp, r3
 8007c06:	9b06      	ldr	r3, [sp, #24]
 8007c08:	1b9a      	subs	r2, r3, r6
 8007c0a:	d004      	beq.n	8007c16 <_dtoa_r+0x7ce>
 8007c0c:	4659      	mov	r1, fp
 8007c0e:	4620      	mov	r0, r4
 8007c10:	f001 f9b8 	bl	8008f84 <__pow5mult>
 8007c14:	4683      	mov	fp, r0
 8007c16:	2101      	movs	r1, #1
 8007c18:	4620      	mov	r0, r4
 8007c1a:	f001 f8f7 	bl	8008e0c <__i2b>
 8007c1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	4606      	mov	r6, r0
 8007c24:	dd7c      	ble.n	8007d20 <_dtoa_r+0x8d8>
 8007c26:	461a      	mov	r2, r3
 8007c28:	4601      	mov	r1, r0
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	f001 f9aa 	bl	8008f84 <__pow5mult>
 8007c30:	9b05      	ldr	r3, [sp, #20]
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	4606      	mov	r6, r0
 8007c36:	dd76      	ble.n	8007d26 <_dtoa_r+0x8de>
 8007c38:	2300      	movs	r3, #0
 8007c3a:	9306      	str	r3, [sp, #24]
 8007c3c:	6933      	ldr	r3, [r6, #16]
 8007c3e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007c42:	6918      	ldr	r0, [r3, #16]
 8007c44:	f001 f892 	bl	8008d6c <__hi0bits>
 8007c48:	f1c0 0020 	rsb	r0, r0, #32
 8007c4c:	9b04      	ldr	r3, [sp, #16]
 8007c4e:	4418      	add	r0, r3
 8007c50:	f010 001f 	ands.w	r0, r0, #31
 8007c54:	f000 8086 	beq.w	8007d64 <_dtoa_r+0x91c>
 8007c58:	f1c0 0320 	rsb	r3, r0, #32
 8007c5c:	2b04      	cmp	r3, #4
 8007c5e:	dd7f      	ble.n	8007d60 <_dtoa_r+0x918>
 8007c60:	f1c0 001c 	rsb	r0, r0, #28
 8007c64:	9b04      	ldr	r3, [sp, #16]
 8007c66:	4403      	add	r3, r0
 8007c68:	4480      	add	r8, r0
 8007c6a:	4405      	add	r5, r0
 8007c6c:	9304      	str	r3, [sp, #16]
 8007c6e:	f1b8 0f00 	cmp.w	r8, #0
 8007c72:	dd05      	ble.n	8007c80 <_dtoa_r+0x838>
 8007c74:	4659      	mov	r1, fp
 8007c76:	4642      	mov	r2, r8
 8007c78:	4620      	mov	r0, r4
 8007c7a:	f001 f9dd 	bl	8009038 <__lshift>
 8007c7e:	4683      	mov	fp, r0
 8007c80:	9b04      	ldr	r3, [sp, #16]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	dd05      	ble.n	8007c92 <_dtoa_r+0x84a>
 8007c86:	4631      	mov	r1, r6
 8007c88:	461a      	mov	r2, r3
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	f001 f9d4 	bl	8009038 <__lshift>
 8007c90:	4606      	mov	r6, r0
 8007c92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d069      	beq.n	8007d6c <_dtoa_r+0x924>
 8007c98:	4631      	mov	r1, r6
 8007c9a:	4658      	mov	r0, fp
 8007c9c:	f001 fa38 	bl	8009110 <__mcmp>
 8007ca0:	2800      	cmp	r0, #0
 8007ca2:	da63      	bge.n	8007d6c <_dtoa_r+0x924>
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	4659      	mov	r1, fp
 8007ca8:	220a      	movs	r2, #10
 8007caa:	4620      	mov	r0, r4
 8007cac:	f000 ffca 	bl	8008c44 <__multadd>
 8007cb0:	9b08      	ldr	r3, [sp, #32]
 8007cb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007cb6:	4683      	mov	fp, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f000 818f 	beq.w	8007fdc <_dtoa_r+0xb94>
 8007cbe:	4639      	mov	r1, r7
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	220a      	movs	r2, #10
 8007cc4:	4620      	mov	r0, r4
 8007cc6:	f000 ffbd 	bl	8008c44 <__multadd>
 8007cca:	f1b9 0f00 	cmp.w	r9, #0
 8007cce:	4607      	mov	r7, r0
 8007cd0:	f300 808e 	bgt.w	8007df0 <_dtoa_r+0x9a8>
 8007cd4:	9b05      	ldr	r3, [sp, #20]
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	dc50      	bgt.n	8007d7c <_dtoa_r+0x934>
 8007cda:	e089      	b.n	8007df0 <_dtoa_r+0x9a8>
 8007cdc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007cde:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007ce2:	e75d      	b.n	8007ba0 <_dtoa_r+0x758>
 8007ce4:	9b01      	ldr	r3, [sp, #4]
 8007ce6:	1e5e      	subs	r6, r3, #1
 8007ce8:	9b06      	ldr	r3, [sp, #24]
 8007cea:	42b3      	cmp	r3, r6
 8007cec:	bfbf      	itttt	lt
 8007cee:	9b06      	ldrlt	r3, [sp, #24]
 8007cf0:	9606      	strlt	r6, [sp, #24]
 8007cf2:	1af2      	sublt	r2, r6, r3
 8007cf4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007cf6:	bfb6      	itet	lt
 8007cf8:	189b      	addlt	r3, r3, r2
 8007cfa:	1b9e      	subge	r6, r3, r6
 8007cfc:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007cfe:	9b01      	ldr	r3, [sp, #4]
 8007d00:	bfb8      	it	lt
 8007d02:	2600      	movlt	r6, #0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	bfb5      	itete	lt
 8007d08:	eba8 0503 	sublt.w	r5, r8, r3
 8007d0c:	9b01      	ldrge	r3, [sp, #4]
 8007d0e:	2300      	movlt	r3, #0
 8007d10:	4645      	movge	r5, r8
 8007d12:	e747      	b.n	8007ba4 <_dtoa_r+0x75c>
 8007d14:	9e06      	ldr	r6, [sp, #24]
 8007d16:	9f08      	ldr	r7, [sp, #32]
 8007d18:	4645      	mov	r5, r8
 8007d1a:	e74c      	b.n	8007bb6 <_dtoa_r+0x76e>
 8007d1c:	9a06      	ldr	r2, [sp, #24]
 8007d1e:	e775      	b.n	8007c0c <_dtoa_r+0x7c4>
 8007d20:	9b05      	ldr	r3, [sp, #20]
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	dc18      	bgt.n	8007d58 <_dtoa_r+0x910>
 8007d26:	9b02      	ldr	r3, [sp, #8]
 8007d28:	b9b3      	cbnz	r3, 8007d58 <_dtoa_r+0x910>
 8007d2a:	9b03      	ldr	r3, [sp, #12]
 8007d2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d30:	b9a3      	cbnz	r3, 8007d5c <_dtoa_r+0x914>
 8007d32:	9b03      	ldr	r3, [sp, #12]
 8007d34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d38:	0d1b      	lsrs	r3, r3, #20
 8007d3a:	051b      	lsls	r3, r3, #20
 8007d3c:	b12b      	cbz	r3, 8007d4a <_dtoa_r+0x902>
 8007d3e:	9b04      	ldr	r3, [sp, #16]
 8007d40:	3301      	adds	r3, #1
 8007d42:	9304      	str	r3, [sp, #16]
 8007d44:	f108 0801 	add.w	r8, r8, #1
 8007d48:	2301      	movs	r3, #1
 8007d4a:	9306      	str	r3, [sp, #24]
 8007d4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	f47f af74 	bne.w	8007c3c <_dtoa_r+0x7f4>
 8007d54:	2001      	movs	r0, #1
 8007d56:	e779      	b.n	8007c4c <_dtoa_r+0x804>
 8007d58:	2300      	movs	r3, #0
 8007d5a:	e7f6      	b.n	8007d4a <_dtoa_r+0x902>
 8007d5c:	9b02      	ldr	r3, [sp, #8]
 8007d5e:	e7f4      	b.n	8007d4a <_dtoa_r+0x902>
 8007d60:	d085      	beq.n	8007c6e <_dtoa_r+0x826>
 8007d62:	4618      	mov	r0, r3
 8007d64:	301c      	adds	r0, #28
 8007d66:	e77d      	b.n	8007c64 <_dtoa_r+0x81c>
 8007d68:	40240000 	.word	0x40240000
 8007d6c:	9b01      	ldr	r3, [sp, #4]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	dc38      	bgt.n	8007de4 <_dtoa_r+0x99c>
 8007d72:	9b05      	ldr	r3, [sp, #20]
 8007d74:	2b02      	cmp	r3, #2
 8007d76:	dd35      	ble.n	8007de4 <_dtoa_r+0x99c>
 8007d78:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007d7c:	f1b9 0f00 	cmp.w	r9, #0
 8007d80:	d10d      	bne.n	8007d9e <_dtoa_r+0x956>
 8007d82:	4631      	mov	r1, r6
 8007d84:	464b      	mov	r3, r9
 8007d86:	2205      	movs	r2, #5
 8007d88:	4620      	mov	r0, r4
 8007d8a:	f000 ff5b 	bl	8008c44 <__multadd>
 8007d8e:	4601      	mov	r1, r0
 8007d90:	4606      	mov	r6, r0
 8007d92:	4658      	mov	r0, fp
 8007d94:	f001 f9bc 	bl	8009110 <__mcmp>
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	f73f adbd 	bgt.w	8007918 <_dtoa_r+0x4d0>
 8007d9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007da0:	9d00      	ldr	r5, [sp, #0]
 8007da2:	ea6f 0a03 	mvn.w	sl, r3
 8007da6:	f04f 0800 	mov.w	r8, #0
 8007daa:	4631      	mov	r1, r6
 8007dac:	4620      	mov	r0, r4
 8007dae:	f000 ff27 	bl	8008c00 <_Bfree>
 8007db2:	2f00      	cmp	r7, #0
 8007db4:	f43f aeb4 	beq.w	8007b20 <_dtoa_r+0x6d8>
 8007db8:	f1b8 0f00 	cmp.w	r8, #0
 8007dbc:	d005      	beq.n	8007dca <_dtoa_r+0x982>
 8007dbe:	45b8      	cmp	r8, r7
 8007dc0:	d003      	beq.n	8007dca <_dtoa_r+0x982>
 8007dc2:	4641      	mov	r1, r8
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	f000 ff1b 	bl	8008c00 <_Bfree>
 8007dca:	4639      	mov	r1, r7
 8007dcc:	4620      	mov	r0, r4
 8007dce:	f000 ff17 	bl	8008c00 <_Bfree>
 8007dd2:	e6a5      	b.n	8007b20 <_dtoa_r+0x6d8>
 8007dd4:	2600      	movs	r6, #0
 8007dd6:	4637      	mov	r7, r6
 8007dd8:	e7e1      	b.n	8007d9e <_dtoa_r+0x956>
 8007dda:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007ddc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007de0:	4637      	mov	r7, r6
 8007de2:	e599      	b.n	8007918 <_dtoa_r+0x4d0>
 8007de4:	9b08      	ldr	r3, [sp, #32]
 8007de6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	f000 80fd 	beq.w	8007fea <_dtoa_r+0xba2>
 8007df0:	2d00      	cmp	r5, #0
 8007df2:	dd05      	ble.n	8007e00 <_dtoa_r+0x9b8>
 8007df4:	4639      	mov	r1, r7
 8007df6:	462a      	mov	r2, r5
 8007df8:	4620      	mov	r0, r4
 8007dfa:	f001 f91d 	bl	8009038 <__lshift>
 8007dfe:	4607      	mov	r7, r0
 8007e00:	9b06      	ldr	r3, [sp, #24]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d05c      	beq.n	8007ec0 <_dtoa_r+0xa78>
 8007e06:	6879      	ldr	r1, [r7, #4]
 8007e08:	4620      	mov	r0, r4
 8007e0a:	f000 feb9 	bl	8008b80 <_Balloc>
 8007e0e:	4605      	mov	r5, r0
 8007e10:	b928      	cbnz	r0, 8007e1e <_dtoa_r+0x9d6>
 8007e12:	4b80      	ldr	r3, [pc, #512]	; (8008014 <_dtoa_r+0xbcc>)
 8007e14:	4602      	mov	r2, r0
 8007e16:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007e1a:	f7ff bb2e 	b.w	800747a <_dtoa_r+0x32>
 8007e1e:	693a      	ldr	r2, [r7, #16]
 8007e20:	3202      	adds	r2, #2
 8007e22:	0092      	lsls	r2, r2, #2
 8007e24:	f107 010c 	add.w	r1, r7, #12
 8007e28:	300c      	adds	r0, #12
 8007e2a:	f7fd fa2f 	bl	800528c <memcpy>
 8007e2e:	2201      	movs	r2, #1
 8007e30:	4629      	mov	r1, r5
 8007e32:	4620      	mov	r0, r4
 8007e34:	f001 f900 	bl	8009038 <__lshift>
 8007e38:	9b00      	ldr	r3, [sp, #0]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	9301      	str	r3, [sp, #4]
 8007e3e:	9b00      	ldr	r3, [sp, #0]
 8007e40:	444b      	add	r3, r9
 8007e42:	9307      	str	r3, [sp, #28]
 8007e44:	9b02      	ldr	r3, [sp, #8]
 8007e46:	f003 0301 	and.w	r3, r3, #1
 8007e4a:	46b8      	mov	r8, r7
 8007e4c:	9306      	str	r3, [sp, #24]
 8007e4e:	4607      	mov	r7, r0
 8007e50:	9b01      	ldr	r3, [sp, #4]
 8007e52:	4631      	mov	r1, r6
 8007e54:	3b01      	subs	r3, #1
 8007e56:	4658      	mov	r0, fp
 8007e58:	9302      	str	r3, [sp, #8]
 8007e5a:	f7ff fa67 	bl	800732c <quorem>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	3330      	adds	r3, #48	; 0x30
 8007e62:	9004      	str	r0, [sp, #16]
 8007e64:	4641      	mov	r1, r8
 8007e66:	4658      	mov	r0, fp
 8007e68:	9308      	str	r3, [sp, #32]
 8007e6a:	f001 f951 	bl	8009110 <__mcmp>
 8007e6e:	463a      	mov	r2, r7
 8007e70:	4681      	mov	r9, r0
 8007e72:	4631      	mov	r1, r6
 8007e74:	4620      	mov	r0, r4
 8007e76:	f001 f967 	bl	8009148 <__mdiff>
 8007e7a:	68c2      	ldr	r2, [r0, #12]
 8007e7c:	9b08      	ldr	r3, [sp, #32]
 8007e7e:	4605      	mov	r5, r0
 8007e80:	bb02      	cbnz	r2, 8007ec4 <_dtoa_r+0xa7c>
 8007e82:	4601      	mov	r1, r0
 8007e84:	4658      	mov	r0, fp
 8007e86:	f001 f943 	bl	8009110 <__mcmp>
 8007e8a:	9b08      	ldr	r3, [sp, #32]
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	4629      	mov	r1, r5
 8007e90:	4620      	mov	r0, r4
 8007e92:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007e96:	f000 feb3 	bl	8008c00 <_Bfree>
 8007e9a:	9b05      	ldr	r3, [sp, #20]
 8007e9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e9e:	9d01      	ldr	r5, [sp, #4]
 8007ea0:	ea43 0102 	orr.w	r1, r3, r2
 8007ea4:	9b06      	ldr	r3, [sp, #24]
 8007ea6:	430b      	orrs	r3, r1
 8007ea8:	9b08      	ldr	r3, [sp, #32]
 8007eaa:	d10d      	bne.n	8007ec8 <_dtoa_r+0xa80>
 8007eac:	2b39      	cmp	r3, #57	; 0x39
 8007eae:	d029      	beq.n	8007f04 <_dtoa_r+0xabc>
 8007eb0:	f1b9 0f00 	cmp.w	r9, #0
 8007eb4:	dd01      	ble.n	8007eba <_dtoa_r+0xa72>
 8007eb6:	9b04      	ldr	r3, [sp, #16]
 8007eb8:	3331      	adds	r3, #49	; 0x31
 8007eba:	9a02      	ldr	r2, [sp, #8]
 8007ebc:	7013      	strb	r3, [r2, #0]
 8007ebe:	e774      	b.n	8007daa <_dtoa_r+0x962>
 8007ec0:	4638      	mov	r0, r7
 8007ec2:	e7b9      	b.n	8007e38 <_dtoa_r+0x9f0>
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	e7e2      	b.n	8007e8e <_dtoa_r+0xa46>
 8007ec8:	f1b9 0f00 	cmp.w	r9, #0
 8007ecc:	db06      	blt.n	8007edc <_dtoa_r+0xa94>
 8007ece:	9905      	ldr	r1, [sp, #20]
 8007ed0:	ea41 0909 	orr.w	r9, r1, r9
 8007ed4:	9906      	ldr	r1, [sp, #24]
 8007ed6:	ea59 0101 	orrs.w	r1, r9, r1
 8007eda:	d120      	bne.n	8007f1e <_dtoa_r+0xad6>
 8007edc:	2a00      	cmp	r2, #0
 8007ede:	ddec      	ble.n	8007eba <_dtoa_r+0xa72>
 8007ee0:	4659      	mov	r1, fp
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	4620      	mov	r0, r4
 8007ee6:	9301      	str	r3, [sp, #4]
 8007ee8:	f001 f8a6 	bl	8009038 <__lshift>
 8007eec:	4631      	mov	r1, r6
 8007eee:	4683      	mov	fp, r0
 8007ef0:	f001 f90e 	bl	8009110 <__mcmp>
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	9b01      	ldr	r3, [sp, #4]
 8007ef8:	dc02      	bgt.n	8007f00 <_dtoa_r+0xab8>
 8007efa:	d1de      	bne.n	8007eba <_dtoa_r+0xa72>
 8007efc:	07da      	lsls	r2, r3, #31
 8007efe:	d5dc      	bpl.n	8007eba <_dtoa_r+0xa72>
 8007f00:	2b39      	cmp	r3, #57	; 0x39
 8007f02:	d1d8      	bne.n	8007eb6 <_dtoa_r+0xa6e>
 8007f04:	9a02      	ldr	r2, [sp, #8]
 8007f06:	2339      	movs	r3, #57	; 0x39
 8007f08:	7013      	strb	r3, [r2, #0]
 8007f0a:	462b      	mov	r3, r5
 8007f0c:	461d      	mov	r5, r3
 8007f0e:	3b01      	subs	r3, #1
 8007f10:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007f14:	2a39      	cmp	r2, #57	; 0x39
 8007f16:	d050      	beq.n	8007fba <_dtoa_r+0xb72>
 8007f18:	3201      	adds	r2, #1
 8007f1a:	701a      	strb	r2, [r3, #0]
 8007f1c:	e745      	b.n	8007daa <_dtoa_r+0x962>
 8007f1e:	2a00      	cmp	r2, #0
 8007f20:	dd03      	ble.n	8007f2a <_dtoa_r+0xae2>
 8007f22:	2b39      	cmp	r3, #57	; 0x39
 8007f24:	d0ee      	beq.n	8007f04 <_dtoa_r+0xabc>
 8007f26:	3301      	adds	r3, #1
 8007f28:	e7c7      	b.n	8007eba <_dtoa_r+0xa72>
 8007f2a:	9a01      	ldr	r2, [sp, #4]
 8007f2c:	9907      	ldr	r1, [sp, #28]
 8007f2e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007f32:	428a      	cmp	r2, r1
 8007f34:	d02a      	beq.n	8007f8c <_dtoa_r+0xb44>
 8007f36:	4659      	mov	r1, fp
 8007f38:	2300      	movs	r3, #0
 8007f3a:	220a      	movs	r2, #10
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	f000 fe81 	bl	8008c44 <__multadd>
 8007f42:	45b8      	cmp	r8, r7
 8007f44:	4683      	mov	fp, r0
 8007f46:	f04f 0300 	mov.w	r3, #0
 8007f4a:	f04f 020a 	mov.w	r2, #10
 8007f4e:	4641      	mov	r1, r8
 8007f50:	4620      	mov	r0, r4
 8007f52:	d107      	bne.n	8007f64 <_dtoa_r+0xb1c>
 8007f54:	f000 fe76 	bl	8008c44 <__multadd>
 8007f58:	4680      	mov	r8, r0
 8007f5a:	4607      	mov	r7, r0
 8007f5c:	9b01      	ldr	r3, [sp, #4]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	9301      	str	r3, [sp, #4]
 8007f62:	e775      	b.n	8007e50 <_dtoa_r+0xa08>
 8007f64:	f000 fe6e 	bl	8008c44 <__multadd>
 8007f68:	4639      	mov	r1, r7
 8007f6a:	4680      	mov	r8, r0
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	220a      	movs	r2, #10
 8007f70:	4620      	mov	r0, r4
 8007f72:	f000 fe67 	bl	8008c44 <__multadd>
 8007f76:	4607      	mov	r7, r0
 8007f78:	e7f0      	b.n	8007f5c <_dtoa_r+0xb14>
 8007f7a:	f1b9 0f00 	cmp.w	r9, #0
 8007f7e:	9a00      	ldr	r2, [sp, #0]
 8007f80:	bfcc      	ite	gt
 8007f82:	464d      	movgt	r5, r9
 8007f84:	2501      	movle	r5, #1
 8007f86:	4415      	add	r5, r2
 8007f88:	f04f 0800 	mov.w	r8, #0
 8007f8c:	4659      	mov	r1, fp
 8007f8e:	2201      	movs	r2, #1
 8007f90:	4620      	mov	r0, r4
 8007f92:	9301      	str	r3, [sp, #4]
 8007f94:	f001 f850 	bl	8009038 <__lshift>
 8007f98:	4631      	mov	r1, r6
 8007f9a:	4683      	mov	fp, r0
 8007f9c:	f001 f8b8 	bl	8009110 <__mcmp>
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	dcb2      	bgt.n	8007f0a <_dtoa_r+0xac2>
 8007fa4:	d102      	bne.n	8007fac <_dtoa_r+0xb64>
 8007fa6:	9b01      	ldr	r3, [sp, #4]
 8007fa8:	07db      	lsls	r3, r3, #31
 8007faa:	d4ae      	bmi.n	8007f0a <_dtoa_r+0xac2>
 8007fac:	462b      	mov	r3, r5
 8007fae:	461d      	mov	r5, r3
 8007fb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007fb4:	2a30      	cmp	r2, #48	; 0x30
 8007fb6:	d0fa      	beq.n	8007fae <_dtoa_r+0xb66>
 8007fb8:	e6f7      	b.n	8007daa <_dtoa_r+0x962>
 8007fba:	9a00      	ldr	r2, [sp, #0]
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d1a5      	bne.n	8007f0c <_dtoa_r+0xac4>
 8007fc0:	f10a 0a01 	add.w	sl, sl, #1
 8007fc4:	2331      	movs	r3, #49	; 0x31
 8007fc6:	e779      	b.n	8007ebc <_dtoa_r+0xa74>
 8007fc8:	4b13      	ldr	r3, [pc, #76]	; (8008018 <_dtoa_r+0xbd0>)
 8007fca:	f7ff baaf 	b.w	800752c <_dtoa_r+0xe4>
 8007fce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	f47f aa86 	bne.w	80074e2 <_dtoa_r+0x9a>
 8007fd6:	4b11      	ldr	r3, [pc, #68]	; (800801c <_dtoa_r+0xbd4>)
 8007fd8:	f7ff baa8 	b.w	800752c <_dtoa_r+0xe4>
 8007fdc:	f1b9 0f00 	cmp.w	r9, #0
 8007fe0:	dc03      	bgt.n	8007fea <_dtoa_r+0xba2>
 8007fe2:	9b05      	ldr	r3, [sp, #20]
 8007fe4:	2b02      	cmp	r3, #2
 8007fe6:	f73f aec9 	bgt.w	8007d7c <_dtoa_r+0x934>
 8007fea:	9d00      	ldr	r5, [sp, #0]
 8007fec:	4631      	mov	r1, r6
 8007fee:	4658      	mov	r0, fp
 8007ff0:	f7ff f99c 	bl	800732c <quorem>
 8007ff4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007ff8:	f805 3b01 	strb.w	r3, [r5], #1
 8007ffc:	9a00      	ldr	r2, [sp, #0]
 8007ffe:	1aaa      	subs	r2, r5, r2
 8008000:	4591      	cmp	r9, r2
 8008002:	ddba      	ble.n	8007f7a <_dtoa_r+0xb32>
 8008004:	4659      	mov	r1, fp
 8008006:	2300      	movs	r3, #0
 8008008:	220a      	movs	r2, #10
 800800a:	4620      	mov	r0, r4
 800800c:	f000 fe1a 	bl	8008c44 <__multadd>
 8008010:	4683      	mov	fp, r0
 8008012:	e7eb      	b.n	8007fec <_dtoa_r+0xba4>
 8008014:	0800a21c 	.word	0x0800a21c
 8008018:	0800a01c 	.word	0x0800a01c
 800801c:	0800a199 	.word	0x0800a199

08008020 <__sflush_r>:
 8008020:	898a      	ldrh	r2, [r1, #12]
 8008022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008026:	4605      	mov	r5, r0
 8008028:	0710      	lsls	r0, r2, #28
 800802a:	460c      	mov	r4, r1
 800802c:	d458      	bmi.n	80080e0 <__sflush_r+0xc0>
 800802e:	684b      	ldr	r3, [r1, #4]
 8008030:	2b00      	cmp	r3, #0
 8008032:	dc05      	bgt.n	8008040 <__sflush_r+0x20>
 8008034:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008036:	2b00      	cmp	r3, #0
 8008038:	dc02      	bgt.n	8008040 <__sflush_r+0x20>
 800803a:	2000      	movs	r0, #0
 800803c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008040:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008042:	2e00      	cmp	r6, #0
 8008044:	d0f9      	beq.n	800803a <__sflush_r+0x1a>
 8008046:	2300      	movs	r3, #0
 8008048:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800804c:	682f      	ldr	r7, [r5, #0]
 800804e:	602b      	str	r3, [r5, #0]
 8008050:	d032      	beq.n	80080b8 <__sflush_r+0x98>
 8008052:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008054:	89a3      	ldrh	r3, [r4, #12]
 8008056:	075a      	lsls	r2, r3, #29
 8008058:	d505      	bpl.n	8008066 <__sflush_r+0x46>
 800805a:	6863      	ldr	r3, [r4, #4]
 800805c:	1ac0      	subs	r0, r0, r3
 800805e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008060:	b10b      	cbz	r3, 8008066 <__sflush_r+0x46>
 8008062:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008064:	1ac0      	subs	r0, r0, r3
 8008066:	2300      	movs	r3, #0
 8008068:	4602      	mov	r2, r0
 800806a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800806c:	6a21      	ldr	r1, [r4, #32]
 800806e:	4628      	mov	r0, r5
 8008070:	47b0      	blx	r6
 8008072:	1c43      	adds	r3, r0, #1
 8008074:	89a3      	ldrh	r3, [r4, #12]
 8008076:	d106      	bne.n	8008086 <__sflush_r+0x66>
 8008078:	6829      	ldr	r1, [r5, #0]
 800807a:	291d      	cmp	r1, #29
 800807c:	d82c      	bhi.n	80080d8 <__sflush_r+0xb8>
 800807e:	4a2a      	ldr	r2, [pc, #168]	; (8008128 <__sflush_r+0x108>)
 8008080:	40ca      	lsrs	r2, r1
 8008082:	07d6      	lsls	r6, r2, #31
 8008084:	d528      	bpl.n	80080d8 <__sflush_r+0xb8>
 8008086:	2200      	movs	r2, #0
 8008088:	6062      	str	r2, [r4, #4]
 800808a:	04d9      	lsls	r1, r3, #19
 800808c:	6922      	ldr	r2, [r4, #16]
 800808e:	6022      	str	r2, [r4, #0]
 8008090:	d504      	bpl.n	800809c <__sflush_r+0x7c>
 8008092:	1c42      	adds	r2, r0, #1
 8008094:	d101      	bne.n	800809a <__sflush_r+0x7a>
 8008096:	682b      	ldr	r3, [r5, #0]
 8008098:	b903      	cbnz	r3, 800809c <__sflush_r+0x7c>
 800809a:	6560      	str	r0, [r4, #84]	; 0x54
 800809c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800809e:	602f      	str	r7, [r5, #0]
 80080a0:	2900      	cmp	r1, #0
 80080a2:	d0ca      	beq.n	800803a <__sflush_r+0x1a>
 80080a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080a8:	4299      	cmp	r1, r3
 80080aa:	d002      	beq.n	80080b2 <__sflush_r+0x92>
 80080ac:	4628      	mov	r0, r5
 80080ae:	f7fd f913 	bl	80052d8 <_free_r>
 80080b2:	2000      	movs	r0, #0
 80080b4:	6360      	str	r0, [r4, #52]	; 0x34
 80080b6:	e7c1      	b.n	800803c <__sflush_r+0x1c>
 80080b8:	6a21      	ldr	r1, [r4, #32]
 80080ba:	2301      	movs	r3, #1
 80080bc:	4628      	mov	r0, r5
 80080be:	47b0      	blx	r6
 80080c0:	1c41      	adds	r1, r0, #1
 80080c2:	d1c7      	bne.n	8008054 <__sflush_r+0x34>
 80080c4:	682b      	ldr	r3, [r5, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d0c4      	beq.n	8008054 <__sflush_r+0x34>
 80080ca:	2b1d      	cmp	r3, #29
 80080cc:	d001      	beq.n	80080d2 <__sflush_r+0xb2>
 80080ce:	2b16      	cmp	r3, #22
 80080d0:	d101      	bne.n	80080d6 <__sflush_r+0xb6>
 80080d2:	602f      	str	r7, [r5, #0]
 80080d4:	e7b1      	b.n	800803a <__sflush_r+0x1a>
 80080d6:	89a3      	ldrh	r3, [r4, #12]
 80080d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080dc:	81a3      	strh	r3, [r4, #12]
 80080de:	e7ad      	b.n	800803c <__sflush_r+0x1c>
 80080e0:	690f      	ldr	r7, [r1, #16]
 80080e2:	2f00      	cmp	r7, #0
 80080e4:	d0a9      	beq.n	800803a <__sflush_r+0x1a>
 80080e6:	0793      	lsls	r3, r2, #30
 80080e8:	680e      	ldr	r6, [r1, #0]
 80080ea:	bf08      	it	eq
 80080ec:	694b      	ldreq	r3, [r1, #20]
 80080ee:	600f      	str	r7, [r1, #0]
 80080f0:	bf18      	it	ne
 80080f2:	2300      	movne	r3, #0
 80080f4:	eba6 0807 	sub.w	r8, r6, r7
 80080f8:	608b      	str	r3, [r1, #8]
 80080fa:	f1b8 0f00 	cmp.w	r8, #0
 80080fe:	dd9c      	ble.n	800803a <__sflush_r+0x1a>
 8008100:	6a21      	ldr	r1, [r4, #32]
 8008102:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008104:	4643      	mov	r3, r8
 8008106:	463a      	mov	r2, r7
 8008108:	4628      	mov	r0, r5
 800810a:	47b0      	blx	r6
 800810c:	2800      	cmp	r0, #0
 800810e:	dc06      	bgt.n	800811e <__sflush_r+0xfe>
 8008110:	89a3      	ldrh	r3, [r4, #12]
 8008112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008116:	81a3      	strh	r3, [r4, #12]
 8008118:	f04f 30ff 	mov.w	r0, #4294967295
 800811c:	e78e      	b.n	800803c <__sflush_r+0x1c>
 800811e:	4407      	add	r7, r0
 8008120:	eba8 0800 	sub.w	r8, r8, r0
 8008124:	e7e9      	b.n	80080fa <__sflush_r+0xda>
 8008126:	bf00      	nop
 8008128:	20400001 	.word	0x20400001

0800812c <_fflush_r>:
 800812c:	b538      	push	{r3, r4, r5, lr}
 800812e:	690b      	ldr	r3, [r1, #16]
 8008130:	4605      	mov	r5, r0
 8008132:	460c      	mov	r4, r1
 8008134:	b913      	cbnz	r3, 800813c <_fflush_r+0x10>
 8008136:	2500      	movs	r5, #0
 8008138:	4628      	mov	r0, r5
 800813a:	bd38      	pop	{r3, r4, r5, pc}
 800813c:	b118      	cbz	r0, 8008146 <_fflush_r+0x1a>
 800813e:	6983      	ldr	r3, [r0, #24]
 8008140:	b90b      	cbnz	r3, 8008146 <_fflush_r+0x1a>
 8008142:	f000 f887 	bl	8008254 <__sinit>
 8008146:	4b14      	ldr	r3, [pc, #80]	; (8008198 <_fflush_r+0x6c>)
 8008148:	429c      	cmp	r4, r3
 800814a:	d11b      	bne.n	8008184 <_fflush_r+0x58>
 800814c:	686c      	ldr	r4, [r5, #4]
 800814e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d0ef      	beq.n	8008136 <_fflush_r+0xa>
 8008156:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008158:	07d0      	lsls	r0, r2, #31
 800815a:	d404      	bmi.n	8008166 <_fflush_r+0x3a>
 800815c:	0599      	lsls	r1, r3, #22
 800815e:	d402      	bmi.n	8008166 <_fflush_r+0x3a>
 8008160:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008162:	f000 fc88 	bl	8008a76 <__retarget_lock_acquire_recursive>
 8008166:	4628      	mov	r0, r5
 8008168:	4621      	mov	r1, r4
 800816a:	f7ff ff59 	bl	8008020 <__sflush_r>
 800816e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008170:	07da      	lsls	r2, r3, #31
 8008172:	4605      	mov	r5, r0
 8008174:	d4e0      	bmi.n	8008138 <_fflush_r+0xc>
 8008176:	89a3      	ldrh	r3, [r4, #12]
 8008178:	059b      	lsls	r3, r3, #22
 800817a:	d4dd      	bmi.n	8008138 <_fflush_r+0xc>
 800817c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800817e:	f000 fc7b 	bl	8008a78 <__retarget_lock_release_recursive>
 8008182:	e7d9      	b.n	8008138 <_fflush_r+0xc>
 8008184:	4b05      	ldr	r3, [pc, #20]	; (800819c <_fflush_r+0x70>)
 8008186:	429c      	cmp	r4, r3
 8008188:	d101      	bne.n	800818e <_fflush_r+0x62>
 800818a:	68ac      	ldr	r4, [r5, #8]
 800818c:	e7df      	b.n	800814e <_fflush_r+0x22>
 800818e:	4b04      	ldr	r3, [pc, #16]	; (80081a0 <_fflush_r+0x74>)
 8008190:	429c      	cmp	r4, r3
 8008192:	bf08      	it	eq
 8008194:	68ec      	ldreq	r4, [r5, #12]
 8008196:	e7da      	b.n	800814e <_fflush_r+0x22>
 8008198:	0800a250 	.word	0x0800a250
 800819c:	0800a270 	.word	0x0800a270
 80081a0:	0800a230 	.word	0x0800a230

080081a4 <std>:
 80081a4:	2300      	movs	r3, #0
 80081a6:	b510      	push	{r4, lr}
 80081a8:	4604      	mov	r4, r0
 80081aa:	e9c0 3300 	strd	r3, r3, [r0]
 80081ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80081b2:	6083      	str	r3, [r0, #8]
 80081b4:	8181      	strh	r1, [r0, #12]
 80081b6:	6643      	str	r3, [r0, #100]	; 0x64
 80081b8:	81c2      	strh	r2, [r0, #14]
 80081ba:	6183      	str	r3, [r0, #24]
 80081bc:	4619      	mov	r1, r3
 80081be:	2208      	movs	r2, #8
 80081c0:	305c      	adds	r0, #92	; 0x5c
 80081c2:	f7fd f871 	bl	80052a8 <memset>
 80081c6:	4b05      	ldr	r3, [pc, #20]	; (80081dc <std+0x38>)
 80081c8:	6263      	str	r3, [r4, #36]	; 0x24
 80081ca:	4b05      	ldr	r3, [pc, #20]	; (80081e0 <std+0x3c>)
 80081cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80081ce:	4b05      	ldr	r3, [pc, #20]	; (80081e4 <std+0x40>)
 80081d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80081d2:	4b05      	ldr	r3, [pc, #20]	; (80081e8 <std+0x44>)
 80081d4:	6224      	str	r4, [r4, #32]
 80081d6:	6323      	str	r3, [r4, #48]	; 0x30
 80081d8:	bd10      	pop	{r4, pc}
 80081da:	bf00      	nop
 80081dc:	08009a71 	.word	0x08009a71
 80081e0:	08009a93 	.word	0x08009a93
 80081e4:	08009acb 	.word	0x08009acb
 80081e8:	08009aef 	.word	0x08009aef

080081ec <_cleanup_r>:
 80081ec:	4901      	ldr	r1, [pc, #4]	; (80081f4 <_cleanup_r+0x8>)
 80081ee:	f000 b8af 	b.w	8008350 <_fwalk_reent>
 80081f2:	bf00      	nop
 80081f4:	0800812d 	.word	0x0800812d

080081f8 <__sfmoreglue>:
 80081f8:	b570      	push	{r4, r5, r6, lr}
 80081fa:	1e4a      	subs	r2, r1, #1
 80081fc:	2568      	movs	r5, #104	; 0x68
 80081fe:	4355      	muls	r5, r2
 8008200:	460e      	mov	r6, r1
 8008202:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008206:	f7fd f8b7 	bl	8005378 <_malloc_r>
 800820a:	4604      	mov	r4, r0
 800820c:	b140      	cbz	r0, 8008220 <__sfmoreglue+0x28>
 800820e:	2100      	movs	r1, #0
 8008210:	e9c0 1600 	strd	r1, r6, [r0]
 8008214:	300c      	adds	r0, #12
 8008216:	60a0      	str	r0, [r4, #8]
 8008218:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800821c:	f7fd f844 	bl	80052a8 <memset>
 8008220:	4620      	mov	r0, r4
 8008222:	bd70      	pop	{r4, r5, r6, pc}

08008224 <__sfp_lock_acquire>:
 8008224:	4801      	ldr	r0, [pc, #4]	; (800822c <__sfp_lock_acquire+0x8>)
 8008226:	f000 bc26 	b.w	8008a76 <__retarget_lock_acquire_recursive>
 800822a:	bf00      	nop
 800822c:	20001d57 	.word	0x20001d57

08008230 <__sfp_lock_release>:
 8008230:	4801      	ldr	r0, [pc, #4]	; (8008238 <__sfp_lock_release+0x8>)
 8008232:	f000 bc21 	b.w	8008a78 <__retarget_lock_release_recursive>
 8008236:	bf00      	nop
 8008238:	20001d57 	.word	0x20001d57

0800823c <__sinit_lock_acquire>:
 800823c:	4801      	ldr	r0, [pc, #4]	; (8008244 <__sinit_lock_acquire+0x8>)
 800823e:	f000 bc1a 	b.w	8008a76 <__retarget_lock_acquire_recursive>
 8008242:	bf00      	nop
 8008244:	20001d52 	.word	0x20001d52

08008248 <__sinit_lock_release>:
 8008248:	4801      	ldr	r0, [pc, #4]	; (8008250 <__sinit_lock_release+0x8>)
 800824a:	f000 bc15 	b.w	8008a78 <__retarget_lock_release_recursive>
 800824e:	bf00      	nop
 8008250:	20001d52 	.word	0x20001d52

08008254 <__sinit>:
 8008254:	b510      	push	{r4, lr}
 8008256:	4604      	mov	r4, r0
 8008258:	f7ff fff0 	bl	800823c <__sinit_lock_acquire>
 800825c:	69a3      	ldr	r3, [r4, #24]
 800825e:	b11b      	cbz	r3, 8008268 <__sinit+0x14>
 8008260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008264:	f7ff bff0 	b.w	8008248 <__sinit_lock_release>
 8008268:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800826c:	6523      	str	r3, [r4, #80]	; 0x50
 800826e:	4b13      	ldr	r3, [pc, #76]	; (80082bc <__sinit+0x68>)
 8008270:	4a13      	ldr	r2, [pc, #76]	; (80082c0 <__sinit+0x6c>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	62a2      	str	r2, [r4, #40]	; 0x28
 8008276:	42a3      	cmp	r3, r4
 8008278:	bf04      	itt	eq
 800827a:	2301      	moveq	r3, #1
 800827c:	61a3      	streq	r3, [r4, #24]
 800827e:	4620      	mov	r0, r4
 8008280:	f000 f820 	bl	80082c4 <__sfp>
 8008284:	6060      	str	r0, [r4, #4]
 8008286:	4620      	mov	r0, r4
 8008288:	f000 f81c 	bl	80082c4 <__sfp>
 800828c:	60a0      	str	r0, [r4, #8]
 800828e:	4620      	mov	r0, r4
 8008290:	f000 f818 	bl	80082c4 <__sfp>
 8008294:	2200      	movs	r2, #0
 8008296:	60e0      	str	r0, [r4, #12]
 8008298:	2104      	movs	r1, #4
 800829a:	6860      	ldr	r0, [r4, #4]
 800829c:	f7ff ff82 	bl	80081a4 <std>
 80082a0:	68a0      	ldr	r0, [r4, #8]
 80082a2:	2201      	movs	r2, #1
 80082a4:	2109      	movs	r1, #9
 80082a6:	f7ff ff7d 	bl	80081a4 <std>
 80082aa:	68e0      	ldr	r0, [r4, #12]
 80082ac:	2202      	movs	r2, #2
 80082ae:	2112      	movs	r1, #18
 80082b0:	f7ff ff78 	bl	80081a4 <std>
 80082b4:	2301      	movs	r3, #1
 80082b6:	61a3      	str	r3, [r4, #24]
 80082b8:	e7d2      	b.n	8008260 <__sinit+0xc>
 80082ba:	bf00      	nop
 80082bc:	0800a008 	.word	0x0800a008
 80082c0:	080081ed 	.word	0x080081ed

080082c4 <__sfp>:
 80082c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082c6:	4607      	mov	r7, r0
 80082c8:	f7ff ffac 	bl	8008224 <__sfp_lock_acquire>
 80082cc:	4b1e      	ldr	r3, [pc, #120]	; (8008348 <__sfp+0x84>)
 80082ce:	681e      	ldr	r6, [r3, #0]
 80082d0:	69b3      	ldr	r3, [r6, #24]
 80082d2:	b913      	cbnz	r3, 80082da <__sfp+0x16>
 80082d4:	4630      	mov	r0, r6
 80082d6:	f7ff ffbd 	bl	8008254 <__sinit>
 80082da:	3648      	adds	r6, #72	; 0x48
 80082dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80082e0:	3b01      	subs	r3, #1
 80082e2:	d503      	bpl.n	80082ec <__sfp+0x28>
 80082e4:	6833      	ldr	r3, [r6, #0]
 80082e6:	b30b      	cbz	r3, 800832c <__sfp+0x68>
 80082e8:	6836      	ldr	r6, [r6, #0]
 80082ea:	e7f7      	b.n	80082dc <__sfp+0x18>
 80082ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80082f0:	b9d5      	cbnz	r5, 8008328 <__sfp+0x64>
 80082f2:	4b16      	ldr	r3, [pc, #88]	; (800834c <__sfp+0x88>)
 80082f4:	60e3      	str	r3, [r4, #12]
 80082f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80082fa:	6665      	str	r5, [r4, #100]	; 0x64
 80082fc:	f000 fbba 	bl	8008a74 <__retarget_lock_init_recursive>
 8008300:	f7ff ff96 	bl	8008230 <__sfp_lock_release>
 8008304:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008308:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800830c:	6025      	str	r5, [r4, #0]
 800830e:	61a5      	str	r5, [r4, #24]
 8008310:	2208      	movs	r2, #8
 8008312:	4629      	mov	r1, r5
 8008314:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008318:	f7fc ffc6 	bl	80052a8 <memset>
 800831c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008320:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008324:	4620      	mov	r0, r4
 8008326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008328:	3468      	adds	r4, #104	; 0x68
 800832a:	e7d9      	b.n	80082e0 <__sfp+0x1c>
 800832c:	2104      	movs	r1, #4
 800832e:	4638      	mov	r0, r7
 8008330:	f7ff ff62 	bl	80081f8 <__sfmoreglue>
 8008334:	4604      	mov	r4, r0
 8008336:	6030      	str	r0, [r6, #0]
 8008338:	2800      	cmp	r0, #0
 800833a:	d1d5      	bne.n	80082e8 <__sfp+0x24>
 800833c:	f7ff ff78 	bl	8008230 <__sfp_lock_release>
 8008340:	230c      	movs	r3, #12
 8008342:	603b      	str	r3, [r7, #0]
 8008344:	e7ee      	b.n	8008324 <__sfp+0x60>
 8008346:	bf00      	nop
 8008348:	0800a008 	.word	0x0800a008
 800834c:	ffff0001 	.word	0xffff0001

08008350 <_fwalk_reent>:
 8008350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008354:	4606      	mov	r6, r0
 8008356:	4688      	mov	r8, r1
 8008358:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800835c:	2700      	movs	r7, #0
 800835e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008362:	f1b9 0901 	subs.w	r9, r9, #1
 8008366:	d505      	bpl.n	8008374 <_fwalk_reent+0x24>
 8008368:	6824      	ldr	r4, [r4, #0]
 800836a:	2c00      	cmp	r4, #0
 800836c:	d1f7      	bne.n	800835e <_fwalk_reent+0xe>
 800836e:	4638      	mov	r0, r7
 8008370:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008374:	89ab      	ldrh	r3, [r5, #12]
 8008376:	2b01      	cmp	r3, #1
 8008378:	d907      	bls.n	800838a <_fwalk_reent+0x3a>
 800837a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800837e:	3301      	adds	r3, #1
 8008380:	d003      	beq.n	800838a <_fwalk_reent+0x3a>
 8008382:	4629      	mov	r1, r5
 8008384:	4630      	mov	r0, r6
 8008386:	47c0      	blx	r8
 8008388:	4307      	orrs	r7, r0
 800838a:	3568      	adds	r5, #104	; 0x68
 800838c:	e7e9      	b.n	8008362 <_fwalk_reent+0x12>

0800838e <rshift>:
 800838e:	6903      	ldr	r3, [r0, #16]
 8008390:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008398:	ea4f 1261 	mov.w	r2, r1, asr #5
 800839c:	f100 0414 	add.w	r4, r0, #20
 80083a0:	dd45      	ble.n	800842e <rshift+0xa0>
 80083a2:	f011 011f 	ands.w	r1, r1, #31
 80083a6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80083aa:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80083ae:	d10c      	bne.n	80083ca <rshift+0x3c>
 80083b0:	f100 0710 	add.w	r7, r0, #16
 80083b4:	4629      	mov	r1, r5
 80083b6:	42b1      	cmp	r1, r6
 80083b8:	d334      	bcc.n	8008424 <rshift+0x96>
 80083ba:	1a9b      	subs	r3, r3, r2
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	1eea      	subs	r2, r5, #3
 80083c0:	4296      	cmp	r6, r2
 80083c2:	bf38      	it	cc
 80083c4:	2300      	movcc	r3, #0
 80083c6:	4423      	add	r3, r4
 80083c8:	e015      	b.n	80083f6 <rshift+0x68>
 80083ca:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80083ce:	f1c1 0820 	rsb	r8, r1, #32
 80083d2:	40cf      	lsrs	r7, r1
 80083d4:	f105 0e04 	add.w	lr, r5, #4
 80083d8:	46a1      	mov	r9, r4
 80083da:	4576      	cmp	r6, lr
 80083dc:	46f4      	mov	ip, lr
 80083de:	d815      	bhi.n	800840c <rshift+0x7e>
 80083e0:	1a9b      	subs	r3, r3, r2
 80083e2:	009a      	lsls	r2, r3, #2
 80083e4:	3a04      	subs	r2, #4
 80083e6:	3501      	adds	r5, #1
 80083e8:	42ae      	cmp	r6, r5
 80083ea:	bf38      	it	cc
 80083ec:	2200      	movcc	r2, #0
 80083ee:	18a3      	adds	r3, r4, r2
 80083f0:	50a7      	str	r7, [r4, r2]
 80083f2:	b107      	cbz	r7, 80083f6 <rshift+0x68>
 80083f4:	3304      	adds	r3, #4
 80083f6:	1b1a      	subs	r2, r3, r4
 80083f8:	42a3      	cmp	r3, r4
 80083fa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80083fe:	bf08      	it	eq
 8008400:	2300      	moveq	r3, #0
 8008402:	6102      	str	r2, [r0, #16]
 8008404:	bf08      	it	eq
 8008406:	6143      	streq	r3, [r0, #20]
 8008408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800840c:	f8dc c000 	ldr.w	ip, [ip]
 8008410:	fa0c fc08 	lsl.w	ip, ip, r8
 8008414:	ea4c 0707 	orr.w	r7, ip, r7
 8008418:	f849 7b04 	str.w	r7, [r9], #4
 800841c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008420:	40cf      	lsrs	r7, r1
 8008422:	e7da      	b.n	80083da <rshift+0x4c>
 8008424:	f851 cb04 	ldr.w	ip, [r1], #4
 8008428:	f847 cf04 	str.w	ip, [r7, #4]!
 800842c:	e7c3      	b.n	80083b6 <rshift+0x28>
 800842e:	4623      	mov	r3, r4
 8008430:	e7e1      	b.n	80083f6 <rshift+0x68>

08008432 <__hexdig_fun>:
 8008432:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008436:	2b09      	cmp	r3, #9
 8008438:	d802      	bhi.n	8008440 <__hexdig_fun+0xe>
 800843a:	3820      	subs	r0, #32
 800843c:	b2c0      	uxtb	r0, r0
 800843e:	4770      	bx	lr
 8008440:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008444:	2b05      	cmp	r3, #5
 8008446:	d801      	bhi.n	800844c <__hexdig_fun+0x1a>
 8008448:	3847      	subs	r0, #71	; 0x47
 800844a:	e7f7      	b.n	800843c <__hexdig_fun+0xa>
 800844c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008450:	2b05      	cmp	r3, #5
 8008452:	d801      	bhi.n	8008458 <__hexdig_fun+0x26>
 8008454:	3827      	subs	r0, #39	; 0x27
 8008456:	e7f1      	b.n	800843c <__hexdig_fun+0xa>
 8008458:	2000      	movs	r0, #0
 800845a:	4770      	bx	lr

0800845c <__gethex>:
 800845c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008460:	ed2d 8b02 	vpush	{d8}
 8008464:	b089      	sub	sp, #36	; 0x24
 8008466:	ee08 0a10 	vmov	s16, r0
 800846a:	9304      	str	r3, [sp, #16]
 800846c:	4bbc      	ldr	r3, [pc, #752]	; (8008760 <__gethex+0x304>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	9301      	str	r3, [sp, #4]
 8008472:	4618      	mov	r0, r3
 8008474:	468b      	mov	fp, r1
 8008476:	4690      	mov	r8, r2
 8008478:	f7f7 feaa 	bl	80001d0 <strlen>
 800847c:	9b01      	ldr	r3, [sp, #4]
 800847e:	f8db 2000 	ldr.w	r2, [fp]
 8008482:	4403      	add	r3, r0
 8008484:	4682      	mov	sl, r0
 8008486:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800848a:	9305      	str	r3, [sp, #20]
 800848c:	1c93      	adds	r3, r2, #2
 800848e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008492:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008496:	32fe      	adds	r2, #254	; 0xfe
 8008498:	18d1      	adds	r1, r2, r3
 800849a:	461f      	mov	r7, r3
 800849c:	f813 0b01 	ldrb.w	r0, [r3], #1
 80084a0:	9100      	str	r1, [sp, #0]
 80084a2:	2830      	cmp	r0, #48	; 0x30
 80084a4:	d0f8      	beq.n	8008498 <__gethex+0x3c>
 80084a6:	f7ff ffc4 	bl	8008432 <__hexdig_fun>
 80084aa:	4604      	mov	r4, r0
 80084ac:	2800      	cmp	r0, #0
 80084ae:	d13a      	bne.n	8008526 <__gethex+0xca>
 80084b0:	9901      	ldr	r1, [sp, #4]
 80084b2:	4652      	mov	r2, sl
 80084b4:	4638      	mov	r0, r7
 80084b6:	f001 fb1e 	bl	8009af6 <strncmp>
 80084ba:	4605      	mov	r5, r0
 80084bc:	2800      	cmp	r0, #0
 80084be:	d168      	bne.n	8008592 <__gethex+0x136>
 80084c0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80084c4:	eb07 060a 	add.w	r6, r7, sl
 80084c8:	f7ff ffb3 	bl	8008432 <__hexdig_fun>
 80084cc:	2800      	cmp	r0, #0
 80084ce:	d062      	beq.n	8008596 <__gethex+0x13a>
 80084d0:	4633      	mov	r3, r6
 80084d2:	7818      	ldrb	r0, [r3, #0]
 80084d4:	2830      	cmp	r0, #48	; 0x30
 80084d6:	461f      	mov	r7, r3
 80084d8:	f103 0301 	add.w	r3, r3, #1
 80084dc:	d0f9      	beq.n	80084d2 <__gethex+0x76>
 80084de:	f7ff ffa8 	bl	8008432 <__hexdig_fun>
 80084e2:	2301      	movs	r3, #1
 80084e4:	fab0 f480 	clz	r4, r0
 80084e8:	0964      	lsrs	r4, r4, #5
 80084ea:	4635      	mov	r5, r6
 80084ec:	9300      	str	r3, [sp, #0]
 80084ee:	463a      	mov	r2, r7
 80084f0:	4616      	mov	r6, r2
 80084f2:	3201      	adds	r2, #1
 80084f4:	7830      	ldrb	r0, [r6, #0]
 80084f6:	f7ff ff9c 	bl	8008432 <__hexdig_fun>
 80084fa:	2800      	cmp	r0, #0
 80084fc:	d1f8      	bne.n	80084f0 <__gethex+0x94>
 80084fe:	9901      	ldr	r1, [sp, #4]
 8008500:	4652      	mov	r2, sl
 8008502:	4630      	mov	r0, r6
 8008504:	f001 faf7 	bl	8009af6 <strncmp>
 8008508:	b980      	cbnz	r0, 800852c <__gethex+0xd0>
 800850a:	b94d      	cbnz	r5, 8008520 <__gethex+0xc4>
 800850c:	eb06 050a 	add.w	r5, r6, sl
 8008510:	462a      	mov	r2, r5
 8008512:	4616      	mov	r6, r2
 8008514:	3201      	adds	r2, #1
 8008516:	7830      	ldrb	r0, [r6, #0]
 8008518:	f7ff ff8b 	bl	8008432 <__hexdig_fun>
 800851c:	2800      	cmp	r0, #0
 800851e:	d1f8      	bne.n	8008512 <__gethex+0xb6>
 8008520:	1bad      	subs	r5, r5, r6
 8008522:	00ad      	lsls	r5, r5, #2
 8008524:	e004      	b.n	8008530 <__gethex+0xd4>
 8008526:	2400      	movs	r4, #0
 8008528:	4625      	mov	r5, r4
 800852a:	e7e0      	b.n	80084ee <__gethex+0x92>
 800852c:	2d00      	cmp	r5, #0
 800852e:	d1f7      	bne.n	8008520 <__gethex+0xc4>
 8008530:	7833      	ldrb	r3, [r6, #0]
 8008532:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008536:	2b50      	cmp	r3, #80	; 0x50
 8008538:	d13b      	bne.n	80085b2 <__gethex+0x156>
 800853a:	7873      	ldrb	r3, [r6, #1]
 800853c:	2b2b      	cmp	r3, #43	; 0x2b
 800853e:	d02c      	beq.n	800859a <__gethex+0x13e>
 8008540:	2b2d      	cmp	r3, #45	; 0x2d
 8008542:	d02e      	beq.n	80085a2 <__gethex+0x146>
 8008544:	1c71      	adds	r1, r6, #1
 8008546:	f04f 0900 	mov.w	r9, #0
 800854a:	7808      	ldrb	r0, [r1, #0]
 800854c:	f7ff ff71 	bl	8008432 <__hexdig_fun>
 8008550:	1e43      	subs	r3, r0, #1
 8008552:	b2db      	uxtb	r3, r3
 8008554:	2b18      	cmp	r3, #24
 8008556:	d82c      	bhi.n	80085b2 <__gethex+0x156>
 8008558:	f1a0 0210 	sub.w	r2, r0, #16
 800855c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008560:	f7ff ff67 	bl	8008432 <__hexdig_fun>
 8008564:	1e43      	subs	r3, r0, #1
 8008566:	b2db      	uxtb	r3, r3
 8008568:	2b18      	cmp	r3, #24
 800856a:	d91d      	bls.n	80085a8 <__gethex+0x14c>
 800856c:	f1b9 0f00 	cmp.w	r9, #0
 8008570:	d000      	beq.n	8008574 <__gethex+0x118>
 8008572:	4252      	negs	r2, r2
 8008574:	4415      	add	r5, r2
 8008576:	f8cb 1000 	str.w	r1, [fp]
 800857a:	b1e4      	cbz	r4, 80085b6 <__gethex+0x15a>
 800857c:	9b00      	ldr	r3, [sp, #0]
 800857e:	2b00      	cmp	r3, #0
 8008580:	bf14      	ite	ne
 8008582:	2700      	movne	r7, #0
 8008584:	2706      	moveq	r7, #6
 8008586:	4638      	mov	r0, r7
 8008588:	b009      	add	sp, #36	; 0x24
 800858a:	ecbd 8b02 	vpop	{d8}
 800858e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008592:	463e      	mov	r6, r7
 8008594:	4625      	mov	r5, r4
 8008596:	2401      	movs	r4, #1
 8008598:	e7ca      	b.n	8008530 <__gethex+0xd4>
 800859a:	f04f 0900 	mov.w	r9, #0
 800859e:	1cb1      	adds	r1, r6, #2
 80085a0:	e7d3      	b.n	800854a <__gethex+0xee>
 80085a2:	f04f 0901 	mov.w	r9, #1
 80085a6:	e7fa      	b.n	800859e <__gethex+0x142>
 80085a8:	230a      	movs	r3, #10
 80085aa:	fb03 0202 	mla	r2, r3, r2, r0
 80085ae:	3a10      	subs	r2, #16
 80085b0:	e7d4      	b.n	800855c <__gethex+0x100>
 80085b2:	4631      	mov	r1, r6
 80085b4:	e7df      	b.n	8008576 <__gethex+0x11a>
 80085b6:	1bf3      	subs	r3, r6, r7
 80085b8:	3b01      	subs	r3, #1
 80085ba:	4621      	mov	r1, r4
 80085bc:	2b07      	cmp	r3, #7
 80085be:	dc0b      	bgt.n	80085d8 <__gethex+0x17c>
 80085c0:	ee18 0a10 	vmov	r0, s16
 80085c4:	f000 fadc 	bl	8008b80 <_Balloc>
 80085c8:	4604      	mov	r4, r0
 80085ca:	b940      	cbnz	r0, 80085de <__gethex+0x182>
 80085cc:	4b65      	ldr	r3, [pc, #404]	; (8008764 <__gethex+0x308>)
 80085ce:	4602      	mov	r2, r0
 80085d0:	21de      	movs	r1, #222	; 0xde
 80085d2:	4865      	ldr	r0, [pc, #404]	; (8008768 <__gethex+0x30c>)
 80085d4:	f001 fac0 	bl	8009b58 <__assert_func>
 80085d8:	3101      	adds	r1, #1
 80085da:	105b      	asrs	r3, r3, #1
 80085dc:	e7ee      	b.n	80085bc <__gethex+0x160>
 80085de:	f100 0914 	add.w	r9, r0, #20
 80085e2:	f04f 0b00 	mov.w	fp, #0
 80085e6:	f1ca 0301 	rsb	r3, sl, #1
 80085ea:	f8cd 9008 	str.w	r9, [sp, #8]
 80085ee:	f8cd b000 	str.w	fp, [sp]
 80085f2:	9306      	str	r3, [sp, #24]
 80085f4:	42b7      	cmp	r7, r6
 80085f6:	d340      	bcc.n	800867a <__gethex+0x21e>
 80085f8:	9802      	ldr	r0, [sp, #8]
 80085fa:	9b00      	ldr	r3, [sp, #0]
 80085fc:	f840 3b04 	str.w	r3, [r0], #4
 8008600:	eba0 0009 	sub.w	r0, r0, r9
 8008604:	1080      	asrs	r0, r0, #2
 8008606:	0146      	lsls	r6, r0, #5
 8008608:	6120      	str	r0, [r4, #16]
 800860a:	4618      	mov	r0, r3
 800860c:	f000 fbae 	bl	8008d6c <__hi0bits>
 8008610:	1a30      	subs	r0, r6, r0
 8008612:	f8d8 6000 	ldr.w	r6, [r8]
 8008616:	42b0      	cmp	r0, r6
 8008618:	dd63      	ble.n	80086e2 <__gethex+0x286>
 800861a:	1b87      	subs	r7, r0, r6
 800861c:	4639      	mov	r1, r7
 800861e:	4620      	mov	r0, r4
 8008620:	f000 ff48 	bl	80094b4 <__any_on>
 8008624:	4682      	mov	sl, r0
 8008626:	b1a8      	cbz	r0, 8008654 <__gethex+0x1f8>
 8008628:	1e7b      	subs	r3, r7, #1
 800862a:	1159      	asrs	r1, r3, #5
 800862c:	f003 021f 	and.w	r2, r3, #31
 8008630:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008634:	f04f 0a01 	mov.w	sl, #1
 8008638:	fa0a f202 	lsl.w	r2, sl, r2
 800863c:	420a      	tst	r2, r1
 800863e:	d009      	beq.n	8008654 <__gethex+0x1f8>
 8008640:	4553      	cmp	r3, sl
 8008642:	dd05      	ble.n	8008650 <__gethex+0x1f4>
 8008644:	1eb9      	subs	r1, r7, #2
 8008646:	4620      	mov	r0, r4
 8008648:	f000 ff34 	bl	80094b4 <__any_on>
 800864c:	2800      	cmp	r0, #0
 800864e:	d145      	bne.n	80086dc <__gethex+0x280>
 8008650:	f04f 0a02 	mov.w	sl, #2
 8008654:	4639      	mov	r1, r7
 8008656:	4620      	mov	r0, r4
 8008658:	f7ff fe99 	bl	800838e <rshift>
 800865c:	443d      	add	r5, r7
 800865e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008662:	42ab      	cmp	r3, r5
 8008664:	da4c      	bge.n	8008700 <__gethex+0x2a4>
 8008666:	ee18 0a10 	vmov	r0, s16
 800866a:	4621      	mov	r1, r4
 800866c:	f000 fac8 	bl	8008c00 <_Bfree>
 8008670:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008672:	2300      	movs	r3, #0
 8008674:	6013      	str	r3, [r2, #0]
 8008676:	27a3      	movs	r7, #163	; 0xa3
 8008678:	e785      	b.n	8008586 <__gethex+0x12a>
 800867a:	1e73      	subs	r3, r6, #1
 800867c:	9a05      	ldr	r2, [sp, #20]
 800867e:	9303      	str	r3, [sp, #12]
 8008680:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008684:	4293      	cmp	r3, r2
 8008686:	d019      	beq.n	80086bc <__gethex+0x260>
 8008688:	f1bb 0f20 	cmp.w	fp, #32
 800868c:	d107      	bne.n	800869e <__gethex+0x242>
 800868e:	9b02      	ldr	r3, [sp, #8]
 8008690:	9a00      	ldr	r2, [sp, #0]
 8008692:	f843 2b04 	str.w	r2, [r3], #4
 8008696:	9302      	str	r3, [sp, #8]
 8008698:	2300      	movs	r3, #0
 800869a:	9300      	str	r3, [sp, #0]
 800869c:	469b      	mov	fp, r3
 800869e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80086a2:	f7ff fec6 	bl	8008432 <__hexdig_fun>
 80086a6:	9b00      	ldr	r3, [sp, #0]
 80086a8:	f000 000f 	and.w	r0, r0, #15
 80086ac:	fa00 f00b 	lsl.w	r0, r0, fp
 80086b0:	4303      	orrs	r3, r0
 80086b2:	9300      	str	r3, [sp, #0]
 80086b4:	f10b 0b04 	add.w	fp, fp, #4
 80086b8:	9b03      	ldr	r3, [sp, #12]
 80086ba:	e00d      	b.n	80086d8 <__gethex+0x27c>
 80086bc:	9b03      	ldr	r3, [sp, #12]
 80086be:	9a06      	ldr	r2, [sp, #24]
 80086c0:	4413      	add	r3, r2
 80086c2:	42bb      	cmp	r3, r7
 80086c4:	d3e0      	bcc.n	8008688 <__gethex+0x22c>
 80086c6:	4618      	mov	r0, r3
 80086c8:	9901      	ldr	r1, [sp, #4]
 80086ca:	9307      	str	r3, [sp, #28]
 80086cc:	4652      	mov	r2, sl
 80086ce:	f001 fa12 	bl	8009af6 <strncmp>
 80086d2:	9b07      	ldr	r3, [sp, #28]
 80086d4:	2800      	cmp	r0, #0
 80086d6:	d1d7      	bne.n	8008688 <__gethex+0x22c>
 80086d8:	461e      	mov	r6, r3
 80086da:	e78b      	b.n	80085f4 <__gethex+0x198>
 80086dc:	f04f 0a03 	mov.w	sl, #3
 80086e0:	e7b8      	b.n	8008654 <__gethex+0x1f8>
 80086e2:	da0a      	bge.n	80086fa <__gethex+0x29e>
 80086e4:	1a37      	subs	r7, r6, r0
 80086e6:	4621      	mov	r1, r4
 80086e8:	ee18 0a10 	vmov	r0, s16
 80086ec:	463a      	mov	r2, r7
 80086ee:	f000 fca3 	bl	8009038 <__lshift>
 80086f2:	1bed      	subs	r5, r5, r7
 80086f4:	4604      	mov	r4, r0
 80086f6:	f100 0914 	add.w	r9, r0, #20
 80086fa:	f04f 0a00 	mov.w	sl, #0
 80086fe:	e7ae      	b.n	800865e <__gethex+0x202>
 8008700:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008704:	42a8      	cmp	r0, r5
 8008706:	dd72      	ble.n	80087ee <__gethex+0x392>
 8008708:	1b45      	subs	r5, r0, r5
 800870a:	42ae      	cmp	r6, r5
 800870c:	dc36      	bgt.n	800877c <__gethex+0x320>
 800870e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008712:	2b02      	cmp	r3, #2
 8008714:	d02a      	beq.n	800876c <__gethex+0x310>
 8008716:	2b03      	cmp	r3, #3
 8008718:	d02c      	beq.n	8008774 <__gethex+0x318>
 800871a:	2b01      	cmp	r3, #1
 800871c:	d115      	bne.n	800874a <__gethex+0x2ee>
 800871e:	42ae      	cmp	r6, r5
 8008720:	d113      	bne.n	800874a <__gethex+0x2ee>
 8008722:	2e01      	cmp	r6, #1
 8008724:	d10b      	bne.n	800873e <__gethex+0x2e2>
 8008726:	9a04      	ldr	r2, [sp, #16]
 8008728:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800872c:	6013      	str	r3, [r2, #0]
 800872e:	2301      	movs	r3, #1
 8008730:	6123      	str	r3, [r4, #16]
 8008732:	f8c9 3000 	str.w	r3, [r9]
 8008736:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008738:	2762      	movs	r7, #98	; 0x62
 800873a:	601c      	str	r4, [r3, #0]
 800873c:	e723      	b.n	8008586 <__gethex+0x12a>
 800873e:	1e71      	subs	r1, r6, #1
 8008740:	4620      	mov	r0, r4
 8008742:	f000 feb7 	bl	80094b4 <__any_on>
 8008746:	2800      	cmp	r0, #0
 8008748:	d1ed      	bne.n	8008726 <__gethex+0x2ca>
 800874a:	ee18 0a10 	vmov	r0, s16
 800874e:	4621      	mov	r1, r4
 8008750:	f000 fa56 	bl	8008c00 <_Bfree>
 8008754:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008756:	2300      	movs	r3, #0
 8008758:	6013      	str	r3, [r2, #0]
 800875a:	2750      	movs	r7, #80	; 0x50
 800875c:	e713      	b.n	8008586 <__gethex+0x12a>
 800875e:	bf00      	nop
 8008760:	0800a2fc 	.word	0x0800a2fc
 8008764:	0800a21c 	.word	0x0800a21c
 8008768:	0800a290 	.word	0x0800a290
 800876c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800876e:	2b00      	cmp	r3, #0
 8008770:	d1eb      	bne.n	800874a <__gethex+0x2ee>
 8008772:	e7d8      	b.n	8008726 <__gethex+0x2ca>
 8008774:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008776:	2b00      	cmp	r3, #0
 8008778:	d1d5      	bne.n	8008726 <__gethex+0x2ca>
 800877a:	e7e6      	b.n	800874a <__gethex+0x2ee>
 800877c:	1e6f      	subs	r7, r5, #1
 800877e:	f1ba 0f00 	cmp.w	sl, #0
 8008782:	d131      	bne.n	80087e8 <__gethex+0x38c>
 8008784:	b127      	cbz	r7, 8008790 <__gethex+0x334>
 8008786:	4639      	mov	r1, r7
 8008788:	4620      	mov	r0, r4
 800878a:	f000 fe93 	bl	80094b4 <__any_on>
 800878e:	4682      	mov	sl, r0
 8008790:	117b      	asrs	r3, r7, #5
 8008792:	2101      	movs	r1, #1
 8008794:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008798:	f007 071f 	and.w	r7, r7, #31
 800879c:	fa01 f707 	lsl.w	r7, r1, r7
 80087a0:	421f      	tst	r7, r3
 80087a2:	4629      	mov	r1, r5
 80087a4:	4620      	mov	r0, r4
 80087a6:	bf18      	it	ne
 80087a8:	f04a 0a02 	orrne.w	sl, sl, #2
 80087ac:	1b76      	subs	r6, r6, r5
 80087ae:	f7ff fdee 	bl	800838e <rshift>
 80087b2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80087b6:	2702      	movs	r7, #2
 80087b8:	f1ba 0f00 	cmp.w	sl, #0
 80087bc:	d048      	beq.n	8008850 <__gethex+0x3f4>
 80087be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80087c2:	2b02      	cmp	r3, #2
 80087c4:	d015      	beq.n	80087f2 <__gethex+0x396>
 80087c6:	2b03      	cmp	r3, #3
 80087c8:	d017      	beq.n	80087fa <__gethex+0x39e>
 80087ca:	2b01      	cmp	r3, #1
 80087cc:	d109      	bne.n	80087e2 <__gethex+0x386>
 80087ce:	f01a 0f02 	tst.w	sl, #2
 80087d2:	d006      	beq.n	80087e2 <__gethex+0x386>
 80087d4:	f8d9 0000 	ldr.w	r0, [r9]
 80087d8:	ea4a 0a00 	orr.w	sl, sl, r0
 80087dc:	f01a 0f01 	tst.w	sl, #1
 80087e0:	d10e      	bne.n	8008800 <__gethex+0x3a4>
 80087e2:	f047 0710 	orr.w	r7, r7, #16
 80087e6:	e033      	b.n	8008850 <__gethex+0x3f4>
 80087e8:	f04f 0a01 	mov.w	sl, #1
 80087ec:	e7d0      	b.n	8008790 <__gethex+0x334>
 80087ee:	2701      	movs	r7, #1
 80087f0:	e7e2      	b.n	80087b8 <__gethex+0x35c>
 80087f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80087f4:	f1c3 0301 	rsb	r3, r3, #1
 80087f8:	9315      	str	r3, [sp, #84]	; 0x54
 80087fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d0f0      	beq.n	80087e2 <__gethex+0x386>
 8008800:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008804:	f104 0314 	add.w	r3, r4, #20
 8008808:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800880c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008810:	f04f 0c00 	mov.w	ip, #0
 8008814:	4618      	mov	r0, r3
 8008816:	f853 2b04 	ldr.w	r2, [r3], #4
 800881a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800881e:	d01c      	beq.n	800885a <__gethex+0x3fe>
 8008820:	3201      	adds	r2, #1
 8008822:	6002      	str	r2, [r0, #0]
 8008824:	2f02      	cmp	r7, #2
 8008826:	f104 0314 	add.w	r3, r4, #20
 800882a:	d13f      	bne.n	80088ac <__gethex+0x450>
 800882c:	f8d8 2000 	ldr.w	r2, [r8]
 8008830:	3a01      	subs	r2, #1
 8008832:	42b2      	cmp	r2, r6
 8008834:	d10a      	bne.n	800884c <__gethex+0x3f0>
 8008836:	1171      	asrs	r1, r6, #5
 8008838:	2201      	movs	r2, #1
 800883a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800883e:	f006 061f 	and.w	r6, r6, #31
 8008842:	fa02 f606 	lsl.w	r6, r2, r6
 8008846:	421e      	tst	r6, r3
 8008848:	bf18      	it	ne
 800884a:	4617      	movne	r7, r2
 800884c:	f047 0720 	orr.w	r7, r7, #32
 8008850:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008852:	601c      	str	r4, [r3, #0]
 8008854:	9b04      	ldr	r3, [sp, #16]
 8008856:	601d      	str	r5, [r3, #0]
 8008858:	e695      	b.n	8008586 <__gethex+0x12a>
 800885a:	4299      	cmp	r1, r3
 800885c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008860:	d8d8      	bhi.n	8008814 <__gethex+0x3b8>
 8008862:	68a3      	ldr	r3, [r4, #8]
 8008864:	459b      	cmp	fp, r3
 8008866:	db19      	blt.n	800889c <__gethex+0x440>
 8008868:	6861      	ldr	r1, [r4, #4]
 800886a:	ee18 0a10 	vmov	r0, s16
 800886e:	3101      	adds	r1, #1
 8008870:	f000 f986 	bl	8008b80 <_Balloc>
 8008874:	4681      	mov	r9, r0
 8008876:	b918      	cbnz	r0, 8008880 <__gethex+0x424>
 8008878:	4b1a      	ldr	r3, [pc, #104]	; (80088e4 <__gethex+0x488>)
 800887a:	4602      	mov	r2, r0
 800887c:	2184      	movs	r1, #132	; 0x84
 800887e:	e6a8      	b.n	80085d2 <__gethex+0x176>
 8008880:	6922      	ldr	r2, [r4, #16]
 8008882:	3202      	adds	r2, #2
 8008884:	f104 010c 	add.w	r1, r4, #12
 8008888:	0092      	lsls	r2, r2, #2
 800888a:	300c      	adds	r0, #12
 800888c:	f7fc fcfe 	bl	800528c <memcpy>
 8008890:	4621      	mov	r1, r4
 8008892:	ee18 0a10 	vmov	r0, s16
 8008896:	f000 f9b3 	bl	8008c00 <_Bfree>
 800889a:	464c      	mov	r4, r9
 800889c:	6923      	ldr	r3, [r4, #16]
 800889e:	1c5a      	adds	r2, r3, #1
 80088a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80088a4:	6122      	str	r2, [r4, #16]
 80088a6:	2201      	movs	r2, #1
 80088a8:	615a      	str	r2, [r3, #20]
 80088aa:	e7bb      	b.n	8008824 <__gethex+0x3c8>
 80088ac:	6922      	ldr	r2, [r4, #16]
 80088ae:	455a      	cmp	r2, fp
 80088b0:	dd0b      	ble.n	80088ca <__gethex+0x46e>
 80088b2:	2101      	movs	r1, #1
 80088b4:	4620      	mov	r0, r4
 80088b6:	f7ff fd6a 	bl	800838e <rshift>
 80088ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80088be:	3501      	adds	r5, #1
 80088c0:	42ab      	cmp	r3, r5
 80088c2:	f6ff aed0 	blt.w	8008666 <__gethex+0x20a>
 80088c6:	2701      	movs	r7, #1
 80088c8:	e7c0      	b.n	800884c <__gethex+0x3f0>
 80088ca:	f016 061f 	ands.w	r6, r6, #31
 80088ce:	d0fa      	beq.n	80088c6 <__gethex+0x46a>
 80088d0:	449a      	add	sl, r3
 80088d2:	f1c6 0620 	rsb	r6, r6, #32
 80088d6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80088da:	f000 fa47 	bl	8008d6c <__hi0bits>
 80088de:	42b0      	cmp	r0, r6
 80088e0:	dbe7      	blt.n	80088b2 <__gethex+0x456>
 80088e2:	e7f0      	b.n	80088c6 <__gethex+0x46a>
 80088e4:	0800a21c 	.word	0x0800a21c

080088e8 <L_shift>:
 80088e8:	f1c2 0208 	rsb	r2, r2, #8
 80088ec:	0092      	lsls	r2, r2, #2
 80088ee:	b570      	push	{r4, r5, r6, lr}
 80088f0:	f1c2 0620 	rsb	r6, r2, #32
 80088f4:	6843      	ldr	r3, [r0, #4]
 80088f6:	6804      	ldr	r4, [r0, #0]
 80088f8:	fa03 f506 	lsl.w	r5, r3, r6
 80088fc:	432c      	orrs	r4, r5
 80088fe:	40d3      	lsrs	r3, r2
 8008900:	6004      	str	r4, [r0, #0]
 8008902:	f840 3f04 	str.w	r3, [r0, #4]!
 8008906:	4288      	cmp	r0, r1
 8008908:	d3f4      	bcc.n	80088f4 <L_shift+0xc>
 800890a:	bd70      	pop	{r4, r5, r6, pc}

0800890c <__match>:
 800890c:	b530      	push	{r4, r5, lr}
 800890e:	6803      	ldr	r3, [r0, #0]
 8008910:	3301      	adds	r3, #1
 8008912:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008916:	b914      	cbnz	r4, 800891e <__match+0x12>
 8008918:	6003      	str	r3, [r0, #0]
 800891a:	2001      	movs	r0, #1
 800891c:	bd30      	pop	{r4, r5, pc}
 800891e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008922:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008926:	2d19      	cmp	r5, #25
 8008928:	bf98      	it	ls
 800892a:	3220      	addls	r2, #32
 800892c:	42a2      	cmp	r2, r4
 800892e:	d0f0      	beq.n	8008912 <__match+0x6>
 8008930:	2000      	movs	r0, #0
 8008932:	e7f3      	b.n	800891c <__match+0x10>

08008934 <__hexnan>:
 8008934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008938:	680b      	ldr	r3, [r1, #0]
 800893a:	6801      	ldr	r1, [r0, #0]
 800893c:	115e      	asrs	r6, r3, #5
 800893e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008942:	f013 031f 	ands.w	r3, r3, #31
 8008946:	b087      	sub	sp, #28
 8008948:	bf18      	it	ne
 800894a:	3604      	addne	r6, #4
 800894c:	2500      	movs	r5, #0
 800894e:	1f37      	subs	r7, r6, #4
 8008950:	4682      	mov	sl, r0
 8008952:	4690      	mov	r8, r2
 8008954:	9301      	str	r3, [sp, #4]
 8008956:	f846 5c04 	str.w	r5, [r6, #-4]
 800895a:	46b9      	mov	r9, r7
 800895c:	463c      	mov	r4, r7
 800895e:	9502      	str	r5, [sp, #8]
 8008960:	46ab      	mov	fp, r5
 8008962:	784a      	ldrb	r2, [r1, #1]
 8008964:	1c4b      	adds	r3, r1, #1
 8008966:	9303      	str	r3, [sp, #12]
 8008968:	b342      	cbz	r2, 80089bc <__hexnan+0x88>
 800896a:	4610      	mov	r0, r2
 800896c:	9105      	str	r1, [sp, #20]
 800896e:	9204      	str	r2, [sp, #16]
 8008970:	f7ff fd5f 	bl	8008432 <__hexdig_fun>
 8008974:	2800      	cmp	r0, #0
 8008976:	d14f      	bne.n	8008a18 <__hexnan+0xe4>
 8008978:	9a04      	ldr	r2, [sp, #16]
 800897a:	9905      	ldr	r1, [sp, #20]
 800897c:	2a20      	cmp	r2, #32
 800897e:	d818      	bhi.n	80089b2 <__hexnan+0x7e>
 8008980:	9b02      	ldr	r3, [sp, #8]
 8008982:	459b      	cmp	fp, r3
 8008984:	dd13      	ble.n	80089ae <__hexnan+0x7a>
 8008986:	454c      	cmp	r4, r9
 8008988:	d206      	bcs.n	8008998 <__hexnan+0x64>
 800898a:	2d07      	cmp	r5, #7
 800898c:	dc04      	bgt.n	8008998 <__hexnan+0x64>
 800898e:	462a      	mov	r2, r5
 8008990:	4649      	mov	r1, r9
 8008992:	4620      	mov	r0, r4
 8008994:	f7ff ffa8 	bl	80088e8 <L_shift>
 8008998:	4544      	cmp	r4, r8
 800899a:	d950      	bls.n	8008a3e <__hexnan+0x10a>
 800899c:	2300      	movs	r3, #0
 800899e:	f1a4 0904 	sub.w	r9, r4, #4
 80089a2:	f844 3c04 	str.w	r3, [r4, #-4]
 80089a6:	f8cd b008 	str.w	fp, [sp, #8]
 80089aa:	464c      	mov	r4, r9
 80089ac:	461d      	mov	r5, r3
 80089ae:	9903      	ldr	r1, [sp, #12]
 80089b0:	e7d7      	b.n	8008962 <__hexnan+0x2e>
 80089b2:	2a29      	cmp	r2, #41	; 0x29
 80089b4:	d156      	bne.n	8008a64 <__hexnan+0x130>
 80089b6:	3102      	adds	r1, #2
 80089b8:	f8ca 1000 	str.w	r1, [sl]
 80089bc:	f1bb 0f00 	cmp.w	fp, #0
 80089c0:	d050      	beq.n	8008a64 <__hexnan+0x130>
 80089c2:	454c      	cmp	r4, r9
 80089c4:	d206      	bcs.n	80089d4 <__hexnan+0xa0>
 80089c6:	2d07      	cmp	r5, #7
 80089c8:	dc04      	bgt.n	80089d4 <__hexnan+0xa0>
 80089ca:	462a      	mov	r2, r5
 80089cc:	4649      	mov	r1, r9
 80089ce:	4620      	mov	r0, r4
 80089d0:	f7ff ff8a 	bl	80088e8 <L_shift>
 80089d4:	4544      	cmp	r4, r8
 80089d6:	d934      	bls.n	8008a42 <__hexnan+0x10e>
 80089d8:	f1a8 0204 	sub.w	r2, r8, #4
 80089dc:	4623      	mov	r3, r4
 80089de:	f853 1b04 	ldr.w	r1, [r3], #4
 80089e2:	f842 1f04 	str.w	r1, [r2, #4]!
 80089e6:	429f      	cmp	r7, r3
 80089e8:	d2f9      	bcs.n	80089de <__hexnan+0xaa>
 80089ea:	1b3b      	subs	r3, r7, r4
 80089ec:	f023 0303 	bic.w	r3, r3, #3
 80089f0:	3304      	adds	r3, #4
 80089f2:	3401      	adds	r4, #1
 80089f4:	3e03      	subs	r6, #3
 80089f6:	42b4      	cmp	r4, r6
 80089f8:	bf88      	it	hi
 80089fa:	2304      	movhi	r3, #4
 80089fc:	4443      	add	r3, r8
 80089fe:	2200      	movs	r2, #0
 8008a00:	f843 2b04 	str.w	r2, [r3], #4
 8008a04:	429f      	cmp	r7, r3
 8008a06:	d2fb      	bcs.n	8008a00 <__hexnan+0xcc>
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	b91b      	cbnz	r3, 8008a14 <__hexnan+0xe0>
 8008a0c:	4547      	cmp	r7, r8
 8008a0e:	d127      	bne.n	8008a60 <__hexnan+0x12c>
 8008a10:	2301      	movs	r3, #1
 8008a12:	603b      	str	r3, [r7, #0]
 8008a14:	2005      	movs	r0, #5
 8008a16:	e026      	b.n	8008a66 <__hexnan+0x132>
 8008a18:	3501      	adds	r5, #1
 8008a1a:	2d08      	cmp	r5, #8
 8008a1c:	f10b 0b01 	add.w	fp, fp, #1
 8008a20:	dd06      	ble.n	8008a30 <__hexnan+0xfc>
 8008a22:	4544      	cmp	r4, r8
 8008a24:	d9c3      	bls.n	80089ae <__hexnan+0x7a>
 8008a26:	2300      	movs	r3, #0
 8008a28:	f844 3c04 	str.w	r3, [r4, #-4]
 8008a2c:	2501      	movs	r5, #1
 8008a2e:	3c04      	subs	r4, #4
 8008a30:	6822      	ldr	r2, [r4, #0]
 8008a32:	f000 000f 	and.w	r0, r0, #15
 8008a36:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008a3a:	6022      	str	r2, [r4, #0]
 8008a3c:	e7b7      	b.n	80089ae <__hexnan+0x7a>
 8008a3e:	2508      	movs	r5, #8
 8008a40:	e7b5      	b.n	80089ae <__hexnan+0x7a>
 8008a42:	9b01      	ldr	r3, [sp, #4]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d0df      	beq.n	8008a08 <__hexnan+0xd4>
 8008a48:	f04f 32ff 	mov.w	r2, #4294967295
 8008a4c:	f1c3 0320 	rsb	r3, r3, #32
 8008a50:	fa22 f303 	lsr.w	r3, r2, r3
 8008a54:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008a58:	401a      	ands	r2, r3
 8008a5a:	f846 2c04 	str.w	r2, [r6, #-4]
 8008a5e:	e7d3      	b.n	8008a08 <__hexnan+0xd4>
 8008a60:	3f04      	subs	r7, #4
 8008a62:	e7d1      	b.n	8008a08 <__hexnan+0xd4>
 8008a64:	2004      	movs	r0, #4
 8008a66:	b007      	add	sp, #28
 8008a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008a6c <_localeconv_r>:
 8008a6c:	4800      	ldr	r0, [pc, #0]	; (8008a70 <_localeconv_r+0x4>)
 8008a6e:	4770      	bx	lr
 8008a70:	2000017c 	.word	0x2000017c

08008a74 <__retarget_lock_init_recursive>:
 8008a74:	4770      	bx	lr

08008a76 <__retarget_lock_acquire_recursive>:
 8008a76:	4770      	bx	lr

08008a78 <__retarget_lock_release_recursive>:
 8008a78:	4770      	bx	lr

08008a7a <__swhatbuf_r>:
 8008a7a:	b570      	push	{r4, r5, r6, lr}
 8008a7c:	460e      	mov	r6, r1
 8008a7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a82:	2900      	cmp	r1, #0
 8008a84:	b096      	sub	sp, #88	; 0x58
 8008a86:	4614      	mov	r4, r2
 8008a88:	461d      	mov	r5, r3
 8008a8a:	da07      	bge.n	8008a9c <__swhatbuf_r+0x22>
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	602b      	str	r3, [r5, #0]
 8008a90:	89b3      	ldrh	r3, [r6, #12]
 8008a92:	061a      	lsls	r2, r3, #24
 8008a94:	d410      	bmi.n	8008ab8 <__swhatbuf_r+0x3e>
 8008a96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a9a:	e00e      	b.n	8008aba <__swhatbuf_r+0x40>
 8008a9c:	466a      	mov	r2, sp
 8008a9e:	f001 f89b 	bl	8009bd8 <_fstat_r>
 8008aa2:	2800      	cmp	r0, #0
 8008aa4:	dbf2      	blt.n	8008a8c <__swhatbuf_r+0x12>
 8008aa6:	9a01      	ldr	r2, [sp, #4]
 8008aa8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008aac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008ab0:	425a      	negs	r2, r3
 8008ab2:	415a      	adcs	r2, r3
 8008ab4:	602a      	str	r2, [r5, #0]
 8008ab6:	e7ee      	b.n	8008a96 <__swhatbuf_r+0x1c>
 8008ab8:	2340      	movs	r3, #64	; 0x40
 8008aba:	2000      	movs	r0, #0
 8008abc:	6023      	str	r3, [r4, #0]
 8008abe:	b016      	add	sp, #88	; 0x58
 8008ac0:	bd70      	pop	{r4, r5, r6, pc}
	...

08008ac4 <__smakebuf_r>:
 8008ac4:	898b      	ldrh	r3, [r1, #12]
 8008ac6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ac8:	079d      	lsls	r5, r3, #30
 8008aca:	4606      	mov	r6, r0
 8008acc:	460c      	mov	r4, r1
 8008ace:	d507      	bpl.n	8008ae0 <__smakebuf_r+0x1c>
 8008ad0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ad4:	6023      	str	r3, [r4, #0]
 8008ad6:	6123      	str	r3, [r4, #16]
 8008ad8:	2301      	movs	r3, #1
 8008ada:	6163      	str	r3, [r4, #20]
 8008adc:	b002      	add	sp, #8
 8008ade:	bd70      	pop	{r4, r5, r6, pc}
 8008ae0:	ab01      	add	r3, sp, #4
 8008ae2:	466a      	mov	r2, sp
 8008ae4:	f7ff ffc9 	bl	8008a7a <__swhatbuf_r>
 8008ae8:	9900      	ldr	r1, [sp, #0]
 8008aea:	4605      	mov	r5, r0
 8008aec:	4630      	mov	r0, r6
 8008aee:	f7fc fc43 	bl	8005378 <_malloc_r>
 8008af2:	b948      	cbnz	r0, 8008b08 <__smakebuf_r+0x44>
 8008af4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008af8:	059a      	lsls	r2, r3, #22
 8008afa:	d4ef      	bmi.n	8008adc <__smakebuf_r+0x18>
 8008afc:	f023 0303 	bic.w	r3, r3, #3
 8008b00:	f043 0302 	orr.w	r3, r3, #2
 8008b04:	81a3      	strh	r3, [r4, #12]
 8008b06:	e7e3      	b.n	8008ad0 <__smakebuf_r+0xc>
 8008b08:	4b0d      	ldr	r3, [pc, #52]	; (8008b40 <__smakebuf_r+0x7c>)
 8008b0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008b0c:	89a3      	ldrh	r3, [r4, #12]
 8008b0e:	6020      	str	r0, [r4, #0]
 8008b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b14:	81a3      	strh	r3, [r4, #12]
 8008b16:	9b00      	ldr	r3, [sp, #0]
 8008b18:	6163      	str	r3, [r4, #20]
 8008b1a:	9b01      	ldr	r3, [sp, #4]
 8008b1c:	6120      	str	r0, [r4, #16]
 8008b1e:	b15b      	cbz	r3, 8008b38 <__smakebuf_r+0x74>
 8008b20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b24:	4630      	mov	r0, r6
 8008b26:	f001 f869 	bl	8009bfc <_isatty_r>
 8008b2a:	b128      	cbz	r0, 8008b38 <__smakebuf_r+0x74>
 8008b2c:	89a3      	ldrh	r3, [r4, #12]
 8008b2e:	f023 0303 	bic.w	r3, r3, #3
 8008b32:	f043 0301 	orr.w	r3, r3, #1
 8008b36:	81a3      	strh	r3, [r4, #12]
 8008b38:	89a0      	ldrh	r0, [r4, #12]
 8008b3a:	4305      	orrs	r5, r0
 8008b3c:	81a5      	strh	r5, [r4, #12]
 8008b3e:	e7cd      	b.n	8008adc <__smakebuf_r+0x18>
 8008b40:	080081ed 	.word	0x080081ed

08008b44 <__ascii_mbtowc>:
 8008b44:	b082      	sub	sp, #8
 8008b46:	b901      	cbnz	r1, 8008b4a <__ascii_mbtowc+0x6>
 8008b48:	a901      	add	r1, sp, #4
 8008b4a:	b142      	cbz	r2, 8008b5e <__ascii_mbtowc+0x1a>
 8008b4c:	b14b      	cbz	r3, 8008b62 <__ascii_mbtowc+0x1e>
 8008b4e:	7813      	ldrb	r3, [r2, #0]
 8008b50:	600b      	str	r3, [r1, #0]
 8008b52:	7812      	ldrb	r2, [r2, #0]
 8008b54:	1e10      	subs	r0, r2, #0
 8008b56:	bf18      	it	ne
 8008b58:	2001      	movne	r0, #1
 8008b5a:	b002      	add	sp, #8
 8008b5c:	4770      	bx	lr
 8008b5e:	4610      	mov	r0, r2
 8008b60:	e7fb      	b.n	8008b5a <__ascii_mbtowc+0x16>
 8008b62:	f06f 0001 	mvn.w	r0, #1
 8008b66:	e7f8      	b.n	8008b5a <__ascii_mbtowc+0x16>

08008b68 <__malloc_lock>:
 8008b68:	4801      	ldr	r0, [pc, #4]	; (8008b70 <__malloc_lock+0x8>)
 8008b6a:	f7ff bf84 	b.w	8008a76 <__retarget_lock_acquire_recursive>
 8008b6e:	bf00      	nop
 8008b70:	20001d53 	.word	0x20001d53

08008b74 <__malloc_unlock>:
 8008b74:	4801      	ldr	r0, [pc, #4]	; (8008b7c <__malloc_unlock+0x8>)
 8008b76:	f7ff bf7f 	b.w	8008a78 <__retarget_lock_release_recursive>
 8008b7a:	bf00      	nop
 8008b7c:	20001d53 	.word	0x20001d53

08008b80 <_Balloc>:
 8008b80:	b570      	push	{r4, r5, r6, lr}
 8008b82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008b84:	4604      	mov	r4, r0
 8008b86:	460d      	mov	r5, r1
 8008b88:	b976      	cbnz	r6, 8008ba8 <_Balloc+0x28>
 8008b8a:	2010      	movs	r0, #16
 8008b8c:	f7fc fb76 	bl	800527c <malloc>
 8008b90:	4602      	mov	r2, r0
 8008b92:	6260      	str	r0, [r4, #36]	; 0x24
 8008b94:	b920      	cbnz	r0, 8008ba0 <_Balloc+0x20>
 8008b96:	4b18      	ldr	r3, [pc, #96]	; (8008bf8 <_Balloc+0x78>)
 8008b98:	4818      	ldr	r0, [pc, #96]	; (8008bfc <_Balloc+0x7c>)
 8008b9a:	2166      	movs	r1, #102	; 0x66
 8008b9c:	f000 ffdc 	bl	8009b58 <__assert_func>
 8008ba0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ba4:	6006      	str	r6, [r0, #0]
 8008ba6:	60c6      	str	r6, [r0, #12]
 8008ba8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008baa:	68f3      	ldr	r3, [r6, #12]
 8008bac:	b183      	cbz	r3, 8008bd0 <_Balloc+0x50>
 8008bae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008bb6:	b9b8      	cbnz	r0, 8008be8 <_Balloc+0x68>
 8008bb8:	2101      	movs	r1, #1
 8008bba:	fa01 f605 	lsl.w	r6, r1, r5
 8008bbe:	1d72      	adds	r2, r6, #5
 8008bc0:	0092      	lsls	r2, r2, #2
 8008bc2:	4620      	mov	r0, r4
 8008bc4:	f7fc fb78 	bl	80052b8 <_calloc_r>
 8008bc8:	b160      	cbz	r0, 8008be4 <_Balloc+0x64>
 8008bca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008bce:	e00e      	b.n	8008bee <_Balloc+0x6e>
 8008bd0:	2221      	movs	r2, #33	; 0x21
 8008bd2:	2104      	movs	r1, #4
 8008bd4:	4620      	mov	r0, r4
 8008bd6:	f7fc fb6f 	bl	80052b8 <_calloc_r>
 8008bda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bdc:	60f0      	str	r0, [r6, #12]
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d1e4      	bne.n	8008bae <_Balloc+0x2e>
 8008be4:	2000      	movs	r0, #0
 8008be6:	bd70      	pop	{r4, r5, r6, pc}
 8008be8:	6802      	ldr	r2, [r0, #0]
 8008bea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008bee:	2300      	movs	r3, #0
 8008bf0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008bf4:	e7f7      	b.n	8008be6 <_Balloc+0x66>
 8008bf6:	bf00      	nop
 8008bf8:	0800a1a6 	.word	0x0800a1a6
 8008bfc:	0800a310 	.word	0x0800a310

08008c00 <_Bfree>:
 8008c00:	b570      	push	{r4, r5, r6, lr}
 8008c02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008c04:	4605      	mov	r5, r0
 8008c06:	460c      	mov	r4, r1
 8008c08:	b976      	cbnz	r6, 8008c28 <_Bfree+0x28>
 8008c0a:	2010      	movs	r0, #16
 8008c0c:	f7fc fb36 	bl	800527c <malloc>
 8008c10:	4602      	mov	r2, r0
 8008c12:	6268      	str	r0, [r5, #36]	; 0x24
 8008c14:	b920      	cbnz	r0, 8008c20 <_Bfree+0x20>
 8008c16:	4b09      	ldr	r3, [pc, #36]	; (8008c3c <_Bfree+0x3c>)
 8008c18:	4809      	ldr	r0, [pc, #36]	; (8008c40 <_Bfree+0x40>)
 8008c1a:	218a      	movs	r1, #138	; 0x8a
 8008c1c:	f000 ff9c 	bl	8009b58 <__assert_func>
 8008c20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c24:	6006      	str	r6, [r0, #0]
 8008c26:	60c6      	str	r6, [r0, #12]
 8008c28:	b13c      	cbz	r4, 8008c3a <_Bfree+0x3a>
 8008c2a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008c2c:	6862      	ldr	r2, [r4, #4]
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c34:	6021      	str	r1, [r4, #0]
 8008c36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008c3a:	bd70      	pop	{r4, r5, r6, pc}
 8008c3c:	0800a1a6 	.word	0x0800a1a6
 8008c40:	0800a310 	.word	0x0800a310

08008c44 <__multadd>:
 8008c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c48:	690e      	ldr	r6, [r1, #16]
 8008c4a:	4607      	mov	r7, r0
 8008c4c:	4698      	mov	r8, r3
 8008c4e:	460c      	mov	r4, r1
 8008c50:	f101 0014 	add.w	r0, r1, #20
 8008c54:	2300      	movs	r3, #0
 8008c56:	6805      	ldr	r5, [r0, #0]
 8008c58:	b2a9      	uxth	r1, r5
 8008c5a:	fb02 8101 	mla	r1, r2, r1, r8
 8008c5e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008c62:	0c2d      	lsrs	r5, r5, #16
 8008c64:	fb02 c505 	mla	r5, r2, r5, ip
 8008c68:	b289      	uxth	r1, r1
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008c70:	429e      	cmp	r6, r3
 8008c72:	f840 1b04 	str.w	r1, [r0], #4
 8008c76:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008c7a:	dcec      	bgt.n	8008c56 <__multadd+0x12>
 8008c7c:	f1b8 0f00 	cmp.w	r8, #0
 8008c80:	d022      	beq.n	8008cc8 <__multadd+0x84>
 8008c82:	68a3      	ldr	r3, [r4, #8]
 8008c84:	42b3      	cmp	r3, r6
 8008c86:	dc19      	bgt.n	8008cbc <__multadd+0x78>
 8008c88:	6861      	ldr	r1, [r4, #4]
 8008c8a:	4638      	mov	r0, r7
 8008c8c:	3101      	adds	r1, #1
 8008c8e:	f7ff ff77 	bl	8008b80 <_Balloc>
 8008c92:	4605      	mov	r5, r0
 8008c94:	b928      	cbnz	r0, 8008ca2 <__multadd+0x5e>
 8008c96:	4602      	mov	r2, r0
 8008c98:	4b0d      	ldr	r3, [pc, #52]	; (8008cd0 <__multadd+0x8c>)
 8008c9a:	480e      	ldr	r0, [pc, #56]	; (8008cd4 <__multadd+0x90>)
 8008c9c:	21b5      	movs	r1, #181	; 0xb5
 8008c9e:	f000 ff5b 	bl	8009b58 <__assert_func>
 8008ca2:	6922      	ldr	r2, [r4, #16]
 8008ca4:	3202      	adds	r2, #2
 8008ca6:	f104 010c 	add.w	r1, r4, #12
 8008caa:	0092      	lsls	r2, r2, #2
 8008cac:	300c      	adds	r0, #12
 8008cae:	f7fc faed 	bl	800528c <memcpy>
 8008cb2:	4621      	mov	r1, r4
 8008cb4:	4638      	mov	r0, r7
 8008cb6:	f7ff ffa3 	bl	8008c00 <_Bfree>
 8008cba:	462c      	mov	r4, r5
 8008cbc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008cc0:	3601      	adds	r6, #1
 8008cc2:	f8c3 8014 	str.w	r8, [r3, #20]
 8008cc6:	6126      	str	r6, [r4, #16]
 8008cc8:	4620      	mov	r0, r4
 8008cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cce:	bf00      	nop
 8008cd0:	0800a21c 	.word	0x0800a21c
 8008cd4:	0800a310 	.word	0x0800a310

08008cd8 <__s2b>:
 8008cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cdc:	460c      	mov	r4, r1
 8008cde:	4615      	mov	r5, r2
 8008ce0:	461f      	mov	r7, r3
 8008ce2:	2209      	movs	r2, #9
 8008ce4:	3308      	adds	r3, #8
 8008ce6:	4606      	mov	r6, r0
 8008ce8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008cec:	2100      	movs	r1, #0
 8008cee:	2201      	movs	r2, #1
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	db09      	blt.n	8008d08 <__s2b+0x30>
 8008cf4:	4630      	mov	r0, r6
 8008cf6:	f7ff ff43 	bl	8008b80 <_Balloc>
 8008cfa:	b940      	cbnz	r0, 8008d0e <__s2b+0x36>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	4b19      	ldr	r3, [pc, #100]	; (8008d64 <__s2b+0x8c>)
 8008d00:	4819      	ldr	r0, [pc, #100]	; (8008d68 <__s2b+0x90>)
 8008d02:	21ce      	movs	r1, #206	; 0xce
 8008d04:	f000 ff28 	bl	8009b58 <__assert_func>
 8008d08:	0052      	lsls	r2, r2, #1
 8008d0a:	3101      	adds	r1, #1
 8008d0c:	e7f0      	b.n	8008cf0 <__s2b+0x18>
 8008d0e:	9b08      	ldr	r3, [sp, #32]
 8008d10:	6143      	str	r3, [r0, #20]
 8008d12:	2d09      	cmp	r5, #9
 8008d14:	f04f 0301 	mov.w	r3, #1
 8008d18:	6103      	str	r3, [r0, #16]
 8008d1a:	dd16      	ble.n	8008d4a <__s2b+0x72>
 8008d1c:	f104 0909 	add.w	r9, r4, #9
 8008d20:	46c8      	mov	r8, r9
 8008d22:	442c      	add	r4, r5
 8008d24:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008d28:	4601      	mov	r1, r0
 8008d2a:	3b30      	subs	r3, #48	; 0x30
 8008d2c:	220a      	movs	r2, #10
 8008d2e:	4630      	mov	r0, r6
 8008d30:	f7ff ff88 	bl	8008c44 <__multadd>
 8008d34:	45a0      	cmp	r8, r4
 8008d36:	d1f5      	bne.n	8008d24 <__s2b+0x4c>
 8008d38:	f1a5 0408 	sub.w	r4, r5, #8
 8008d3c:	444c      	add	r4, r9
 8008d3e:	1b2d      	subs	r5, r5, r4
 8008d40:	1963      	adds	r3, r4, r5
 8008d42:	42bb      	cmp	r3, r7
 8008d44:	db04      	blt.n	8008d50 <__s2b+0x78>
 8008d46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d4a:	340a      	adds	r4, #10
 8008d4c:	2509      	movs	r5, #9
 8008d4e:	e7f6      	b.n	8008d3e <__s2b+0x66>
 8008d50:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008d54:	4601      	mov	r1, r0
 8008d56:	3b30      	subs	r3, #48	; 0x30
 8008d58:	220a      	movs	r2, #10
 8008d5a:	4630      	mov	r0, r6
 8008d5c:	f7ff ff72 	bl	8008c44 <__multadd>
 8008d60:	e7ee      	b.n	8008d40 <__s2b+0x68>
 8008d62:	bf00      	nop
 8008d64:	0800a21c 	.word	0x0800a21c
 8008d68:	0800a310 	.word	0x0800a310

08008d6c <__hi0bits>:
 8008d6c:	0c03      	lsrs	r3, r0, #16
 8008d6e:	041b      	lsls	r3, r3, #16
 8008d70:	b9d3      	cbnz	r3, 8008da8 <__hi0bits+0x3c>
 8008d72:	0400      	lsls	r0, r0, #16
 8008d74:	2310      	movs	r3, #16
 8008d76:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008d7a:	bf04      	itt	eq
 8008d7c:	0200      	lsleq	r0, r0, #8
 8008d7e:	3308      	addeq	r3, #8
 8008d80:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008d84:	bf04      	itt	eq
 8008d86:	0100      	lsleq	r0, r0, #4
 8008d88:	3304      	addeq	r3, #4
 8008d8a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008d8e:	bf04      	itt	eq
 8008d90:	0080      	lsleq	r0, r0, #2
 8008d92:	3302      	addeq	r3, #2
 8008d94:	2800      	cmp	r0, #0
 8008d96:	db05      	blt.n	8008da4 <__hi0bits+0x38>
 8008d98:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008d9c:	f103 0301 	add.w	r3, r3, #1
 8008da0:	bf08      	it	eq
 8008da2:	2320      	moveq	r3, #32
 8008da4:	4618      	mov	r0, r3
 8008da6:	4770      	bx	lr
 8008da8:	2300      	movs	r3, #0
 8008daa:	e7e4      	b.n	8008d76 <__hi0bits+0xa>

08008dac <__lo0bits>:
 8008dac:	6803      	ldr	r3, [r0, #0]
 8008dae:	f013 0207 	ands.w	r2, r3, #7
 8008db2:	4601      	mov	r1, r0
 8008db4:	d00b      	beq.n	8008dce <__lo0bits+0x22>
 8008db6:	07da      	lsls	r2, r3, #31
 8008db8:	d424      	bmi.n	8008e04 <__lo0bits+0x58>
 8008dba:	0798      	lsls	r0, r3, #30
 8008dbc:	bf49      	itett	mi
 8008dbe:	085b      	lsrmi	r3, r3, #1
 8008dc0:	089b      	lsrpl	r3, r3, #2
 8008dc2:	2001      	movmi	r0, #1
 8008dc4:	600b      	strmi	r3, [r1, #0]
 8008dc6:	bf5c      	itt	pl
 8008dc8:	600b      	strpl	r3, [r1, #0]
 8008dca:	2002      	movpl	r0, #2
 8008dcc:	4770      	bx	lr
 8008dce:	b298      	uxth	r0, r3
 8008dd0:	b9b0      	cbnz	r0, 8008e00 <__lo0bits+0x54>
 8008dd2:	0c1b      	lsrs	r3, r3, #16
 8008dd4:	2010      	movs	r0, #16
 8008dd6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008dda:	bf04      	itt	eq
 8008ddc:	0a1b      	lsreq	r3, r3, #8
 8008dde:	3008      	addeq	r0, #8
 8008de0:	071a      	lsls	r2, r3, #28
 8008de2:	bf04      	itt	eq
 8008de4:	091b      	lsreq	r3, r3, #4
 8008de6:	3004      	addeq	r0, #4
 8008de8:	079a      	lsls	r2, r3, #30
 8008dea:	bf04      	itt	eq
 8008dec:	089b      	lsreq	r3, r3, #2
 8008dee:	3002      	addeq	r0, #2
 8008df0:	07da      	lsls	r2, r3, #31
 8008df2:	d403      	bmi.n	8008dfc <__lo0bits+0x50>
 8008df4:	085b      	lsrs	r3, r3, #1
 8008df6:	f100 0001 	add.w	r0, r0, #1
 8008dfa:	d005      	beq.n	8008e08 <__lo0bits+0x5c>
 8008dfc:	600b      	str	r3, [r1, #0]
 8008dfe:	4770      	bx	lr
 8008e00:	4610      	mov	r0, r2
 8008e02:	e7e8      	b.n	8008dd6 <__lo0bits+0x2a>
 8008e04:	2000      	movs	r0, #0
 8008e06:	4770      	bx	lr
 8008e08:	2020      	movs	r0, #32
 8008e0a:	4770      	bx	lr

08008e0c <__i2b>:
 8008e0c:	b510      	push	{r4, lr}
 8008e0e:	460c      	mov	r4, r1
 8008e10:	2101      	movs	r1, #1
 8008e12:	f7ff feb5 	bl	8008b80 <_Balloc>
 8008e16:	4602      	mov	r2, r0
 8008e18:	b928      	cbnz	r0, 8008e26 <__i2b+0x1a>
 8008e1a:	4b05      	ldr	r3, [pc, #20]	; (8008e30 <__i2b+0x24>)
 8008e1c:	4805      	ldr	r0, [pc, #20]	; (8008e34 <__i2b+0x28>)
 8008e1e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008e22:	f000 fe99 	bl	8009b58 <__assert_func>
 8008e26:	2301      	movs	r3, #1
 8008e28:	6144      	str	r4, [r0, #20]
 8008e2a:	6103      	str	r3, [r0, #16]
 8008e2c:	bd10      	pop	{r4, pc}
 8008e2e:	bf00      	nop
 8008e30:	0800a21c 	.word	0x0800a21c
 8008e34:	0800a310 	.word	0x0800a310

08008e38 <__multiply>:
 8008e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e3c:	4614      	mov	r4, r2
 8008e3e:	690a      	ldr	r2, [r1, #16]
 8008e40:	6923      	ldr	r3, [r4, #16]
 8008e42:	429a      	cmp	r2, r3
 8008e44:	bfb8      	it	lt
 8008e46:	460b      	movlt	r3, r1
 8008e48:	460d      	mov	r5, r1
 8008e4a:	bfbc      	itt	lt
 8008e4c:	4625      	movlt	r5, r4
 8008e4e:	461c      	movlt	r4, r3
 8008e50:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008e54:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008e58:	68ab      	ldr	r3, [r5, #8]
 8008e5a:	6869      	ldr	r1, [r5, #4]
 8008e5c:	eb0a 0709 	add.w	r7, sl, r9
 8008e60:	42bb      	cmp	r3, r7
 8008e62:	b085      	sub	sp, #20
 8008e64:	bfb8      	it	lt
 8008e66:	3101      	addlt	r1, #1
 8008e68:	f7ff fe8a 	bl	8008b80 <_Balloc>
 8008e6c:	b930      	cbnz	r0, 8008e7c <__multiply+0x44>
 8008e6e:	4602      	mov	r2, r0
 8008e70:	4b42      	ldr	r3, [pc, #264]	; (8008f7c <__multiply+0x144>)
 8008e72:	4843      	ldr	r0, [pc, #268]	; (8008f80 <__multiply+0x148>)
 8008e74:	f240 115d 	movw	r1, #349	; 0x15d
 8008e78:	f000 fe6e 	bl	8009b58 <__assert_func>
 8008e7c:	f100 0614 	add.w	r6, r0, #20
 8008e80:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008e84:	4633      	mov	r3, r6
 8008e86:	2200      	movs	r2, #0
 8008e88:	4543      	cmp	r3, r8
 8008e8a:	d31e      	bcc.n	8008eca <__multiply+0x92>
 8008e8c:	f105 0c14 	add.w	ip, r5, #20
 8008e90:	f104 0314 	add.w	r3, r4, #20
 8008e94:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008e98:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008e9c:	9202      	str	r2, [sp, #8]
 8008e9e:	ebac 0205 	sub.w	r2, ip, r5
 8008ea2:	3a15      	subs	r2, #21
 8008ea4:	f022 0203 	bic.w	r2, r2, #3
 8008ea8:	3204      	adds	r2, #4
 8008eaa:	f105 0115 	add.w	r1, r5, #21
 8008eae:	458c      	cmp	ip, r1
 8008eb0:	bf38      	it	cc
 8008eb2:	2204      	movcc	r2, #4
 8008eb4:	9201      	str	r2, [sp, #4]
 8008eb6:	9a02      	ldr	r2, [sp, #8]
 8008eb8:	9303      	str	r3, [sp, #12]
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d808      	bhi.n	8008ed0 <__multiply+0x98>
 8008ebe:	2f00      	cmp	r7, #0
 8008ec0:	dc55      	bgt.n	8008f6e <__multiply+0x136>
 8008ec2:	6107      	str	r7, [r0, #16]
 8008ec4:	b005      	add	sp, #20
 8008ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eca:	f843 2b04 	str.w	r2, [r3], #4
 8008ece:	e7db      	b.n	8008e88 <__multiply+0x50>
 8008ed0:	f8b3 a000 	ldrh.w	sl, [r3]
 8008ed4:	f1ba 0f00 	cmp.w	sl, #0
 8008ed8:	d020      	beq.n	8008f1c <__multiply+0xe4>
 8008eda:	f105 0e14 	add.w	lr, r5, #20
 8008ede:	46b1      	mov	r9, r6
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008ee6:	f8d9 b000 	ldr.w	fp, [r9]
 8008eea:	b2a1      	uxth	r1, r4
 8008eec:	fa1f fb8b 	uxth.w	fp, fp
 8008ef0:	fb0a b101 	mla	r1, sl, r1, fp
 8008ef4:	4411      	add	r1, r2
 8008ef6:	f8d9 2000 	ldr.w	r2, [r9]
 8008efa:	0c24      	lsrs	r4, r4, #16
 8008efc:	0c12      	lsrs	r2, r2, #16
 8008efe:	fb0a 2404 	mla	r4, sl, r4, r2
 8008f02:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008f06:	b289      	uxth	r1, r1
 8008f08:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008f0c:	45f4      	cmp	ip, lr
 8008f0e:	f849 1b04 	str.w	r1, [r9], #4
 8008f12:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008f16:	d8e4      	bhi.n	8008ee2 <__multiply+0xaa>
 8008f18:	9901      	ldr	r1, [sp, #4]
 8008f1a:	5072      	str	r2, [r6, r1]
 8008f1c:	9a03      	ldr	r2, [sp, #12]
 8008f1e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008f22:	3304      	adds	r3, #4
 8008f24:	f1b9 0f00 	cmp.w	r9, #0
 8008f28:	d01f      	beq.n	8008f6a <__multiply+0x132>
 8008f2a:	6834      	ldr	r4, [r6, #0]
 8008f2c:	f105 0114 	add.w	r1, r5, #20
 8008f30:	46b6      	mov	lr, r6
 8008f32:	f04f 0a00 	mov.w	sl, #0
 8008f36:	880a      	ldrh	r2, [r1, #0]
 8008f38:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008f3c:	fb09 b202 	mla	r2, r9, r2, fp
 8008f40:	4492      	add	sl, r2
 8008f42:	b2a4      	uxth	r4, r4
 8008f44:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008f48:	f84e 4b04 	str.w	r4, [lr], #4
 8008f4c:	f851 4b04 	ldr.w	r4, [r1], #4
 8008f50:	f8be 2000 	ldrh.w	r2, [lr]
 8008f54:	0c24      	lsrs	r4, r4, #16
 8008f56:	fb09 2404 	mla	r4, r9, r4, r2
 8008f5a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008f5e:	458c      	cmp	ip, r1
 8008f60:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008f64:	d8e7      	bhi.n	8008f36 <__multiply+0xfe>
 8008f66:	9a01      	ldr	r2, [sp, #4]
 8008f68:	50b4      	str	r4, [r6, r2]
 8008f6a:	3604      	adds	r6, #4
 8008f6c:	e7a3      	b.n	8008eb6 <__multiply+0x7e>
 8008f6e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d1a5      	bne.n	8008ec2 <__multiply+0x8a>
 8008f76:	3f01      	subs	r7, #1
 8008f78:	e7a1      	b.n	8008ebe <__multiply+0x86>
 8008f7a:	bf00      	nop
 8008f7c:	0800a21c 	.word	0x0800a21c
 8008f80:	0800a310 	.word	0x0800a310

08008f84 <__pow5mult>:
 8008f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f88:	4615      	mov	r5, r2
 8008f8a:	f012 0203 	ands.w	r2, r2, #3
 8008f8e:	4606      	mov	r6, r0
 8008f90:	460f      	mov	r7, r1
 8008f92:	d007      	beq.n	8008fa4 <__pow5mult+0x20>
 8008f94:	4c25      	ldr	r4, [pc, #148]	; (800902c <__pow5mult+0xa8>)
 8008f96:	3a01      	subs	r2, #1
 8008f98:	2300      	movs	r3, #0
 8008f9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f9e:	f7ff fe51 	bl	8008c44 <__multadd>
 8008fa2:	4607      	mov	r7, r0
 8008fa4:	10ad      	asrs	r5, r5, #2
 8008fa6:	d03d      	beq.n	8009024 <__pow5mult+0xa0>
 8008fa8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008faa:	b97c      	cbnz	r4, 8008fcc <__pow5mult+0x48>
 8008fac:	2010      	movs	r0, #16
 8008fae:	f7fc f965 	bl	800527c <malloc>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	6270      	str	r0, [r6, #36]	; 0x24
 8008fb6:	b928      	cbnz	r0, 8008fc4 <__pow5mult+0x40>
 8008fb8:	4b1d      	ldr	r3, [pc, #116]	; (8009030 <__pow5mult+0xac>)
 8008fba:	481e      	ldr	r0, [pc, #120]	; (8009034 <__pow5mult+0xb0>)
 8008fbc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008fc0:	f000 fdca 	bl	8009b58 <__assert_func>
 8008fc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008fc8:	6004      	str	r4, [r0, #0]
 8008fca:	60c4      	str	r4, [r0, #12]
 8008fcc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008fd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008fd4:	b94c      	cbnz	r4, 8008fea <__pow5mult+0x66>
 8008fd6:	f240 2171 	movw	r1, #625	; 0x271
 8008fda:	4630      	mov	r0, r6
 8008fdc:	f7ff ff16 	bl	8008e0c <__i2b>
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	f8c8 0008 	str.w	r0, [r8, #8]
 8008fe6:	4604      	mov	r4, r0
 8008fe8:	6003      	str	r3, [r0, #0]
 8008fea:	f04f 0900 	mov.w	r9, #0
 8008fee:	07eb      	lsls	r3, r5, #31
 8008ff0:	d50a      	bpl.n	8009008 <__pow5mult+0x84>
 8008ff2:	4639      	mov	r1, r7
 8008ff4:	4622      	mov	r2, r4
 8008ff6:	4630      	mov	r0, r6
 8008ff8:	f7ff ff1e 	bl	8008e38 <__multiply>
 8008ffc:	4639      	mov	r1, r7
 8008ffe:	4680      	mov	r8, r0
 8009000:	4630      	mov	r0, r6
 8009002:	f7ff fdfd 	bl	8008c00 <_Bfree>
 8009006:	4647      	mov	r7, r8
 8009008:	106d      	asrs	r5, r5, #1
 800900a:	d00b      	beq.n	8009024 <__pow5mult+0xa0>
 800900c:	6820      	ldr	r0, [r4, #0]
 800900e:	b938      	cbnz	r0, 8009020 <__pow5mult+0x9c>
 8009010:	4622      	mov	r2, r4
 8009012:	4621      	mov	r1, r4
 8009014:	4630      	mov	r0, r6
 8009016:	f7ff ff0f 	bl	8008e38 <__multiply>
 800901a:	6020      	str	r0, [r4, #0]
 800901c:	f8c0 9000 	str.w	r9, [r0]
 8009020:	4604      	mov	r4, r0
 8009022:	e7e4      	b.n	8008fee <__pow5mult+0x6a>
 8009024:	4638      	mov	r0, r7
 8009026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800902a:	bf00      	nop
 800902c:	0800a460 	.word	0x0800a460
 8009030:	0800a1a6 	.word	0x0800a1a6
 8009034:	0800a310 	.word	0x0800a310

08009038 <__lshift>:
 8009038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800903c:	460c      	mov	r4, r1
 800903e:	6849      	ldr	r1, [r1, #4]
 8009040:	6923      	ldr	r3, [r4, #16]
 8009042:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009046:	68a3      	ldr	r3, [r4, #8]
 8009048:	4607      	mov	r7, r0
 800904a:	4691      	mov	r9, r2
 800904c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009050:	f108 0601 	add.w	r6, r8, #1
 8009054:	42b3      	cmp	r3, r6
 8009056:	db0b      	blt.n	8009070 <__lshift+0x38>
 8009058:	4638      	mov	r0, r7
 800905a:	f7ff fd91 	bl	8008b80 <_Balloc>
 800905e:	4605      	mov	r5, r0
 8009060:	b948      	cbnz	r0, 8009076 <__lshift+0x3e>
 8009062:	4602      	mov	r2, r0
 8009064:	4b28      	ldr	r3, [pc, #160]	; (8009108 <__lshift+0xd0>)
 8009066:	4829      	ldr	r0, [pc, #164]	; (800910c <__lshift+0xd4>)
 8009068:	f240 11d9 	movw	r1, #473	; 0x1d9
 800906c:	f000 fd74 	bl	8009b58 <__assert_func>
 8009070:	3101      	adds	r1, #1
 8009072:	005b      	lsls	r3, r3, #1
 8009074:	e7ee      	b.n	8009054 <__lshift+0x1c>
 8009076:	2300      	movs	r3, #0
 8009078:	f100 0114 	add.w	r1, r0, #20
 800907c:	f100 0210 	add.w	r2, r0, #16
 8009080:	4618      	mov	r0, r3
 8009082:	4553      	cmp	r3, sl
 8009084:	db33      	blt.n	80090ee <__lshift+0xb6>
 8009086:	6920      	ldr	r0, [r4, #16]
 8009088:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800908c:	f104 0314 	add.w	r3, r4, #20
 8009090:	f019 091f 	ands.w	r9, r9, #31
 8009094:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009098:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800909c:	d02b      	beq.n	80090f6 <__lshift+0xbe>
 800909e:	f1c9 0e20 	rsb	lr, r9, #32
 80090a2:	468a      	mov	sl, r1
 80090a4:	2200      	movs	r2, #0
 80090a6:	6818      	ldr	r0, [r3, #0]
 80090a8:	fa00 f009 	lsl.w	r0, r0, r9
 80090ac:	4302      	orrs	r2, r0
 80090ae:	f84a 2b04 	str.w	r2, [sl], #4
 80090b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80090b6:	459c      	cmp	ip, r3
 80090b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80090bc:	d8f3      	bhi.n	80090a6 <__lshift+0x6e>
 80090be:	ebac 0304 	sub.w	r3, ip, r4
 80090c2:	3b15      	subs	r3, #21
 80090c4:	f023 0303 	bic.w	r3, r3, #3
 80090c8:	3304      	adds	r3, #4
 80090ca:	f104 0015 	add.w	r0, r4, #21
 80090ce:	4584      	cmp	ip, r0
 80090d0:	bf38      	it	cc
 80090d2:	2304      	movcc	r3, #4
 80090d4:	50ca      	str	r2, [r1, r3]
 80090d6:	b10a      	cbz	r2, 80090dc <__lshift+0xa4>
 80090d8:	f108 0602 	add.w	r6, r8, #2
 80090dc:	3e01      	subs	r6, #1
 80090de:	4638      	mov	r0, r7
 80090e0:	612e      	str	r6, [r5, #16]
 80090e2:	4621      	mov	r1, r4
 80090e4:	f7ff fd8c 	bl	8008c00 <_Bfree>
 80090e8:	4628      	mov	r0, r5
 80090ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80090f2:	3301      	adds	r3, #1
 80090f4:	e7c5      	b.n	8009082 <__lshift+0x4a>
 80090f6:	3904      	subs	r1, #4
 80090f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80090fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8009100:	459c      	cmp	ip, r3
 8009102:	d8f9      	bhi.n	80090f8 <__lshift+0xc0>
 8009104:	e7ea      	b.n	80090dc <__lshift+0xa4>
 8009106:	bf00      	nop
 8009108:	0800a21c 	.word	0x0800a21c
 800910c:	0800a310 	.word	0x0800a310

08009110 <__mcmp>:
 8009110:	b530      	push	{r4, r5, lr}
 8009112:	6902      	ldr	r2, [r0, #16]
 8009114:	690c      	ldr	r4, [r1, #16]
 8009116:	1b12      	subs	r2, r2, r4
 8009118:	d10e      	bne.n	8009138 <__mcmp+0x28>
 800911a:	f100 0314 	add.w	r3, r0, #20
 800911e:	3114      	adds	r1, #20
 8009120:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009124:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009128:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800912c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009130:	42a5      	cmp	r5, r4
 8009132:	d003      	beq.n	800913c <__mcmp+0x2c>
 8009134:	d305      	bcc.n	8009142 <__mcmp+0x32>
 8009136:	2201      	movs	r2, #1
 8009138:	4610      	mov	r0, r2
 800913a:	bd30      	pop	{r4, r5, pc}
 800913c:	4283      	cmp	r3, r0
 800913e:	d3f3      	bcc.n	8009128 <__mcmp+0x18>
 8009140:	e7fa      	b.n	8009138 <__mcmp+0x28>
 8009142:	f04f 32ff 	mov.w	r2, #4294967295
 8009146:	e7f7      	b.n	8009138 <__mcmp+0x28>

08009148 <__mdiff>:
 8009148:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800914c:	460c      	mov	r4, r1
 800914e:	4606      	mov	r6, r0
 8009150:	4611      	mov	r1, r2
 8009152:	4620      	mov	r0, r4
 8009154:	4617      	mov	r7, r2
 8009156:	f7ff ffdb 	bl	8009110 <__mcmp>
 800915a:	1e05      	subs	r5, r0, #0
 800915c:	d110      	bne.n	8009180 <__mdiff+0x38>
 800915e:	4629      	mov	r1, r5
 8009160:	4630      	mov	r0, r6
 8009162:	f7ff fd0d 	bl	8008b80 <_Balloc>
 8009166:	b930      	cbnz	r0, 8009176 <__mdiff+0x2e>
 8009168:	4b39      	ldr	r3, [pc, #228]	; (8009250 <__mdiff+0x108>)
 800916a:	4602      	mov	r2, r0
 800916c:	f240 2132 	movw	r1, #562	; 0x232
 8009170:	4838      	ldr	r0, [pc, #224]	; (8009254 <__mdiff+0x10c>)
 8009172:	f000 fcf1 	bl	8009b58 <__assert_func>
 8009176:	2301      	movs	r3, #1
 8009178:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800917c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009180:	bfa4      	itt	ge
 8009182:	463b      	movge	r3, r7
 8009184:	4627      	movge	r7, r4
 8009186:	4630      	mov	r0, r6
 8009188:	6879      	ldr	r1, [r7, #4]
 800918a:	bfa6      	itte	ge
 800918c:	461c      	movge	r4, r3
 800918e:	2500      	movge	r5, #0
 8009190:	2501      	movlt	r5, #1
 8009192:	f7ff fcf5 	bl	8008b80 <_Balloc>
 8009196:	b920      	cbnz	r0, 80091a2 <__mdiff+0x5a>
 8009198:	4b2d      	ldr	r3, [pc, #180]	; (8009250 <__mdiff+0x108>)
 800919a:	4602      	mov	r2, r0
 800919c:	f44f 7110 	mov.w	r1, #576	; 0x240
 80091a0:	e7e6      	b.n	8009170 <__mdiff+0x28>
 80091a2:	693e      	ldr	r6, [r7, #16]
 80091a4:	60c5      	str	r5, [r0, #12]
 80091a6:	6925      	ldr	r5, [r4, #16]
 80091a8:	f107 0114 	add.w	r1, r7, #20
 80091ac:	f104 0914 	add.w	r9, r4, #20
 80091b0:	f100 0e14 	add.w	lr, r0, #20
 80091b4:	f107 0210 	add.w	r2, r7, #16
 80091b8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80091bc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80091c0:	46f2      	mov	sl, lr
 80091c2:	2700      	movs	r7, #0
 80091c4:	f859 3b04 	ldr.w	r3, [r9], #4
 80091c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80091cc:	fa1f f883 	uxth.w	r8, r3
 80091d0:	fa17 f78b 	uxtah	r7, r7, fp
 80091d4:	0c1b      	lsrs	r3, r3, #16
 80091d6:	eba7 0808 	sub.w	r8, r7, r8
 80091da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80091de:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80091e2:	fa1f f888 	uxth.w	r8, r8
 80091e6:	141f      	asrs	r7, r3, #16
 80091e8:	454d      	cmp	r5, r9
 80091ea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80091ee:	f84a 3b04 	str.w	r3, [sl], #4
 80091f2:	d8e7      	bhi.n	80091c4 <__mdiff+0x7c>
 80091f4:	1b2b      	subs	r3, r5, r4
 80091f6:	3b15      	subs	r3, #21
 80091f8:	f023 0303 	bic.w	r3, r3, #3
 80091fc:	3304      	adds	r3, #4
 80091fe:	3415      	adds	r4, #21
 8009200:	42a5      	cmp	r5, r4
 8009202:	bf38      	it	cc
 8009204:	2304      	movcc	r3, #4
 8009206:	4419      	add	r1, r3
 8009208:	4473      	add	r3, lr
 800920a:	469e      	mov	lr, r3
 800920c:	460d      	mov	r5, r1
 800920e:	4565      	cmp	r5, ip
 8009210:	d30e      	bcc.n	8009230 <__mdiff+0xe8>
 8009212:	f10c 0203 	add.w	r2, ip, #3
 8009216:	1a52      	subs	r2, r2, r1
 8009218:	f022 0203 	bic.w	r2, r2, #3
 800921c:	3903      	subs	r1, #3
 800921e:	458c      	cmp	ip, r1
 8009220:	bf38      	it	cc
 8009222:	2200      	movcc	r2, #0
 8009224:	441a      	add	r2, r3
 8009226:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800922a:	b17b      	cbz	r3, 800924c <__mdiff+0x104>
 800922c:	6106      	str	r6, [r0, #16]
 800922e:	e7a5      	b.n	800917c <__mdiff+0x34>
 8009230:	f855 8b04 	ldr.w	r8, [r5], #4
 8009234:	fa17 f488 	uxtah	r4, r7, r8
 8009238:	1422      	asrs	r2, r4, #16
 800923a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800923e:	b2a4      	uxth	r4, r4
 8009240:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009244:	f84e 4b04 	str.w	r4, [lr], #4
 8009248:	1417      	asrs	r7, r2, #16
 800924a:	e7e0      	b.n	800920e <__mdiff+0xc6>
 800924c:	3e01      	subs	r6, #1
 800924e:	e7ea      	b.n	8009226 <__mdiff+0xde>
 8009250:	0800a21c 	.word	0x0800a21c
 8009254:	0800a310 	.word	0x0800a310

08009258 <__ulp>:
 8009258:	b082      	sub	sp, #8
 800925a:	ed8d 0b00 	vstr	d0, [sp]
 800925e:	9b01      	ldr	r3, [sp, #4]
 8009260:	4912      	ldr	r1, [pc, #72]	; (80092ac <__ulp+0x54>)
 8009262:	4019      	ands	r1, r3
 8009264:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009268:	2900      	cmp	r1, #0
 800926a:	dd05      	ble.n	8009278 <__ulp+0x20>
 800926c:	2200      	movs	r2, #0
 800926e:	460b      	mov	r3, r1
 8009270:	ec43 2b10 	vmov	d0, r2, r3
 8009274:	b002      	add	sp, #8
 8009276:	4770      	bx	lr
 8009278:	4249      	negs	r1, r1
 800927a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800927e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009282:	f04f 0200 	mov.w	r2, #0
 8009286:	f04f 0300 	mov.w	r3, #0
 800928a:	da04      	bge.n	8009296 <__ulp+0x3e>
 800928c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009290:	fa41 f300 	asr.w	r3, r1, r0
 8009294:	e7ec      	b.n	8009270 <__ulp+0x18>
 8009296:	f1a0 0114 	sub.w	r1, r0, #20
 800929a:	291e      	cmp	r1, #30
 800929c:	bfda      	itte	le
 800929e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80092a2:	fa20 f101 	lsrle.w	r1, r0, r1
 80092a6:	2101      	movgt	r1, #1
 80092a8:	460a      	mov	r2, r1
 80092aa:	e7e1      	b.n	8009270 <__ulp+0x18>
 80092ac:	7ff00000 	.word	0x7ff00000

080092b0 <__b2d>:
 80092b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092b2:	6905      	ldr	r5, [r0, #16]
 80092b4:	f100 0714 	add.w	r7, r0, #20
 80092b8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80092bc:	1f2e      	subs	r6, r5, #4
 80092be:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80092c2:	4620      	mov	r0, r4
 80092c4:	f7ff fd52 	bl	8008d6c <__hi0bits>
 80092c8:	f1c0 0320 	rsb	r3, r0, #32
 80092cc:	280a      	cmp	r0, #10
 80092ce:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800934c <__b2d+0x9c>
 80092d2:	600b      	str	r3, [r1, #0]
 80092d4:	dc14      	bgt.n	8009300 <__b2d+0x50>
 80092d6:	f1c0 0e0b 	rsb	lr, r0, #11
 80092da:	fa24 f10e 	lsr.w	r1, r4, lr
 80092de:	42b7      	cmp	r7, r6
 80092e0:	ea41 030c 	orr.w	r3, r1, ip
 80092e4:	bf34      	ite	cc
 80092e6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80092ea:	2100      	movcs	r1, #0
 80092ec:	3015      	adds	r0, #21
 80092ee:	fa04 f000 	lsl.w	r0, r4, r0
 80092f2:	fa21 f10e 	lsr.w	r1, r1, lr
 80092f6:	ea40 0201 	orr.w	r2, r0, r1
 80092fa:	ec43 2b10 	vmov	d0, r2, r3
 80092fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009300:	42b7      	cmp	r7, r6
 8009302:	bf3a      	itte	cc
 8009304:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009308:	f1a5 0608 	subcc.w	r6, r5, #8
 800930c:	2100      	movcs	r1, #0
 800930e:	380b      	subs	r0, #11
 8009310:	d017      	beq.n	8009342 <__b2d+0x92>
 8009312:	f1c0 0c20 	rsb	ip, r0, #32
 8009316:	fa04 f500 	lsl.w	r5, r4, r0
 800931a:	42be      	cmp	r6, r7
 800931c:	fa21 f40c 	lsr.w	r4, r1, ip
 8009320:	ea45 0504 	orr.w	r5, r5, r4
 8009324:	bf8c      	ite	hi
 8009326:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800932a:	2400      	movls	r4, #0
 800932c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009330:	fa01 f000 	lsl.w	r0, r1, r0
 8009334:	fa24 f40c 	lsr.w	r4, r4, ip
 8009338:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800933c:	ea40 0204 	orr.w	r2, r0, r4
 8009340:	e7db      	b.n	80092fa <__b2d+0x4a>
 8009342:	ea44 030c 	orr.w	r3, r4, ip
 8009346:	460a      	mov	r2, r1
 8009348:	e7d7      	b.n	80092fa <__b2d+0x4a>
 800934a:	bf00      	nop
 800934c:	3ff00000 	.word	0x3ff00000

08009350 <__d2b>:
 8009350:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009354:	4689      	mov	r9, r1
 8009356:	2101      	movs	r1, #1
 8009358:	ec57 6b10 	vmov	r6, r7, d0
 800935c:	4690      	mov	r8, r2
 800935e:	f7ff fc0f 	bl	8008b80 <_Balloc>
 8009362:	4604      	mov	r4, r0
 8009364:	b930      	cbnz	r0, 8009374 <__d2b+0x24>
 8009366:	4602      	mov	r2, r0
 8009368:	4b25      	ldr	r3, [pc, #148]	; (8009400 <__d2b+0xb0>)
 800936a:	4826      	ldr	r0, [pc, #152]	; (8009404 <__d2b+0xb4>)
 800936c:	f240 310a 	movw	r1, #778	; 0x30a
 8009370:	f000 fbf2 	bl	8009b58 <__assert_func>
 8009374:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009378:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800937c:	bb35      	cbnz	r5, 80093cc <__d2b+0x7c>
 800937e:	2e00      	cmp	r6, #0
 8009380:	9301      	str	r3, [sp, #4]
 8009382:	d028      	beq.n	80093d6 <__d2b+0x86>
 8009384:	4668      	mov	r0, sp
 8009386:	9600      	str	r6, [sp, #0]
 8009388:	f7ff fd10 	bl	8008dac <__lo0bits>
 800938c:	9900      	ldr	r1, [sp, #0]
 800938e:	b300      	cbz	r0, 80093d2 <__d2b+0x82>
 8009390:	9a01      	ldr	r2, [sp, #4]
 8009392:	f1c0 0320 	rsb	r3, r0, #32
 8009396:	fa02 f303 	lsl.w	r3, r2, r3
 800939a:	430b      	orrs	r3, r1
 800939c:	40c2      	lsrs	r2, r0
 800939e:	6163      	str	r3, [r4, #20]
 80093a0:	9201      	str	r2, [sp, #4]
 80093a2:	9b01      	ldr	r3, [sp, #4]
 80093a4:	61a3      	str	r3, [r4, #24]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	bf14      	ite	ne
 80093aa:	2202      	movne	r2, #2
 80093ac:	2201      	moveq	r2, #1
 80093ae:	6122      	str	r2, [r4, #16]
 80093b0:	b1d5      	cbz	r5, 80093e8 <__d2b+0x98>
 80093b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80093b6:	4405      	add	r5, r0
 80093b8:	f8c9 5000 	str.w	r5, [r9]
 80093bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80093c0:	f8c8 0000 	str.w	r0, [r8]
 80093c4:	4620      	mov	r0, r4
 80093c6:	b003      	add	sp, #12
 80093c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093d0:	e7d5      	b.n	800937e <__d2b+0x2e>
 80093d2:	6161      	str	r1, [r4, #20]
 80093d4:	e7e5      	b.n	80093a2 <__d2b+0x52>
 80093d6:	a801      	add	r0, sp, #4
 80093d8:	f7ff fce8 	bl	8008dac <__lo0bits>
 80093dc:	9b01      	ldr	r3, [sp, #4]
 80093de:	6163      	str	r3, [r4, #20]
 80093e0:	2201      	movs	r2, #1
 80093e2:	6122      	str	r2, [r4, #16]
 80093e4:	3020      	adds	r0, #32
 80093e6:	e7e3      	b.n	80093b0 <__d2b+0x60>
 80093e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80093ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80093f0:	f8c9 0000 	str.w	r0, [r9]
 80093f4:	6918      	ldr	r0, [r3, #16]
 80093f6:	f7ff fcb9 	bl	8008d6c <__hi0bits>
 80093fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80093fe:	e7df      	b.n	80093c0 <__d2b+0x70>
 8009400:	0800a21c 	.word	0x0800a21c
 8009404:	0800a310 	.word	0x0800a310

08009408 <__ratio>:
 8009408:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800940c:	4688      	mov	r8, r1
 800940e:	4669      	mov	r1, sp
 8009410:	4681      	mov	r9, r0
 8009412:	f7ff ff4d 	bl	80092b0 <__b2d>
 8009416:	a901      	add	r1, sp, #4
 8009418:	4640      	mov	r0, r8
 800941a:	ec55 4b10 	vmov	r4, r5, d0
 800941e:	f7ff ff47 	bl	80092b0 <__b2d>
 8009422:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009426:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800942a:	eba3 0c02 	sub.w	ip, r3, r2
 800942e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009432:	1a9b      	subs	r3, r3, r2
 8009434:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009438:	ec51 0b10 	vmov	r0, r1, d0
 800943c:	2b00      	cmp	r3, #0
 800943e:	bfd6      	itet	le
 8009440:	460a      	movle	r2, r1
 8009442:	462a      	movgt	r2, r5
 8009444:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009448:	468b      	mov	fp, r1
 800944a:	462f      	mov	r7, r5
 800944c:	bfd4      	ite	le
 800944e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009452:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009456:	4620      	mov	r0, r4
 8009458:	ee10 2a10 	vmov	r2, s0
 800945c:	465b      	mov	r3, fp
 800945e:	4639      	mov	r1, r7
 8009460:	f7f7 f9f4 	bl	800084c <__aeabi_ddiv>
 8009464:	ec41 0b10 	vmov	d0, r0, r1
 8009468:	b003      	add	sp, #12
 800946a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800946e <__copybits>:
 800946e:	3901      	subs	r1, #1
 8009470:	b570      	push	{r4, r5, r6, lr}
 8009472:	1149      	asrs	r1, r1, #5
 8009474:	6914      	ldr	r4, [r2, #16]
 8009476:	3101      	adds	r1, #1
 8009478:	f102 0314 	add.w	r3, r2, #20
 800947c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009480:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009484:	1f05      	subs	r5, r0, #4
 8009486:	42a3      	cmp	r3, r4
 8009488:	d30c      	bcc.n	80094a4 <__copybits+0x36>
 800948a:	1aa3      	subs	r3, r4, r2
 800948c:	3b11      	subs	r3, #17
 800948e:	f023 0303 	bic.w	r3, r3, #3
 8009492:	3211      	adds	r2, #17
 8009494:	42a2      	cmp	r2, r4
 8009496:	bf88      	it	hi
 8009498:	2300      	movhi	r3, #0
 800949a:	4418      	add	r0, r3
 800949c:	2300      	movs	r3, #0
 800949e:	4288      	cmp	r0, r1
 80094a0:	d305      	bcc.n	80094ae <__copybits+0x40>
 80094a2:	bd70      	pop	{r4, r5, r6, pc}
 80094a4:	f853 6b04 	ldr.w	r6, [r3], #4
 80094a8:	f845 6f04 	str.w	r6, [r5, #4]!
 80094ac:	e7eb      	b.n	8009486 <__copybits+0x18>
 80094ae:	f840 3b04 	str.w	r3, [r0], #4
 80094b2:	e7f4      	b.n	800949e <__copybits+0x30>

080094b4 <__any_on>:
 80094b4:	f100 0214 	add.w	r2, r0, #20
 80094b8:	6900      	ldr	r0, [r0, #16]
 80094ba:	114b      	asrs	r3, r1, #5
 80094bc:	4298      	cmp	r0, r3
 80094be:	b510      	push	{r4, lr}
 80094c0:	db11      	blt.n	80094e6 <__any_on+0x32>
 80094c2:	dd0a      	ble.n	80094da <__any_on+0x26>
 80094c4:	f011 011f 	ands.w	r1, r1, #31
 80094c8:	d007      	beq.n	80094da <__any_on+0x26>
 80094ca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80094ce:	fa24 f001 	lsr.w	r0, r4, r1
 80094d2:	fa00 f101 	lsl.w	r1, r0, r1
 80094d6:	428c      	cmp	r4, r1
 80094d8:	d10b      	bne.n	80094f2 <__any_on+0x3e>
 80094da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80094de:	4293      	cmp	r3, r2
 80094e0:	d803      	bhi.n	80094ea <__any_on+0x36>
 80094e2:	2000      	movs	r0, #0
 80094e4:	bd10      	pop	{r4, pc}
 80094e6:	4603      	mov	r3, r0
 80094e8:	e7f7      	b.n	80094da <__any_on+0x26>
 80094ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80094ee:	2900      	cmp	r1, #0
 80094f0:	d0f5      	beq.n	80094de <__any_on+0x2a>
 80094f2:	2001      	movs	r0, #1
 80094f4:	e7f6      	b.n	80094e4 <__any_on+0x30>

080094f6 <__ssputs_r>:
 80094f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094fa:	688e      	ldr	r6, [r1, #8]
 80094fc:	429e      	cmp	r6, r3
 80094fe:	4682      	mov	sl, r0
 8009500:	460c      	mov	r4, r1
 8009502:	4690      	mov	r8, r2
 8009504:	461f      	mov	r7, r3
 8009506:	d838      	bhi.n	800957a <__ssputs_r+0x84>
 8009508:	898a      	ldrh	r2, [r1, #12]
 800950a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800950e:	d032      	beq.n	8009576 <__ssputs_r+0x80>
 8009510:	6825      	ldr	r5, [r4, #0]
 8009512:	6909      	ldr	r1, [r1, #16]
 8009514:	eba5 0901 	sub.w	r9, r5, r1
 8009518:	6965      	ldr	r5, [r4, #20]
 800951a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800951e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009522:	3301      	adds	r3, #1
 8009524:	444b      	add	r3, r9
 8009526:	106d      	asrs	r5, r5, #1
 8009528:	429d      	cmp	r5, r3
 800952a:	bf38      	it	cc
 800952c:	461d      	movcc	r5, r3
 800952e:	0553      	lsls	r3, r2, #21
 8009530:	d531      	bpl.n	8009596 <__ssputs_r+0xa0>
 8009532:	4629      	mov	r1, r5
 8009534:	f7fb ff20 	bl	8005378 <_malloc_r>
 8009538:	4606      	mov	r6, r0
 800953a:	b950      	cbnz	r0, 8009552 <__ssputs_r+0x5c>
 800953c:	230c      	movs	r3, #12
 800953e:	f8ca 3000 	str.w	r3, [sl]
 8009542:	89a3      	ldrh	r3, [r4, #12]
 8009544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009548:	81a3      	strh	r3, [r4, #12]
 800954a:	f04f 30ff 	mov.w	r0, #4294967295
 800954e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009552:	6921      	ldr	r1, [r4, #16]
 8009554:	464a      	mov	r2, r9
 8009556:	f7fb fe99 	bl	800528c <memcpy>
 800955a:	89a3      	ldrh	r3, [r4, #12]
 800955c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009564:	81a3      	strh	r3, [r4, #12]
 8009566:	6126      	str	r6, [r4, #16]
 8009568:	6165      	str	r5, [r4, #20]
 800956a:	444e      	add	r6, r9
 800956c:	eba5 0509 	sub.w	r5, r5, r9
 8009570:	6026      	str	r6, [r4, #0]
 8009572:	60a5      	str	r5, [r4, #8]
 8009574:	463e      	mov	r6, r7
 8009576:	42be      	cmp	r6, r7
 8009578:	d900      	bls.n	800957c <__ssputs_r+0x86>
 800957a:	463e      	mov	r6, r7
 800957c:	4632      	mov	r2, r6
 800957e:	6820      	ldr	r0, [r4, #0]
 8009580:	4641      	mov	r1, r8
 8009582:	f000 fb5d 	bl	8009c40 <memmove>
 8009586:	68a3      	ldr	r3, [r4, #8]
 8009588:	6822      	ldr	r2, [r4, #0]
 800958a:	1b9b      	subs	r3, r3, r6
 800958c:	4432      	add	r2, r6
 800958e:	60a3      	str	r3, [r4, #8]
 8009590:	6022      	str	r2, [r4, #0]
 8009592:	2000      	movs	r0, #0
 8009594:	e7db      	b.n	800954e <__ssputs_r+0x58>
 8009596:	462a      	mov	r2, r5
 8009598:	f000 fb6c 	bl	8009c74 <_realloc_r>
 800959c:	4606      	mov	r6, r0
 800959e:	2800      	cmp	r0, #0
 80095a0:	d1e1      	bne.n	8009566 <__ssputs_r+0x70>
 80095a2:	6921      	ldr	r1, [r4, #16]
 80095a4:	4650      	mov	r0, sl
 80095a6:	f7fb fe97 	bl	80052d8 <_free_r>
 80095aa:	e7c7      	b.n	800953c <__ssputs_r+0x46>

080095ac <_svfiprintf_r>:
 80095ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095b0:	4698      	mov	r8, r3
 80095b2:	898b      	ldrh	r3, [r1, #12]
 80095b4:	061b      	lsls	r3, r3, #24
 80095b6:	b09d      	sub	sp, #116	; 0x74
 80095b8:	4607      	mov	r7, r0
 80095ba:	460d      	mov	r5, r1
 80095bc:	4614      	mov	r4, r2
 80095be:	d50e      	bpl.n	80095de <_svfiprintf_r+0x32>
 80095c0:	690b      	ldr	r3, [r1, #16]
 80095c2:	b963      	cbnz	r3, 80095de <_svfiprintf_r+0x32>
 80095c4:	2140      	movs	r1, #64	; 0x40
 80095c6:	f7fb fed7 	bl	8005378 <_malloc_r>
 80095ca:	6028      	str	r0, [r5, #0]
 80095cc:	6128      	str	r0, [r5, #16]
 80095ce:	b920      	cbnz	r0, 80095da <_svfiprintf_r+0x2e>
 80095d0:	230c      	movs	r3, #12
 80095d2:	603b      	str	r3, [r7, #0]
 80095d4:	f04f 30ff 	mov.w	r0, #4294967295
 80095d8:	e0d1      	b.n	800977e <_svfiprintf_r+0x1d2>
 80095da:	2340      	movs	r3, #64	; 0x40
 80095dc:	616b      	str	r3, [r5, #20]
 80095de:	2300      	movs	r3, #0
 80095e0:	9309      	str	r3, [sp, #36]	; 0x24
 80095e2:	2320      	movs	r3, #32
 80095e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80095ec:	2330      	movs	r3, #48	; 0x30
 80095ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009798 <_svfiprintf_r+0x1ec>
 80095f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095f6:	f04f 0901 	mov.w	r9, #1
 80095fa:	4623      	mov	r3, r4
 80095fc:	469a      	mov	sl, r3
 80095fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009602:	b10a      	cbz	r2, 8009608 <_svfiprintf_r+0x5c>
 8009604:	2a25      	cmp	r2, #37	; 0x25
 8009606:	d1f9      	bne.n	80095fc <_svfiprintf_r+0x50>
 8009608:	ebba 0b04 	subs.w	fp, sl, r4
 800960c:	d00b      	beq.n	8009626 <_svfiprintf_r+0x7a>
 800960e:	465b      	mov	r3, fp
 8009610:	4622      	mov	r2, r4
 8009612:	4629      	mov	r1, r5
 8009614:	4638      	mov	r0, r7
 8009616:	f7ff ff6e 	bl	80094f6 <__ssputs_r>
 800961a:	3001      	adds	r0, #1
 800961c:	f000 80aa 	beq.w	8009774 <_svfiprintf_r+0x1c8>
 8009620:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009622:	445a      	add	r2, fp
 8009624:	9209      	str	r2, [sp, #36]	; 0x24
 8009626:	f89a 3000 	ldrb.w	r3, [sl]
 800962a:	2b00      	cmp	r3, #0
 800962c:	f000 80a2 	beq.w	8009774 <_svfiprintf_r+0x1c8>
 8009630:	2300      	movs	r3, #0
 8009632:	f04f 32ff 	mov.w	r2, #4294967295
 8009636:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800963a:	f10a 0a01 	add.w	sl, sl, #1
 800963e:	9304      	str	r3, [sp, #16]
 8009640:	9307      	str	r3, [sp, #28]
 8009642:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009646:	931a      	str	r3, [sp, #104]	; 0x68
 8009648:	4654      	mov	r4, sl
 800964a:	2205      	movs	r2, #5
 800964c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009650:	4851      	ldr	r0, [pc, #324]	; (8009798 <_svfiprintf_r+0x1ec>)
 8009652:	f7f6 fdc5 	bl	80001e0 <memchr>
 8009656:	9a04      	ldr	r2, [sp, #16]
 8009658:	b9d8      	cbnz	r0, 8009692 <_svfiprintf_r+0xe6>
 800965a:	06d0      	lsls	r0, r2, #27
 800965c:	bf44      	itt	mi
 800965e:	2320      	movmi	r3, #32
 8009660:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009664:	0711      	lsls	r1, r2, #28
 8009666:	bf44      	itt	mi
 8009668:	232b      	movmi	r3, #43	; 0x2b
 800966a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800966e:	f89a 3000 	ldrb.w	r3, [sl]
 8009672:	2b2a      	cmp	r3, #42	; 0x2a
 8009674:	d015      	beq.n	80096a2 <_svfiprintf_r+0xf6>
 8009676:	9a07      	ldr	r2, [sp, #28]
 8009678:	4654      	mov	r4, sl
 800967a:	2000      	movs	r0, #0
 800967c:	f04f 0c0a 	mov.w	ip, #10
 8009680:	4621      	mov	r1, r4
 8009682:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009686:	3b30      	subs	r3, #48	; 0x30
 8009688:	2b09      	cmp	r3, #9
 800968a:	d94e      	bls.n	800972a <_svfiprintf_r+0x17e>
 800968c:	b1b0      	cbz	r0, 80096bc <_svfiprintf_r+0x110>
 800968e:	9207      	str	r2, [sp, #28]
 8009690:	e014      	b.n	80096bc <_svfiprintf_r+0x110>
 8009692:	eba0 0308 	sub.w	r3, r0, r8
 8009696:	fa09 f303 	lsl.w	r3, r9, r3
 800969a:	4313      	orrs	r3, r2
 800969c:	9304      	str	r3, [sp, #16]
 800969e:	46a2      	mov	sl, r4
 80096a0:	e7d2      	b.n	8009648 <_svfiprintf_r+0x9c>
 80096a2:	9b03      	ldr	r3, [sp, #12]
 80096a4:	1d19      	adds	r1, r3, #4
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	9103      	str	r1, [sp, #12]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	bfbb      	ittet	lt
 80096ae:	425b      	neglt	r3, r3
 80096b0:	f042 0202 	orrlt.w	r2, r2, #2
 80096b4:	9307      	strge	r3, [sp, #28]
 80096b6:	9307      	strlt	r3, [sp, #28]
 80096b8:	bfb8      	it	lt
 80096ba:	9204      	strlt	r2, [sp, #16]
 80096bc:	7823      	ldrb	r3, [r4, #0]
 80096be:	2b2e      	cmp	r3, #46	; 0x2e
 80096c0:	d10c      	bne.n	80096dc <_svfiprintf_r+0x130>
 80096c2:	7863      	ldrb	r3, [r4, #1]
 80096c4:	2b2a      	cmp	r3, #42	; 0x2a
 80096c6:	d135      	bne.n	8009734 <_svfiprintf_r+0x188>
 80096c8:	9b03      	ldr	r3, [sp, #12]
 80096ca:	1d1a      	adds	r2, r3, #4
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	9203      	str	r2, [sp, #12]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	bfb8      	it	lt
 80096d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80096d8:	3402      	adds	r4, #2
 80096da:	9305      	str	r3, [sp, #20]
 80096dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80097a8 <_svfiprintf_r+0x1fc>
 80096e0:	7821      	ldrb	r1, [r4, #0]
 80096e2:	2203      	movs	r2, #3
 80096e4:	4650      	mov	r0, sl
 80096e6:	f7f6 fd7b 	bl	80001e0 <memchr>
 80096ea:	b140      	cbz	r0, 80096fe <_svfiprintf_r+0x152>
 80096ec:	2340      	movs	r3, #64	; 0x40
 80096ee:	eba0 000a 	sub.w	r0, r0, sl
 80096f2:	fa03 f000 	lsl.w	r0, r3, r0
 80096f6:	9b04      	ldr	r3, [sp, #16]
 80096f8:	4303      	orrs	r3, r0
 80096fa:	3401      	adds	r4, #1
 80096fc:	9304      	str	r3, [sp, #16]
 80096fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009702:	4826      	ldr	r0, [pc, #152]	; (800979c <_svfiprintf_r+0x1f0>)
 8009704:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009708:	2206      	movs	r2, #6
 800970a:	f7f6 fd69 	bl	80001e0 <memchr>
 800970e:	2800      	cmp	r0, #0
 8009710:	d038      	beq.n	8009784 <_svfiprintf_r+0x1d8>
 8009712:	4b23      	ldr	r3, [pc, #140]	; (80097a0 <_svfiprintf_r+0x1f4>)
 8009714:	bb1b      	cbnz	r3, 800975e <_svfiprintf_r+0x1b2>
 8009716:	9b03      	ldr	r3, [sp, #12]
 8009718:	3307      	adds	r3, #7
 800971a:	f023 0307 	bic.w	r3, r3, #7
 800971e:	3308      	adds	r3, #8
 8009720:	9303      	str	r3, [sp, #12]
 8009722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009724:	4433      	add	r3, r6
 8009726:	9309      	str	r3, [sp, #36]	; 0x24
 8009728:	e767      	b.n	80095fa <_svfiprintf_r+0x4e>
 800972a:	fb0c 3202 	mla	r2, ip, r2, r3
 800972e:	460c      	mov	r4, r1
 8009730:	2001      	movs	r0, #1
 8009732:	e7a5      	b.n	8009680 <_svfiprintf_r+0xd4>
 8009734:	2300      	movs	r3, #0
 8009736:	3401      	adds	r4, #1
 8009738:	9305      	str	r3, [sp, #20]
 800973a:	4619      	mov	r1, r3
 800973c:	f04f 0c0a 	mov.w	ip, #10
 8009740:	4620      	mov	r0, r4
 8009742:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009746:	3a30      	subs	r2, #48	; 0x30
 8009748:	2a09      	cmp	r2, #9
 800974a:	d903      	bls.n	8009754 <_svfiprintf_r+0x1a8>
 800974c:	2b00      	cmp	r3, #0
 800974e:	d0c5      	beq.n	80096dc <_svfiprintf_r+0x130>
 8009750:	9105      	str	r1, [sp, #20]
 8009752:	e7c3      	b.n	80096dc <_svfiprintf_r+0x130>
 8009754:	fb0c 2101 	mla	r1, ip, r1, r2
 8009758:	4604      	mov	r4, r0
 800975a:	2301      	movs	r3, #1
 800975c:	e7f0      	b.n	8009740 <_svfiprintf_r+0x194>
 800975e:	ab03      	add	r3, sp, #12
 8009760:	9300      	str	r3, [sp, #0]
 8009762:	462a      	mov	r2, r5
 8009764:	4b0f      	ldr	r3, [pc, #60]	; (80097a4 <_svfiprintf_r+0x1f8>)
 8009766:	a904      	add	r1, sp, #16
 8009768:	4638      	mov	r0, r7
 800976a:	f7fb feff 	bl	800556c <_printf_float>
 800976e:	1c42      	adds	r2, r0, #1
 8009770:	4606      	mov	r6, r0
 8009772:	d1d6      	bne.n	8009722 <_svfiprintf_r+0x176>
 8009774:	89ab      	ldrh	r3, [r5, #12]
 8009776:	065b      	lsls	r3, r3, #25
 8009778:	f53f af2c 	bmi.w	80095d4 <_svfiprintf_r+0x28>
 800977c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800977e:	b01d      	add	sp, #116	; 0x74
 8009780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009784:	ab03      	add	r3, sp, #12
 8009786:	9300      	str	r3, [sp, #0]
 8009788:	462a      	mov	r2, r5
 800978a:	4b06      	ldr	r3, [pc, #24]	; (80097a4 <_svfiprintf_r+0x1f8>)
 800978c:	a904      	add	r1, sp, #16
 800978e:	4638      	mov	r0, r7
 8009790:	f7fc f990 	bl	8005ab4 <_printf_i>
 8009794:	e7eb      	b.n	800976e <_svfiprintf_r+0x1c2>
 8009796:	bf00      	nop
 8009798:	0800a46c 	.word	0x0800a46c
 800979c:	0800a476 	.word	0x0800a476
 80097a0:	0800556d 	.word	0x0800556d
 80097a4:	080094f7 	.word	0x080094f7
 80097a8:	0800a472 	.word	0x0800a472

080097ac <__sfputc_r>:
 80097ac:	6893      	ldr	r3, [r2, #8]
 80097ae:	3b01      	subs	r3, #1
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	b410      	push	{r4}
 80097b4:	6093      	str	r3, [r2, #8]
 80097b6:	da08      	bge.n	80097ca <__sfputc_r+0x1e>
 80097b8:	6994      	ldr	r4, [r2, #24]
 80097ba:	42a3      	cmp	r3, r4
 80097bc:	db01      	blt.n	80097c2 <__sfputc_r+0x16>
 80097be:	290a      	cmp	r1, #10
 80097c0:	d103      	bne.n	80097ca <__sfputc_r+0x1e>
 80097c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097c6:	f7fd bcf1 	b.w	80071ac <__swbuf_r>
 80097ca:	6813      	ldr	r3, [r2, #0]
 80097cc:	1c58      	adds	r0, r3, #1
 80097ce:	6010      	str	r0, [r2, #0]
 80097d0:	7019      	strb	r1, [r3, #0]
 80097d2:	4608      	mov	r0, r1
 80097d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097d8:	4770      	bx	lr

080097da <__sfputs_r>:
 80097da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097dc:	4606      	mov	r6, r0
 80097de:	460f      	mov	r7, r1
 80097e0:	4614      	mov	r4, r2
 80097e2:	18d5      	adds	r5, r2, r3
 80097e4:	42ac      	cmp	r4, r5
 80097e6:	d101      	bne.n	80097ec <__sfputs_r+0x12>
 80097e8:	2000      	movs	r0, #0
 80097ea:	e007      	b.n	80097fc <__sfputs_r+0x22>
 80097ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097f0:	463a      	mov	r2, r7
 80097f2:	4630      	mov	r0, r6
 80097f4:	f7ff ffda 	bl	80097ac <__sfputc_r>
 80097f8:	1c43      	adds	r3, r0, #1
 80097fa:	d1f3      	bne.n	80097e4 <__sfputs_r+0xa>
 80097fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009800 <_vfiprintf_r>:
 8009800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009804:	460d      	mov	r5, r1
 8009806:	b09d      	sub	sp, #116	; 0x74
 8009808:	4614      	mov	r4, r2
 800980a:	4698      	mov	r8, r3
 800980c:	4606      	mov	r6, r0
 800980e:	b118      	cbz	r0, 8009818 <_vfiprintf_r+0x18>
 8009810:	6983      	ldr	r3, [r0, #24]
 8009812:	b90b      	cbnz	r3, 8009818 <_vfiprintf_r+0x18>
 8009814:	f7fe fd1e 	bl	8008254 <__sinit>
 8009818:	4b89      	ldr	r3, [pc, #548]	; (8009a40 <_vfiprintf_r+0x240>)
 800981a:	429d      	cmp	r5, r3
 800981c:	d11b      	bne.n	8009856 <_vfiprintf_r+0x56>
 800981e:	6875      	ldr	r5, [r6, #4]
 8009820:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009822:	07d9      	lsls	r1, r3, #31
 8009824:	d405      	bmi.n	8009832 <_vfiprintf_r+0x32>
 8009826:	89ab      	ldrh	r3, [r5, #12]
 8009828:	059a      	lsls	r2, r3, #22
 800982a:	d402      	bmi.n	8009832 <_vfiprintf_r+0x32>
 800982c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800982e:	f7ff f922 	bl	8008a76 <__retarget_lock_acquire_recursive>
 8009832:	89ab      	ldrh	r3, [r5, #12]
 8009834:	071b      	lsls	r3, r3, #28
 8009836:	d501      	bpl.n	800983c <_vfiprintf_r+0x3c>
 8009838:	692b      	ldr	r3, [r5, #16]
 800983a:	b9eb      	cbnz	r3, 8009878 <_vfiprintf_r+0x78>
 800983c:	4629      	mov	r1, r5
 800983e:	4630      	mov	r0, r6
 8009840:	f7fd fd06 	bl	8007250 <__swsetup_r>
 8009844:	b1c0      	cbz	r0, 8009878 <_vfiprintf_r+0x78>
 8009846:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009848:	07dc      	lsls	r4, r3, #31
 800984a:	d50e      	bpl.n	800986a <_vfiprintf_r+0x6a>
 800984c:	f04f 30ff 	mov.w	r0, #4294967295
 8009850:	b01d      	add	sp, #116	; 0x74
 8009852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009856:	4b7b      	ldr	r3, [pc, #492]	; (8009a44 <_vfiprintf_r+0x244>)
 8009858:	429d      	cmp	r5, r3
 800985a:	d101      	bne.n	8009860 <_vfiprintf_r+0x60>
 800985c:	68b5      	ldr	r5, [r6, #8]
 800985e:	e7df      	b.n	8009820 <_vfiprintf_r+0x20>
 8009860:	4b79      	ldr	r3, [pc, #484]	; (8009a48 <_vfiprintf_r+0x248>)
 8009862:	429d      	cmp	r5, r3
 8009864:	bf08      	it	eq
 8009866:	68f5      	ldreq	r5, [r6, #12]
 8009868:	e7da      	b.n	8009820 <_vfiprintf_r+0x20>
 800986a:	89ab      	ldrh	r3, [r5, #12]
 800986c:	0598      	lsls	r0, r3, #22
 800986e:	d4ed      	bmi.n	800984c <_vfiprintf_r+0x4c>
 8009870:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009872:	f7ff f901 	bl	8008a78 <__retarget_lock_release_recursive>
 8009876:	e7e9      	b.n	800984c <_vfiprintf_r+0x4c>
 8009878:	2300      	movs	r3, #0
 800987a:	9309      	str	r3, [sp, #36]	; 0x24
 800987c:	2320      	movs	r3, #32
 800987e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009882:	f8cd 800c 	str.w	r8, [sp, #12]
 8009886:	2330      	movs	r3, #48	; 0x30
 8009888:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009a4c <_vfiprintf_r+0x24c>
 800988c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009890:	f04f 0901 	mov.w	r9, #1
 8009894:	4623      	mov	r3, r4
 8009896:	469a      	mov	sl, r3
 8009898:	f813 2b01 	ldrb.w	r2, [r3], #1
 800989c:	b10a      	cbz	r2, 80098a2 <_vfiprintf_r+0xa2>
 800989e:	2a25      	cmp	r2, #37	; 0x25
 80098a0:	d1f9      	bne.n	8009896 <_vfiprintf_r+0x96>
 80098a2:	ebba 0b04 	subs.w	fp, sl, r4
 80098a6:	d00b      	beq.n	80098c0 <_vfiprintf_r+0xc0>
 80098a8:	465b      	mov	r3, fp
 80098aa:	4622      	mov	r2, r4
 80098ac:	4629      	mov	r1, r5
 80098ae:	4630      	mov	r0, r6
 80098b0:	f7ff ff93 	bl	80097da <__sfputs_r>
 80098b4:	3001      	adds	r0, #1
 80098b6:	f000 80aa 	beq.w	8009a0e <_vfiprintf_r+0x20e>
 80098ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098bc:	445a      	add	r2, fp
 80098be:	9209      	str	r2, [sp, #36]	; 0x24
 80098c0:	f89a 3000 	ldrb.w	r3, [sl]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	f000 80a2 	beq.w	8009a0e <_vfiprintf_r+0x20e>
 80098ca:	2300      	movs	r3, #0
 80098cc:	f04f 32ff 	mov.w	r2, #4294967295
 80098d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098d4:	f10a 0a01 	add.w	sl, sl, #1
 80098d8:	9304      	str	r3, [sp, #16]
 80098da:	9307      	str	r3, [sp, #28]
 80098dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098e0:	931a      	str	r3, [sp, #104]	; 0x68
 80098e2:	4654      	mov	r4, sl
 80098e4:	2205      	movs	r2, #5
 80098e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098ea:	4858      	ldr	r0, [pc, #352]	; (8009a4c <_vfiprintf_r+0x24c>)
 80098ec:	f7f6 fc78 	bl	80001e0 <memchr>
 80098f0:	9a04      	ldr	r2, [sp, #16]
 80098f2:	b9d8      	cbnz	r0, 800992c <_vfiprintf_r+0x12c>
 80098f4:	06d1      	lsls	r1, r2, #27
 80098f6:	bf44      	itt	mi
 80098f8:	2320      	movmi	r3, #32
 80098fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098fe:	0713      	lsls	r3, r2, #28
 8009900:	bf44      	itt	mi
 8009902:	232b      	movmi	r3, #43	; 0x2b
 8009904:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009908:	f89a 3000 	ldrb.w	r3, [sl]
 800990c:	2b2a      	cmp	r3, #42	; 0x2a
 800990e:	d015      	beq.n	800993c <_vfiprintf_r+0x13c>
 8009910:	9a07      	ldr	r2, [sp, #28]
 8009912:	4654      	mov	r4, sl
 8009914:	2000      	movs	r0, #0
 8009916:	f04f 0c0a 	mov.w	ip, #10
 800991a:	4621      	mov	r1, r4
 800991c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009920:	3b30      	subs	r3, #48	; 0x30
 8009922:	2b09      	cmp	r3, #9
 8009924:	d94e      	bls.n	80099c4 <_vfiprintf_r+0x1c4>
 8009926:	b1b0      	cbz	r0, 8009956 <_vfiprintf_r+0x156>
 8009928:	9207      	str	r2, [sp, #28]
 800992a:	e014      	b.n	8009956 <_vfiprintf_r+0x156>
 800992c:	eba0 0308 	sub.w	r3, r0, r8
 8009930:	fa09 f303 	lsl.w	r3, r9, r3
 8009934:	4313      	orrs	r3, r2
 8009936:	9304      	str	r3, [sp, #16]
 8009938:	46a2      	mov	sl, r4
 800993a:	e7d2      	b.n	80098e2 <_vfiprintf_r+0xe2>
 800993c:	9b03      	ldr	r3, [sp, #12]
 800993e:	1d19      	adds	r1, r3, #4
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	9103      	str	r1, [sp, #12]
 8009944:	2b00      	cmp	r3, #0
 8009946:	bfbb      	ittet	lt
 8009948:	425b      	neglt	r3, r3
 800994a:	f042 0202 	orrlt.w	r2, r2, #2
 800994e:	9307      	strge	r3, [sp, #28]
 8009950:	9307      	strlt	r3, [sp, #28]
 8009952:	bfb8      	it	lt
 8009954:	9204      	strlt	r2, [sp, #16]
 8009956:	7823      	ldrb	r3, [r4, #0]
 8009958:	2b2e      	cmp	r3, #46	; 0x2e
 800995a:	d10c      	bne.n	8009976 <_vfiprintf_r+0x176>
 800995c:	7863      	ldrb	r3, [r4, #1]
 800995e:	2b2a      	cmp	r3, #42	; 0x2a
 8009960:	d135      	bne.n	80099ce <_vfiprintf_r+0x1ce>
 8009962:	9b03      	ldr	r3, [sp, #12]
 8009964:	1d1a      	adds	r2, r3, #4
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	9203      	str	r2, [sp, #12]
 800996a:	2b00      	cmp	r3, #0
 800996c:	bfb8      	it	lt
 800996e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009972:	3402      	adds	r4, #2
 8009974:	9305      	str	r3, [sp, #20]
 8009976:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009a5c <_vfiprintf_r+0x25c>
 800997a:	7821      	ldrb	r1, [r4, #0]
 800997c:	2203      	movs	r2, #3
 800997e:	4650      	mov	r0, sl
 8009980:	f7f6 fc2e 	bl	80001e0 <memchr>
 8009984:	b140      	cbz	r0, 8009998 <_vfiprintf_r+0x198>
 8009986:	2340      	movs	r3, #64	; 0x40
 8009988:	eba0 000a 	sub.w	r0, r0, sl
 800998c:	fa03 f000 	lsl.w	r0, r3, r0
 8009990:	9b04      	ldr	r3, [sp, #16]
 8009992:	4303      	orrs	r3, r0
 8009994:	3401      	adds	r4, #1
 8009996:	9304      	str	r3, [sp, #16]
 8009998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800999c:	482c      	ldr	r0, [pc, #176]	; (8009a50 <_vfiprintf_r+0x250>)
 800999e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80099a2:	2206      	movs	r2, #6
 80099a4:	f7f6 fc1c 	bl	80001e0 <memchr>
 80099a8:	2800      	cmp	r0, #0
 80099aa:	d03f      	beq.n	8009a2c <_vfiprintf_r+0x22c>
 80099ac:	4b29      	ldr	r3, [pc, #164]	; (8009a54 <_vfiprintf_r+0x254>)
 80099ae:	bb1b      	cbnz	r3, 80099f8 <_vfiprintf_r+0x1f8>
 80099b0:	9b03      	ldr	r3, [sp, #12]
 80099b2:	3307      	adds	r3, #7
 80099b4:	f023 0307 	bic.w	r3, r3, #7
 80099b8:	3308      	adds	r3, #8
 80099ba:	9303      	str	r3, [sp, #12]
 80099bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099be:	443b      	add	r3, r7
 80099c0:	9309      	str	r3, [sp, #36]	; 0x24
 80099c2:	e767      	b.n	8009894 <_vfiprintf_r+0x94>
 80099c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80099c8:	460c      	mov	r4, r1
 80099ca:	2001      	movs	r0, #1
 80099cc:	e7a5      	b.n	800991a <_vfiprintf_r+0x11a>
 80099ce:	2300      	movs	r3, #0
 80099d0:	3401      	adds	r4, #1
 80099d2:	9305      	str	r3, [sp, #20]
 80099d4:	4619      	mov	r1, r3
 80099d6:	f04f 0c0a 	mov.w	ip, #10
 80099da:	4620      	mov	r0, r4
 80099dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099e0:	3a30      	subs	r2, #48	; 0x30
 80099e2:	2a09      	cmp	r2, #9
 80099e4:	d903      	bls.n	80099ee <_vfiprintf_r+0x1ee>
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d0c5      	beq.n	8009976 <_vfiprintf_r+0x176>
 80099ea:	9105      	str	r1, [sp, #20]
 80099ec:	e7c3      	b.n	8009976 <_vfiprintf_r+0x176>
 80099ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80099f2:	4604      	mov	r4, r0
 80099f4:	2301      	movs	r3, #1
 80099f6:	e7f0      	b.n	80099da <_vfiprintf_r+0x1da>
 80099f8:	ab03      	add	r3, sp, #12
 80099fa:	9300      	str	r3, [sp, #0]
 80099fc:	462a      	mov	r2, r5
 80099fe:	4b16      	ldr	r3, [pc, #88]	; (8009a58 <_vfiprintf_r+0x258>)
 8009a00:	a904      	add	r1, sp, #16
 8009a02:	4630      	mov	r0, r6
 8009a04:	f7fb fdb2 	bl	800556c <_printf_float>
 8009a08:	4607      	mov	r7, r0
 8009a0a:	1c78      	adds	r0, r7, #1
 8009a0c:	d1d6      	bne.n	80099bc <_vfiprintf_r+0x1bc>
 8009a0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a10:	07d9      	lsls	r1, r3, #31
 8009a12:	d405      	bmi.n	8009a20 <_vfiprintf_r+0x220>
 8009a14:	89ab      	ldrh	r3, [r5, #12]
 8009a16:	059a      	lsls	r2, r3, #22
 8009a18:	d402      	bmi.n	8009a20 <_vfiprintf_r+0x220>
 8009a1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a1c:	f7ff f82c 	bl	8008a78 <__retarget_lock_release_recursive>
 8009a20:	89ab      	ldrh	r3, [r5, #12]
 8009a22:	065b      	lsls	r3, r3, #25
 8009a24:	f53f af12 	bmi.w	800984c <_vfiprintf_r+0x4c>
 8009a28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a2a:	e711      	b.n	8009850 <_vfiprintf_r+0x50>
 8009a2c:	ab03      	add	r3, sp, #12
 8009a2e:	9300      	str	r3, [sp, #0]
 8009a30:	462a      	mov	r2, r5
 8009a32:	4b09      	ldr	r3, [pc, #36]	; (8009a58 <_vfiprintf_r+0x258>)
 8009a34:	a904      	add	r1, sp, #16
 8009a36:	4630      	mov	r0, r6
 8009a38:	f7fc f83c 	bl	8005ab4 <_printf_i>
 8009a3c:	e7e4      	b.n	8009a08 <_vfiprintf_r+0x208>
 8009a3e:	bf00      	nop
 8009a40:	0800a250 	.word	0x0800a250
 8009a44:	0800a270 	.word	0x0800a270
 8009a48:	0800a230 	.word	0x0800a230
 8009a4c:	0800a46c 	.word	0x0800a46c
 8009a50:	0800a476 	.word	0x0800a476
 8009a54:	0800556d 	.word	0x0800556d
 8009a58:	080097db 	.word	0x080097db
 8009a5c:	0800a472 	.word	0x0800a472

08009a60 <nan>:
 8009a60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009a68 <nan+0x8>
 8009a64:	4770      	bx	lr
 8009a66:	bf00      	nop
 8009a68:	00000000 	.word	0x00000000
 8009a6c:	7ff80000 	.word	0x7ff80000

08009a70 <__sread>:
 8009a70:	b510      	push	{r4, lr}
 8009a72:	460c      	mov	r4, r1
 8009a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a78:	f000 f922 	bl	8009cc0 <_read_r>
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	bfab      	itete	ge
 8009a80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a82:	89a3      	ldrhlt	r3, [r4, #12]
 8009a84:	181b      	addge	r3, r3, r0
 8009a86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a8a:	bfac      	ite	ge
 8009a8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a8e:	81a3      	strhlt	r3, [r4, #12]
 8009a90:	bd10      	pop	{r4, pc}

08009a92 <__swrite>:
 8009a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a96:	461f      	mov	r7, r3
 8009a98:	898b      	ldrh	r3, [r1, #12]
 8009a9a:	05db      	lsls	r3, r3, #23
 8009a9c:	4605      	mov	r5, r0
 8009a9e:	460c      	mov	r4, r1
 8009aa0:	4616      	mov	r6, r2
 8009aa2:	d505      	bpl.n	8009ab0 <__swrite+0x1e>
 8009aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aa8:	2302      	movs	r3, #2
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f000 f8b6 	bl	8009c1c <_lseek_r>
 8009ab0:	89a3      	ldrh	r3, [r4, #12]
 8009ab2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ab6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009aba:	81a3      	strh	r3, [r4, #12]
 8009abc:	4632      	mov	r2, r6
 8009abe:	463b      	mov	r3, r7
 8009ac0:	4628      	mov	r0, r5
 8009ac2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ac6:	f000 b835 	b.w	8009b34 <_write_r>

08009aca <__sseek>:
 8009aca:	b510      	push	{r4, lr}
 8009acc:	460c      	mov	r4, r1
 8009ace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ad2:	f000 f8a3 	bl	8009c1c <_lseek_r>
 8009ad6:	1c43      	adds	r3, r0, #1
 8009ad8:	89a3      	ldrh	r3, [r4, #12]
 8009ada:	bf15      	itete	ne
 8009adc:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ade:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ae2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009ae6:	81a3      	strheq	r3, [r4, #12]
 8009ae8:	bf18      	it	ne
 8009aea:	81a3      	strhne	r3, [r4, #12]
 8009aec:	bd10      	pop	{r4, pc}

08009aee <__sclose>:
 8009aee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009af2:	f000 b84f 	b.w	8009b94 <_close_r>

08009af6 <strncmp>:
 8009af6:	b510      	push	{r4, lr}
 8009af8:	b16a      	cbz	r2, 8009b16 <strncmp+0x20>
 8009afa:	3901      	subs	r1, #1
 8009afc:	1884      	adds	r4, r0, r2
 8009afe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009b02:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d103      	bne.n	8009b12 <strncmp+0x1c>
 8009b0a:	42a0      	cmp	r0, r4
 8009b0c:	d001      	beq.n	8009b12 <strncmp+0x1c>
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d1f5      	bne.n	8009afe <strncmp+0x8>
 8009b12:	1a98      	subs	r0, r3, r2
 8009b14:	bd10      	pop	{r4, pc}
 8009b16:	4610      	mov	r0, r2
 8009b18:	e7fc      	b.n	8009b14 <strncmp+0x1e>

08009b1a <__ascii_wctomb>:
 8009b1a:	b149      	cbz	r1, 8009b30 <__ascii_wctomb+0x16>
 8009b1c:	2aff      	cmp	r2, #255	; 0xff
 8009b1e:	bf85      	ittet	hi
 8009b20:	238a      	movhi	r3, #138	; 0x8a
 8009b22:	6003      	strhi	r3, [r0, #0]
 8009b24:	700a      	strbls	r2, [r1, #0]
 8009b26:	f04f 30ff 	movhi.w	r0, #4294967295
 8009b2a:	bf98      	it	ls
 8009b2c:	2001      	movls	r0, #1
 8009b2e:	4770      	bx	lr
 8009b30:	4608      	mov	r0, r1
 8009b32:	4770      	bx	lr

08009b34 <_write_r>:
 8009b34:	b538      	push	{r3, r4, r5, lr}
 8009b36:	4d07      	ldr	r5, [pc, #28]	; (8009b54 <_write_r+0x20>)
 8009b38:	4604      	mov	r4, r0
 8009b3a:	4608      	mov	r0, r1
 8009b3c:	4611      	mov	r1, r2
 8009b3e:	2200      	movs	r2, #0
 8009b40:	602a      	str	r2, [r5, #0]
 8009b42:	461a      	mov	r2, r3
 8009b44:	f7f7 fa52 	bl	8000fec <_write>
 8009b48:	1c43      	adds	r3, r0, #1
 8009b4a:	d102      	bne.n	8009b52 <_write_r+0x1e>
 8009b4c:	682b      	ldr	r3, [r5, #0]
 8009b4e:	b103      	cbz	r3, 8009b52 <_write_r+0x1e>
 8009b50:	6023      	str	r3, [r4, #0]
 8009b52:	bd38      	pop	{r3, r4, r5, pc}
 8009b54:	20001d58 	.word	0x20001d58

08009b58 <__assert_func>:
 8009b58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b5a:	4614      	mov	r4, r2
 8009b5c:	461a      	mov	r2, r3
 8009b5e:	4b09      	ldr	r3, [pc, #36]	; (8009b84 <__assert_func+0x2c>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4605      	mov	r5, r0
 8009b64:	68d8      	ldr	r0, [r3, #12]
 8009b66:	b14c      	cbz	r4, 8009b7c <__assert_func+0x24>
 8009b68:	4b07      	ldr	r3, [pc, #28]	; (8009b88 <__assert_func+0x30>)
 8009b6a:	9100      	str	r1, [sp, #0]
 8009b6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009b70:	4906      	ldr	r1, [pc, #24]	; (8009b8c <__assert_func+0x34>)
 8009b72:	462b      	mov	r3, r5
 8009b74:	f000 f81e 	bl	8009bb4 <fiprintf>
 8009b78:	f000 f8b4 	bl	8009ce4 <abort>
 8009b7c:	4b04      	ldr	r3, [pc, #16]	; (8009b90 <__assert_func+0x38>)
 8009b7e:	461c      	mov	r4, r3
 8009b80:	e7f3      	b.n	8009b6a <__assert_func+0x12>
 8009b82:	bf00      	nop
 8009b84:	20000024 	.word	0x20000024
 8009b88:	0800a47d 	.word	0x0800a47d
 8009b8c:	0800a48a 	.word	0x0800a48a
 8009b90:	0800a4b8 	.word	0x0800a4b8

08009b94 <_close_r>:
 8009b94:	b538      	push	{r3, r4, r5, lr}
 8009b96:	4d06      	ldr	r5, [pc, #24]	; (8009bb0 <_close_r+0x1c>)
 8009b98:	2300      	movs	r3, #0
 8009b9a:	4604      	mov	r4, r0
 8009b9c:	4608      	mov	r0, r1
 8009b9e:	602b      	str	r3, [r5, #0]
 8009ba0:	f7f7 ff57 	bl	8001a52 <_close>
 8009ba4:	1c43      	adds	r3, r0, #1
 8009ba6:	d102      	bne.n	8009bae <_close_r+0x1a>
 8009ba8:	682b      	ldr	r3, [r5, #0]
 8009baa:	b103      	cbz	r3, 8009bae <_close_r+0x1a>
 8009bac:	6023      	str	r3, [r4, #0]
 8009bae:	bd38      	pop	{r3, r4, r5, pc}
 8009bb0:	20001d58 	.word	0x20001d58

08009bb4 <fiprintf>:
 8009bb4:	b40e      	push	{r1, r2, r3}
 8009bb6:	b503      	push	{r0, r1, lr}
 8009bb8:	4601      	mov	r1, r0
 8009bba:	ab03      	add	r3, sp, #12
 8009bbc:	4805      	ldr	r0, [pc, #20]	; (8009bd4 <fiprintf+0x20>)
 8009bbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bc2:	6800      	ldr	r0, [r0, #0]
 8009bc4:	9301      	str	r3, [sp, #4]
 8009bc6:	f7ff fe1b 	bl	8009800 <_vfiprintf_r>
 8009bca:	b002      	add	sp, #8
 8009bcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bd0:	b003      	add	sp, #12
 8009bd2:	4770      	bx	lr
 8009bd4:	20000024 	.word	0x20000024

08009bd8 <_fstat_r>:
 8009bd8:	b538      	push	{r3, r4, r5, lr}
 8009bda:	4d07      	ldr	r5, [pc, #28]	; (8009bf8 <_fstat_r+0x20>)
 8009bdc:	2300      	movs	r3, #0
 8009bde:	4604      	mov	r4, r0
 8009be0:	4608      	mov	r0, r1
 8009be2:	4611      	mov	r1, r2
 8009be4:	602b      	str	r3, [r5, #0]
 8009be6:	f7f7 ff40 	bl	8001a6a <_fstat>
 8009bea:	1c43      	adds	r3, r0, #1
 8009bec:	d102      	bne.n	8009bf4 <_fstat_r+0x1c>
 8009bee:	682b      	ldr	r3, [r5, #0]
 8009bf0:	b103      	cbz	r3, 8009bf4 <_fstat_r+0x1c>
 8009bf2:	6023      	str	r3, [r4, #0]
 8009bf4:	bd38      	pop	{r3, r4, r5, pc}
 8009bf6:	bf00      	nop
 8009bf8:	20001d58 	.word	0x20001d58

08009bfc <_isatty_r>:
 8009bfc:	b538      	push	{r3, r4, r5, lr}
 8009bfe:	4d06      	ldr	r5, [pc, #24]	; (8009c18 <_isatty_r+0x1c>)
 8009c00:	2300      	movs	r3, #0
 8009c02:	4604      	mov	r4, r0
 8009c04:	4608      	mov	r0, r1
 8009c06:	602b      	str	r3, [r5, #0]
 8009c08:	f7f7 ff3f 	bl	8001a8a <_isatty>
 8009c0c:	1c43      	adds	r3, r0, #1
 8009c0e:	d102      	bne.n	8009c16 <_isatty_r+0x1a>
 8009c10:	682b      	ldr	r3, [r5, #0]
 8009c12:	b103      	cbz	r3, 8009c16 <_isatty_r+0x1a>
 8009c14:	6023      	str	r3, [r4, #0]
 8009c16:	bd38      	pop	{r3, r4, r5, pc}
 8009c18:	20001d58 	.word	0x20001d58

08009c1c <_lseek_r>:
 8009c1c:	b538      	push	{r3, r4, r5, lr}
 8009c1e:	4d07      	ldr	r5, [pc, #28]	; (8009c3c <_lseek_r+0x20>)
 8009c20:	4604      	mov	r4, r0
 8009c22:	4608      	mov	r0, r1
 8009c24:	4611      	mov	r1, r2
 8009c26:	2200      	movs	r2, #0
 8009c28:	602a      	str	r2, [r5, #0]
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	f7f7 ff38 	bl	8001aa0 <_lseek>
 8009c30:	1c43      	adds	r3, r0, #1
 8009c32:	d102      	bne.n	8009c3a <_lseek_r+0x1e>
 8009c34:	682b      	ldr	r3, [r5, #0]
 8009c36:	b103      	cbz	r3, 8009c3a <_lseek_r+0x1e>
 8009c38:	6023      	str	r3, [r4, #0]
 8009c3a:	bd38      	pop	{r3, r4, r5, pc}
 8009c3c:	20001d58 	.word	0x20001d58

08009c40 <memmove>:
 8009c40:	4288      	cmp	r0, r1
 8009c42:	b510      	push	{r4, lr}
 8009c44:	eb01 0402 	add.w	r4, r1, r2
 8009c48:	d902      	bls.n	8009c50 <memmove+0x10>
 8009c4a:	4284      	cmp	r4, r0
 8009c4c:	4623      	mov	r3, r4
 8009c4e:	d807      	bhi.n	8009c60 <memmove+0x20>
 8009c50:	1e43      	subs	r3, r0, #1
 8009c52:	42a1      	cmp	r1, r4
 8009c54:	d008      	beq.n	8009c68 <memmove+0x28>
 8009c56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c5e:	e7f8      	b.n	8009c52 <memmove+0x12>
 8009c60:	4402      	add	r2, r0
 8009c62:	4601      	mov	r1, r0
 8009c64:	428a      	cmp	r2, r1
 8009c66:	d100      	bne.n	8009c6a <memmove+0x2a>
 8009c68:	bd10      	pop	{r4, pc}
 8009c6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c72:	e7f7      	b.n	8009c64 <memmove+0x24>

08009c74 <_realloc_r>:
 8009c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c76:	4607      	mov	r7, r0
 8009c78:	4614      	mov	r4, r2
 8009c7a:	460e      	mov	r6, r1
 8009c7c:	b921      	cbnz	r1, 8009c88 <_realloc_r+0x14>
 8009c7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009c82:	4611      	mov	r1, r2
 8009c84:	f7fb bb78 	b.w	8005378 <_malloc_r>
 8009c88:	b922      	cbnz	r2, 8009c94 <_realloc_r+0x20>
 8009c8a:	f7fb fb25 	bl	80052d8 <_free_r>
 8009c8e:	4625      	mov	r5, r4
 8009c90:	4628      	mov	r0, r5
 8009c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c94:	f000 f82d 	bl	8009cf2 <_malloc_usable_size_r>
 8009c98:	42a0      	cmp	r0, r4
 8009c9a:	d20f      	bcs.n	8009cbc <_realloc_r+0x48>
 8009c9c:	4621      	mov	r1, r4
 8009c9e:	4638      	mov	r0, r7
 8009ca0:	f7fb fb6a 	bl	8005378 <_malloc_r>
 8009ca4:	4605      	mov	r5, r0
 8009ca6:	2800      	cmp	r0, #0
 8009ca8:	d0f2      	beq.n	8009c90 <_realloc_r+0x1c>
 8009caa:	4631      	mov	r1, r6
 8009cac:	4622      	mov	r2, r4
 8009cae:	f7fb faed 	bl	800528c <memcpy>
 8009cb2:	4631      	mov	r1, r6
 8009cb4:	4638      	mov	r0, r7
 8009cb6:	f7fb fb0f 	bl	80052d8 <_free_r>
 8009cba:	e7e9      	b.n	8009c90 <_realloc_r+0x1c>
 8009cbc:	4635      	mov	r5, r6
 8009cbe:	e7e7      	b.n	8009c90 <_realloc_r+0x1c>

08009cc0 <_read_r>:
 8009cc0:	b538      	push	{r3, r4, r5, lr}
 8009cc2:	4d07      	ldr	r5, [pc, #28]	; (8009ce0 <_read_r+0x20>)
 8009cc4:	4604      	mov	r4, r0
 8009cc6:	4608      	mov	r0, r1
 8009cc8:	4611      	mov	r1, r2
 8009cca:	2200      	movs	r2, #0
 8009ccc:	602a      	str	r2, [r5, #0]
 8009cce:	461a      	mov	r2, r3
 8009cd0:	f7f7 fea2 	bl	8001a18 <_read>
 8009cd4:	1c43      	adds	r3, r0, #1
 8009cd6:	d102      	bne.n	8009cde <_read_r+0x1e>
 8009cd8:	682b      	ldr	r3, [r5, #0]
 8009cda:	b103      	cbz	r3, 8009cde <_read_r+0x1e>
 8009cdc:	6023      	str	r3, [r4, #0]
 8009cde:	bd38      	pop	{r3, r4, r5, pc}
 8009ce0:	20001d58 	.word	0x20001d58

08009ce4 <abort>:
 8009ce4:	b508      	push	{r3, lr}
 8009ce6:	2006      	movs	r0, #6
 8009ce8:	f000 f834 	bl	8009d54 <raise>
 8009cec:	2001      	movs	r0, #1
 8009cee:	f7f7 fe89 	bl	8001a04 <_exit>

08009cf2 <_malloc_usable_size_r>:
 8009cf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cf6:	1f18      	subs	r0, r3, #4
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	bfbc      	itt	lt
 8009cfc:	580b      	ldrlt	r3, [r1, r0]
 8009cfe:	18c0      	addlt	r0, r0, r3
 8009d00:	4770      	bx	lr

08009d02 <_raise_r>:
 8009d02:	291f      	cmp	r1, #31
 8009d04:	b538      	push	{r3, r4, r5, lr}
 8009d06:	4604      	mov	r4, r0
 8009d08:	460d      	mov	r5, r1
 8009d0a:	d904      	bls.n	8009d16 <_raise_r+0x14>
 8009d0c:	2316      	movs	r3, #22
 8009d0e:	6003      	str	r3, [r0, #0]
 8009d10:	f04f 30ff 	mov.w	r0, #4294967295
 8009d14:	bd38      	pop	{r3, r4, r5, pc}
 8009d16:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009d18:	b112      	cbz	r2, 8009d20 <_raise_r+0x1e>
 8009d1a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009d1e:	b94b      	cbnz	r3, 8009d34 <_raise_r+0x32>
 8009d20:	4620      	mov	r0, r4
 8009d22:	f000 f831 	bl	8009d88 <_getpid_r>
 8009d26:	462a      	mov	r2, r5
 8009d28:	4601      	mov	r1, r0
 8009d2a:	4620      	mov	r0, r4
 8009d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d30:	f000 b818 	b.w	8009d64 <_kill_r>
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d00a      	beq.n	8009d4e <_raise_r+0x4c>
 8009d38:	1c59      	adds	r1, r3, #1
 8009d3a:	d103      	bne.n	8009d44 <_raise_r+0x42>
 8009d3c:	2316      	movs	r3, #22
 8009d3e:	6003      	str	r3, [r0, #0]
 8009d40:	2001      	movs	r0, #1
 8009d42:	e7e7      	b.n	8009d14 <_raise_r+0x12>
 8009d44:	2400      	movs	r4, #0
 8009d46:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	4798      	blx	r3
 8009d4e:	2000      	movs	r0, #0
 8009d50:	e7e0      	b.n	8009d14 <_raise_r+0x12>
	...

08009d54 <raise>:
 8009d54:	4b02      	ldr	r3, [pc, #8]	; (8009d60 <raise+0xc>)
 8009d56:	4601      	mov	r1, r0
 8009d58:	6818      	ldr	r0, [r3, #0]
 8009d5a:	f7ff bfd2 	b.w	8009d02 <_raise_r>
 8009d5e:	bf00      	nop
 8009d60:	20000024 	.word	0x20000024

08009d64 <_kill_r>:
 8009d64:	b538      	push	{r3, r4, r5, lr}
 8009d66:	4d07      	ldr	r5, [pc, #28]	; (8009d84 <_kill_r+0x20>)
 8009d68:	2300      	movs	r3, #0
 8009d6a:	4604      	mov	r4, r0
 8009d6c:	4608      	mov	r0, r1
 8009d6e:	4611      	mov	r1, r2
 8009d70:	602b      	str	r3, [r5, #0]
 8009d72:	f7f7 fe37 	bl	80019e4 <_kill>
 8009d76:	1c43      	adds	r3, r0, #1
 8009d78:	d102      	bne.n	8009d80 <_kill_r+0x1c>
 8009d7a:	682b      	ldr	r3, [r5, #0]
 8009d7c:	b103      	cbz	r3, 8009d80 <_kill_r+0x1c>
 8009d7e:	6023      	str	r3, [r4, #0]
 8009d80:	bd38      	pop	{r3, r4, r5, pc}
 8009d82:	bf00      	nop
 8009d84:	20001d58 	.word	0x20001d58

08009d88 <_getpid_r>:
 8009d88:	f7f7 be24 	b.w	80019d4 <_getpid>

08009d8c <_init>:
 8009d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d8e:	bf00      	nop
 8009d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d92:	bc08      	pop	{r3}
 8009d94:	469e      	mov	lr, r3
 8009d96:	4770      	bx	lr

08009d98 <_fini>:
 8009d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d9a:	bf00      	nop
 8009d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d9e:	bc08      	pop	{r3}
 8009da0:	469e      	mov	lr, r3
 8009da2:	4770      	bx	lr
